{"sha": "63ded0518a35ac9bd259bb961225eae7b4fa737c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZGVkMDUxOGEzNWFjOWJkMjU5YmI5NjEyMjVlYWU3YjRmYTczN2M=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-09-15T00:59:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-09-15T23:13:43Z"}, "message": "Overhaul char_lit().\n\nThis commit does the following.\n\n- Removes parsing support for '\\X12', '\\u123456' and '\\U12345678' char\n  literals. These are no longer valid Rust and rejected by the lexer.\n  (This strange-sounding situation occurs because the parser rescans\n  char literals to compute their value.)\n\n- Rearranges the function so that all the escaped values are handled in\n  a single `match`, and changes the error-handling to use vanilla\n  assert!() and unwrap().", "tree": {"sha": "9b575ff74384c4c030af660da4314cd3ad79def4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b575ff74384c4c030af660da4314cd3ad79def4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ded0518a35ac9bd259bb961225eae7b4fa737c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ded0518a35ac9bd259bb961225eae7b4fa737c", "html_url": "https://github.com/rust-lang/rust/commit/63ded0518a35ac9bd259bb961225eae7b4fa737c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ded0518a35ac9bd259bb961225eae7b4fa737c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81f4964d26683c9a47ff4516a97ab84095d7bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81f4964d26683c9a47ff4516a97ab84095d7bc9", "html_url": "https://github.com/rust-lang/rust/commit/f81f4964d26683c9a47ff4516a97ab84095d7bc9"}], "stats": {"total": 71, "additions": 28, "deletions": 43}, "files": [{"sha": "5aa0efdec11a2565a75323770dbf1817502a6dd0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/63ded0518a35ac9bd259bb961225eae7b4fa737c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ded0518a35ac9bd259bb961225eae7b4fa737c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=63ded0518a35ac9bd259bb961225eae7b4fa737c", "patch": "@@ -286,52 +286,37 @@ pub fn tts_to_parser<'a>(sess: &'a ParseSess,\n pub fn char_lit(lit: &str) -> (char, isize) {\n     use std::char;\n \n-    let mut chars = lit.chars();\n-    match (chars.next(), chars.next()) {\n-        (Some(c), None) if c != '\\\\' => return (c, 1),\n-        (Some('\\\\'), Some(c)) => match c {\n-            '\"' => return ('\"', 2),\n-            'n' => return ('\\n', 2),\n-            'r' => return ('\\r', 2),\n-            't' => return ('\\t', 2),\n-            '\\\\' => return ('\\\\', 2),\n-            '\\'' => return ('\\'', 2),\n-            '0' => return ('\\0', 2),\n-            _ => {}\n-        },\n-        _ => panic!(\"lexer accepted invalid char escape `{}`\", lit)\n-    };\n-\n-    fn esc(len: usize, lit: &str) -> Option<(char, isize)> {\n-        u32::from_str_radix(&lit[2..len], 16).ok()\n-        .and_then(char::from_u32)\n-        .map(|x| (x, len as isize))\n+    // Handle non-escaped chars first.\n+    if lit.as_bytes()[0] != b'\\\\' {\n+        // If the first byte isn't '\\\\' it might part of a multi-byte char, so\n+        // get the char with chars().\n+        let c = lit.chars().next().unwrap();\n+        return (c, 1);\n     }\n \n-    let unicode_escape = || -> Option<(char, isize)> {\n-        if lit.as_bytes()[2] == b'{' {\n-            let idx = lit.find('}').unwrap_or_else(|| {\n-                panic!(\"lexer should have rejected a bad character escape {}\", lit)\n-            });\n-\n-            let subslice = &lit[3..idx];\n-            u32::from_str_radix(subslice, 16).ok()\n-                .and_then(char::from_u32)\n-                .map(|x| (x, subslice.chars().count() as isize + 4))\n-        } else {\n-            esc(6, lit)\n+    // Handle escaped chars.\n+    match lit.as_bytes()[1] as char {\n+        '\"' => ('\"', 2),\n+        'n' => ('\\n', 2),\n+        'r' => ('\\r', 2),\n+        't' => ('\\t', 2),\n+        '\\\\' => ('\\\\', 2),\n+        '\\'' => ('\\'', 2),\n+        '0' => ('\\0', 2),\n+        'x' => {\n+            let v = u32::from_str_radix(&lit[2..4], 16).unwrap();\n+            let c = char::from_u32(v).unwrap();\n+            (c, 4)\n         }\n-    };\n-\n-    // Unicode escapes\n-    return match lit.as_bytes()[1] as char {\n-        'x' | 'X' => esc(4, lit),\n-        'u' => unicode_escape(),\n-        'U' => esc(10, lit),\n-        _ => None,\n-    }.unwrap_or_else(|| {\n-        panic!(\"lexer should have rejected a bad character escape {}\", lit)\n-    })\n+        'u' => {\n+            assert!(lit.as_bytes()[2] == b'{');\n+            let idx = lit.find('}').unwrap();\n+            let v = u32::from_str_radix(&lit[3..idx], 16).unwrap();\n+            let c = char::from_u32(v).unwrap();\n+            (c, (idx + 1) as isize)\n+        }\n+        _ => panic!(\"lexer should have rejected a bad character escape {}\", lit)\n+    }\n }\n \n /// Parse a string representing a string literal into its final form. Does"}]}