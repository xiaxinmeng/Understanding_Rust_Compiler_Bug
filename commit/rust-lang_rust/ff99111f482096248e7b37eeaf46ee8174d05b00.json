{"sha": "ff99111f482096248e7b37eeaf46ee8174d05b00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTkxMTFmNDgyMDk2MjQ4ZTdiMzdlZWFmNDZlZTgxNzRkMDViMDA=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2017-09-29T07:54:55Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2017-09-30T08:33:47Z"}, "message": "address some `FIXME`s whose associated issues were marked as closed\n\nremove FIXME(#13101) since `assert_receiver_is_total_eq` stays.\nremove FIXME(#19649) now that stability markers render.\nremove FIXME(#13642) now the benchmarks were moved.\nremove FIXME(#6220) now that floating points can be formatted.\nremove FIXME(#18248) and write tests for `Rc<str>` and `Rc<[u8]>`\nremove reference to irelevent issues in FIXME(#1697, #2178...)\nupdate FIXME(#5516) to point to getopts issue 7\nupdate FIXME(#7771) to point to RFC 628\nupdate FIXME(#19839) to point to issue 26925", "tree": {"sha": "1bf3d7517214fd8ad4174b259e45f2bc18a9c6ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf3d7517214fd8ad4174b259e45f2bc18a9c6ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff99111f482096248e7b37eeaf46ee8174d05b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff99111f482096248e7b37eeaf46ee8174d05b00", "html_url": "https://github.com/rust-lang/rust/commit/ff99111f482096248e7b37eeaf46ee8174d05b00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff99111f482096248e7b37eeaf46ee8174d05b00/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7041bfab3a83702a8026fb7a18d8ea7d54cc648", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7041bfab3a83702a8026fb7a18d8ea7d54cc648", "html_url": "https://github.com/rust-lang/rust/commit/b7041bfab3a83702a8026fb7a18d8ea7d54cc648"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "94bbaf92ce9b0230a8037a2cc9f3475c1c9c69da", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -926,7 +926,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     }\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {"}, {"sha": "f897feb7afaf65e823714e82791f08f688b75640", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -80,7 +80,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     }\n }\n \n-// FIXME #19839: deriving is too aggressive on the bounds (T doesn't need to be Clone).\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Self {"}, {"sha": "f56aa23a4eb2f83f78b704ff025791bd86e22b00", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -1922,7 +1922,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     }\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {"}, {"sha": "6f5afa9ba993f426afc16e4847047a4334425789", "filename": "src/libcore/benches/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fbenches%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fbenches%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fmem.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -10,7 +10,6 @@\n \n use test::Bencher;\n \n-// FIXME #13642 (these benchmarks should be in another place)\n // Completely miscellaneous language-construct benchmarks.\n // Static/dynamic method dispatch\n "}, {"sha": "3c346f93ffccaadde753c7470fdb1d8e4487b12f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -162,8 +162,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n-    // FIXME #13101: this method is used solely by #[deriving] to\n-    // assert that every component of a type implements #[deriving]\n+    // this method is used solely by #[deriving] to assert\n+    // that every component of a type implements #[deriving]\n     // itself, the current deriving infrastructure means doing this\n     // assertion without using a method on this trait is nearly\n     // impossible."}, {"sha": "c8218172583d6d42f29d79ac0d793a84ab35fdf2", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(deprecated)]\n \n-// FIXME: #6220 Implement floating point formatting\n \n use fmt;\n use ops::{Div, Rem, Sub};"}, {"sha": "6f2f781cc864bcfc66f0c57a54e6cbf3dc577459", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -27,8 +27,6 @@ use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n-// FIXME #19649: intrinsic docs don't render, so these have no docs :(\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::copy_nonoverlapping;\n "}, {"sha": "5039bef631e51257b9dd2b49165da61e785abe2c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -1654,7 +1654,7 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for Split<'a, T, P> where P: FnMut(&T\n     }\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n     fn clone(&self) -> Split<'a, T, P> {\n@@ -2093,7 +2093,7 @@ pub struct Windows<'a, T:'a> {\n     size: usize\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Windows<'a, T> {\n     fn clone(&self) -> Windows<'a, T> {\n@@ -2195,7 +2195,7 @@ pub struct Chunks<'a, T:'a> {\n     size: usize\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Chunks<'a, T> {\n     fn clone(&self) -> Chunks<'a, T> {"}, {"sha": "43ba941f13bfc00908fdfa8df7b6eccd492e8327", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -12,6 +12,7 @@ mod sip;\n \n use std::hash::{Hash, Hasher};\n use std::default::Default;\n+use std::rc::Rc;\n \n struct MyHasher {\n     hash: u64,\n@@ -64,12 +65,14 @@ fn test_writer_hasher() {\n     assert_eq!(hash(& s), 97 + 0xFF);\n     let s: Box<str> = String::from(\"a\").into_boxed_str();\n     assert_eq!(hash(& s), 97 + 0xFF);\n+    let s: Rc<&str> = Rc::new(\"a\");\n+    assert_eq!(hash(&s), 97 + 0xFF);\n     let cs: &[u8] = &[1, 2, 3];\n     assert_eq!(hash(& cs), 9);\n     let cs: Box<[u8]> = Box::new([1, 2, 3]);\n     assert_eq!(hash(& cs), 9);\n-\n-    // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n+    let cs: Rc<[u8]> = Rc::new([1, 2, 3]);\n+    assert_eq!(hash(& cs), 9);\n \n     let ptr = 5_usize as *const i32;\n     assert_eq!(hash(&ptr), 5);"}, {"sha": "81fa0374f549e903f5384737f1d000d6c4a8ba2d", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -731,7 +731,9 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n             }\n         }\n \n-        // FIXME: #5516 should be graphemes not codepoints\n+        // FIXME(https://github.com/rust-lang-nursery/getopts/issues/7)\n+        // should be graphemes not codepoints\n+        //\n         // here we just need to indent the start of the description\n         let rowlen = row.chars().count();\n         if rowlen < 24 {\n@@ -749,14 +751,17 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n             desc_normalized_whitespace.push(' ');\n         }\n \n-        // FIXME: #5516 should be graphemes not codepoints\n+        // FIXME(https://github.com/rust-lang-nursery/getopts/issues/7)\n+        // should be graphemes not codepoints\n         let mut desc_rows = Vec::new();\n         each_split_within(&desc_normalized_whitespace[..], 54, |substr| {\n             desc_rows.push(substr.to_owned());\n             true\n         });\n \n-        // FIXME: #5516 should be graphemes not codepoints\n+        // FIXME(https://github.com/rust-lang-nursery/getopts/issues/7)\n+        // should be graphemes not codepoints\n+        //\n         // wrapped description\n         row.push_str(&desc_rows.join(&desc_sep[..]));\n "}, {"sha": "17ecf79daeebdc4925f9ccb0a790cdcadbfe8ba1", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -543,7 +543,8 @@ impl Clone for Isaac64Rng {\n }\n \n impl Rng for Isaac64Rng {\n-    // FIXME #7771: having next_u32 like this should be unnecessary\n+    // FIXME(https://github.com/rust-lang/rfcs/issues/628)\n+    // having next_u32 like this should be unnecessary\n     #[inline]\n     fn next_u32(&mut self) -> u32 {\n         self.next_u64() as u32"}, {"sha": "82344f0ec09c6ebbff5defbf7f99e197580f4791", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -115,7 +115,8 @@ pub trait Rng: Sized {\n     ///\n     /// This rarely needs to be called directly, prefer `r.gen()` to\n     /// `r.next_u32()`.\n-    // FIXME #7771: Should be implemented in terms of next_u64\n+    // FIXME(https://github.com/rust-lang/rfcs/issues/628)\n+    // Should be implemented in terms of next_u64\n     fn next_u32(&mut self) -> u32;\n \n     /// Return the next random u64."}, {"sha": "2518ba7996cbbb5fcf1541dad1e83380ed342aa1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -916,8 +916,7 @@ impl Stmt_ {\n     }\n }\n \n-// FIXME (pending discussion of #1697, #2178...): local should really be\n-// a refinement on pat.\n+// FIXME: local should really be a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Local {"}, {"sha": "90361786e4fa150f28080482c45b6d8d5fa3328f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -1350,7 +1350,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n@@ -1403,7 +1403,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n@@ -1432,7 +1432,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {"}, {"sha": "93929637e2f1e247eb73c4d2958fddc1fc578aab", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -925,7 +925,7 @@ struct RawBuckets<'a, K, V> {\n     marker: marker::PhantomData<&'a ()>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n     fn clone(&self) -> RawBuckets<'a, K, V> {\n         RawBuckets {\n@@ -976,7 +976,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n unsafe impl<'a, K: Sync, V: Sync> Sync for Iter<'a, K, V> {}\n unsafe impl<'a, K: Sync, V: Sync> Send for Iter<'a, K, V> {}\n \n-// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+// FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {"}, {"sha": "b8322a44d600047e9447c5610c6d1c3f07176011", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff99111f482096248e7b37eeaf46ee8174d05b00/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ff99111f482096248e7b37eeaf46ee8174d05b00", "patch": "@@ -786,8 +786,7 @@ pub enum MacStmtStyle {\n     NoBraces,\n }\n \n-// FIXME (pending discussion of #1697, #2178...): local should really be\n-// a refinement on pat.\n+// FIXME: local should really be a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Local {"}]}