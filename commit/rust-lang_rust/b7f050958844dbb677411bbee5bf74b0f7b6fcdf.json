{"sha": "b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "node_id": "C_kwDOAAsO6NoAKGI3ZjA1MDk1ODg0NGRiYjY3NzQxMWJiZWU1YmY3NGIwZjdiNmZjZGY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T19:37:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T19:37:57Z"}, "message": "Bless mir-opt tests.", "tree": {"sha": "396d514527b5390a42e488bb618d7f7f94b3d76d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/396d514527b5390a42e488bb618d7f7f94b3d76d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "html_url": "https://github.com/rust-lang/rust/commit/b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2dc5c035d2ae59628b1a215f5cbed1dbfdce15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2dc5c035d2ae59628b1a215f5cbed1dbfdce15", "html_url": "https://github.com/rust-lang/rust/commit/2b2dc5c035d2ae59628b1a215f5cbed1dbfdce15"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "450157e64284f74cac6041918f60cdc3e56e8ccb", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "patch": "@@ -4,22 +4,55 @@\n   fn g() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:11:8: 11:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-          _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:12:5: 12:6\n-                                           // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         _2 = main;                       // scope 0 at $DIR/cycle.rs:12:5: 12:12\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:12:5: 12:6\n+-                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:12:12: 12:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:11:8: 13:2\n           return;                          // scope 0 at $DIR/cycle.rs:13:2: 13:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "5e2f70799e41e40d86584e3d6c8ba7b8ff6120d7", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "patch": "@@ -4,22 +4,72 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:16:11: 16:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n++                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n++                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++                     }\n++                 }\n++             }\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-          _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:17:5: 17:6\n-                                           // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         _2 = g;                          // scope 0 at $DIR/cycle.rs:17:5: 17:9\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:17:5: 17:6\n+-                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:17:9: 17:10\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:16:11: 18:2\n           return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n++         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "267f53a8dfe7b4f7b57b6fb1ff6872595b20303a", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b7f050958844dbb677411bbee5bf74b0f7b6fcdf/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=b7f050958844dbb677411bbee5bf74b0f7b6fcdf", "patch": "@@ -4,20 +4,13 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n+          _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n-+                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}]}