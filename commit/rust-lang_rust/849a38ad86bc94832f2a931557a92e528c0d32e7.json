{"sha": "849a38ad86bc94832f2a931557a92e528c0d32e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OWEzOGFkODZiYzk0ODMyZjJhOTMxNTU3YTkyZTUyOGMwZDMyZTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-20T12:09:50Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-20T12:10:37Z"}, "message": "Avoid suggesting traits multiple times.\n\nThis is clearly useless, the user doesn't need to know that they could\nimplement/import `foo::bar::Baz` 4 times.\n\nFixes #21405.", "tree": {"sha": "e43a0a23cd10d5e0282632aab88c1130ed1f23b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43a0a23cd10d5e0282632aab88c1130ed1f23b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849a38ad86bc94832f2a931557a92e528c0d32e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849a38ad86bc94832f2a931557a92e528c0d32e7", "html_url": "https://github.com/rust-lang/rust/commit/849a38ad86bc94832f2a931557a92e528c0d32e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849a38ad86bc94832f2a931557a92e528c0d32e7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada312ffbbfa03ac15c620f7a5702ef29b6e1321", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada312ffbbfa03ac15c620f7a5702ef29b6e1321", "html_url": "https://github.com/rust-lang/rust/commit/ada312ffbbfa03ac15c620f7a5702ef29b6e1321"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "3cf9a1a945668d624e1e8d12c65ab2a21d01366b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/849a38ad86bc94832f2a931557a92e528c0d32e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849a38ad86bc94832f2a931557a92e528c0d32e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=849a38ad86bc94832f2a931557a92e528c0d32e7", "patch": "@@ -145,6 +145,7 @@ fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     if !valid_out_of_scope_traits.is_empty() {\n         let mut candidates = valid_out_of_scope_traits;\n         candidates.sort();\n+        candidates.dedup();\n         let msg = format!(\n             \"methods from traits can only be called if the trait is in scope; \\\n              the following {traits_are} implemented but not in scope, \\\n@@ -172,6 +173,7 @@ fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     if candidates.len() > 0 {\n         // sort from most relevant to least relevant\n         candidates.sort_by(|a, b| a.cmp(b).reverse());\n+        candidates.dedup();\n \n         let msg = format!(\n             \"methods from traits can only be called if the trait is implemented and in scope; \\"}, {"sha": "627fc6f0b05fb16536e95c5b1831b7ccb39053b5", "filename": "src/test/compile-fail/method-suggestion-no-duplication.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/849a38ad86bc94832f2a931557a92e528c0d32e7/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849a38ad86bc94832f2a931557a92e528c0d32e7/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-suggestion-no-duplication.rs?ref=849a38ad86bc94832f2a931557a92e528c0d32e7", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// issue #21405\n+\n+fn foo<F>(f: F) where F: FnMut(usize) {}\n+\n+fn main() {\n+    foo(|s| s.is_empty());\n+    //~^ ERROR does not implement any method\n+    //~^^ HELP #1: `core::slice::SliceExt`\n+    //~^^^ HELP #2: `core::str::StrExt`\n+    //~^^^^ HELP #3: `collections::slice::SliceExt`\n+    //~^^^^^ HELP #4: `collections::str::StrExt`\n+}"}]}