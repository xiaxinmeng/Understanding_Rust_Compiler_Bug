{"sha": "a021330b1de785c5365c36f51f417b9b46fce9bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMjEzMzBiMWRlNzg1YzUzNjVjMzZmNTFmNDE3YjliNDZmY2U5YmI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-28T18:29:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-07T09:28:59Z"}, "message": "Fix vector/array/slice terminology in manual.\n\nFixes #16015.", "tree": {"sha": "7892501bc808aa84936ccd37ae2275c58cd3f41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7892501bc808aa84936ccd37ae2275c58cd3f41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a021330b1de785c5365c36f51f417b9b46fce9bb", "comment_count": 10, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a021330b1de785c5365c36f51f417b9b46fce9bb", "html_url": "https://github.com/rust-lang/rust/commit/a021330b1de785c5365c36f51f417b9b46fce9bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a021330b1de785c5365c36f51f417b9b46fce9bb/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5165321e48c1fd8422803fb40693afab7939c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5165321e48c1fd8422803fb40693afab7939c8c", "html_url": "https://github.com/rust-lang/rust/commit/b5165321e48c1fd8422803fb40693afab7939c8c"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "b3cd5a0ec59fd352cf66181c8f2b7734d6e5d5c9", "filename": "src/doc/rust.md", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a021330b1de785c5365c36f51f417b9b46fce9bb/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a021330b1de785c5365c36f51f417b9b46fce9bb/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=a021330b1de785c5365c36f51f417b9b46fce9bb", "patch": "@@ -3564,34 +3564,36 @@ let (a, b) = p;\n assert!(b != \"world\");\n ~~~~\n \n-### Vector types\n+### Vector, Array, and Slice types\n \n-The vector type constructor represents a homogeneous array of values of a given type.\n-A vector has a fixed size.\n-(Operations like `vec.push` operate solely on owned vectors.)\n-A vector type can be annotated with a _definite_ size, such as `[int, ..10]`.\n-Such a definite-sized vector type is a first-class type, since its size is known statically.\n-A vector without such a size is said to be of _indefinite_ size,\n-and is therefore not a _first-class_ type.\n-An indefinite-size vector can only be instantiated through a pointer type,\n-such as `&[T]` or `Vec<T>`.\n-The kind of a vector type depends on the kind of its element type,\n-as with other simple structural types.\n+Rust has three different types for a list of items:\n \n-Expressions producing vectors of definite size cannot be evaluated in a\n-context expecting a vector of indefinite size; one must copy the\n-definite-sized vector contents into a distinct vector of indefinite size.\n+* `Vec<T>`, a 'vector'\n+* `[T ..N]`, an 'array'\n+* `&[T]`, a 'slice'.\n \n-An example of a vector type and its use:\n+A vector is a heap-allocated list of `T`. A vector has ownership over the data\n+inside of it. It is also able to grow and change in size. It's important to note\n+that `Vec<T>` is a library type, it's not actually part of the core language.\n \n-~~~~\n-let v: &[int] = &[7, 5, 3];\n-let i: int = v[2];\n-assert!(i == 3);\n-~~~~\n+An array has a fixed size, and can be allocated on either the stack or the heap.\n+\n+A slice is a 'view' into a vector or array. It doesn't own the data it points\n+to, it borrows it.\n+\n+An example of each kind:\n+\n+```{rust}\n+let vec: Vec<int>  = vec![1, 2, 3];\n+let arr: [int, ..3] = [1, 2, 3];\n+let s: &[int]      = vec.as_slice();\n+```\n+\n+As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The\n+`vec!` macro is also part of the standard library, rather than the language.\n \n-All in-bounds elements of a vector are always initialized,\n-and access to a vector is always bounds-checked.\n+All in-bounds elements of vectors, arrays, and slices are always initialized,\n+and access to a vector, array, or slice is always bounds-checked.\n \n ### Structure types\n "}]}