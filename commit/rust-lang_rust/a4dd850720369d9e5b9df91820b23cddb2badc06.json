{"sha": "a4dd850720369d9e5b9df91820b23cddb2badc06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZGQ4NTA3MjAzNjlkOWU1YjlkZjkxODIwYjIzY2RkYjJiYWRjMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-26T03:03:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-26T03:03:19Z"}, "message": "Auto merge of #74735 - Aaron1011:fix/wf-impl-self-type, r=estebank\n\nUse the proper span when WF-checking an impl self type", "tree": {"sha": "50e4f01ff68a29ab7502d900de767e92f40dde5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e4f01ff68a29ab7502d900de767e92f40dde5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4dd850720369d9e5b9df91820b23cddb2badc06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dd850720369d9e5b9df91820b23cddb2badc06", "html_url": "https://github.com/rust-lang/rust/commit/a4dd850720369d9e5b9df91820b23cddb2badc06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4dd850720369d9e5b9df91820b23cddb2badc06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5489ca6760420af33ffa361d5c706eb9badf48", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5489ca6760420af33ffa361d5c706eb9badf48", "html_url": "https://github.com/rust-lang/rust/commit/8e5489ca6760420af33ffa361d5c706eb9badf48"}, {"sha": "116ad51c2c931b54c34790f0a56eb012643df987", "url": "https://api.github.com/repos/rust-lang/rust/commits/116ad51c2c931b54c34790f0a56eb012643df987", "html_url": "https://github.com/rust-lang/rust/commit/116ad51c2c931b54c34790f0a56eb012643df987"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "0e445e1e53bba36d23cca707c7a239e0bc2ccbbe", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -300,13 +300,21 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n             trait_ref\n                 .substs\n                 .iter()\n-                .filter(|arg| {\n+                .enumerate()\n+                .filter(|(_, arg)| {\n                     matches!(arg.unpack(), GenericArgKind::Type(..) | GenericArgKind::Const(..))\n                 })\n-                .filter(|arg| !arg.has_escaping_bound_vars())\n-                .map(|arg| {\n+                .filter(|(_, arg)| !arg.has_escaping_bound_vars())\n+                .map(|(i, arg)| {\n+                    let mut new_cause = cause.clone();\n+                    // The first subst is the self ty - use the correct span for it.\n+                    if i == 0 {\n+                        if let Some(hir::ItemKind::Impl { self_ty, .. }) = item.map(|i| &i.kind) {\n+                            new_cause.make_mut().span = self_ty.span;\n+                        }\n+                    }\n                     traits::Obligation::new(\n-                        cause.clone(),\n+                        new_cause,\n                         param_env,\n                         ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n                     )"}, {"sha": "cd18a013628c2875808e91a000bbe0e2865954b8", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -1,12 +1,12 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n-  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:24\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n    |       -------------                       ---- ...because method `eq` references the `Self` type in this parameter\n    |       |\n    |       this trait cannot be made into an object...\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n-   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |                        ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = help: consider moving `eq` to another trait\n "}, {"sha": "e3272e8849f9b23d805864053c8b5bc7369c70c9", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -52,15 +52,15 @@ LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n-  --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16\n    |\n LL | trait NonObjectSafe1: Sized {}\n    |       --------------  ----- ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n ...\n LL | impl Trait for dyn NonObjectSafe1 {}\n-   |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n \n error: aborting due to 5 previous errors\n "}, {"sha": "27e5c606a64a408179d7f68b35eea1886dd77b65", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Bound` is not satisfied\n-  --> $DIR/issue-21837.rs:8:9\n+  --> $DIR/issue-21837.rs:8:20\n    |\n LL | pub struct Foo<T: Bound>(T);\n    |                   ----- required by this bound in `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n-   |         ^^^^^^ the trait `Bound` is not implemented for `T`\n+   |                    ^^^^^^ the trait `Bound` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "071547c945edc1e36e1896ce885f05f995989e6f", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized-trait-impl-self-type.rs:10:17\n+  --> $DIR/unsized-trait-impl-self-type.rs:10:27\n    |\n LL | struct S5<Y>(Y);\n    |           - required by this bound in `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n-   |      -          ^^^^^ doesn't have a size known at compile-time\n+   |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "2dd9b4ef01dbcf620cd6358e5406e9454d796a6a", "filename": "src/test/ui/wf/wf-impl-self-type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.rs?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -0,0 +1,7 @@\n+// Tests that we point at the proper location for an error\n+// involving the self-type of an impl\n+\n+trait Foo {}\n+impl Foo for Option<[u8]> {} //~ ERROR the size for\n+\n+fn main() {}"}, {"sha": "a3a53113b4fda814aa19154494122e0f54670aee", "filename": "src/test/ui/wf/wf-impl-self-type.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4dd850720369d9e5b9df91820b23cddb2badc06/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr?ref=a4dd850720369d9e5b9df91820b23cddb2badc06", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-impl-self-type.rs:5:14\n+   |\n+LL | impl Foo for Option<[u8]> {}\n+   |              ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/libcore/option.rs:LL:COL\n+   |\n+LL | pub enum Option<T> {\n+   |                 - required by this bound in `std::option::Option`\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}