{"sha": "d85df44e8d54f92a23d8734cb05d14c75697a2ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NWRmNDRlOGQ1NGY5MmEyM2Q4NzM0Y2IwNWQxNGM3NTY5N2EyY2E=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-08T21:02:27Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T01:43:10Z"}, "message": "Specialize Rc/Arc::make_mut clones to try to avoid locals\n\nAs we did with `Box`, we can allocate an uninitialized `Rc` or `Arc`\nbeforehand, giving the optimizer a chance to skip the local value for\nregular clones, or avoid any local altogether for `T: Copy`.", "tree": {"sha": "f409737c4e9015048c2117c734002a08e960b120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f409737c4e9015048c2117c734002a08e960b120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d85df44e8d54f92a23d8734cb05d14c75697a2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d85df44e8d54f92a23d8734cb05d14c75697a2ca", "html_url": "https://github.com/rust-lang/rust/commit/d85df44e8d54f92a23d8734cb05d14c75697a2ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d85df44e8d54f92a23d8734cb05d14c75697a2ca/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "html_url": "https://github.com/rust-lang/rust/commit/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "b267377d90a2ed5e2a652e8c2978faef9ecf4cd1", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d85df44e8d54f92a23d8734cb05d14c75697a2ca/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85df44e8d54f92a23d8734cb05d14c75697a2ca/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=d85df44e8d54f92a23d8734cb05d14c75697a2ca", "patch": "@@ -265,6 +265,7 @@ use core::slice::from_raw_parts_mut;\n \n use crate::alloc::{box_free, handle_alloc_error, AllocError, Allocator, Global, Layout};\n use crate::borrow::{Cow, ToOwned};\n+use crate::boxed::WriteCloneIntoRaw;\n use crate::string::String;\n use crate::vec::Vec;\n \n@@ -1037,8 +1038,14 @@ impl<T: Clone> Rc<T> {\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn make_mut(this: &mut Self) -> &mut T {\n         if Rc::strong_count(this) != 1 {\n-            // Gotta clone the data, there are other Rcs\n-            *this = Rc::new((**this).clone())\n+            // Gotta clone the data, there are other Rcs.\n+            // Pre-allocate memory to allow writing the cloned value directly.\n+            let mut rc = Self::new_uninit();\n+            unsafe {\n+                let data = Rc::get_mut_unchecked(&mut rc);\n+                (**this).write_clone_into_raw(data.as_mut_ptr());\n+                *this = rc.assume_init();\n+            }\n         } else if Rc::weak_count(this) != 0 {\n             // Can just steal the data, all that's left is Weaks\n             unsafe {"}, {"sha": "deeb6941fcf8c64b970aba94b28ea4a90527ed20", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d85df44e8d54f92a23d8734cb05d14c75697a2ca/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85df44e8d54f92a23d8734cb05d14c75697a2ca/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=d85df44e8d54f92a23d8734cb05d14c75697a2ca", "patch": "@@ -24,7 +24,7 @@ use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocError, Allocator, Global, Layout};\n use crate::borrow::{Cow, ToOwned};\n-use crate::boxed::Box;\n+use crate::boxed::{Box, WriteCloneIntoRaw};\n use crate::rc::is_dangling;\n use crate::string::String;\n use crate::vec::Vec;\n@@ -1369,8 +1369,14 @@ impl<T: Clone> Arc<T> {\n         // weak count, there's no chance the ArcInner itself could be\n         // deallocated.\n         if this.inner().strong.compare_exchange(1, 0, Acquire, Relaxed).is_err() {\n-            // Another strong pointer exists; clone\n-            *this = Arc::new((**this).clone());\n+            // Another strong pointer exists, so we must clone.\n+            // Pre-allocate memory to allow writing the cloned value directly.\n+            let mut arc = Self::new_uninit();\n+            unsafe {\n+                let data = Arc::get_mut_unchecked(&mut arc);\n+                (**this).write_clone_into_raw(data.as_mut_ptr());\n+                *this = arc.assume_init();\n+            }\n         } else if this.inner().weak.load(Relaxed) != 1 {\n             // Relaxed suffices in the above because this is fundamentally an\n             // optimization: we are always racing with weak pointers being"}]}