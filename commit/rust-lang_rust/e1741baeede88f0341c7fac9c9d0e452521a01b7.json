{"sha": "e1741baeede88f0341c7fac9c9d0e452521a01b7", "node_id": "C_kwDOAAsO6NoAKGUxNzQxYmFlZWRlODhmMDM0MWM3ZmFjOWM5ZDBlNDUyNTIxYTAxYjc", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-12-01T00:41:35Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-12-09T01:24:43Z"}, "message": "Add documentation for LLVM KCFI support\n\nThis commit adds initial documentation for LLVM Kernel Control Flow\nIntegrity (KCFI) support to the Rust compiler (see #105109 and #89653).\n\nCo-authored-by: Miguel Ojeda <ojeda@users.noreply.github.com>", "tree": {"sha": "e38cf904f4ae975d0c85f0ed241cdf29a1ef9b48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38cf904f4ae975d0c85f0ed241cdf29a1ef9b48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1741baeede88f0341c7fac9c9d0e452521a01b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1741baeede88f0341c7fac9c9d0e452521a01b7", "html_url": "https://github.com/rust-lang/rust/commit/e1741baeede88f0341c7fac9c9d0e452521a01b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1741baeede88f0341c7fac9c9d0e452521a01b7/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65698ae9f30f5ad72224edd1884fb4ddd1279366", "url": "https://api.github.com/repos/rust-lang/rust/commits/65698ae9f30f5ad72224edd1884fb4ddd1279366", "html_url": "https://github.com/rust-lang/rust/commit/65698ae9f30f5ad72224edd1884fb4ddd1279366"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "9bbf9e28fffe2bdec384da186e4f2b1eec2f417b", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1741baeede88f0341c7fac9c9d0e452521a01b7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1741baeede88f0341c7fac9c9d0e452521a01b7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=e1741baeede88f0341c7fac9c9d0e452521a01b7", "patch": "@@ -14,6 +14,9 @@ This feature allows for use of one of following sanitizers:\n   forward-edge control flow protection.\n * [HWAddressSanitizer](#hwaddresssanitizer) a memory error detector similar to\n   AddressSanitizer, but based on partial hardware assistance.\n+* [KernelControlFlowIntegrity](#kernelcontrolflowintegrity) LLVM Kernel Control\n+  Flow Integrity (KCFI) provides forward-edge control flow protection for\n+  operating systems kernels.\n * [LeakSanitizer](#leaksanitizer) a run-time memory leak detector.\n * [MemorySanitizer](#memorysanitizer) a detector of uninitialized reads.\n * [MemTagSanitizer](#memtagsanitizer) fast memory error detector based on\n@@ -502,6 +505,32 @@ Registers where the failure occurred (pc 0xaaaae0ae4a98):\n SUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n ```\n \n+# KernelControlFlowIntegrity\n+\n+The LLVM Kernel Control Flow Integrity (CFI) support to the Rust compiler\n+initially provides forward-edge control flow protection for operating systems\n+kernels for Rust-compiled code only by aggregating function pointers in groups\n+identified by their return and parameter types. (See [LLVM commit cff5bef \"KCFI\n+sanitizer\"](https://github.com/llvm/llvm-project/commit/cff5bef948c91e4919de8a5fb9765e0edc13f3de).)\n+\n+Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\n+binaries\" (i.e., for when C or C++ and Rust -compiled code share the same\n+virtual address space) will be provided in later work by defining and using\n+compatible type identifiers (see Type metadata in the design document in the\n+tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n+\n+LLVM KCFI can be enabled with `-Zsanitizer=kcfi`.\n+\n+LLVM KCFI is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+* `x86_64-linux-android`\n+* `x86_64-unknown-linux-gnu`\n+\n+See the [Clang KernelControlFlowIntegrity documentation][clang-kcfi] for more\n+details.\n+\n # LeakSanitizer\n \n LeakSanitizer is run-time memory leak detector.\n@@ -693,6 +722,7 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n [clang-cfi]: https://clang.llvm.org/docs/ControlFlowIntegrity.html\n [clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n+[clang-kcfi]: https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html"}]}