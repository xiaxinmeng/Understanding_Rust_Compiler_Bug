{"sha": "cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZWI5MTcxYjExYjA3OTEwNTlkYmUzZWVkZGJjZmUwMTdhNDcwOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-27T05:24:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-27T05:24:11Z"}, "message": "Auto merge of #59540 - Zoxc:the-arena-2, r=michaelwoerister\n\nUse arenas to avoid Lrc in queries #1\n\nBased on https://github.com/rust-lang/rust/pull/59536.", "tree": {"sha": "380e98215d2856d0e0d8c61be18aa89d3d3fe661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380e98215d2856d0e0d8c61be18aa89d3d3fe661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "html_url": "https://github.com/rust-lang/rust/commit/cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9c016395e7a7ce5b2aaf09e1b10c8dd2744eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9c016395e7a7ce5b2aaf09e1b10c8dd2744eee", "html_url": "https://github.com/rust-lang/rust/commit/ab9c016395e7a7ce5b2aaf09e1b10c8dd2744eee"}, {"sha": "53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "html_url": "https://github.com/rust-lang/rust/commit/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc"}], "stats": {"total": 196, "additions": 107, "deletions": 89}, "files": [{"sha": "1cc6500d0384fde122a9df30a0c290a52e64cb92", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -16,6 +16,48 @@ macro_rules! arena_types {\n             )>,\n             [few] mir_keys: rustc::util::nodemap::DefIdSet,\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n+            [] region_scope_tree: rustc::middle::region::ScopeTree,\n+            [] item_local_set: rustc::util::nodemap::ItemLocalSet,\n+            [decode] mir_const_qualif: rustc_data_structures::bit_set::BitSet<rustc::mir::Local>,\n+            [] trait_impls_of: rustc::ty::trait_def::TraitImpls,\n+            [] dropck_outlives:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        rustc::traits::query::dropck_outlives::DropckOutlivesResult<'tcx>\n+                    >\n+                >,\n+            [] normalize_projection_ty:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        rustc::traits::query::normalize::NormalizationResult<'tcx>\n+                    >\n+                >,\n+            [] implied_outlives_bounds:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        Vec<rustc::traits::query::outlives_bounds::OutlivesBound<'tcx>>\n+                    >\n+                >,\n+            [] type_op_subtype:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, ()>\n+                >,\n+            [] type_op_normalize_poly_fn_sig:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::PolyFnSig<'tcx>>\n+                >,\n+            [] type_op_normalize_fn_sig:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::FnSig<'tcx>>\n+                >,\n+            [] type_op_normalize_predicate:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::Predicate<'tcx>>\n+                >,\n+            [] type_op_normalize_ty:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::Ty<'tcx>>\n+                >,\n         ], $tcx);\n     )\n }"}, {"sha": "fe6b8ac1cdc7ed1f45a3c4f108859bfef0de7004", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -23,7 +23,6 @@\n \n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n@@ -186,7 +185,7 @@ pub struct QueryResponse<'tcx, R> {\n pub type Canonicalized<'gcx, V> = Canonical<'gcx, <V as Lift<'gcx>>::Lifted>;\n \n pub type CanonicalizedQueryResponse<'gcx, T> =\n-    Lrc<Canonical<'gcx, QueryResponse<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n+    &'gcx Canonical<'gcx, QueryResponse<'gcx, <T as Lift<'gcx>>::Lifted>>;\n \n /// Indicates whether or not we were able to prove the query to be\n /// true."}, {"sha": "e605aae0fae0d39490553480f48e65e3e933b48b", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -7,6 +7,7 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n+use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::substitute::substitute_value;\n use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n@@ -17,7 +18,6 @@ use crate::infer::InferCtxtBuilder;\n use crate::infer::{InferCtxt, InferOk, InferResult};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n use crate::traits::query::{Fallible, NoSolution};\n@@ -54,6 +54,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+        Canonical<'gcx, <QueryResponse<'gcx, R> as Lift<'gcx>>::Lifted>: ArenaAllocatable,\n     {\n         self.enter_with_canonical(\n             DUMMY_SP,\n@@ -99,6 +100,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, T>>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+        Canonical<'gcx, <QueryResponse<'gcx, T> as Lift<'gcx>>::Lifted>: ArenaAllocatable,\n     {\n         let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n         let canonical_result = self.canonicalize_response(&query_response);\n@@ -108,7 +110,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             canonical_result\n         );\n \n-        Ok(Lrc::new(canonical_result))\n+        Ok(self.tcx.arena.alloc(canonical_result))\n     }\n \n     /// A version of `make_canonicalized_query_response` that does"}, {"sha": "6900be55769e1d6d1276b3d17032ff9ad5e135ed", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -17,7 +17,6 @@ use crate::middle::region;\n use crate::ty::{self, DefIdTree, TyCtxt, adjustment};\n \n use crate::hir::{self, PatKind};\n-use rustc_data_structures::sync::Lrc;\n use std::rc::Rc;\n use syntax::ptr::P;\n use syntax_pos::Span;\n@@ -272,7 +271,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n-               rvalue_promotable_map: Option<Lrc<ItemLocalSet>>)\n+               rvalue_promotable_map: Option<&'tcx ItemLocalSet>)\n                -> Self\n     {\n         ExprUseVisitor {"}, {"sha": "6ca1e0ea84ac07b94448a77b0e943f56be306ecd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -77,7 +77,6 @@ use syntax_pos::Span;\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n use std::rc::Rc;\n use crate::util::nodemap::ItemLocalSet;\n@@ -290,7 +289,7 @@ pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pub region_scope_tree: &'a region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n-    rvalue_promotable_map: Option<Lrc<ItemLocalSet>>,\n+    rvalue_promotable_map: Option<&'tcx ItemLocalSet>,\n     infcx: Option<&'a InferCtxt<'a, 'gcx, 'tcx>>,\n }\n \n@@ -400,7 +399,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n-               rvalue_promotable_map: Option<Lrc<ItemLocalSet>>)\n+               rvalue_promotable_map: Option<&'tcx ItemLocalSet>)\n                -> MemCategorizationContext<'a, 'tcx, 'tcx> {\n         MemCategorizationContext {\n             tcx,"}, {"sha": "f9491a1e8f4e6f47bbcbd0b222755e049c36275b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -12,7 +12,6 @@ use crate::ty;\n \n use std::mem;\n use std::fmt;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use syntax::source_map;\n use syntax::ast;\n@@ -1329,7 +1328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n }\n \n fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-    -> Lrc<ScopeTree>\n+    -> &'tcx ScopeTree\n {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);\n     if closure_base_def_id != def_id {\n@@ -1371,7 +1370,7 @@ fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n         ScopeTree::default()\n     };\n \n-    Lrc::new(scope_tree)\n+    tcx.arena.alloc(scope_tree)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "eaf9fd1bc7659b89a6fdd363921fc4963b53e689", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -91,7 +91,7 @@ rustc_queries! {\n         /// Maps DefId's that have an associated Mir to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n-        query mir_const_qualif(key: DefId) -> (u8, Lrc<BitSet<mir::Local>>) {\n+        query mir_const_qualif(key: DefId) -> (u8, &'tcx BitSet<mir::Local>) {\n             cache { key.is_local() }\n         }\n \n@@ -174,7 +174,7 @@ rustc_queries! {\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n-        query inferred_outlives_of(_: DefId) -> Lrc<Vec<ty::Predicate<'tcx>>> {}\n+        query inferred_outlives_of(_: DefId) -> &'tcx [ty::Predicate<'tcx>] {}\n \n         /// Maps from the `DefId` of a trait to the list of\n         /// super-predicates. This is a subset of the full list of\n@@ -456,7 +456,7 @@ rustc_queries! {\n \n         /// Per-body `region::ScopeTree`. The `DefId` should be the owner `DefId` for the body;\n         /// in the case of closures, this will be redirected to the enclosing function.\n-        query region_scope_tree(_: DefId) -> Lrc<region::ScopeTree> {}\n+        query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n         query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Mir<'tcx> {\n             no_force\n@@ -504,7 +504,7 @@ rustc_queries! {\n             }\n             cache { true }\n         }\n-        query rvalue_promotable_map(key: DefId) -> Lrc<ItemLocalSet> {\n+        query rvalue_promotable_map(key: DefId) -> &'tcx ItemLocalSet {\n             desc { |tcx|\n                 \"checking which parts of `{}` are promotable to static\",\n                 tcx.def_path_str(key)\n@@ -540,7 +540,7 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        query trait_impls_of(key: DefId) -> Lrc<ty::trait_def::TraitImpls> {\n+        query trait_impls_of(key: DefId) -> &'tcx ty::trait_def::TraitImpls {\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }\n         query specialization_graph_of(_: DefId) -> &'tcx specialization_graph::Graph {}\n@@ -892,7 +892,7 @@ rustc_queries! {\n         query normalize_projection_ty(\n             goal: CanonicalProjectionGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -910,7 +910,7 @@ rustc_queries! {\n         query implied_outlives_bounds(\n             goal: CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -921,7 +921,7 @@ rustc_queries! {\n         query dropck_outlives(\n             goal: CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -940,7 +940,7 @@ rustc_queries! {\n         query evaluate_goal(\n             goal: traits::ChalkCanonicalGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution\n         > {\n             no_force\n@@ -951,7 +951,7 @@ rustc_queries! {\n         query type_op_ascribe_user_type(\n             goal: CanonicalTypeOpAscribeUserTypeGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -962,7 +962,7 @@ rustc_queries! {\n         query type_op_eq(\n             goal: CanonicalTypeOpEqGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -973,7 +973,7 @@ rustc_queries! {\n         query type_op_subtype(\n             goal: CanonicalTypeOpSubtypeGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -984,7 +984,7 @@ rustc_queries! {\n         query type_op_prove_predicate(\n             goal: CanonicalTypeOpProvePredicateGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -995,7 +995,7 @@ rustc_queries! {\n         query type_op_normalize_ty(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Ty<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Ty<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1006,7 +1006,7 @@ rustc_queries! {\n         query type_op_normalize_predicate(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::Predicate<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::Predicate<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1017,7 +1017,7 @@ rustc_queries! {\n         query type_op_normalize_poly_fn_sig(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::PolyFnSig<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::PolyFnSig<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1028,7 +1028,7 @@ rustc_queries! {\n         query type_op_normalize_fn_sig(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::FnSig<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::FnSig<'tcx>>>,\n             NoSolution,\n         > {\n             no_force"}, {"sha": "f6bfd90668aa4123edfe2b0e5f8162c49114aa7b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -1120,11 +1120,7 @@ pub struct CratePredicatesMap<'tcx> {\n     /// For each struct with outlive bounds, maps to a vector of the\n     /// predicate of its outlive bounds. If an item has no outlives\n     /// bounds, it will have no entry.\n-    pub predicates: FxHashMap<DefId, Lrc<Vec<ty::Predicate<'tcx>>>>,\n-\n-    /// An empty vector, useful for cloning.\n-    #[stable_hasher(ignore)]\n-    pub empty_predicate: Lrc<Vec<ty::Predicate<'tcx>>>,\n+    pub predicates: FxHashMap<DefId, &'tcx [ty::Predicate<'tcx>]>,\n }\n \n impl<'tcx> AsRef<Predicate<'tcx>> for Predicate<'tcx> {"}, {"sha": "a0b409bc4004ae85a64d99a3d0b92519dbad9428", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -10,7 +10,6 @@ use crate::ty::{Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n \n /// A trait's definition with type information.\n@@ -151,7 +150,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n // Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_id: DefId)\n-                                                -> Lrc<TraitImpls> {\n+                                                -> &'tcx TraitImpls {\n     let mut impls = TraitImpls::default();\n \n     {\n@@ -188,7 +187,7 @@ pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    Lrc::new(impls)\n+    tcx.arena.alloc(impls)\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for TraitImpls {"}, {"sha": "65a550b1b8914a821534615834e3eaa9b1febcae", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -228,7 +228,7 @@ pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     // Some in `borrowck_fn` and cleared later\n     tables: &'a ty::TypeckTables<'tcx>,\n \n-    region_scope_tree: Lrc<region::ScopeTree>,\n+    region_scope_tree: &'tcx region::ScopeTree,\n \n     owner_def_id: DefId,\n "}, {"sha": "53f06baaa9dd7e3390bb2cf9051fb238131e3530", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -131,7 +131,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         mir\n     }\n     mir_const_qualif => {\n-        (cdata.mir_const_qualif(def_id.index), Lrc::new(BitSet::new_empty(0)))\n+        (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n     }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { Lrc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }"}, {"sha": "54fecb4ad60d96eec724711c7ac31170311ba330", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n use syntax::source_map::CompilerDesugaringKind;\n@@ -811,7 +810,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &mut self,\n         context: Context,\n         name: &str,\n-        scope_tree: &Lrc<ScopeTree>,\n+        scope_tree: &'tcx ScopeTree,\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans,\n@@ -1000,7 +999,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn report_temporary_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n-        scope_tree: &Lrc<ScopeTree>,\n+        scope_tree: &'tcx ScopeTree,\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans,"}, {"sha": "7aed0bace8c0b0e0be6e3847de355a6927df8e35", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -18,7 +18,6 @@ use syntax::ast;\n use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n-use rustc_data_structures::sync::Lrc;\n use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n@@ -32,7 +31,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Identity `InternalSubsts` for use with const-evaluation.\n     pub identity_substs: &'gcx InternalSubsts<'gcx>,\n \n-    pub region_scope_tree: Lrc<region::ScopeTree>,\n+    pub region_scope_tree: &'gcx region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'gcx>,\n \n     /// This is `Constness::Const` if we are compiling a `static`,"}, {"sha": "18ad89be3c30621d1536e39f1b2352b77de800ff", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -7,7 +7,6 @@\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -833,7 +832,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     }\n \n     /// Check a whole const, static initializer or const fn.\n-    fn check_const(&mut self) -> (u8, Lrc<BitSet<Local>>) {\n+    fn check_const(&mut self) -> (u8, &'tcx BitSet<Local>) {\n         debug!(\"const-checking {} {:?}\", self.mode, self.def_id);\n \n         let mir = self.mir;\n@@ -907,8 +906,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        let promoted_temps = Lrc::new(promoted_temps);\n-\n         let mut qualifs = self.qualifs_in_local(RETURN_PLACE);\n \n         // Account for errors in consts by using the\n@@ -917,7 +914,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             qualifs = self.qualifs_in_any_value_of_ty(mir.return_ty());\n         }\n \n-        (qualifs.encode_to_bits(), promoted_temps)\n+        (qualifs.encode_to_bits(), self.tcx.arena.alloc(promoted_temps))\n     }\n }\n \n@@ -1433,7 +1430,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId)\n-                              -> (u8, Lrc<BitSet<Local>>) {\n+                              -> (u8, &'tcx BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before\n@@ -1442,7 +1439,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if mir.return_ty().references_error() {\n         tcx.sess.delay_span_bug(mir.span, \"mir_const_qualif: Mir had errors\");\n-        return (1 << IsNotPromotable::IDX, Lrc::new(BitSet::new_empty(0)));\n+        return (1 << IsNotPromotable::IDX, tcx.arena.alloc(BitSet::new_empty(0)));\n     }\n \n     Checker::new(tcx, def_id, mir, Mode::Const).check_const()"}, {"sha": "ce54035fe67dbe4cf2f918292d1a82a201cfb8a3", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -25,7 +25,6 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::util::nodemap::{ItemLocalSet, HirIdSet};\n use rustc::hir;\n-use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, DUMMY_SP};\n use log::debug;\n use Promotability::*;\n@@ -53,7 +52,7 @@ fn const_is_rvalue_promotable_to_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    def_id: DefId)\n-                                   -> Lrc<ItemLocalSet>\n+                                   -> &'tcx ItemLocalSet\n {\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n@@ -77,7 +76,7 @@ fn rvalue_promotable_map<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let body_id = tcx.hir().body_owned_by(hir_id);\n     let _ = visitor.check_nested_body(body_id);\n \n-    Lrc::new(visitor.result)\n+    tcx.arena.alloc(visitor.result)\n }\n \n struct CheckCrateVisitor<'a, 'tcx: 'a> {"}, {"sha": "04cd632b29793461e345891970dcdec380bca172", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -36,7 +36,6 @@ use rustc::ty::{self, TyCtxt, InferConst};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Kind, UnpackedKind};\n-use rustc_data_structures::sync::Lrc;\n use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n@@ -677,7 +676,7 @@ crate fn evaluate_goal<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     goal: ChalkCanonicalGoal<'tcx>\n ) -> Result<\n-    Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>,\n+    &'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>,\n     traits::query::NoSolution\n > {\n     use crate::lowering::Lower;\n@@ -718,6 +717,6 @@ crate fn evaluate_goal<'a, 'tcx>(\n \n     debug!(\"evaluate_goal: solution = {:?}\", solution);\n \n-    solution.map(|ok| Ok(Lrc::new(ok)))\n-        .unwrap_or(Err(traits::query::NoSolution))\n+    solution.map(|ok| Ok(&*tcx.arena.alloc(ok)))\n+            .unwrap_or(Err(traits::query::NoSolution))\n }"}, {"sha": "737bf6f9e84d565970b3c1e30cf5632f7d578ace", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -7,7 +7,6 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use syntax::source_map::{Span, DUMMY_SP};\n \n crate fn provide(p: &mut Providers<'_>) {\n@@ -21,7 +20,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonical_goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", canonical_goal);\n \n     tcx.infer_ctxt().enter_with_canonical("}, {"sha": "b1688a7fbbb728bdbfdec2e6e41eaf73bb842eae", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -15,8 +15,6 @@ use smallvec::{SmallVec, smallvec};\n use syntax::source_map::DUMMY_SP;\n use rustc::traits::FulfillmentContext;\n \n-use rustc_data_structures::sync::Lrc;\n-\n crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         implied_outlives_bounds,\n@@ -28,7 +26,7 @@ fn implied_outlives_bounds<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n ) -> Result<\n-        Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+        &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>,\n         NoSolution,\n > {\n     tcx.infer_ctxt()"}, {"sha": "3ff04bc2853695a706f1549e07dfaa9e61a84556", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -4,7 +4,6 @@ use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGo\n use rustc::traits::{self, ObligationCause, SelectionContext, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n-use rustc_data_structures::sync::Lrc;\n use std::sync::atomic::Ordering;\n use syntax_pos::DUMMY_SP;\n \n@@ -18,7 +17,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess"}, {"sha": "ea37024b84f5bb58b4aee94406f695bb7b6e34de", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::subst::{Kind, Subst, UserSubsts, UserSelfTy};\n use rustc::ty::{\n     FnSig, Lift, ParamEnv, ParamEnvAnd, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable, Variance,\n };\n-use rustc_data_structures::sync::Lrc;\n use std::fmt;\n use syntax_pos::DUMMY_SP;\n \n@@ -38,7 +37,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn type_op_ascribe_user_type<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserType<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (\n@@ -170,7 +169,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Eq { a, b }) = key.into_parts();\n@@ -200,39 +199,39 @@ where\n fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Subtype { sub, sup }) = key.into_parts();\n@@ -246,7 +245,7 @@ fn type_op_subtype<'tcx>(\n fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, ProvePredicate { predicate }) = key.into_parts();"}, {"sha": "08809917ba2be89655a4cc6a66f0b84d4a32cad3", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -8,15 +8,14 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind, Expr};\n use rustc::middle::region;\n use rustc::ty::{self, Ty};\n-use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n use super::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n \n struct InteriorVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     types: FxHashMap<Ty<'tcx>, usize>,\n-    region_scope_tree: Lrc<region::ScopeTree>,\n+    region_scope_tree: &'gcx region::ScopeTree,\n     expr_count: usize,\n }\n "}, {"sha": "353b9ac6cc30c53e5dbe2643b9f1506c3ec6e990", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -86,7 +86,6 @@ use rustc::ty::{self, Ty};\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::{self, PatKind};\n-use rustc_data_structures::sync::Lrc;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -195,7 +194,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n pub struct RegionCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     pub fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n \n-    pub region_scope_tree: Lrc<region::ScopeTree>,\n+    pub region_scope_tree: &'gcx region::ScopeTree,\n \n     outlives_environment: OutlivesEnvironment<'tcx>,\n "}, {"sha": "e3e2fe7106a08560760f8aecb992078acfd75297", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfeb9171b11b0791059dbe3eeddbcfe017a4708a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=cfeb9171b11b0791059dbe3eeddbcfe017a4708a", "patch": "@@ -23,7 +23,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n fn inferred_outlives_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_def_id: DefId,\n-) -> Lrc<Vec<ty::Predicate<'tcx>>> {\n+) -> &'tcx [ty::Predicate<'tcx>] {\n     let id = tcx\n         .hir()\n         .as_local_hir_id(item_def_id)\n@@ -37,8 +37,8 @@ fn inferred_outlives_of<'a, 'tcx>(\n                 let predicates = crate_map\n                     .predicates\n                     .get(&item_def_id)\n-                    .unwrap_or(&crate_map.empty_predicate)\n-                    .clone();\n+                    .map(|p| *p)\n+                    .unwrap_or(&[]);\n \n                 if tcx.has_attr(item_def_id, \"rustc_outlives\") {\n                     let mut pred: Vec<String> = predicates\n@@ -63,10 +63,10 @@ fn inferred_outlives_of<'a, 'tcx>(\n                 predicates\n             }\n \n-            _ => Lrc::new(Vec::new()),\n+            _ => &[],\n         },\n \n-        _ => Lrc::new(Vec::new()),\n+        _ => &[],\n     }\n }\n \n@@ -96,7 +96,7 @@ fn inferred_outlives_crate<'tcx>(\n     let predicates = global_inferred_outlives\n         .iter()\n         .map(|(&def_id, set)| {\n-            let vec: Vec<ty::Predicate<'tcx>> = set\n+            let predicates = tcx.arena.alloc_from_iter(set\n                 .iter()\n                 .filter_map(\n                     |ty::OutlivesPredicate(kind1, region2)| match kind1.unpack() {\n@@ -115,14 +115,11 @@ fn inferred_outlives_crate<'tcx>(\n                             None\n                         }\n                     },\n-                ).collect();\n-            (def_id, Lrc::new(vec))\n+                ));\n+            (def_id, &*predicates)\n         }).collect();\n \n-    let empty_predicate = Lrc::new(Vec::new());\n-\n     Lrc::new(ty::CratePredicatesMap {\n         predicates,\n-        empty_predicate,\n     })\n }"}]}