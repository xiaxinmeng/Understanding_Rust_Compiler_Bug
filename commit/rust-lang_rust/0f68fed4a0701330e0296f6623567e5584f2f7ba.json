{"sha": "0f68fed4a0701330e0296f6623567e5584f2f7ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjhmZWQ0YTA3MDEzMzBlMDI5NmY2NjIzNTY3ZTU1ODRmMmY3YmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T15:58:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T15:58:46Z"}, "message": "Merge #5209\n\n5209: Fixes to memory usage stats r=matklad a=jonas-schievink\n\nThis brings the unaccounted memory down from 287mb to 250mb, and displays memory used by VFS and \"other\" allocations.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "808d5eda0675d14f32af44ff206eca8bda976846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808d5eda0675d14f32af44ff206eca8bda976846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f68fed4a0701330e0296f6623567e5584f2f7ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/1W2CRBK7hj4Ov3rIwAAdHIIAFeUPSJ2QBbHhtlFKzV9wgwO\nRS17rPNbELkaLdt2ZJjnfFqoO2OiydY1fqX7rDdItA+D09MTohibywyGlb94TyWn\n6x7lenUBe2HhNEnC0kiQYof5qSdyv6ZvIINElRVTkLHACeAo2waG52dBz4kXPCuD\n47fyC+wQIxFnimz4d8POnqvPk+bIU4yvfgeefc76Qk2VLChHTskGQZzxguvEsGm/\nClDwz2usQ5yq4DfqXlGG0TbHSvFkl4qeRi2TtwFOK9XOvPGqG0vBuIaj6EcZ1PRk\nDFWvJA+4FsReN4untq7l21ab4masGJzHrZ5HyCjp1QV8ZXvRnfQyzseJKhIiMi8=\n=Iekz\n-----END PGP SIGNATURE-----\n", "payload": "tree 808d5eda0675d14f32af44ff206eca8bda976846\nparent dceec6176b49f886b94f1e149887fc9542702971\nparent f01e7e3601423e176e16c66aebbe6aca541a5731\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593791926 +0000\ncommitter GitHub <noreply@github.com> 1593791926 +0000\n\nMerge #5209\n\n5209: Fixes to memory usage stats r=matklad a=jonas-schievink\n\nThis brings the unaccounted memory down from 287mb to 250mb, and displays memory used by VFS and \"other\" allocations.\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68fed4a0701330e0296f6623567e5584f2f7ba", "html_url": "https://github.com/rust-lang/rust/commit/0f68fed4a0701330e0296f6623567e5584f2f7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f68fed4a0701330e0296f6623567e5584f2f7ba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dceec6176b49f886b94f1e149887fc9542702971", "url": "https://api.github.com/repos/rust-lang/rust/commits/dceec6176b49f886b94f1e149887fc9542702971", "html_url": "https://github.com/rust-lang/rust/commit/dceec6176b49f886b94f1e149887fc9542702971"}, {"sha": "f01e7e3601423e176e16c66aebbe6aca541a5731", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01e7e3601423e176e16c66aebbe6aca541a5731", "html_url": "https://github.com/rust-lang/rust/commit/f01e7e3601423e176e16c66aebbe6aca541a5731"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "2504d7a338896f7d6d0cfc28ad54620c28185933", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0f68fed4a0701330e0296f6623567e5584f2f7ba/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68fed4a0701330e0296f6623567e5584f2f7ba/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=0f68fed4a0701330e0296f6623567e5584f2f7ba", "patch": "@@ -191,12 +191,10 @@ impl RootDatabase {\n \n             // AstDatabase\n             hir::db::AstIdMapQuery\n-            hir::db::InternMacroQuery\n             hir::db::MacroArgQuery\n             hir::db::MacroDefQuery\n             hir::db::ParseMacroQuery\n             hir::db::MacroExpandQuery\n-            hir::db::InternEagerExpansionQuery\n \n             // DefDatabase\n             hir::db::ItemTreeQuery\n@@ -221,17 +219,6 @@ impl RootDatabase {\n             hir::db::DocumentationQuery\n             hir::db::ImportMapQuery\n \n-            // InternDatabase\n-            hir::db::InternFunctionQuery\n-            hir::db::InternStructQuery\n-            hir::db::InternUnionQuery\n-            hir::db::InternEnumQuery\n-            hir::db::InternConstQuery\n-            hir::db::InternStaticQuery\n-            hir::db::InternTraitQuery\n-            hir::db::InternTypeAliasQuery\n-            hir::db::InternImplQuery\n-\n             // HirDatabase\n             hir::db::InferQueryQuery\n             hir::db::TyQuery\n@@ -246,10 +233,6 @@ impl RootDatabase {\n             hir::db::InherentImplsInCrateQuery\n             hir::db::TraitImplsInCrateQuery\n             hir::db::TraitImplsInDepsQuery\n-            hir::db::InternTypeCtorQuery\n-            hir::db::InternTypeParamIdQuery\n-            hir::db::InternChalkImplQuery\n-            hir::db::InternAssocTyValueQuery\n             hir::db::AssociatedTyDataQuery\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n@@ -264,6 +247,36 @@ impl RootDatabase {\n             // LineIndexDatabase\n             crate::LineIndexQuery\n         ];\n+\n+        // To collect interned data, we need to bump the revision counter by performing a synthetic\n+        // write.\n+        // We do this after collecting the non-interned queries to correctly attribute memory used\n+        // by interned data.\n+        self.runtime.synthetic_write(Durability::HIGH);\n+\n+        sweep_each_query![\n+            // AstDatabase\n+            hir::db::InternMacroQuery\n+            hir::db::InternEagerExpansionQuery\n+\n+            // InternDatabase\n+            hir::db::InternFunctionQuery\n+            hir::db::InternStructQuery\n+            hir::db::InternUnionQuery\n+            hir::db::InternEnumQuery\n+            hir::db::InternConstQuery\n+            hir::db::InternStaticQuery\n+            hir::db::InternTraitQuery\n+            hir::db::InternTypeAliasQuery\n+            hir::db::InternImplQuery\n+\n+            // HirDatabase\n+            hir::db::InternTypeCtorQuery\n+            hir::db::InternTypeParamIdQuery\n+            hir::db::InternChalkImplQuery\n+            hir::db::InternAssocTyValueQuery\n+        ];\n+\n         acc.sort_by_key(|it| std::cmp::Reverse(it.1));\n         acc\n     }"}, {"sha": "846264046970b2707649a09f8e265eed0570200c", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f68fed4a0701330e0296f6623567e5584f2f7ba/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68fed4a0701330e0296f6623567e5584f2f7ba/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=0f68fed4a0701330e0296f6623567e5584f2f7ba", "patch": "@@ -273,12 +273,22 @@ pub fn analysis_stats(\n     println!(\"Total: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n \n     if memory_usage {\n-        for (name, bytes) in host.per_query_memory_usage() {\n-            println!(\"{:>8} {}\", bytes, name)\n-        }\n+        let mut mem = host.per_query_memory_usage();\n+\n+        let before = ra_prof::memory_usage();\n+        drop(vfs);\n+        let vfs = before.allocated - ra_prof::memory_usage().allocated;\n+        mem.push((\"VFS\".into(), vfs));\n+\n         let before = ra_prof::memory_usage();\n         drop(host);\n-        println!(\"leftover: {}\", before.allocated - ra_prof::memory_usage().allocated)\n+        mem.push((\"Unaccounted\".into(), before.allocated - ra_prof::memory_usage().allocated));\n+\n+        mem.push((\"Remaining\".into(), ra_prof::memory_usage().allocated));\n+\n+        for (name, bytes) in mem {\n+            println!(\"{:>8} {}\", bytes, name)\n+        }\n     }\n \n     Ok(())"}]}