{"sha": "da89dbb41af5fd9f417b30e09451640d68fb50af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODlkYmI0MWFmNWZkOWY0MTdiMzBlMDk0NTE2NDBkNjhmYjUwYWY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-17T23:30:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T23:30:20Z"}, "message": "Rollup merge of #80046 - camelid:diag-docs, r=lcnr\n\nAdd more documentation to `Diagnostic` and `DiagnosticBuilder`\n\ncc `@estebank`", "tree": {"sha": "93136a3687b446fb63d7a59c4b3085c6649231e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93136a3687b446fb63d7a59c4b3085c6649231e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da89dbb41af5fd9f417b30e09451640d68fb50af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2+oMCRBK7hj4Ov3rIwAAdHIIAH55HClpJvcLotJVNP0MgfGU\nXuCpOl2otCA0mcCc9rGuWRCuX77b4XUb77Lqvkqn5Gb915mftWIjWJunQ2+1ej/s\nws3914ZqvK8rWiuUuCH5OCZTCpautKfz3e3+Z0a1PqHr8Cs8Dh8914s5jSPIeN6c\nbviV6tntcAHMS08hdoXNFT3e94lopTFlivXVwNhOjHHBmBoddCtzd62yJ4ghC1EW\nPpjqJc42p8sb31iIHvmyQ5Qmvc/9SXam+GEG6TkOOr3v+VR65LfKNuMQuwE2ZNhG\njTqOjWZGJKbK17sF0IKETYoZKVUwxpa/n7zw9HkcD37idYgZpjJQ4AolnEMa3NM=\n=N9sn\n-----END PGP SIGNATURE-----\n", "payload": "tree 93136a3687b446fb63d7a59c4b3085c6649231e2\nparent a4b95ee517c165658f1774d6a55f9e60a526140e\nparent 10487cd7840590c897ead9172bf9c6b22ee6f0a6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608247820 +0100\ncommitter GitHub <noreply@github.com> 1608247820 +0100\n\nRollup merge of #80046 - camelid:diag-docs, r=lcnr\n\nAdd more documentation to `Diagnostic` and `DiagnosticBuilder`\n\ncc `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da89dbb41af5fd9f417b30e09451640d68fb50af", "html_url": "https://github.com/rust-lang/rust/commit/da89dbb41af5fd9f417b30e09451640d68fb50af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da89dbb41af5fd9f417b30e09451640d68fb50af/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b95ee517c165658f1774d6a55f9e60a526140e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b95ee517c165658f1774d6a55f9e60a526140e", "html_url": "https://github.com/rust-lang/rust/commit/a4b95ee517c165658f1774d6a55f9e60a526140e"}, {"sha": "10487cd7840590c897ead9172bf9c6b22ee6f0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/10487cd7840590c897ead9172bf9c6b22ee6f0a6", "html_url": "https://github.com/rust-lang/rust/commit/10487cd7840590c897ead9172bf9c6b22ee6f0a6"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "538e1a59ab8d98d4032446f8bebdbde679f21185", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=da89dbb41af5fd9f417b30e09451640d68fb50af", "patch": "@@ -30,7 +30,8 @@ pub enum DiagnosticId {\n     Lint { name: String, has_future_breakage: bool },\n }\n \n-/// For example a note attached to an error.\n+/// A \"sub\"-diagnostic attached to a parent diagnostic.\n+/// For example, a note attached to an error.\n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub struct SubDiagnostic {\n     pub level: Level,\n@@ -124,6 +125,7 @@ impl Diagnostic {\n         self.level = Level::Cancelled;\n     }\n \n+    /// Check if this diagnostic [was cancelled][Self::cancel()].\n     pub fn cancelled(&self) -> bool {\n         self.level == Level::Cancelled\n     }\n@@ -164,7 +166,7 @@ impl Diagnostic {\n         self.note_expected_found_extra(expected_label, expected, found_label, found, &\"\", &\"\")\n     }\n \n-    pub fn note_unsuccessfull_coercion(\n+    pub fn note_unsuccessful_coercion(\n         &mut self,\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n@@ -241,6 +243,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Add a note attached to this diagnostic.\n     pub fn note(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self\n@@ -252,33 +255,40 @@ impl Diagnostic {\n     }\n \n     /// Prints the span with a note above it.\n+    /// This is like [`Diagnostic::note()`], but it gets its own span.\n     pub fn span_note<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Note, msg, sp.into(), None);\n         self\n     }\n \n+    /// Add a warning attached to this diagnostic.\n     pub fn warn(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Warning, msg, MultiSpan::new(), None);\n         self\n     }\n \n-    /// Prints the span with a warn above it.\n+    /// Prints the span with a warning above it.\n+    /// This is like [`Diagnostic::warn()`], but it gets its own span.\n     pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Warning, msg, sp.into(), None);\n         self\n     }\n \n+    /// Add a help message attached to this diagnostic.\n     pub fn help(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with some help above it.\n+    /// This is like [`Diagnostic::help()`], but it gets its own span.\n     pub fn span_help<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Help, msg, sp.into(), None);\n         self\n     }\n \n+    /// Show a suggestion that has multiple parts to it.\n+    /// In other words, multiple changes need to be applied as part of this suggestion.\n     pub fn multipart_suggestion(\n         &mut self,\n         msg: &str,\n@@ -299,6 +309,8 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Show multiple suggestions that have multiple parts.\n+    /// See also [`Diagnostic::multipart_suggestion()`].\n     pub fn multipart_suggestions(\n         &mut self,\n         msg: &str,\n@@ -382,6 +394,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// [`Diagnostic::span_suggestion()`] but you can set the [`SuggestionStyle`].\n     pub fn span_suggestion_with_style(\n         &mut self,\n         sp: Span,\n@@ -401,6 +414,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Always show the suggested change.\n     pub fn span_suggestion_verbose(\n         &mut self,\n         sp: Span,\n@@ -419,6 +433,7 @@ impl Diagnostic {\n     }\n \n     /// Prints out a message with multiple suggested edits of the code.\n+    /// See also [`Diagnostic::span_suggestion()`].\n     pub fn span_suggestions(\n         &mut self,\n         sp: Span,\n@@ -458,7 +473,7 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Prints out a message with for a suggestion without showing the suggested code.\n+    /// Prints out a message for a suggestion without showing the suggested code.\n     ///\n     /// This is intended to be used for suggestions that are obvious in what the changes need to\n     /// be from the message, showing the span label inline would be visually unpleasant\n@@ -481,7 +496,7 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Adds a suggestion to the json output, but otherwise remains silent/undisplayed in the cli.\n+    /// Adds a suggestion to the JSON output that will not be shown in the CLI.\n     ///\n     /// This is intended to be used for suggestions that are *very* obvious in what the changes\n     /// need to be from the message, but we still want other tools to be able to apply them."}, {"sha": "f165a60336a6a57ad9d553cb4d4ece2c6b27de7c", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=da89dbb41af5fd9f417b30e09451640d68fb50af", "patch": "@@ -30,6 +30,15 @@ struct DiagnosticBuilderInner<'a> {\n     allow_suggestions: bool,\n }\n \n+/// This is a helper macro for [`forward!`] that allows automatically adding documentation\n+/// that uses tokens from [`forward!`]'s input.\n+macro_rules! forward_inner_docs {\n+    ($e:expr => $i:item) => {\n+        #[doc = $e]\n+        $i\n+    }\n+}\n+\n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n /// the fields and methods of the embedded `diagnostic` in a\n /// transparent way. *However,* many of the methods are intended to\n@@ -45,10 +54,11 @@ macro_rules! forward {\n         pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)?) -> &Self\n     ) => {\n         $(#[$attrs])*\n+        forward_inner_docs!(concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\") =>\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n             self.diagnostic.$n($($name),*);\n             self\n-        }\n+        });\n     };\n \n     // Forward pattern for &mut self -> &mut Self\n@@ -57,10 +67,11 @@ macro_rules! forward {\n         pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)?) -> &mut Self\n     ) => {\n         $(#[$attrs])*\n+        forward_inner_docs!(concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\") =>\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n             self.0.diagnostic.$n($($name),*);\n             self\n-        }\n+        });\n     };\n \n     // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n@@ -74,10 +85,11 @@ macro_rules! forward {\n         ) -> &mut Self\n     ) => {\n         $(#[$attrs])*\n+        forward_inner_docs!(concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\") =>\n         pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n             self.0.diagnostic.$n($($name),*);\n             self\n-        }\n+        });\n     };\n }\n \n@@ -116,7 +128,7 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Stashes diagnostic for possible later improvement in a different,\n     /// later stage of the compiler. The diagnostic can be accessed with\n-    /// the provided `span` and `key` through `.steal_diagnostic` on `Handler`.\n+    /// the provided `span` and `key` through [`Handler::steal_diagnostic()`].\n     ///\n     /// As with `buffer`, this is unless the handler has disabled such buffering.\n     pub fn stash(self, span: Span, key: StashKey) {\n@@ -202,7 +214,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     }\n \n     /// Labels all the given spans with the provided label.\n-    /// See `span_label` for more information.\n+    /// See [`Diagnostic::span_label()`] for more information.\n     pub fn span_labels(\n         &mut self,\n         spans: impl IntoIterator<Item = Span>,\n@@ -233,7 +245,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         found_extra: &dyn fmt::Display,\n     ) -> &mut Self);\n \n-    forward!(pub fn note_unsuccessfull_coercion(\n+    forward!(pub fn note_unsuccessful_coercion(\n         &mut self,\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n@@ -254,6 +266,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         msg: &str,\n     ) -> &mut Self);\n \n+    /// See [`Diagnostic::multipart_suggestion()`].\n     pub fn multipart_suggestion(\n         &mut self,\n         msg: &str,\n@@ -267,6 +280,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::multipart_suggestions()`].\n     pub fn multipart_suggestions(\n         &mut self,\n         msg: &str,\n@@ -280,6 +294,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::tool_only_multipart_suggestion()`].\n     pub fn tool_only_multipart_suggestion(\n         &mut self,\n         msg: &str,\n@@ -293,6 +308,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::span_suggestion()`].\n     pub fn span_suggestion(\n         &mut self,\n         sp: Span,\n@@ -307,6 +323,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::span_suggestions()`].\n     pub fn span_suggestions(\n         &mut self,\n         sp: Span,\n@@ -321,6 +338,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::span_suggestion_short()`].\n     pub fn span_suggestion_short(\n         &mut self,\n         sp: Span,\n@@ -335,6 +353,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::span_suggestion_verbose()`].\n     pub fn span_suggestion_verbose(\n         &mut self,\n         sp: Span,\n@@ -349,6 +368,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::span_suggestion_hidden()`].\n     pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,\n@@ -363,6 +383,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    /// See [`Diagnostic::tool_only_span_suggestion()`] for more information.\n     pub fn tool_only_span_suggestion(\n         &mut self,\n         sp: Span,\n@@ -380,19 +401,22 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n+    /// Allow attaching suggestions this diagnostic.\n+    /// If this is set to `false`, then any suggestions attached with the `span_suggestion_*`\n+    /// methods after this is set to `false` will be ignored.\n     pub fn allow_suggestions(&mut self, allow: bool) -> &mut Self {\n         self.0.allow_suggestions = allow;\n         self\n     }\n \n     /// Convenience function for internal use, clients should use one of the\n-    /// struct_* methods on Handler.\n+    /// `struct_*` methods on [`Handler`].\n     crate fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new_with_code(handler, level, None, message)\n     }\n \n     /// Convenience function for internal use, clients should use one of the\n-    /// struct_* methods on Handler.\n+    /// `struct_*` methods on [`Handler`].\n     crate fn new_with_code(\n         handler: &'a Handler,\n         level: Level,"}, {"sha": "18e1465c0e6ed7f7cb456ba1dbd6a1ab7d90ba74", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da89dbb41af5fd9f417b30e09451640d68fb50af/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=da89dbb41af5fd9f417b30e09451640d68fb50af", "patch": "@@ -1622,7 +1622,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n                 (TypeError::ObjectUnsafeCoercion(_), _) => {\n-                    diag.note_unsuccessfull_coercion(found, expected);\n+                    diag.note_unsuccessful_coercion(found, expected);\n                 }\n                 (_, _) => {\n                     debug!("}]}