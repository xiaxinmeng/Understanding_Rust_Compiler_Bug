{"sha": "5468e12ca056a6ac46b36e244d235b9a0c987c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NjhlMTJjYTA1NmE2YWM0NmIzNmUyNDRkMjM1YjlhMGM5ODdjNTg=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-06-30T19:33:59Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-07-01T01:38:18Z"}, "message": "add label to unknown meta item error", "tree": {"sha": "9f18c032756cb746a9fd8fe26f786b4e1a0a78c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f18c032756cb746a9fd8fe26f786b4e1a0a78c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5468e12ca056a6ac46b36e244d235b9a0c987c58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAls4MJAWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdCGeB/4/4+aAXO1L4RCih6F1yc4lwbne\n6gvWZecEih8qav6v2/Ict4CEc49zqH+qXWMUKNHm1HxXpqQs8LcoQz905hGrV4RG\nv3PMCy9Jf66qAiGu9iFuLq2Z0FHUkeH642u6TKqQu7//pgwHygNrKB4fzPoGvDiJ\nrHwJMUKSHrnizJA4d7T56s4y2T8+UwuTBbupr8VEpyKUd1+zfdD7zoS3ACiUvM5e\nnpaWT5elQ+9LdYe+3SKugR7xFIlLpWvlHtAYW5N50qoQdh7Sl3F5jIUMiEWc9/A9\nyqbcvhtwFOAdhyX7hozVqhEkMBKLmRAS4uECVIp3CblmqSnwbBdBI9qv0Sn/\n=oVw2\n-----END PGP SIGNATURE-----", "payload": "tree 9f18c032756cb746a9fd8fe26f786b4e1a0a78c4\nparent f31594397072f24a06bc9a28b0451eb833bb7cbd\nauthor Andy Russell <arussell123@gmail.com> 1530387239 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1530409098 -0400\n\nadd label to unknown meta item error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5468e12ca056a6ac46b36e244d235b9a0c987c58", "html_url": "https://github.com/rust-lang/rust/commit/5468e12ca056a6ac46b36e244d235b9a0c987c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5468e12ca056a6ac46b36e244d235b9a0c987c58/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31594397072f24a06bc9a28b0451eb833bb7cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31594397072f24a06bc9a28b0451eb833bb7cbd", "html_url": "https://github.com/rust-lang/rust/commit/f31594397072f24a06bc9a28b0451eb833bb7cbd"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "ecd52a62eab2692601254ed5d9b17ce30593b293", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5468e12ca056a6ac46b36e244d235b9a0c987c58/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5468e12ca056a6ac46b36e244d235b9a0c987c58/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=5468e12ca056a6ac46b36e244d235b9a0c987c58", "patch": "@@ -20,7 +20,7 @@ use super::{list_contains_name, mark_used, MetaItemKind};\n \n enum AttrError {\n     MultipleItem(Name),\n-    UnknownMetaItem(Name),\n+    UnknownMetaItem(Name, &'static [&'static str]),\n     MissingSince,\n     MissingFeature,\n     MultipleStabilityLevels,\n@@ -31,8 +31,15 @@ fn handle_errors(diag: &Handler, span: Span, error: AttrError) {\n     match error {\n         AttrError::MultipleItem(item) => span_err!(diag, span, E0538,\n                                                    \"multiple '{}' items\", item),\n-        AttrError::UnknownMetaItem(item) => span_err!(diag, span, E0541,\n-                                                      \"unknown meta item '{}'\", item),\n+        AttrError::UnknownMetaItem(item, expected) => {\n+            let expected = expected\n+                .iter()\n+                .map(|name| format!(\"`{}`\", name))\n+                .collect::<Vec<_>>();\n+            struct_span_err!(diag, span, E0541, \"unknown meta item '{}'\", item)\n+                .span_label(span, format!(\"expected one of {}\", expected.join(\", \")))\n+                .emit();\n+        }\n         AttrError::MissingSince => span_err!(diag, span, E0542, \"missing 'since'\"),\n         AttrError::MissingFeature => span_err!(diag, span, E0546, \"missing 'feature'\"),\n         AttrError::MultipleStabilityLevels => span_err!(diag, span, E0544,\n@@ -213,8 +220,11 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                         => if !get(mi, &mut $name) { continue 'outer },\n                                 )+\n                                 _ => {\n-                                    handle_errors(diagnostic, mi.span,\n-                                                  AttrError::UnknownMetaItem(mi.name()));\n+                                    let expected = &[ $( stringify!($name) ),+ ];\n+                                    handle_errors(\n+                                        diagnostic,\n+                                        mi.span,\n+                                        AttrError::UnknownMetaItem(mi.name(), expected));\n                                     continue 'outer\n                                 }\n                             }\n@@ -286,8 +296,14 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 \"reason\" => if !get(mi, &mut reason) { continue 'outer },\n                                 \"issue\" => if !get(mi, &mut issue) { continue 'outer },\n                                 _ => {\n-                                    handle_errors(diagnostic, meta.span,\n-                                                  AttrError::UnknownMetaItem(mi.name()));\n+                                    handle_errors(\n+                                        diagnostic,\n+                                        meta.span,\n+                                        AttrError::UnknownMetaItem(\n+                                            mi.name(),\n+                                            &[\"feature\", \"reason\", \"issue\"]\n+                                        ),\n+                                    );\n                                     continue 'outer\n                                 }\n                             }\n@@ -341,8 +357,11 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n                                 \"since\" => if !get(mi, &mut since) { continue 'outer },\n                                 _ => {\n-                                    handle_errors(diagnostic, meta.span,\n-                                                  AttrError::UnknownMetaItem(mi.name()));\n+                                    handle_errors(\n+                                        diagnostic,\n+                                        meta.span,\n+                                        AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                    );\n                                     continue 'outer\n                                 }\n                             }\n@@ -520,8 +539,11 @@ fn find_deprecation_generic<'a, I>(diagnostic: &Handler,\n                         \"since\" => if !get(mi, &mut since) { continue 'outer },\n                         \"note\" => if !get(mi, &mut note) { continue 'outer },\n                         _ => {\n-                            handle_errors(diagnostic, meta.span,\n-                                          AttrError::UnknownMetaItem(mi.name()));\n+                            handle_errors(\n+                                diagnostic,\n+                                meta.span,\n+                                AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                            );\n                             continue 'outer\n                         }\n                     }"}, {"sha": "967eb6e23a379721c5c3e901e73c094b1400d8c7", "filename": "src/test/ui/deprecation-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5468e12ca056a6ac46b36e244d235b9a0c987c58/src%2Ftest%2Fui%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5468e12ca056a6ac46b36e244d235b9a0c987c58/src%2Ftest%2Fui%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation-sanity.stderr?ref=5468e12ca056a6ac46b36e244d235b9a0c987c58", "patch": "@@ -2,7 +2,7 @@ error[E0541]: unknown meta item 'reason'\n   --> $DIR/deprecation-sanity.rs:14:43\n    |\n LL |     #[deprecated(since = \"a\", note = \"a\", reason)] //~ ERROR unknown meta item 'reason'\n-   |                                           ^^^^^^\n+   |                                           ^^^^^^ expected one of `since`, `note`\n \n error[E0551]: incorrect meta item\n   --> $DIR/deprecation-sanity.rs:17:31"}]}