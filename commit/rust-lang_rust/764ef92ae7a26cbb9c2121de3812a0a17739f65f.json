{"sha": "764ef92ae7a26cbb9c2121de3812a0a17739f65f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NGVmOTJhZTdhMjZjYmI5YzIxMjFkZTM4MTJhMGExNzczOWY2NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-19T16:45:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-19T16:45:53Z"}, "message": "Auto merge of #33742 - Manishearth:rollup, r=Manishearth\n\nRollup of 10 pull requests\n\n- Successful merges: #33353, #33611, #33696, #33698, #33705, #33708, #33712, #33720, #33721, #33730\n- Failed merges:", "tree": {"sha": "f3da197cb2dd98e06ec2c6937508f7f960d86b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3da197cb2dd98e06ec2c6937508f7f960d86b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764ef92ae7a26cbb9c2121de3812a0a17739f65f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764ef92ae7a26cbb9c2121de3812a0a17739f65f", "html_url": "https://github.com/rust-lang/rust/commit/764ef92ae7a26cbb9c2121de3812a0a17739f65f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764ef92ae7a26cbb9c2121de3812a0a17739f65f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6f8e2c94a7041877ed8460f2621974c5233f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6f8e2c94a7041877ed8460f2621974c5233f7", "html_url": "https://github.com/rust-lang/rust/commit/2fb6f8e2c94a7041877ed8460f2621974c5233f7"}, {"sha": "acd2c11c5e8427c38471dd9d6aee8a347a612f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd2c11c5e8427c38471dd9d6aee8a347a612f27", "html_url": "https://github.com/rust-lang/rust/commit/acd2c11c5e8427c38471dd9d6aee8a347a612f27"}], "stats": {"total": 301, "additions": 221, "deletions": 80}, "files": [{"sha": "c8a9082947eea8ca4a9ae92973a25835c8214d19", "filename": "src/doc/book/advanced-linking.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fadvanced-linking.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -12,7 +12,7 @@ the `link_args` attribute. This attribute is applied to `extern` blocks and\n specifies raw flags which need to get passed to the linker when producing an\n artifact. An example usage would be:\n \n-``` no_run\n+```rust,no_run\n #![feature(link_args)]\n \n #[link_args = \"-foo -bar -baz\"]\n@@ -52,7 +52,7 @@ By default, all Rust programs on Linux will link to the system `libc` along with\n a number of other libraries. Let's look at an example on a 64-bit Linux machine\n with GCC and `glibc` (by far the most common `libc` on Linux):\n \n-``` text\n+```text\n $ cat example.rs\n fn main() {}\n $ rustc example.rs"}, {"sha": "dedf9d5c28abd4d85ece1d4a13651ad3ac6c6dc8", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -319,6 +319,53 @@ assert_eq!(3, answer);\n Now we take a trait object, a `&Fn`. And we have to make a reference\n to our closure when we pass it to `call_with_one`, so we use `&||`.\n \n+A quick note about closures that use explicit lifetimes. Sometimes you might have a closure\n+that takes a reference like so:\n+\n+```\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: Fn(&i32) -> i32 {\n+\n+    let mut value = 0;\n+    some_closure(&value)\n+}\n+```\n+\n+Normally you can specify the lifetime of the parameter to our closure. We\n+could annotate it on the function declaration:\n+\n+```ignore\n+fn call_with_ref<'a, F>(some_closure:F) -> i32 \n+    where F: Fn(&'a 32) -> i32 {\n+```\n+\n+However this presents a problem with in our case. When you specify the explict\n+lifetime on a function it binds that lifetime to the *entire* scope of the function\n+instead of just the invocation scope of our closure. This means that the borrow checker\n+will see a mutable reference in the same lifetime as our immutable reference and fail\n+to compile.\n+\n+In order to say that we only need the lifetime to be valid for the invocation scope\n+of the closure we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n+\n+```ignore\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: for<'a> Fn(&'a 32) -> i32 {\n+```\n+\n+This lets the Rust compiler find the minimum lifetime to invoke our closure and \n+satisfy the borrow checker's rules. Our function then compiles and excutes as we\n+expect.\n+\n+```\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: for<'a> Fn(&'a i32) -> i32 {\n+\n+    let mut value = 0;\n+    some_closure(&value)\n+}\n+```\n+\n # Function pointers and closures\n \n A function pointer is kind of like a closure that has no environment. As such,\n@@ -344,7 +391,7 @@ assert_eq!(2, answer);\n In this example, we don\u2019t strictly need the intermediate variable `f`,\n the name of the function works just fine too:\n \n-```ignore\n+```rust,ignore\n let answer = call_with_one(&add_one);\n ```\n "}, {"sha": "2d0cc61fb11d67252755377599065b210f8b27b5", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -37,7 +37,7 @@ Let's write a plugin\n [`roman_numerals.rs`](https://github.com/rust-lang/rust/tree/master/src/test/auxiliary/roman_numerals.rs)\n that implements Roman numeral integer literals.\n \n-```ignore\n+```rust,ignore\n #![crate_type=\"dylib\"]\n #![feature(plugin_registrar, rustc_private)]\n \n@@ -102,7 +102,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n Then we can use `rn!()` like any other macro:\n \n-```ignore\n+```rust,ignore\n #![feature(plugin)]\n #![plugin(roman_numerals)]\n \n@@ -132,7 +132,7 @@ Some of the [macro debugging tips](macros.html#debugging-macro-code) are applica\n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:\n \n-```ignore\n+```rust,ignore\n fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         -> Box<MacResult+'static> {\n \n@@ -169,7 +169,7 @@ infrastructure](../reference.html#lint-check-attributes) with additional checks\n code style, safety, etc. Now let's write a plugin [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n \n-```ignore\n+```rust,ignore\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n@@ -211,7 +211,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n Then code like\n \n-```ignore\n+```rust,ignore\n #![plugin(lint_plugin_test)]\n \n fn lintme() { }"}, {"sha": "a783650f8ea2df3b16f26be3876fc1e50c4324b5", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -165,7 +165,7 @@ concurrency bugs.\n As an example, here is a Rust program that would have a data race in many\n languages. It will not compile:\n \n-```ignore\n+```rust,ignore\n use std::thread;\n use std::time::Duration;\n \n@@ -204,7 +204,7 @@ Calling `clone()` on an `Rc<T>` will return a new owned reference and bump the\n internal reference count. We create one of these for each thread:\n \n \n-```ignore\n+```rust,ignore\n use std::thread;\n use std::time::Duration;\n use std::rc::Rc;\n@@ -250,7 +250,7 @@ In essence, `Arc<T>` is a type that lets us share ownership of data _across\n threads_.\n \n \n-```ignore\n+```rust,ignore\n use std::thread;\n use std::sync::Arc;\n use std::time::Duration;\n@@ -336,7 +336,7 @@ The lock \"release\" here is implicit; when the result of the lock (in this case,\n Note that [`lock`](../std/sync/struct.Mutex.html#method.lock) method of\n [`Mutex`](../std/sync/struct.Mutex.html) has this signature:\n \n-```ignore\n+```rust,ignore\n fn lock(&self) -> LockResult<MutexGuard<T>>\n ```\n "}, {"sha": "4a41bb7b7f37eee595870bb26f5680de4122587b", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -362,7 +362,7 @@ Here\u2019s an example of documenting a macro:\n /// # }\n /// ```\n ///\n-/// ```should_panic\n+/// ```rust,should_panic\n /// # #[macro_use] extern crate foo;\n /// # fn main() {\n /// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);\n@@ -429,7 +429,7 @@ There are a few more annotations that are useful to help `rustdoc` do the right\n thing when testing your code:\n \n ```rust\n-/// ```ignore\n+/// ```rust,ignore\n /// fn foo() {\n /// ```\n # fn foo() {}\n@@ -441,7 +441,7 @@ with `text` if it's not code, or using `#`s to get a working example that\n only shows the part you care about.\n \n ```rust\n-/// ```should_panic\n+/// ```rust,should_panic\n /// assert!(false);\n /// ```\n # fn foo() {}\n@@ -451,7 +451,7 @@ only shows the part you care about.\n not actually pass as a test.\n \n ```rust\n-/// ```no_run\n+/// ```rust,no_run\n /// loop {\n ///     println!(\"Hello, world\");\n /// }\n@@ -563,7 +563,7 @@ can be useful when changing some options, or when writing a macro.\n \n `rustdoc` will show the documentation for a public re-export in both places:\n \n-```ignore\n+```rust,ignore\n extern crate foo;\n \n pub use foo::bar;\n@@ -575,7 +575,7 @@ documentation in both places.\n \n This behavior can be suppressed with `no_inline`:\n \n-```ignore\n+```rust,ignore\n extern crate foo;\n \n #[doc(no_inline)]"}, {"sha": "f48e87c42245eca39af7b28289b20903f6c5369a", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -28,7 +28,7 @@ and add `extern crate libc;` to your crate root.\n The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n \n-```no_run\n+```rust,no_run\n # #![feature(libc)]\n extern crate libc;\n use libc::size_t;\n@@ -62,7 +62,7 @@ keeping the binding correct at runtime.\n \n The `extern` block can be extended to cover the entire snappy API:\n \n-```no_run\n+```rust,no_run\n # #![feature(libc)]\n extern crate libc;\n use libc::{c_int, size_t};\n@@ -209,7 +209,7 @@ A basic example is:\n \n Rust code:\n \n-```no_run\n+```rust,no_run\n extern fn callback(a: i32) {\n     println!(\"I'm called from C with value {0}\", a);\n }\n@@ -262,7 +262,7 @@ referenced Rust object.\n \n Rust code:\n \n-```no_run\n+```rust,no_run\n #[repr(C)]\n struct RustObject {\n     a: i32,\n@@ -406,7 +406,7 @@ Foreign APIs often export a global variable which could do something like track\n global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n-```no_run\n+```rust,no_run\n # #![feature(libc)]\n extern crate libc;\n \n@@ -425,7 +425,7 @@ Alternatively, you may need to alter global state provided by a foreign\n interface. To do this, statics can be declared with `mut` so we can mutate\n them.\n \n-```no_run\n+```rust,no_run\n # #![feature(libc)]\n extern crate libc;\n "}, {"sha": "3a10d2aecc25e3e3fbe364f50759629c50887ad0", "filename": "src/doc/book/functions.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ffunctions.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -134,7 +134,7 @@ x = y = 5\n In Rust, however, using `let` to introduce a binding is _not_ an expression. The\n following will produce a compile-time error:\n \n-```ignore\n+```rust,ignore\n let x = (let y = 5); // expected identifier, found keyword `let`\n ```\n \n@@ -283,7 +283,7 @@ stack backtrace:\n \n A diverging function can be used as any type:\n \n-```should_panic\n+```rust,should_panic\n # fn diverges() -> ! {\n #    panic!(\"This function never returns!\");\n # }"}, {"sha": "2c2d89a1fbf9ed3b46c881a19c0108fde7fd2217", "filename": "src/doc/book/inline-assembly.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Finline-assembly.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -4,7 +4,7 @@ For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n assembly to do this via the `asm!` macro.\n \n-```ignore\n+```rust,ignore\n asm!(assembly template\n    : output operands\n    : input operands"}, {"sha": "97ca2e3e702f6cf926e54e88679beb1eff7dfe1a", "filename": "src/doc/book/loops.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Floops.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -74,7 +74,7 @@ for x in 0..10 {\n \n In slightly more abstract terms,\n \n-```ignore\n+```rust,ignore\n for var in expression {\n     code\n }"}, {"sha": "f535fb96af89559131219cbde594a58218e50cd3", "filename": "src/doc/book/macros.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmacros.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -78,7 +78,7 @@ macro_rules! vec {\n \n Whoa, that\u2019s a lot of new syntax! Let\u2019s break it down.\n \n-```ignore\n+```rust,ignore\n macro_rules! vec { ... }\n ```\n \n@@ -92,7 +92,7 @@ syntax and serves to distinguish a macro from an ordinary function.\n The macro is defined through a series of rules, which are pattern-matching\n cases. Above, we had\n \n-```ignore\n+```rust,ignore\n ( $( $x:expr ),* ) => { ... };\n ```\n \n@@ -112,7 +112,7 @@ separated by commas.\n Aside from the special matcher syntax, any Rust tokens that appear in a matcher\n must match exactly. For example,\n \n-```rust\n+```rust,ignore\n macro_rules! foo {\n     (x => $e:expr) => (println!(\"mode X: {}\", $e));\n     (y => $e:expr) => (println!(\"mode Y: {}\", $e));\n@@ -147,7 +147,7 @@ The right-hand side of a macro rule is ordinary Rust syntax, for the most part.\n But we can splice in bits of syntax captured by the matcher. From the original\n example:\n \n-```ignore\n+```rust,ignore\n $(\n     temp_vec.push($x);\n )*\n@@ -165,7 +165,7 @@ within the repeated block.\n Another detail: the `vec!` macro has *two* pairs of braces on the right-hand\n side. They are often combined like so:\n \n-```ignore\n+```rust,ignore\n macro_rules! foo {\n     () => {{\n         ..."}, {"sha": "e46271511462449930ee4859ae7bbd3505d34a36", "filename": "src/doc/book/mutability.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmutability.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -55,6 +55,8 @@ fn foo(mut x: i32) {\n # }\n ```\n \n+Note that here, the `x` is mutable, but not the `y`.\n+\n [pattern]: patterns.html\n \n # Interior vs. Exterior Mutability"}, {"sha": "424e2cda6157d0609a876f7d8329c8378e729957", "filename": "src/doc/book/operators-and-overloading.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Foperators-and-overloading.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Foperators-and-overloading.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Foperators-and-overloading.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -123,7 +123,7 @@ fn main() {\n For `HasArea` and `Square`, we declare a type parameter `T` and replace\n `f64` with it. The `impl` needs more involved modifications:\n \n-```ignore\n+```rust,ignore\n impl<T> HasArea<T> for Square<T>\n         where T: Mul<Output=T> + Copy { ... }\n ```"}, {"sha": "b31a34a0425a489f246f2616b499a93cf4f8c918", "filename": "src/doc/book/trait-objects.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftrait-objects.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -306,7 +306,7 @@ let y = TraitObject {\n Not every trait can be used to make a trait object. For example, vectors implement\n `Clone`, but if we try to make a trait object:\n \n-```ignore\n+```rust,ignore\n let v = vec![1, 2, 3];\n let o = &v as &Clone;\n ```"}, {"sha": "107ef2b44d5eb07017ba08455f553239bf2e26eb", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -195,7 +195,7 @@ fn main() {\n `is_square()` needs to check that the sides are equal, so the sides must be of\n a type that implements the [`core::cmp::PartialEq`][PartialEq] trait:\n \n-```ignore\n+```rust,ignore\n impl<T: PartialEq> Rectangle<T> { ... }\n ```\n "}, {"sha": "1c44af2f21a7198db6ff597fca3bec4188a27b85", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -40,7 +40,7 @@ The indices count from `0`, so the third element is `v[2]`.\n \n It\u2019s also important to note that you must index with the `usize` type:\n \n-```ignore\n+```rust,ignore\n let v = vec![1, 2, 3, 4, 5];\n \n let i: usize = 0;\n@@ -71,7 +71,7 @@ you cannot index with an `i32`.\n \n If you try to access an index that doesn\u2019t exist:\n \n-```ignore\n+```rust,ignore\n let v = vec![1, 2, 3];\n println!(\"Item 7 is {}\", v[7]);\n ```"}, {"sha": "b19b5465a1235be3323363cdc11838739b593029", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -1 +1 @@\n-Subproject commit 6598e2cbfd7e09bfca249cc3dcbf889735f73ce1\n+Subproject commit b19b5465a1235be3323363cdc11838739b593029"}, {"sha": "116e3476897ca543e3cb42485c49e115897815a6", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -502,6 +502,33 @@ fn foo(a: &mut i32) {\n ```\n \"##,\n \n+E0502: r##\"\n+This error indicates that you are trying to borrow a variable as mutable when it\n+has already been borrowed as immutable.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+fn bar(x: &mut i32) {}\n+fn foo(a: &mut i32) {\n+    let ref y = a; // a is borrowed as immutable.\n+    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n+            //        as immutable\n+}\n+```\n+To fix this error, ensure that you don't have any other references to the\n+variable before trying to access it mutably:\n+```\n+fn bar(x: &mut i32) {}\n+fn foo(a: &mut i32) {\n+    bar(a);\n+    let ref y = a; // ok!\n+}\n+```\n+For more information on the rust ownership system, take a look at\n+https://doc.rust-lang.org/stable/book/references-and-borrowing.html.\n+\"##,\n+\n E0504: r##\"\n This error occurs when an attempt is made to move a borrowed variable into a\n closure.\n@@ -984,7 +1011,6 @@ fn main() {\n register_diagnostics! {\n     E0385, // {} in an aliasable location\n     E0388, // {} in a static location\n-    E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ...\n     E0503, // cannot use `..` because it was mutably borrowed\n     E0508, // cannot move out of type `..`, a non-copy fixed-size array\n     E0524, // two closures require unique access to `..` at the same time"}, {"sha": "1df12b63e0a50e76a12f3fc9beda37f649bdde03", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -215,15 +215,18 @@ fn report_elision_failure(\n {\n     let mut m = String::new();\n     let len = params.len();\n-    let mut any_lifetimes = false;\n \n-    for (i, info) in params.into_iter().enumerate() {\n+    let elided_params: Vec<_> = params.into_iter()\n+                                       .filter(|info| info.lifetime_count > 0)\n+                                       .collect();\n+\n+    let elided_len = elided_params.len();\n+\n+    for (i, info) in elided_params.into_iter().enumerate() {\n         let ElisionFailureInfo {\n             name, lifetime_count: n, have_bound_regions\n         } = info;\n \n-        any_lifetimes = any_lifetimes || (n > 0);\n-\n         let help_name = if name.is_empty() {\n             format!(\"argument {}\", i + 1)\n         } else {\n@@ -237,13 +240,14 @@ fn report_elision_failure(\n                     if have_bound_regions { \"free \" } else { \"\" } )\n         })[..]);\n \n-        if len == 2 && i == 0 {\n+        if elided_len == 2 && i == 0 {\n             m.push_str(\" or \");\n-        } else if i + 2 == len {\n+        } else if i + 2 == elided_len {\n             m.push_str(\", or \");\n-        } else if i + 1 != len {\n+        } else if i != elided_len - 1 {\n             m.push_str(\", \");\n         }\n+\n     }\n \n     if len == 0 {\n@@ -252,15 +256,15 @@ fn report_elision_failure(\n                     there is no value for it to be borrowed from\");\n         help!(db,\n                    \"consider giving it a 'static lifetime\");\n-    } else if !any_lifetimes {\n+    } else if elided_len == 0 {\n         help!(db,\n                    \"this function's return type contains a borrowed value with \\\n                     an elided lifetime, but the lifetime cannot be derived from \\\n                     the arguments\");\n         help!(db,\n                    \"consider giving it an explicit bounded or 'static \\\n                     lifetime\");\n-    } else if len == 1 {\n+    } else if elided_len == 1 {\n         help!(db,\n                    \"this function's return type contains a borrowed value, but \\\n                     the signature does not say which {} it is borrowed from\","}, {"sha": "a103acadcf6544ac42520597c19b74bc61f629d6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -1566,7 +1566,8 @@ impl<'a> fmt::Display for Item<'a> {\n         write!(fmt, \"</span>\")?; // in-band\n         write!(fmt, \"<span class='out-of-band'>\")?;\n         if let Some(version) = self.item.stable_since() {\n-            write!(fmt, \"<span class='since'>{}</span>\", version)?;\n+            write!(fmt, \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\",\n+                   version)?;\n         }\n         write!(fmt,\n                r##\"<span id='render-detail'>\n@@ -2136,7 +2137,7 @@ fn render_stability_since_raw<'a>(w: &mut fmt::Formatter,\n                                   containing_ver: Option<&'a str>) -> fmt::Result {\n     if let Some(v) = ver {\n         if containing_ver != ver && v.len() > 0 {\n-            write!(w, \"<div class=\\\"since\\\">{}</div>\",\n+            write!(w, \"<div class='since' title='Stable since Rust version {0}'>{0}</div>\",\n                    v)?\n         }\n     }"}, {"sha": "7c9985d7d233114848e090ec0eb826a63c02e615", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -423,7 +423,7 @@ impl EmitterWriter {\n                     &format!(\" (defined in {})\",\n                         self.cm.span_to_filename(def_site_span)));\n             }\n-            let snippet = self.cm.span_to_string(sp);\n+            let snippet = self.cm.span_to_string(trace.call_site);\n             print_diagnostic(&mut self.dst, &snippet, Note, &diag_string, None)?;\n         }\n         Ok(())"}, {"sha": "f243706eecb8036334960f80ea07e6a46aa0c6bd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -70,15 +70,9 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             // Keep going, outside-in.\n             let fully_expanded = fld.fold_expr(expanded_expr);\n-            let span = fld.new_span(span);\n             fld.cx.bt_pop();\n \n-            fully_expanded.map(|e| ast::Expr {\n-                id: ast::DUMMY_NODE_ID,\n-                node: e.node,\n-                span: span,\n-                attrs: e.attrs,\n-            })\n+            fully_expanded\n         }\n \n         ast::ExprKind::InPlace(placer, value_expr) => {"}, {"sha": "7b811f581c1a707826c5ac042422c0a532c0b48e", "filename": "src/test/compile-fail/borrowck/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern: borrowed value does not live long enough\n+\n struct defer<'a> {\n     x: &'a [&'a str],\n }\n@@ -28,6 +30,5 @@ fn defer<'r>(x: &'r [&'r str]) -> defer<'r> {\n \n fn main() {\n     let x = defer(&vec!(\"Goodbye\", \"world!\"));\n-    //~^ ERROR borrowed value does not live long enough\n     x.x[0];\n }"}, {"sha": "2bd7da91d2c5832012544e85d3bb70824f07bf1f", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -11,22 +11,26 @@\n // macro f should not be able to inject a reference to 'n'.\n \n macro_rules! f { () => (n) }\n+//~^ ERROR unresolved name `n`\n+//~| ERROR unresolved name `n`\n+//~| ERROR unresolved name `n`\n+//~| ERROR unresolved name `n`\n \n fn main() -> (){\n     for n in 0..1 {\n-        println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n+        println!(\"{}\", f!());\n     }\n \n     if let Some(n) = None {\n-        println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n+        println!(\"{}\", f!());\n     }\n \n     if false {\n     } else if let Some(n) = None {\n-        println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n+        println!(\"{}\", f!());\n     }\n \n     while let Some(n) = None {\n-        println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n+        println!(\"{}\", f!());\n     }\n }"}, {"sha": "1daa6a61f777ca5b183eccbbbae0591b0bb59c6c", "filename": "src/test/compile-fail/issue-30255.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30255.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Test that lifetime elision error messages correctly omit parameters\n+// with no elided lifetimes\n+\n+struct S<'a> {\n+    field: &'a i32,\n+}\n+\n+fn f(a: &S, b: i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say which one of `a`'s 2 elided lifetimes it is borrowed from\n+    panic!();\n+}\n+\n+fn g(a: &S, b: bool, c: &i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say whether it is borrowed from one of `a`'s 2 elided lifetimes or `c`\n+    panic!();\n+}\n+\n+fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP does not say whether it is borrowed from `a`, one of `c`'s 2 elided lifetimes, or `d`\n+    panic!();\n+}\n+"}, {"sha": "ebec204184d738527306fba1343b334560db18d1", "filename": "src/test/compile-fail/macro-backtrace-invalid-internals.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -36,13 +36,13 @@ macro_rules! fake_method_expr {\n \n macro_rules! fake_field_expr {\n      () => {\n-          1.fake\n+          1.fake //~ ERROR no field with that name\n      }\n }\n \n macro_rules! fake_anon_field_expr {\n      () => {\n-          (1).0\n+          (1).0 //~ ERROR type was not a tuple\n      }\n }\n \n@@ -52,8 +52,6 @@ fn main() {\n     fake_anon_field_stmt!(); //~ NOTE in this expansion of\n \n     let _ = fake_method_expr!(); //~ NOTE in this expansion of\n-    let _ = fake_field_expr!(); //~ ERROR no field with that name\n-                                //~^ NOTE in this expansion of\n-    let _ = fake_anon_field_expr!(); //~ ERROR type was not a tuple\n-                                     //~^ NOTE in this expansion of\n+    let _ = fake_field_expr!(); //~ NOTE in this expansion of\n+    let _ = fake_anon_field_expr!(); //~ NOTE in this expansion of\n }"}, {"sha": "c2a270ea9f5c0d8f31aaab482ee8f1d976ce21d1", "filename": "src/test/compile-fail/macro-backtrace-nested.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -12,20 +12,19 @@\n // we replace the span of the expanded expression with that of the call site.\n \n macro_rules! nested_expr {\n-    () => (fake)\n+    () => (fake) //~ ERROR unresolved name\n+                 //~^ ERROR unresolved name\n }\n \n macro_rules! call_nested_expr {\n-    () => (nested_expr!())\n+    () => (nested_expr!()) //~ NOTE in this expansion of nested_expr!\n }\n \n macro_rules! call_nested_expr_sum {\n-    () => { 1 + nested_expr!(); } //~ ERROR unresolved name\n-                                  //~^ NOTE in this expansion of nested_expr!\n+    () => { 1 + nested_expr!(); } //~ NOTE in this expansion of nested_expr!\n }\n \n fn main() {\n-    1 + call_nested_expr!(); //~ ERROR unresolved name\n-                             //~^ NOTE in this expansion of call_nested_expr!\n+    1 + call_nested_expr!(); //~ NOTE in this expansion of call_nested_expr!\n     call_nested_expr_sum!(); //~ NOTE in this expansion of\n }"}, {"sha": "c2277c3e6d8cdaba024839c618c0d1a59d2cf4ac", "filename": "src/test/compile-fail/macro-backtrace-println.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -21,11 +21,11 @@ macro_rules! myprint {\n }\n \n macro_rules! myprintln {\n-    ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ ERROR invalid reference to argument `0`\n-                                                    //~^ NOTE in this expansion of myprint!\n-                                                    //~^^ NOTE in this expansion of concat!\n+    ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ NOTE in this expansion of myprint!\n+                                                    //~^ NOTE in this expansion of concat!\n }\n \n fn main() {\n-    myprintln!(\"{}\"); //~ NOTE in this expansion of\n+    myprintln!(\"{}\"); //~ ERROR invalid reference to argument `0`\n+                      //~^ NOTE in this expansion of\n }"}, {"sha": "73defa6eef991045c3cf234c101c8a852d9881cd", "filename": "src/test/compile-fail/variant-used-as-type.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fvariant-used-as-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764ef92ae7a26cbb9c2121de3812a0a17739f65f/src%2Ftest%2Fcompile-fail%2Fvariant-used-as-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariant-used-as-type.rs?ref=764ef92ae7a26cbb9c2121de3812a0a17739f65f", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test error message when enum variants are used as types\n+\n+\n+// issue 21225\n+enum Ty {\n+    A,\n+    B(Ty::A),\n+    //~^ ERROR: found value `Ty::A` used as a type\n+}\n+\n+\n+// issue 19197\n+enum E {\n+    A\n+}\n+\n+impl E::A {}\n+//~^ ERROR: found value `E::A` used as a type\n+\n+fn main() {}"}]}