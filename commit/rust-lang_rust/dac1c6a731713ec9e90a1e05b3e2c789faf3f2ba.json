{"sha": "dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzFjNmE3MzE3MTNlYzllOTBhMWUwNWIzZTJjNzg5ZmFmM2YyYmE=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-05-22T14:31:09Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2019-06-11T05:07:24Z"}, "message": "Implement RFC 2645 (transparent enums and unions)\n\nTracking issue: #60405", "tree": {"sha": "276cd02fcc9fe0bdd1bf97cb9930e0ef4032f65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/276cd02fcc9fe0bdd1bf97cb9930e0ef4032f65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "html_url": "https://github.com/rust-lang/rust/commit/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02564de47b40e953b5144dfd37450c16a84672f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/02564de47b40e953b5144dfd37450c16a84672f1", "html_url": "https://github.com/rust-lang/rust/commit/02564de47b40e953b5144dfd37450c16a84672f1"}], "stats": {"total": 938, "additions": 730, "deletions": 208}, "files": [{"sha": "862411ab392031ee9315d4fc07edf5a61b04c6e9", "filename": "src/doc/unstable-book/src/language-features/transparent-enums.md", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,93 @@\n+# `transparent_enums`\n+\n+The tracking issue for this feature is [#60405]\n+\n+[60405]: https://github.com/rust-lang/rust/issues/60405\n+\n+----\n+\n+The `transparent_enums` feature allows you mark `enum`s as\n+`#[repr(transparent)]`. An `enum` may be `#[repr(transparent)]` if it has\n+exactly one variant, and that variant matches the same conditions which `struct`\n+requires for transparency. Some concrete illustrations follow.\n+\n+```rust\n+#![feature(transparent_enums)]\n+\n+// This enum has the same representation as `f32`.\n+#[repr(transparent)]\n+enum SingleFieldEnum {\n+    Variant(f32)\n+}\n+\n+// This enum has the same representation as `usize`.\n+#[repr(transparent)]\n+enum MultiFieldEnum {\n+    Variant { field: usize, nothing: () },\n+}\n+```\n+\n+For consistency with transparent `struct`s, `enum`s must have exactly one\n+non-zero-sized field. If all fields are zero-sized, the `enum` must not be\n+`#[repr(transparent)]`:\n+\n+```rust\n+#![feature(transparent_enums)]\n+\n+// This (non-transparent) enum is already valid in stable Rust:\n+pub enum GoodEnum {\n+    Nothing,\n+}\n+\n+// Error: transparent enum needs exactly one non-zero-sized field, but has 0\n+// #[repr(transparent)]\n+// pub enum BadEnum {\n+//     Nothing(()),\n+// }\n+\n+// Error: transparent enum needs exactly one non-zero-sized field, but has 0\n+// #[repr(transparent)]\n+// pub enum BadEmptyEnum {\n+//     Nothing,\n+// }\n+```\n+\n+The one exception is if the `enum` is generic over `T` and has a field of type\n+`T`, it may be `#[repr(transparent)]` even if `T` is a zero-sized type:\n+\n+```rust\n+#![feature(transparent_enums)]\n+\n+// This enum has the same representation as `T`.\n+#[repr(transparent)]\n+pub enum GenericEnum<T> {\n+    Variant(T, ()),\n+}\n+\n+// This is okay even though `()` is a zero-sized type.\n+pub const THIS_IS_OKAY: GenericEnum<()> = GenericEnum::Variant((), ());\n+```\n+\n+Transparent `enum`s require exactly one variant:\n+\n+```rust\n+// Error: transparent enum needs exactly one variant, but has 0\n+// #[repr(transparent)]\n+// pub enum TooFewVariants {\n+// }\n+\n+// Error: transparent enum needs exactly one variant, but has 2\n+// #[repr(transparent)]\n+// pub enum TooManyVariants {\n+//     First(usize),\n+//     Second,\n+// }\n+```\n+\n+Like transarent `struct`s, a transparent `enum` of type `E` has the same layout,\n+size, and ABI as its single non-ZST field. If it is generic over a type `T`, and\n+all its fields are ZSTs except for exactly one field of type `T`, then it has\n+the same layout and ABI as `T` (even if `T` is a ZST when monomorphized).\n+\n+Like transparent `struct`s, transparent `enum`s are FFI-safe if and only if\n+their underlying representation type is also FFI-safe."}, {"sha": "b731c9ea6d0123c23d536828891a28403e3a564c", "filename": "src/doc/unstable-book/src/language-features/transparent-unions.md", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-unions.md?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,83 @@\n+# `transparent_unions`\n+\n+The tracking issue for this feature is [#60405]\n+\n+[60405]: https://github.com/rust-lang/rust/issues/60405\n+\n+----\n+\n+The `transparent_unions` feature allows you mark `union`s as\n+`#[repr(transparent)]`. A `union` may be `#[repr(transparent)]` in exactly the\n+same conditions in which a `struct` may be `#[repr(transparent)]` (generally,\n+this means the `union` must have exactly one non-zero-sized field). Some\n+concrete illustrations follow.\n+\n+```rust\n+#![feature(transparent_unions)]\n+\n+// This union has the same representation as `f32`.\n+#[repr(transparent)]\n+union SingleFieldUnion {\n+    field: f32,\n+}\n+\n+// This union has the same representation as `usize`.\n+#[repr(transparent)]\n+union MultiFieldUnion {\n+    field: usize,\n+    nothing: (),\n+}\n+```\n+\n+For consistency with transparent `struct`s, `union`s must have exactly one\n+non-zero-sized field. If all fields are zero-sized, the `union` must not be\n+`#[repr(transparent)]`:\n+\n+```rust\n+#![feature(transparent_unions)]\n+\n+// This (non-transparent) union is already valid in stable Rust:\n+pub union GoodUnion {\n+    pub nothing: (),\n+}\n+\n+// Error: transparent union needs exactly one non-zero-sized field, but has 0\n+// #[repr(transparent)]\n+// pub union BadUnion {\n+//     pub nothing: (),\n+// }\n+```\n+\n+The one exception is if the `union` is generic over `T` and has a field of type\n+`T`, it may be `#[repr(transparent)]` even if `T` is a zero-sized type:\n+\n+```rust\n+#![feature(transparent_unions)]\n+\n+// This union has the same representation as `T`.\n+#[repr(transparent)]\n+pub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.\n+    pub field: T,\n+    pub nothing: (),\n+}\n+\n+// This is okay even though `()` is a zero-sized type.\n+pub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };\n+```\n+\n+Like transarent `struct`s, a transparent `union` of type `U` has the same\n+layout, size, and ABI as its single non-ZST field. If it is generic over a type\n+`T`, and all its fields are ZSTs except for exactly one field of type `T`, then\n+it has the same layout and ABI as `T` (even if `T` is a ZST when monomorphized).\n+\n+Like transparent `struct`s, transparent `union`s are FFI-safe if and only if\n+their underlying representation type is also FFI-safe.\n+\n+A `union` may not be eligible for the same nonnull-style optimizations that a\n+`struct` or `enum` (with the same fields) are eligible for. Adding\n+`#[repr(transparent)]` to  `union` does not change this. To give a more concrete\n+example, it is unspecified whether `size_of::<T>()` is equal to\n+`size_of::<Option<T>>()`, where `T` is a `union` (regardless of whether or not\n+it is transparent). The Rust compiler is free to perform this optimization if\n+possible, but is not required to, and different compiler versions may differ in\n+their application of these optimizations."}, {"sha": "f7d1094b3a2d1407c14c471f85a7b0d37afa9760", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -181,12 +181,9 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n             let (article, allowed_targets) = match hint.name_or_empty() {\n                 name @ sym::C | name @ sym::align => {\n                     is_c |= name == sym::C;\n-                    if target != Target::Struct &&\n-                            target != Target::Union &&\n-                            target != Target::Enum {\n-                                (\"a\", \"struct, enum or union\")\n-                    } else {\n-                        continue\n+                    match target {\n+                        Target::Struct | Target::Union | Target::Enum => continue,\n+                        _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n                 sym::packed => {\n@@ -207,10 +204,9 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 }\n                 sym::transparent => {\n                     is_transparent = true;\n-                    if target != Target::Struct {\n-                        (\"a\", \"struct\")\n-                    } else {\n-                        continue\n+                    match target {\n+                        Target::Struct | Target::Union | Target::Enum => continue,\n+                        _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n                 sym::i8  | sym::u8  | sym::i16 | sym::u16 |\n@@ -241,7 +237,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         if is_transparent && hints.len() > 1 {\n             let hint_spans: Vec<_> = hint_spans.clone().collect();\n             span_err!(self.tcx.sess, hint_spans, E0692,\n-                      \"transparent struct cannot have other repr hints\");\n+                      \"transparent {} cannot have other repr hints\", target);\n         }\n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n@@ -277,7 +273,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                         attr.span,\n                         stmt.span,\n                         \"attribute should not be applied to a statement\",\n-                        \"not a struct, enum or union\",\n+                        \"not a struct, enum, or union\",\n                     );\n                 }\n             }\n@@ -298,7 +294,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                     attr.span,\n                     expr.span,\n                     \"attribute should not be applied to an expression\",\n-                    \"not defining a struct, enum or union\",\n+                    \"not defining a struct, enum, or union\",\n                 );\n             }\n         }"}, {"sha": "80781dd9bc7360805c35402ceaf0565f9dd0fd89", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -2303,7 +2303,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     /// Returns an iterator over all fields contained\n     /// by this ADT.\n     #[inline]\n-    pub fn all_fields<'s>(&'s self) -> impl Iterator<Item = &'s FieldDef> {\n+    pub fn all_fields<'s>(&'s self) -> impl Iterator<Item = &'s FieldDef> + Clone {\n         self.variants.iter().flat_map(|v| v.fields.iter())\n     }\n "}, {"sha": "f89a772bef5da55ec48b46ce01cb84aa5e28b327", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -531,8 +531,8 @@ fn ty_is_known_nonnull<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> b\n     match ty.sty {\n         ty::FnPtr(_) => true,\n         ty::Ref(..) => true,\n-        ty::Adt(field_def, substs) if field_def.repr.transparent() && field_def.is_struct() => {\n-            for field in &field_def.non_enum_variant().fields {\n+        ty::Adt(field_def, substs) if field_def.repr.transparent() && !field_def.is_union() => {\n+            for field in field_def.all_fields() {\n                 let field_ty = tcx.normalize_erasing_regions(\n                     ParamEnv::reveal_all(),\n                     field.ty(tcx, substs),\n@@ -627,8 +627,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             return FfiUnsafe {\n                                 ty: ty,\n                                 reason: \"this struct has unspecified layout\",\n-                                help: Some(\"consider adding a #[repr(C)] or #[repr(transparent)] \\\n-                                            attribute to this struct\"),\n+                                help: Some(\"consider adding a `#[repr(C)]` or \\\n+                                            `#[repr(transparent)]` attribute to this struct\"),\n                             };\n                         }\n \n@@ -668,11 +668,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n-                        if !def.repr.c() {\n+                        if !def.repr.c() && !def.repr.transparent() {\n                             return FfiUnsafe {\n                                 ty: ty,\n                                 reason: \"this union has unspecified layout\",\n-                                help: Some(\"consider adding a #[repr(C)] attribute to this union\"),\n+                                help: Some(\"consider adding a `#[repr(C)]` or \\\n+                                            `#[repr(transparent)]` attribute to this union\"),\n                             };\n                         }\n \n@@ -690,6 +691,11 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 ParamEnv::reveal_all(),\n                                 field.ty(cx, substs),\n                             );\n+                            // repr(transparent) types are allowed to have arbitrary ZSTs, not just\n+                            // PhantomData -- skip checking all ZST fields.\n+                            if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n+                                continue;\n+                            }\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n                                 FfiSafe => {\n@@ -712,26 +718,32 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         // Check for a repr() attribute to specify the size of the\n                         // discriminant.\n-                        if !def.repr.c() && def.repr.int.is_none() {\n+                        if !def.repr.c() && !def.repr.transparent() && def.repr.int.is_none() {\n                             // Special-case types like `Option<extern fn()>`.\n                             if !is_repr_nullable_ptr(cx, ty, def, substs) {\n                                 return FfiUnsafe {\n                                     ty: ty,\n                                     reason: \"enum has no representation hint\",\n-                                    help: Some(\"consider adding a #[repr(...)] attribute \\\n-                                                to this enum\"),\n+                                    help: Some(\"consider adding a `#[repr(C)]`, \\\n+                                                `#[repr(transparent)]`, or integer `#[repr(...)]` \\\n+                                                attribute to this enum\"),\n                                 };\n                             }\n                         }\n \n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {\n-                                let arg = cx.normalize_erasing_regions(\n+                                let field_ty = cx.normalize_erasing_regions(\n                                     ParamEnv::reveal_all(),\n                                     field.ty(cx, substs),\n                                 );\n-                                let r = self.check_type_for_ffi(cache, arg);\n+                                // repr(transparent) types are allowed to have arbitrary ZSTs, not\n+                                // just PhantomData -- skip checking all ZST fields.\n+                                if def.repr.transparent() && is_zst(cx, field.did, field_ty) {\n+                                    continue;\n+                                }\n+                                let r = self.check_type_for_ffi(cache, field_ty);\n                                 match r {\n                                     FfiSafe => {}\n                                     FfiUnsafe { .. } => {"}, {"sha": "2e53b380cb71a6b8441b4db009c22d0b424be192", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1310,7 +1310,7 @@ fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n-\n+    check_transparent(tcx, span, def_id);\n     check_packed(tcx, span, def_id);\n }\n \n@@ -1807,8 +1807,43 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n         return;\n     }\n \n+    if adt.is_enum() {\n+        if !tcx.features().transparent_enums {\n+            emit_feature_err(&tcx.sess.parse_sess,\n+                             sym::transparent_enums,\n+                             sp,\n+                             GateIssue::Language,\n+                             \"transparent enums are unstable\");\n+        }\n+        if adt.variants.len() != 1 {\n+            let variant_spans: Vec<_> = adt.variants.iter().map(|variant| {\n+                tcx.hir().span_if_local(variant.def_id).unwrap()\n+            }).collect();\n+            let mut err = struct_span_err!(tcx.sess, sp, E0731,\n+                            \"transparent enum needs exactly one variant, but has {}\",\n+                            adt.variants.len());\n+            if !variant_spans.is_empty() {\n+                err.span_note(variant_spans, &format!(\"the following variants exist on `{}`\",\n+                                                      tcx.def_path_str(def_id)));\n+            }\n+            err.emit();\n+            if adt.variants.is_empty() {\n+                // Don't bother checking the fields. No variants (and thus no fields) exist.\n+                return;\n+            }\n+        }\n+    }\n+\n+    if adt.is_union() && !tcx.features().transparent_unions {\n+        emit_feature_err(&tcx.sess.parse_sess,\n+                         sym::transparent_unions,\n+                         sp,\n+                         GateIssue::Language,\n+                         \"transparent unions are unstable\");\n+    }\n+\n     // For each field, figure out if it's known to be a ZST and align(1)\n-    let field_infos = adt.non_enum_variant().fields.iter().map(|field| {\n+    let field_infos = adt.all_fields().map(|field| {\n         let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));\n         let param_env = tcx.param_env(field.did);\n         let layout = tcx.layout_of(param_env.and(ty));\n@@ -1823,16 +1858,24 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n     let non_zst_count = non_zst_fields.clone().count();\n     if non_zst_count != 1 {\n         let field_spans: Vec<_> = non_zst_fields.map(|(span, _zst, _align1)| span).collect();\n-        struct_span_err!(tcx.sess, sp, E0690,\n-                         \"transparent struct needs exactly one non-zero-sized field, but has {}\",\n-                         non_zst_count)\n-        .span_note(field_spans, \"non-zero-sized field\")\n-        .emit();\n+\n+        let mut err = struct_span_err!(tcx.sess, sp, E0690,\n+                         \"{}transparent {} needs exactly one non-zero-sized field, but has {}\",\n+                         if adt.is_enum() { \"the variant of a \" } else { \"\" },\n+                         adt.descr(),\n+                         non_zst_count);\n+        if !field_spans.is_empty() {\n+            err.span_note(field_spans,\n+                          &format!(\"the following non-zero-sized fields exist on `{}`:\",\n+                                   tcx.def_path_str(def_id)));\n+        }\n+        err.emit();\n     }\n     for (span, zst, align1) in field_infos {\n         if zst && !align1 {\n             span_err!(tcx.sess, span, E0691,\n-                      \"zero-sized field in transparent struct has alignment larger than 1\");\n+                      \"zero-sized field in transparent {} has alignment larger than 1\",\n+                      adt.descr());\n         }\n     }\n }\n@@ -1899,6 +1942,7 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     check_representable(tcx, sp, def_id);\n+    check_transparent(tcx, sp, def_id);\n }\n \n fn report_unexpected_variant_res<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "0b618cdf1dbb71d1b2fc67551d59a8615ec0bb78", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -4484,7 +4484,7 @@ let _ = (2.0 as f32).neg();\n \n E0690: r##\"\n A struct with the representation hint `repr(transparent)` had zero or more than\n-on fields that were not guaranteed to be zero-sized.\n+one fields that were not guaranteed to be zero-sized.\n \n Erroneous code example:\n \n@@ -4519,8 +4519,8 @@ struct LengthWithUnit<U> {\n \"##,\n \n E0691: r##\"\n-A struct with the `repr(transparent)` representation hint contains a zero-sized\n-field that requires non-trivial alignment.\n+A struct, enum, or union with the `repr(transparent)` representation hint\n+contains a zero-sized field that requires non-trivial alignment.\n \n Erroneous code example:\n \n@@ -4535,11 +4535,11 @@ struct Wrapper(f32, ForceAlign32); // error: zero-sized field in transparent\n                                    //        struct has alignment larger than 1\n ```\n \n-A transparent struct is supposed to be represented exactly like the piece of\n-data it contains. Zero-sized fields with different alignment requirements\n-potentially conflict with this property. In the example above, `Wrapper` would\n-have to be aligned to 32 bytes even though `f32` has a smaller alignment\n-requirement.\n+A transparent struct, enum, or union is supposed to be represented exactly like\n+the piece of data it contains. Zero-sized fields with different alignment\n+requirements potentially conflict with this property. In the example above,\n+`Wrapper` would have to be aligned to 32 bytes even though `f32` has a smaller\n+alignment requirement.\n \n Consider removing the over-aligned zero-sized field:\n \n@@ -4569,7 +4569,6 @@ the alignment of the zero-sized type is less than or equal to the data field's\n alignment.\n \"##,\n \n-\n E0699: r##\"\n A method was called on a raw pointer whose inner type wasn't completely known.\n \n@@ -4680,6 +4679,26 @@ match r {\n ```\n \"##,\n \n+E0731: r##\"\n+An enum with the representation hint `repr(transparent)` had zero or more than\n+one variants.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0731\n+#[repr(transparent)]\n+enum Status { // error: transparent enum needs exactly one variant, but has 2\n+    Errno(u32),\n+    Ok,\n+}\n+```\n+\n+Because transparent enums are represented exactly like one of their variants at\n+run time, said variant must be uniquely determined. If there is no variant, or\n+if there are multiple variants, it is not clear how the enum should be\n+represented.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "044c4b18905ef5e874e2bc2737816138573c916e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -561,6 +561,12 @@ declare_features! (\n     // FIXME Create issue\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n \n+    // #[repr(transparent)] on enums.\n+    (active, transparent_enums, \"1.37.0\", Some(60405), None),\n+\n+    // #[repr(transparent)] on unions.\n+    (active, transparent_unions, \"1.37.0\", Some(60405), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "875c286bd8a9005da15d98e53243e0e5374189d6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -623,6 +623,8 @@ symbols! {\n         trait_alias,\n         transmute,\n         transparent,\n+        transparent_enums,\n+        transparent_unions,\n         trivial_bounds,\n         Try,\n         try_blocks,"}, {"sha": "e7c4b6193bc0989ac09dc2dd8be43c56c31b3328", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n // ignore-arm\n // ignore-mips\n@@ -7,36 +8,76 @@\n // ignore-powerpc64\n // See repr-transparent.rs\n \n+#![feature(transparent_enums, transparent_unions)]\n+\n #![crate_type=\"lib\"]\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n-pub struct Big([u32; 16]);\n+pub struct BigS([u32; 16]);\n+\n+#[repr(transparent)]\n+pub struct TsBigS(BigS);\n+\n+#[repr(transparent)]\n+pub union TuBigS {\n+    field: BigS,\n+}\n \n #[repr(transparent)]\n-pub struct BigW(Big);\n+pub enum TeBigS {\n+    Variant(BigS),\n+}\n+\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS:.*]])\n+#[no_mangle]\n+pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n+\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS]])\n+#[no_mangle]\n+pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_Big(%Big* [[BIG_RET_ATTRS:.*]], %Big* [[BIG_ARG_ATTRS:.*]])\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS]])\n #[no_mangle]\n-pub extern fn test_Big(_: Big) -> Big { loop {} }\n+pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_BigW(%BigW* [[BIG_RET_ATTRS]], %BigW* [[BIG_ARG_ATTRS]])\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS]])\n #[no_mangle]\n-pub extern fn test_BigW(_: BigW) -> BigW { loop {} }\n+pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n pub union BigU {\n     foo: [u32; 16],\n }\n \n #[repr(transparent)]\n-pub struct BigUw(BigU);\n+pub struct TsBigU(BigU);\n+\n+#[repr(transparent)]\n+pub union TuBigU {\n+    field: BigU,\n+}\n+\n+#[repr(transparent)]\n+pub enum TeBigU {\n+    Variant(BigU),\n+}\n \n // CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS:.*]])\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_BigUw(%BigUw* [[BIGU_RET_ATTRS]], %BigUw* [[BIGU_ARG_ATTRS]])\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS]])\n+#[no_mangle]\n+pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n+\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS]])\n+#[no_mangle]\n+pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n+\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS]])\n #[no_mangle]\n-pub extern fn test_BigUw(_: BigUw) -> BigUw { loop {} }\n+pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "5521c3c849f5363a661ec24f58235e503cfae22f", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -14,36 +14,76 @@\n // ignore-x86_64\n // See repr-transparent.rs\n \n+#![feature(transparent_enums, transparent_unions)]\n+\n #![crate_type=\"lib\"]\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n-pub struct Big([u32; 16]);\n+pub struct BigS([u32; 16]);\n+\n+#[repr(transparent)]\n+pub struct TsBigS(BigS);\n+\n+#[repr(transparent)]\n+pub union TuBigS {\n+    field: BigS,\n+}\n \n #[repr(transparent)]\n-pub struct BigW(Big);\n+pub enum TeBigS {\n+    Variant(BigS),\n+}\n+\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [16 x i32]\n+#[no_mangle]\n+pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n+\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n+#[no_mangle]\n+pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_Big(%Big* [[BIG_RET_ATTRS:.*]], [16 x i32]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [16 x i32]\n #[no_mangle]\n-pub extern fn test_Big(_: Big) -> Big { loop {} }\n+pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_BigW(%BigW* [[BIG_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [16 x i32]\n #[no_mangle]\n-pub extern fn test_BigW(_: BigW) -> BigW { loop {} }\n+pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n pub union BigU {\n     foo: [u32; 16],\n }\n \n #[repr(transparent)]\n-pub struct BigUw(BigU);\n+pub struct TsBigU(BigU);\n+\n+#[repr(transparent)]\n+pub union TuBigU {\n+    field: BigU,\n+}\n+\n+#[repr(transparent)]\n+pub enum TeBigU {\n+    Variant(BigU),\n+}\n \n // CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_BigUw(%BigUw* [[BIGU_RET_ATTRS]], [16 x i32]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [16 x i32]\n+#[no_mangle]\n+pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n+\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [16 x i32]\n+#[no_mangle]\n+pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n+\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [16 x i32]\n #[no_mangle]\n-pub extern fn test_BigUw(_: BigUw) -> BigUw { loop {} }\n+pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "1a59c9b48b9765a5c7acf4cb4a6024ef6def04f4", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -3,36 +3,76 @@\n // only-mips64\n // See repr-transparent.rs\n \n+#![feature(transparent_enums, transparent_unions)]\n+\n #![crate_type=\"lib\"]\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n-pub struct Big([u32; 16]);\n+pub struct BigS([u32; 16]);\n+\n+#[repr(transparent)]\n+pub struct TsBigS(BigS);\n+\n+#[repr(transparent)]\n+pub union TuBigS {\n+    field: BigS,\n+}\n \n #[repr(transparent)]\n-pub struct BigW(Big);\n+pub enum TeBigS {\n+    Variant(BigS),\n+}\n+\n+// CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n+\n+// CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n-// CHECK: define void @test_Big(%Big* [[BIG_RET_ATTRS:.*]], [8 x i64]\n+// CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], [8 x i64]\n #[no_mangle]\n-pub extern fn test_Big(_: Big) -> Big { loop {} }\n+pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n-// CHECK: define void @test_BigW(%BigW* [[BIG_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], [8 x i64]\n #[no_mangle]\n-pub extern fn test_BigW(_: BigW) -> BigW { loop {} }\n+pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n \n+#[derive(Clone, Copy)]\n #[repr(C)]\n pub union BigU {\n     foo: [u32; 16],\n }\n \n #[repr(transparent)]\n-pub struct BigUw(BigU);\n+pub struct TsBigU(BigU);\n+\n+#[repr(transparent)]\n+pub union TuBigU {\n+    field: BigU,\n+}\n+\n+#[repr(transparent)]\n+pub enum TeBigU {\n+    Variant(BigU),\n+}\n \n // CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n #[no_mangle]\n pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n \n-// CHECK: define void @test_BigUw(%BigUw* [[BIGU_RET_ATTRS]], [8 x i64]\n+// CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n+\n+// CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n+\n+// CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], [8 x i64]\n #[no_mangle]\n-pub extern fn test_BigUw(_: BigUw) -> BigUw { loop {} }\n+pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "c9f3837565808707ef1c7fb0ffa19b043e4cca90", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,13 +1,16 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type=\"lib\"]\n-#![feature(repr_simd)]\n+#![feature(repr_simd, transparent_enums, transparent_unions)]\n \n use std::marker::PhantomData;\n \n+#[derive(Copy, Clone)]\n pub struct Zst1;\n+#[derive(Copy, Clone)]\n pub struct Zst2(());\n \n+#[derive(Copy, Clone)]\n #[repr(transparent)]\n pub struct F32(f32);\n \n@@ -112,6 +115,44 @@ pub struct StructWithProjection(<f32 as Mirror>::It);\n #[no_mangle]\n pub extern fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n+#[repr(transparent)]\n+pub enum EnumF32 {\n+    Variant(F32)\n+}\n+\n+// CHECK: define float @test_EnumF32(float %arg0)\n+#[no_mangle]\n+pub extern fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n+\n+#[repr(transparent)]\n+pub enum EnumF32WithZsts {\n+    Variant(Zst1, F32, Zst2)\n+}\n+\n+// CHECK: define float @test_EnumF32WithZsts(float %arg0)\n+#[no_mangle]\n+pub extern fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n+\n+#[repr(transparent)]\n+pub union UnionF32 {\n+    field: F32,\n+}\n+\n+// CHECK: define float @test_UnionF32(float %arg0)\n+#[no_mangle]\n+pub extern fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n+\n+#[repr(transparent)]\n+pub union UnionF32WithZsts {\n+    zst1: Zst1,\n+    field: F32,\n+    zst2: Zst2,\n+}\n+\n+// CHECK: define float @test_UnionF32WithZsts(float %arg0)\n+#[no_mangle]\n+pub extern fn test_UnionF32WithZsts(_: UnionF32WithZsts) -> UnionF32WithZsts { loop {} }\n+\n \n // All that remains to be tested are aggregates. They are tested in separate files called repr-\n // transparent-*.rs  with `only-*` or `ignore-*` directives, because the expected LLVM IR"}, {"sha": "f871c218558603175ec75150d27bf8f54ecea348", "filename": "src/test/run-pass/structs-enums/enum-null-pointer-opt.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+#![feature(transparent_unions)]\n+\n use std::mem::size_of;\n use std::num::NonZeroUsize;\n use std::ptr::NonNull;\n@@ -10,6 +12,11 @@ trait Mirror { type Image; }\n impl<T> Mirror for T { type Image = T; }\n struct ParamTypeStruct<T>(T);\n struct AssocTypeStruct<T>(<T as Mirror>::Image);\n+#[repr(transparent)]\n+union MaybeUninitUnion<T: Copy> {\n+    _value: T,\n+    _uninit: (),\n+}\n \n fn main() {\n     // Functions\n@@ -29,9 +36,12 @@ fn main() {\n     // Pointers - Box<T>\n     assert_eq!(size_of::<Box<isize>>(), size_of::<Option<Box<isize>>>());\n \n-    // The optimization can't apply to raw pointers\n+    // The optimization can't apply to raw pointers or unions with a ZST field.\n     assert!(size_of::<Option<*const isize>>() != size_of::<*const isize>());\n     assert!(Some(0 as *const isize).is_some()); // Can't collapse None to null\n+    assert_ne!(size_of::<fn(isize)>(), size_of::<Option<MaybeUninitUnion<fn(isize)>>>());\n+    assert_ne!(size_of::<&str>(), size_of::<Option<MaybeUninitUnion<&str>>>());\n+    assert_ne!(size_of::<NonNull<isize>>(), size_of::<Option<MaybeUninitUnion<NonNull<isize>>>>());\n \n     struct Foo {\n         _a: Box<isize>"}, {"sha": "a0b82375e777d02edc058e849374602bef6d8568", "filename": "src/test/ui/attr-usage-repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,6 +1,6 @@\n #![feature(repr_simd)]\n \n-#[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n+#[repr(C)] //~ ERROR: attribute should be applied to struct, enum, or union\n fn f() {}\n \n #[repr(C)]"}, {"sha": "82d80d8d0b1738a23a86677d2ce2417ee0d0dcd1", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,10 +1,10 @@\n-error[E0517]: attribute should be applied to struct, enum or union\n+error[E0517]: attribute should be applied to struct, enum, or union\n   --> $DIR/attr-usage-repr.rs:3:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | fn f() {}\n-   | --------- not a struct, enum or union\n+   | --------- not a struct, enum, or union\n \n error[E0517]: attribute should be applied to enum\n   --> $DIR/attr-usage-repr.rs:15:8"}, {"sha": "2cfca1724c81bd15b31739f11aa1a5baecb40bc8", "filename": "src/test/ui/error-codes/E0517.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0517.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,10 +1,10 @@\n-error[E0517]: attribute should be applied to struct, enum or union\n+error[E0517]: attribute should be applied to struct, enum, or union\n   --> $DIR/E0517.rs:1:8\n    |\n LL | #[repr(C)]\n    |        ^\n LL | type Foo = u8;\n-   | -------------- not a struct, enum or union\n+   | -------------- not a struct, enum, or union\n \n error[E0517]: attribute should be applied to struct or union\n   --> $DIR/E0517.rs:4:8\n@@ -22,14 +22,14 @@ LL | #[repr(u8)]\n LL | struct Foo3 {bar: bool, baz: bool}\n    | ---------------------------------- not an enum\n \n-error[E0517]: attribute should be applied to struct, enum or union\n+error[E0517]: attribute should be applied to struct, enum, or union\n   --> $DIR/E0517.rs:10:8\n    |\n LL |   #[repr(C)]\n    |          ^\n LL | / impl Foo3 {\n LL | | }\n-   | |_- not a struct, enum or union\n+   | |_- not a struct, enum, or union\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0a7a73a168ed5b8d3ff968e017731f0ff2de08cd", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,6 @@\n+#[repr(transparent)]\n+enum OkButUnstableEnum { //~ ERROR transparent enums are unstable\n+    Foo((), String, ()),\n+}\n+\n+fn main() {}"}, {"sha": "4b22654e9e411f292c7706b08eb0955cfb983613", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,14 @@\n+error[E0658]: transparent enums are unstable\n+  --> $DIR/feature-gate-transparent_enums.rs:2:1\n+   |\n+LL | / enum OkButUnstableEnum {\n+LL | |     Foo((), String, ()),\n+LL | | }\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n+   = help: add #![feature(transparent_enums)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "73cac0a49148b500fe4dc83605e792a08b094d5b", "filename": "src/test/ui/feature-gates/feature-gate-transparent_unions.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,7 @@\n+#[repr(transparent)]\n+union OkButUnstableUnion { //~ ERROR transparent unions are unstable\n+    field: u8,\n+    zst: (),\n+}\n+\n+fn main() {}"}, {"sha": "933b227de63b9af9469e88b81c12b88cca6bc181", "filename": "src/test/ui/feature-gates/feature-gate-transparent_unions.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -0,0 +1,15 @@\n+error[E0658]: transparent unions are unstable\n+  --> $DIR/feature-gate-transparent_unions.rs:2:1\n+   |\n+LL | / union OkButUnstableUnion {\n+LL | |     field: u8,\n+LL | |     zst: (),\n+LL | | }\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n+   = help: add #![feature(transparent_unions)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e0491093a722aad3ca9a2af0ed7c541a8edec61b", "filename": "src/test/ui/issues/issue-14309.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -24,7 +24,7 @@ error: `extern` block uses type `A` which is not FFI-safe: this struct has unspe\n LL |     fn bar(x: B);\n    |               ^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -39,7 +39,7 @@ error: `extern` block uses type `A` which is not FFI-safe: this struct has unspe\n LL |     fn qux(x: A2);\n    |               ^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -54,7 +54,7 @@ error: `extern` block uses type `A` which is not FFI-safe: this struct has unspe\n LL |     fn quux(x: B2);\n    |                ^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -69,7 +69,7 @@ error: `extern` block uses type `A` which is not FFI-safe: this struct has unspe\n LL |     fn fred(x: D);\n    |                ^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |"}, {"sha": "142d8e21532d82b2ccb8942e82a8b08d119e51dc", "filename": "src/test/ui/issues/issue-16250.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: #[deny(improper_ctypes)] implied by #[deny(warnings)]\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-16250.rs:3:1\n    |"}, {"sha": "45eb5e4008089c2ea6206109ac4d59159c466a48", "filename": "src/test/ui/issues/issue-31769.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31769.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     #[inline] struct Foo;  //~ ERROR attribute should be applied to function or closure\n-    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct, enum or union\n+    #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct, enum, or union\n }"}, {"sha": "20534e1ae82c57a918a69dd844efd57160d26868", "filename": "src/test/ui/issues/issue-31769.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31769.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -4,11 +4,11 @@ error[E0518]: attribute should be applied to function or closure\n LL |     #[inline] struct Foo;\n    |     ^^^^^^^^^ ----------- not a function or closure\n \n-error[E0517]: attribute should be applied to struct, enum or union\n+error[E0517]: attribute should be applied to struct, enum, or union\n   --> $DIR/issue-31769.rs:3:12\n    |\n LL |     #[repr(C)] fn foo() {}\n-   |            ^   ----------- not a struct, enum or union\n+   |            ^   ----------- not a struct, enum, or union\n \n error: aborting due to 2 previous errors\n "}, {"sha": "339c1a3b8f617f9e7e69f5b6d45401ee40dc7739", "filename": "src/test/ui/issues/issue-43988.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -32,7 +32,7 @@ error[E0517]: attribute should not be applied to a statement\n LL |     #[repr(nothing)]\n    |     ^^^^^^^^^^^^^^^^\n LL |     let _x = 0;\n-   |     ----------- not a struct, enum or union\n+   |     ----------- not a struct, enum, or union\n \n error[E0517]: attribute should not be applied to an expression\n   --> $DIR/issue-43988.rs:18:5\n@@ -42,15 +42,15 @@ LL |       #[repr(something_not_real)]\n LL | /     loop {\n LL | |         ()\n LL | |     };\n-   | |_____- not defining a struct, enum or union\n+   | |_____- not defining a struct, enum, or union\n \n error[E0517]: attribute should not be applied to a statement\n   --> $DIR/issue-43988.rs:24:5\n    |\n LL |     #[repr]\n    |     ^^^^^^^\n LL |     let _y = \"123\";\n-   |     --------------- not a struct, enum or union\n+   |     --------------- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43988.rs:31:5\n@@ -64,7 +64,7 @@ error[E0517]: attribute should not be applied to an expression\n   --> $DIR/issue-43988.rs:35:14\n    |\n LL |     let _z = #[repr] 1;\n-   |              ^^^^^^^ - not defining a struct, enum or union\n+   |              ^^^^^^^ - not defining a struct, enum, or union\n \n error: aborting due to 9 previous errors\n "}, {"sha": "45eeffff7a6ac392116befb82460348b61270999", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,3 +1,4 @@\n+#![feature(transparent_enums, transparent_unions)]\n #![deny(improper_ctypes)]\n #![allow(dead_code)]\n \n@@ -18,7 +19,17 @@ enum U8 { A, B, C }\n enum Isize { A, B, C }\n \n #[repr(transparent)]\n-struct Transparent<T>(T, std::marker::PhantomData<Z>);\n+struct TransparentStruct<T>(T, std::marker::PhantomData<Z>);\n+\n+#[repr(transparent)]\n+enum TransparentEnum<T> {\n+   Variant(T, std::marker::PhantomData<Z>),\n+}\n+\n+#[repr(transparent)]\n+union TransparentUnion<T: Copy> {\n+   field: T,\n+}\n \n struct Rust<T>(T);\n \n@@ -47,7 +58,10 @@ extern {\n    fn nonzero_i128(x: Option<num::NonZeroI128>);\n    //~^ ERROR 128-bit integers don't currently have a known stable ABI\n    fn nonzero_isize(x: Option<num::NonZeroIsize>);\n-   fn repr_transparent(x: Option<Transparent<num::NonZeroU8>>);\n+   fn transparent_struct(x: Option<TransparentStruct<num::NonZeroU8>>);\n+   fn transparent_enum(x: Option<TransparentEnum<num::NonZeroU8>>);\n+   fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n+   //~^ ERROR enum has no representation hint\n    fn repr_rust(x: Option<Rust<num::NonZeroU8>>); //~ ERROR enum has no representation hint\n    fn no_result(x: Result<(), num::NonZeroI32>); //~ ERROR enum has no representation hint\n }"}, {"sha": "2a60cd12d993652595388e9ee76f08c64949c9e9", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,74 +1,82 @@\n error: `extern` block uses type `U` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:27:13\n+  --> $DIR/lint-ctypes-enum.rs:38:13\n    |\n LL |    fn uf(x: U);\n    |             ^\n    |\n note: lint level defined here\n-  --> $DIR/lint-ctypes-enum.rs:1:9\n+  --> $DIR/lint-ctypes-enum.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(...)] attribute to this enum\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:7:1\n+  --> $DIR/lint-ctypes-enum.rs:8:1\n    |\n LL | enum U { A }\n    | ^^^^^^^^^^^^\n \n error: `extern` block uses type `B` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:28:13\n+  --> $DIR/lint-ctypes-enum.rs:39:13\n    |\n LL |    fn bf(x: B);\n    |             ^\n    |\n-   = help: consider adding a #[repr(...)] attribute to this enum\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:8:1\n+  --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n LL | enum B { C, D }\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `T` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:29:13\n+  --> $DIR/lint-ctypes-enum.rs:40:13\n    |\n LL |    fn tf(x: T);\n    |             ^\n    |\n-   = help: consider adding a #[repr(...)] attribute to this enum\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n note: type defined here\n-  --> $DIR/lint-ctypes-enum.rs:9:1\n+  --> $DIR/lint-ctypes-enum.rs:10:1\n    |\n LL | enum T { E, F, G }\n    | ^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes-enum.rs:40:23\n+  --> $DIR/lint-ctypes-enum.rs:51:23\n    |\n LL |    fn nonzero_u128(x: Option<num::NonZeroU128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes-enum.rs:47:23\n+  --> $DIR/lint-ctypes-enum.rs:58:23\n    |\n LL |    fn nonzero_i128(x: Option<num::NonZeroI128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: `extern` block uses type `std::option::Option<TransparentUnion<std::num::NonZeroU8>>` which is not FFI-safe: enum has no representation hint\n+  --> $DIR/lint-ctypes-enum.rs:63:28\n+   |\n+LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+\n error: `extern` block uses type `std::option::Option<Rust<std::num::NonZeroU8>>` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:51:20\n+  --> $DIR/lint-ctypes-enum.rs:65:20\n    |\n LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(...)] attribute to this enum\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n \n error: `extern` block uses type `std::result::Result<(), std::num::NonZeroI32>` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:52:20\n+  --> $DIR/lint-ctypes-enum.rs:66:20\n    |\n LL |    fn no_result(x: Result<(), num::NonZeroI32>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(...)] attribute to this enum\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "c78463beb6559492ecc45c9bc016946bcab3ae7b", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/lint-ctypes.rs:24:1\n    |\n@@ -22,7 +22,7 @@ error: `extern` block uses type `Foo` which is not FFI-safe: this struct has uns\n LL |     pub fn ptr_type2(size: *const Foo);\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/lint-ctypes.rs:24:1\n    |\n@@ -51,7 +51,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n LL |     pub fn box_type(p: Box<u32>);\n    |                        ^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n \n error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n   --> $DIR/lint-ctypes.rs:51:25\n@@ -142,7 +142,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:64:32\n@@ -164,7 +164,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n \n error: aborting due to 20 previous errors\n "}, {"sha": "c3d772f6266c056bff520e730b13254c4e5fdeca", "filename": "src/test/ui/repr/repr-transparent-other-items.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,26 +1,5 @@\n // See also repr-transparent.rs\n \n-#[repr(transparent)] //~ ERROR unsupported representation for zero-variant enum\n-enum Void {}         //~| ERROR should be applied to struct\n-\n-#[repr(transparent)] //~ ERROR should be applied to struct\n-enum FieldlessEnum {\n-    Foo,\n-    Bar,\n-}\n-\n-#[repr(transparent)] //~ ERROR should be applied to struct\n-enum Enum {\n-    Foo(String),\n-    Bar(u32),\n-}\n-\n-#[repr(transparent)] //~ ERROR should be applied to struct\n-union Foo {\n-    u: u32,\n-    s: i32\n-}\n-\n #[repr(transparent)] //~ ERROR should be applied to struct\n fn cant_repr_this() {}\n "}, {"sha": "03df3569b42bcc30ae10c229529f18d6f9928ed8", "filename": "src/test/ui/repr/repr-transparent-other-items.stderr", "status": "modified", "additions": 7, "deletions": 57, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-other-items.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -1,69 +1,19 @@\n-error[E0517]: attribute should be applied to struct\n+error[E0517]: attribute should be applied to struct, enum, or union\n   --> $DIR/repr-transparent-other-items.rs:3:8\n    |\n LL | #[repr(transparent)]\n    |        ^^^^^^^^^^^\n-LL | enum Void {}\n-   | ------------ not a struct\n-\n-error[E0517]: attribute should be applied to struct\n-  --> $DIR/repr-transparent-other-items.rs:6:8\n-   |\n-LL |   #[repr(transparent)]\n-   |          ^^^^^^^^^^^\n-LL | / enum FieldlessEnum {\n-LL | |     Foo,\n-LL | |     Bar,\n-LL | | }\n-   | |_- not a struct\n-\n-error[E0517]: attribute should be applied to struct\n-  --> $DIR/repr-transparent-other-items.rs:12:8\n-   |\n-LL |   #[repr(transparent)]\n-   |          ^^^^^^^^^^^\n-LL | / enum Enum {\n-LL | |     Foo(String),\n-LL | |     Bar(u32),\n-LL | | }\n-   | |_- not a struct\n-\n-error[E0517]: attribute should be applied to struct\n-  --> $DIR/repr-transparent-other-items.rs:18:8\n-   |\n-LL |   #[repr(transparent)]\n-   |          ^^^^^^^^^^^\n-LL | / union Foo {\n-LL | |     u: u32,\n-LL | |     s: i32\n-LL | | }\n-   | |_- not a struct\n-\n-error[E0517]: attribute should be applied to struct\n-  --> $DIR/repr-transparent-other-items.rs:24:8\n-   |\n-LL | #[repr(transparent)]\n-   |        ^^^^^^^^^^^\n LL | fn cant_repr_this() {}\n-   | ---------------------- not a struct\n+   | ---------------------- not a struct, enum, or union\n \n-error[E0517]: attribute should be applied to struct\n-  --> $DIR/repr-transparent-other-items.rs:27:8\n+error[E0517]: attribute should be applied to struct, enum, or union\n+  --> $DIR/repr-transparent-other-items.rs:6:8\n    |\n LL | #[repr(transparent)]\n    |        ^^^^^^^^^^^\n LL | static CANT_REPR_THIS: u32 = 0;\n-   | ------------------------------- not a struct\n-\n-error[E0084]: unsupported representation for zero-variant enum\n-  --> $DIR/repr-transparent-other-items.rs:3:1\n-   |\n-LL | #[repr(transparent)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-LL | enum Void {}\n-   | ------------ zero-variant enum\n+   | ------------------------------- not a struct, enum, or union\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0084, E0517.\n-For more information about an error, try `rustc --explain E0084`.\n+For more information about this error, try `rustc --explain E0517`."}, {"sha": "730d428ff500b6163918f25973302f93885733dc", "filename": "src/test/ui/repr/repr-transparent.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -3,7 +3,7 @@\n // - repr-transparent-other-reprs.rs\n // - repr-transparent-other-items.rs\n \n-#![feature(repr_align)]\n+#![feature(repr_align, transparent_enums, transparent_unions)]\n \n use std::marker::PhantomData;\n \n@@ -39,4 +39,36 @@ struct ZstAlign32<T>(PhantomData<T>);\n #[repr(transparent)]\n struct GenericAlign<T>(ZstAlign32<T>, u32); //~ ERROR alignment larger than 1\n \n+#[repr(transparent)] //~ ERROR unsupported representation for zero-variant enum\n+enum Void {}\n+//~^ ERROR transparent enum needs exactly one variant, but has 0\n+\n+#[repr(transparent)]\n+enum FieldlessEnum { //~ ERROR transparent enum needs exactly one non-zero-sized field, but has 0\n+    Foo,\n+}\n+\n+#[repr(transparent)]\n+enum TooManyFieldsEnum {\n+    Foo(u32, String),\n+}\n+//~^^^ ERROR transparent enum needs exactly one non-zero-sized field, but has 2\n+\n+#[repr(transparent)]\n+enum TooManyVariants { //~ ERROR transparent enum needs exactly one variant, but has 2\n+    Foo(String),\n+    Bar,\n+}\n+\n+#[repr(transparent)]\n+union UnitUnion { //~ ERROR transparent union needs exactly one non-zero-sized field, but has 0\n+    u: (),\n+}\n+\n+#[repr(transparent)]\n+union TooManyFields { //~ ERROR transparent union needs exactly one non-zero-sized field, but has 2\n+    u: u32,\n+    s: i32\n+}\n+\n fn main() {}"}, {"sha": "ea16bdf53783d2c51d5827da594aed7b9bd80ed0", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 83, "deletions": 13, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -3,40 +3,32 @@ error[E0690]: transparent struct needs exactly one non-zero-sized field, but has\n    |\n LL | struct NoFields;\n    | ^^^^^^^^^^^^^^^^\n-   |\n-   = note: non-zero-sized field\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:14:1\n    |\n LL | struct ContainsOnlyZst(());\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: non-zero-sized field\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:17:1\n    |\n LL | struct ContainsOnlyZstArray([bool; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: non-zero-sized field\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:20:1\n    |\n LL | struct ContainsMultipleZst(PhantomData<*const i32>, NoFields);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: non-zero-sized field\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:24:1\n    |\n LL | struct MultipleNonZst(u8, u8);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: non-zero-sized field\n+note: the following non-zero-sized fields exist on `MultipleNonZst`:\n   --> $DIR/repr-transparent.rs:24:23\n    |\n LL | struct MultipleNonZst(u8, u8);\n@@ -48,7 +40,7 @@ error[E0690]: transparent struct needs exactly one non-zero-sized field, but has\n LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: non-zero-sized field\n+note: the following non-zero-sized fields exist on `StructWithProjection`:\n   --> $DIR/repr-transparent.rs:30:33\n    |\n LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n@@ -66,7 +58,85 @@ error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n LL | struct GenericAlign<T>(ZstAlign32<T>, u32);\n    |                        ^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error[E0084]: unsupported representation for zero-variant enum\n+  --> $DIR/repr-transparent.rs:42:1\n+   |\n+LL | #[repr(transparent)]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+LL | enum Void {}\n+   | ------------ zero-variant enum\n+\n+error[E0731]: transparent enum needs exactly one variant, but has 0\n+  --> $DIR/repr-transparent.rs:43:1\n+   |\n+LL | enum Void {}\n+   | ^^^^^^^^^^^^\n+\n+error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 0\n+  --> $DIR/repr-transparent.rs:47:1\n+   |\n+LL | / enum FieldlessEnum {\n+LL | |     Foo,\n+LL | | }\n+   | |_^\n+\n+error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:52:1\n+   |\n+LL | / enum TooManyFieldsEnum {\n+LL | |     Foo(u32, String),\n+LL | | }\n+   | |_^\n+   |\n+note: the following non-zero-sized fields exist on `TooManyFieldsEnum`:\n+  --> $DIR/repr-transparent.rs:53:9\n+   |\n+LL |     Foo(u32, String),\n+   |         ^^^  ^^^^^^\n+\n+error[E0731]: transparent enum needs exactly one variant, but has 2\n+  --> $DIR/repr-transparent.rs:58:1\n+   |\n+LL | / enum TooManyVariants {\n+LL | |     Foo(String),\n+LL | |     Bar,\n+LL | | }\n+   | |_^\n+   |\n+note: the following variants exist on `TooManyVariants`\n+  --> $DIR/repr-transparent.rs:59:5\n+   |\n+LL |     Foo(String),\n+   |     ^^^^^^^^^^^\n+LL |     Bar,\n+   |     ^^^\n+\n+error[E0690]: transparent union needs exactly one non-zero-sized field, but has 0\n+  --> $DIR/repr-transparent.rs:64:1\n+   |\n+LL | / union UnitUnion {\n+LL | |     u: (),\n+LL | | }\n+   | |_^\n+\n+error[E0690]: transparent union needs exactly one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:69:1\n+   |\n+LL | / union TooManyFields {\n+LL | |     u: u32,\n+LL | |     s: i32\n+LL | | }\n+   | |_^\n+   |\n+note: the following non-zero-sized fields exist on `TooManyFields`:\n+  --> $DIR/repr-transparent.rs:70:5\n+   |\n+LL |     u: u32,\n+   |     ^^^^^^\n+LL |     s: i32\n+   |     ^^^^^^\n+\n+error: aborting due to 15 previous errors\n \n-Some errors have detailed explanations: E0690, E0691.\n-For more information about an error, try `rustc --explain E0690`.\n+Some errors have detailed explanations: E0084, E0690, E0691, E0731.\n+For more information about an error, try `rustc --explain E0084`."}, {"sha": "c60817a849a3bb2912ad82c3ce3804998a9caae9", "filename": "src/test/ui/union/union-repr-c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr?ref=dac1c6a731713ec9e90a1e05b3e2c789faf3f2ba", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(C)] attribute to this union\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this union\n note: type defined here\n   --> $DIR/union-repr-c.rs:9:1\n    |"}]}