{"sha": "57e0a7e5d8872c8fcea47fc20239b8921bda2576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTBhN2U1ZDg4NzJjOGZjZWE0N2ZjMjAyMzliODkyMWJkYTI1NzY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-29T21:15:51Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-29T21:31:39Z"}, "message": "derive: Skip PartialEq::ne for any zero-field enum or struct\n\nAlso detect unit structs and enums with zero field struct variants.", "tree": {"sha": "422eff1c4d2d8e46f6eeb185acaf0caedd825a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/422eff1c4d2d8e46f6eeb185acaf0caedd825a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e0a7e5d8872c8fcea47fc20239b8921bda2576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e0a7e5d8872c8fcea47fc20239b8921bda2576", "html_url": "https://github.com/rust-lang/rust/commit/57e0a7e5d8872c8fcea47fc20239b8921bda2576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e0a7e5d8872c8fcea47fc20239b8921bda2576/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190af51f303e21e22ea0a4d7dffeb09805d19010", "url": "https://api.github.com/repos/rust-lang/rust/commits/190af51f303e21e22ea0a4d7dffeb09805d19010", "html_url": "https://github.com/rust-lang/rust/commit/190af51f303e21e22ea0a4d7dffeb09805d19010"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "24444c3c39b26c376c9c3c16c03d9f87a77e51e7", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/57e0a7e5d8872c8fcea47fc20239b8921bda2576/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e0a7e5d8872c8fcea47fc20239b8921bda2576/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=57e0a7e5d8872c8fcea47fc20239b8921bda2576", "patch": "@@ -11,30 +11,26 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, BinOpKind, ItemKind, VariantData};\n+use syntax::ast::{MetaItem, Expr, BinOpKind, ItemKind};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n-fn is_clike_enum(item: &Annotatable) -> bool {\n-    match *item {\n-        Annotatable::Item(ref item) => {\n-            match item.node {\n-                ItemKind::Enum(ref enum_def, _) => {\n-                    enum_def.variants.iter().all(|v|\n-                        if let VariantData::Unit(..) = v.node.data {\n-                            true\n-                        } else {\n-                            false\n-                        }\n-                    )\n-                }\n-                _ => false,\n+fn is_type_without_fields(item: &Annotatable) -> bool {\n+    if let Annotatable::Item(ref item) = *item {\n+        match item.node {\n+            ItemKind::Enum(ref enum_def, _) => {\n+                enum_def.variants.iter().all(|v| v.node.data.fields().is_empty())\n             }\n+            ItemKind::Struct(ref variant_data, _) => {\n+                variant_data.fields().is_empty()\n+            }\n+            _ => false\n         }\n-        _ => false,\n+    } else {\n+        false\n     }\n }\n \n@@ -101,8 +97,10 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n     }\n \n     // avoid defining `ne` if we can\n+    // c-like enums, enums without any fields and structs without fields\n+    // can safely define only `eq`.\n     let mut methods = vec![md!(\"eq\", cs_eq)];\n-    if !is_clike_enum(item) {\n+    if !is_type_without_fields(item) {\n         methods.push(md!(\"ne\", cs_ne));\n     }\n "}]}