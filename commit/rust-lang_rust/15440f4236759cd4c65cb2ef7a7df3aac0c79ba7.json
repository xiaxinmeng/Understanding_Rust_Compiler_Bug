{"sha": "15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDQwZjQyMzY3NTljZDRjNjVjYjJlZjdhN2RmM2FhYzBjNzliYTc=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2013-01-26T08:35:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-16T02:04:11Z"}, "message": "rustpkg: Add info command for probing a pkg.rs and expose work_dir/src_dir in librustpkg", "tree": {"sha": "1747052092b7e10be11ce21567749d715bac3862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1747052092b7e10be11ce21567749d715bac3862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "html_url": "https://github.com/rust-lang/rust/commit/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe5a0a61cd52de71d1863501228ff78069d8337", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe5a0a61cd52de71d1863501228ff78069d8337", "html_url": "https://github.com/rust-lang/rust/commit/efe5a0a61cd52de71d1863501228ff78069d8337"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "a2741f33099e0c08e60b4978263c54ba31b842d7", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "patch": "@@ -27,13 +27,12 @@ extern mod syntax(vers = \"0.6\");\n \n use core::*;\n use io::{ReaderUtil, WriterUtil};\n-use std::getopts;\n+use std::{json, semver, getopts};\n use std::net::url;\n use send_map::linear::LinearMap;\n use rustc::metadata::filesearch;\n use rustc::driver::{driver, session};\n use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n-use std::semver;\n \n mod usage;\n mod util;\n@@ -251,6 +250,7 @@ impl PackageScript {\n \n struct Ctx {\n     cfgs: ~[~str],\n+    json: bool,\n     mut dep_cache: LinearMap<~str, bool>\n }\n \n@@ -294,6 +294,9 @@ impl Ctx {\n \n                 self.do_cmd(args[0]);\n             }\n+            ~\"info\" => {\n+                self.info();\n+            }\n             ~\"install\" => {\n                 self.install(if args.len() >= 1 { Some(args[0]) }\n                              else { None },\n@@ -470,6 +473,58 @@ impl Ctx {\n         true\n     }\n \n+    fn info() {\n+        if self.json {\n+            match PackageScript::parse(&os::getcwd()) {\n+                result::Ok(script) => {\n+                    let mut map = ~LinearMap();\n+\n+                    map.insert(~\"id\", json::String(script.id));\n+                    map.insert(~\"name\", json::String(script.name));\n+                    map.insert(~\"vers\", json::String(script.vers.to_str()));\n+                    map.insert(~\"deps\", json::List(do script.deps.map |&dep| {\n+                        let (url, target) = dep;\n+                        let mut inner = ~LinearMap();\n+\n+                        inner.insert(~\"url\", json::String(url));\n+\n+                        if !target.is_none() {\n+                            inner.insert(~\"target\", json::String(target.get()));\n+                        }\n+\n+                        json::Object(inner)\n+                    }));\n+\n+                    io::println(json::to_pretty_str(&json::Object(map)));\n+                }\n+                result::Err(_) => io::println(~\"{}\")\n+            }\n+        } else {\n+            let script = match PackageScript::parse(&os::getcwd()) {\n+                result::Ok(script) => script,\n+                result::Err(err) => {\n+                    util::error(err);\n+\n+                    return;\n+                }\n+            };\n+\n+            util::note(fmt!(\"id: %s\", script.id));\n+            util::note(fmt!(\"name: %s\", script.name));\n+            util::note(fmt!(\"vers: %s\", script.vers.to_str()));\n+            util::note(fmt!(\"deps: %s\", if script.deps.len() > 0 { ~\"\" } else { ~\"none\" }));\n+\n+            for script.deps.each |&dep| {\n+                let (url, target) = dep;\n+\n+                util::note(fmt!(\"  <%s> (%s)\", url, match target {\n+                    Some(target) => target,\n+                    None => ~\"\"\n+                }));\n+            }\n+        }\n+    }\n+\n     fn install(url: Option<~str>, target: Option<~str>, cache: bool) -> bool {\n         let mut success;\n         let mut dir;\n@@ -783,6 +838,7 @@ impl Ctx {\n pub fn main() {\n     let args = os::args();\n     let opts = ~[getopts::optflag(~\"h\"), getopts::optflag(~\"help\"),\n+                 getopts::optflag(~\"j\"), getopts::optflag(~\"json\"),\n                  getopts::optmulti(~\"c\"), getopts::optmulti(~\"cfg\")];\n     let matches = &match getopts::getopts(args, opts) {\n         result::Ok(m) => m,\n@@ -794,6 +850,8 @@ pub fn main() {\n     };\n     let help = getopts::opt_present(matches, ~\"h\") ||\n                getopts::opt_present(matches, ~\"help\");\n+    let json = getopts::opt_present(matches, ~\"j\") ||\n+               getopts::opt_present(matches, ~\"json\");\n     let cfgs = vec::append(getopts::opt_strs(matches, ~\"cfg\"),\n                            getopts::opt_strs(matches, ~\"c\"));\n     let mut args = copy matches.free;\n@@ -813,6 +871,7 @@ pub fn main() {\n             ~\"build\" => usage::build(),\n             ~\"clean\" => usage::clean(),\n             ~\"do\" => usage::do_cmd(),\n+            ~\"info\" => usage::info(),\n             ~\"install\" => usage::install(),\n             ~\"prefer\" => usage::prefer(),\n             ~\"test\" => usage::test(),\n@@ -824,6 +883,7 @@ pub fn main() {\n \n     Ctx {\n         cfgs: cfgs,\n+        json: json,\n         mut dep_cache: LinearMap()\n     }.run(cmd, args);\n }\n@@ -906,7 +966,7 @@ pub fn Crate(file: ~str) -> Crate {\n  * Assumes that the package script has been compiled\n  * in is the working directory.\n  */\n-fn work_dir() -> Path {\n+pub fn work_dir() -> Path {\n     os::self_exe_path().get()\n }\n \n@@ -916,7 +976,7 @@ fn work_dir() -> Path {\n  * that the cwd is changed to it before\n  * running this executable.\n  */\n-fn src_dir() -> Path {\n+pub fn src_dir() -> Path {\n     os::getcwd()\n }\n "}, {"sha": "cfda56f777ab2779240573ac6039ec8a826a8cd0", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "patch": "@@ -14,7 +14,7 @@ pub fn general() {\n     io::println(~\"Usage: rustpkg [options] <cmd> [args..]\n \n Where <cmd> is one of:\n-    build, clean, install, prefer, test, uninstall, unprefer\n+    build, clean, do, info, install, prefer, test, uninstall, unprefer\n \n Options:\n \n@@ -46,6 +46,15 @@ Runs a command in the package script. You can listen to a command\n by tagging a function with the attribute `#[pkg_do(cmd)]`.\");\n }\n \n+pub fn info() {\n+    io::println(~\"rustpkg [options..] info\n+\n+Probe the package script in the current directory for information.\n+\n+Options:\n+    -j, --json      Output the result as JSON\");\n+}\n+\n pub fn install() {\n     io::println(~\"rustpkg [options..] install [url] [target]\n "}, {"sha": "e19eb5e41d81be9ef679e72dc6a3da93deb28df9", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15440f4236759cd4c65cb2ef7a7df3aac0c79ba7/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=15440f4236759cd4c65cb2ef7a7df3aac0c79ba7", "patch": "@@ -35,7 +35,7 @@ pub fn root() -> Path {\n }\n \n pub fn is_cmd(cmd: ~str) -> bool {\n-    let cmds = &[~\"build\", ~\"clean\", ~\"do\", ~\"install\", ~\"prefer\",\n+    let cmds = &[~\"build\", ~\"clean\", ~\"do\", ~\"info\", ~\"install\", ~\"prefer\",\n                  ~\"test\", ~\"uninstall\", ~\"unprefer\"];\n \n     vec::contains(cmds, &cmd)\n@@ -1065,6 +1065,7 @@ fn test_is_cmd() {\n     assert is_cmd(~\"build\");\n     assert is_cmd(~\"clean\");\n     assert is_cmd(~\"do\");\n+    assert is_cmd(~\"info\");\n     assert is_cmd(~\"install\");\n     assert is_cmd(~\"prefer\");\n     assert is_cmd(~\"test\");"}]}