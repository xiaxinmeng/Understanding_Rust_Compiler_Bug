{"sha": "ea332b593780509a114ffe03c4a772f5eb54c5c7", "node_id": "C_kwDOAAsO6NoAKGVhMzMyYjU5Mzc4MDUwOWExMTRmZmUwM2M0YTc3MmY1ZWI1NGM1Yzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-12T05:11:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-12T05:11:12Z"}, "message": "Rollup merge of #111179 - Zalathar:sort-groups, r=Mark-Simulacrum\n\nFix instrument-coverage tests by using Python to sort instantiation groups\n\n#110942 was intended to fix a set of `-Cinstrument-coverage` tests, but it ended up silently *breaking* those tests on Linux, for annoying reasons detailed at #111171.\n\nDealing with `diff --ignore-matching-lines` across multiple platforms has been such a hassle that I've instead written a simple Python script that can detect instantiation groups in the output of `llvm-cov show`, and sort them in a predictable order so that they can be used as snapshots for an ordinary invocation of `diff`.\n\nThis approach should be much less error-prone, because it can't accidentally ignore the wrong lines, and any unforeseen problems will tend to result in a Python exception or a failing diff.", "tree": {"sha": "267b1de702eaa8c588cbf5c83980099735e0ec12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267b1de702eaa8c588cbf5c83980099735e0ec12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea332b593780509a114ffe03c4a772f5eb54c5c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkXcpwCRBK7hj4Ov3rIwAA0zgIAGgiSqivJ8izBYSDzcq2O0pZ\nvc6POLxtcO0kra10rR33AxhKUg7j849VlD+I0nMEf/CuLvx+2R++S6PwIp0d09JG\nOB9KG1ZB68eIz8Kw84ZwC58wOciVedh0h9WvuEOOaj1/vwVyH3Ik4tTJjrY88zl5\nwRyUBk1GgVggGnofpQR7NFppJefJ+1BMsLfPtA6akPRm6jCbwTRorP+7dQKDhrk8\npm6hOCe69RMemOpVU7oTfOo45V3K2VIr+1y7srPwD68pNpJkIOr91QXDfuKSHH53\n2jypPwUnnnda7rmtAEfYPj/YycZ/Tt5uPsc8bs0MnV1yKwlzf2Xh6YMxk+tz1aw=\n=yLbv\n-----END PGP SIGNATURE-----\n", "payload": "tree 267b1de702eaa8c588cbf5c83980099735e0ec12\nparent 26e0c57dde7ea664457e3bf1340f832c722bd349\nparent 27a3ce29e368f7f0167761f761bf5826c83cf12c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683868272 +0200\ncommitter GitHub <noreply@github.com> 1683868272 +0200\n\nRollup merge of #111179 - Zalathar:sort-groups, r=Mark-Simulacrum\n\nFix instrument-coverage tests by using Python to sort instantiation groups\n\n#110942 was intended to fix a set of `-Cinstrument-coverage` tests, but it ended up silently *breaking* those tests on Linux, for annoying reasons detailed at #111171.\n\nDealing with `diff --ignore-matching-lines` across multiple platforms has been such a hassle that I've instead written a simple Python script that can detect instantiation groups in the output of `llvm-cov show`, and sort them in a predictable order so that they can be used as snapshots for an ordinary invocation of `diff`.\n\nThis approach should be much less error-prone, because it can't accidentally ignore the wrong lines, and any unforeseen problems will tend to result in a Python exception or a failing diff.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea332b593780509a114ffe03c4a772f5eb54c5c7", "html_url": "https://github.com/rust-lang/rust/commit/ea332b593780509a114ffe03c4a772f5eb54c5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea332b593780509a114ffe03c4a772f5eb54c5c7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e0c57dde7ea664457e3bf1340f832c722bd349", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e0c57dde7ea664457e3bf1340f832c722bd349", "html_url": "https://github.com/rust-lang/rust/commit/26e0c57dde7ea664457e3bf1340f832c722bd349"}, {"sha": "27a3ce29e368f7f0167761f761bf5826c83cf12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a3ce29e368f7f0167761f761bf5826c83cf12c", "html_url": "https://github.com/rust-lang/rust/commit/27a3ce29e368f7f0167761f761bf5826c83cf12c"}], "stats": {"total": 181, "additions": 148, "deletions": 33}, "files": [{"sha": "0ae409c4119e84de3adee8cf5af4c76d08a3e325", "filename": "tests/run-make/coverage-reports/Makefile", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2FMakefile?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -138,6 +138,7 @@ endif\n \t\t\t) \\\n \t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt \\\n \t\t| \"$(PYTHON)\" $(BASEDIR)/normalize_paths.py \\\n+\t\t| \"$(PYTHON)\" $(BASEDIR)/sort_subviews.py \\\n \t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t( status=$$? ; \\\n \t\t>&2 cat \"$(TMPDIR)\"/show_coverage_stderr.$@.txt ; \\\n@@ -158,23 +159,15 @@ ifdef RUSTC_BLESS_TEST\n else\n \t# Compare the show coverage output (`--bless` refreshes `typical` files).\n \t#\n-\t# FIXME(richkadel): None of the Rust test source samples have the\n-\t# `// ignore-llvm-cov-show-diffs` anymore. This directive exists to work around a limitation\n-\t# with `llvm-cov show`. When reporting coverage for multiple instantiations of a generic function,\n-\t# with different type substitutions, `llvm-cov show` prints these in a non-deterministic order,\n-\t# breaking the `diff` comparison.\n+\t# `llvm-cov show` normally prints instantiation groups in an unpredictable\n+\t# order, but we have used `sort_subviews.py` to sort them, so we can still\n+\t# check the output directly with `diff`.\n \t#\n-\t# A partial workaround is implemented below, with `diff --ignore-matching-lines=RE`\n-\t# to ignore each line prefixing each generic instantiation coverage code region.\n-\t#\n-\t# This workaround only works if the coverage counts are identical across all reported\n-\t# instantiations. If there is no way to ensure this, you may need to apply the\n-\t# `// ignore-llvm-cov-show-diffs` directive, and check for differences using the\n-\t# `.json` files to validate that results have not changed. (Until then, the JSON\n-\t# files are redundant, so there is no need to generate `expected_*.json` files or\n-\t# compare actual JSON results.)\n-\n-\t$(DIFF) --ignore-matching-lines='^  \\| .*::<.*>.*:$$' --ignore-matching-lines='^  \\| <.*>::.*:$$' \\\n+\t# Some of the test cases are currently not working (since #110393) and have\n+\t# been marked with `// ignore-llvm-cov-show-diffs` so that they don't fail\n+\t# the build.\n+\n+\t$(DIFF) \\\n \t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n \t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\"}, {"sha": "93c1535b06b50907a9ecb5ee9a8b096baabede87", "filename": "tests/run-make/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -41,9 +41,9 @@\n    41|      1|                    // executed asynchronously.\n    42|      1|    match x {\n    43|      1|        y if c(x).await == y + 1 => { d().await; }\n-                      ^0       ^0                   ^0 ^0\n+                      ^0        ^0                  ^0  ^0\n    44|      1|        y if f().await == y + 1 => (),\n-                      ^0      ^0                 ^0\n+                      ^0       ^0                ^0\n    45|      1|        _ => (),\n    46|       |    }\n    47|      1|}"}, {"sha": "81468cb35dac37081c5dcff61f5b4787c59e25a1", "filename": "tests/run-make/coverage-reports/expected_show_coverage.sort_groups.txt", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -0,0 +1,49 @@\n+    1|       |// compile-flags: --edition=2021\n+    2|       |\n+    3|       |// Demonstrate that `sort_subviews.py` can sort instantiation groups into a\n+    4|       |// predictable order, while preserving their heterogeneous contents.\n+    5|       |\n+    6|      1|fn main() {\n+    7|      1|    let cond = std::env::args().len() > 1;\n+    8|      1|    generic_fn::<()>(cond);\n+    9|      1|    generic_fn::<&'static str>(!cond);\n+   10|      1|    if false {\n+   11|      0|        generic_fn::<char>(cond);\n+   12|      1|    }\n+   13|      1|    generic_fn::<i32>(cond);\n+   14|      1|    other_fn();\n+   15|      1|}\n+   16|       |\n+   17|      3|fn generic_fn<T>(cond: bool) {\n+   18|      3|    if cond {\n+   19|      1|        println!(\"{}\", std::any::type_name::<T>());\n+   20|      2|    }\n+   21|      3|}\n+  ------------------\n+  | Unexecuted instantiation: sort_groups::generic_fn::<char>\n+  ------------------\n+  | sort_groups::generic_fn::<&str>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      1|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |                   ^0\n+  |   21|      1|}\n+  ------------------\n+  | sort_groups::generic_fn::<()>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      0|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |   21|      1|}\n+  ------------------\n+  | sort_groups::generic_fn::<i32>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      0|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |   21|      1|}\n+  ------------------\n+   22|       |\n+   23|      1|fn other_fn() {}\n+"}, {"sha": "412f4a93b9c99c93375015b3072a9b340bd2f603", "filename": "tests/run-make/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -19,29 +19,29 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n    20|       |// Expect for above function: `Unexecuted instantiation` (see below)\n    21|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n@@ -51,12 +51,12 @@\n    26|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n    27|      2|}\n   ------------------\n-  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n   |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   27|      1|}\n   ------------------\n-  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   27|      1|}"}, {"sha": "66ca9e80a32789c7699d891752abef9efccc2a66", "filename": "tests/run-make/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -42,6 +42,8 @@\n    40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    41|      2|}\n   ------------------\n+  | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n@@ -51,8 +53,6 @@\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n    42|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n    43|       |\n@@ -77,15 +77,15 @@\n    51|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n    52|      3|}\n   ------------------\n-  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   52|      1|}\n-  ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n   |   50|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   51|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   52|      2|}\n+  ------------------\n+  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      1|}\n   ------------------\n    53|       |\n    54|       |#[inline(always)]"}, {"sha": "10cfc51d44771534abfb3871fe5ac696cf32ab15", "filename": "tests/run-make/coverage-reports/sort_subviews.py", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+\n+# `llvm-cov show` prints grouped subviews (e.g. for generic functions) in an\n+# unstable order, which is inconvenient when checking output snapshots with\n+# `diff`. To work around that, this script detects consecutive subviews in its\n+# piped input, and sorts them while preserving their contents.\n+\n+from __future__ import print_function\n+\n+import sys\n+\n+\n+def main():\n+    subviews = []\n+\n+    def flush_subviews():\n+        if not subviews:\n+            return\n+\n+        # The last \"subview\" should be just a boundary line on its own, so\n+        # temporarily remove it before sorting the accumulated subviews.\n+        terminator = subviews.pop()\n+        subviews.sort()\n+        subviews.append(terminator)\n+\n+        for view in subviews:\n+            for line in view:\n+                print(line, end=\"\")\n+\n+        subviews.clear()\n+\n+    for line in sys.stdin:\n+        if line.startswith(\"  ------------------\"):\n+            # This is a subview boundary line, so start a new subview.\n+            subviews.append([line])\n+        elif line.startswith(\"  |\"):\n+            # Add this line to the current subview.\n+            subviews[-1].append(line)\n+        else:\n+            # This line is not part of a subview, so sort and print any\n+            # accumulated subviews, and then print the line as-is.\n+            flush_subviews()\n+            print(line, end=\"\")\n+\n+    flush_subviews()\n+    assert not subviews\n+\n+\n+if __name__ == \"__main__\":\n+    main()"}, {"sha": "f89f9f3ec61fad45fae9718f88159d4950894fa5", "filename": "tests/run-make/coverage/sort_groups.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea332b593780509a114ffe03c4a772f5eb54c5c7/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs?ref=ea332b593780509a114ffe03c4a772f5eb54c5c7", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: --edition=2021\n+\n+// Demonstrate that `sort_subviews.py` can sort instantiation groups into a\n+// predictable order, while preserving their heterogeneous contents.\n+\n+fn main() {\n+    let cond = std::env::args().len() > 1;\n+    generic_fn::<()>(cond);\n+    generic_fn::<&'static str>(!cond);\n+    if false {\n+        generic_fn::<char>(cond);\n+    }\n+    generic_fn::<i32>(cond);\n+    other_fn();\n+}\n+\n+fn generic_fn<T>(cond: bool) {\n+    if cond {\n+        println!(\"{}\", std::any::type_name::<T>());\n+    }\n+}\n+\n+fn other_fn() {}"}]}