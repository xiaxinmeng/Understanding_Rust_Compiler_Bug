{"sha": "342db717e2aa52decc812084c31fdcbeaf03b255", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MmRiNzE3ZTJhYTUyZGVjYzgxMjA4NGMzMWZkY2JlYWYwM2IyNTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T10:03:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Account for `?Sized` type parameter bounds", "tree": {"sha": "cb595b1f61145de641e5450bb54b73785422db99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb595b1f61145de641e5450bb54b73785422db99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342db717e2aa52decc812084c31fdcbeaf03b255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342db717e2aa52decc812084c31fdcbeaf03b255", "html_url": "https://github.com/rust-lang/rust/commit/342db717e2aa52decc812084c31fdcbeaf03b255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342db717e2aa52decc812084c31fdcbeaf03b255/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d216b731f61d85a5cc6cddfdd7f91628bc594b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/d216b731f61d85a5cc6cddfdd7f91628bc594b33", "html_url": "https://github.com/rust-lang/rust/commit/d216b731f61d85a5cc6cddfdd7f91628bc594b33"}], "stats": {"total": 148, "additions": 76, "deletions": 72}, "files": [{"sha": "c1facd34dfee53b19d50c714adee454aa15cdd4e", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -145,12 +145,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let param_name = self_ty.to_string();\n                     let constraint = trait_ref.print_only_trait_path().to_string();\n                     if suggest_constraining_type_param(\n+                        self.tcx,\n                         generics,\n                         &mut err,\n                         &param_name,\n                         &constraint,\n                         self.tcx.sess.source_map(),\n                         *span,\n+                        Some(trait_ref.def_id()),\n                     ) {\n                         return;\n                     }\n@@ -1652,18 +1654,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n /// Suggest restricting a type param with a new bound.\n pub fn suggest_constraining_type_param(\n+    tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     err: &mut DiagnosticBuilder<'_>,\n     param_name: &str,\n     constraint: &str,\n     source_map: &SourceMap,\n     span: Span,\n+    def_id: Option<DefId>,\n ) -> bool {\n     let restrict_msg = \"consider further restricting this bound\";\n     if let Some(param) =\n         generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next()\n     {\n-        if param_name.starts_with(\"impl \") {\n+        if def_id == tcx.lang_items().sized_trait() {\n+            // Type parameters are already `Sized` by default.\n+            err.span_label(\n+                param.span,\n+                &format!(\"this type parameter needs to be `{}`\", constraint),\n+            );\n+        } else if param_name.starts_with(\"impl \") {\n             // `impl Trait` in argument:\n             // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n             err.span_suggestion("}, {"sha": "b0b9790abb12a76893546a9cd3cc5998157e5c5a", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -217,12 +217,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         tcx.hir().get_generics(tcx.closure_base_def_id(self.mir_def_id))\n                     {\n                         suggest_constraining_type_param(\n+                            tcx,\n                             generics,\n                             &mut err,\n                             &param.name.as_str(),\n                             \"Copy\",\n                             tcx.sess.source_map(),\n                             span,\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "fd68cb9c6cf85ae68e47905c3c0dc19a794b3944", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -18,7 +18,7 @@ LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n-   |      - help: consider restricting this bound: `A: std::marker::Sized`\n+   |      - this type parameter needs to be `std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -33,7 +33,7 @@ LL | pub struct Foo<A, B>(A, B);\n    | --------------------------- required by `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n-   |         - help: consider restricting this bound: `B: std::marker::Sized`\n+   |         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "80d188bf2f89bd6af372162e8324f1cf922f9644", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n LL | fn test1<T: ?Sized + Foo>(t: &T) {\n-   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n LL | fn test2<T: ?Sized + Foo>(t: &T) {\n-   |          -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |"}, {"sha": "1ddea73e00ae0ee214bec8bea40b715e919eded0", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/issue-27060-2.rs:3:5\n    |\n LL | pub struct Bad<T: ?Sized> {\n-   |                -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |                - this type parameter needs to be `std::marker::Sized`\n LL |     data: T,\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "9680d58b8c0c71869bc685fd7190251eab30b85c", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/trait-suggest-where-clause.rs:11:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -19,7 +19,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/trait-suggest-where-clause.rs:14:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "62dacd064bed0b63ee047bdc105bbc4faeaa1d3b", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:4:5\n    |\n LL | union Foo<T: ?Sized> {\n-   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:9:5\n    |\n LL | struct Foo2<T: ?Sized> {\n-   |             -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |             - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n-   |           -- help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "772de23e64cf05a1184107afcf61053d4c0726a2", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T: Sized>() { }\n    |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |        --                   ^ doesn't have a size known at compile-time\n+   |        -                    ^ doesn't have a size known at compile-time\n    |        |\n-   |        help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |        this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "88f7b1f77aee011e6ef5dfc2ff07c77d3171c289", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -5,9 +5,9 @@ LL | enum Foo<U> { FooSome(U), FooNone }\n    | ----------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "bc3b3831f32699ed06c2fe6699b99150a2805ede", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `W` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |        -- help: consider further restricting this bound: `W: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:25:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                   -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |                   - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                              -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                              - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n@@ -41,7 +41,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:29:18\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                                         -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+   |                                         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time"}, {"sha": "5688ae5b89a0409559d0a6d41191188f523f3a36", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -5,9 +5,9 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "653fb5c1ae8dca6431058ae548e2d8c2fb85c8d3", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -5,9 +5,9 @@ LL | struct Foo<T> { data: T }\n    | ------------- required by `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-   |         --                         ^^^^^^ doesn't have a size known at compile-time\n+   |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -19,9 +19,9 @@ LL | fn is_sized<T:Sized>() { }\n    |    -------- - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |         --             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         help: consider further restricting this bound: `T: std::marker::Sized +`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "3597073e7e6c632ef62a0c0759f85a0e9f606b28", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -5,9 +5,9 @@ LL | struct S5<Y>(Y);\n    | ---------------- required by `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "b37d9f9d5369efbc3dc90c1fa0c4bf5312d09d2e", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n-   |      --         ^^^^^ doesn't have a size known at compile-time\n+   |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "e97d00fc4741d998554bca7df9cdb65c4c6d12d1", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -1,42 +1,34 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:7:13\n    |\n+LL | fn f1<X: ?Sized>(x: &X) {\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- - required by this bound in `f2`\n+   |    -- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n+   |       |\n+   |       required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-help: consider further restricting this bound\n-   |\n-LL | fn f1<X: std::marker::Sized +  ?Sized>(x: &X) {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider relaxing the implicit `Sized` restriction\n-   |\n-LL | fn f2<X: ?Sized>(x: &X) {\n-   |        ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n    |\n+LL | fn f3<X: ?Sized + T>(x: &X) {\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- - required by this bound in `f4`\n+   |    -- -   - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`\n+   |       |\n+   |       required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-help: consider further restricting this bound\n-   |\n-LL | fn f3<X: std::marker::Sized +  ?Sized + T>(x: &X) {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider relaxing the implicit `Sized` restriction\n-   |\n-LL | fn f4<X: T +  ?Sized>(x: &X) {\n-   |            ^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8\n@@ -45,7 +37,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n@@ -57,7 +49,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:40:8\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -70,7 +62,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:9\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -87,7 +79,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |    -- - required by this bound in `f5`\n ...\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "de4da309791c0d5a928e510f27c52292476c571f", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:4:5\n    |\n LL | struct S1<X: ?Sized> {\n-   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:10:5\n    |\n LL | struct S2<X: ?Sized> {\n-   |           -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f: isize,\n LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n@@ -47,7 +47,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:25:8\n    |\n LL | enum E<X: ?Sized> {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n@@ -59,7 +59,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:29:8\n    |\n LL | enum F<X: ?Sized> {\n-   |        -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "337afd2ee7e100ca38470b61b3a528cacf91c50b", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:9:9\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                             -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                             - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:7:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                  -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -29,7 +29,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:11:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                                        -- help: consider further restricting this bound: `Z: std::marker::Sized +`\n+   |                                        - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -42,7 +42,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:15:9\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -55,7 +55,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:17:12\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |                  -- help: consider further restricting this bound: `Y: std::marker::Sized +`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -68,7 +68,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:22:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -81,7 +81,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:24:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -95,7 +95,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:26:10\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -109,7 +109,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:30:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -122,7 +122,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:32:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -136,7 +136,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:34:10\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       -- help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -150,9 +150,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:38:18\n    |\n LL | fn g1<X: ?Sized>(x: X) {}\n-   |       --         ^ doesn't have a size known at compile-time\n+   |       -          ^ doesn't have a size known at compile-time\n    |       |\n-   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -163,9 +163,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:40:22\n    |\n LL | fn g2<X: ?Sized + T>(x: X) {}\n-   |       --             ^ doesn't have a size known at compile-time\n+   |       -              ^ doesn't have a size known at compile-time\n    |       |\n-   |       help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "0f71c5f6f8fe6e1a1627c100767b2cd67bc460ee", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342db717e2aa52decc812084c31fdcbeaf03b255/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=342db717e2aa52decc812084c31fdcbeaf03b255", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized7.rs:12:21\n    |\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n-   |      --             ^^^^^ doesn't have a size known at compile-time\n+   |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      help: consider further restricting this bound: `X: std::marker::Sized +`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}]}