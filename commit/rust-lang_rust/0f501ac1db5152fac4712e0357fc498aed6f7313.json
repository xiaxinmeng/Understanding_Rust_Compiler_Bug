{"sha": "0f501ac1db5152fac4712e0357fc498aed6f7313", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTAxYWMxZGI1MTUyZmFjNDcxMmUwMzU3ZmM0OThhZWQ2ZjczMTM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-18T13:06:44Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-18T13:09:58Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "bcf7fb0c0e0ef7763e919158b4085f48825fe398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf7fb0c0e0ef7763e919158b4085f48825fe398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f501ac1db5152fac4712e0357fc498aed6f7313", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl8S9KYACgkQLO/Nsn7Q\nvnm2pxAAs7sE7kPA1bQy7G5QK8458sJCGNGe1XpG1QtgDVjNu9ocHJdHAne1o/Ct\nW67ujqrwJT7epohd7WdPLJOtKrYHL7nHUm8CMyoeRQaoI6nwn78Gf4BNixrEIWVl\n5HNIkame9z4H5hNmFJbsnBXgSzlA7W4nr2tpHHsJR2qhQiOvU1/2P1VINawF0bJ7\nqNjpjmXmNXccK9UHDU72zDEpg1LQOCRdkT6Puve99QDIa2o4y2H8zxosqoOeVrnY\nHfZXYw+IElqIPeaDbgBtohfFFtf//ua9PPCc/mSlKgQWFLKGkCSv/0h77LZrlRyh\n1Bq5fX3b6hqfc4DX6LrjZm8mCgj40IPWGyg17CNxD7aSML5K2isIITGDa9wJa/tY\nEWVIoMSIMGQBesqhvpgYLdWIQQiz01o7dZV4fOHbmmbdBlAsqvvhGIGBwkado1oe\nMQ6UCZDWX5JuYaNTgm+CvFvP7nPCAgsZmcRuPLEeaV5EULMVKVn0OrgO53DYOAku\nWyNGyPuQHZK4HfpL83Z0jxhWXjjmRULnOhIbeHiixRvjuhIJur1nPIqLhxjfesun\n+oDH8atAR8vbhOho5aQL6qzcRpNhsXFdBwU5LdMp5TmjAQ20Ey6AWB6WzL1bpPAp\nYPGrGd0UwnZ3eCEdoFa7oEVUUe+a+T2/De24yW48oLvrZ2YNgH0=\n=SILR\n-----END PGP SIGNATURE-----", "payload": "tree bcf7fb0c0e0ef7763e919158b4085f48825fe398\nparent 5a20489c5ca0951827cbb1b4d72ddfdfd393713a\nparent 9a945c741375740d89c3c2029f3a46adeb7e510f\nauthor flip1995 <hello@philkrones.com> 1595077604 +0200\ncommitter flip1995 <hello@philkrones.com> 1595077798 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f501ac1db5152fac4712e0357fc498aed6f7313", "html_url": "https://github.com/rust-lang/rust/commit/0f501ac1db5152fac4712e0357fc498aed6f7313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f501ac1db5152fac4712e0357fc498aed6f7313/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a20489c5ca0951827cbb1b4d72ddfdfd393713a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a20489c5ca0951827cbb1b4d72ddfdfd393713a", "html_url": "https://github.com/rust-lang/rust/commit/5a20489c5ca0951827cbb1b4d72ddfdfd393713a"}, {"sha": "9a945c741375740d89c3c2029f3a46adeb7e510f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a945c741375740d89c3c2029f3a46adeb7e510f", "html_url": "https://github.com/rust-lang/rust/commit/9a945c741375740d89c3c2029f3a46adeb7e510f"}], "stats": {"total": 529, "additions": 464, "deletions": 65}, "files": [{"sha": "e85e8874ba60039e3ba12819d198603bb95211b4", "filename": ".github/deploy.sh", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -19,7 +19,7 @@ fi\n \n if [[ $BETA = \"true\" ]]; then\n   echo \"Update documentation for the beta release\"\n-  cp -r out/master out/beta\n+  cp -r out/master/* out/beta\n fi\n \n # Generate version index that is shown as root index page\n@@ -33,12 +33,13 @@ cd out\n git config user.name \"GHA CI\"\n git config user.email \"gha@ci.invalid\"\n \n-if git diff --exit-code --quiet; then\n-  echo \"No changes to the output on this push; exiting.\"\n-  exit 0\n-fi\n-\n if [[ -n $TAG_NAME ]]; then\n+  # track files, so that the following check works\n+  git add --intent-to-add \"$TAG_NAME\"\n+  if git diff --exit-code --quiet -- $TAG_NAME/; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   # Add the new dir\n   git add \"$TAG_NAME\"\n   # Update the symlink\n@@ -47,9 +48,17 @@ if [[ -n $TAG_NAME ]]; then\n   git add versions.json\n   git commit -m \"Add documentation for ${TAG_NAME} release: ${SHA}\"\n elif [[ $BETA = \"true\" ]]; then\n+  if git diff --exit-code --quiet -- beta/; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   git add beta\n   git commit -m \"Automatic deploy to GitHub Pages (beta): ${SHA}\"\n else\n+  if git diff --exit-code --quiet; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   git add .\n   git commit -m \"Automatic deploy to GitHub Pages: ${SHA}\"\n fi"}, {"sha": "776b04295f949c0e46b46fd8a2186fd91604cbd1", "filename": "CHANGELOG.md", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -1,16 +1,78 @@\n-# Change Log\n+# Changelog\n \n All notable changes to this project will be documented in this file.\n See [Changelog Update](doc/changelog_update.md) if you want to update this\n document.\n \n ## Unreleased / In Rust Nightly\n \n-[7ea7cd1...master](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+[c2c07fa...master](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+\n+## Rust 1.46\n+\n+Current beta, release 2020-08-27\n+\n+[7ea7cd1...c2c07fa](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+\n+### New lints\n+\n+* [`unnested_or_patterns`] [#5378](https://github.com/rust-lang/rust-clippy/pull/5378)\n+* [`iter_next_slice`] [#5597](https://github.com/rust-lang/rust-clippy/pull/5597)\n+* [`unnecessary_sort_by`] [#5623](https://github.com/rust-lang/rust-clippy/pull/5623)\n+* [`vec_resize_to_zero`] [#5637](https://github.com/rust-lang/rust-clippy/pull/5637)\n+\n+### Moves and Deprecations\n+\n+* Move [`cast_ptr_alignment`] to pedantic [#5667](https://github.com/rust-lang/rust-clippy/pull/5667)\n+\n+### Enhancements\n+\n+* Improve [`mem_replace_with_uninit`] lint [#5695](https://github.com/rust-lang/rust-clippy/pull/5695)\n+\n+### False Positive Fixes\n+\n+* [`len_zero`]: Avoid linting ranges when the `range_is_empty` feature is not enabled\n+  [#5656](https://github.com/rust-lang/rust-clippy/pull/5656)\n+* [`let_and_return`]: Don't lint if a temporary borrow is involved\n+  [#5680](https://github.com/rust-lang/rust-clippy/pull/5680)\n+* [`reversed_empty_ranges`]: Avoid linting `N..N` in for loop arguments in\n+  [#5692](https://github.com/rust-lang/rust-clippy/pull/5692)\n+* [`if_same_then_else`]: Don't assume multiplication is always commutative\n+  [#5702](https://github.com/rust-lang/rust-clippy/pull/5702)\n+* [`blacklisted_name`]: Remove `bar` from the default configuration\n+  [#5712](https://github.com/rust-lang/rust-clippy/pull/5712)\n+* [`redundant_pattern_matching`]: Avoid suggesting non-`const fn` calls in const contexts\n+  [#5724](https://github.com/rust-lang/rust-clippy/pull/5724)\n+\n+### Suggestion Fixes/Improvements\n+\n+* Fix suggestion of [`unit_arg`] lint, so that it suggest semantic equivalent code\n+  [#4455](https://github.com/rust-lang/rust-clippy/pull/4455)\n+* Add auto applicable suggestion to [`macro_use_imports`]\n+  [#5279](https://github.com/rust-lang/rust-clippy/pull/5279)\n+\n+### ICE Fixes\n+\n+* Fix ICE in the `consts` module of Clippy [#5709](https://github.com/rust-lang/rust-clippy/pull/5709)\n+\n+### Documentation Improvements\n+\n+* Improve code examples across multiple lints [#5664](https://github.com/rust-lang/rust-clippy/pull/5664)\n+\n+### Others\n+\n+* Introduce a `--rustc` flag to `clippy-driver`, which turns `clippy-driver`\n+  into `rustc` and passes all the given arguments to `rustc`. This is especially\n+  useful for tools that need the `rustc` version Clippy was compiled with,\n+  instead of the Clippy version. E.g. `clippy-driver --rustc --version` will\n+  print the output of `rustc --version`.\n+  [#5178](https://github.com/rust-lang/rust-clippy/pull/5178)\n+* New issue templates now make it easier to complain if Clippy is too annoying\n+  or not annoying enough! [#5735](https://github.com/rust-lang/rust-clippy/pull/5735)\n \n ## Rust 1.45\n \n-Current beta, release 2020-07-16\n+Current stable, released 2020-07-16\n \n [891e1a8...7ea7cd1](https://github.com/rust-lang/rust-clippy/compare/891e1a8...7ea7cd1)\n \n@@ -87,7 +149,7 @@ and [`similar_names`]. [#5651](https://github.com/rust-lang/rust-clippy/pull/565\n \n ## Rust 1.44\n \n-Current stable, released 2020-06-04\n+Released 2020-06-04\n \n [204bb9b...891e1a8](https://github.com/rust-lang/rust-clippy/compare/204bb9b...891e1a8)\n \n@@ -1679,6 +1741,7 @@ Released 2018-09-13\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"}, {"sha": "c17a0e8333058fe91497dc9d67f3c0434481fe38", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -153,7 +153,7 @@ declare_deprecated_lint! {\n     ///\n     /// **Deprecation reason:** Associated-constants are now preferred.\n     pub REPLACE_CONSTS,\n-    \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\"\n+    \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\"\n }\n \n declare_deprecated_lint! {"}, {"sha": "b5fb51af1c7f31f6192ac279d107f274cf5156bc", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n     ///\n-    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// **Why is this bad?** Dereferencing by `&*x` or `&mut *x` is clearer and more concise,\n     /// when not part of a method chain.\n     ///\n     /// **Example:**"}, {"sha": "9fb10c7f62768583ec311d0748f68796cf0a5b32", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             ..\n         } = item.kind\n         {\n-            // Remember for each inherent implementation encoutered its span and generics\n+            // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {"}, {"sha": "823afdfd289bd21205bc27320616bef3f1b3f8a3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -300,6 +300,7 @@ mod trivially_copy_pass_by_ref;\n mod try_err;\n mod types;\n mod unicode;\n+mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n mod unnested_or_patterns;\n@@ -462,7 +463,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     );\n     store.register_removed(\n         \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\",\n+        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n     );\n     store.register_removed(\n         \"clippy::regex_macro\",\n@@ -826,6 +827,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unicode::ZERO_WIDTH_SPACE,\n+        &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n@@ -891,6 +893,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box attrs::Attributes);\n     store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n     store.register_late_pass(|| box unicode::Unicode);\n+    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n@@ -1436,6 +1439,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n@@ -1692,6 +1696,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),"}, {"sha": "97cc58023f55e61d62d01d4685e139d909e55c28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -2354,8 +2354,8 @@ fn lint_iter_nth_zero<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_ar\n                 cx,\n                 ITER_NTH_ZERO,\n                 expr.span,\n-                \"called `.nth(0)` on a `std::iter::Iterator`\",\n-                \"try calling\",\n+                \"called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\",\n+                \"try calling `.next()` instead of `.nth(0)`\",\n                 format!(\"{}.next()\", snippet_with_applicability(cx, nth_args[0].span, \"..\", &mut applicability)),\n                 applicability,\n             );\n@@ -3290,7 +3290,12 @@ fn lint_option_as_ref_deref<'tcx>(\n                         if let hir::ExprKind::Path(qpath) = &args[0].kind;\n                         if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, args[0].hir_id);\n                         if closure_body.params[0].pat.hir_id == local_id;\n-                        let adj = cx.typeck_results().expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                        let adj = cx\n+                            .typeck_results()\n+                            .expr_adjustments(&args[0])\n+                            .iter()\n+                            .map(|x| &x.kind)\n+                            .collect::<Box<[_]>>();\n                         if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n                         then {\n                             let method_did = cx.typeck_results().type_dependent_def_id(closure_expr.hir_id).unwrap();"}, {"sha": "1ad184dfc460b8358069739807854485096311b1", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n /// Returns true if any of the method parameters is a type that implements `Drop`. The method\n /// can't be made const then, because `drop` can't be const-evaluated.\n fn method_accepts_dropable(cx: &LateContext<'_>, param_tys: &[hir::Ty<'_>]) -> bool {\n-    // If any of the params are dropable, return true\n+    // If any of the params are droppable, return true\n     param_tys.iter().any(|hir_ty| {\n         let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);\n         has_drop(cx, ty_ty)"}, {"sha": "b1d788b5c683f4587cebc071623e2326e001160a", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for modulo arithemtic.\n+    /// **What it does:** Checks for modulo arithmetic.\n     ///\n     /// **Why is this bad?** The results of modulo (%) operation might differ\n     /// depending on the language, when negative numbers are involved."}, {"sha": "8118cb32cf28e7e136b4bd9331a95e5743a40f9e", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -40,9 +40,8 @@ declare_clippy_lint! {\n     ///     assert_eq!(v.len(), 42);\n     /// }\n     /// ```\n-    ///\n+    /// should be\n     /// ```rust\n-    /// // should be\n     /// fn foo(v: &[i32]) {\n     ///     assert_eq!(v.len(), 42);\n     /// }"}, {"sha": "48ab98418e4fafe62381a541d80296af1fb9b8bc", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -218,12 +218,16 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             let mut split_at = None;\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n-                    if existing_name.len - count != 1 || levenstein_not_1(&interned_name, &existing_name.interned.as_str()) {\n+                    if existing_name.len - count != 1\n+                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                    {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n-                    if count - existing_name.len != 1 || levenstein_not_1(&existing_name.interned.as_str(), &interned_name) {\n+                    if count - existing_name.len != 1\n+                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                    {\n                         continue;\n                     }\n                 },"}, {"sha": "9494efe736cce2a37f7efafdf211b62a6e075214", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -79,7 +79,7 @@ fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     }\n }\n \n-/// A struct containing information about occurences of the\n+/// A struct containing information about occurrences of the\n /// `if let Some(..) = .. else` construct that this lint detects.\n struct OptionIfLetElseOccurence {\n     option: String,"}, {"sha": "6379dffd22e372ac8305f8fce41fe8a50ad2e555", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -96,23 +96,20 @@ impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n         if_chain! {\n             if let ExprKind::Block(ref block, _) = expr.kind;\n             if let Some(ref ex) = block.expr;\n-            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC);\n-            if params.len() == 1;\n+            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC)\n+                .or_else(|| match_function_call(cx, ex, &paths::BEGIN_PANIC_FMT));\n             then {\n+                let span = get_outer_span(expr);\n                 if is_expn_of(expr.span, \"unimplemented\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, UNIMPLEMENTED, span,\n                               \"`unimplemented` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"todo\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, TODO, span,\n                               \"`todo` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, UNREACHABLE, span,\n                               \"`unreachable` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"panic\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, PANIC, span,\n                               \"`panic` should not be present in production code\");\n                     match_panic(params, expr, cx);"}, {"sha": "6f03e92bde36fcb64a353e23ab731379f14c2ca7", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -295,11 +295,7 @@ fn lint_shadow<'tcx>(\n                 cx,\n                 SHADOW_UNRELATED,\n                 pattern_span,\n-                &format!(\n-                    \"`{}` is shadowed by `{}`\",\n-                    snippet(cx, pattern_span, \"_\"),\n-                    snippet(cx, expr.span, \"..\")\n-                ),\n+                &format!(\"`{}` is being shadowed\", snippet(cx, pattern_span, \"_\")),\n                 |diag| {\n                     diag.span_note(expr.span, \"initialization happens here\");\n                     diag.span_note(prev_span, \"previous binding is here\");"}, {"sha": "ac6f3d125bb422a2734be9b31d21e39d4c04fed9", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -0,0 +1,177 @@\n+use crate::utils::{get_trait_def_id, paths, span_lint, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for functions that expect closures of type\n+    /// Fn(...) -> Ord where the implemented closure returns the unit type.\n+    /// The lint also suggests to remove the semi-colon at the end of the statement if present.\n+    ///\n+    /// **Why is this bad?** Likely, returning the unit type is unintentional, and\n+    /// could simply be caused by an extra semi-colon. Since () implements Ord\n+    /// it doesn't cause a compilation error.\n+    /// This is the same reasoning behind the unit_cmp lint.\n+    ///\n+    /// **Known problems:** If returning unit is intentional, then there is no\n+    /// way of specifying this without triggering needless_return lint\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut twins = vec!((1,1), (2,2));\n+    /// twins.sort_by_key(|x| { x.1; });\n+    /// ```\n+    pub UNIT_RETURN_EXPECTING_ORD,\n+    correctness,\n+    \"fn arguments of type Fn(...) -> Ord returning the unit type ().\"\n+}\n+\n+declare_lint_pass!(UnitReturnExpectingOrd => [UNIT_RETURN_EXPECTING_ORD]);\n+\n+fn get_trait_predicates_for_trait_id<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    trait_id: Option<DefId>,\n+) -> Vec<TraitPredicate<'tcx>> {\n+    let mut preds = Vec::new();\n+    for (pred, _) in generics.predicates {\n+        if_chain! {\n+            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind();\n+            let trait_pred = cx.tcx.erase_late_bound_regions(&poly_trait_pred);\n+            if let Some(trait_def_id) = trait_id;\n+            if trait_def_id == trait_pred.trait_ref.def_id;\n+            then {\n+                preds.push(trait_pred);\n+            }\n+        }\n+    }\n+    preds\n+}\n+\n+fn get_projection_pred<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    pred: TraitPredicate<'tcx>,\n+) -> Option<ProjectionPredicate<'tcx>> {\n+    generics.predicates.iter().find_map(|(proj_pred, _)| {\n+        if let PredicateKind::Projection(proj_pred) = proj_pred.kind() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred);\n+            if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n+                return Some(projection_pred);\n+            }\n+        }\n+        None\n+    })\n+}\n+\n+fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n+    let mut args_to_check = Vec::new();\n+    if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let generics = cx.tcx.predicates_of(def_id);\n+        let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n+        let ord_preds = get_trait_predicates_for_trait_id(cx, generics, get_trait_def_id(cx, &paths::ORD));\n+        let partial_ord_preds =\n+            get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().partial_ord_trait());\n+        // Trying to call erase_late_bound_regions on fn_sig.inputs() gives the following error\n+        // The trait `rustc::ty::TypeFoldable<'_>` is not implemented for `&[&rustc::ty::TyS<'_>]`\n+        let inputs_output = cx.tcx.erase_late_bound_regions(&fn_sig.inputs_and_output());\n+        inputs_output\n+            .iter()\n+            .rev()\n+            .skip(1)\n+            .rev()\n+            .enumerate()\n+            .for_each(|(i, inp)| {\n+                for trait_pred in &fn_mut_preds {\n+                    if_chain! {\n+                        if trait_pred.self_ty() == inp;\n+                        if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n+                        then {\n+                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"Ord\".to_string()));\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"PartialOrd\".to_string()));\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+    }\n+    args_to_check\n+}\n+\n+fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n+    if_chain! {\n+        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind;\n+        let ret_ty = substs.as_closure().sig().output();\n+        let ty = cx.tcx.erase_late_bound_regions(&ret_ty);\n+        if ty.is_unit();\n+        then {\n+            if_chain! {\n+                let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Block(block, _) = body.value.kind;\n+                if block.expr.is_none();\n+                if let Some(stmt) = block.stmts.last();\n+                if let StmtKind::Semi(_) = stmt.kind;\n+                then {\n+                    let data = stmt.span.data();\n+                    // Make a span out of the semicolon for the help message\n+                    Some((span, Some(Span::new(data.hi-BytePos(1), data.hi, data.ctxt))))\n+                } else {\n+                    Some((span, None))\n+                }\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n+            let arg_indices = get_args_to_check(cx, expr);\n+            for (i, trait_name) in arg_indices {\n+                if i < args.len() {\n+                    match check_arg(cx, &args[i]) {\n+                        Some((span, None)) => {\n+                            span_lint(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                            );\n+                        },\n+                        Some((span, Some(last_semi))) => {\n+                            span_lint_and_help(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                                Some(last_semi),\n+                                &\"probably caused by this trailing semicolon\".to_string(),\n+                            );\n+                        },\n+                        None => {},\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "5e8800d38eb52e9ee82387d5a7071755800bea4e", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -36,7 +36,7 @@ pub struct NumericLiteral<'a> {\n     pub integer: &'a str,\n     /// The fraction part of the number.\n     pub fraction: Option<&'a str>,\n-    /// The character used as exponent seperator (b'e' or b'E') and the exponent part.\n+    /// The character used as exponent separator (b'e' or b'E') and the exponent part.\n     pub exponent: Option<(char, &'a str)>,\n \n     /// The type suffix, including preceding underscore if present."}, {"sha": "58e7c354b27da1e2ab90ec3d74f3028fe891008c", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::ast::LitKind;\n use rustc_hir as hir;\n \n declare_clippy_lint! {\n-    /// **What it does:** Finds occurences of `Vec::resize(0, an_int)`\n+    /// **What it does:** Finds occurrences of `Vec::resize(0, an_int)`\n     ///\n     /// **Why is this bad?** This is probably an argument inversion mistake.\n     ///"}, {"sha": "96b004904aa2dce9032db127e0c20c4e70f2eac6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -2292,6 +2292,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"unit_return_expecting_ord\",\n+        group: \"correctness\",\n+        desc: \"fn arguments of type Fn(...) -> Ord returning the unit type ().\",\n+        deprecation: None,\n+        module: \"unit_return_expecting_ord\",\n+    },\n     Lint {\n         name: \"unknown_clippy_lints\",\n         group: \"style\","}, {"sha": "eb6d495acbe202e4d2924b4a56ba738755db77b5", "filename": "tests/compile-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -147,9 +147,6 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n }\n \n fn run_ui_cargo(config: &mut compiletest::Config) {\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n     fn run_tests(\n         config: &compiletest::Config,\n         filter: &Option<String>,"}, {"sha": "29c56f3a94f5f6bc8a13bce3934e46251377b167", "filename": "tests/ui/iter_nth_zero.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fiter_nth_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fiter_nth_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.stderr?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -1,22 +1,22 @@\n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:20:14\n    |\n LL |     let _x = s.iter().nth(0);\n-   |              ^^^^^^^^^^^^^^^ help: try calling: `s.iter().next()`\n+   |              ^^^^^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `s.iter().next()`\n    |\n    = note: `-D clippy::iter-nth-zero` implied by `-D warnings`\n \n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:25:14\n    |\n LL |     let _y = iter.nth(0);\n-   |              ^^^^^^^^^^^ help: try calling: `iter.next()`\n+   |              ^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `iter.next()`\n \n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:30:22\n    |\n LL |     let _unwrapped = iter2.nth(0).unwrap();\n-   |                      ^^^^^^^^^^^^ help: try calling: `iter2.next()`\n+   |                      ^^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `iter2.next()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27222cc0869c83cf50a37d5c66fb63ee2ff92f62", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -30,7 +30,7 @@ async fn already_async() -> impl Future<Output = i32> {\n struct S {}\n impl S {\n     async fn inh_fut() -> i32 {\n-        // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+        // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n         let a = 42;\n         let b = 21;\n         if a < b {"}, {"sha": "6a0f1b26c88388e18dfe49375799e928b578b049", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -37,7 +37,7 @@ struct S {}\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n         async {\n-            // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+            // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n             let a = 42;\n             let b = 21;\n             if a < b {"}, {"sha": "a1904c904d0f4930672ec80fc40887a33769cf2f", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -57,7 +57,7 @@ LL |     async fn inh_fut() -> i32 {\n help: move the body of the async block to the enclosing function\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n-LL |         // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+LL |         // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n LL |         let a = 42;\n LL |         let b = 21;\n LL |         if a < b {"}, {"sha": "a82b1159161903d5ba36e427cc2265f2ed5e3c14", "filename": "tests/ui/needless_range_loop2.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fneedless_range_loop2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fneedless_range_loop2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop2.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -83,3 +83,13 @@ fn main() {\n         println!(\"{}\", arr[i]);\n     }\n }\n+\n+mod issue2277 {\n+    pub fn example(list: &[[f64; 3]]) {\n+        let mut x: [f64; 3] = [10.; 3];\n+\n+        for i in 0..3 {\n+            x[i] = list.iter().map(|item| item[i]).sum::<f64>();\n+        }\n+    }\n+}"}, {"sha": "2770eb2b2ab4389e635fd779134d5bfce061a4cd", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -166,7 +166,7 @@ pub fn test14() {\n     }\n }\n \n-// Issue #1991: the outter loop should not warn.\n+// Issue #1991: the outer loop should not warn.\n pub fn test15() {\n     'label: loop {\n         while false {"}, {"sha": "f91ccfaed743d4ac9ceb35e5a7651a9f176aa2e2", "filename": "tests/ui/panicking_macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -4,24 +4,32 @@\n fn panic() {\n     let a = 2;\n     panic!();\n+    panic!(\"message\");\n+    panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn todo() {\n     let a = 2;\n     todo!();\n+    todo!(\"message\");\n+    todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn unimplemented() {\n     let a = 2;\n     unimplemented!();\n+    unimplemented!(\"message\");\n+    unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn unreachable() {\n     let a = 2;\n     unreachable!();\n+    unreachable!(\"message\");\n+    unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n "}, {"sha": "37c11d72a574a8fdcb0b4d1dbb0e6498c26faa50", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -6,29 +6,83 @@ LL |     panic!();\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:7:5\n+   |\n+LL |     panic!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:8:5\n+   |\n+LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:12:5\n+  --> $DIR/panicking_macros.rs:14:5\n    |\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n \n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:15:5\n+   |\n+LL |     todo!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:16:5\n+   |\n+LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:18:5\n+  --> $DIR/panicking_macros.rs:22:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n-error: `unreachable` should not be present in production code\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:23:5\n+   |\n+LL |     unimplemented!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n    |\n+LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:30:5\n+   |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n-error: aborting due to 4 previous errors\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:31:5\n+   |\n+LL |     unreachable!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:32:5\n+   |\n+LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "4d284ae1319d321a4d867e91f10e71ae317bacd9", "filename": "tests/ui/precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "2d08e82f349ade91eb20d8fa8adb3f040a6d2908", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "8a831375b412dacdd4f705df37df47b507ca5823", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -104,7 +104,7 @@ note: previous binding is here\n LL |     let x = (1, x);\n    |         ^\n \n-error: `x` is shadowed by `y`\n+error: `x` is being shadowed\n   --> $DIR/shadow.rs:34:9\n    |\n LL |     let x = y;"}, {"sha": "bdb4710cc69723ca836eef19c18d2f4b06151167", "filename": "tests/ui/unit_return_expecting_ord.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::unit_return_expecting_ord)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::unused_unit)]\n+#![feature(is_sorted)]\n+\n+struct Struct {\n+    field: isize,\n+}\n+\n+fn double(i: isize) -> isize {\n+    i * 2\n+}\n+\n+fn unit(_i: isize) {}\n+\n+fn main() {\n+    let mut structs = vec![Struct { field: 2 }, Struct { field: 1 }];\n+    structs.sort_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.sort_by_key(|s| double(s.field));\n+    structs.is_sorted_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.is_sorted_by_key(|s| {\n+        if s.field > 0 {\n+            ()\n+        } else {\n+            return ();\n+        }\n+    });\n+    structs.sort_by_key(|s| {\n+        return double(s.field);\n+    });\n+    structs.sort_by_key(|s| unit(s.field));\n+}"}, {"sha": "e63d58746090b73d36947e98efb4de0963b88dc7", "filename": "tests/ui/unit_return_expecting_ord.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Funit_return_expecting_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Funit_return_expecting_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.stderr?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -0,0 +1,39 @@\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:18:25\n+   |\n+LL |     structs.sort_by_key(|s| {\n+   |                         ^^^\n+   |\n+   = note: `-D clippy::unit-return-expecting-ord` implied by `-D warnings`\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:19:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:22:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+   |\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:23:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:25:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:35:25\n+   |\n+LL |     structs.sort_by_key(|s| unit(s.field));\n+   |                         ^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "7ed27439ec6e4432372224dd696d485024918b96", "filename": "tests/ui/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f501ac1db5152fac4712e0357fc498aed6f7313/tests%2Fui%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.rs?ref=0f501ac1db5152fac4712e0357fc498aed6f7313", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     // not applicable\n     vec![1, 2, 3, 4, 5].resize(2, 5);\n \n-    // applicable here, but only implemented for integer litterals for now\n+    // applicable here, but only implemented for integer literals for now\n     vec![\"foo\", \"bar\", \"baz\"].resize(0, \"bar\");\n \n     // not applicable"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a20489c5ca0951827cbb1b4d72ddfdfd393713a/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/5a20489c5ca0951827cbb1b4d72ddfdfd393713a/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=5a20489c5ca0951827cbb1b4d72ddfdfd393713a", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}