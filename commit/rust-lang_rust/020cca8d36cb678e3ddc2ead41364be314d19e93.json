{"sha": "020cca8d36cb678e3ddc2ead41364be314d19e93", "node_id": "C_kwDOAAsO6NoAKDAyMGNjYThkMzZjYjY3OGUzZGRjMmVhZDQxMzY0YmUzMTRkMTllOTM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:29:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T18:21:08Z"}, "message": "review comment: Remove AST AnonTy", "tree": {"sha": "16e3e8ada915896512cbd139e492f339c3538f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e3e8ada915896512cbd139e492f339c3538f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020cca8d36cb678e3ddc2ead41364be314d19e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020cca8d36cb678e3ddc2ead41364be314d19e93", "html_url": "https://github.com/rust-lang/rust/commit/020cca8d36cb678e3ddc2ead41364be314d19e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020cca8d36cb678e3ddc2ead41364be314d19e93/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12d18e403139eeeeb339e8611b2bed4910864edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d18e403139eeeeb339e8611b2bed4910864edb", "html_url": "https://github.com/rust-lang/rust/commit/12d18e403139eeeeb339e8611b2bed4910864edb"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "7de594719ddc44568872ea3ee2516da728a96ada", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -2096,9 +2096,6 @@ pub enum TyKind {\n     Err,\n     /// Placeholder for a `va_list`.\n     CVarArgs,\n-    /// Placeholder for \"anonymous enums\", which don't exist, but keeping their\n-    /// information around lets us produce better diagnostics.\n-    AnonEnum(Vec<P<Ty>>),\n }\n \n impl TyKind {"}, {"sha": "77f342d1eb322efe2a35deb211006e6408a243b5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -470,7 +470,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_fn_decl(decl);\n             vis.visit_span(decl_span);\n         }\n-        TyKind::AnonEnum(tys) | TyKind::Tup(tys) => visit_vec(tys, |ty| vis.visit_ty(ty)),\n+        TyKind::Tup(tys) => visit_vec(tys, |ty| vis.visit_ty(ty)),\n         TyKind::Paren(ty) => vis.visit_ty(ty),\n         TyKind::Path(qself, path) => {\n             vis.visit_qself(qself);"}, {"sha": "feb5187536ffa5cbf97869f9334f6fcc69b0068d", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -400,7 +400,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Ref);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n-        TyKind::AnonEnum(tys) | TyKind::Tup(tys) => {\n+        TyKind::Tup(tys) => {\n             walk_list!(visitor, visit_ty, tys);\n         }\n         TyKind::BareFn(function_declaration) => {"}, {"sha": "41d4a5679f1a0b2822396af1256c20e5497350a0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -1235,7 +1235,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = match &t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n-            TyKind::AnonEnum(_) => hir::TyKind::Err,\n             TyKind::Slice(ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Ref(region, mt) => {"}, {"sha": "6a8064b0e874e84fc7731af56d705b41457d861d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -1041,9 +1041,6 @@ impl<'a> State<'a> {\n                 }\n                 self.pclose();\n             }\n-            ast::TyKind::AnonEnum(elts) => {\n-                self.strsep(\"|\", false, Inconsistent, elts, |s, ty| s.print_type(ty));\n-            }\n             ast::TyKind::Paren(typ) => {\n                 self.popen();\n                 self.print_type(typ);"}, {"sha": "43e6eac438ba53b70d3c185991bfd00fdae473cf", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -390,7 +390,7 @@ impl<'a> Parser<'a> {\n                     .join(\"\\n\"),\n             ));\n             err.emit();\n-            return Ok(self.mk_ty(lo.to(self.prev_token.span), TyKind::AnonEnum(types)));\n+            return Ok(self.mk_ty(lo.to(self.prev_token.span), TyKind::Err));\n         }\n         if allow_qpath_recovery { self.maybe_recover_from_bad_qpath(ty) } else { Ok(ty) }\n     }"}, {"sha": "b86d2316820cec75ab3fa744079775fa22151d6c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -579,7 +579,6 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n             [\n                 Slice,\n                 Array,\n-                AnonEnum,\n                 Ptr,\n                 Ref,\n                 BareFn,"}, {"sha": "c1991e8d2c80800ef354d7ccc5554928349450be", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/020cca8d36cb678e3ddc2ead41364be314d19e93/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020cca8d36cb678e3ddc2ead41364be314d19e93/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=020cca8d36cb678e3ddc2ead41364be314d19e93", "patch": "@@ -839,9 +839,7 @@ impl Rewrite for ast::Ty {\n                 })\n             }\n             ast::TyKind::CVarArgs => Some(\"...\".to_owned()),\n-            ast::TyKind::AnonEnum(_) | ast::TyKind::Err => {\n-                Some(context.snippet(self.span).to_owned())\n-            }\n+            ast::TyKind::Err => Some(context.snippet(self.span).to_owned()),\n             ast::TyKind::Typeof(ref anon_const) => rewrite_call(\n                 context,\n                 \"typeof\","}]}