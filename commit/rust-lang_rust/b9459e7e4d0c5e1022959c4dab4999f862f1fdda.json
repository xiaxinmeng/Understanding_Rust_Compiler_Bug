{"sha": "b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NDU5ZTdlNGQwYzVlMTAyMjk1OWM0ZGFiNDk5OWY4NjJmMWZkZGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-23T23:30:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-23T23:30:20Z"}, "message": "Rollup merge of #61054 - estebank:mut-ref-reassign, r=zackmdavis\n\nSuggest dereferencing on assignment to mutable borrow\n\nFix #33570", "tree": {"sha": "8bed1c4828de92b66c8b76b22a79e700eccf648e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bed1c4828de92b66c8b76b22a79e700eccf648e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5y0MCRBK7hj4Ov3rIwAAdHIIADzVIykKBf9TXG3xss0Byf1Y\n7NdWVPR3yJRb+mBLEeJXSyG3TJuFiNVSOBe7AqyW5OWXx95ydiwgODNsGKxFZQH+\nfZowqP/DiZPNlzKMNSGWYbTmjOtMM2MmEn82UrNiMy7EuXj+AQuICRM25q41LzMu\nJXQejFLhg/xGiRGCEJ/fjgOpOHEJ2WXpnIvQFVWBkPizBr5wvA6LBPV0npkiwQhg\ny0J271Z0rg4ikK+cH0Knu7fLMKmO6vIRA98Ybp1B0cwywVtimqVGi/Os5W3uPc4Q\ni+PUeK7uc9g0yFSoeHK6XWefWrV12QtzENzUx8J13zyJwCgPfDV+RORwv10BH1E=\n=Qj4n\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bed1c4828de92b66c8b76b22a79e700eccf648e\nparent e0e9c86e056d9aacc6e4d333c4f881f5c3826bba\nparent 7fbbcfaafd08023cc2296481425e16a02ccd3f1a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558654220 +0200\ncommitter GitHub <noreply@github.com> 1558654220 +0200\n\nRollup merge of #61054 - estebank:mut-ref-reassign, r=zackmdavis\n\nSuggest dereferencing on assignment to mutable borrow\n\nFix #33570\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "html_url": "https://github.com/rust-lang/rust/commit/b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e9c86e056d9aacc6e4d333c4f881f5c3826bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9c86e056d9aacc6e4d333c4f881f5c3826bba", "html_url": "https://github.com/rust-lang/rust/commit/e0e9c86e056d9aacc6e4d333c4f881f5c3826bba"}, {"sha": "7fbbcfaafd08023cc2296481425e16a02ccd3f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbbcfaafd08023cc2296481425e16a02ccd3f1a", "html_url": "https://github.com/rust-lang/rust/commit/7fbbcfaafd08023cc2296481425e16a02ccd3f1a"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "a4e687b8f9080f4b4e8e535af1b36200c26dc7dc", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "patch": "@@ -306,11 +306,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// In addition of this check, it also checks between references mutability state. If the\n     /// expected is mutable but the provided isn't, maybe we could just say \"Hey, try with\n     /// `&mut`!\".\n-    pub fn check_ref(&self,\n-                 expr: &hir::Expr,\n-                 checked_ty: Ty<'tcx>,\n-                 expected: Ty<'tcx>)\n-                 -> Option<(Span, &'static str, String)> {\n+    pub fn check_ref(\n+        &self,\n+        expr: &hir::Expr,\n+        checked_ty: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> Option<(Span, &'static str, String)> {\n         let cm = self.sess().source_map();\n         let sp = expr.span;\n         if !cm.span_to_filename(sp).is_real() {\n@@ -397,6 +398,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         } else {\n                             String::new()\n                         };\n+                        if let Some(hir::Node::Expr(hir::Expr {\n+                            node: hir::ExprKind::Assign(left_expr, _),\n+                            ..\n+                        })) = self.tcx.hir().find_by_hir_id(\n+                            self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                        ) {\n+                            if mutability == hir::Mutability::MutMutable {\n+                                // Found the following case:\n+                                // fn foo(opt: &mut Option<String>){ opt = None }\n+                                //                                   ---   ^^^^\n+                                //                                   |     |\n+                                //    consider dereferencing here: `*opt`  |\n+                                // expected mutable reference, found enum `Option`\n+                                if let Ok(src) = cm.span_to_snippet(left_expr.span) {\n+                                    return Some((\n+                                        left_expr.span,\n+                                        \"consider dereferencing here to assign to the mutable \\\n+                                         borrowed piece of memory\",\n+                                        format!(\"*{}\", src),\n+                                    ));\n+                                }\n+                            }\n+                        }\n                         return Some(match mutability {\n                             hir::Mutability::MutMutable => (\n                                 sp,"}, {"sha": "1428324934de210343659b1417e205efd5866b96", "filename": "src/test/ui/suggestions/mut-ref-reassignment.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs?ref=b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "patch": "@@ -0,0 +1,17 @@\n+fn suggestion(opt: &mut Option<String>) {\n+    opt = None; //~ ERROR mismatched types\n+}\n+\n+fn no_suggestion(opt: &mut Result<String, ()>) {\n+    opt = None //~ ERROR mismatched types\n+}\n+\n+fn suggestion2(opt: &mut Option<String>) {\n+    opt = Some(String::new())//~ ERROR mismatched types\n+}\n+\n+fn no_suggestion2(opt: &mut Option<String>) {\n+    opt = Some(42)//~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "66b78a1b140155c737bf78bb7b497f104ceb8b55", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9459e7e4d0c5e1022959c4dab4999f862f1fdda/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "patch": "@@ -0,0 +1,47 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mut-ref-reassignment.rs:2:11\n+   |\n+LL |     opt = None;\n+   |           ^^^^ expected mutable reference, found enum `std::option::Option`\n+   |\n+   = note: expected type `&mut std::option::Option<std::string::String>`\n+              found type `std::option::Option<_>`\n+help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+   |\n+LL |     *opt = None;\n+   |     ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mut-ref-reassignment.rs:6:11\n+   |\n+LL |     opt = None\n+   |           ^^^^ expected mutable reference, found enum `std::option::Option`\n+   |\n+   = note: expected type `&mut std::result::Result<std::string::String, ()>`\n+              found type `std::option::Option<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mut-ref-reassignment.rs:10:11\n+   |\n+LL |     opt = Some(String::new())\n+   |           ^^^^^^^^^^^^^^^^^^^ expected mutable reference, found enum `std::option::Option`\n+   |\n+   = note: expected type `&mut std::option::Option<std::string::String>`\n+              found type `std::option::Option<std::string::String>`\n+help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+   |\n+LL |     *opt = Some(String::new())\n+   |     ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/mut-ref-reassignment.rs:14:11\n+   |\n+LL |     opt = Some(42)\n+   |           ^^^^^^^^ expected mutable reference, found enum `std::option::Option`\n+   |\n+   = note: expected type `&mut std::option::Option<std::string::String>`\n+              found type `std::option::Option<{integer}>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}