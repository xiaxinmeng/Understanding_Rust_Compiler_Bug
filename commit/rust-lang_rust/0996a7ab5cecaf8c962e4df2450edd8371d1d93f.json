{"sha": "0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "node_id": "C_kwDOAAsO6NoAKDA5OTZhN2FiNWNlY2FmOGM5NjJlNGRmMjQ1MGVkZDgzNzFkMWQ5M2Y", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T14:00:01Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port ty diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "9fe40cc3cc64c20225e693476e1ec78d5d1f440c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe40cc3cc64c20225e693476e1ec78d5d1f440c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "html_url": "https://github.com/rust-lang/rust/commit/0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0996a7ab5cecaf8c962e4df2450edd8371d1d93f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81395425985edee9260fdf597d3dcf0f67ada4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81395425985edee9260fdf597d3dcf0f67ada4bb", "html_url": "https://github.com/rust-lang/rust/commit/81395425985edee9260fdf597d3dcf0f67ada4bb"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "43c21b380a5f4b14f4a32083252f81660dd4d26b", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0996a7ab5cecaf8c962e4df2450edd8371d1d93f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0996a7ab5cecaf8c962e4df2450edd8371d1d93f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "patch": "@@ -34,3 +34,12 @@ lint-default-hash-types = prefer `{$preferred}` over `{$used}`, it has better pe\n \n lint-query-instability = using `{$query}` can result in unstable query results\n     .note = if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+lint-tykind-kind = usage of `ty::TyKind::<kind>`\n+    .suggestion = try using `ty::<kind>` directly\n+\n+lint-tykind = usage of `ty::TyKind`\n+    .help = try using `Ty` instead\n+\n+lint-ty-qualified = usage of qualified `ty::{$ty}`\n+    .suggestion = try importing it and using it unqualified"}, {"sha": "3707abd2838be8ece3604ebc75c97aea3de0b195", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0996a7ab5cecaf8c962e4df2450edd8371d1d93f/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996a7ab5cecaf8c962e4df2450edd8371d1d93f/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=0996a7ab5cecaf8c962e4df2450edd8371d1d93f", "patch": "@@ -140,10 +140,10 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                 segment.args.map_or(segment.ident.span, |a| a.span_ext).hi()\n             );\n             cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, |lint| {\n-                lint.build(\"usage of `ty::TyKind::<kind>`\")\n+                lint.build(fluent::lint::tykind_kind)\n                     .span_suggestion(\n                         span,\n-                        \"try using `ty::<kind>` directly\",\n+                        fluent::lint::suggestion,\n                         \"ty\",\n                         Applicability::MaybeIncorrect, // ty maybe needs an import\n                     )\n@@ -169,10 +169,10 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                 if let QPath::TypeRelative(qpath_ty, ..) = qpath\n                                     && qpath_ty.hir_id == ty.hir_id\n                                 {\n-                                    lint.build(\"usage of `ty::TyKind::<kind>`\")\n+                                    lint.build(fluent::lint::tykind_kind)\n                                         .span_suggestion(\n                                             path.span,\n-                                            \"try using `ty::<kind>` directly\",\n+                                            fluent::lint::suggestion,\n                                             \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n@@ -187,10 +187,10 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                 if let QPath::TypeRelative(qpath_ty, ..) = qpath\n                                     && qpath_ty.hir_id == ty.hir_id\n                                 {\n-                                    lint.build(\"usage of `ty::TyKind::<kind>`\")\n+                                    lint.build(fluent::lint::tykind_kind)\n                                         .span_suggestion(\n                                             path.span,\n-                                            \"try using `ty::<kind>` directly\",\n+                                            fluent::lint::suggestion,\n                                             \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n@@ -207,10 +207,10 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                 if let QPath::TypeRelative(qpath_ty, ..) = qpath\n                                     && qpath_ty.hir_id == ty.hir_id\n                                 {\n-                                    lint.build(\"usage of `ty::TyKind::<kind>`\")\n+                                    lint.build(fluent::lint::tykind_kind)\n                                         .span_suggestion(\n                                             path.span,\n-                                            \"try using `ty::<kind>` directly\",\n+                                            fluent::lint::suggestion,\n                                             \"ty\",\n                                             Applicability::MaybeIncorrect, // ty maybe needs an import\n                                         )\n@@ -220,15 +220,16 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                             }\n                             _ => {}\n                         }\n-                        lint.build(\"usage of `ty::TyKind`\").help(\"try using `Ty` instead\").emit();\n+                        lint.build(fluent::lint::tykind).help(fluent::lint::help).emit();\n                     })\n                 } else if !ty.span.from_expansion() && let Some(t) = is_ty_or_ty_ctxt(cx, &path) {\n                     if path.segments.len() > 1 {\n                         cx.struct_span_lint(USAGE_OF_QUALIFIED_TY, path.span, |lint| {\n-                            lint.build(&format!(\"usage of qualified `ty::{}`\", t))\n+                            lint.build(fluent::lint::ty_qualified)\n+                                .set_arg(\"ty\", t.clone())\n                                 .span_suggestion(\n                                     path.span,\n-                                    \"try importing it and using it unqualified\",\n+                                    fluent::lint::suggestion,\n                                     t,\n                                     // The import probably needs to be changed\n                                     Applicability::MaybeIncorrect,"}]}