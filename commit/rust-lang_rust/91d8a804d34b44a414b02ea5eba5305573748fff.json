{"sha": "91d8a804d34b44a414b02ea5eba5305573748fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDhhODA0ZDM0YjQ0YTQxNGIwMmVhNWViYTUzMDU1NzM3NDhmZmY=", "commit": {"author": {"name": "Nick Torres", "email": "nickrtorres@icloud.com", "date": "2020-04-04T06:59:52Z"}, "committer": {"name": "Nick Torres", "email": "nickrtorres@icloud.com", "date": "2020-04-04T10:17:13Z"}, "message": "result_map_or_into_option: add lint to catch manually adpating Result -> Option\n\nResult<T, E> has an `ok()` method that adapts a Result<T,E> into an Option<T>.\nIt's possible to get around this adapter by writing Result<T,E>.map_or(None, Some).\n\nThis lint is implemented as a new variant of the existing\n[`option_map_none` lint](https://github.com/rust-lang/rust-clippy/pull/2128)", "tree": {"sha": "908265340c42d09c451b1baa5a42e455aef8074c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908265340c42d09c451b1baa5a42e455aef8074c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d8a804d34b44a414b02ea5eba5305573748fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d8a804d34b44a414b02ea5eba5305573748fff", "html_url": "https://github.com/rust-lang/rust/commit/91d8a804d34b44a414b02ea5eba5305573748fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d8a804d34b44a414b02ea5eba5305573748fff/comments", "author": {"login": "nickrtorres", "id": 9876860, "node_id": "MDQ6VXNlcjk4NzY4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/9876860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickrtorres", "html_url": "https://github.com/nickrtorres", "followers_url": "https://api.github.com/users/nickrtorres/followers", "following_url": "https://api.github.com/users/nickrtorres/following{/other_user}", "gists_url": "https://api.github.com/users/nickrtorres/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickrtorres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickrtorres/subscriptions", "organizations_url": "https://api.github.com/users/nickrtorres/orgs", "repos_url": "https://api.github.com/users/nickrtorres/repos", "events_url": "https://api.github.com/users/nickrtorres/events{/privacy}", "received_events_url": "https://api.github.com/users/nickrtorres/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nickrtorres", "id": 9876860, "node_id": "MDQ6VXNlcjk4NzY4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/9876860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickrtorres", "html_url": "https://github.com/nickrtorres", "followers_url": "https://api.github.com/users/nickrtorres/followers", "following_url": "https://api.github.com/users/nickrtorres/following{/other_user}", "gists_url": "https://api.github.com/users/nickrtorres/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickrtorres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickrtorres/subscriptions", "organizations_url": "https://api.github.com/users/nickrtorres/orgs", "repos_url": "https://api.github.com/users/nickrtorres/repos", "events_url": "https://api.github.com/users/nickrtorres/events{/privacy}", "received_events_url": "https://api.github.com/users/nickrtorres/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7907abea272bbf97812683ce03a1ab9c22f0557b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7907abea272bbf97812683ce03a1ab9c22f0557b", "html_url": "https://github.com/rust-lang/rust/commit/7907abea272bbf97812683ce03a1ab9c22f0557b"}], "stats": {"total": 156, "additions": 131, "deletions": 25}, "files": [{"sha": "b7ac3cace2048a7684cc55d20af461770b361f2c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -1448,6 +1448,7 @@ Released 2018-09-13\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n+[`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used"}, {"sha": "83dcb350e1856d0b0329017e0c0366b49eefc513", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -666,6 +666,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n+        &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n@@ -1273,6 +1274,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n@@ -1453,6 +1455,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),"}, {"sha": "e8d642ed71e05c4e5cd13bc4a4c5d520c80e40b6", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 80, "deletions": 25, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -330,6 +330,24 @@ declare_clippy_lint! {\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map_or(None, Some)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.ok()`.\n+    ///\n+    /// **Known problems:**\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    /// # let r = opt.map_or(None, Some);\n+    /// ```\n+    pub RESULT_MAP_OR_INTO_OPTION,\n+    style,\n+    \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`.\n     ///\n@@ -1248,6 +1266,7 @@ declare_lint_pass!(Methods => [\n     OPTION_MAP_UNWRAP_OR,\n     OPTION_MAP_UNWRAP_OR_ELSE,\n     RESULT_MAP_UNWRAP_OR_ELSE,\n+    RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n     OR_FUN_CALL,\n@@ -2517,37 +2536,73 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     }\n }\n \n-/// lint use of `_.map_or(None, _)` for `Option`s\n+/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n fn lint_map_or_none<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     map_or_args: &'tcx [hir::Expr<'_>],\n ) {\n-    if match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION) {\n-        // check if the first non-self argument to map_or() is None\n-        let map_or_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n-            match_qpath(qpath, &paths::OPTION_NONE)\n-        } else {\n-            false\n-        };\n+    let is_option = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION);\n+    let is_result = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::RESULT);\n+\n+    // There are two variants of this `map_or` lint:\n+    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n+    // (2) using `map_or` as a combinator instead of `and_then`\n+    //\n+    // (For this lint) we don't care if any other type calls `map_or`\n+    if !is_option && !is_result {\n+        return;\n+    }\n \n-        if map_or_arg_is_none {\n-            // lint message\n-            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n-                       `and_then(f)` instead\";\n-            let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n-            span_lint_and_sugg(\n-                cx,\n-                OPTION_MAP_OR_NONE,\n-                expr.span,\n-                msg,\n-                \"try using `and_then` instead\",\n-                hint,\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+    let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n+        match_qpath(qpath, &paths::OPTION_NONE)\n+    } else {\n+        false\n+    };\n+\n+    // This is really only needed if `is_result` holds. Computing it here\n+    // makes `mess`'s assignment a bit easier, so just compute it here.\n+    let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n+        match_qpath(qpath, &paths::OPTION_SOME)\n+    } else {\n+        false\n+    };\n+\n+    let mess = if is_option && default_arg_is_none {\n+        let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+        let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n+        let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n+                   `and_then(f)` instead\";\n+        Some((\n+            OPTION_MAP_OR_NONE,\n+            msg,\n+            \"try using `and_then` instead\",\n+            format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+        ))\n+    } else if is_result && f_arg_is_some {\n+        let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                   `ok()` instead\";\n+        let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+        Some((\n+            RESULT_MAP_OR_INTO_OPTION,\n+            msg,\n+            \"try using `ok` instead\",\n+            format!(\"{0}.ok()\", self_snippet),\n+        ))\n+    } else {\n+        None\n+    };\n+\n+    if let Some((lint, msg, instead, hint)) = mess {\n+        span_lint_and_sugg(\n+            cx,\n+            lint,\n+            expr.span,\n+            msg,\n+            instead,\n+            hint,\n+            Applicability::MachineApplicable,\n+        );\n     }\n }\n "}, {"sha": "01d1d1a067236966686fde6b86d4b038ba8f2575", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -1823,6 +1823,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"result_map_or_into_option\",\n+        group: \"style\",\n+        desc: \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\","}, {"sha": "948eb6a3aca179e162cc5daac3af40e07d1c3a20", "filename": "tests/ui/result_map_or_into_option.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.fixed?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.ok();\n+\n+    let rewrap = |s: u32| -> Option<u32> {\n+        Some(s)\n+    };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+}"}, {"sha": "d097c19e44b90a3fbb7af3e99d15c02eacd9b263", "filename": "tests/ui/result_map_or_into_option.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.rs?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, Some);\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+}"}, {"sha": "febf32147d132d3e163e13080e025ccd31d30263", "filename": "tests/ui/result_map_or_into_option.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91d8a804d34b44a414b02ea5eba5305573748fff/tests%2Fui%2Fresult_map_or_into_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.stderr?ref=91d8a804d34b44a414b02ea5eba5305573748fff", "patch": "@@ -0,0 +1,10 @@\n+error: called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling `ok()` instead\n+  --> $DIR/result_map_or_into_option.rs:7:13\n+   |\n+LL |     let _ = opt.map_or(None, Some);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try using `ok` instead: `opt.ok()`\n+   |\n+   = note: `-D clippy::result-map-or-into-option` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}