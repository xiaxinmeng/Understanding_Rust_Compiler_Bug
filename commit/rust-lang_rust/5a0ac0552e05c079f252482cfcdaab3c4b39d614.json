{"sha": "5a0ac0552e05c079f252482cfcdaab3c4b39d614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGFjMDU1MmUwNWMwNzlmMjUyNDgyY2ZjZGFhYjNjNGIzOWQ2MTQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-13T05:47:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-13T05:47:19Z"}, "message": "Use simpler impls for some `Iterator` methods for slices.\n\nThe default implementations of several `Iterator` methods use `fold` or\n`try_fold`, which works, but is overkill for slices and bloats the\namount of LLVM IR generated and consequently hurts compile times.\n\nThis commit adds the simple, obvious implementations for `for_each`,\n`all`, `any`, `find`, `find_map`, and simplifies the existing\nimplementations for `position` and `rposition`. These changes reduce\ncompile times significantly on some benchmarks.", "tree": {"sha": "f1934fa541d5024abc18455c1190b5599eedaab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1934fa541d5024abc18455c1190b5599eedaab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0ac0552e05c079f252482cfcdaab3c4b39d614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0ac0552e05c079f252482cfcdaab3c4b39d614", "html_url": "https://github.com/rust-lang/rust/commit/5a0ac0552e05c079f252482cfcdaab3c4b39d614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0ac0552e05c079f252482cfcdaab3c4b39d614/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "html_url": "https://github.com/rust-lang/rust/commit/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "3386f83ec810fb36035efcbe4b9ab4915c433c1f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 105, "deletions": 17, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/5a0ac0552e05c079f252482cfcdaab3c4b39d614/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0ac0552e05c079f252482cfcdaab3c4b39d614/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5a0ac0552e05c079f252482cfcdaab3c4b39d614", "patch": "@@ -3179,6 +3179,7 @@ macro_rules! is_empty {\n         $self.ptr.as_ptr() as *const T == $self.end\n     };\n }\n+\n // To get rid of some bounds checks (see `position`), we compute the length in a somewhat\n // unexpected way. (Tested by `codegen/slice-position-bounds-check`.)\n macro_rules! len {\n@@ -3347,40 +3348,127 @@ macro_rules! iterator {\n                 self.next_back()\n             }\n \n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn for_each<F>(mut self, mut f: F)\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item),\n+            {\n+                while let Some(x) = self.next() {\n+                    f(x);\n+                }\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn all<F>(&mut self, mut f: F) -> bool\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if !f(x) {\n+                        return false;\n+                    }\n+                }\n+                true\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn any<F>(&mut self, mut f: F) -> bool\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if f(x) {\n+                        return true;\n+                    }\n+                }\n+                false\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>\n+            where\n+                Self: Sized,\n+                P: FnMut(&Self::Item) -> bool,\n+            {\n+                while let Some(x) = self.next() {\n+                    if predicate(&x) {\n+                        return Some(x);\n+                    }\n+                }\n+                None\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile.\n+            #[inline]\n+            fn find_map<B, F>(&mut self, mut f: F) -> Option<B>\n+            where\n+                Self: Sized,\n+                F: FnMut(Self::Item) -> Option<B>,\n+            {\n+                while let Some(x) = self.next() {\n+                    if let Some(y) = f(x) {\n+                        return Some(y);\n+                    }\n+                }\n+                None\n+            }\n+\n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile. Also, the `assume` avoids a bounds check.\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n                 Self: Sized,\n                 P: FnMut(Self::Item) -> bool,\n             {\n-                // The addition might panic on overflow.\n                 let n = len!(self);\n-                self.try_fold(0, move |i, x| {\n-                    if predicate(x) { Err(i) }\n-                    else { Ok(i + 1) }\n-                }).err()\n-                    .map(|i| {\n+                let mut i = 0;\n+                while let Some(x) = self.next() {\n+                    if predicate(x) {\n                         unsafe { assume(i < n) };\n-                        i\n-                    })\n+                        return Some(i);\n+                    }\n+                    i += 1;\n+                }\n+                None\n             }\n \n+            // We override the default implementation, which uses `try_fold`,\n+            // because this simple implementation generates less LLVM IR and is\n+            // faster to compile. Also, the `assume` avoids a bounds check.\n             #[inline]\n             fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where\n                 P: FnMut(Self::Item) -> bool,\n                 Self: Sized + ExactSizeIterator + DoubleEndedIterator\n             {\n-                // No need for an overflow check here, because `ExactSizeIterator`\n                 let n = len!(self);\n-                self.try_rfold(n, move |i, x| {\n-                    let i = i - 1;\n-                    if predicate(x) { Err(i) }\n-                    else { Ok(i) }\n-                }).err()\n-                    .map(|i| {\n+                let mut i = n;\n+                while let Some(x) = self.next_back() {\n+                    i -= 1;\n+                    if predicate(x) {\n                         unsafe { assume(i < n) };\n-                        i\n-                    })\n+                        return Some(i);\n+                    }\n+                }\n+                None\n             }\n \n             $($extra)*"}]}