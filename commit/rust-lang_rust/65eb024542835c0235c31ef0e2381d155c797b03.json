{"sha": "65eb024542835c0235c31ef0e2381d155c797b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWIwMjQ1NDI4MzVjMDIzNWMzMWVmMGUyMzgxZDE1NWM3OTdiMDM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-09T12:44:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-11T13:56:00Z"}, "message": "Remove the 'cfg' field from session::config::Options.\n\nThe 'cfg' in the Options struct is only the commandline-specified\nsubset of the crate configuration and it's almost always wrong to\nread that instead of the CrateConfig in HIR crate node.", "tree": {"sha": "bdd96b410a0a354aad5f762a61e2bd72b1540eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd96b410a0a354aad5f762a61e2bd72b1540eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65eb024542835c0235c31ef0e2381d155c797b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65eb024542835c0235c31ef0e2381d155c797b03", "html_url": "https://github.com/rust-lang/rust/commit/65eb024542835c0235c31ef0e2381d155c797b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65eb024542835c0235c31ef0e2381d155c797b03/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3578ab742129a8aae8461f015d6cc36d85e65cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3578ab742129a8aae8461f015d6cc36d85e65cc", "html_url": "https://github.com/rust-lang/rust/commit/d3578ab742129a8aae8461f015d6cc36d85e65cc"}], "stats": {"total": 314, "additions": 74, "deletions": 240}, "files": [{"sha": "a1e30cbaae91fbc2e94115725633f34116e819b9", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 210, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -269,15 +269,6 @@ top_level_options!(\n \n         target_triple: String [TRACKED],\n \n-        // User-specified cfg meta items. The compiler itself will add additional\n-        // items to the crate config, and during parsing the entire crate config\n-        // will be added to the crate AST node.  This should not be used for\n-        // anything except building the full crate config prior to parsing.\n-        // FIXME(mw): If we could be entirely sure that the `cfg` only ever\n-        //            influenced which HIR nodes get filtered out, we wouldn't\n-        //            need to track this separately. However, we can't rely on\n-        //            this (see `debug_assertions` above).\n-        cfg: ast::CrateConfig [TRACKED],\n         test: bool [TRACKED],\n         error_format: ErrorOutputType [UNTRACKED],\n         mir_opt_level: usize [TRACKED],\n@@ -438,7 +429,6 @@ pub fn basic_options() -> Options {\n         search_paths: SearchPaths::new(),\n         maybe_sysroot: None,\n         target_triple: host_triple().to_string(),\n-        cfg: Vec::new(),\n         test: false,\n         mir_opt_level: 1,\n         incremental: None,\n@@ -1007,11 +997,12 @@ pub fn append_configuration(cfg: &mut ast::CrateConfig,\n     }\n }\n \n-pub fn build_configuration(sess: &Session) -> ast::CrateConfig {\n+pub fn build_configuration(sess: &Session,\n+                           mut user_cfg: ast::CrateConfig)\n+                           -> ast::CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n     let default_cfg = default_configuration(sess);\n-    let mut user_cfg = sess.opts.cfg.clone();\n     // If the user wants a test runner, then add the test cfg\n     if sess.opts.test {\n         append_configuration(&mut user_cfg, InternedString::new(\"test\"))\n@@ -1273,7 +1264,8 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n     }).collect::<ast::CrateConfig>()\n }\n \n-pub fn build_session_options(matches: &getopts::Matches) -> Options {\n+pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n+                                              -> (Options, ast::CrateConfig) {\n     let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n         Some(\"auto\")   => ColorConfig::Auto,\n         Some(\"always\") => ColorConfig::Always,\n@@ -1534,7 +1526,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let incremental = debugging_opts.incremental.as_ref().map(|m| PathBuf::from(m));\n \n-    Options {\n+    (Options {\n         crate_types: crate_types,\n         optimize: opt_level,\n         debuginfo: debuginfo,\n@@ -1545,7 +1537,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         search_paths: search_paths,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n-        cfg: cfg,\n         test: test,\n         mir_opt_level: mir_opt_level,\n         incremental: incremental,\n@@ -1559,7 +1550,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         libs: libs,\n         unstable_features: get_unstable_features_setting(),\n         debug_assertions: debug_assertions,\n-    }\n+    },\n+    cfg)\n }\n \n pub fn get_unstable_features_setting() -> UnstableFeatures {\n@@ -1707,10 +1699,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use super::{Passes, PanicStrategy, CrateType, OptLevel, DebugInfoLevel,\n                 OutputTypes, Externs, ErrorOutputType};\n-    use syntax::ast;\n     use syntax::feature_gate::UnstableFeatures;\n-    use syntax::parse::token::InternedString;\n-    use syntax::ptr::P;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, &mut SipHasher, ErrorOutputType);\n@@ -1775,64 +1764,6 @@ mod dep_tracking {\n         }\n     }\n \n-    fn sorted_meta_items(items: &[P<ast::MetaItem>]) -> Vec<&ast::MetaItem> {\n-        // Sort subitems so the hash does not depend on their order\n-        let mut items: Vec<&ast::MetaItem> = items.iter()\n-                                             .map(|r| &**r)\n-                                             .collect();\n-        items.sort_by_key(meta_item_sort_key);\n-        return items;\n-\n-        fn meta_item_sort_key(item: &&ast::MetaItem) -> InternedString {\n-            match item.node {\n-                ast::MetaItemKind::Word(ref s) |\n-                ast::MetaItemKind::NameValue(ref s, _) |\n-                ast::MetaItemKind::List(ref s, _) => s.clone()\n-            }\n-        }\n-    }\n-\n-    impl DepTrackingHash for ast::MetaItem {\n-        fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n-            // ignoring span information, it doesn't matter here\n-            match self.node {\n-                ast::MetaItemKind::Word(ref s) => {\n-                    Hash::hash(\"Word\", hasher);\n-                    Hash::hash(&s.len(), hasher);\n-                    Hash::hash(s, hasher);\n-                }\n-                ast::MetaItemKind::NameValue(ref s, ref lit) => {\n-                    Hash::hash(\"NameValue\", hasher);\n-                    Hash::hash(&s.len(), hasher);\n-                    Hash::hash(s, hasher);\n-                    Hash::hash(&lit.node, hasher);\n-                }\n-                ast::MetaItemKind::List(ref s, ref items) => {\n-                    Hash::hash(\"List\", hasher);\n-                    Hash::hash(&s.len(), hasher);\n-                    Hash::hash(s, hasher);\n-                    // Sort subitems so the hash does not depend on their order\n-                    let sorted = sorted_meta_items(&items[..]);\n-                    for (index, item) in sorted.iter().enumerate() {\n-                        Hash::hash(&index, hasher);\n-                        DepTrackingHash::hash(*item, hasher, error_format);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    impl DepTrackingHash for ast::CrateConfig {\n-        fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n-            // Sort subitems so the hash does not depend on their order\n-            let sorted = sorted_meta_items(&self[..]);\n-            for (index, item) in sorted.iter().enumerate() {\n-                Hash::hash(&index, hasher);\n-                DepTrackingHash::hash(*item, hasher, error_format);\n-            }\n-        }\n-    }\n-\n     impl<T1, T2> DepTrackingHash for (T1, T2)\n         where T1: DepTrackingHash,\n               T2: DepTrackingHash\n@@ -1866,19 +1797,15 @@ mod tests {\n     use getopts::{getopts, OptGroup};\n     use lint;\n     use middle::cstore::{self, DummyCrateStore};\n-    use session::config::{build_configuration, build_session_options};\n+    use session::config::{build_configuration, build_session_options_and_crate_config};\n     use session::build_session;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n     use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs, PanicStrategy};\n-    use syntax::ast::{self, MetaItemKind};\n     use syntax::attr;\n     use syntax::attr::AttrMetaMethods;\n-    use syntax::codemap::dummy_spanned;\n-    use syntax::parse::token::InternedString;\n-    use syntax::ptr::P;\n \n     fn optgroups() -> Vec<OptGroup> {\n         super::rustc_optgroups().into_iter()\n@@ -1904,9 +1831,9 @@ mod tests {\n               Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n         let registry = errors::registry::Registry::new(&[]);\n-        let sessopts = build_session_options(matches);\n+        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n         let sess = build_session(sessopts, &dep_graph, None, registry, Rc::new(DummyCrateStore));\n-        let cfg = build_configuration(&sess);\n+        let cfg = build_configuration(&sess, cfg);\n         assert!((attr::contains_name(&cfg[..], \"test\")));\n     }\n \n@@ -1924,10 +1851,10 @@ mod tests {\n               }\n             };\n         let registry = errors::registry::Registry::new(&[]);\n-        let sessopts = build_session_options(matches);\n+        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n         let sess = build_session(sessopts, &dep_graph, None, registry,\n                                  Rc::new(DummyCrateStore));\n-        let cfg = build_configuration(&sess);\n+        let cfg = build_configuration(&sess, cfg);\n         let mut test_items = cfg.iter().filter(|m| m.name() == \"test\");\n         assert!(test_items.next().is_some());\n         assert!(test_items.next().is_none());\n@@ -1941,7 +1868,7 @@ mod tests {\n                 \"-Awarnings\".to_string()\n             ], &optgroups()).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n-            let sessopts = build_session_options(&matches);\n+            let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(!sess.diagnostic().can_emit_warnings);\n@@ -1953,7 +1880,7 @@ mod tests {\n                 \"-Dwarnings\".to_string()\n             ], &optgroups()).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n-            let sessopts = build_session_options(&matches);\n+            let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(sess.diagnostic().can_emit_warnings);\n@@ -1964,7 +1891,7 @@ mod tests {\n                 \"-Adead_code\".to_string()\n             ], &optgroups()).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n-            let sessopts = build_session_options(&matches);\n+            let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(sess.diagnostic().can_emit_warnings);\n@@ -2141,127 +2068,6 @@ mod tests {\n         assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n     }\n \n-    #[test]\n-    fn test_crate_config_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n-\n-        // Reference value\n-        v1.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"b\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(1))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        // Change a label\n-        v2.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"X\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(1))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        // Change a literal\n-        v3.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"X\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(99))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        // Remove something\n-        v4.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"X\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(99))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v4.dep_tracking_hash());\n-\n-        // Check clone\n-        assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n-        assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n-        assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n-        assert_eq!(v4.dep_tracking_hash(), v4.clone().dep_tracking_hash());\n-    }\n-\n-    #[test]\n-    fn test_crate_config_tracking_hash_different_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-\n-        // Reference value\n-        v1.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"b\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(1))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        v2.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"b\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(1))))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-        ];\n-\n-        v3.cfg = vec![\n-            P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"a\")))),\n-            P(dummy_spanned(MetaItemKind::List(InternedString::new(\"b\"),\n-                    vec![\n-                        P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"d\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(1))))),\n-                        P(dummy_spanned(MetaItemKind::Word(InternedString::new(\"c\")))),\n-                    ]))),\n-            P(dummy_spanned(MetaItemKind::NameValue(InternedString::new(\"e\"),\n-                                                    dummy_spanned(ast::LitKind::Byte(2))))),\n-        ];\n-\n-        assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());\n-\n-        // Check clone\n-        assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n-        assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n-        assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n-    }\n-\n     #[test]\n     fn test_search_paths_tracking_hash_different_values() {\n         let mut v1 = super::basic_options();"}, {"sha": "568d98ac8d6009c19f72e646413ab38323386bc5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -667,7 +667,10 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n         };\n-        let mut loader = macro_import::MacroLoader::new(sess, &cstore, crate_name);\n+        let mut loader = macro_import::MacroLoader::new(sess,\n+                                                        &cstore,\n+                                                        crate_name,\n+                                                        krate.config.clone());\n         let mut ecx = syntax::ext::base::ExtCtxt::new(&sess.parse_sess,\n                                                       krate.config.clone(),\n                                                       cfg,"}, {"sha": "6f57ae2941838d8185afde07b900a4b2aa635a5c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -181,7 +181,7 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n         None => return (Ok(()), None),\n     };\n \n-    let sopts = config::build_session_options(&matches);\n+    let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n     if sopts.debugging_opts.debug_llvm {\n         unsafe { llvm::LLVMRustSetDebug(1); }\n@@ -191,14 +191,15 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n \n     do_or_return!(callbacks.early_callback(&matches,\n                                            &sopts,\n+                                           &cfg,\n                                            &descriptions,\n                                            sopts.error_format),\n                                            None);\n \n     let (odir, ofile) = make_output(&matches);\n     let (input, input_file_path) = match make_input(&matches.free) {\n         Some((input, input_file_path)) => callbacks.some_input(input, input_file_path),\n-        None => match callbacks.no_input(&matches, &sopts, &odir, &ofile, &descriptions) {\n+        None => match callbacks.no_input(&matches, &sopts, &cfg, &odir, &ofile, &descriptions) {\n             Some((input, input_file_path)) => (input, input_file_path),\n             None => return (Ok(()), None),\n         },\n@@ -214,10 +215,11 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n                                                    cstore.clone(),\n                                                    codemap);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    let mut cfg = config::build_configuration(&sess);\n+    let mut cfg = config::build_configuration(&sess, cfg);\n     target_features::add_configuration(&mut cfg, &sess);\n \n-    do_or_return!(callbacks.late_callback(&matches, &sess, &input, &odir, &ofile), Some(sess));\n+    do_or_return!(callbacks.late_callback(&matches, &sess, &cfg, &input, &odir, &ofile),\n+                  Some(sess));\n \n     let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n     let control = callbacks.build_controller(&sess, &matches);\n@@ -297,6 +299,7 @@ pub trait CompilerCalls<'a> {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n+                      _: &ast::CrateConfig,\n                       _: &errors::registry::Registry,\n                       _: ErrorOutputType)\n                       -> Compilation {\n@@ -309,6 +312,7 @@ pub trait CompilerCalls<'a> {\n     fn late_callback(&mut self,\n                      _: &getopts::Matches,\n                      _: &Session,\n+                     _: &ast::CrateConfig,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n@@ -334,6 +338,7 @@ pub trait CompilerCalls<'a> {\n     fn no_input(&mut self,\n                 _: &getopts::Matches,\n                 _: &config::Options,\n+                _: &ast::CrateConfig,\n                 _: &Option<PathBuf>,\n                 _: &Option<PathBuf>,\n                 _: &errors::registry::Registry)\n@@ -375,7 +380,7 @@ fn handle_explain(code: &str,\n     }\n }\n \n-fn check_cfg(sopts: &config::Options,\n+fn check_cfg(cfg: &ast::CrateConfig,\n              output: ErrorOutputType) {\n     let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n@@ -386,7 +391,7 @@ fn check_cfg(sopts: &config::Options,\n     let handler = errors::Handler::with_emitter(true, false, emitter);\n \n     let mut saw_invalid_predicate = false;\n-    for item in sopts.cfg.iter() {\n+    for item in cfg.iter() {\n         if item.is_meta_item_list() {\n             saw_invalid_predicate = true;\n             handler.emit(&MultiSpan::new(),\n@@ -404,7 +409,8 @@ fn check_cfg(sopts: &config::Options,\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n-                      sopts: &config::Options,\n+                      _: &config::Options,\n+                      cfg: &ast::CrateConfig,\n                       descriptions: &errors::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n@@ -413,13 +419,14 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             return Compilation::Stop;\n         }\n \n-        check_cfg(sopts, output);\n+        check_cfg(cfg, output);\n         Compilation::Continue\n     }\n \n     fn no_input(&mut self,\n                 matches: &getopts::Matches,\n                 sopts: &config::Options,\n+                cfg: &ast::CrateConfig,\n                 odir: &Option<PathBuf>,\n                 ofile: &Option<PathBuf>,\n                 descriptions: &errors::registry::Registry)\n@@ -440,7 +447,13 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     descriptions.clone(),\n                     cstore.clone());\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-                let should_stop = RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile);\n+                let mut cfg = config::build_configuration(&sess, cfg.clone());\n+                target_features::add_configuration(&mut cfg, &sess);\n+                let should_stop = RustcDefaultCalls::print_crate_info(&sess,\n+                                                                      &cfg,\n+                                                                      None,\n+                                                                      odir,\n+                                                                      ofile);\n                 if should_stop == Compilation::Stop {\n                     return None;\n                 }\n@@ -456,11 +469,12 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn late_callback(&mut self,\n                      matches: &getopts::Matches,\n                      sess: &Session,\n+                     cfg: &ast::CrateConfig,\n                      input: &Input,\n                      odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n                      -> Compilation {\n-        RustcDefaultCalls::print_crate_info(sess, Some(input), odir, ofile)\n+        RustcDefaultCalls::print_crate_info(sess, cfg, Some(input), odir, ofile)\n             .and_then(|| RustcDefaultCalls::list_metadata(sess, matches, input))\n     }\n \n@@ -579,6 +593,7 @@ impl RustcDefaultCalls {\n \n \n     fn print_crate_info(sess: &Session,\n+                        cfg: &ast::CrateConfig,\n                         input: Option<&Input>,\n                         odir: &Option<PathBuf>,\n                         ofile: &Option<PathBuf>)\n@@ -631,9 +646,6 @@ impl RustcDefaultCalls {\n                     }\n                 }\n                 PrintRequest::Cfg => {\n-                    let mut cfg = config::build_configuration(&sess);\n-                    target_features::add_configuration(&mut cfg, &sess);\n-\n                     let allow_unstable_cfg = match get_unstable_features_setting() {\n                         UnstableFeatures::Disallow => false,\n                         _ => true,"}, {"sha": "4a656b180f259edc3bd05a49dd4e36f304e71327", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -56,6 +56,7 @@ pub struct CrateReader<'a> {\n     next_crate_num: ast::CrateNum,\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n     local_crate_name: String,\n+    local_crate_config: ast::CrateConfig,\n }\n \n impl<'a> visit::Visitor for LocalCrateReader<'a> {\n@@ -152,13 +153,16 @@ enum LoadResult {\n impl<'a> CrateReader<'a> {\n     pub fn new(sess: &'a Session,\n                cstore: &'a CStore,\n-               local_crate_name: &str) -> CrateReader<'a> {\n+               local_crate_name: &str,\n+               local_crate_config: ast::CrateConfig)\n+               -> CrateReader<'a> {\n         CrateReader {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n             foreign_item_map: FnvHashMap(),\n             local_crate_name: local_crate_name.to_owned(),\n+            local_crate_config: local_crate_config,\n         }\n     }\n \n@@ -561,7 +565,7 @@ impl<'a> CrateReader<'a> {\n                 // NB: Don't use parse::parse_tts_from_source_str because it parses with\n                 // quote_depth > 0.\n                 let mut p = parse::new_parser_from_source_str(&self.sess.parse_sess,\n-                                                              self.sess.opts.cfg.clone(),\n+                                                              self.local_crate_config.clone(),\n                                                               source_name.clone(),\n                                                               body);\n                 let lo = p.span.lo;\n@@ -863,7 +867,7 @@ impl<'a> LocalCrateReader<'a> {\n         LocalCrateReader {\n             sess: sess,\n             cstore: cstore,\n-            creader: CrateReader::new(sess, cstore, local_crate_name),\n+            creader: CrateReader::new(sess, cstore, local_crate_name, krate.config.clone()),\n             krate: krate,\n             definitions: defs,\n         }"}, {"sha": "b2a2dcf90fa4b65fe4f3a1f981ede966b79e702a", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -29,10 +29,14 @@ pub struct MacroLoader<'a> {\n }\n \n impl<'a> MacroLoader<'a> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> MacroLoader<'a> {\n+    pub fn new(sess: &'a Session,\n+               cstore: &'a CStore,\n+               crate_name: &str,\n+               crate_config: ast::CrateConfig)\n+               -> MacroLoader<'a> {\n         MacroLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess, cstore, crate_name),\n+            reader: CrateReader::new(sess, cstore, crate_name, crate_config),\n         }\n     }\n }"}, {"sha": "fb68eae96476f718d3bd19976e80ddb989b3952a", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -49,7 +49,7 @@ pub fn load_plugins(sess: &Session,\n                     krate: &ast::Crate,\n                     crate_name: &str,\n                     addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader::new(sess, cstore, crate_name);\n+    let mut loader = PluginLoader::new(sess, cstore, crate_name, krate.config.clone());\n \n     // do not report any error now. since crate attributes are\n     // not touched by expansion, every use of plugin without\n@@ -90,10 +90,14 @@ pub fn load_plugins(sess: &Session,\n }\n \n impl<'a> PluginLoader<'a> {\n-    fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> PluginLoader<'a> {\n+    fn new(sess: &'a Session,\n+           cstore: &'a CStore,\n+           crate_name: &str,\n+           crate_config: ast::CrateConfig)\n+            -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess, cstore, crate_name),\n+            reader: CrateReader::new(sess, cstore, crate_name, crate_config),\n             plugins: vec![],\n         }\n     }"}, {"sha": "10736d2c827cdf8f59a207156332bd1a0e81886f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -119,7 +119,6 @@ pub fn run_core(search_paths: SearchPaths,\n         lint_cap: Some(lint::Allow),\n         externs: externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),\n-        cfg: config::parse_cfgspecs(cfgs),\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         ..config::basic_options().clone()\n@@ -138,7 +137,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                        codemap, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n-    let mut cfg = config::build_configuration(&sess);\n+    let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs));\n     target_features::add_configuration(&mut cfg, &sess);\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));"}, {"sha": "7d1dbbe5dc07d9d645656ff7cb35bf1d6165ed23", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -90,8 +90,7 @@ pub fn run(input: &str,\n                                        cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n-    let mut cfg = config::build_configuration(&sess);\n-    cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n+    let cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n@@ -247,8 +246,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let outdir = Mutex::new(TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\"));\n     let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     let mut control = driver::CompileController::basic();\n-    let mut cfg = config::build_configuration(&sess);\n-    cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n+    let cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n     let out = Some(outdir.lock().unwrap().path().to_path_buf());\n \n     if no_run {"}, {"sha": "35043bdaddf21fcae3dccae36c4283939a494fec", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -52,7 +52,7 @@ fn main() {\n \n fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     let mut opts = basic_options();\n-    opts.output_types = OutputTypes::new([(OutputType::Exe, None)]);\n+    opts.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n     opts.maybe_sysroot = Some(sysroot);\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n@@ -65,7 +65,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n \n fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     let (sess, cstore) = basic_sess(sysroot);\n-    let cfg = build_configuration(&sess);\n+    let cfg = build_configuration(&sess, vec![]);\n     let control = CompileController::basic();\n \n     compile_input(&sess, &cstore,"}, {"sha": "775ba38004e3a195375194b4a3b48e5993449549", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65eb024542835c0235c31ef0e2381d155c797b03/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65eb024542835c0235c31ef0e2381d155c797b03/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=65eb024542835c0235c31ef0e2381d155c797b03", "patch": "@@ -24,6 +24,7 @@ extern crate rustc_errors as errors;\n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n use rustc_driver::{driver, CompilerCalls, Compilation};\n+use syntax::ast;\n \n use std::path::PathBuf;\n \n@@ -35,6 +36,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n+                      _: &ast::CrateConfig,\n                       _: &errors::registry::Registry,\n                       _: config::ErrorOutputType)\n                       -> Compilation {\n@@ -45,6 +47,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn late_callback(&mut self,\n                      _: &getopts::Matches,\n                      _: &Session,\n+                     _: &ast::CrateConfig,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n@@ -62,6 +65,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn no_input(&mut self,\n                 _: &getopts::Matches,\n                 _: &config::Options,\n+                _: &ast::CrateConfig,\n                 _: &Option<PathBuf>,\n                 _: &Option<PathBuf>,\n                 _: &errors::registry::Registry)"}]}