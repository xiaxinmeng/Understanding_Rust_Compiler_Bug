{"sha": "9709a438721d679572f0f7c389cd1fa60922fbef", "node_id": "C_kwDOAAsO6NoAKDk3MDlhNDM4NzIxZDY3OTU3MmYwZjdjMzg5Y2QxZmE2MDkyMmZiZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T22:15:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T22:15:27Z"}, "message": "Auto merge of #106228 - matthiaskrgr:rollup-jsznhww, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #104402 (Move `ReentrantMutex` to `std::sync`)\n - #104493 (available_parallelism: Gracefully handle zero value cfs_period_us)\n - #105359 (Make sentinel value configurable in `library/std/src/sys_common/thread_local_key.rs`)\n - #105497 (Clarify `catch_unwind` docs about panic hooks)\n - #105570 (Properly calculate best failure in macro matching)\n - #105702 (Format only modified files)\n - #105998 (adjust message on non-unwinding panic)\n - #106161 (Iterator::find: link to Iterator::position in docs for discoverability)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ca63a7f825245e371065234fc7764f5d4658a72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca63a7f825245e371065234fc7764f5d4658a72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9709a438721d679572f0f7c389cd1fa60922fbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9709a438721d679572f0f7c389cd1fa60922fbef", "html_url": "https://github.com/rust-lang/rust/commit/9709a438721d679572f0f7c389cd1fa60922fbef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9709a438721d679572f0f7c389cd1fa60922fbef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270c94e484e19764a2832ef918c95224eb3f17c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/270c94e484e19764a2832ef918c95224eb3f17c7", "html_url": "https://github.com/rust-lang/rust/commit/270c94e484e19764a2832ef918c95224eb3f17c7"}, {"sha": "89ccd704f04f86e70a58e8ae6867656503e4b89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ccd704f04f86e70a58e8ae6867656503e4b89c", "html_url": "https://github.com/rust-lang/rust/commit/89ccd704f04f86e70a58e8ae6867656503e4b89c"}], "stats": {"total": 244, "additions": 213, "deletions": 31}, "files": [{"sha": "40aa64d9d40401719d595629467aaa9aa7544f44", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -43,7 +43,7 @@ pub(super) fn failed_to_match_macro<'cx>(\n         return result;\n     }\n \n-    let Some((token, label, remaining_matcher)) = tracker.best_failure else {\n+    let Some(BestFailure { token, msg: label, remaining_matcher, .. }) = tracker.best_failure else {\n         return DummyResult::any(sp);\n     };\n \n@@ -95,11 +95,24 @@ struct CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n     cx: &'a mut ExtCtxt<'cx>,\n     remaining_matcher: Option<&'matcher MatcherLoc>,\n     /// Which arm's failure should we report? (the one furthest along)\n-    best_failure: Option<(Token, &'static str, MatcherLoc)>,\n+    best_failure: Option<BestFailure>,\n     root_span: Span,\n     result: Option<Box<dyn MacResult + 'cx>>,\n }\n \n+struct BestFailure {\n+    token: Token,\n+    position_in_tokenstream: usize,\n+    msg: &'static str,\n+    remaining_matcher: MatcherLoc,\n+}\n+\n+impl BestFailure {\n+    fn is_better_position(&self, position: usize) -> bool {\n+        position > self.position_in_tokenstream\n+    }\n+}\n+\n impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n     fn before_match_loc(&mut self, parser: &TtParser, matcher: &'matcher MatcherLoc) {\n         if self.remaining_matcher.is_none()\n@@ -119,18 +132,25 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx,\n                     \"should not collect detailed info for successful macro match\",\n                 );\n             }\n-            Failure(token, msg) => match self.best_failure {\n-                Some((ref best_token, _, _)) if best_token.span.lo() >= token.span.lo() => {}\n-                _ => {\n-                    self.best_failure = Some((\n-                        token.clone(),\n+            Failure(token, approx_position, msg) => {\n+                debug!(?token, ?msg, \"a new failure of an arm\");\n+\n+                if self\n+                    .best_failure\n+                    .as_ref()\n+                    .map_or(true, |failure| failure.is_better_position(*approx_position))\n+                {\n+                    self.best_failure = Some(BestFailure {\n+                        token: token.clone(),\n+                        position_in_tokenstream: *approx_position,\n                         msg,\n-                        self.remaining_matcher\n+                        remaining_matcher: self\n+                            .remaining_matcher\n                             .expect(\"must have collected matcher already\")\n                             .clone(),\n-                    ))\n+                    })\n                 }\n-            },\n+            }\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n                 self.cx.struct_span_err(span, msg).emit();"}, {"sha": "df1c1834c1dc0d48b64c14c13e3c3ae950acd97a", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -310,7 +310,8 @@ pub(crate) enum ParseResult<T> {\n     Success(T),\n     /// Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected\n     /// end of macro invocation. Otherwise, it indicates that no rules expected the given token.\n-    Failure(Token, &'static str),\n+    /// The usize is the approximate position of the token in the input token stream.\n+    Failure(Token, usize, &'static str),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(rustc_span::Span, String),\n     ErrorReported(ErrorGuaranteed),\n@@ -455,6 +456,7 @@ impl TtParser {\n         &mut self,\n         matcher: &'matcher [MatcherLoc],\n         token: &Token,\n+        approx_position: usize,\n         track: &mut T,\n     ) -> Option<NamedParseResult> {\n         // Matcher positions that would be valid if the macro invocation was over now. Only\n@@ -598,6 +600,7 @@ impl TtParser {\n                         token::Eof,\n                         if token.span.is_dummy() { token.span } else { token.span.shrink_to_hi() },\n                     ),\n+                    approx_position,\n                     \"missing tokens in macro arguments\",\n                 ),\n             })\n@@ -627,7 +630,12 @@ impl TtParser {\n \n             // Process `cur_mps` until either we have finished the input or we need to get some\n             // parsing from the black-box parser done.\n-            let res = self.parse_tt_inner(matcher, &parser.token, track);\n+            let res = self.parse_tt_inner(\n+                matcher,\n+                &parser.token,\n+                parser.approx_token_stream_pos(),\n+                track,\n+            );\n             if let Some(res) = res {\n                 return res;\n             }\n@@ -642,6 +650,7 @@ impl TtParser {\n                     // parser: syntax error.\n                     return Failure(\n                         parser.token.clone(),\n+                        parser.approx_token_stream_pos(),\n                         \"no rules expected this token in macro call\",\n                     );\n                 }"}, {"sha": "fbb806fe81b2fb01cbde5c36b0762ed81811488c", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -326,8 +326,8 @@ pub(super) fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n \n                 return Ok((i, named_matches));\n             }\n-            Failure(_, _) => {\n-                trace!(\"Failed to match arm, trying the next one\");\n+            Failure(_, reached_position, _) => {\n+                trace!(%reached_position, \"Failed to match arm, trying the next one\");\n                 // Try the next arm.\n             }\n             Error(_, _) => {\n@@ -432,7 +432,7 @@ pub fn compile_declarative_macro(\n     let argument_map =\n         match tt_parser.parse_tt(&mut Cow::Owned(parser), &argument_gram, &mut NoopTracker) {\n             Success(m) => m,\n-            Failure(token, msg) => {\n+            Failure(token, _, msg) => {\n                 let s = parse_failure_msg(&token);\n                 let sp = token.span.substitute_dummy(def.span);\n                 let mut err = sess.parse_sess.span_diagnostic.struct_span_err(sp, &s);"}, {"sha": "919e71bd1155c629bc1f3073c4491fba96da8706", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -1499,6 +1499,10 @@ impl<'a> Parser<'a> {\n     pub fn clear_expected_tokens(&mut self) {\n         self.expected_tokens.clear();\n     }\n+\n+    pub fn approx_token_stream_pos(&self) -> usize {\n+        self.token_cursor.num_next_calls\n+    }\n }\n \n pub(crate) fn make_unclosed_delims_error("}, {"sha": "f9f24f68e38ed1666d39508f3fc23e7d702906c8", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -2654,7 +2654,10 @@ pub trait Iterator {\n     /// argument is a double reference. You can see this effect in the\n     /// examples below, with `&&x`.\n     ///\n+    /// If you need the index of the element, see [`position()`].\n+    ///\n     /// [`Some(element)`]: Some\n+    /// [`position()`]: Iterator::position\n     ///\n     /// # Examples\n     ///"}, {"sha": "14bfef4c7aad9bbefea6e896a749d2a67d8480f3", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -10,9 +10,8 @@ use crate::fmt;\n use crate::fs::File;\n use crate::io::{self, BufReader, IoSlice, IoSliceMut, LineWriter, Lines};\n use crate::sync::atomic::{AtomicBool, Ordering};\n-use crate::sync::{Arc, Mutex, MutexGuard, OnceLock};\n+use crate::sync::{Arc, Mutex, MutexGuard, OnceLock, ReentrantMutex, ReentrantMutexGuard};\n use crate::sys::stdio;\n-use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n \n type LocalStream = Arc<Mutex<Vec<u8>>>;\n "}, {"sha": "9fa8f5702a8438b59c756f161d8a91df943f5337", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -114,6 +114,9 @@ where\n /// aborting the process as well. This function *only* catches unwinding panics,\n /// not those that abort the process.\n ///\n+/// Note that if a custom panic hook has been set, it will be invoked before\n+/// the panic is caught, before unwinding.\n+///\n /// Also note that unwinding into Rust code with a foreign exception (e.g.\n /// an exception thrown from C++ code) is undefined behavior.\n ///"}, {"sha": "49c2f81403a9bfc037c22d691d81c83b79c9c4fd", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -699,7 +699,11 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n+        if !can_unwind {\n+            rtprintpanic!(\"thread caused non-unwinding panic. aborting.\\n\");\n+        } else {\n+            rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n+        }\n         crate::sys::abort_internal();\n     }\n "}, {"sha": "ba20bab87a40dacf90ae63288fe060d12166bb84", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -177,6 +177,8 @@ pub use self::lazy_lock::LazyLock;\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n pub use self::once_lock::OnceLock;\n \n+pub(crate) use self::remutex::{ReentrantMutex, ReentrantMutexGuard};\n+\n pub mod mpsc;\n \n mod barrier;\n@@ -187,4 +189,5 @@ mod mutex;\n mod once;\n mod once_lock;\n mod poison;\n+mod remutex;\n mod rwlock;"}, {"sha": "4c054da64714cf1ecd1fe9e136854dde7eb08c0d", "filename": "library/std/src/sync/remutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fremutex.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "previous_filename": "library/std/src/sys_common/remutex.rs"}, {"sha": "fc553081d42278b3db24ef2a331534bdab96ffdc", "filename": "library/std/src/sync/remutex/tests.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fremutex%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsync%2Fremutex%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fremutex%2Ftests.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -1,6 +1,6 @@\n+use super::{ReentrantMutex, ReentrantMutexGuard};\n use crate::cell::RefCell;\n use crate::sync::Arc;\n-use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n use crate::thread;\n \n #[test]", "previous_filename": "library/std/src/sys_common/remutex/tests.rs"}, {"sha": "b251949bda207e1bf0fcfa99750e7311f4412dce", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -505,7 +505,7 @@ mod cgroups {\n                     let limit = raw_quota.next()?;\n                     let period = raw_quota.next()?;\n                     match (limit.parse::<usize>(), period.parse::<usize>()) {\n-                        (Ok(limit), Ok(period)) => {\n+                        (Ok(limit), Ok(period)) if period > 0 => {\n                             quota = quota.min(limit / period);\n                         }\n                         _ => {}\n@@ -565,7 +565,7 @@ mod cgroups {\n                 let period = parse_file(\"cpu.cfs_period_us\");\n \n                 match (limit, period) {\n-                    (Some(limit), Some(period)) => quota = quota.min(limit / period),\n+                    (Some(limit), Some(period)) if period > 0 => quota = quota.min(limit / period),\n                     _ => {}\n                 }\n "}, {"sha": "73da1ce066ca62721c79329eec337bc12c063549", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -27,7 +27,6 @@ pub mod lazy_box;\n pub mod memchr;\n pub mod once;\n pub mod process;\n-pub mod remutex;\n pub mod thread;\n pub mod thread_info;\n pub mod thread_local_dtor;"}, {"sha": "2672a2a75b017bc4cec15931f3f68cfad622f7ea", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -117,10 +117,14 @@ pub struct Key {\n /// This value specifies no destructor by default.\n pub const INIT: StaticKey = StaticKey::new(None);\n \n+// Define a sentinel value that is unlikely to be returned\n+// as a TLS key (but it may be returned).\n+const KEY_SENTVAL: usize = 0;\n+\n impl StaticKey {\n     #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]\n     pub const fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> StaticKey {\n-        StaticKey { key: atomic::AtomicUsize::new(0), dtor }\n+        StaticKey { key: atomic::AtomicUsize::new(KEY_SENTVAL), dtor }\n     }\n \n     /// Gets the value associated with this TLS key\n@@ -144,31 +148,36 @@ impl StaticKey {\n     #[inline]\n     unsafe fn key(&self) -> imp::Key {\n         match self.key.load(Ordering::Relaxed) {\n-            0 => self.lazy_init() as imp::Key,\n+            KEY_SENTVAL => self.lazy_init() as imp::Key,\n             n => n as imp::Key,\n         }\n     }\n \n     unsafe fn lazy_init(&self) -> usize {\n-        // POSIX allows the key created here to be 0, but the compare_exchange\n-        // below relies on using 0 as a sentinel value to check who won the\n+        // POSIX allows the key created here to be KEY_SENTVAL, but the compare_exchange\n+        // below relies on using KEY_SENTVAL as a sentinel value to check who won the\n         // race to set the shared TLS key. As far as I know, there is no\n         // guaranteed value that cannot be returned as a posix_key_create key,\n         // so there is no value we can initialize the inner key with to\n         // prove that it has not yet been set. As such, we'll continue using a\n-        // value of 0, but with some gyrations to make sure we have a non-0\n+        // value of KEY_SENTVAL, but with some gyrations to make sure we have a non-KEY_SENTVAL\n         // value returned from the creation routine.\n         // FIXME: this is clearly a hack, and should be cleaned up.\n         let key1 = imp::create(self.dtor);\n-        let key = if key1 != 0 {\n+        let key = if key1 as usize != KEY_SENTVAL {\n             key1\n         } else {\n             let key2 = imp::create(self.dtor);\n             imp::destroy(key1);\n             key2\n         };\n-        rtassert!(key != 0);\n-        match self.key.compare_exchange(0, key as usize, Ordering::SeqCst, Ordering::SeqCst) {\n+        rtassert!(key as usize != KEY_SENTVAL);\n+        match self.key.compare_exchange(\n+            KEY_SENTVAL,\n+            key as usize,\n+            Ordering::SeqCst,\n+            Ordering::SeqCst,\n+        ) {\n             // The CAS succeeded, so we've created the actual key\n             Ok(_) => key as usize,\n             // If someone beat us to the punch, use their key instead"}, {"sha": "4105fa5ec96006ac611439266af31ba70809084d", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -15,6 +15,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - Several unsupported `./configure` options have been removed: `optimize`, `parallel-compiler`. These can still be enabled with `--set`, although it isn't recommended.\n - `remote-test-server`'s `verbose` argument has been removed in favor of the `--verbose` flag\n - `remote-test-server`'s `remote` argument has been removed in favor of the `--bind` flag. Use `--bind 0.0.0.0:12345` to replicate the behavior of the `remote` argument.\n+- `x.py fmt` now formats only files modified between the merge-base of HEAD and the last commit in the master branch of the rust-lang repository and the current working directory. To restore old behaviour, use `x.py fmt .`. The check mode is not affected by this change. [#105702](https://github.com/rust-lang/rust/pull/105702)\n \n ### Non-breaking changes\n "}, {"sha": "8e363ee1290eea83be0b87b9e3c79365c370a218", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -94,6 +94,7 @@ fn clean_default(build: &Build, all: bool) {\n         rm_rf(&build.out.join(\"tmp\"));\n         rm_rf(&build.out.join(\"dist\"));\n         rm_rf(&build.out.join(\"bootstrap\"));\n+        rm_rf(&build.out.join(\"rustfmt.stamp\"));\n \n         for host in &build.hosts {\n             let entries = match build.out.join(host.triple).read_dir() {"}, {"sha": "b49322e3c028fc07d5eb1a54702a08d97d7e59be", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, t};\n+use crate::util::{output, program_out_of_date, t};\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -44,6 +44,90 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     }\n }\n \n+fn get_rustfmt_version(build: &Builder<'_>) -> Option<(String, PathBuf)> {\n+    let stamp_file = build.out.join(\"rustfmt.stamp\");\n+\n+    let mut cmd = Command::new(match build.initial_rustfmt() {\n+        Some(p) => p,\n+        None => return None,\n+    });\n+    cmd.arg(\"--version\");\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(_) => return None,\n+    };\n+    if !output.status.success() {\n+        return None;\n+    }\n+    Some((String::from_utf8(output.stdout).unwrap(), stamp_file))\n+}\n+\n+/// Return whether the format cache can be reused.\n+fn verify_rustfmt_version(build: &Builder<'_>) -> bool {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return false;};\n+    !program_out_of_date(&stamp_file, &version)\n+}\n+\n+/// Updates the last rustfmt version used\n+fn update_rustfmt_version(build: &Builder<'_>) {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return;};\n+    t!(std::fs::write(stamp_file, version))\n+}\n+\n+/// Returns the files modified between the `merge-base` of HEAD and\n+/// rust-lang/master and what is now on the disk.\n+///\n+/// Returns `None` if all files should be formatted.\n+fn get_modified_files(build: &Builder<'_>) -> Option<Vec<String>> {\n+    let Ok(remote) = get_rust_lang_rust_remote() else {return None;};\n+    if !verify_rustfmt_version(build) {\n+        return None;\n+    }\n+    Some(\n+        output(\n+            build\n+                .config\n+                .git()\n+                .arg(\"diff-index\")\n+                .arg(\"--name-only\")\n+                .arg(\"--merge-base\")\n+                .arg(&format!(\"{remote}/master\")),\n+        )\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .collect(),\n+    )\n+}\n+\n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+fn get_rust_lang_rust_remote() -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(\"failed to execute git config command\".to_owned());\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}\n+\n #[derive(serde::Deserialize)]\n struct RustfmtConfig {\n     ignore: Vec<String>,\n@@ -110,6 +194,14 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 // preventing the latter from being formatted.\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n+            if !check && paths.is_empty() {\n+                if let Some(files) = get_modified_files(build) {\n+                    for file in files {\n+                        println!(\"formatting modified file {file}\");\n+                        ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                    }\n+                }\n+            }\n         } else {\n             println!(\"Not in git tree. Skipping git-aware format checks\");\n         }\n@@ -187,4 +279,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     drop(tx);\n \n     thread.join().unwrap();\n+    if !check {\n+        update_rustfmt_version(build);\n+    }\n }"}, {"sha": "bbdd465d5ec96b7896b187427f3e60d29099cdac", "filename": "src/test/ui/macros/best-failure.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.rs?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! number {\n+    (neg false, $self:ident) => { $self };\n+    ($signed:tt => $ty:ty;) => {\n+        number!(neg $signed, $self);\n+        //~^ ERROR no rules expected the token `$`\n+    };\n+}\n+\n+number! { false => u8; }\n+\n+fn main() {}"}, {"sha": "a52fc5e3da6a576d95df1db8812690b0dafe3b62", "filename": "src/test/ui/macros/best-failure.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9709a438721d679572f0f7c389cd1fa60922fbef/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbest-failure.stderr?ref=9709a438721d679572f0f7c389cd1fa60922fbef", "patch": "@@ -0,0 +1,21 @@\n+error: no rules expected the token `$`\n+  --> $DIR/best-failure.rs:4:30\n+   |\n+LL | macro_rules! number {\n+   | ------------------- when calling this macro\n+...\n+LL |         number!(neg $signed, $self);\n+   |                              ^^^^^ no rules expected this token in macro call\n+...\n+LL | number! { false => u8; }\n+   | ------------------------ in this macro invocation\n+   |\n+note: while trying to match meta-variable `$self:ident`\n+  --> $DIR/best-failure.rs:2:17\n+   |\n+LL |     (neg false, $self:ident) => { $self };\n+   |                 ^^^^^^^^^^^\n+   = note: this error originates in the macro `number` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}