{"sha": "647b126da52b3dec1268df13b08c8a14744feb06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2IxMjZkYTUyYjNkZWMxMjY4ZGYxM2IwOGM4YTE0NzQ0ZmViMDY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-19T09:42:26Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-24T07:53:49Z"}, "message": "Switch to ShellExecution instead of full Task", "tree": {"sha": "ece5a90984f04dd962f3283fe2fa67f55a463bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece5a90984f04dd962f3283fe2fa67f55a463bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647b126da52b3dec1268df13b08c8a14744feb06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647b126da52b3dec1268df13b08c8a14744feb06", "html_url": "https://github.com/rust-lang/rust/commit/647b126da52b3dec1268df13b08c8a14744feb06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647b126da52b3dec1268df13b08c8a14744feb06/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3", "html_url": "https://github.com/rust-lang/rust/commit/a43a9103bc9a8c1bf735d51c952bc3b9352a00c3"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "766b0511269842180fa2f4bef1719a2b2f2abb67", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/647b126da52b3dec1268df13b08c8a14744feb06/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/647b126da52b3dec1268df13b08c8a14744feb06/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=647b126da52b3dec1268df13b08c8a14744feb06", "patch": "@@ -116,7 +116,8 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n         env: Object.assign({}, process.env as { [key: string]: string }, { \"RUST_BACKTRACE\": \"short\" }),\n     };\n \n-    const cargoTask = await tasks.buildCargoTask(definition, runnable.label, args, config.cargoRunner);\n+    const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()\n+    const cargoTask = await tasks.buildCargoTask(target, definition, runnable.label, args, config.cargoRunner, true);\n     cargoTask.presentationOptions.clear = true;\n \n     return cargoTask;"}, {"sha": "20ddb3a5d97245477a46d382c467cdcfd2a28680", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 43, "deletions": 40, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/647b126da52b3dec1268df13b08c8a14744feb06/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/647b126da52b3dec1268df13b08c8a14744feb06/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=647b126da52b3dec1268df13b08c8a14744feb06", "patch": "@@ -24,43 +24,28 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         this.config = config;\n     }\n \n-    provideTasks(): vscode.Task[] {\n+    async provideTasks(): Promise<vscode.Task[]> {\n         // Detect Rust tasks. Currently we do not do any actual detection\n         // of tasks (e.g. aliases in .cargo/config) and just return a fixed\n         // set of tasks that always exist. These tasks cannot be removed in\n         // tasks.json - only tweaked.\n \n-        const cargoPath = toolchain.cargoPath();\n-\n-        return [\n+        const defs = [\n             { command: 'build', group: vscode.TaskGroup.Build },\n             { command: 'check', group: vscode.TaskGroup.Build },\n             { command: 'test', group: vscode.TaskGroup.Test },\n             { command: 'clean', group: vscode.TaskGroup.Clean },\n             { command: 'run', group: undefined },\n-        ]\n-            .map(({ command, group }) => {\n-                const vscodeTask = new vscode.Task(\n-                    // The contents of this object end up in the tasks.json entries.\n-                    {\n-                        type: TASK_TYPE,\n-                        command,\n-                    },\n-                    // The scope of the task - workspace or specific folder (global\n-                    // is not supported).\n-                    this.target,\n-                    // The task name, and task source. These are shown in the UI as\n-                    // `${source}: ${name}`, e.g. `rust: cargo build`.\n-                    `cargo ${command}`,\n-                    'rust',\n-                    // What to do when this command is executed.\n-                    new vscode.ShellExecution(cargoPath, [command]),\n-                    // Problem matchers.\n-                    ['$rustc'],\n-                );\n-                vscodeTask.group = group;\n-                return vscodeTask;\n-            });\n+        ];\n+\n+        const tasks: vscode.Task[] = [];\n+        for (const def of defs) {\n+            const vscodeTask = await buildCargoTask(this.target, { type: TASK_TYPE, command: def.command }, `cargo ${def.command}`, [def.command], this.config.cargoRunner);\n+            vscodeTask.group = def.group;\n+            tasks.push(vscodeTask);\n+        }\n+\n+        return tasks;\n     }\n \n     async resolveTask(task: vscode.Task): Promise<vscode.Task | undefined> {\n@@ -73,38 +58,56 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         if (definition.type === TASK_TYPE && definition.command) {\n             const args = [definition.command].concat(definition.args ?? []);\n \n-            return await buildCargoTask(definition, task.name, args, this.config.cargoRunner);\n+            return await buildCargoTask(this.target, definition, task.name, args, this.config.cargoRunner);\n         }\n \n         return undefined;\n     }\n }\n \n-export async function buildCargoTask(definition: CargoTaskDefinition, name: string, args: string[], customRunner?: string): Promise<vscode.Task> {\n+export async function buildCargoTask(\n+    target: vscode.WorkspaceFolder,\n+    definition: CargoTaskDefinition,\n+    name: string,\n+    args: string[],\n+    customRunner?: string,\n+    throwOnError: boolean = false\n+): Promise<vscode.Task> {\n+\n+    let exec: vscode.ShellExecution | undefined = undefined;\n+\n     if (customRunner) {\n-        const runnerCommand = `${customRunner}.createCargoTask`;\n+        const runnerCommand = `${customRunner}.buildShellExecution`;\n         try {\n-            const runnerArgs = { name, args, cwd: definition.cwd, env: definition.env, source: TASK_SOURCE };\n-            const task = await vscode.commands.executeCommand(runnerCommand, runnerArgs);\n-\n-            if (task instanceof vscode.Task) {\n-                return task;\n-            } else if (task) {\n-                log.debug(\"Invalid cargo task\", task);\n-                throw `Invalid task!`;\n+            const runnerArgs = { kind: TASK_TYPE, args, cwd: definition.cwd, env: definition.env };\n+            const customExec = await vscode.commands.executeCommand(runnerCommand, runnerArgs);\n+            if (customExec) {\n+                if (customExec instanceof vscode.ShellExecution) {\n+                    exec = customExec as vscode.ShellExecution;\n+                } else {\n+                    log.debug(\"Invalid cargo ShellExecution\", customExec);\n+                    throw \"Invalid cargo ShellExecution.\";\n+                }\n             }\n             // fallback to default processing\n \n         } catch (e) {\n-            throw `Cargo runner '${customRunner}' failed! ${e}`;\n+            if (throwOnError) throw `Cargo runner '${customRunner}' failed! ${e}`;\n+            // fallback to default processing\n         }\n     }\n \n+    if (!exec) {\n+        exec = new vscode.ShellExecution(toolchain.cargoPath(), args, definition)\n+    }\n+\n     return new vscode.Task(\n         definition,\n+        target,\n         name,\n         TASK_SOURCE,\n-        new vscode.ShellExecution(toolchain.cargoPath(), args, definition),\n+        exec,\n+        ['$rustc']\n     );\n }\n "}]}