{"sha": "6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTdiYzBlYjg2NDhhYmM4NjczYTk3MWM4NWI3NzdhNmJjNjJlMTY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:37Z"}, "message": "Rollup merge of #55781 - pnkfelix:issue-54382-more-precise-spans-for-temps-and-their-drops, r=davidtwco\n\nMore precise spans for temps and their drops\n\nThis PR has two main enhancements:\n\n 1. when possible during code generation for a statement (like `expr();`), pass along the span of a statement, and then attribute the drops of temporaries from that statement to the statement's end-point (which will be the semicolon if it is a statement that is terminating by a semicolon).\n 2. when evaluating a block expression into a MIR temp, use the span of the block's tail expression (rather than the span of whole block including its statements and curly-braces) for the span of the temp.\n\nEach of these individually increases the precision of our diagnostic output; together they combine to make a much clearer picture about the control flow through the spans.\n\nFix #54382", "tree": {"sha": "e41d30f6c079806fa821aaa4bbddf74cb6fd9a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41d30f6c079806fa821aaa4bbddf74cb6fd9a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US1CRBK7hj4Ov3rIwAAdHIIAH6E5L5EPXCLcEx8XC8IDuWU\nuwQ24jlbLP0xf58zRngDokUtX0STT8Hd0uE1hWGIkVvGNt/UAJNzgtIMEBuUF8JC\n9pnJTIcCTbgk7ejN6n1RWbmfEh3iP39ArbKf1wAt0b8Jw+XBe5+Y1PCIEDujey1p\n6BA5HmHBKu4qTmJdjE28/4bVdAQ5KeSKQhvKmA0naSmCNvkNrJ7opMj022yA+1g2\nRbkzruRx7uBxpHQQZo5qrIptouoTFdXTP+IktOqjcJBm6mKUE+PipNFK3i/X9jp6\npAMhb5Qmg/D6tLsQa8TeivAoUM0iW8ptvzlCfvhGIiYGxpV5kgNZa9cNlVT6BmE=\n=uVWK\n-----END PGP SIGNATURE-----\n", "payload": "tree e41d30f6c079806fa821aaa4bbddf74cb6fd9a5a\nparent 97d0d8964ecda2830d60f0c46c1ad8de24af539c\nparent dd6398256ec0bde52722831d6b6cf604c9cdf1ed\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276277 +0100\ncommitter GitHub <noreply@github.com> 1542276277 +0100\n\nRollup merge of #55781 - pnkfelix:issue-54382-more-precise-spans-for-temps-and-their-drops, r=davidtwco\n\nMore precise spans for temps and their drops\n\nThis PR has two main enhancements:\n\n 1. when possible during code generation for a statement (like `expr();`), pass along the span of a statement, and then attribute the drops of temporaries from that statement to the statement's end-point (which will be the semicolon if it is a statement that is terminating by a semicolon).\n 2. when evaluating a block expression into a MIR temp, use the span of the block's tail expression (rather than the span of whole block including its statements and curly-braces) for the span of the temp.\n\nEach of these individually increases the precision of our diagnostic output; together they combine to make a much clearer picture about the control flow through the spans.\n\nFix #54382\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "html_url": "https://github.com/rust-lang/rust/commit/6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d0d8964ecda2830d60f0c46c1ad8de24af539c", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d0d8964ecda2830d60f0c46c1ad8de24af539c", "html_url": "https://github.com/rust-lang/rust/commit/97d0d8964ecda2830d60f0c46c1ad8de24af539c"}, {"sha": "dd6398256ec0bde52722831d6b6cf604c9cdf1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6398256ec0bde52722831d6b6cf604c9cdf1ed", "html_url": "https://github.com/rust-lang/rust/commit/dd6398256ec0bde52722831d6b6cf604c9cdf1ed"}], "stats": {"total": 228, "additions": 194, "deletions": 34}, "files": [{"sha": "2ef71617b7cb615fd771ed42284d31f37b4f193e", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let source_info = this.source_info(span);\n         for stmt in stmts {\n-            let Stmt { kind, opt_destruction_scope } = this.hir.mirror(stmt);\n+            let Stmt { kind, opt_destruction_scope, span: stmt_span } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result: true });\n@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             let si = (scope, source_info);\n                             this.in_scope(si, LintLevel::Inherited, block, |this| {\n                                 let expr = this.hir.mirror(expr);\n-                                this.stmt_expr(block, expr)\n+                                this.stmt_expr(block, expr, Some(stmt_span))\n                             })\n                         }));\n                 }\n@@ -177,17 +177,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let destination_ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n         if let Some(expr) = expr {\n             let tail_result_is_ignored = destination_ty.is_unit() ||\n-                match this.block_context.last() {\n-                    // no context: conservatively assume result is read\n-                    None => false,\n-\n-                    // sub-expression: block result feeds into some computation\n-                    Some(BlockFrame::SubExpr) => false,\n-\n-                    // otherwise: use accumualated is_ignored state.\n-                    Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored }) |\n-                    Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n-                };\n+                this.block_context.currently_ignores_tail_results();\n             this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored });\n \n             unpack!(block = this.into(destination, block, expr));"}, {"sha": "18ce7ae4907085b1d4eb1cd37db59710951dd4a4", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Rvalue::Aggregate(adt, fields))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n-                block = unpack!(this.stmt_expr(block, expr));\n+                block = unpack!(this.stmt_expr(block, expr, None));\n                 block.and(this.unit_rvalue())\n             }\n             ExprKind::Yield { value } => {"}, {"sha": "8f50a1e9a21b9093c746cc71d46c308450c14684", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -10,7 +10,7 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -68,19 +68,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             debug!(\"creating temp {:?} with block_context: {:?}\", local_decl, this.block_context);\n             // Find out whether this temp is being created within the\n             // tail expression of a block whose result is ignored.\n-            for bf in this.block_context.iter().rev() {\n-                match bf {\n-                    BlockFrame::SubExpr => continue,\n-                    BlockFrame::Statement { .. } => break,\n-                    &BlockFrame::TailExpr { tail_result_is_ignored } => {\n-                        local_decl = local_decl.block_tail(BlockTailInfo {\n-                            tail_result_is_ignored\n-                        });\n-                        break;\n-                    }\n-                }\n+            if let Some(tail_info) = this.block_context.currently_in_block_tail() {\n+                local_decl = local_decl.block_tail(tail_info);\n             }\n-\n             this.local_decls.push(local_decl)\n         };\n         if !expr_ty.is_never() {"}, {"sha": "8eb46a0483917c69551c03351cf2c5ee6c0d10f1", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Break { .. }\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::Return { .. } => {\n-                unpack!(block = this.stmt_expr(block, expr));\n+                unpack!(block = this.stmt_expr(block, expr, None));\n                 this.cfg.push_assign_unit(block, source_info, destination);\n                 block.unit()\n             }"}, {"sha": "45235b31539345a4f4e14a73fa55a938524b45b2", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -14,7 +14,18 @@ use hair::*;\n use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n-    pub fn stmt_expr(&mut self, mut block: BasicBlock, expr: Expr<'tcx>) -> BlockAnd<()> {\n+    /// Builds a block of MIR statements to evaluate the HAIR `expr`.\n+    /// If the original expression was an AST statement,\n+    /// (e.g. `some().code(&here());`) then `opt_stmt_span` is the\n+    /// span of that statement (including its semicolon, if any).\n+    /// Diagnostics use this span (which may be larger than that of\n+    /// `expr`) to identify when statement temporaries are dropped.\n+    pub fn stmt_expr(&mut self,\n+                     mut block: BasicBlock,\n+                     expr: Expr<'tcx>,\n+                     opt_stmt_span: Option<StatementSpan>)\n+                     -> BlockAnd<()>\n+    {\n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr.span);\n@@ -29,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             } => {\n                 let value = this.hir.mirror(value);\n                 this.in_scope((region_scope, source_info), lint_level, block, |this| {\n-                    this.stmt_expr(block, value)\n+                    this.stmt_expr(block, value, opt_stmt_span)\n                 })\n             }\n             ExprKind::Assign { lhs, rhs } => {\n@@ -190,9 +201,56 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             _ => {\n                 let expr_ty = expr.ty;\n-                let temp = this.temp(expr.ty.clone(), expr_span);\n+\n+                // Issue #54382: When creating temp for the value of\n+                // expression like:\n+                //\n+                // `{ side_effects(); { let l = stuff(); the_value } }`\n+                //\n+                // it is usually better to focus on `the_value` rather\n+                // than the entirety of block(s) surrounding it.\n+                let mut temp_span = expr_span;\n+                let mut temp_in_tail_of_block = false;\n+                if let ExprKind::Block { body } = expr.kind {\n+                    if let Some(tail_expr) = &body.expr {\n+                        let mut expr = tail_expr;\n+                        while let rustc::hir::ExprKind::Block(subblock, _label) = &expr.node {\n+                            if let Some(subtail_expr) = &subblock.expr {\n+                                expr = subtail_expr\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+                        temp_span = expr.span;\n+                        temp_in_tail_of_block = true;\n+                    }\n+                }\n+\n+                let temp = {\n+                    let mut local_decl = LocalDecl::new_temp(expr.ty.clone(), temp_span);\n+                    if temp_in_tail_of_block {\n+                        if this.block_context.currently_ignores_tail_results() {\n+                            local_decl = local_decl.block_tail(BlockTailInfo {\n+                                tail_result_is_ignored: true\n+                            });\n+                        }\n+                    }\n+                    let temp = this.local_decls.push(local_decl);\n+                    let place = Place::Local(temp);\n+                    debug!(\"created temp {:?} for expr {:?} in block_context: {:?}\",\n+                           temp, expr, this.block_context);\n+                    place\n+                };\n                 unpack!(block = this.into(&temp, block, expr));\n-                unpack!(block = this.build_drop(block, expr_span, temp, expr_ty));\n+\n+                // Attribute drops of the statement's temps to the\n+                // semicolon at the statement's end.\n+                let drop_point = this.hir.tcx().sess.source_map().end_point(match opt_stmt_span {\n+                    None => expr_span,\n+                    Some(StatementSpan(span)) => span,\n+                });\n+\n+                unpack!(block = this.build_drop(block, drop_point, temp, expr_ty));\n                 block.unit()\n             }\n         }"}, {"sha": "a01f8940a948aedebc02717ad1cfa26f216d7ba0", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -336,6 +336,9 @@ impl BlockFrame {\n     }\n  }\n \n+#[derive(Debug)]\n+struct BlockContext(Vec<BlockFrame>);\n+\n struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     hir: Cx<'a, 'gcx, 'tcx>,\n     cfg: CFG<'tcx>,\n@@ -359,7 +362,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// start just throwing new entries onto that vector in order to\n     /// distinguish the context of EXPR1 from the context of EXPR2 in\n     /// `{ STMTS; EXPR1 } + EXPR2`\n-    block_context: Vec<BlockFrame>,\n+    block_context: BlockContext,\n \n     /// The current unsafe block in scope, even if it is hidden by\n     /// a PushUnsafeBlock\n@@ -409,6 +412,55 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl BlockContext {\n+    fn new() -> Self { BlockContext(vec![]) }\n+    fn push(&mut self, bf: BlockFrame) { self.0.push(bf); }\n+    fn pop(&mut self) -> Option<BlockFrame> { self.0.pop() }\n+\n+    /// Traverses the frames on the BlockContext, searching for either\n+    /// the first block-tail expression frame with no intervening\n+    /// statement frame.\n+    ///\n+    /// Notably, this skips over `SubExpr` frames; this method is\n+    /// meant to be used in the context of understanding the\n+    /// relationship of a temp (created within some complicated\n+    /// expression) with its containing expression, and whether the\n+    /// value of that *containing expression* (not the temp!) is\n+    /// ignored.\n+    fn currently_in_block_tail(&self) -> Option<BlockTailInfo> {\n+        for bf in self.0.iter().rev() {\n+            match bf {\n+                BlockFrame::SubExpr => continue,\n+                BlockFrame::Statement { .. } => break,\n+                &BlockFrame::TailExpr { tail_result_is_ignored } =>\n+                    return Some(BlockTailInfo { tail_result_is_ignored })\n+            }\n+        }\n+\n+        return None;\n+    }\n+\n+    /// Looks at the topmost frame on the BlockContext and reports\n+    /// whether its one that would discard a block tail result.\n+    ///\n+    /// Unlike `currently_within_ignored_tail_expression`, this does\n+    /// *not* skip over `SubExpr` frames: here, we want to know\n+    /// whether the block result itself is discarded.\n+    fn currently_ignores_tail_results(&self) -> bool {\n+        match self.0.last() {\n+            // no context: conservatively assume result is read\n+            None => false,\n+\n+            // sub-expression: block result feeds into some computation\n+            Some(BlockFrame::SubExpr) => false,\n+\n+            // otherwise: use accumulated is_ignored state.\n+            Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored }) |\n+            Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n+        }\n+    }\n+}\n+\n #[derive(Debug)]\n enum LocalsForNode {\n     /// In the usual case, a node-id for an identifier maps to at most\n@@ -764,7 +816,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             fn_span: span,\n             arg_count,\n             scopes: vec![],\n-            block_context: vec![],\n+            block_context: BlockContext::new(),\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n             source_scope_local_data: IndexVec::new(),"}, {"sha": "d56ddcb494406ba666beb0f0c6d7e91539675a68", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -57,6 +57,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = cx.tcx.hir.node_to_hir_id(stmt.node.id());\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n+        let stmt_span = StatementSpan(cx.tcx.hir.span(stmt.node.id()));\n         match stmt.node {\n             hir::StmtKind::Expr(ref expr, _) |\n             hir::StmtKind::Semi(ref expr, _) => {\n@@ -69,6 +70,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         expr: expr.to_ref(),\n                     },\n                     opt_destruction_scope: opt_dxn_ext,\n+                    span: stmt_span,\n                 })))\n             }\n             hir::StmtKind::Decl(ref decl, _) => {\n@@ -111,6 +113,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 lint_level: cx.lint_level_of(local.id),\n                             },\n                             opt_destruction_scope: opt_dxn_ext,\n+                            span: stmt_span,\n                         })));\n                     }\n                 }"}, {"sha": "eb9e02ea1c2e685de8c94865a782a31a097833e1", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -72,10 +72,14 @@ pub enum StmtRef<'tcx> {\n     Mirror(Box<Stmt<'tcx>>),\n }\n \n+#[derive(Clone, Debug)]\n+pub struct StatementSpan(pub Span);\n+\n #[derive(Clone, Debug)]\n pub struct Stmt<'tcx> {\n     pub kind: StmtKind<'tcx>,\n     pub opt_destruction_scope: Option<region::Scope>,\n+    pub span: StatementSpan,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "c308562c0cc76a87e8543bd45af0b84a9c215711", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -0,0 +1,20 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54382-use-span-of-tail-of-block.rs:7:29\n+   |\n+LL |             D(\"other\").next(&_thing1)\n+   |             ----------------^^^^^^^^-\n+   |             |               |\n+   |             |               borrowed value does not live long enough\n+   |             a temporary with access to the borrow is created here ...\n+LL |         }\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "99eafe0e9d18f2832cf1ef815ffe648ffb88f42d", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -0,0 +1,28 @@\n+fn main() {\n+    {\n+        let mut _thing1 = D(Box::new(\"thing1\"));\n+        {\n+            let _thing2 = D(\"thing2\");\n+            side_effects();\n+            D(\"other\").next(&_thing1)\n+        }\n+    }\n+\n+    ;\n+}\n+\n+#[derive(Debug)]\n+struct D<T: std::fmt::Debug>(T);\n+\n+impl<T: std::fmt::Debug>  Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"dropping {:?})\", self);\n+    }\n+}\n+\n+impl<T: std::fmt::Debug> D<T> {\n+    fn next<U: std::fmt::Debug>(&self, _other: U) -> D<U> { D(_other) }\n+    fn end(&self) { }\n+}\n+\n+fn side_effects() { }"}, {"sha": "eeba7d6bb445fa8b68adfc52ffbd500f069ae7cb", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ca7bc0eb8648abc8673a971c85b777a6bc62e16/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=6ca7bc0eb8648abc8673a971c85b777a6bc62e16", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54382-use-span-of-tail-of-block.rs:7:30\n+   |\n+LL |             D(\"other\").next(&_thing1)\n+   |                              ^^^^^^^ borrowed value does not live long enough\n+LL |         }\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}