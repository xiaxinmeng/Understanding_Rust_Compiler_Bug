{"sha": "e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMGExZTBiNzllMmIyYzBjMjBhOTZlNTM0MWUzYTM1ZjQ2Zjk5Yjc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-10T14:00:58Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-10T17:06:01Z"}, "message": "Setup Env in world", "tree": {"sha": "b363f9ff36e14e7f90808e79ac36a35f96b50438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b363f9ff36e14e7f90808e79ac36a35f96b50438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "html_url": "https://github.com/rust-lang/rust/commit/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f064cca7651eaf2980fcfa27618d99c633a589", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f064cca7651eaf2980fcfa27618d99c633a589", "html_url": "https://github.com/rust-lang/rust/commit/22f064cca7651eaf2980fcfa27618d99c633a589"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "b46320304380d365e8a3ae40429d6c0274d0a496", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSourceId, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -162,6 +162,7 @@ impl ProjectWorkspace {\n     pub fn to_crate_graph(\n         &self,\n         default_cfg_options: &CfgOptions,\n+        outdirs: &FxHashMap<String, (ExternSourceId, String)>,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n@@ -185,6 +186,8 @@ impl ProjectWorkspace {\n                             }\n                             opts\n                         };\n+\n+                        // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         crates.insert(\n                             crate_id,\n                             crate_graph.add_crate_root(\n@@ -231,12 +234,17 @@ impl ProjectWorkspace {\n                             opts\n                         };\n \n+                        let mut env = Env::default();\n+                        if let Some((id, path)) = outdirs.get(krate.name(&sysroot)) {\n+                            env.set_extern_path(\"OUT_DIR\", &path, *id);\n+                        }\n+\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n                             Some(krate.name(&sysroot).to_string()),\n                             cfg_options,\n-                            Env::default(),\n+                            env,\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n                     }\n@@ -275,12 +283,16 @@ impl ProjectWorkspace {\n                                 opts.insert_features(pkg.features(&cargo).iter().map(Into::into));\n                                 opts\n                             };\n+                            let mut env = Env::default();\n+                            if let Some((id, path)) = outdirs.get(pkg.name(&cargo)) {\n+                                env.set_extern_path(\"OUT_DIR\", &path, *id);\n+                            }\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n                                 Some(pkg.name(&cargo).to_string()),\n                                 cfg_options,\n-                                Env::default(),\n+                                env,\n                             );\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);"}, {"sha": "403f353f19aa6f4c5cd91f50a708c58086274061", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "patch": "@@ -52,7 +52,10 @@ pub(crate) fn load_cargo(\n         opts\n     };\n \n-    let crate_graph = ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n+    // FIXME: outdirs?\n+    let outdirs = FxHashMap::default();\n+\n+    let crate_graph = ws.to_crate_graph(&default_cfg_options, &outdirs, &mut |path: &Path| {\n         let vfs_file = vfs.load(path);\n         log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n         vfs_file.map(vfs_file_to_id)"}, {"sha": "b64140b747dd1dc7a566740e85a353355948ddc7", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=e00a1e0b79e2b2c0c20a96e5341e3a35f46f99b7", "patch": "@@ -26,6 +26,8 @@ use crate::{\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n };\n+use ra_db::ExternSourceId;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n #[derive(Debug, Clone)]\n pub struct Options {\n@@ -98,6 +100,19 @@ impl WorldState {\n                 RootEntry::new(pkg_root.path().clone(), filter.into_vfs_filter())\n             }));\n         }\n+\n+        let extern_dirs: FxHashSet<_> =\n+            additional_out_dirs.iter().map(|(_, path)| (PathBuf::from(path))).collect();\n+        let mut extern_source_roots = FxHashMap::default();\n+\n+        roots.extend(additional_out_dirs.iter().map(|(_, path)| {\n+            let mut filter = RustPackageFilterBuilder::default().set_member(false);\n+            for glob in exclude_globs.iter() {\n+                filter = filter.exclude(glob.clone());\n+            }\n+            RootEntry::new(PathBuf::from(&path), filter.into_vfs_filter())\n+        }));\n+\n         let (task_sender, task_receiver) = unbounded();\n         let task_sender = Box::new(move |t| task_sender.send(t).unwrap());\n         let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender, watch);\n@@ -107,6 +122,11 @@ impl WorldState {\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n+\n+            // FIXME: add path2root in vfs to simpily this logic\n+            if extern_dirs.contains(&vfs_root_path) {\n+                extern_source_roots.insert(vfs_root_path, ExternSourceId(r.0));\n+            }\n         }\n \n         // FIXME: Read default cfgs from config\n@@ -124,11 +144,20 @@ impl WorldState {\n             vfs_file.map(|f| FileId(f.0))\n         };\n \n-        workspaces.iter().map(|ws| ws.to_crate_graph(&default_cfg_options, &mut load)).for_each(\n-            |graph| {\n+        let mut outdirs = FxHashMap::default();\n+        for (name, path) in additional_out_dirs {\n+            let path = PathBuf::from(&path);\n+            if let Some(id) = extern_source_roots.get(&path) {\n+                outdirs.insert(name, (id.clone(), path.to_string_lossy().replace(\"\\\\\", \"/\")));\n+            }\n+        }\n+\n+        workspaces\n+            .iter()\n+            .map(|ws| ws.to_crate_graph(&default_cfg_options, &outdirs, &mut load))\n+            .for_each(|graph| {\n                 crate_graph.extend(graph);\n-            },\n-        );\n+            });\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation"}]}