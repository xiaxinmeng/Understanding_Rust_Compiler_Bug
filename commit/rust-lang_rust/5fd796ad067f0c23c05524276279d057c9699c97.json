{"sha": "5fd796ad067f0c23c05524276279d057c9699c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDc5NmFkMDY3ZjBjMjNjMDU1MjQyNzYyNzlkMDU3Yzk2OTljOTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-20T00:19:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:51:33Z"}, "message": "rustc: Combine resolver outputs into a single struct", "tree": {"sha": "af1da11f98070e5b6f566f50cede01139657ce9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1da11f98070e5b6f566f50cede01139657ce9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd796ad067f0c23c05524276279d057c9699c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd796ad067f0c23c05524276279d057c9699c97", "html_url": "https://github.com/rust-lang/rust/commit/5fd796ad067f0c23c05524276279d057c9699c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd796ad067f0c23c05524276279d057c9699c97/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb353f050acd1d18bafcf570d7be1459cf454858", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb353f050acd1d18bafcf570d7be1459cf454858", "html_url": "https://github.com/rust-lang/rust/commit/fb353f050acd1d18bafcf570d7be1459cf454858"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "599601b35296440e2c15598f490171e1d7726460", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5fd796ad067f0c23c05524276279d057c9699c97", "patch": "@@ -1199,7 +1199,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n         arenas: &'tcx AllArenas,\n-        resolutions: ty::Resolutions,\n+        resolutions: ty::ResolverOutputs,\n         hir: hir_map::Map<'tcx>,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n         crate_name: &str,"}, {"sha": "e1e88ffd8ea63804867e2f59289cda31045ea3d8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5fd796ad067f0c23c05524276279d057c9699c97", "patch": "@@ -119,8 +119,8 @@ mod sty;\n \n // Data types\n \n-#[derive(Clone)]\n-pub struct Resolutions {\n+pub struct ResolverOutputs {\n+    pub definitions: hir_map::Definitions,\n     pub extern_crate_map: NodeMap<CrateNum>,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,"}, {"sha": "18df4ee51b79b923a320375819fec65ee0933a0a", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=5fd796ad067f0c23c05524276279d057c9699c97", "patch": "@@ -6,12 +6,11 @@ use log::{info, warn, log_enabled};\n use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::lowering::lower_crate;\n-use rustc::hir::map::Definitions;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n use rustc::middle::cstore::{CrateStore, MetadataLoader};\n-use rustc::ty::{self, AllArenas, Resolutions, TyCtxt, GlobalCtxt};\n+use rustc::ty::{self, AllArenas, ResolverOutputs, TyCtxt, GlobalCtxt};\n use rustc::ty::steal::Steal;\n use rustc::traits;\n use rustc::util::common::{time, ErrorReported};\n@@ -47,12 +46,10 @@ use syntax_ext;\n use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n \n+use std::{env, fs, iter, mem};\n use std::any::Any;\n-use std::env;\n use std::ffi::OsString;\n-use std::fs;\n use std::io::{self, Write};\n-use std::iter;\n use std::path::PathBuf;\n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -161,13 +158,12 @@ pub fn configure_and_expand(\n }\n \n pub struct ExpansionResult {\n-    pub defs: Steal<hir::map::Definitions>,\n-    pub resolutions: Steal<Resolutions>,\n+    pub resolver_outputs: Steal<ResolverOutputs>,\n }\n \n impl ExpansionResult {\n-    fn from_resolver_outputs((defs, resolutions): (Definitions, Resolutions)) -> Self {\n-        ExpansionResult { defs: Steal::new(defs), resolutions: Steal::new(resolutions) }\n+    fn from_resolver_outputs(resolver_outputs: ResolverOutputs) -> Self {\n+        ExpansionResult { resolver_outputs: Steal::new(resolver_outputs) }\n     }\n }\n \n@@ -789,15 +785,15 @@ pub fn create_global_ctxt(\n     compiler: &Compiler,\n     lint_store: Lrc<lint::LintStore>,\n     mut hir_forest: hir::map::Forest,\n-    defs: hir::map::Definitions,\n-    resolutions: Resolutions,\n+    mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n ) -> BoxedGlobalCtxt {\n     let sess = compiler.session().clone();\n     let cstore = compiler.cstore.clone();\n     let codegen_backend = compiler.codegen_backend().clone();\n     let crate_name = crate_name.to_string();\n+    let defs = mem::take(&mut resolver_outputs.definitions);\n \n     let ((), result) = BoxedGlobalCtxt::new(static move || {\n         let sess = &*sess;\n@@ -830,7 +826,7 @@ pub fn create_global_ctxt(\n             local_providers,\n             extern_providers,\n             &arenas,\n-            resolutions,\n+            resolver_outputs,\n             hir_map,\n             query_result_on_disk_cache,\n             &crate_name,"}, {"sha": "2ff5c69b145d84725469805e86a3b2fc36446e81", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=5fd796ad067f0c23c05524276279d057c9699c97", "patch": "@@ -234,8 +234,7 @@ impl Compiler {\n                 self,\n                 lint_store,\n                 hir_forest.steal(),\n-                expansion.defs.steal(),\n-                expansion.resolutions.steal(),\n+                expansion.resolver_outputs.steal(),\n                 outputs,\n                 &crate_name))\n         })"}, {"sha": "5cdf4d2fb6926165545a0ec0d7113f54c2e58440", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd796ad067f0c23c05524276279d057c9699c97/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5fd796ad067f0c23c05524276279d057c9699c97", "patch": "@@ -28,7 +28,7 @@ use rustc::hir::def::{self, DefKind, PartialRes, CtorKind, CtorOf, NonMacroAttrK\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::{TraitMap, GlobMap};\n-use rustc::ty::{self, DefIdTree};\n+use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::span_bug;\n \n@@ -1236,38 +1236,34 @@ impl<'a> Resolver<'a> {\n         Default::default()\n     }\n \n-    pub fn into_outputs(self) -> (Definitions, ty::Resolutions) {\n-        (\n-            self.definitions,\n-            ty::Resolutions {\n-                extern_crate_map: self.extern_crate_map,\n-                export_map: self.export_map,\n-                trait_map: self.trait_map,\n-                glob_map: self.glob_map,\n-                maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n-                maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n-                extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n-                    (ident.name, entry.introduced_by_item)\n-                }).collect(),\n-            },\n-        )\n-    }\n-\n-    pub fn clone_outputs(&self) -> (Definitions, ty::Resolutions) {\n-        (\n-            self.definitions.clone(),\n-            ty::Resolutions {\n-                extern_crate_map: self.extern_crate_map.clone(),\n-                export_map: self.export_map.clone(),\n-                trait_map: self.trait_map.clone(),\n-                glob_map: self.glob_map.clone(),\n-                maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n-                maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n-                extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n-                    (ident.name, entry.introduced_by_item)\n-                }).collect(),\n-            },\n-        )\n+    pub fn into_outputs(self) -> ResolverOutputs {\n+        ResolverOutputs {\n+            definitions: self.definitions,\n+            extern_crate_map: self.extern_crate_map,\n+            export_map: self.export_map,\n+            trait_map: self.trait_map,\n+            glob_map: self.glob_map,\n+            maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n+            extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n+                (ident.name, entry.introduced_by_item)\n+            }).collect(),\n+        }\n+    }\n+\n+    pub fn clone_outputs(&self) -> ResolverOutputs {\n+        ResolverOutputs {\n+            definitions: self.definitions.clone(),\n+            extern_crate_map: self.extern_crate_map.clone(),\n+            export_map: self.export_map.clone(),\n+            trait_map: self.trait_map.clone(),\n+            glob_map: self.glob_map.clone(),\n+            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n+            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n+            extern_prelude: self.extern_prelude.iter().map(|(ident, entry)| {\n+                (ident.name, entry.introduced_by_item)\n+            }).collect(),\n+        }\n     }\n \n     fn non_macro_attr(&self, mark_used: bool) -> Lrc<SyntaxExtension> {"}]}