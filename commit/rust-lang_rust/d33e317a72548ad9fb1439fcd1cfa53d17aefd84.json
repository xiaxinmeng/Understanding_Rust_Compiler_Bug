{"sha": "d33e317a72548ad9fb1439fcd1cfa53d17aefd84", "node_id": "C_kwDOAAsO6NoAKGQzM2UzMTdhNzI1NDhhZDlmYjE0MzlmY2QxY2ZhNTNkMTdhZWZkODQ", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-01-27T15:55:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-01-27T15:55:48Z"}, "message": "[debuginfo] Fix and unify handling of fat pointers in debuginfo: Change doc comment so it is not interpreted as doc-test.", "tree": {"sha": "5c6bdc25bd06cd0302a2591b23ac3395ea94332a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6bdc25bd06cd0302a2591b23ac3395ea94332a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d33e317a72548ad9fb1439fcd1cfa53d17aefd84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d33e317a72548ad9fb1439fcd1cfa53d17aefd84", "html_url": "https://github.com/rust-lang/rust/commit/d33e317a72548ad9fb1439fcd1cfa53d17aefd84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d33e317a72548ad9fb1439fcd1cfa53d17aefd84/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c61d2e172becefe72a7468d2de0c67e69716163", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c61d2e172becefe72a7468d2de0c67e69716163", "html_url": "https://github.com/rust-lang/rust/commit/3c61d2e172becefe72a7468d2de0c67e69716163"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "dd9c83481afd6d47e49b7bd8f11a2d72d52347c6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d33e317a72548ad9fb1439fcd1cfa53d17aefd84/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d33e317a72548ad9fb1439fcd1cfa53d17aefd84/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d33e317a72548ad9fb1439fcd1cfa53d17aefd84", "patch": "@@ -572,21 +572,21 @@ fn dyn_type_metadata<'ll, 'tcx>(\n \n /// Create debuginfo for `[T]` and `str`. These are unsized.\n ///\n-/// Note: We currently emit just emit the debuginfo for the element type here\n-///       (i.e. `T` for slices and `u8` for `str`), so that we end up with\n-///       `*const T` for the `data_ptr` field of the corresponding fat-pointer\n-///       debuginfo of `&[T]`.\n+/// NOTE: We currently emit just emit the debuginfo for the element type here\n+/// (i.e. `T` for slices and `u8` for `str`), so that we end up with\n+/// `*const T` for the `data_ptr` field of the corresponding fat-pointer\n+/// debuginfo of `&[T]`.\n ///\n-///       It would be preferable and more accurate if we emitted a DIArray of T\n-///       without an upper bound instead. That is, LLVM already supports emitting\n-///       debuginfo of arrays of unknown size. But GDB currently seems to end up\n-///       in an infinite loop when confronted with such a type.\n+/// It would be preferable and more accurate if we emitted a DIArray of T\n+/// without an upper bound instead. That is, LLVM already supports emitting\n+/// debuginfo of arrays of unknown size. But GDB currently seems to end up\n+/// in an infinite loop when confronted with such a type.\n ///\n-///       As a side effect of the current encoding every instance of a type like\n-///       `struct Foo { unsized_field: [u8] }` will look like\n-///       `struct Foo { unsized_field: u8 }` in debuginfo. If the length of the\n-///       slice is zero, then accessing `unsized_field` in the debugger would\n-///       result in an out-of-bounds access.\n+/// As a side effect of the current encoding every instance of a type like\n+/// `struct Foo { unsized_field: [u8] }` will look like\n+/// `struct Foo { unsized_field: u8 }` in debuginfo. If the length of the\n+/// slice is zero, then accessing `unsized_field` in the debugger would\n+/// result in an out-of-bounds access.\n fn slice_type_metadata<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     slice_type: Ty<'tcx>,"}]}