{"sha": "267b73d95e4fcc906e1b1207ab610fa45f6e6613", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2N2I3M2Q5NWU0ZmNjOTA2ZTFiMTIwN2FiNjEwZmE0NWY2ZTY2MTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T07:32:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-05T07:32:20Z"}, "message": "std: Fixup some missing stabilization on str\n\n* The `str` module itself is stable.\n* The `StrExt` trait is stable (and impls).\n* The `Utf8Error` type is unstable.\n* The `from_utf8` function is stable\n* Some iterators are now stable:\n  * `Chars`\n  * `CharIndices`\n* The `MatchIndices` iterator is now unstable\n* The public `traits` module is no longer public.", "tree": {"sha": "b9b264b3fd5a503116ebf8eea713fb538d2c1b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b264b3fd5a503116ebf8eea713fb538d2c1b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267b73d95e4fcc906e1b1207ab610fa45f6e6613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267b73d95e4fcc906e1b1207ab610fa45f6e6613", "html_url": "https://github.com/rust-lang/rust/commit/267b73d95e4fcc906e1b1207ab610fa45f6e6613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267b73d95e4fcc906e1b1207ab610fa45f6e6613/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed22606c8382822efc555f72f895c560289a5c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed22606c8382822efc555f72f895c560289a5c70", "html_url": "https://github.com/rust-lang/rust/commit/ed22606c8382822efc555f72f895c560289a5c70"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "fee06422fdd1f389f3cf8b302a44749486c4ca47", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/267b73d95e4fcc906e1b1207ab610fa45f6e6613/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267b73d95e4fcc906e1b1207ab610fa45f6e6613/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=267b73d95e4fcc906e1b1207ab610fa45f6e6613", "patch": "@@ -50,6 +50,7 @@\n //! is the same as `&[u8]`.\n \n #![doc(primitive = \"str\")]\n+#![stable]\n \n use self::RecompositionState::*;\n use self::DecompositionType::*;\n@@ -401,6 +402,7 @@ Section: Trait implementations\n */\n \n /// Any string that can be represented as a slice.\n+#[stable]\n pub trait StrExt for Sized?: ops::Slice<uint, str> {\n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable = \"return type may change to be an iterator\"]\n@@ -1340,6 +1342,7 @@ pub trait StrExt for Sized?: ops::Slice<uint, str> {\n     }\n }\n \n+#[stable]\n impl StrExt for str {}\n \n #[cfg(test)]"}, {"sha": "964e0089e44eed31727ea35310b5349a34cc96da", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/267b73d95e4fcc906e1b1207ab610fa45f6e6613/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267b73d95e4fcc906e1b1207ab610fa45f6e6613/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=267b73d95e4fcc906e1b1207ab610fa45f6e6613", "patch": "@@ -142,6 +142,7 @@ Section: Creating a string\n \n /// Errors which can occur when attempting to interpret a byte slice as a `str`.\n #[derive(Copy, Eq, PartialEq, Clone)]\n+#[unstable = \"error enumeration recently added and definitions may be refined\"]\n pub enum Utf8Error {\n     /// An invalid byte was detected at the byte offset given.\n     ///\n@@ -165,6 +166,7 @@ pub enum Utf8Error {\n ///\n /// Returns `Err` if the slice is not utf-8 with a description as to why the\n /// provided slice is not utf-8.\n+#[stable]\n pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     try!(run_utf8_validation_iterator(&mut v.iter()));\n     Ok(unsafe { from_utf8_unchecked(v) })\n@@ -247,6 +249,7 @@ Section: Iterators\n ///\n /// Created with the method `.chars()`.\n #[derive(Clone, Copy)]\n+#[stable]\n pub struct Chars<'a> {\n     iter: slice::Iter<'a, u8>\n }\n@@ -356,6 +359,7 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n /// External iterator for a string's characters and their byte offsets.\n /// Use with the `std::iter` module.\n #[derive(Clone)]\n+#[stable]\n pub struct CharIndices<'a> {\n     front_offset: uint,\n     iter: Chars<'a>,\n@@ -848,6 +852,7 @@ impl Searcher {\n /// An iterator over the start and end indices of the matches of a\n /// substring within a larger string\n #[derive(Clone)]\n+#[unstable = \"type may be removed\"]\n pub struct MatchIndices<'a> {\n     // constants\n     haystack: &'a str,\n@@ -858,7 +863,7 @@ pub struct MatchIndices<'a> {\n /// An iterator over the substrings of a string separated by a given\n /// search string\n #[derive(Clone)]\n-#[unstable = \"Type might get removed\"]\n+#[unstable = \"type may be removed\"]\n pub struct SplitStr<'a> {\n     it: MatchIndices<'a>,\n     last_end: uint,\n@@ -1056,8 +1061,7 @@ const TAG_CONT_U8: u8 = 0b1000_0000u8;\n Section: Trait implementations\n */\n \n-#[allow(missing_docs)]\n-pub mod traits {\n+mod traits {\n     use cmp::{Ordering, Ord, PartialEq, PartialOrd, Eq};\n     use cmp::Ordering::{Less, Equal, Greater};\n     use iter::IteratorExt;"}]}