{"sha": "992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmQ4OGFiNTgyZWNjOWUwNDE1ZGMyOGUyZGFkZDMyZmI0OWVkMTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-22T08:20:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-22T08:20:02Z"}, "message": "Merge pull request #1977 from rust-lang-nursery/panic\n\nFix a panic and a false positive", "tree": {"sha": "82bfde7365f0bf76cb1c7e69c55f675f71dc1a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82bfde7365f0bf76cb1c7e69c55f675f71dc1a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "html_url": "https://github.com/rust-lang/rust/commit/992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1fc5d85303666ad4c760a9509128985982deb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1fc5d85303666ad4c760a9509128985982deb3", "html_url": "https://github.com/rust-lang/rust/commit/cf1fc5d85303666ad4c760a9509128985982deb3"}, {"sha": "2430e06a60ca23960bb746af30742607ae41bdb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2430e06a60ca23960bb746af30742607ae41bdb0", "html_url": "https://github.com/rust-lang/rust/commit/2430e06a60ca23960bb746af30742607ae41bdb0"}], "stats": {"total": 139, "additions": 69, "deletions": 70}, "files": [{"sha": "6bf262bb72f17791ae364915ed599b1d4eb49dca", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.154\n+* Fix [`use_self`] triggering inside derives\n+\n ## 0.0.153\n * Update to *rustc 1.21.0-nightly (8c303ed87 2017-08-20)*\n * New lint: [`use_self`]"}, {"sha": "e46d8e4855f67b71a9a04c7aeffd5d1d22155d0c", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -26,8 +26,8 @@ pub struct BlackListedName {\n }\n \n impl BlackListedName {\n-    pub fn new(blacklist: Vec<String>) -> BlackListedName {\n-        BlackListedName { blacklist: blacklist }\n+    pub fn new(blacklist: Vec<String>) -> Self {\n+        Self { blacklist: blacklist }\n     }\n }\n "}, {"sha": "0a76b95931de1a8a18d0fef761e092ff7cc67d3b", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -23,7 +23,7 @@ pub enum FloatWidth {\n }\n \n impl From<FloatTy> for FloatWidth {\n-    fn from(ty: FloatTy) -> FloatWidth {\n+    fn from(ty: FloatTy) -> Self {\n         match ty {\n             FloatTy::F32 => FloatWidth::F32,\n             FloatTy::F64 => FloatWidth::F64,\n@@ -55,7 +55,7 @@ pub enum Constant {\n }\n \n impl PartialEq for Constant {\n-    fn eq(&self, other: &Constant) -> bool {\n+    fn eq(&self, other: &Self) -> bool {\n         match (self, other) {\n             (&Constant::Str(ref ls, ref l_sty), &Constant::Str(ref rs, ref r_sty)) => ls == rs && l_sty == r_sty,\n             (&Constant::Binary(ref l), &Constant::Binary(ref r)) => l == r,\n@@ -123,7 +123,7 @@ impl Hash for Constant {\n }\n \n impl PartialOrd for Constant {\n-    fn partial_cmp(&self, other: &Constant) -> Option<Ordering> {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         match (self, other) {\n             (&Constant::Str(ref ls, ref l_sty), &Constant::Str(ref rs, ref r_sty)) => {\n                 if l_sty == r_sty {\n@@ -297,7 +297,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 };\n                 let param_env = self.param_env.and((def_id, substs));\n                 if let Some((def_id, substs)) = lookup_const_by_id(self.tcx, param_env) {\n-                    let mut cx = ConstEvalLateContext {\n+                    let mut cx = Self {\n                         tcx: self.tcx,\n                         tables: self.tcx.typeck_tables_of(def_id),\n                         needed_resolution: false,"}, {"sha": "9596e9812adb7b3593c8f0ca1a245bfc8b0dbdb3", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -31,7 +31,7 @@ pub struct CyclomaticComplexity {\n \n impl CyclomaticComplexity {\n     pub fn new(limit: u64) -> Self {\n-        CyclomaticComplexity { limit: LimitStack::new(limit) }\n+        Self { limit: LimitStack::new(limit) }\n     }\n }\n "}, {"sha": "c366e17d85f811752c04f2daf93fd5d032d1e84d", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -37,7 +37,7 @@ pub struct Doc {\n \n impl Doc {\n     pub fn new(valid_idents: Vec<String>) -> Self {\n-        Doc { valid_idents: valid_idents }\n+        Self { valid_idents: valid_idents }\n     }\n }\n \n@@ -62,7 +62,7 @@ struct Parser<'a> {\n }\n \n impl<'a> Parser<'a> {\n-    fn new(parser: pulldown_cmark::Parser<'a>) -> Parser<'a> {\n+    fn new(parser: pulldown_cmark::Parser<'a>) -> Self {\n         Self { parser: parser }\n     }\n }"}, {"sha": "eee4e2a7ee16640e9efb854d6a2adb8a8811f535", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -104,8 +104,8 @@ pub struct EnumVariantNames {\n }\n \n impl EnumVariantNames {\n-    pub fn new(threshold: u64) -> EnumVariantNames {\n-        EnumVariantNames {\n+    pub fn new(threshold: u64) -> Self {\n+        Self {\n             modules: Vec::new(),\n             threshold: threshold,\n         }"}, {"sha": "70ff96d36d4321d497df2da88e22abc5386361bc", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::intravisit;\n use rustc::hir;\n use rustc::lint::*;\n+use rustc::ty;\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -58,8 +59,8 @@ pub struct Functions {\n }\n \n impl Functions {\n-    pub fn new(threshold: u64) -> Functions {\n-        Functions { threshold: threshold }\n+    pub fn new(threshold: u64) -> Self {\n+        Self { threshold: threshold }\n     }\n }\n \n@@ -150,9 +151,11 @@ impl<'a, 'tcx> Functions {\n                 .collect::<HashSet<_>>();\n \n             if !raw_ptrs.is_empty() {\n+                let tables = cx.tcx.body_tables(body.id());\n                 let mut v = DerefVisitor {\n                     cx: cx,\n                     ptrs: raw_ptrs,\n+                    tables,\n                 };\n \n                 hir::intravisit::walk_expr(&mut v, expr);\n@@ -172,13 +175,14 @@ fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<hir::def_id::DefId> {\n struct DerefVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     ptrs: HashSet<hir::def_id::DefId>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n }\n \n impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         match expr.node {\n             hir::ExprCall(ref f, ref args) => {\n-                let ty = self.cx.tables.expr_ty(f);\n+                let ty = self.tables.expr_ty(f);\n \n                 if type_is_unsafe_function(self.cx, ty) {\n                     for arg in args {\n@@ -187,7 +191,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                 }\n             },\n             hir::ExprMethodCall(_, _, ref args) => {\n-                let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n+                let def_id = self.tables.type_dependent_defs()[expr.hir_id].def_id();\n                 let base_type = self.cx.tcx.type_of(def_id);\n \n                 if type_is_unsafe_function(self.cx, base_type) {"}, {"sha": "917e0b773707ee92c9904125d7be8f3e43f89ce1", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -34,7 +34,7 @@ pub struct LargeEnumVariant {\n \n impl LargeEnumVariant {\n     pub fn new(maximum_size_difference_allowed: u64) -> Self {\n-        LargeEnumVariant { maximum_size_difference_allowed: maximum_size_difference_allowed }\n+        Self { maximum_size_difference_allowed: maximum_size_difference_allowed }\n     }\n }\n "}, {"sha": "47cc41c472cbb608ab1b17c54c09b9612739ad07", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -254,8 +254,8 @@ struct RefVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'v, 't> RefVisitor<'v, 't> {\n-    fn new(cx: &'v LateContext<'v, 't>) -> RefVisitor<'v, 't> {\n-        RefVisitor {\n+    fn new(cx: &'v LateContext<'v, 't>) -> Self {\n+        Self {\n             cx: cx,\n             lts: Vec::new(),\n             abort: false,"}, {"sha": "dbb1a7a9b867543861409507199ca52d4dae6581", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -95,7 +95,7 @@ struct DigitInfo<'a> {\n }\n \n impl<'a> DigitInfo<'a> {\n-    pub fn new(lit: &str, float: bool) -> DigitInfo {\n+    pub fn new(lit: &'a str, float: bool) -> Self {\n         // Determine delimiter for radix prefix, if present, and radix.\n         let radix = if lit.starts_with(\"0x\") {\n             Radix::Hexadecimal\n@@ -120,7 +120,7 @@ impl<'a> DigitInfo<'a> {\n             if !float && (d == 'i' || d == 'u') || float && d == 'f' {\n                 let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n                 let (digits, suffix) = sans_prefix.split_at(suffix_start);\n-                return DigitInfo {\n+                return Self {\n                     digits: digits,\n                     radix: radix,\n                     prefix: prefix,\n@@ -132,7 +132,7 @@ impl<'a> DigitInfo<'a> {\n         }\n \n         // No suffix found\n-        DigitInfo {\n+        Self {\n             digits: sans_prefix,\n             radix: radix,\n             prefix: prefix,\n@@ -257,7 +257,7 @@ impl LiteralDigitGrouping {\n             char::to_digit(firstch, 10).is_some()\n         ], {\n             let digit_info = DigitInfo::new(&src, false);\n-            let _ = LiteralDigitGrouping::do_lint(digit_info.digits).map_err(|warning_type| {\n+            let _ = Self::do_lint(digit_info.digits).map_err(|warning_type| {\n                 warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n             });\n         }}\n@@ -278,14 +278,14 @@ impl LiteralDigitGrouping {\n \n             // Lint integral and fractional parts separately, and then check consistency of digit\n             // groups if both pass.\n-            let _ = LiteralDigitGrouping::do_lint(parts[0])\n+            let _ = Self::do_lint(parts[0])\n                 .map(|integral_group_size| {\n                     if parts.len() > 1 {\n                         // Lint the fractional part of literal just like integral part, but reversed.\n                         let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                        let _ = LiteralDigitGrouping::do_lint(fractional_part)\n+                        let _ = Self::do_lint(fractional_part)\n                             .map(|fractional_group_size| {\n-                                let consistent = LiteralDigitGrouping::parts_consistent(integral_group_size, fractional_group_size, parts[0].len(), parts[1].len());\n+                                let consistent = Self::parts_consistent(integral_group_size, fractional_group_size, parts[0].len(), parts[1].len());\n                                 if !consistent {\n                                     WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(), cx, &lit.span);\n                                 }"}, {"sha": "21e19a3af849185e63fd5efb75362e8ee7bba5ff", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -56,14 +56,14 @@ pub struct MissingDoc {\n }\n \n impl ::std::default::Default for MissingDoc {\n-    fn default() -> MissingDoc {\n-        MissingDoc::new()\n+    fn default() -> Self {\n+        Self::new()\n     }\n }\n \n impl MissingDoc {\n-    pub fn new() -> MissingDoc {\n-        MissingDoc { doc_hidden_stack: vec![false] }\n+    pub fn new() -> Self {\n+        Self { doc_hidden_stack: vec![false] }\n     }\n \n     fn doc_hidden(&self) -> bool {"}, {"sha": "b7de586ed80cdb93544b28dbc1bfe7c20025c9d0", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -197,7 +197,7 @@ struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n-        MovedVariablesCtxt {\n+        Self {\n             cx: cx,\n             moved_vars: HashSet::new(),\n             spans_need_deref: HashMap::new(),"}, {"sha": "ea3db0e4690029bd1089f4b28c93c50822782ea2", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -730,7 +730,7 @@ pub struct TypeComplexityPass {\n \n impl TypeComplexityPass {\n     pub fn new(threshold: u64) -> Self {\n-        TypeComplexityPass { threshold: threshold }\n+        Self { threshold: threshold }\n     }\n }\n "}, {"sha": "b1e46e17f13e7bb7f2ae3ed2cc986e490a51661a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LintArray, LateLintPass, LateContext, LintPass};\n use rustc::hir::*;\n use rustc::hir::intravisit::{Visitor, walk_path, NestedVisitorMap};\n-use utils::span_lint_and_then;\n+use utils::{span_lint_and_then, in_macro};\n use syntax::ast::NodeId;\n use syntax_pos::symbol::keywords::SelfType;\n \n@@ -48,6 +48,9 @@ impl LintPass for UseSelf {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+        if in_macro(item.span) {\n+            return;\n+        }\n         if_let_chain!([\n             let ItemImpl(.., ref item_type, ref refs) = item.node,\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,"}, {"sha": "a7fdc3d281baa8621d7692b9cbf9f7076c9cfcff", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n impl PrintVisitor {\n     fn new(s: &'static str) -> Self {\n-        PrintVisitor {\n+        Self {\n             ids: HashMap::new(),\n             current: s.to_owned(),\n         }"}, {"sha": "b4caad0845a9fa86c8f26aae35bf8ff28980354f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -23,14 +23,14 @@ pub struct SpanlessEq<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n-        SpanlessEq {\n+        Self {\n             cx: cx,\n             ignore_fn: false,\n         }\n     }\n \n     pub fn ignore_fn(self) -> Self {\n-        SpanlessEq {\n+        Self {\n             cx: self.cx,\n             ignore_fn: true,\n         }\n@@ -283,7 +283,7 @@ pub struct SpanlessHash<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n-        SpanlessHash {\n+        Self {\n             cx: cx,\n             s: DefaultHasher::new(),\n         }"}, {"sha": "7f8603f0f2747978379917ccdca44d16d6349a88", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -670,8 +670,8 @@ impl Drop for LimitStack {\n }\n \n impl LimitStack {\n-    pub fn new(limit: u64) -> LimitStack {\n-        LimitStack { stack: vec![limit] }\n+    pub fn new(limit: u64) -> Self {\n+        Self { stack: vec![limit] }\n     }\n     pub fn limit(&self) -> u64 {\n         *self.stack.last().expect("}, {"sha": "6cfbe8c935e08c760bc5a5a1db9ca4d224de50f7", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -1,5 +1,7 @@\n //! Contains utility functions to generate suggestions.\n #![deny(missing_docs_in_private_items)]\n+// currently ignores lifetimes and generics\n+#![allow(use_self)]\n \n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n@@ -41,7 +43,7 @@ impl<'a> Display for Sugg<'a> {\n #[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n-    pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Sugg<'a>> {\n+    pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Self> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n             let snippet = Cow::Owned(snippet);\n             match expr.node {\n@@ -80,12 +82,12 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience function around `hir_opt` for suggestions with a default\n     /// text.\n-    pub fn hir(cx: &LateContext, expr: &hir::Expr, default: &'a str) -> Sugg<'a> {\n+    pub fn hir(cx: &LateContext, expr: &hir::Expr, default: &'a str) -> Self {\n         Self::hir_opt(cx, expr).unwrap_or_else(|| Sugg::NonParen(Cow::Borrowed(default)))\n     }\n \n     /// Prepare a suggestion from an expression.\n-    pub fn ast(cx: &EarlyContext, expr: &ast::Expr, default: &'a str) -> Sugg<'a> {\n+    pub fn ast(cx: &EarlyContext, expr: &ast::Expr, default: &'a str) -> Self {\n         use syntax::ast::RangeLimits;\n \n         let snippet = snippet(cx, expr.span, default);\n@@ -218,7 +220,7 @@ struct ParenHelper<T> {\n impl<T> ParenHelper<T> {\n     /// Build a `ParenHelper`.\n     fn new(paren: bool, wrapped: T) -> Self {\n-        ParenHelper {\n+        Self {\n             paren: paren,\n             wrapped: wrapped,\n         }"}, {"sha": "054ceae94e3bb748caef94410361c48e8b4dab9f", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -29,7 +29,7 @@ struct ClippyCompilerCalls {\n \n impl ClippyCompilerCalls {\n     fn new(run_lints: bool) -> Self {\n-        ClippyCompilerCalls {\n+        Self {\n             default: RustcDefaultCalls,\n             run_lints: run_lints,\n         }"}, {"sha": "23a002a5cdee54ffcfde9e49b3f8b6e2689cb395", "filename": "tests/run-pass/ice-1969.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/tests%2Frun-pass%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/tests%2Frun-pass%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1969.rs?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -0,0 +1,13 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(clippy)]\n+\n+fn main() { }\n+\n+pub trait Convert {\n+    type Action: From<*const f64>;\n+\n+    fn convert(val: *const f64) -> Self::Action {\n+        val.into()\n+    }\n+}"}, {"sha": "65975c5177c47a088ae390c005603fb1635541ba", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/992d88ab582ecc9e0415dc28e2dadd32fb49ed12/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=992d88ab582ecc9e0415dc28e2dadd32fb49ed12", "patch": "@@ -96,12 +96,6 @@ error: unnecessary structure name repetition\n 58 |     pub fn new() -> Lt3<'static> { unimplemented!() }\n    |                     ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:61:10\n-   |\n-61 | #[derive(Clone,Copy)]\n-   |          ^^^^^ help: use the applicable keyword: `Self`\n-\n error: unnecessary structure name repetition\n   --> $DIR/methods.rs:74:24\n    |\n@@ -190,18 +184,6 @@ error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done mo\n 125 | |                 );\n     | |_________________^\n \n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:131:16\n-    |\n-131 | #[derive(Copy, Clone)]\n-    |                ^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:145:16\n-    |\n-145 | #[derive(Copy, Clone)]\n-    |                ^^^^^ help: use the applicable keyword: `Self`\n-\n error: unnecessary structure name repetition\n    --> $DIR/methods.rs:151:24\n     |\n@@ -220,12 +202,6 @@ error: unnecessary structure name repetition\n 175 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:180:16\n-    |\n-180 | #[derive(Copy, Clone)]\n-    |                ^^^^^ help: use the applicable keyword: `Self`\n-\n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n    --> $DIR/methods.rs:194:13\n     |\n@@ -560,8 +536,6 @@ error: called `ok().expect()` on a Result value. You can call `expect` directly\n 413 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: unnecessary structure name repetition\n-\n error: you should use the `starts_with` method\n    --> $DIR/methods.rs:425:5\n     |\n@@ -756,5 +730,5 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 111 previous errors\n+error: aborting due to 106 previous errors\n "}]}