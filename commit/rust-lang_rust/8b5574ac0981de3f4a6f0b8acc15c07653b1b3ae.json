{"sha": "8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTU3NGFjMDk4MWRlM2Y0YTZmMGI4YWNjMTVjMDc2NTNiMWIzYWU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-13T19:06:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T23:41:46Z"}, "message": "Rename check_assignment_like to check_assignment since it turned out not to be useful for send/recv", "tree": {"sha": "73c3a191fe9898fddb0214a7e9d1319f01b144e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c3a191fe9898fddb0214a7e9d1319f01b144e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae", "html_url": "https://github.com/rust-lang/rust/commit/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b83a4af93c1da96002db120af336ad8ef6a68e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83a4af93c1da96002db120af336ad8ef6a68e30", "html_url": "https://github.com/rust-lang/rust/commit/b83a4af93c1da96002db120af336ad8ef6a68e30"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "6b826f1b21b2f935f9d0ac5e06da7fcf8ff62db5", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8b5574ac0981de3f4a6f0b8acc15c07653b1b3ae", "patch": "@@ -1644,9 +1644,8 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n         ret tup(f_1, args_1);\n     }\n \n-    // A generic function for checking expressions that have a form\n-    // similar to assignment.\n-    fn check_assignment_like(&@fn_ctxt fcx, @ast.expr lhs, @ast.expr rhs)\n+    // A generic function for checking assignment expressions\n+    fn check_assignment(&@fn_ctxt fcx, @ast.expr lhs, @ast.expr rhs)\n         -> tup(@ast.expr, @ast.expr, ast.ann) {\n         auto lhs_0 = check_expr(fcx, lhs);\n         auto rhs_0 = check_expr(fcx, rhs);\n@@ -1814,15 +1813,15 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n         }\n \n         case (ast.expr_assign(?lhs, ?rhs, _)) {\n-            auto checked = check_assignment_like(fcx, lhs, rhs);\n+            auto checked = check_assignment(fcx, lhs, rhs);\n             auto newexpr = ast.expr_assign(checked._0,\n                                            checked._1,\n                                            checked._2);\n             ret @fold.respan[ast.expr_](expr.span, newexpr);\n         }\n \n         case (ast.expr_assign_op(?op, ?lhs, ?rhs, _)) {\n-            auto checked = check_assignment_like(fcx, lhs, rhs);\n+            auto checked = check_assignment(fcx, lhs, rhs);\n             auto newexpr = ast.expr_assign_op(op,\n                                               checked._0,\n                                               checked._1,"}]}