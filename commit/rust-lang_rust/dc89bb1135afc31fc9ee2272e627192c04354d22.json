{"sha": "dc89bb1135afc31fc9ee2272e627192c04354d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjODliYjExMzVhZmMzMWZjOWVlMjI3MmU2MjcxOTJjMDQzNTRkMjI=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-10T02:21:58Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T20:59:14Z"}, "message": "Use if_chain in Increment/InitializeVisitor", "tree": {"sha": "7bf071697bda7c92607483558a2d2c7ad10b9ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bf071697bda7c92607483558a2d2c7ad10b9ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc89bb1135afc31fc9ee2272e627192c04354d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc89bb1135afc31fc9ee2272e627192c04354d22", "html_url": "https://github.com/rust-lang/rust/commit/dc89bb1135afc31fc9ee2272e627192c04354d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc89bb1135afc31fc9ee2272e627192c04354d22/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "html_url": "https://github.com/rust-lang/rust/commit/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "9f3be26e672369538417b2dc30329bbe37705756", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dc89bb1135afc31fc9ee2272e627192c04354d22/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc89bb1135afc31fc9ee2272e627192c04354d22/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=dc89bb1135afc31fc9ee2272e627192c04354d22", "patch": "@@ -2162,15 +2162,16 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                 match parent.kind {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {\n                         if lhs.hir_id == expr.hir_id {\n-                            if op.node == BinOpKind::Add && is_integer_const(self.cx, rhs, 1) {\n-                                *state = match *state {\n-                                    VarState::Initial if self.depth == 0 => VarState::IncrOnce,\n-                                    _ => VarState::DontWarn,\n-                                };\n+                            *state = if op.node == BinOpKind::Add\n+                                && is_integer_const(self.cx, rhs, 1)\n+                                && *state == VarState::Initial\n+                                && self.depth == 0\n+                            {\n+                                VarState::IncrOnce\n                             } else {\n-                                // Assigned some other value\n-                                *state = VarState::DontWarn;\n-                            }\n+                                // Assigned some other value or assigned multiple times\n+                                VarState::DontWarn\n+                            };\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n@@ -2212,18 +2213,20 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         // Look for declarations of the variable\n-        if let StmtKind::Local(ref local) = stmt.kind {\n-            if local.pat.hir_id == self.var_id {\n-                if let PatKind::Binding(.., ident, _) = local.pat.kind {\n-                    self.name = Some(ident.name);\n-\n-                    self.state = local.init.as_ref().map_or(VarState::Declared, |init| {\n-                        if is_integer_const(&self.cx, init, 0) {\n-                            VarState::Warn\n-                        } else {\n-                            VarState::Declared\n-                        }\n-                    })\n+        if_chain! {\n+            if let StmtKind::Local(ref local) = stmt.kind;\n+            if local.pat.hir_id == self.var_id;\n+            if let PatKind::Binding(.., ident, _) = local.pat.kind;\n+            then {\n+                self.name = Some(ident.name);\n+                self.state = if_chain! {\n+                    if let Some(ref init) = local.init;\n+                    if is_integer_const(&self.cx, init, 0);\n+                    then {\n+                        VarState::Warn\n+                    } else {\n+                        VarState::Declared\n+                    }\n                 }\n             }\n         }"}]}