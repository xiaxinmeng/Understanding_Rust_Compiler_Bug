{"sha": "5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlM2ZmYjZjYmQ5MDc5MzA0MWQ2MTJkM2ExYTc5NDFjOGVlMGNmODA=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-19T19:56:11Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-20T07:38:40Z"}, "message": "rustc: Re-export the same name in different namespaces\n\nIssue #1115.", "tree": {"sha": "e5e1207b778e57adff085da512bb7328fc748207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e1207b778e57adff085da512bb7328fc748207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "html_url": "https://github.com/rust-lang/rust/commit/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd300636ee9e26263a5f59452d525796333d015a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd300636ee9e26263a5f59452d525796333d015a", "html_url": "https://github.com/rust-lang/rust/commit/bd300636ee9e26263a5f59452d525796333d015a"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "1e844d39bca5f36d8693f3f557a07660e2c9f8c9", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "patch": "@@ -155,7 +155,8 @@ fn encode_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt, crate: @crate)\n \n fn encode_reexport_paths(ebml_w: ebml::writer,\n                          ecx: @encode_ctxt, &index: [entry<str>]) {\n-    ecx.ccx.exp_map.items {|path, def|\n+    ecx.ccx.exp_map.items {|key, def|\n+        let path = key.path;\n         index += [{val: path, pos: ebml_w.writer.tell()}];\n         ebml::start_tag(ebml_w, tag_paths_data_item);\n         encode_name(ebml_w, path);"}, {"sha": "0082b9f0d617c417893861f6068143f804210f67", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "patch": "@@ -79,6 +79,22 @@ fn new_ext_hash() -> ext_hash {\n     ret std::map::mk_hashmap::<key, def>(hash, eq);\n }\n \n+fn new_exp_hash() -> exp_map {\n+    type key = {path: str, ns: namespace};\n+    fn hash(v: key) -> uint {\n+        ret str::hash(v.path) +\n+                alt v.ns {\n+                  ns_value. { 1u }\n+                  ns_type. { 2u }\n+                  ns_module. { 3u }\n+                };\n+    }\n+    fn eq(v1: key, v2: key) -> bool {\n+        ret str::eq(v1.path, v2.path) && v1.ns == v2.ns;\n+    }\n+    ret std::map::mk_hashmap::<key, def>(hash, eq);\n+}\n+\n tag mod_index_entry {\n     mie_view_item(@ast::view_item);\n     mie_import_ident(node_id, codemap::span);\n@@ -105,7 +121,7 @@ type indexed_mod = {\n \n type def_map = hashmap<node_id, def>;\n type ext_map = hashmap<def_id, [ident]>;\n-type exp_map = hashmap<str, def>;\n+type exp_map = hashmap<{path: str, ns: namespace}, def>;\n type impl_map = hashmap<node_id, iscopes>;\n type impl_cache = hashmap<def_id, @[@_impl]>;\n \n@@ -142,7 +158,7 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           def_map: new_int_hash(),\n           ast_map: amap,\n           imports: new_int_hash(),\n-          exp_map: new_str_hash(),\n+          exp_map: new_exp_hash(),\n           mod_map: new_int_hash(),\n           block_map: new_int_hash(),\n           ext_map: new_def_hash(),\n@@ -1363,6 +1379,9 @@ fn lookup_external(e: env, cnum: int, ids: [ident], ns: namespace) ->\n                 let cname = cstore::get_crate_data(e.cstore, did.crate).name;\n                 let name =\n                     csearch::get_item_name(e.cstore, did.crate, did.node);\n+                log #fmt(\"lookup_external: %s %d, %d, %s, %s\", cname,\n+                         did.crate, did.node,\n+                         str::connect(ids, \"::\"), name);\n                 e.ext_map.insert(did, vec::init(ids) + [name]);\n             } else {\n                 e.ext_map.insert(did, ids);\n@@ -1615,15 +1634,16 @@ fn check_exports(e: @env) {\n         let (m, v, t) = (lookup(ns_module),\n                          lookup(ns_value),\n                          lookup(ns_type));\n-        maybe_add_reexport(e, path + ident, m);\n-        maybe_add_reexport(e, path + ident, v);\n-        maybe_add_reexport(e, path + ident, t);\n+        maybe_add_reexport(e, path + ident, ns_module, m);\n+        maybe_add_reexport(e, path + ident, ns_value, v);\n+        maybe_add_reexport(e, path + ident, ns_type, t);\n         ret is_some(m) || is_some(v) || is_some(t);\n     }\n \n-    fn maybe_add_reexport(e: @env, path: str, def: option::t<def>) {\n+    fn maybe_add_reexport(e: @env, path: str, ns: namespace,\n+                          def: option::t<def>) {\n         if option::is_some(def) {\n-            e.exp_map.insert(path, option::get(def));\n+            e.exp_map.insert({path: path, ns: ns}, option::get(def));\n         }\n     }\n \n@@ -1635,9 +1655,9 @@ fn check_exports(e: @env) {\n                   mie_import_ident(id, _) {\n                     alt e.imports.get(id) {\n                       resolved(v, t, m, _, rid, _) {\n-                        maybe_add_reexport(e, val.path + rid, v);\n-                        maybe_add_reexport(e, val.path + rid, t);\n-                        maybe_add_reexport(e, val.path + rid, m);\n+                        maybe_add_reexport(e, val.path + rid, ns_value, v);\n+                        maybe_add_reexport(e, val.path + rid, ns_type, t);\n+                        maybe_add_reexport(e, val.path + rid, ns_module, m);\n                       }\n                       _ { }\n                     }"}, {"sha": "9d0f14e6bd1c9d0d72c372074dfde897a691237c", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=5e3ffb6cbd90793041d612d3a1a7941c8ee0cf80", "patch": "@@ -9,7 +9,7 @@ import std::map::hashmap;\n import option::some;\n import syntax::ast;\n import driver::session;\n-import middle::ty;\n+import middle::{resolve, ty};\n import back::{link, abi, upcall};\n import util::common::*;\n import syntax::codemap::span;\n@@ -84,7 +84,7 @@ type crate_ctxt =\n      intrinsics: hashmap<str, ValueRef>,\n      item_ids: hashmap<ast::node_id, ValueRef>,\n      ast_map: ast_map::map,\n-     exp_map: hashmap<str, ast::def>,\n+     exp_map: resolve::exp_map,\n      item_symbols: hashmap<ast::node_id, str>,\n      mutable main_fn: option::t<ValueRef>,\n      link_meta: link::link_meta,"}]}