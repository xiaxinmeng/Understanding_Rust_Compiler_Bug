{"sha": "83a16e825da2767aaee1d62447eb94f4d7de8881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTE2ZTgyNWRhMjc2N2FhZWUxZDYyNDQ3ZWI5NGY0ZDdkZTg4ODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-16T05:29:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-16T05:29:05Z"}, "message": "Merge #4878\n\n4878: Make \"Replace qualified name with use\" replace *all* mentions of the path r=matklad a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/4836\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "720894ad21adddc35538687a93958c7afe38260a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/720894ad21adddc35538687a93958c7afe38260a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a16e825da2767aaee1d62447eb94f4d7de8881", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6FihCRBK7hj4Ov3rIwAAdHIIABwkQTR9WumBeDrhet9aG87L\nwkSSx8+fZEQAfu36AOS8uGiNqqZo4W4L7zkwDVoqNQJLSsK6dag6syoLpPCu+vNB\nXs6fblaJuoWJEFulDLPfhYtudKJVjSjVZluMXyejl2/ZlZrLb8ARYGmxBLAb5MyQ\n6LxKduDLacTn2jZVc2rgaBamk/hNx2qeP0VqLAQWtVLif5xtGWX1IELvw0ZihmJY\n2P8WNnwQAhP7i5v4fZxJbL4yYgAkrpYjxhD5gnkfnZyz7n9xBoMi1pJK8NHq0I7+\ne1yvJWDDwJA+/Dd7pfa4xM2ZzckT26xjjPwT5vh3x2m97v4N7L4OqHNIEjCuquc=\n=rhhw\n-----END PGP SIGNATURE-----\n", "payload": "tree 720894ad21adddc35538687a93958c7afe38260a\nparent f4f51171ca6d99b693df2ef6fb71f0347999aa9f\nparent 4295a004ed2fbc1046163acb5c100d4be7e4912b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592285345 +0000\ncommitter GitHub <noreply@github.com> 1592285345 +0000\n\nMerge #4878\n\n4878: Make \"Replace qualified name with use\" replace *all* mentions of the path r=matklad a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/4836\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a16e825da2767aaee1d62447eb94f4d7de8881", "html_url": "https://github.com/rust-lang/rust/commit/83a16e825da2767aaee1d62447eb94f4d7de8881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a16e825da2767aaee1d62447eb94f4d7de8881/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f51171ca6d99b693df2ef6fb71f0347999aa9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f51171ca6d99b693df2ef6fb71f0347999aa9f", "html_url": "https://github.com/rust-lang/rust/commit/f4f51171ca6d99b693df2ef6fb71f0347999aa9f"}, {"sha": "4295a004ed2fbc1046163acb5c100d4be7e4912b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4295a004ed2fbc1046163acb5c100d4be7e4912b", "html_url": "https://github.com/rust-lang/rust/commit/4295a004ed2fbc1046163acb5c100d4be7e4912b"}], "stats": {"total": 316, "additions": 257, "deletions": 59}, "files": [{"sha": "ee614de7260b370c1d20b2578187820c125204b5", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=83a16e825da2767aaee1d62447eb94f4d7de8881", "patch": "@@ -252,7 +252,7 @@ impl AssistBuilder {\n     pub(crate) fn rewrite(&mut self, rewriter: SyntaxRewriter) {\n         let node = rewriter.rewrite_root().unwrap();\n         let new = rewriter.rewrite(&node);\n-        algo::diff(&node, &new).into_text_edit(&mut self.edit)\n+        algo::diff(&node, &new).into_text_edit(&mut self.edit);\n     }\n \n     // FIXME: kill this API"}, {"sha": "b4784c333114f93998ca632582d666c3289ce660", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 230, "deletions": 50, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=83a16e825da2767aaee1d62447eb94f4d7de8881", "patch": "@@ -1,7 +1,10 @@\n use hir;\n-use ra_syntax::{ast, AstNode, SmolStr, TextRange};\n+use ra_syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SmolStr, SyntaxNode};\n \n-use crate::{utils::insert_use_statement, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{find_insert_use_container, insert_use_statement},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: replace_qualified_name_with_use\n //\n@@ -39,16 +42,18 @@ pub(crate) fn replace_qualified_name_with_use(\n         target,\n         |builder| {\n             let path_to_import = hir_path.mod_path().clone();\n+            let container = match find_insert_use_container(path.syntax(), ctx) {\n+                Some(c) => c,\n+                None => return,\n+            };\n             insert_use_statement(path.syntax(), &path_to_import, ctx, builder.text_edit_builder());\n \n-            if let Some(last) = path.segment() {\n-                // Here we are assuming the assist will provide a correct use statement\n-                // so we can delete the path qualifier\n-                builder.delete(TextRange::new(\n-                    path.syntax().text_range().start(),\n-                    last.syntax().text_range().start(),\n-                ));\n-            }\n+            // Now that we've brought the name into scope, re-qualify all paths that could be\n+            // affected (that is, all paths inside the node we added the `use` to).\n+            let mut rewriter = SyntaxRewriter::default();\n+            let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n+            shorten_paths(&mut rewriter, syntax, path);\n+            builder.rewrite(rewriter);\n         },\n     )\n }\n@@ -73,6 +78,69 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     Some(ps)\n }\n \n+/// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n+fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: ast::Path) {\n+    for child in node.children() {\n+        match_ast! {\n+            match child {\n+                // Don't modify `use` items, as this can break the `use` item when injecting a new\n+                // import into the use tree.\n+                ast::UseItem(_it) => continue,\n+                // Don't descend into submodules, they don't have the same `use` items in scope.\n+                ast::Module(_it) => continue,\n+\n+                ast::Path(p) => {\n+                    match maybe_replace_path(rewriter, p.clone(), path.clone()) {\n+                        Some(()) => {},\n+                        None => shorten_paths(rewriter, p.syntax().clone(), path.clone()),\n+                    }\n+                },\n+                _ => shorten_paths(rewriter, child, path.clone()),\n+            }\n+        }\n+    }\n+}\n+\n+fn maybe_replace_path(\n+    rewriter: &mut SyntaxRewriter<'static>,\n+    path: ast::Path,\n+    target: ast::Path,\n+) -> Option<()> {\n+    if !path_eq(path.clone(), target.clone()) {\n+        return None;\n+    }\n+\n+    // Shorten `path`, leaving only its last segment.\n+    if let Some(parent) = path.qualifier() {\n+        rewriter.delete(parent.syntax());\n+    }\n+    if let Some(double_colon) = path.coloncolon_token() {\n+        rewriter.delete(&double_colon);\n+    }\n+\n+    Some(())\n+}\n+\n+fn path_eq(lhs: ast::Path, rhs: ast::Path) -> bool {\n+    let mut lhs_curr = lhs;\n+    let mut rhs_curr = rhs;\n+    loop {\n+        match (lhs_curr.segment(), rhs_curr.segment()) {\n+            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n+            _ => return false,\n+        }\n+\n+        match (lhs_curr.qualifier(), rhs_curr.qualifier()) {\n+            (Some(lhs), Some(rhs)) => {\n+                lhs_curr = lhs;\n+                rhs_curr = rhs;\n+            }\n+            (None, None) => return true,\n+            _ => return false,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -83,10 +151,10 @@ mod tests {\n     fn test_replace_add_use_no_anchor() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n std::fmt::Debug<|>\n     \",\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n Debug\n@@ -97,13 +165,13 @@ Debug\n     fn test_replace_add_use_no_anchor_with_item_below() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n std::fmt::Debug<|>\n \n fn main() {\n }\n     \",\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n Debug\n@@ -118,13 +186,13 @@ fn main() {\n     fn test_replace_add_use_no_anchor_with_item_above() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n fn main() {\n }\n \n std::fmt::Debug<|>\n     \",\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n fn main() {\n@@ -139,10 +207,10 @@ Debug\n     fn test_replace_add_use_no_anchor_2seg() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n std::fmt<|>::Debug\n     \",\n-            \"\n+            r\"\n use std::fmt;\n \n fmt::Debug\n@@ -154,13 +222,13 @@ fmt::Debug\n     fn test_replace_add_use() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use stdx;\n \n impl std::fmt::Debug<|> for Foo {\n }\n     \",\n-            \"\n+            r\"\n use stdx;\n use std::fmt::Debug;\n \n@@ -174,11 +242,11 @@ impl Debug for Foo {\n     fn test_replace_file_use_other_anchor() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n impl std::fmt::Debug<|> for Foo {\n }\n     \",\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n impl Debug for Foo {\n@@ -191,11 +259,11 @@ impl Debug for Foo {\n     fn test_replace_add_use_other_anchor_indent() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n     impl std::fmt::Debug<|> for Foo {\n     }\n     \",\n-            \"\n+            r\"\n     use std::fmt::Debug;\n \n     impl Debug for Foo {\n@@ -208,13 +276,13 @@ impl Debug for Foo {\n     fn test_replace_split_different() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt;\n \n impl std::io<|> for Foo {\n }\n     \",\n-            \"\n+            r\"\n use std::{io, fmt};\n \n impl io for Foo {\n@@ -227,13 +295,13 @@ impl io for Foo {\n     fn test_replace_split_self_for_use() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt;\n \n impl std::fmt::Debug<|> for Foo {\n }\n     \",\n-            \"\n+            r\"\n use std::fmt::{self, Debug, };\n \n impl Debug for Foo {\n@@ -246,13 +314,13 @@ impl Debug for Foo {\n     fn test_replace_split_self_for_target() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n impl std::fmt<|> for Foo {\n }\n     \",\n-            \"\n+            r\"\n use std::fmt::{self, Debug};\n \n impl fmt for Foo {\n@@ -265,13 +333,13 @@ impl fmt for Foo {\n     fn test_replace_add_to_nested_self_nested() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{Display}};\n \n impl std::fmt::nested<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{Display, self}};\n \n impl nested for Foo {\n@@ -284,13 +352,13 @@ impl nested for Foo {\n     fn test_replace_add_to_nested_self_already_included() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{self, Display}};\n \n impl std::fmt::nested<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{self, Display}};\n \n impl nested for Foo {\n@@ -303,13 +371,13 @@ impl nested for Foo {\n     fn test_replace_add_to_nested_nested() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{Display}};\n \n impl std::fmt::nested::Debug<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt::{Debug, nested::{Display, Debug}};\n \n impl Debug for Foo {\n@@ -322,13 +390,13 @@ impl Debug for Foo {\n     fn test_replace_split_common_target_longer() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::Debug;\n \n impl std::fmt::nested::Display<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt::{nested::Display, Debug};\n \n impl Display for Foo {\n@@ -341,13 +409,13 @@ impl Display for Foo {\n     fn test_replace_split_common_use_longer() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt::nested::Debug;\n \n impl std::fmt::Display<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt::{Display, nested::Debug};\n \n impl Display for Foo {\n@@ -360,15 +428,15 @@ impl Display for Foo {\n     fn test_replace_use_nested_import() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use crate::{\n     ty::{Substs, Ty},\n     AssocItem,\n };\n \n fn foo() { crate::ty::lower<|>::trait_env() }\n \",\n-            \"\n+            r\"\n use crate::{\n     ty::{Substs, Ty, lower},\n     AssocItem,\n@@ -383,13 +451,13 @@ fn foo() { lower::trait_env() }\n     fn test_replace_alias() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt as foo;\n \n impl foo::Debug<|> for Foo {\n }\n \",\n-            \"\n+            r\"\n use std::fmt as foo;\n \n impl Debug for Foo {\n@@ -402,7 +470,7 @@ impl Debug for Foo {\n     fn test_replace_not_applicable_one_segment() {\n         check_assist_not_applicable(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n impl foo<|> for Foo {\n }\n \",\n@@ -413,7 +481,7 @@ impl foo<|> for Foo {\n     fn test_replace_not_applicable_in_use() {\n         check_assist_not_applicable(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n use std::fmt<|>;\n \",\n         );\n@@ -423,14 +491,14 @@ use std::fmt<|>;\n     fn test_replace_add_use_no_anchor_in_mod_mod() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n mod foo {\n     mod bar {\n         std::fmt::Debug<|>\n     }\n }\n     \",\n-            \"\n+            r\"\n mod foo {\n     mod bar {\n         use std::fmt::Debug;\n@@ -446,19 +514,131 @@ mod foo {\n     fn inserts_imports_after_inner_attributes() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            \"\n+            r\"\n #![allow(dead_code)]\n \n fn main() {\n     std::fmt::Debug<|>\n }\n     \",\n-            \"\n+            r\"\n #![allow(dead_code)]\n use std::fmt::Debug;\n \n fn main() {\n     Debug\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_all_affected_paths() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+fn main() {\n+    std::fmt::Debug<|>;\n+    let x: std::fmt::Debug = std::fmt::Debug;\n+}\n+    \",\n+            r\"\n+use std::fmt::Debug;\n+\n+fn main() {\n+    Debug;\n+    let x: Debug = Debug;\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_all_affected_paths_mod() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+mod m {\n+    fn f() {\n+        std::fmt::Debug<|>;\n+        let x: std::fmt::Debug = std::fmt::Debug;\n+    }\n+    fn g() {\n+        std::fmt::Debug;\n+    }\n+}\n+\n+fn f() {\n+    std::fmt::Debug;\n+}\n+    \",\n+            r\"\n+mod m {\n+    use std::fmt::Debug;\n+\n+    fn f() {\n+        Debug;\n+        let x: Debug = Debug;\n+    }\n+    fn g() {\n+        Debug;\n+    }\n+}\n+\n+fn f() {\n+    std::fmt::Debug;\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_in_submodules() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+fn main() {\n+    std::fmt::Debug<|>;\n+}\n+\n+mod sub {\n+    fn f() {\n+        std::fmt::Debug;\n+    }\n+}\n+    \",\n+            r\"\n+use std::fmt::Debug;\n+\n+fn main() {\n+    Debug;\n+}\n+\n+mod sub {\n+    fn f() {\n+        std::fmt::Debug;\n+    }\n+}\n+    \",\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_replace_in_use() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+use std::fmt::Display;\n+\n+fn main() {\n+    std::fmt<|>;\n+}\n+    \",\n+            r\"\n+use std::fmt::{self, Display};\n+\n+fn main() {\n+    fmt;\n }\n     \",\n         );"}, {"sha": "c1ff0de7b0b8afca5ef6941fd73e69c9152435a3", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=83a16e825da2767aaee1d62447eb94f4d7de8881", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::FxHashSet;\n \n use crate::assist_config::SnippetCap;\n \n-pub(crate) use insert_use::insert_use_statement;\n+pub(crate) use insert_use::{find_insert_use_container, insert_use_statement};\n \n #[derive(Clone, Copy, Debug)]\n pub(crate) enum Cursor<'a> {"}, {"sha": "8c4f33e59ac9d9e217ca124926011a48a86274c7", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=83a16e825da2767aaee1d62447eb94f4d7de8881", "patch": "@@ -12,6 +12,20 @@ use ra_syntax::{\n use ra_text_edit::TextEditBuilder;\n \n use crate::assist_context::AssistContext;\n+use either::Either;\n+\n+/// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n+pub(crate) fn find_insert_use_container(\n+    position: &SyntaxNode,\n+    ctx: &AssistContext,\n+) -> Option<Either<ast::ItemList, ast::SourceFile>> {\n+    ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n+        if let Some(module) = ast::Module::cast(n.clone()) {\n+            return module.item_list().map(|it| Either::Left(it));\n+        }\n+        Some(Either::Right(ast::SourceFile::cast(n)?))\n+    })\n+}\n \n /// Creates and inserts a use statement for the given path to import.\n /// The use statement is inserted in the scope most appropriate to the\n@@ -24,15 +38,11 @@ pub(crate) fn insert_use_statement(\n     builder: &mut TextEditBuilder,\n ) {\n     let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n-    let container = ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n-        if let Some(module) = ast::Module::cast(n.clone()) {\n-            return module.item_list().map(|it| it.syntax().clone());\n-        }\n-        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n-    });\n+    let container = find_insert_use_container(position, ctx);\n \n     if let Some(container) = container {\n-        let action = best_action_for_target(container, position.clone(), &target);\n+        let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n+        let action = best_action_for_target(syntax, position.clone(), &target);\n         make_assist(&action, &target, builder);\n     }\n }"}, {"sha": "f7a885eb3eb17aaf7ab7e3946adc86a9ef060be8", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a16e825da2767aaee1d62447eb94f4d7de8881/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=83a16e825da2767aaee1d62447eb94f4d7de8881", "patch": "@@ -290,6 +290,11 @@ impl<'a> SyntaxRewriter<'a> {\n         N::cast(self.rewrite(node.syntax())).unwrap()\n     }\n \n+    /// Returns a node that encompasses all replacements to be done by this rewriter.\n+    ///\n+    /// Passing the returned node to `rewrite` will apply all replacements queued up in `self`.\n+    ///\n+    /// Returns `None` when there are no replacements.\n     pub fn rewrite_root(&self) -> Option<SyntaxNode> {\n         assert!(self.f.is_none());\n         self.replacements\n@@ -298,6 +303,9 @@ impl<'a> SyntaxRewriter<'a> {\n                 SyntaxElement::Node(it) => it.clone(),\n                 SyntaxElement::Token(it) => it.parent(),\n             })\n+            // If we only have one replacement, we must return its parent node, since `rewrite` does\n+            // not replace the node passed to it.\n+            .map(|it| it.parent().unwrap_or(it))\n             .fold1(|a, b| least_common_ancestor(&a, &b).unwrap())\n     }\n "}]}