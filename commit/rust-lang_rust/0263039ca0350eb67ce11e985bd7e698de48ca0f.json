{"sha": "0263039ca0350eb67ce11e985bd7e698de48ca0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjMwMzljYTAzNTBlYjY3Y2UxMWU5ODViZDdlNjk4ZGU0OGNhMGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-10T18:28:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-11T04:48:28Z"}, "message": "use absolute names when pretty-printing types", "tree": {"sha": "97349888cf68f0d3b487ec15f50dcca558e96026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97349888cf68f0d3b487ec15f50dcca558e96026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0263039ca0350eb67ce11e985bd7e698de48ca0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0263039ca0350eb67ce11e985bd7e698de48ca0f", "html_url": "https://github.com/rust-lang/rust/commit/0263039ca0350eb67ce11e985bd7e698de48ca0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0263039ca0350eb67ce11e985bd7e698de48ca0f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdddf8f9e1d6738d42989a6d8a735dd58127e199", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdddf8f9e1d6738d42989a6d8a735dd58127e199", "html_url": "https://github.com/rust-lang/rust/commit/fdddf8f9e1d6738d42989a6d8a735dd58127e199"}], "stats": {"total": 136, "additions": 78, "deletions": 58}, "files": [{"sha": "7310c5efe5397c2189444ba8835a9099908b267b", "filename": "Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -410,9 +410,12 @@ TSREQS :=\t\t\t\t\t\t\t\t\t\t\t\\\n FUZZ := $(HBIN3_H_$(CFG_HOST_TRIPLE))/fuzzer$(X)\n CARGO := $(HBIN3_H_$(CFG_HOST_TRIPLE))/cargo$(X)\n RUSTDOC := $(HBIN3_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n-SERIALIZER := $(HBIN3_H_$(CFG_HOST_TRIPLE))/serializer$(X)\n+SERIALIZER := $(HBIN2_H_$(CFG_HOST_TRIPLE))/serializer$(X)\n+# ^^ Note: we use HBIN2 because that is the only stage for which\n+#    we build a complete rustc by default, and serializer requires \n+#    the complete rustc.\n \n-all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC)\n+all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC) $(SERIALIZER)\n \n endif\n "}, {"sha": "cd007e22fc4a506ff4aa9ea55ec2147e897a809f", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -112,10 +112,11 @@ fn doc_type(doc: ebml::doc, tcx: ty::ctxt, cdata: cmd) -> ty::t {\n     })\n }\n \n-fn item_type(item: ebml::doc, tcx: ty::ctxt, cdata: cmd) -> ty::t {\n+fn item_type(item_id: ast::def_id, item: ebml::doc,\n+             tcx: ty::ctxt, cdata: cmd) -> ty::t {\n     let t = doc_type(item, tcx, cdata);\n     if family_names_type(item_family(item)) {\n-        ty::mk_named(tcx, t, item_name(item))\n+        ty::mk_with_id(tcx, t, item_id)\n     } else { t }\n }\n \n@@ -240,7 +241,7 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n fn get_type(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     -> ty::ty_param_bounds_and_ty {\n     let item = lookup_item(id, cdata.data);\n-    let t = item_type(item, tcx, cdata);\n+    let t = item_type({crate: cdata.cnum, node: id}, item, tcx, cdata);\n     let tp_bounds = if family_has_type_params(item_family(item)) {\n         item_ty_param_bounds(item, tcx, cdata)\n     } else { @[] };\n@@ -274,7 +275,8 @@ fn get_enum_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     let disr_val = 0;\n     for did: ast::def_id in variant_ids {\n         let item = find_item(did.node, items);\n-        let ctor_ty = item_type(item, tcx, cdata);\n+        let ctor_ty = item_type({crate: cdata.cnum, node: id}, item,\n+                                tcx, cdata);\n         let name = item_name(item);\n         let arg_tys: [ty::t] = [];\n         alt ty::get(ctor_ty).struct {"}, {"sha": "e9cb99f3db727d90e9d567abd46e26ecb5486b8a", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -293,11 +293,9 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         ret ty::mk_constr(st.tcx, tt, tcs);\n       }\n       '\"' {\n-        let name = \"\";\n-        while peek(st) as char != '\"' { str::push_byte(name, next(st)); }\n-        st.pos = st.pos + 1u;\n+        let def = parse_def(st, conv);\n         let inner = parse_ty(st, conv);\n-        ty::mk_named(st.tcx, inner, name)\n+        ty::mk_with_id(st.tcx, inner, def)\n       }\n       'B' { ty::mk_opaque_box(st.tcx) }\n       c { #error(\"unexpected char in type string: %c\", c); fail;}"}, {"sha": "e69b3888b6cd73e4721c52daefcd2577602dbcf1", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -53,11 +53,11 @@ fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n           some(a) { w.write_str(*a.s); ret; }\n           none {\n             let pos = w.tell();\n-            alt ty::type_name(t) {\n-              some(n) {\n-                w.write_char('\"');\n-                w.write_str(n);\n+            alt ty::type_def_id(t) {\n+              some(def_id) {\n                 w.write_char('\"');\n+                w.write_str(cx.ds(def_id));\n+                w.write_char('|');\n               }\n               _ {}\n             }"}, {"sha": "7976576720f3015913dbb4997b9a87577270dbff", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -42,7 +42,7 @@ export method;\n export method_idx;\n export mk_class;\n export mk_ctxt;\n-export mk_named, type_name;\n+export mk_with_id, type_def_id;\n export mt;\n export node_type_table;\n export pat_ty;\n@@ -151,8 +151,10 @@ type mt = {ty: t, mut: ast::mutability};\n // the types of AST nodes.\n type creader_cache = hashmap<{cnum: int, pos: uint, len: uint}, t>;\n \n+type intern_key = {struct: sty, o_def_id: option<ast::def_id>};\n+\n type ctxt =\n-    @{interner: hashmap<{struct: sty, name: option<str>}, t_box>,\n+    @{interner: hashmap<intern_key, t_box>,\n       mutable next_id: uint,\n       sess: session::session,\n       def_map: resolve::def_map,\n@@ -175,7 +177,7 @@ type t_box = @{struct: sty,\n                id: uint,\n                has_params: bool,\n                has_vars: bool,\n-               name: option<str>};\n+               o_def_id: option<ast::def_id>};\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n // throughout the compiler. These are simply casted t_box values. Use ty::get\n@@ -194,7 +196,7 @@ pure fn get(t: t) -> t_box unsafe {\n \n fn type_has_params(t: t) -> bool { get(t).has_params }\n fn type_has_vars(t: t) -> bool { get(t).has_vars }\n-fn type_name(t: t) -> option<str> { get(t).name }\n+fn type_def_id(t: t) -> option<ast::def_id> { get(t).o_def_id }\n fn type_id(t: t) -> uint { get(t).id }\n \n enum closure_kind {\n@@ -308,10 +310,9 @@ fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n \n fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            freevars: freevars::freevar_map) -> ctxt {\n-    let interner = map::mk_hashmap({|&&k: {struct: sty, name: option<str>}|\n-        hash_type_structure(k.struct) + alt k.name {\n-          some(s) { str::hash(s) } _ { 0u }\n-        }\n+    let interner = map::mk_hashmap({|&&k: intern_key|\n+        hash_type_structure(k.struct) +\n+            option::maybe(0u, k.o_def_id, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n     @{interner: interner,\n       mutable next_id: 0u,\n@@ -335,12 +336,12 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n \n \n // Type constructors\n-fn mk_t(cx: ctxt, st: sty) -> t { mk_t_named(cx, st, none) }\n+fn mk_t(cx: ctxt, st: sty) -> t { mk_t_with_id(cx, st, none) }\n \n // Interns a type/name combination, stores the resulting box in cx.interner,\n // and returns the box as cast to an unsafe ptr (see comments for t above).\n-fn mk_t_named(cx: ctxt, st: sty, name: option<str>) -> t {\n-    let key = {struct: st, name: name};\n+fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n+    let key = {struct: st, o_def_id: o_def_id};\n     alt cx.interner.find(key) {\n       some(t) { unsafe { ret unsafe::reinterpret_cast(t); } }\n       _ {}\n@@ -385,7 +386,7 @@ fn mk_t_named(cx: ctxt, st: sty, name: option<str>) -> t {\n               id: cx.next_id,\n               has_params: has_params,\n               has_vars: has_vars,\n-              name: name};\n+              o_def_id: o_def_id};\n     cx.interner.insert(key, t);\n     cx.next_id += 1u;\n     unsafe { unsafe::reinterpret_cast(t) }\n@@ -469,8 +470,8 @@ fn mk_opaque_closure_ptr(cx: ctxt, ck: closure_kind) -> t {\n \n fn mk_opaque_box(cx: ctxt) -> t { mk_t(cx, ty_opaque_box) }\n \n-fn mk_named(cx: ctxt, base: t, name: str) -> t {\n-    mk_t_named(cx, get(base).struct, some(name))\n+fn mk_with_id(cx: ctxt, base: t, def_id: ast::def_id) -> t {\n+    mk_t_with_id(cx, get(base).struct, some(def_id))\n }\n \n // Converts s to its machine type equivalent"}, {"sha": "b687f3f702c3a5b16eacb9980730fc40d1eed43b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -373,6 +373,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n       some(tpt) { ret tpt; }\n       _ {}\n     }\n+    let def_id = {crate: ast::local_crate, node: it.id};\n     alt it.node {\n       ast::item_const(t, _) {\n         let typ = ast_ty_to_ty(tcx, mode, t);\n@@ -390,36 +391,42 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         }\n         // Tell ast_ty_to_ty() that we want to perform a recursive\n         // call to resolve any named types.\n-        let tpt = {bounds: ty_param_bounds(tcx, mode, tps),\n-                   ty: ty::mk_named(tcx, ast_ty_to_ty(tcx, mode, t),\n-                                    it.ident)};\n+        let tpt = {\n+            let t0 = ast_ty_to_ty(tcx, mode, t);\n+            {bounds: ty_param_bounds(tcx, mode, tps),\n+             ty: ty::mk_with_id(tcx, t0, def_id)}\n+        };\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n       ast::item_res(decl, tps, _, _, _) {\n         let {bounds, params} = mk_ty_params(tcx, tps);\n         let t_arg = ty_of_arg(tcx, mode, decl.inputs[0]);\n-        let t = ty::mk_named(tcx, ty::mk_res(tcx, local_def(it.id), t_arg.ty,\n-                                             params),\n-                             it.ident);\n+        let t = {\n+            let t0 = ty::mk_res(tcx, local_def(it.id), t_arg.ty, params);\n+            ty::mk_with_id(tcx, t0, def_id)\n+        };\n         let t_res = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), t_res);\n         ret t_res;\n       }\n       ast::item_enum(_, tps) {\n         // Create a new generic polytype.\n         let {bounds, params} = mk_ty_params(tcx, tps);\n-        let t = ty::mk_named(tcx, ty::mk_enum(tcx, local_def(it.id), params),\n-                             it.ident);\n+        let t = {\n+            let t0 = ty::mk_enum(tcx, local_def(it.id), params);\n+            ty::mk_with_id(tcx, t0, def_id)\n+        };\n         let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n       ast::item_iface(tps, ms) {\n         let {bounds, params} = mk_ty_params(tcx, tps);\n-        let t = ty::mk_named(tcx, ty::mk_iface(tcx, local_def(it.id),\n-                                               params),\n-                             it.ident);\n+        let t = {\n+            let t0 = ty::mk_iface(tcx, local_def(it.id), params);\n+            ty::mk_with_id(tcx, t0, def_id)\n+        };\n         let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;"}, {"sha": "5af07e1650e5f625b8783d37cf1507879242a815", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -6,6 +6,7 @@ import syntax::print::pprust::{path_to_str, constr_args_to_str, proto_to_str,\n                                mode_to_str};\n import syntax::{ast, ast_util};\n import middle::ast_map;\n+import driver::session::session;\n \n fn ty_to_str(cx: ctxt, typ: t) -> str {\n     fn fn_input_to_str(cx: ctxt, input: {mode: ast::mode, ty: t}) ->\n@@ -60,21 +61,28 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         }\n         ret mstr + ty_to_str(cx, m.ty);\n     }\n-    alt ty::type_name(typ) {\n-      some(cs) {\n-        alt ty::get(typ).struct {\n-          ty_enum(_, tps) | ty_res(_, _, tps) {\n-            if vec::len(tps) > 0u {\n-                let strs = vec::map(tps, {|t| ty_to_str(cx, t)});\n-                ret cs + \"<\" + str::connect(strs, \",\") + \">\";\n-            }\n-          }\n-          _ {}\n+    fn parameterized(cx: ctxt, base: str, tps: [ty::t]) -> str {\n+        if vec::len(tps) > 0u {\n+            let strs = vec::map(tps, {|t| ty_to_str(cx, t)});\n+            #fmt[\"%s<%s>\", base, str::connect(strs, \",\")]\n+        } else {\n+            base\n         }\n-        ret cs;\n+    }\n+\n+    // if there is an id, print that instead of the structural type:\n+    alt ty::type_def_id(typ) {\n+      some(def_id) {\n+        let cs = ast_map::path_to_str(ty::item_path(cx, def_id));\n+        ret alt ty::get(typ).struct {\n+          ty_enum(_, tps) | ty_res(_, _, tps) { parameterized(cx, cs, tps) }\n+          _ { cs }\n+        };\n       }\n-      _ { }\n+      none { /* fallthrough */}\n     }\n+\n+    // pretty print the structural type representation:\n     ret alt ty::get(typ).struct {\n       ty_nil { \"()\" }\n       ty_bot { \"_|_\" }\n@@ -110,15 +118,13 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_param(id, _) {\n         \"'\" + str::from_bytes([('a' as u8) + (id as u8)])\n       }\n-      ty_enum(did, tps) {\n+      ty_enum(did, tps) | ty_res(did, _, tps) {\n+        // Not sure why, but under some circumstances enum or resource types\n+        // do not have an associated id.  I didn't investigate enough to know\n+        // if there is a good reason for this. - Niko, 2012-02-10\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path);\n-        if vec::is_empty(tps) {\n-            base\n-        } else {\n-            let tps_strs = vec::map(tps) {|t| ty_to_str(cx, t) };\n-            #fmt[\"%s<%s>\", base, str::connect(tps_strs, \",\")]\n-        }\n+        parameterized(cx, base, tps)\n       }\n       _ { ty_to_short_str(cx, typ) }\n     }"}, {"sha": "17712b45febd5927645b9d3a3980eb57f4cc6d88", "filename": "src/etc/ctags.rust", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fetc%2Fctags.rust", "raw_url": "https://github.com/rust-lang/rust/raw/0263039ca0350eb67ce11e985bd7e698de48ca0f/src%2Fetc%2Fctags.rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fctags.rust?ref=0263039ca0350eb67ce11e985bd7e698de48ca0f", "patch": "@@ -6,3 +6,6 @@\n --regex-rust=/[ \\t]*resource[ \\t]+([a-zA-Z0-9_]+)/\\1/T,types/\n --regex-rust=/[ \\t]*mod[ \\t]+([a-zA-Z0-9_]+)/\\1/m,modules/\n --regex-rust=/[ \\t]*const[ \\t]+([a-zA-Z0-9_]+)/\\1/m,consts/\n+--regex-rust=/[ \\t]*iface[ \\t]+([a-zA-Z0-9_]+)/\\1/m,ifaces/\n+--regex-rust=/[ \\t]*impl[ \\t]+([a-zA-Z0-9_]+)/\\1/m,impls/\n+--regex-rust=/[ \\t]*impl[ \\t]+of[ \\t]([a-zA-Z0-9_]+)/\\1/m,impls/"}]}