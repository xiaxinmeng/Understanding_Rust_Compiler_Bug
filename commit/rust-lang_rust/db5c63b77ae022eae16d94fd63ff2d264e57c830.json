{"sha": "db5c63b77ae022eae16d94fd63ff2d264e57c830", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNWM2M2I3N2FlMDIyZWFlMTZkOTRmZDYzZmYyZDI2NGU1N2M4MzA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-09-29T11:57:04Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-09-29T11:57:04Z"}, "message": "Move tests into separate file", "tree": {"sha": "41876d052b8e68b0a8f79411749859ddb3b023e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41876d052b8e68b0a8f79411749859ddb3b023e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5c63b77ae022eae16d94fd63ff2d264e57c830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5c63b77ae022eae16d94fd63ff2d264e57c830", "html_url": "https://github.com/rust-lang/rust/commit/db5c63b77ae022eae16d94fd63ff2d264e57c830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5c63b77ae022eae16d94fd63ff2d264e57c830/comments", "author": null, "committer": null, "parents": [{"sha": "4b4d758ce02591d2bb470a19926e3c315c18fef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4d758ce02591d2bb470a19926e3c315c18fef3", "html_url": "https://github.com/rust-lang/rust/commit/4b4d758ce02591d2bb470a19926e3c315c18fef3"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "7faa45b987dae03f11a9b0d861d3f32881b767b4", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=db5c63b77ae022eae16d94fd63ff2d264e57c830", "patch": "@@ -443,17 +443,3 @@ fn main() {\n     let opt = Some(0);\n     let _ = opt.unwrap();\n }\n-\n-/// Checks implementation of `UNNECESSARY_FILTER_MAP` lint\n-fn unnecessary_filter_map() {\n-    let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n-    let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n-    let _ = (0..4).filter_map(|x| match x {\n-        0 | 1 => None,\n-        _ => Some(x),\n-    });\n-\n-    let _ = (0..4).filter_map(|x| Some(x + 1));\n-\n-    let _ = (0..4).filter_map(i32::checked_abs);\n-}"}, {"sha": "3189f375647f323e733537b0d1934c18382feba7", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=db5c63b77ae022eae16d94fd63ff2d264e57c830", "patch": "@@ -453,35 +453,5 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n     |\n     = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: this `.filter_map` can be written more simply using `.filter`\n-   --> $DIR/methods.rs:449:13\n-    |\n-449 |     let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D clippy::unnecessary-filter-map` implied by `-D warnings`\n-\n-error: this `.filter_map` can be written more simply using `.filter`\n-   --> $DIR/methods.rs:450:13\n-    |\n-450 |     let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this `.filter_map` can be written more simply using `.filter`\n-   --> $DIR/methods.rs:451:13\n-    |\n-451 |       let _ = (0..4).filter_map(|x| match x {\n-    |  _____________^\n-452 | |         0 | 1 => None,\n-453 | |         _ => Some(x),\n-454 | |     });\n-    | |______^\n-\n-error: this `.filter_map` can be written more simply using `.map`\n-   --> $DIR/methods.rs:456:13\n-    |\n-456 |     let _ = (0..4).filter_map(|x| Some(x + 1));\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 60 previous errors\n+error: aborting due to 56 previous errors\n "}, {"sha": "dd6cdc5d39d3f63469299a406ce0be869dbebfd1", "filename": "tests/ui/unnecessary_filter_map.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_filter_map.rs?ref=db5c63b77ae022eae16d94fd63ff2d264e57c830", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n+    let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n+    let _ = (0..4).filter_map(|x| match x {\n+        0 | 1 => None,\n+        _ => Some(x),\n+    });\n+\n+    let _ = (0..4).filter_map(|x| Some(x + 1));\n+\n+    let _ = (0..4).filter_map(i32::checked_abs);\n+}"}, {"sha": "045802047d27f8661241f22ac27d7ba394caf23c", "filename": "tests/ui/unnecessary_filter_map.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Funnecessary_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db5c63b77ae022eae16d94fd63ff2d264e57c830/tests%2Fui%2Funnecessary_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_filter_map.stderr?ref=db5c63b77ae022eae16d94fd63ff2d264e57c830", "patch": "@@ -0,0 +1,32 @@\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:2:13\n+  |\n+2 |     let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D clippy::unnecessary-filter-map` implied by `-D warnings`\n+\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:3:13\n+  |\n+3 |     let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:4:13\n+  |\n+4 |       let _ = (0..4).filter_map(|x| match x {\n+  |  _____________^\n+5 | |         0 | 1 => None,\n+6 | |         _ => Some(x),\n+7 | |     });\n+  | |______^\n+\n+error: this `.filter_map` can be written more simply using `.map`\n+ --> $DIR/unnecessary_filter_map.rs:9:13\n+  |\n+9 |     let _ = (0..4).filter_map(|x| Some(x + 1));\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}