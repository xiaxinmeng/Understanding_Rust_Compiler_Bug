{"sha": "88e0bea7ca8966c5ee57915cf5afa128168595b2", "node_id": "C_kwDOAAsO6NoAKDg4ZTBiZWE3Y2E4OTY2YzVlZTU3OTE1Y2Y1YWZhMTI4MTY4NTk1YjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-30T12:37:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-30T12:37:02Z"}, "message": "Rollup merge of #90395 - b-naber:const-expr-type-relation, r=oli-obk\n\nRestrict liveness of mutable borrow of inner infcx in ConstInferUnifier::consts\n\nFixes https://github.com/rust-lang/rust/issues/89304\n\nr? ``@oli-obk``", "tree": {"sha": "80c547167275c0298df4f2c20823d9ef5d26eb08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c547167275c0298df4f2c20823d9ef5d26eb08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e0bea7ca8966c5ee57915cf5afa128168595b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhfTxuCRBK7hj4Ov3rIwAAj9QIAAFCKLx4F4t+RZBAoAqbhbvr\nbSsYPyxwB/REVeRJiPyUpGLZOeR8xZWMU1C+4SsVAg9IVj+9K2aBCemuiGMMTYfk\nrJ7SMrvzkyUVBt/BH3XkUYmMs07MzmDPd0ou2BlS6QoKd0xZot2thPAjApZryv0W\nfcuBGJ0K18M7foE1GiZBG+Uk6KJicfyk1k0OwY7CJh5JQL92eNXerl9ByyHGDCeX\niYtIqB81otPOYbQ2n+T6Jcj2u9GJmTehM2us7uLRy+LsE+NVIAUzCfJpksZqGnLg\nYzfWUXrODQbCmmFTTF7JVzyCy2J1bA7S1fxEF4s6GfqYU3C7tDM3cyqQGGNfc9A=\n=7J41\n-----END PGP SIGNATURE-----\n", "payload": "tree 80c547167275c0298df4f2c20823d9ef5d26eb08\nparent b531364a1a8af28ad78e52cf0a9bf657640aa17c\nparent a39c50b64caca297b3e98ebf7cdb68c96ca0f3c1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635597422 +0200\ncommitter GitHub <noreply@github.com> 1635597422 +0200\n\nRollup merge of #90395 - b-naber:const-expr-type-relation, r=oli-obk\n\nRestrict liveness of mutable borrow of inner infcx in ConstInferUnifier::consts\n\nFixes https://github.com/rust-lang/rust/issues/89304\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e0bea7ca8966c5ee57915cf5afa128168595b2", "html_url": "https://github.com/rust-lang/rust/commit/88e0bea7ca8966c5ee57915cf5afa128168595b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e0bea7ca8966c5ee57915cf5afa128168595b2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b531364a1a8af28ad78e52cf0a9bf657640aa17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b531364a1a8af28ad78e52cf0a9bf657640aa17c", "html_url": "https://github.com/rust-lang/rust/commit/b531364a1a8af28ad78e52cf0a9bf657640aa17c"}, {"sha": "a39c50b64caca297b3e98ebf7cdb68c96ca0f3c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c50b64caca297b3e98ebf7cdb68c96ca0f3c1", "html_url": "https://github.com/rust-lang/rust/commit/a39c50b64caca297b3e98ebf7cdb68c96ca0f3c1"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "09bfb3290f4ca7d8f4956d6cb379bf2cde3fec34", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/88e0bea7ca8966c5ee57915cf5afa128168595b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e0bea7ca8966c5ee57915cf5afa128168595b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=88e0bea7ca8966c5ee57915cf5afa128168595b2", "patch": "@@ -866,6 +866,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug_assert_eq!(t, _t);\n         debug!(\"ConstInferUnifier: t={:?}\", t);\n@@ -941,6 +942,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n         c: &'tcx ty::Const<'tcx>,\n@@ -951,29 +953,38 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n         match c.val {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variable_table = &mut inner.const_unification_table();\n-\n                 // Check if the current unification would end up\n                 // unifying `target_vid` with a const which contains\n                 // an inference variable which is unioned with `target_vid`.\n                 //\n                 // Not doing so can easily result in stack overflows.\n-                if variable_table.unioned(self.target_vid, vid) {\n+                if self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .const_unification_table()\n+                    .unioned(self.target_vid, vid)\n+                {\n                     return Err(TypeError::CyclicConst(c));\n                 }\n \n-                let var_value = variable_table.probe_value(vid);\n+                let var_value =\n+                    self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n                 match var_value.val {\n                     ConstVariableValue::Known { value: u } => self.consts(u, u),\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n                         } else {\n-                            let new_var_id = variable_table.new_key(ConstVarValue {\n-                                origin: var_value.origin,\n-                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n-                            });\n+                            let new_var_id =\n+                                self.infcx.inner.borrow_mut().const_unification_table().new_key(\n+                                    ConstVarValue {\n+                                        origin: var_value.origin,\n+                                        val: ConstVariableValue::Unknown {\n+                                            universe: self.for_universe,\n+                                        },\n+                                    },\n+                                );\n                             Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n                         }\n                     }"}, {"sha": "d544d637cc490e258e4cae215c7c297842c6e77b", "filename": "src/test/ui/const-generics/issues/issue-89304.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88e0bea7ca8966c5ee57915cf5afa128168595b2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e0bea7ca8966c5ee57915cf5afa128168595b2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs?ref=88e0bea7ca8966c5ee57915cf5afa128168595b2", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct GenericStruct<const T: usize> { val: i64 }\n+\n+impl<const T: usize> From<GenericStruct<T>> for GenericStruct<{T + 1}> {\n+    fn from(other: GenericStruct<T>) -> Self {\n+        Self { val: other.val }\n+    }\n+}\n+\n+impl<const T: usize> From<GenericStruct<{T + 1}>> for GenericStruct<T> {\n+    fn from(other: GenericStruct<{T + 1}>) -> Self {\n+        Self { val: other.val }\n+    }\n+}\n+\n+fn main() {}"}]}