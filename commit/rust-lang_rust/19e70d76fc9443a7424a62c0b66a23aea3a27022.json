{"sha": "19e70d76fc9443a7424a62c0b66a23aea3a27022", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTcwZDc2ZmM5NDQzYTc0MjRhNjJjMGI2NmEyM2FlYTNhMjcwMjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-12T22:49:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-12T22:49:35Z"}, "message": "Guard a bunch more logging calls. Cut 10s off rustc compile time.", "tree": {"sha": "7bac915cf8377d1780efe3c8454927d2e75319ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bac915cf8377d1780efe3c8454927d2e75319ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e70d76fc9443a7424a62c0b66a23aea3a27022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e70d76fc9443a7424a62c0b66a23aea3a27022", "html_url": "https://github.com/rust-lang/rust/commit/19e70d76fc9443a7424a62c0b66a23aea3a27022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e70d76fc9443a7424a62c0b66a23aea3a27022/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f2e29596647e4ba148af213898ed7edfabcb47", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f2e29596647e4ba148af213898ed7edfabcb47", "html_url": "https://github.com/rust-lang/rust/commit/c1f2e29596647e4ba148af213898ed7edfabcb47"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "02f862e3b1455f1c55be5dff4e27953d40faaf3d", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/19e70d76fc9443a7424a62c0b66a23aea3a27022/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/19e70d76fc9443a7424a62c0b66a23aea3a27022/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=19e70d76fc9443a7424a62c0b66a23aea3a27022", "patch": "@@ -429,27 +429,34 @@ let type_resolving_visitor\n   let visit_slot_identified_pre slot =\n     let slot = resolve_slot_identified slot in\n       htab_put cx.ctxt_all_defns slot.id (DEFN_slot slot.node);\n-      log cx \"collected resolved slot #%d with type %s\" (int_of_node slot.id)\n-        (match slot.node.Ast.slot_ty with\n-             None -> \"??\"\n-           | Some t -> (Fmt.fmt_to_str Ast.fmt_ty t));\n+      iflog cx\n+        (fun _ ->\n+           log cx \"collected resolved slot #%d with type %s\"\n+             (int_of_node slot.id)\n+             (match slot.node.Ast.slot_ty with\n+                  None -> \"??\"\n+                | Some t -> (Fmt.fmt_to_str Ast.fmt_ty t)));\n       inner.Walk.visit_slot_identified_pre slot\n   in\n \n   let visit_mod_item_pre id params item =\n     let resolve_and_store_type _ =\n       let t = ty_of_mod_item item in\n       let ty = resolve_ty ~loc:item.id t in\n-        log cx \"resolved item %s, type as %a\" id Ast.sprintf_ty ty;\n+        iflog cx\n+          (fun _ ->\n+             log cx \"resolved item %s, type as %a\" id Ast.sprintf_ty ty);\n         htab_put cx.ctxt_all_item_types item.id ty;\n     in\n     begin\n       try\n         match item.node.Ast.decl_item with\n             Ast.MOD_ITEM_type (_, ty) ->\n               let ty = resolve_ty ~loc:item.id ty in\n-                log cx \"resolved item %s, defining type %a\"\n-                  id Ast.sprintf_ty ty;\n+                iflog cx\n+                  (fun _ ->\n+                     log cx \"resolved item %s, defining type %a\"\n+                       id Ast.sprintf_ty ty);\n                 htab_put cx.ctxt_all_type_items item.id ty;\n                 htab_put cx.ctxt_all_item_types item.id Ast.TY_type;\n                 if Hashtbl.mem cx.ctxt_all_item_names item.id then\n@@ -492,7 +499,9 @@ let type_resolving_visitor\n \n   let visit_obj_fn_pre obj ident fn =\n     let fty = resolve_ty ~loc:fn.id (Ast.TY_fn (ty_fn_of_fn fn.node)) in\n-      log cx \"resolved obj fn %s as %a\" ident Ast.sprintf_ty fty;\n+      iflog cx\n+        (fun _ ->\n+           log cx \"resolved obj fn %s as %a\" ident Ast.sprintf_ty fty);\n       htab_put cx.ctxt_all_item_types fn.id fty;\n       inner.Walk.visit_obj_fn_pre obj ident fn\n   in\n@@ -629,20 +638,23 @@ let lval_base_resolving_visitor\n     (inner:Walk.visitor)\n     : Walk.visitor =\n   let lookup_defn_by_ident id ident =\n-    log cx \"looking up slot or item with ident '%s'\" ident;\n+    iflog cx\n+      (fun _ -> log cx \"looking up slot or item with ident '%s'\" ident);\n     match lookup cx (!scopes) (Ast.KEY_ident ident) with\n         RES_failed _ -> err (Some id) \"unresolved identifier '%s'\" ident\n-      | RES_ok (_, id) -> (log cx \"resolved to node id #%d\"\n-                           (int_of_node id); id)\n+      | RES_ok (_, id) -> ((iflog cx (fun _ -> log cx \"resolved to node id #%d\"\n+                                        (int_of_node id))); id)\n   in\n   let lookup_slot_by_temp id temp =\n-    log cx \"looking up temp slot #%d\" (int_of_temp temp);\n+    iflog cx (fun _ -> log cx \"looking up temp slot #%d\" (int_of_temp temp));\n     let res = lookup cx (!scopes) (Ast.KEY_temp temp) in\n       match res with\n           RES_failed _ -> err\n             (Some id) \"unresolved temp node #%d\" (int_of_temp temp)\n         | RES_ok (_, id) ->\n-            (log cx \"resolved to node id #%d\" (int_of_node id); id)\n+            (iflog cx\n+               (fun _ -> log cx \"resolved to node id #%d\" (int_of_node id));\n+             id)\n   in\n   let lookup_defn_by_name_base id nb =\n     match nb with"}, {"sha": "4f7172197c89e726bf8db5d8ef7ebfbb12f693be", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19e70d76fc9443a7424a62c0b66a23aea3a27022/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/19e70d76fc9443a7424a62c0b66a23aea3a27022/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=19e70d76fc9443a7424a62c0b66a23aea3a27022", "patch": "@@ -2925,8 +2925,9 @@ let trans_visitor\n     let (dst_cell, dst_ty) =\n       deref_ty DEREF_one_box true dst_cell dst_ty\n     in\n-    let _ = log cx \"init_box: dst ty %a, src ty %a\"\n-      Ast.sprintf_ty dst_ty Ast.sprintf_ty src_ty\n+    let _ =\n+      iflog (fun _ -> log cx \"init_box: dst ty %a, src ty %a\"\n+               Ast.sprintf_ty dst_ty Ast.sprintf_ty src_ty)\n     in\n     let _ = assert (dst_ty = src_ty) in\n       trans_copy_ty (get_ty_params_of_current_frame()) true\n@@ -2971,7 +2972,7 @@ let trans_visitor\n       td\n \n   and get_tydesc (idopt:node_id option) (ty:Ast.ty) : Il.cell =\n-    log cx \"getting tydesc for %a\" Ast.sprintf_ty ty;\n+    iflog (fun _ -> log cx \"getting tydesc for %a\" Ast.sprintf_ty ty);\n     let (ty', mut) = simplified_ty_innermost_was_mutable ty in\n     match ty' with\n         Ast.TY_param (idx, _) ->\n@@ -4402,8 +4403,8 @@ let trans_visitor\n       (arg_slot:Ast.slot)\n       (arg:Ast.atom)\n       : unit =\n-    log cx \"trans_argN: arg slot %a, arg atom %a\"\n-      Ast.sprintf_slot arg_slot Ast.sprintf_atom arg;\n+    iflog (fun _ -> log cx \"trans_argN: arg slot %a, arg atom %a\"\n+             Ast.sprintf_slot arg_slot Ast.sprintf_atom arg);\n     trans_init_slot_from_atom clone arg_cell arg_slot arg\n \n   and code_of_cell (cell:Il.cell) : Il.code ="}]}