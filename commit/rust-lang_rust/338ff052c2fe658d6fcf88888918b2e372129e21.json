{"sha": "338ff052c2fe658d6fcf88888918b2e372129e21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGZmMDUyYzJmZTY1OGQ2ZmNmODg4ODg5MThiMmUzNzIxMjllMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:41:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:41:04Z"}, "message": "Simplify HasSource", "tree": {"sha": "6551407c9053a4e521a3f4cda018b8b1c1f9cb00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6551407c9053a4e521a3f4cda018b8b1c1f9cb00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338ff052c2fe658d6fcf88888918b2e372129e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338ff052c2fe658d6fcf88888918b2e372129e21", "html_url": "https://github.com/rust-lang/rust/commit/338ff052c2fe658d6fcf88888918b2e372129e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338ff052c2fe658d6fcf88888918b2e372129e21/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "html_url": "https://github.com/rust-lang/rust/commit/e5bcb69e4f88c7536b1039a881816cb8f1c1f867"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "402f821bf9f8b9010bc49dd8adc56c54481c4087", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/338ff052c2fe658d6fcf88888918b2e372129e21/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338ff052c2fe658d6fcf88888918b2e372129e21/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=338ff052c2fe658d6fcf88888918b2e372129e21", "patch": "@@ -5,24 +5,24 @@ use hir_expand::either::Either;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, HirDatabase},\n     ids::AstItemDef,\n-    Const, Enum, EnumVariant, FieldSource, Function, HasBody, MacroDef, Module, ModuleSource,\n-    Static, Struct, StructField, Trait, TypeAlias, Union, Import\n+    Const, Enum, EnumVariant, FieldSource, Function, HasBody, Import, MacroDef, Module,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n \n pub trait HasSource {\n     type Ast;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast>;\n+    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast>;\n }\n \n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n /// definition and declaration.\n impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ModuleSource> {\n+    pub fn definition_source(self, db: &impl DefDatabase) -> Source<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let src = def_map[self.id.module_id].definition_source(db);\n         src.map(|it| match it {\n@@ -33,18 +33,15 @@ impl Module {\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n-    pub fn declaration_source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> Option<Source<ast::Module>> {\n+    pub fn declaration_source(self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n         def_map[self.id.module_id].declaration_source(db)\n     }\n }\n \n impl HasSource for StructField {\n     type Ast = FieldSource;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n+    fn source(self, db: &impl DefDatabase) -> Source<FieldSource> {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db);\n         src.map(|it| match it[self.id].clone() {\n@@ -55,69 +52,69 @@ impl HasSource for StructField {\n }\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n         self.id.0.source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::StructDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n         self.id.0.source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::EnumDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumVariant> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumVariant> {\n         self.parent.id.child_source(db).map(|map| map[self.id].clone())\n     }\n }\n impl HasSource for Function {\n     type Ast = ast::FnDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::FnDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::FnDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Const {\n     type Ast = ast::ConstDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ConstDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::ConstDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Static {\n     type Ast = ast::StaticDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StaticDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StaticDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for Trait {\n     type Ast = ast::TraitDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::TraitDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::TraitDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::TypeAliasDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::TypeAliasDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::MacroCall> {\n         Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n impl HasSource for Import {\n     type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n \n     /// Returns the syntax of the last path segment corresponding to this import\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast> {\n+    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast> {\n         let src = self.parent.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n         src.with_value(source_map.get(&src.value, self.id))"}]}