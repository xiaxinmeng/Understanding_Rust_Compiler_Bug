{"sha": "a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWQ4NWIyZmU1ZWJjMjViY2M1NGM3YTllNmNlM2I5OGNlMDBiN2M=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-13T20:39:50Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-13T21:19:19Z"}, "message": "add a per-param-env cache to `impls_bound`\n\nThere used to be only a global cache, which led to uncached calls to\ntrait selection when there were type parameters.\n\nI'm running a check that there are no adverse performance effects.\n\nFixes #37106 (drop elaboration times are now ~half of borrow checking,\nso might still be worthy of optimization, but not critical).", "tree": {"sha": "995b2540d5c052c0f2d5dd772c6d6fbd524a6ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995b2540d5c052c0f2d5dd772c6d6fbd524a6ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "html_url": "https://github.com/rust-lang/rust/commit/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34318dd538bf4c9175e4138b3e4188ea8211620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34318dd538bf4c9175e4138b3e4188ea8211620", "html_url": "https://github.com/rust-lang/rust/commit/d34318dd538bf4c9175e4138b3e4188ea8211620"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "dbaa8db3e8971b2c47972aafa800a8627d5071c0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "patch": "@@ -336,7 +336,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'tcx> {\n+    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'gcx> {\n         self.infcx.param_env()\n     }\n "}, {"sha": "82f3c37b7b1a055995a485118a0aa608f402e1d9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "patch": "@@ -34,7 +34,7 @@ use util::nodemap::FnvHashMap;\n \n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n use std::hash::{Hash, Hasher};\n use std::iter;\n use std::ops::Deref;\n@@ -1220,6 +1220,12 @@ pub struct ParameterEnvironment<'tcx> {\n     /// regions don't have this implicit scope and instead introduce\n     /// relationships in the environment.\n     pub free_id_outlive: CodeExtent,\n+\n+    /// A cache for `moves_by_default`.\n+    pub is_copy_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n+\n+    /// A cache for `type_is_sized`\n+    pub is_sized_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n }\n \n impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n@@ -1232,6 +1238,8 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             implicit_region_bound: self.implicit_region_bound,\n             caller_bounds: caller_bounds,\n             free_id_outlive: self.free_id_outlive,\n+            is_copy_cache: RefCell::new(FnvHashMap()),\n+            is_sized_cache: RefCell::new(FnvHashMap()),\n         }\n     }\n \n@@ -2773,7 +2781,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             free_substs: Substs::empty(self),\n             caller_bounds: Vec::new(),\n             implicit_region_bound: self.mk_region(ty::ReEmpty),\n-            free_id_outlive: free_id_outlive\n+            free_id_outlive: free_id_outlive,\n+            is_copy_cache: RefCell::new(FnvHashMap()),\n+            is_sized_cache: RefCell::new(FnvHashMap()),\n         }\n     }\n \n@@ -2844,6 +2854,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             implicit_region_bound: tcx.mk_region(ty::ReScope(free_id_outlive)),\n             caller_bounds: predicates,\n             free_id_outlive: free_id_outlive,\n+            is_copy_cache: RefCell::new(FnvHashMap()),\n+            is_sized_cache: RefCell::new(FnvHashMap()),\n         };\n \n         let cause = traits::ObligationCause::misc(span, free_id_outlive.node_id(&self.region_maps));"}, {"sha": "5948e02620eca30bd99ae5b856d772017ceb412c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "patch": "@@ -901,23 +901,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::ParameterEnvironment {\n-            free_substs: self.free_substs.fold_with(folder),\n-            implicit_region_bound: self.implicit_region_bound.fold_with(folder),\n-            caller_bounds: self.caller_bounds.fold_with(folder),\n-            free_id_outlive: self.free_id_outlive,\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.free_substs.visit_with(visitor) ||\n-            self.implicit_region_bound.visit_with(visitor) ||\n-            self.caller_bounds.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::error::ExpectedFound<T> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::error::ExpectedFound {"}, {"sha": "5b0f43e3cf1f2d2edf850e351a08760dd11a2d49", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "patch": "@@ -20,9 +20,11 @@ use ty::{Disr, ParameterEnvironment};\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::TypeVariants::*;\n+use util::nodemap::FnvHashMap;\n \n use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n \n+use std::cell::RefCell;\n use std::cmp;\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n@@ -579,11 +581,24 @@ impl<'a, 'gcx, 'tcx, H: Hasher> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tc\n impl<'a, 'tcx> ty::TyS<'tcx> {\n     fn impls_bound(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: &ParameterEnvironment<'tcx>,\n-                   bound: ty::BuiltinBound, span: Span) -> bool\n+                   bound: ty::BuiltinBound,\n+                   cache: &RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n+                   span: Span) -> bool\n     {\n-        tcx.infer_ctxt(None, Some(param_env.clone()), Reveal::ExactMatch).enter(|infcx| {\n-            traits::type_known_to_meet_builtin_bound(&infcx, self, bound, span)\n-        })\n+        if self.has_param_types() || self.has_self_ty() {\n+            if let Some(result) = cache.borrow().get(self) {\n+                return *result;\n+            }\n+        }\n+        let result =\n+            tcx.infer_ctxt(None, Some(param_env.clone()), Reveal::ExactMatch)\n+            .enter(|infcx| {\n+                traits::type_known_to_meet_builtin_bound(&infcx, self, bound, span)\n+            });\n+        if self.has_param_types() || self.has_self_ty() {\n+            cache.borrow_mut().insert(self, result);\n+        }\n+        return result;\n     }\n \n     // FIXME (@jroesch): I made this public to use it, not sure if should be private\n@@ -610,7 +625,9 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyArray(..) | TySlice(..) | TyTrait(..) | TyTuple(..) |\n             TyClosure(..) | TyAdt(..) | TyAnon(..) |\n             TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n-        }.unwrap_or_else(|| !self.impls_bound(tcx, param_env, ty::BoundCopy, span));\n+        }.unwrap_or_else(|| {\n+            !self.impls_bound(tcx, param_env, ty::BoundCopy, &param_env.is_copy_cache, span)\n+        });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {\n@@ -650,7 +667,9 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n             TyAdt(..) | TyProjection(..) | TyParam(..) |\n             TyInfer(..) | TyAnon(..) | TyError => None\n-        }.unwrap_or_else(|| self.impls_bound(tcx, param_env, ty::BoundSized, span));\n+        }.unwrap_or_else(|| {\n+            self.impls_bound(tcx, param_env, ty::BoundSized, &param_env.is_sized_cache, span)\n+        });\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {"}, {"sha": "4116a84c74641af7efe68377da1b30df443577bb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a61d85b2fe5ebc25bcc54c7a9e6ce3b98ce00b7c", "patch": "@@ -1458,7 +1458,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn param_env(&self) -> &ty::ParameterEnvironment<'tcx> {\n+    pub fn param_env(&self) -> &ty::ParameterEnvironment<'gcx> {\n         &self.parameter_environment\n     }\n "}]}