{"sha": "6c41192c4188ee3155d44a05a5e41e61088f1938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNDExOTJjNDE4OGVlMzE1NWQ0NGEwNWE1ZTQxZTYxMDg4ZjE5Mzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-04T08:06:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-04T08:06:08Z"}, "message": "Register new snapshots", "tree": {"sha": "baad2a476c6421b7123caa527624b553955565a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baad2a476c6421b7123caa527624b553955565a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c41192c4188ee3155d44a05a5e41e61088f1938", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c41192c4188ee3155d44a05a5e41e61088f1938", "html_url": "https://github.com/rust-lang/rust/commit/6c41192c4188ee3155d44a05a5e41e61088f1938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c41192c4188ee3155d44a05a5e41e61088f1938/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5", "html_url": "https://github.com/rust-lang/rust/commit/e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5"}], "stats": {"total": 353, "additions": 8, "deletions": 345}, "files": [{"sha": "d198fd44450c4ee5bad7a7e3fde504160a3243ed", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -34,11 +34,6 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-#[cfg(stage0)]\n-macro_rules! if_ok (\n-    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-)\n-\n // Utility modules\n \n pub mod c_vec;"}, {"sha": "36f44c8870dcc27c83d502689a4b9346765dc657", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -54,11 +54,6 @@ use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n use syntax::parse;\n \n-#[cfg(stage0)]\n-macro_rules! if_ok (\n-    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-)\n-\n pub mod middle {\n     pub mod trans;\n     pub mod ty;"}, {"sha": "40ad1fb250a86082d2e71c60406c445690a67adf", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -493,11 +493,6 @@ use util;\n use vec::ImmutableVector;\n use vec;\n \n-// NOTE this is just because the `prelude::*` import above includes\n-// default::Default, so the reexport doesn't work.\n-#[cfg(stage0)]\n-pub use Default = fmt::Show; // export required for `format!()` etc.\n-\n pub mod parse;\n pub mod rt;\n "}, {"sha": "168ed5835701907d8c84fb8c092bbacd0315dc1c", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -446,15 +446,4 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         if ! self.inner.visit_type() { return false; }\n         true\n     }\n-\n-    // NOTE remove after next snapshot\n-    #[cfg(stage0)]\n-    fn visit_closure_ptr(&mut self, ck: uint) -> bool {\n-        self.align_to::<proc()>();\n-        if ! self.inner.visit_closure_ptr(ck) {\n-            return false\n-        }\n-        self.bump_past::<proc()>();\n-        true\n-    }\n }"}, {"sha": "4f65e61ec48b54a1c886b44b33b4c8c318e8360d", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -602,10 +602,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }\n-\n-    // NOTE remove after next snapshot\n-    #[cfg(stage0)]\n-    fn visit_closure_ptr(&mut self, _ck: uint) -> bool { true }\n }\n \n pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {"}, {"sha": "00ce07d747f94784abf89fc32c1e245214cba626", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -63,7 +63,6 @@ pub struct AtomicUint {\n  * An unsigned atomic integer type that is forced to be 64-bits. This does not\n  * support all operations.\n  */\n-#[cfg(not(stage0))]\n pub struct AtomicU64 {\n     priv v: u64,\n     priv nopod: marker::NoPod\n@@ -72,30 +71,18 @@ pub struct AtomicU64 {\n /**\n  * An unsafe atomic pointer. Only supports basic atomic operations\n  */\n-#[cfg(not(stage0))]\n pub struct AtomicPtr<T> {\n     priv p: uint,\n     priv nopod: marker::NoPod\n }\n-#[cfg(stage0)]\n-pub struct AtomicPtr<T> {\n-    priv p: *mut T,\n-    priv nopod: marker::NoPod\n-}\n \n /**\n  * An owned atomic pointer. Ensures that only a single reference to the data is held at any time.\n  */\n #[unsafe_no_drop_flag]\n-#[cfg(not(stage0))]\n pub struct AtomicOption<T> {\n     priv p: uint,\n }\n-#[unsafe_no_drop_flag]\n-#[cfg(stage0)]\n-pub struct AtomicOption<T> {\n-    priv p: *mut u8\n-}\n \n pub enum Ordering {\n     Relaxed,\n@@ -109,7 +96,6 @@ pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0, nopod: marker::NoP\n pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0, nopod: marker::NoPod };\n-#[cfg(not(stage0))]\n pub static INIT_ATOMIC_U64 : AtomicU64 = AtomicU64 { v: 0, nopod: marker::NoPod };\n \n impl AtomicFlag {\n@@ -239,7 +225,6 @@ impl AtomicInt {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl AtomicU64 {\n     pub fn new(v: u64) -> AtomicU64 {\n         AtomicU64 { v:v, nopod: marker::NoPod }\n@@ -315,77 +300,41 @@ impl AtomicUint {\n }\n \n impl<T> AtomicPtr<T> {\n-    #[cfg(stage0)]\n-    pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: p, nopod: marker::NoPod }\n-    }\n-    #[cfg(not(stage0))]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: p as uint, nopod: marker::NoPod }\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     pub fn load(&self, order: Ordering) -> *mut T {\n         unsafe {\n             atomic_load(&self.p, order) as *mut T\n         }\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     pub fn store(&mut self, ptr: *mut T, order: Ordering) {\n         unsafe { atomic_store(&mut self.p, ptr as uint, order); }\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     pub fn swap(&mut self, ptr: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_swap(&mut self.p, ptr as uint, order) as *mut T }\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     pub fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order: Ordering) -> *mut T {\n         unsafe {\n             atomic_compare_and_swap(&mut self.p, old as uint,\n                                     new as uint, order) as *mut T\n         }\n     }\n-\n-    #[inline]\n-    #[cfg(stage0)]\n-    pub fn load(&self, order: Ordering) -> *mut T {\n-        unsafe { atomic_load(&self.p, order) }\n-    }\n-\n-    #[inline]\n-    #[cfg(stage0)]\n-    pub fn store(&mut self, ptr: *mut T, order: Ordering) {\n-        unsafe { atomic_store(&mut self.p, ptr, order); }\n-    }\n-\n-    #[inline]\n-    #[cfg(stage0)]\n-    pub fn swap(&mut self, ptr: *mut T, order: Ordering) -> *mut T {\n-        unsafe { atomic_swap(&mut self.p, ptr, order) }\n-    }\n-\n-    #[inline]\n-    #[cfg(stage0)]\n-    pub fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order: Ordering) -> *mut T {\n-        unsafe { atomic_compare_and_swap(&mut self.p, old, new, order) }\n-    }\n }\n \n impl<T> AtomicOption<T> {\n     pub fn new(p: ~T) -> AtomicOption<T> {\n         unsafe { AtomicOption { p: cast::transmute(p) } }\n     }\n \n-    #[cfg(stage0)]\n-    pub fn empty() -> AtomicOption<T> { AtomicOption { p: 0 as *mut u8 } }\n-    #[cfg(not(stage0))]\n     pub fn empty() -> AtomicOption<T> { AtomicOption { p: 0 } }\n \n     #[inline]\n@@ -439,18 +388,6 @@ impl<T> Drop for AtomicOption<T> {\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_store<T>(dst: &mut T, val: T, order:Ordering) {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Release => intrinsics::atomic_store_rel(dst, val),\n-        Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n-        _       => intrinsics::atomic_store(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_store<T>(dst: &mut T, val: T, order:Ordering) {\n     match order {\n@@ -460,17 +397,6 @@ pub unsafe fn atomic_store<T>(dst: &mut T, val: T, order:Ordering) {\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_load<T>(dst: &T, order:Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_load_acq(dst),\n-        Relaxed => intrinsics::atomic_load_relaxed(dst),\n-        _       => intrinsics::atomic_load(dst)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_load<T>(dst: &T, order:Ordering) -> T {\n     match order {\n@@ -480,20 +406,6 @@ pub unsafe fn atomic_load<T>(dst: &T, order:Ordering) -> T {\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_swap<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_xchg_acq(dst, val),\n-        Release => intrinsics::atomic_xchg_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xchg_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n-        _       => intrinsics::atomic_xchg(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_swap<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -506,21 +418,6 @@ pub unsafe fn atomic_swap<T>(dst: &mut T, val: T, order: Ordering) -> T {\n }\n \n /// Returns the old value (like __sync_fetch_and_add).\n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_add<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_xadd_acq(dst, val),\n-        Release => intrinsics::atomic_xadd_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xadd_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n-        _       => intrinsics::atomic_xadd(dst, val)\n-    })\n-}\n-/// Returns the old value (like __sync_fetch_and_add).\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_add<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -533,21 +430,6 @@ pub unsafe fn atomic_add<T>(dst: &mut T, val: T, order: Ordering) -> T {\n }\n \n /// Returns the old value (like __sync_fetch_and_sub).\n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_sub<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_xsub_acq(dst, val),\n-        Release => intrinsics::atomic_xsub_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xsub_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n-        _       => intrinsics::atomic_xsub(dst, val)\n-    })\n-}\n-/// Returns the old value (like __sync_fetch_and_sub).\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_sub<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -559,21 +441,6 @@ pub unsafe fn atomic_sub<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_compare_and_swap<T>(dst:&mut T, old:T, new:T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let new = cast::transmute(new);\n-    let old = cast::transmute(old);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_cxchg_acq(dst, old, new),\n-        Release => intrinsics::atomic_cxchg_rel(dst, old, new),\n-        AcqRel  => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n-        Relaxed => intrinsics::atomic_cxchg_relaxed(dst, old, new),\n-        _       => intrinsics::atomic_cxchg(dst, old, new),\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_compare_and_swap<T>(dst:&mut T, old:T, new:T, order: Ordering) -> T {\n     match order {\n@@ -585,20 +452,6 @@ pub unsafe fn atomic_compare_and_swap<T>(dst:&mut T, old:T, new:T, order: Orderi\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_and<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_and_acq(dst, val),\n-        Release => intrinsics::atomic_and_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_and_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n-        _       => intrinsics::atomic_and(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_and<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -610,20 +463,6 @@ pub unsafe fn atomic_and<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_nand<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_nand_acq(dst, val),\n-        Release => intrinsics::atomic_nand_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_nand_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n-        _       => intrinsics::atomic_nand(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_nand<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -636,20 +475,6 @@ pub unsafe fn atomic_nand<T>(dst: &mut T, val: T, order: Ordering) -> T {\n }\n \n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_or<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_or_acq(dst, val),\n-        Release => intrinsics::atomic_or_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_or_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n-        _       => intrinsics::atomic_or(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_or<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -662,20 +487,6 @@ pub unsafe fn atomic_or<T>(dst: &mut T, val: T, order: Ordering) -> T {\n }\n \n \n-#[cfg(stage0)]\n-#[inline]\n-pub unsafe fn atomic_xor<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_xor_acq(dst, val),\n-        Release => intrinsics::atomic_xor_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_xor_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n-        _       => intrinsics::atomic_xor(dst, val)\n-    })\n-}\n-#[cfg(not(stage0))]\n #[inline]\n pub unsafe fn atomic_xor<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     match order {\n@@ -796,7 +607,6 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(not(stage0))]\n     fn different_sizes() {\n         unsafe {\n             let mut slot = 0u16;"}, {"sha": "ca49576ab2dddb77a9d518e8f73c5dabf199c12b", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -56,11 +56,6 @@ pub struct TyDesc {\n     // alignof(T)\n     align: uint,\n \n-    // Called on a copy of a value of type `T` *after* memcpy\n-    // NOTE remove after next snapshot\n-    #[cfg(stage0)]\n-    take_glue: GlueFn,\n-\n     // Called when a value of type `T` is no longer needed\n     drop_glue: GlueFn,\n \n@@ -166,121 +161,8 @@ pub trait TyVisitor {\n     fn visit_param(&mut self, i: uint) -> bool;\n     fn visit_self(&mut self) -> bool;\n     fn visit_type(&mut self) -> bool;\n-\n-    // NOTE remove after next snapshot\n-    #[cfg(stage0)]\n-    fn visit_closure_ptr(&mut self, ck: uint) -> bool;\n-}\n-\n-#[cfg(stage0)]\n-extern \"rust-intrinsic\" {\n-    /// Atomic compare and exchange, sequentially consistent.\n-    pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n-    /// Atomic compare and exchange, acquire ordering.\n-    pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n-    /// Atomic compare and exchange, release ordering.\n-    pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n-\n-    pub fn atomic_cxchg_acqrel(dst: &mut int, old: int, src: int) -> int;\n-    pub fn atomic_cxchg_relaxed(dst: &mut int, old: int, src: int) -> int;\n-\n-\n-    /// Atomic load, sequentially consistent.\n-    pub fn atomic_load(src: &int) -> int;\n-    /// Atomic load, acquire ordering.\n-    pub fn atomic_load_acq(src: &int) -> int;\n-\n-    pub fn atomic_load_relaxed(src: &int) -> int;\n-\n-    /// Atomic store, sequentially consistent.\n-    pub fn atomic_store(dst: &mut int, val: int);\n-    /// Atomic store, release ordering.\n-    pub fn atomic_store_rel(dst: &mut int, val: int);\n-\n-    pub fn atomic_store_relaxed(dst: &mut int, val: int);\n-\n-    /// Atomic exchange, sequentially consistent.\n-    pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n-    /// Atomic exchange, acquire ordering.\n-    pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-    /// Atomic exchange, release ordering.\n-    pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xchg_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xchg_relaxed(dst: &mut int, src: int) -> int;\n-\n-    /// Atomic addition, sequentially consistent.\n-    pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n-    /// Atomic addition, acquire ordering.\n-    pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-    /// Atomic addition, release ordering.\n-    pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xadd_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xadd_relaxed(dst: &mut int, src: int) -> int;\n-\n-    /// Atomic subtraction, sequentially consistent.\n-    pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n-    /// Atomic subtraction, acquire ordering.\n-    pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n-    /// Atomic subtraction, release ordering.\n-    pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xsub_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xsub_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_and(dst: &mut int, src: int) -> int;\n-    pub fn atomic_and_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_and_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_and_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_and_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_nand(dst: &mut int, src: int) -> int;\n-    pub fn atomic_nand_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_nand_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_nand_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_nand_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_or(dst: &mut int, src: int) -> int;\n-    pub fn atomic_or_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_or_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_or_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_or_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_xor(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xor_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xor_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xor_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_xor_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_max(dst: &mut int, src: int) -> int;\n-    pub fn atomic_max_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_max_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_max_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_max_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_min(dst: &mut int, src: int) -> int;\n-    pub fn atomic_min_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_min_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_min_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_min_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_umin(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umin_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umin_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umin_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umin_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_umax(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umax_acq(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umax_rel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umax_acqrel(dst: &mut int, src: int) -> int;\n-    pub fn atomic_umax_relaxed(dst: &mut int, src: int) -> int;\n-\n-    pub fn atomic_fence();\n-    pub fn atomic_fence_acq();\n-    pub fn atomic_fence_rel();\n-    pub fn atomic_fence_acqrel();\n }\n \n-#[cfg(not(stage0))]\n extern \"rust-intrinsic\" {\n     pub fn atomic_cxchg<T>(dst: &mut T, old: T, src: T) -> T;\n     pub fn atomic_cxchg_acq<T>(dst: &mut T, old: T, src: T) -> T;\n@@ -366,9 +248,7 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_fence_acq();\n     pub fn atomic_fence_rel();\n     pub fn atomic_fence_acqrel();\n-}\n \n-extern \"rust-intrinsic\" {\n     /// Abort the execution of the process.\n     pub fn abort() -> !;\n "}, {"sha": "e2460b0171a20776d7dec120fb6f2d6442e7f603", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -33,11 +33,6 @@ This API is completely unstable and subject to change.\n extern mod extra;\n extern mod term;\n \n-#[cfg(stage0)]\n-macro_rules! if_ok (\n-    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-)\n-\n pub mod util {\n     pub mod interner;\n     #[cfg(test)]"}, {"sha": "8cf463dd88a808bf4d3bb166ae85baa7efddf39a", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6c41192c4188ee3155d44a05a5e41e61088f1938/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=6c41192c4188ee3155d44a05a5e41e61088f1938", "patch": "@@ -1,3 +1,11 @@\n+S 2014-02-03 346d378\n+  freebsd-x86_64 d369c1a83a2be6eb42bd0e550a1adc38ffed0804\n+  linux-i386 a6d4ab441f5b285d7aecbb940fa733526b413f34\n+  linux-x86_64 83c3e5e74e8c359a557bb281ced7b4d9e53c91dd\n+  macos-i386 e42877c707ace1a79d58317b5f3ff6f8d3fdd849\n+  macos-x86_64 77769bbcda13e7763ed81aecdf183ebebf7b0a74\n+  winnt-i386 9482b0930db28f681a6c01a5480982e5c5f9564f\n+\n S 2014-01-20 b6400f9\n   freebsd-x86_64 22b1774700781d190061e66666fdc5f9e9c414ee\n   linux-i386 ca6d66dcbe90806e50a46037c3102cffecce14ed"}]}