{"sha": "c4ffe680e3fdb2240d810a311327d1268681af1d", "node_id": "C_kwDOAAsO6NoAKGM0ZmZlNjgwZTNmZGIyMjQwZDgxMGEzMTEzMjdkMTI2ODY4MWFmMWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-21T16:30:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-23T13:49:02Z"}, "message": "Require local annotations for local diagnostics", "tree": {"sha": "428094d4fd091cfd3932772fbd7ba21a48e13f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/428094d4fd091cfd3932772fbd7ba21a48e13f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ffe680e3fdb2240d810a311327d1268681af1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ffe680e3fdb2240d810a311327d1268681af1d", "html_url": "https://github.com/rust-lang/rust/commit/c4ffe680e3fdb2240d810a311327d1268681af1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ffe680e3fdb2240d810a311327d1268681af1d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6641963afe6de73650551111ee399df74ff55db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6641963afe6de73650551111ee399df74ff55db", "html_url": "https://github.com/rust-lang/rust/commit/f6641963afe6de73650551111ee399df74ff55db"}], "stats": {"total": 87, "additions": 33, "deletions": 54}, "files": [{"sha": "fcdeaa0ffea289a6194104f871a1bc81a05765db", "filename": "tests/fail/abort-terminator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fabort-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fabort-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fabort-terminator.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,7 +1,6 @@\n-// error-pattern: the program aborted\n #![feature(c_unwind)]\n \n-extern \"C\" fn panic_abort() {\n+extern \"C\" fn panic_abort() { //~ ERROR: the program aborted\n     panic!()\n }\n "}, {"sha": "23fa38d88128800487b31648789933b7235b762f", "filename": "tests/fail/concurrency/too_few_args.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// error-pattern: callee has fewer arguments than expected\n \n //! The thread function must have exactly one argument.\n \n@@ -10,7 +9,7 @@ extern crate libc;\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start() -> *mut libc::c_void {\n-    panic!()\n+    panic!() //~ ERROR: callee has fewer arguments than expected\n }\n \n fn main() {"}, {"sha": "af5a377a04e4be9287c1dd6b128cd5f43213243d", "filename": "tests/fail/concurrency/too_many_args.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// error-pattern: callee has more arguments than expected\n \n //! The thread function must have exactly one argument.\n \n@@ -10,7 +9,7 @@ extern crate libc;\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void, _x: i32) -> *mut libc::c_void {\n-    panic!()\n+    panic!() //~ ERROR: callee has more arguments than expected\n }\n \n fn main() {"}, {"sha": "9e6088be7a7eeae88c3e1fb9557246887eac0b07", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,6 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n // compile-flags: -Zmiri-disable-abi-check\n-// error-pattern: unwinding past the topmost frame of the stack\n \n //! Unwinding past the top frame of a stack is Undefined Behavior.\n \n@@ -11,6 +10,7 @@ extern crate libc;\n use std::{mem, ptr};\n \n extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+//~^ ERROR unwinding past the topmost frame of the stack\n     panic!()\n }\n "}, {"sha": "f72f01a9d6e9786587773ca4bd201cfd208d718d", "filename": "tests/fail/concurrency/unwind_top_of_stack.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -4,6 +4,7 @@ error: Undefined Behavior: unwinding past the topmost frame of the stack\n   --> $DIR/unwind_top_of_stack.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+LL | |\n LL | |     panic!()\n LL | | }\n    | |_^ unwinding past the topmost frame of the stack"}, {"sha": "958a9f90ed9832a58430bad0ec552d15e1256826", "filename": "tests/fail/intrinsics/overflowing-unchecked-rsh.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -2,10 +2,9 @@\n \n use std::intrinsics::*;\n \n-// error-pattern: overflowing shift by 64 in `unchecked_shr`\n-\n fn main() {\n     unsafe {\n         let _n = unchecked_shr(1i64, 64);\n+        //~^ ERROR: overflowing shift by 64 in `unchecked_shr`\n     }\n }"}, {"sha": "e606d8b283c8af6cf23e485a1cca3298757023d6", "filename": "tests/fail/intrinsics/uninit_uninhabited_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: attempted to instantiate uninhabited type `!`\n #![feature(never_type)]\n \n #[allow(deprecated, invalid_value)]\n fn main() {\n     unsafe { std::mem::uninitialized::<!>() };\n+    //~^ ERROR: attempted to instantiate uninhabited type `!`\n }"}, {"sha": "6d9ae14c5c47988a912dcbc674d18da5d7611174", "filename": "tests/fail/intrinsics/zero_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,6 +1,5 @@\n-// error-pattern: attempted to zero-initialize type `fn()`, which is invalid\n-\n #[allow(deprecated, invalid_value)]\n fn main() {\n     unsafe { std::mem::zeroed::<fn()>() };\n+    //~^ ERROR: attempted to zero-initialize type `fn()`, which is invalid\n }"}, {"sha": "370b372a7d373822c5d04f6a9d66289b243ae619", "filename": "tests/fail/panic/bad_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fpanic%2Fbad_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fpanic%2Fbad_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_unwind.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,4 +1,3 @@\n-// error-pattern: unwinding past a stack frame that does not allow unwinding\n #![feature(c_unwind)]\n \n //! Unwinding when the caller ABI is \"C\" (without \"-unwind\") is UB.\n@@ -11,4 +10,5 @@ fn main() {\n     let unwind: extern \"C-unwind\" fn() = unwind;\n     let unwind: extern \"C\" fn() = unsafe { std::mem::transmute(unwind) };\n     std::panic::catch_unwind(|| unwind()).unwrap_err();\n+    //~^ ERROR: unwinding past a stack frame that does not allow unwinding\n }"}, {"sha": "dd4707d60e4ca1c6700f81af58a426539328f708", "filename": "tests/fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: No libc on Windows\n-// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -9,6 +8,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get());\n+        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n     }\n }"}, {"sha": "1b460e7174d28f40f8c56fc89fc15d7762ff4596", "filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: No libc on Windows\n-// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -9,6 +8,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_rdlock(rw.get());\n+        libc::pthread_rwlock_rdlock(rw.get()); //~ ERROR: deadlock\n     }\n }"}, {"sha": "cc327ec46bc2989ed0302bb1d91afec0230d6662", "filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: No libc on Windows\n-// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -9,6 +8,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get());\n+        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n     }\n }"}, {"sha": "79286f3e27dd8314764bdf59117069a2d05efaf0", "filename": "tests/fail/transmute_fat1.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,10 +1,13 @@\n-// error-pattern: type validation failed: encountered a pointer\n-// normalize-stderr-test: \"\\[u8; (08|16)\\]\" -> \"$$ARRAY\"\n+#[cfg(target_pointer_width = \"64\")]\n+const N: usize = 16;\n+\n+#[cfg(target_pointer_width = \"32\")]\n+const N: usize = 8;\n \n fn main() {\n-    #[cfg(target_pointer_width = \"64\")]\n-    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 16]>(&[1u8]) };\n-    #[cfg(target_pointer_width = \"32\")]\n-    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 08]>(&[1u8]) };\n+    let bad = unsafe {\n+        std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n+        //~^ ERROR: type validation failed: encountered a pointer\n+    };\n     let _val = bad[0] + bad[bad.len() - 1];\n }"}, {"sha": "baf6195f92ad93e08142158358296ae0db109156", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n   --> $DIR/transmute_fat1.rs:LL:CC\n    |\n-LL |     let bad = unsafe { std::mem::transmute::<&[u8], $ARRAY>(&[1u8]) };\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n+LL |         std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "abee75ec71b17a9929671e0afb02cb2ac7915122", "filename": "tests/fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,14 +1,14 @@\n-// error-pattern: but alignment 4 is required\n-// normalize-stderr-test: \"\\.add\\(1\\)\" -> \"       \"\n+// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n \n fn main() {\n     // No retry needed, this fails reliably.\n \n     let mut x = [0u8; 20];\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n-    // At least one of these is definitely unaligned.\n+    #[rustfmt::skip]\n     unsafe {\n-        *(x_ptr as *mut u32) = 42;\n-        *(x_ptr.add(1) as *mut u32) = 42;\n-    }\n+        // At least one of these is definitely unaligned.\n+        *(x_ptr as *mut u32) = 42; *(x_ptr.add(1) as *mut u32) = 42;\n+        //~^ ERROR: but alignment 4 is required\n+    };\n }"}, {"sha": "5f691d0490954849a6ef0b9de2f02e739082b52b", "filename": "tests/fail/unaligned_pointers/alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/alignment.rs:LL:CC\n    |\n-LL |         *(x_ptr as *mut u32) = 42;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n+LL |         *(x_ptr as *mut u32) = 42; *(x_ptr.add(1) as *mut u32) = 42;\n+   | ^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "30e1296f7b396de5ad01b5c9520a662899609211", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -374,8 +374,6 @@ fn check_annotations(\n     comments: &Comments,\n ) {\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n-        let mut found = false;\n-\n         // first check the diagnostics messages outside of our file. We check this first, so that\n         // you can mix in-file annotations with // error-pattern annotations, even if there is overlap\n         // in the messages.\n@@ -384,22 +382,7 @@ fn check_annotations(\n             .position(|msg| msg.message.contains(error_pattern))\n         {\n             messages_from_unknown_file_or_line.remove(i);\n-            found = true;\n-        }\n-\n-        // if nothing was found, check the ones inside our file. We permit this because some tests may have\n-        // flaky line numbers for their messages.\n-        if !found {\n-            for line in &mut messages {\n-                if let Some(i) = line.iter().position(|msg| msg.message.contains(error_pattern)) {\n-                    line.remove(i);\n-                    found = true;\n-                    break;\n-                }\n-            }\n-        }\n-\n-        if !found {\n+        } else {\n             errors.push(Error::PatternNotFound {\n                 pattern: error_pattern.to_string(),\n                 definition_line,"}, {"sha": "2d3845752e9a5dd74477f7e9df718b6696ddf4f5", "filename": "ui_test/src/rustc_stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ffe680e3fdb2240d810a311327d1268681af1d/ui_test%2Fsrc%2Frustc_stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ffe680e3fdb2240d810a311327d1268681af1d/ui_test%2Fsrc%2Frustc_stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Frustc_stderr.rs?ref=c4ffe680e3fdb2240d810a311327d1268681af1d", "patch": "@@ -116,7 +116,7 @@ impl Span {\n }\n \n pub(crate) fn filter_annotations_from_rendered(rendered: &str) -> std::borrow::Cow<'_, str> {\n-    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n+    let annotations = Regex::new(r\"\\s*//(\\[[^\\]]\\])?~.*\").unwrap();\n     annotations.replace_all(&rendered, \"\")\n }\n "}]}