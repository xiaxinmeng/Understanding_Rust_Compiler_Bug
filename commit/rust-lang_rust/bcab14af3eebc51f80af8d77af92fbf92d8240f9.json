{"sha": "bcab14af3eebc51f80af8d77af92fbf92d8240f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYWIxNGFmM2VlYmM1MWY4MGFmOGQ3N2FmOTJmYmY5MmQ4MjQwZjk=", "commit": {"author": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-04-20T18:50:50Z"}, "committer": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-05-31T10:01:50Z"}, "message": "bootstrap.py: respect crt-static\n\nBootstrap requires serde_derive, which needs proc-macro crate types, so\nit won't work with crt-static.", "tree": {"sha": "f37d58afd5f1f4077c5412c976072ab1c5fb5e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37d58afd5f1f4077c5412c976072ab1c5fb5e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcab14af3eebc51f80af8d77af92fbf92d8240f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcab14af3eebc51f80af8d77af92fbf92d8240f9", "html_url": "https://github.com/rust-lang/rust/commit/bcab14af3eebc51f80af8d77af92fbf92d8240f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcab14af3eebc51f80af8d77af92fbf92d8240f9/comments", "author": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9", "html_url": "https://github.com/rust-lang/rust/commit/bf3b8df697f1ce84e24cd29119ea8dd0e152dbd9"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "28f5192f2cdf455d9e6730f64ce324ab679a8af5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bcab14af3eebc51f80af8d77af92fbf92d8240f9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/bcab14af3eebc51f80af8d77af92fbf92d8240f9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=bcab14af3eebc51f80af8d77af92fbf92d8240f9", "patch": "@@ -489,7 +489,7 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n-    def get_toml(self, key):\n+    def get_toml(self, key, section=None):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n \n         >>> rb = RustBuild()\n@@ -501,12 +501,29 @@ def get_toml(self, key):\n \n         >>> rb.get_toml(\"key3\") is None\n         True\n+\n+        Optionally also matches the section the key appears in\n+\n+        >>> rb.config_toml = '[a]\\\\nkey = \"value1\"\\\\n[b]\\\\nkey = \"value2\"'\n+        >>> rb.get_toml('key', 'a')\n+        'value1'\n+        >>> rb.get_toml('key', 'b')\n+        'value2'\n+        >>> rb.get_toml('key', 'c') is None\n+        True\n         \"\"\"\n+\n+        cur_section = None\n         for line in self.config_toml.splitlines():\n+            section_match = re.match(r'^\\s*\\[(.*)\\]\\s*$', line)\n+            if section_match is not None:\n+                cur_section = section_match.group(1)\n+\n             match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n             if match is not None:\n                 value = match.group(1)\n-                return self.get_string(value) or value.strip()\n+                if section is None or section == cur_section:\n+                    return self.get_string(value) or value.strip()\n         return None\n \n     def cargo(self):\n@@ -589,7 +606,17 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n-        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2\"\n+        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2 \"\n+\n+        build_section = \"target.{}\".format(self.build_triple())\n+        target_features = []\n+        if self.get_toml(\"crt-static\", build_section) == \"true\":\n+            target_features += [\"+crt-static\"]\n+        elif self.get_toml(\"crt-static\", build_section) == \"false\":\n+            target_features += [\"-crt-static\"]\n+        if target_features:\n+            env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n+\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):"}]}