{"sha": "87f5a4b6f299784b97abdece47445d27693314b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZjVhNGI2ZjI5OTc4NGI5N2FiZGVjZTQ3NDQ1ZDI3NjkzMzE0YjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T09:51:37Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T14:43:51Z"}, "message": "Rollup merge of #49231 - gnzlbg:fix_vec_fminmax, r=rkruppe\n\nfix vector fmin/fmax non-fast/fast intrinsics NaN handling\n\nThis bugs shows up in release mode tests of `stdsimd`: https://github.com/rust-lang-nursery/stdsimd/pull/391 . The intrinsics are thoroughly tested there for roundoff errors, NaN, and overflow behavior.\n\nThe problem was that the non-fast intrinsics where specifying `NoNaNs == true`, which meant that they don't support NaNs. This is incorrect, the non-fast intrinsics should handle NaNs properly.\n\nAlso, the \"fast\" intrinsics where specifying `NoNaNs == false` which meant that they support NaNs and then fast-math, which probably disables this support. This was not intended either.\n\nI've added a comment specifying what the boolean flags do.", "tree": {"sha": "be4e2df77ff20b16774004633335e082e3904afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4e2df77ff20b16774004633335e082e3904afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f5a4b6f299784b97abdece47445d27693314b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqzwScACgkQ/vbIBR0O\nATyxKRAAw3CGqWorDrhsTWEafPPIZYrRbFngIobkS9ofGk5CuaNITdaw9VAjun6Q\nsMYETlKiQY7rR4ClkaGY7sXXjbQnTLb59SHJR7BdOfK4/eWD9t6b6zshxLLlbsQo\n3HNPzPIxe5zUQ/MH/9/Z6UNQsPO1n+Nw0yAjB89e+DubmIt19KHFjoGFipMlBieS\n5zlCSTCBUiofPP8e0ObEGWr4XOu+efXm0eRs0J3MN1xT2GZ2Zqg0beQjvWvzj8Gc\nvzqUfnVTMtL3DTL2PAHFpnuj+8z95lOhun03IgbskzwmXpKIvfD7UpVwZ4MV4IPJ\nGKdwP9B+gCFTHpaAyDWBhXrNHMGvfXKZx1BOqc+W7th1vLu1SuE1V9Wzu33PcT0x\nwiT1Dlr87RMws5lqlGRm4I8pPHB09C0+XGxiLD8BLheZ/pJ7Wn5ibq0ZgoAImtmf\np0CqynfRWg74mDNLfrg3C5TFKQVLXKp43NW7pQrzVxtQvGU1UvVo175IxMpd6zLH\nDrLf5cUWaECNaVTAYodmzD+LvMXqdp0p9Q392ta1dpqwZpfad2Bexrs8pA3IHeR+\nhakfHljJM9sEYpV/Fd6OzsAN8GvQM7DPuSXnoq92ggVwWc2rBsDV3Ws2S2ZDhhO4\nGg2jnAmApV0brSX4DjQ29fGdbz9Vuw/fZPTPjAplvV8WA8H7a7s=\n=mxwl\n-----END PGP SIGNATURE-----", "payload": "tree be4e2df77ff20b16774004633335e082e3904afe\nparent 3e95c71c18208c8e4ed7cf0bece80b6cb27587bc\nparent e0165af94b034dacde7f9a598c5e72b9c1a1898c\nauthor kennytm <kennytm@gmail.com> 1521712297 +0800\ncommitter kennytm <kennytm@gmail.com> 1521729831 +0800\n\nRollup merge of #49231 - gnzlbg:fix_vec_fminmax, r=rkruppe\n\nfix vector fmin/fmax non-fast/fast intrinsics NaN handling\n\nThis bugs shows up in release mode tests of `stdsimd`: https://github.com/rust-lang-nursery/stdsimd/pull/391 . The intrinsics are thoroughly tested there for roundoff errors, NaN, and overflow behavior.\n\nThe problem was that the non-fast intrinsics where specifying `NoNaNs == true`, which meant that they don't support NaNs. This is incorrect, the non-fast intrinsics should handle NaNs properly.\n\nAlso, the \"fast\" intrinsics where specifying `NoNaNs == false` which meant that they support NaNs and then fast-math, which probably disables this support. This was not intended either.\n\nI've added a comment specifying what the boolean flags do.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f5a4b6f299784b97abdece47445d27693314b6", "html_url": "https://github.com/rust-lang/rust/commit/87f5a4b6f299784b97abdece47445d27693314b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f5a4b6f299784b97abdece47445d27693314b6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e95c71c18208c8e4ed7cf0bece80b6cb27587bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e95c71c18208c8e4ed7cf0bece80b6cb27587bc", "html_url": "https://github.com/rust-lang/rust/commit/3e95c71c18208c8e4ed7cf0bece80b6cb27587bc"}, {"sha": "e0165af94b034dacde7f9a598c5e72b9c1a1898c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0165af94b034dacde7f9a598c5e72b9c1a1898c", "html_url": "https://github.com/rust-lang/rust/commit/e0165af94b034dacde7f9a598c5e72b9c1a1898c"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "91eabb9998f4a6425d7ae0b1105424bf250688b6", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87f5a4b6f299784b97abdece47445d27693314b6/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f5a4b6f299784b97abdece47445d27693314b6/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=87f5a4b6f299784b97abdece47445d27693314b6", "patch": "@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn vector_reduce_fmin(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmin\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, true);\n+            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, /*NoNaNs:*/ false);\n             if instr.is_null() {\n                 bug!(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n             }\n@@ -1046,7 +1046,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn vector_reduce_fmax(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmax\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, true);\n+            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, /*NoNaNs:*/ false);\n             if instr.is_null() {\n                 bug!(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n             }\n@@ -1056,7 +1056,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn vector_reduce_fmin_fast(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmin_fast\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, false);\n+            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, /*NoNaNs:*/ true);\n             if instr.is_null() {\n                 bug!(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n             }\n@@ -1067,7 +1067,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn vector_reduce_fmax_fast(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmax_fast\");\n         unsafe {\n-            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, false);\n+            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, /*NoNaNs:*/ true);\n             if instr.is_null() {\n                 bug!(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n             }"}]}