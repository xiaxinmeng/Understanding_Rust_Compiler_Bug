{"sha": "8067f4425d245a210c732a0333245fbe83190e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjdmNDQyNWQyNDVhMjEwYzczMmEwMzMzMjQ1ZmJlODMxOTBlODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-17T21:15:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-17T21:15:38Z"}, "message": "auto merge of #17331 : kballard/rust/rust_log_pattern_inverted, r=alexcrichton\n\nRUST_LOG supports regex filtering of log messages with a syntax like\r\n`RUST_LOG=main/foo` to use the regex filter 'foo'. Unfortunately, the\r\nfilter was inverted, so `RUST_LOG=main/foo` would actually show all\r\nmessages except the ones containing 'foo'.", "tree": {"sha": "220b2793dede302057c0cde7618d15f690ec4e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220b2793dede302057c0cde7618d15f690ec4e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8067f4425d245a210c732a0333245fbe83190e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8067f4425d245a210c732a0333245fbe83190e89", "html_url": "https://github.com/rust-lang/rust/commit/8067f4425d245a210c732a0333245fbe83190e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8067f4425d245a210c732a0333245fbe83190e89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88d1030e11410d64b8e6c16e3b8de8b4a8efbbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88d1030e11410d64b8e6c16e3b8de8b4a8efbbd", "html_url": "https://github.com/rust-lang/rust/commit/b88d1030e11410d64b8e6c16e3b8de8b4a8efbbd"}, {"sha": "e7b257089c0d868740b729feabb655e4d3d1402e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b257089c0d868740b729feabb655e4d3d1402e", "html_url": "https://github.com/rust-lang/rust/commit/e7b257089c0d868740b729feabb655e4d3d1402e"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "aa853b0474a03fe8e82a1efe4cc72f2f216048ad", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8067f4425d245a210c732a0333245fbe83190e89/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8067f4425d245a210c732a0333245fbe83190e89/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=8067f4425d245a210c732a0333245fbe83190e89", "patch": "@@ -283,7 +283,7 @@ pub fn log(level: u32, loc: &'static LogLocation, args: &fmt::Arguments) {\n     // Test the literal string from args against the current filter, if there\n     // is one.\n     match unsafe { FILTER.as_ref() } {\n-        Some(filter) if filter.is_match(args.to_string().as_slice()) => return,\n+        Some(filter) if !filter.is_match(args.to_string().as_slice()) => return,\n         _ => {}\n     }\n \n@@ -383,7 +383,7 @@ fn enabled(level: u32,\n \n /// Initialize logging for the current process.\n ///\n-/// This is not threadsafe at all, so initialization os performed through a\n+/// This is not threadsafe at all, so initialization is performed through a\n /// `Once` primitive (and this function is called from that primitive).\n fn init() {\n     let (mut directives, filter) = match os::getenv(\"RUST_LOG\") {"}, {"sha": "275a390d5d31799d7a8a2c030375e917d503d233", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8067f4425d245a210c732a0333245fbe83190e89/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8067f4425d245a210c732a0333245fbe83190e89/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=8067f4425d245a210c732a0333245fbe83190e89", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// exec-env:RUST_LOG=rust-log-filter/f.o\n+\n+#![feature(phase)]\n+#[phase(plugin,link)]\n+extern crate log;\n+\n+pub struct ChannelLogger {\n+    tx: Sender<String>\n+}\n+\n+impl ChannelLogger {\n+    pub fn new() -> (Box<ChannelLogger>, Receiver<String>) {\n+        let (tx, rx) = channel();\n+        (box ChannelLogger { tx: tx }, rx)\n+    }\n+}\n+\n+impl log::Logger for ChannelLogger {\n+    fn log(&mut self, record: &log::LogRecord) {\n+        self.tx.send(format!(\"{}\", record.args));\n+    }\n+}\n+\n+pub fn main() {\n+    let (logger, rx) = ChannelLogger::new();\n+\n+    spawn(proc() {\n+        log::set_logger(logger);\n+\n+        // our regex is \"f.o\"\n+        // ensure it is a regex, and isn't anchored\n+        info!(\"foo\");\n+        info!(\"bar\");\n+        info!(\"foo bar\");\n+        info!(\"bar foo\");\n+        info!(\"f1o\");\n+    });\n+\n+    assert_eq!(rx.recv().as_slice(), \"foo\");\n+    assert_eq!(rx.recv().as_slice(), \"foo bar\");\n+    assert_eq!(rx.recv().as_slice(), \"bar foo\");\n+    assert_eq!(rx.recv().as_slice(), \"f1o\");\n+    assert!(rx.recv_opt().is_err());\n+}"}]}