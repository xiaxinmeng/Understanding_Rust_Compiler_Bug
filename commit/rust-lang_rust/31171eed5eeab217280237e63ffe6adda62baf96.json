{"sha": "31171eed5eeab217280237e63ffe6adda62baf96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMTcxZWVkNWVlYWIyMTcyODAyMzdlNjNmZmU2YWRkYTYyYmFmOTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-29T21:48:23Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-29T21:48:53Z"}, "message": "Do autoderef for indexing", "tree": {"sha": "0597ebf09ac6c3216477c4993a8f16686f0ca452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0597ebf09ac6c3216477c4993a8f16686f0ca452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31171eed5eeab217280237e63ffe6adda62baf96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31171eed5eeab217280237e63ffe6adda62baf96", "html_url": "https://github.com/rust-lang/rust/commit/31171eed5eeab217280237e63ffe6adda62baf96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31171eed5eeab217280237e63ffe6adda62baf96/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e313efb9926be80a5d7614d800e425b6891cf7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e313efb9926be80a5d7614d800e425b6891cf7d9", "html_url": "https://github.com/rust-lang/rust/commit/e313efb9926be80a5d7614d800e425b6891cf7d9"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "377f44fa75a60fae93277b84676bd44d92cd9ecf", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=31171eed5eeab217280237e63ffe6adda62baf96", "patch": "@@ -28,7 +28,7 @@ use hir_def::{\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TypeAliasId, VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TraitId, TypeAliasId, VariantId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n@@ -540,8 +540,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         Some(struct_.into())\n     }\n \n+    fn resolve_ops_index(&self) -> Option<TraitId> {\n+        self.resolve_lang_item(\"index\")?.as_trait()\n+    }\n+\n     fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(\"index\")?.as_trait()?;\n+        let trait_ = self.resolve_ops_index()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n }"}, {"sha": "e89cc72987c93e0f82e5260896883129b5ba52e3", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=31171eed5eeab217280237e63ffe6adda62baf96", "patch": "@@ -429,11 +429,27 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let base_ty = self.infer_expr_inner(*base, &Expectation::none());\n                 let index_ty = self.infer_expr(*index, &Expectation::none());\n \n-                self.resolve_associated_type_with_params(\n-                    base_ty,\n-                    self.resolve_ops_index_output(),\n-                    &[index_ty],\n-                )\n+                if let (Some(index_trait), Some(krate)) =\n+                    (self.resolve_ops_index(), self.resolver.krate())\n+                {\n+                    let canonicalized = self.canonicalizer().canonicalize_ty(base_ty);\n+                    let self_ty = method_resolution::resolve_indexing_op(\n+                        self.db,\n+                        &canonicalized.value,\n+                        self.trait_env.clone(),\n+                        krate,\n+                        index_trait,\n+                    );\n+                    let self_ty =\n+                        self_ty.map_or(Ty::Unknown, |t| canonicalized.decanonicalize_ty(t.value));\n+                    self.resolve_associated_type_with_params(\n+                        self_ty,\n+                        self.resolve_ops_index_output(),\n+                        &[index_ty],\n+                    )\n+                } else {\n+                    Ty::Unknown\n+                }\n             }\n             Expr::Tuple { exprs } => {\n                 let mut tys = match &expected.ty {"}, {"sha": "74b908c2e03264d208c3cbc1407e52cc2e277ff8", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=31171eed5eeab217280237e63ffe6adda62baf96", "patch": "@@ -447,6 +447,25 @@ fn iterate_inherent_methods<T>(\n     None\n }\n \n+/// Returns the self type for the index trait call.\n+pub fn resolve_indexing_op(\n+    db: &impl HirDatabase,\n+    ty: &Canonical<Ty>,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    index_trait: TraitId,\n+) -> Option<Canonical<Ty>> {\n+    let ty = InEnvironment { value: ty.clone(), environment: env.clone() };\n+    let deref_chain = autoderef_method_receiver(db, krate, ty);\n+    for ty in deref_chain {\n+        let goal = generic_implements_goal(db, env.clone(), index_trait, ty.clone());\n+        if db.trait_solve(krate, goal).is_some() {\n+            return Some(ty);\n+        }\n+    }\n+    None\n+}\n+\n fn is_valid_candidate(\n     db: &impl HirDatabase,\n     name: Option<&Name>,"}, {"sha": "547010b35199ddf83a902fbfcc815e65a0306756", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31171eed5eeab217280237e63ffe6adda62baf96/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=31171eed5eeab217280237e63ffe6adda62baf96", "patch": "@@ -567,6 +567,34 @@ mod ops {\n     assert_eq!(\"Foo\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_ops_index_autoderef() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+fn test() {\n+    let a = &[1u32, 2, 3];\n+    let b = a[1];\n+    b<|>;\n+}\n+\n+//- /std.rs crate:std\n+impl<T> ops::Index<u32> for [T] {\n+    type Output = T;\n+}\n+\n+#[prelude_import] use ops::*;\n+mod ops {\n+    #[lang = \"index\"]\n+    pub trait Index<Idx> {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\"u32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn deref_trait() {\n     let t = type_at("}]}