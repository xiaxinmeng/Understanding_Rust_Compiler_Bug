{"sha": "0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTY3YzY4ZGE2YmIzZjk1ZGM4NDdmYTI5OTFmMmFhM2Q3MjhhODc=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-07T16:59:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-07T16:59:40Z"}, "message": "Rollup merge of #35355 - shri3k:E0046, r=jonathandturner\n\nUpdates compiler error E0046 with new format\n\nAddresses #35209 as part of #35233.\nr? @jonathandturner\n\nI've repeated the following in my code. If this is something not desirable then let me know if there's any process to make this any cleaner. Thank you.\n```rust\nmissing_items.iter()\n    .map(|name| name.to_string())\n     .collect::<Vec<_>>().join(\"`, `\"))\n```", "tree": {"sha": "684501fdc0d0c0fd4dcf25679442967c71813de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684501fdc0d0c0fd4dcf25679442967c71813de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "html_url": "https://github.com/rust-lang/rust/commit/0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f6fd4fbb2c57472ec1019e553332a82da2d89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f6fd4fbb2c57472ec1019e553332a82da2d89b", "html_url": "https://github.com/rust-lang/rust/commit/f9f6fd4fbb2c57472ec1019e553332a82da2d89b"}, {"sha": "ed72c65f7291c893856d9bf220ab9b585939e724", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed72c65f7291c893856d9bf220ab9b585939e724", "html_url": "https://github.com/rust-lang/rust/commit/ed72c65f7291c893856d9bf220ab9b585939e724"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "4bb36aa639c541b1e0ae46517a27b654b46d4f40", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -1136,11 +1136,16 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n \n     if !missing_items.is_empty() {\n-        span_err!(tcx.sess, impl_span, E0046,\n+        struct_span_err!(tcx.sess, impl_span, E0046,\n             \"not all trait items implemented, missing: `{}`\",\n             missing_items.iter()\n                   .map(|name| name.to_string())\n                   .collect::<Vec<_>>().join(\"`, `\"))\n+            .span_label(impl_span, &format!(\"missing `{}` in implementation\",\n+                missing_items.iter()\n+                    .map(|name| name.to_string())\n+                    .collect::<Vec<_>>().join(\"`, `\"))\n+            ).emit();\n     }\n \n     if !invalidated_items.is_empty() {"}, {"sha": "a8b56b2b9ab37248a596f3f37df0d5e15290ff34", "filename": "src/test/compile-fail/E0046.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2FE0046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2FE0046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0046.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -14,7 +14,9 @@ trait Foo {\n \n struct Bar;\n \n-impl Foo for Bar {} //~ ERROR E0046\n+impl Foo for Bar {}\n+//~^ ERROR E0046\n+//~| NOTE missing `foo` in implementation\n \n fn main() {\n }"}, {"sha": "e0ea1a4cac58bb83102cacf447fb478961897928", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -21,6 +21,7 @@ pub struct FooConstForMethod;\n \n impl Foo for FooConstForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     const bar: u64 = 1;\n     //~^ ERROR E0323\n     //~| NOTE does not match trait\n@@ -31,6 +32,7 @@ pub struct FooMethodForConst;\n \n impl Foo for FooMethodForConst {\n     //~^ ERROR E0046\n+    //~| NOTE missing `MY_CONST` in implementation\n     fn bar(&self) {}\n     fn MY_CONST() {}\n     //~^ ERROR E0324\n@@ -41,6 +43,7 @@ pub struct FooTypeForMethod;\n \n impl Foo for FooTypeForMethod {\n     //~^ ERROR E0046\n+    //~| NOTE missing `bar` in implementation\n     type bar = u64;\n     //~^ ERROR E0325\n     //~| NOTE does not match trait"}, {"sha": "b1047ce18cccdf552ce6bd2ceee305fe78fe5a81", "filename": "src/test/compile-fail/issue-23729.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23729.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -18,7 +18,8 @@ fn main() {\n         }\n \n         impl Iterator for Recurrence {\n-            //~^ ERROR not all trait items implemented, missing: `Item` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Item` in implementation\n             #[inline]\n             fn next(&mut self) -> Option<u64> {\n                 if self.pos < 2 {"}, {"sha": "2062e2373129bd77d698d0aa555743dd85d0494d", "filename": "src/test/compile-fail/issue-23827.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23827.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -34,7 +34,8 @@ impl<C: Component> FnMut<(C,)> for Prototype {\n }\n \n impl<C: Component> FnOnce<(C,)> for Prototype {\n-    //~^ ERROR not all trait items implemented, missing: `Output` [E0046]\n+    //~^ ERROR E0046\n+    //~| NOTE missing `Output` in implementation\n     extern \"rust-call\" fn call_once(self, (comp,): (C,)) -> Prototype {\n         Fn::call(&self, (comp,))\n     }"}, {"sha": "d39fd539dcebc301350cc85ba5e606408c774f20", "filename": "src/test/compile-fail/issue-24356.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b567c68da6bb3f95dc847fa2991f2aa3d728a87/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24356.rs?ref=0b567c68da6bb3f95dc847fa2991f2aa3d728a87", "patch": "@@ -28,7 +28,8 @@ fn main() {\n \n         // Causes ICE\n         impl Deref for Thing {\n-            //~^ ERROR not all trait items implemented, missing: `Target` [E0046]\n+            //~^ ERROR E0046\n+            //~| NOTE missing `Target` in implementation\n             fn deref(&self) -> i8 { self.0 }\n         }\n "}]}