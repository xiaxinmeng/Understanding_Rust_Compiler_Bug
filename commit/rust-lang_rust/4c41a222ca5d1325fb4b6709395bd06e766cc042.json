{"sha": "4c41a222ca5d1325fb4b6709395bd06e766cc042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDFhMjIyY2E1ZDEzMjVmYjRiNjcwOTM5NWJkMDZlNzY2Y2MwNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T09:49:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T09:49:57Z"}, "message": "Auto merge of #7476 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nOut of cycle sync for 2 ICE fixes #7470 #7471 #7473\n\nchangelog: none", "tree": {"sha": "f7b18266888dc6ba8a1f8edf7193653b693bd851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b18266888dc6ba8a1f8edf7193653b693bd851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c41a222ca5d1325fb4b6709395bd06e766cc042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c41a222ca5d1325fb4b6709395bd06e766cc042", "html_url": "https://github.com/rust-lang/rust/commit/4c41a222ca5d1325fb4b6709395bd06e766cc042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c41a222ca5d1325fb4b6709395bd06e766cc042/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f467750680987427d7ff045bbe9e84317140d0aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f467750680987427d7ff045bbe9e84317140d0aa", "html_url": "https://github.com/rust-lang/rust/commit/f467750680987427d7ff045bbe9e84317140d0aa"}, {"sha": "21abb5de2746ffa8b4312ef15300164b094c6e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21abb5de2746ffa8b4312ef15300164b094c6e3b", "html_url": "https://github.com/rust-lang/rust/commit/21abb5de2746ffa8b4312ef15300164b094c6e3b"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "5f400d079da2f1d7b5277e8450703003a6d2a0cc", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -11,7 +11,7 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -133,13 +133,10 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n-                if let ConsumeMode::Move = mode {\n-                    // moved out or in. clearly can't be localized\n-                    self.set.remove(&lid);\n-                }\n+                self.set.remove(&lid);\n                 let map = &self.cx.tcx.hir();\n                 if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n                     if self.set.contains(&lid) {"}, {"sha": "aa763b5c5e666f9120e067c2d151d4a93f3a9fc6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -2106,7 +2106,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n     store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n     store.register_late_pass(move || box self_named_constructor::SelfNamedConstructor);\n-\n }\n \n #[rustfmt::skip]"}, {"sha": "1e54a1e2de165e8781a4c581606d5da9cbf72efe", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if let Some(higher::Range {\n@@ -82,7 +82,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}, {"sha": "9d8d77cf8f089aba80c1edd48bfd95d0dbda990f", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -61,13 +61,13 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)| {\n                 match arm.pat.kind {\n                     PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n-                    PatKind::TupleStruct(ref qpath, &[pat], _) =>\n+                    PatKind::TupleStruct(ref qpath, [pat], _) =>\n                         matches!(pat.kind, PatKind::Wild) && is_lang_ctor(cx, qpath, ResultErr),\n                     _ => false,\n                 }\n             });\n             let unwrap_arm = &arms[1 - idx];\n-            if let PatKind::TupleStruct(ref qpath, &[unwrap_pat], _) = unwrap_arm.pat.kind;\n+            if let PatKind::TupleStruct(ref qpath, [unwrap_pat], _) = unwrap_arm.pat.kind;\n             if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n             if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n             if path_to_local_id(unwrap_arm.body, binding_hir_id);"}, {"sha": "66e3d957894173317445026cbc24a76f9d50b095", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -625,7 +625,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             if let PatKind::TupleStruct(\n                 QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n             if args.len() == 1;\n-            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(args[0]).kind;\n+            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n             let body = remove_blocks(arms[0].body);\n             if path_to_local_id(body, arg);\n \n@@ -721,7 +721,7 @@ fn check_single_match_single_pattern(\n     expr: &Expr<'_>,\n     els: Option<&Expr<'_>>,\n ) {\n-    if is_wild(&arms[1].pat) {\n+    if is_wild(arms[1].pat) {\n         report_single_match_single_pattern(cx, ex, arms, expr, els);\n     }\n }\n@@ -1287,7 +1287,7 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if let Some((b1_arm, b0_arms)) = arms.split_last();\n         if let Some(b0) = find_bool_lit(&b0_arms[0].body.kind, desugared);\n         if let Some(b1) = find_bool_lit(&b1_arm.body.kind, desugared);\n-        if is_wild(&b1_arm.pat);\n+        if is_wild(b1_arm.pat);\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;"}, {"sha": "57fd03f4e12a68afd6fc8b322cd0b69cf7d599db", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -326,10 +326,8 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId, mode: euv::ConsumeMode) {\n-        if let euv::ConsumeMode::Move = mode {\n-            self.move_common(cmt);\n-        }\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId) {\n+        self.move_common(cmt);\n     }\n \n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}"}, {"sha": "b2be35bdddb38fbb18625b0c305c092ca9ace406", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -132,7 +132,7 @@ fn detect_option_if_let_else<'tcx>(\n         if !is_else_clause(cx.tcx, expr);\n         if arms.len() == 2;\n         if !is_result_ok(cx, cond_expr); // Don't lint on Result::ok because a different lint does it already\n-        if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n+        if let PatKind::TupleStruct(struct_qpath, [inner_pat], _) = &arms[0].pat.kind;\n         if is_lang_ctor(cx, struct_qpath, OptionSome);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n         if !contains_return_break_continue_macro(arms[0].body);"}, {"sha": "ea4065d371b81a1bb11b243fbd66179ff7265f5b", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -258,7 +258,7 @@ fn get_variant<'a>(adt_def: &'a AdtDef, qpath: &QPath<'_>) -> Option<&'a Variant\n \n fn find_first_mismatch_in_tuple<'tcx, I>(\n     cx: &LateContext<'tcx>,\n-    pats: &[&Pat<'_>],\n+    pats: &[Pat<'_>],\n     ty_iter_src: I,\n ) -> Option<(Span, Mutability, Level)>\n where"}, {"sha": "00db52a9457d85d50b30fb15da254764a55aa835", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -255,7 +255,7 @@ pub fn in_macro(span: Span) -> bool {\n }\n \n /// Checks if given pattern is a wildcard (`_`)\n-pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n+pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n@@ -1019,8 +1019,8 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         )\n     }\n \n-    fn are_refutable<'a, I: Iterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, mut i: I) -> bool {\n-        i.any(|pat| is_refutable(cx, pat))\n+    fn are_refutable<'a, I: IntoIterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, i: I) -> bool {\n+        i.into_iter().any(|pat| is_refutable(cx, pat))\n     }\n \n     match pat.kind {\n@@ -1031,24 +1031,20 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n         PatKind::Or(pats) => {\n             // TODO: should be the honest check, that pats is exhaustive set\n-            are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            are_refutable(cx, pats)\n         },\n-        PatKind::Tuple(pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Tuple(pats, _) => are_refutable(cx, pats),\n         PatKind::Struct(ref qpath, fields, _) => {\n             is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n-        PatKind::TupleStruct(ref qpath, pats, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats.iter().map(|pat| &**pat))\n-        },\n-        PatKind::Slice(head, ref middle, tail) => {\n+        PatKind::TupleStruct(ref qpath, pats, _) => is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats),\n+        PatKind::Slice(head, middle, tail) => {\n             match &cx.typeck_results().node_type(pat.hir_id).kind() {\n                 rustc_ty::Slice(..) => {\n                     // [..] is the only irrefutable slice pattern.\n                     !head.is_empty() || middle.is_none() || !tail.is_empty()\n                 },\n-                rustc_ty::Array(..) => {\n-                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n-                },\n+                rustc_ty::Array(..) => are_refutable(cx, head.iter().chain(middle).chain(tail.iter())),\n                 _ => {\n                     // unreachable!()\n                     true\n@@ -1062,7 +1058,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().copied().for_each(f);\n+        pats.iter().for_each(f);\n     } else {\n         f(pat);\n     }"}, {"sha": "ac885e9994404b605dd5b0d1c91df3cc45c6b970", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -67,7 +67,7 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}, {"sha": "3a2005e787228e2b6ab961b7a4d977c3106b09bf", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c41a222ca5d1325fb4b6709395bd06e766cc042/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4c41a222ca5d1325fb4b6709395bd06e766cc042/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=4c41a222ca5d1325fb4b6709395bd06e766cc042", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-07-15\"\n+channel = \"nightly-2021-07-19\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}]}