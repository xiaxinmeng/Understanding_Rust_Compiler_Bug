{"sha": "df66e8d4a197443c214e918a858208ecc38e9f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjZlOGQ0YTE5NzQ0M2MyMTRlOTE4YTg1ODIwOGVjYzM4ZTlmMWM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-28T23:37:12Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-03-31T08:03:52Z"}, "message": "Fix underflow in char_range_at_reverse\n\nAdded char_range_at_reverse underflow test", "tree": {"sha": "ca785368ed8655c487368c6cb1130e577b125fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca785368ed8655c487368c6cb1130e577b125fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df66e8d4a197443c214e918a858208ecc38e9f1c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df66e8d4a197443c214e918a858208ecc38e9f1c", "html_url": "https://github.com/rust-lang/rust/commit/df66e8d4a197443c214e918a858208ecc38e9f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df66e8d4a197443c214e918a858208ecc38e9f1c/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d615d6f6d8fd8e931689106dfa22e4a6e662a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d615d6f6d8fd8e931689106dfa22e4a6e662a2", "html_url": "https://github.com/rust-lang/rust/commit/75d615d6f6d8fd8e931689106dfa22e4a6e662a2"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "67fd37996cda0fb897f304c814bf75c794010bcf", "filename": "src/libcore/str.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df66e8d4a197443c214e918a858208ecc38e9f1c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df66e8d4a197443c214e918a858208ecc38e9f1c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=df66e8d4a197443c214e918a858208ecc38e9f1c", "patch": "@@ -1865,8 +1865,10 @@ pub struct CharRange {\n  * Given a byte position and a str, return the previous char and its position\n  *\n  * This function can be used to iterate over a unicode string in reverse.\n+ *\n+ * returns 0 for next index if called on start index 0\n  */\n-fn char_range_at_reverse(ss: &str, start: uint) -> CharRange {\n+pub fn char_range_at_reverse(ss: &str, start: uint) -> CharRange {\n     let mut prev = start;\n \n     // while there is a previous byte == 10......\n@@ -1875,7 +1877,12 @@ fn char_range_at_reverse(ss: &str, start: uint) -> CharRange {\n     }\n \n     // now refer to the initial byte of previous char\n-    prev -= 1u;\n+    if prev > 0u {\n+        prev -= 1u;\n+    } else {\n+        prev = 0u;\n+    }\n+\n \n     let ch = char_at(ss, prev);\n     return CharRange {ch:ch, next:prev};\n@@ -3761,4 +3768,10 @@ mod tests {\n         \"12345555\".cmp(& &\"123456\") == Less;\n         \"22\".cmp(& &\"1234\") == Greater;\n     }\n+\n+    #[test]\n+    fn test_char_range_at_reverse_underflow() {\n+        assert!(char_range_at_reverse(\"abc\", 0).next == 0);\n+    }\n+\n }"}]}