{"sha": "c87c31b1114ff80110fa160cae648bc54275c553", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4N2MzMWIxMTE0ZmY4MDExMGZhMTYwY2FlNjQ4YmM1NDI3NWM1NTM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-18T22:24:41Z"}, "message": "Rollup merge of #55916 - RalfJung:mut-visitor, r=oli-obk\n\nMake miri value visitor usfeful for mutation\n\n~~This is based on top of https://github.com/rust-lang/rust/pull/55716, [click here](https://github.com/RalfJung/rust/compare/escape-to-raw...RalfJung:mut-visitor) for just the new commits.~~\n\nr? @oli-obk", "tree": {"sha": "46bb60af9a4e747525e7c45c81878be1b7a562b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46bb60af9a4e747525e7c45c81878be1b7a562b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87c31b1114ff80110fa160cae648bc54275c553", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8eapCRBK7hj4Ov3rIwAAdHIIAHOoSMdwdUw2p4eYD7n1uw6+\nrGQajQ5thLhUwUCX5TEo+uDY1ovo6xe4SDwNN6OXt4fNxa1ClrNWnM4cuD7dAGfD\nGzhDWd2bdWoPa0McXqMEODudmYwtgcqpIEq1ToOjIfqmk36ySTfTwjf5B6Ucbqpv\n2Dxmm1MQG9nTdJzJSIWDHqHZ38gHic98r5uHAfQk+FVRL8dfvDgh+VSTbburg2uN\nf4E2GOATiEGiiRbVMO+/ZakFFmeFHRkMZN/rUHVo5/T2TCfgSTTz82aWDdOFAyJo\n1l8j0vl8y4qH8qTadl/6GlCmPpW7gALRJJlayO8VpvN0bsNotxsXEBFMjd6oeAM=\n=WSDN\n-----END PGP SIGNATURE-----\n", "payload": "tree 46bb60af9a4e747525e7c45c81878be1b7a562b4\nparent 131a7553e12b7ad539c06d9879218915ef9e7efc\nparent a7b312f8255db978f0446cf62383402fee02bae3\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579881 +0100\ncommitter GitHub <noreply@github.com> 1542579881 +0100\n\nRollup merge of #55916 - RalfJung:mut-visitor, r=oli-obk\n\nMake miri value visitor usfeful for mutation\n\n~~This is based on top of https://github.com/rust-lang/rust/pull/55716, [click here](https://github.com/RalfJung/rust/compare/escape-to-raw...RalfJung:mut-visitor) for just the new commits.~~\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87c31b1114ff80110fa160cae648bc54275c553", "html_url": "https://github.com/rust-lang/rust/commit/c87c31b1114ff80110fa160cae648bc54275c553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87c31b1114ff80110fa160cae648bc54275c553/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131a7553e12b7ad539c06d9879218915ef9e7efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/131a7553e12b7ad539c06d9879218915ef9e7efc", "html_url": "https://github.com/rust-lang/rust/commit/131a7553e12b7ad539c06d9879218915ef9e7efc"}, {"sha": "a7b312f8255db978f0446cf62383402fee02bae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b312f8255db978f0446cf62383402fee02bae3", "html_url": "https://github.com/rust-lang/rust/commit/a7b312f8255db978f0446cf62383402fee02bae3"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "7d636b77ced4ce9453941fd90989e085ac7bfebf", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=c87c31b1114ff80110fa160cae648bc54275c553", "patch": "@@ -44,28 +44,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n \n             Misc => {\n+                let src_layout = src.layout;\n                 let src = self.read_immediate(src)?;\n \n-                if self.type_is_fat_ptr(src.layout.ty) {\n-                    match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n+                // There are no casts to references\n+                assert!(!dest.layout.ty.is_region_ptr());\n+                // Hence we make all casts erase the tag\n+                let src = src.erase_tag().with_default_tag();\n+\n+                if self.type_is_fat_ptr(src_layout.ty) {\n+                    match (src, self.type_is_fat_ptr(dest.layout.ty)) {\n                         // pointers to extern types\n                         (Immediate::Scalar(_),_) |\n                         // slices and trait objects to other slices/trait objects\n                         (Immediate::ScalarPair(..), true) => {\n                             // No change to immediate\n-                            self.write_immediate(*src, dest)?;\n+                            self.write_immediate(src, dest)?;\n                         }\n                         // slices and trait objects to thin pointers (dropping the metadata)\n                         (Immediate::ScalarPair(data, _), false) => {\n                             self.write_scalar(data, dest)?;\n                         }\n                     }\n                 } else {\n-                    match src.layout.variants {\n+                    match src_layout.variants {\n                         layout::Variants::Single { index } => {\n-                            if let Some(def) = src.layout.ty.ty_adt_def() {\n+                            if let Some(def) = src_layout.ty.ty_adt_def() {\n                                 // Cast from a univariant enum\n-                                assert!(src.layout.is_zst());\n+                                assert!(src_layout.is_zst());\n                                 let discr_val = def\n                                     .discriminant_for_variant(*self.tcx, index)\n                                     .val;\n@@ -78,7 +84,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         layout::Variants::NicheFilling { .. } => {},\n                     }\n \n-                    let dest_val = self.cast_scalar(src.to_scalar()?, src.layout, dest.layout)?;\n+                    let dest_val = self.cast_scalar(src.to_scalar()?, src_layout, dest.layout)?;\n                     self.write_scalar(dest_val, dest)?;\n                 }\n             }"}, {"sha": "96ea0d509496665db414a8b05b82085dc59f0c1a", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=c87c31b1114ff80110fa160cae648bc54275c553", "patch": "@@ -39,6 +39,6 @@ pub use self::machine::{Machine, AllocMap, MayLeak};\n \n pub use self::operand::{ScalarMaybeUndef, Immediate, ImmTy, Operand, OpTy};\n \n-pub use self::visitor::ValueVisitor;\n+pub use self::visitor::{ValueVisitor, MutValueVisitor};\n \n pub use self::validity::RefTracking;"}, {"sha": "ad7ffd291bed1002985c69181ee6e174fd8f5ba4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c87c31b1114ff80110fa160cae648bc54275c553", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, MPlaceTy, ImmTy, Machine, EvalContext, ValueVisitor\n+    OpTy, MPlaceTy, Machine, EvalContext, ValueVisitor\n };\n \n macro_rules! validation_failure {\n@@ -281,8 +281,9 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         }\n     }\n \n-    fn visit_primitive(&mut self, value: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n+    fn visit_primitive(&mut self, value: OpTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     {\n+        let value = self.ecx.read_immediate(value)?;\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.sty {"}, {"sha": "f0a71242599bff68a6001753760487450b4e6ed4", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87c31b1114ff80110fa160cae648bc54275c553/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=c87c31b1114ff80110fa160cae648bc54275c553", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, EvalContext, MPlaceTy, OpTy, ImmTy,\n+    Machine, EvalContext, MPlaceTy, OpTy,\n };\n \n // A thing that we can project into, and that has a layout.\n@@ -201,9 +201,11 @@ macro_rules! make_value_visitor {\n             { Ok(()) }\n \n             /// Called whenever we reach a value of primitive type.  There can be no recursion\n-            /// below such a value.  This is the leave function.\n+            /// below such a value.  This is the leaf function.\n+            /// We do *not* provide an `ImmTy` here because some implementations might want\n+            /// to write to the place this primitive lives in.\n             #[inline(always)]\n-            fn visit_primitive(&mut self, _val: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n+            fn visit_primitive(&mut self, _v: Self::V) -> EvalResult<'tcx>\n             { Ok(()) }\n \n             // Default recursors. Not meant to be overloaded.\n@@ -279,9 +281,7 @@ macro_rules! make_value_visitor {\n                     _ => v.layout().ty.builtin_deref(true).is_some(),\n                 };\n                 if primitive {\n-                    let op = v.to_op(self.ecx())?;\n-                    let val = self.ecx().read_immediate(op)?;\n-                    return self.visit_primitive(val);\n+                    return self.visit_primitive(v);\n                 }\n \n                 // Proceed into the fields."}]}