{"sha": "137c374c414e26f50fdfe54cfd3d6a672ff25533", "node_id": "C_kwDOAAsO6NoAKDEzN2MzNzRjNDE0ZTI2ZjUwZmRmZTU0Y2ZkM2Q2YTY3MmZmMjU1MzM", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-18T17:23:49Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-01T20:10:43Z"}, "message": "Move `PatKind::Lit` checking from ast_validation to ast lowering\n\nFixes #92074\n\nThis allows us to insert an `ExprKind::Err` when an invalid expression\nis used in a literal pattern, preventing later stages of compilation\nfrom seeing an unexpected literal pattern.", "tree": {"sha": "a5d06085ed4f5e670aa412957738e4ea95a43853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d06085ed4f5e670aa412957738e4ea95a43853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/137c374c414e26f50fdfe54cfd3d6a672ff25533", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHQtUMACgkQtAh+UQ6Y\nsWQPjA/+KtKI2OA2l/xHcPjaN9VO/wpe/Q6m6U8u/cNvcnjAlDaVjsSuhQplapE9\nBjyqxUxdCTm+lNY6vRPIdcQjZeXx9YCVtstz62Z9zntX1Sqn/mmhNl8fhzRdLJd/\nD3997wogi5AXrb/nqyJB8g8vlBFNRturjhQ3K9pVtFriquDZK3aeJ8fjI2kJohyH\nGvCuDdgRCQq5oknRmPnizcQJDFeH12iodS+LjRLaGEa4wbr9HWKfo8audUwfCUbh\nu2uXVRBzVoPXUXdJ5nMFdJ0gQ1QoXlvFrFn0ItPwZZ+LEqztzFDZmz2sWlS0q5E7\ntnMQ0zdn9lBvCwdMqwbhlzu0VKQSIEUBvGFzpOk0BjNV0eq3t1Wq21P9DaDTBezc\nnpIBmi7nyPKd/vFPGeQnKWWSIbxzsfmMHVvbBHadm8mnWzpACHjaiX8GYnqueq3b\nIEcmWvMDXv/hmiOxF+Y93HehxOFRQqLu9kgvuWRw4ObqhwmgVBm1p/JywMAV05jh\nG0h7CutwjsCl/2q5hsjYBxnfpiHd+V12f28hEB8mQ+nT+/uc3yfqmFvOzVclA1v9\n52EmI+MvtFcYj3g8pu+LxCN5c2kfMA6Xbg47xW2BzvSf0VEGe3ofITN17Q0LdEJ5\nG/y4Wai2fzIJTuNbxCw+kNSUEjbGb+XSkkKjdpJm8MB6z693ep4=\n=HZAQ\n-----END PGP SIGNATURE-----", "payload": "tree a5d06085ed4f5e670aa412957738e4ea95a43853\nparent 4f49627c6fe2a32d1fed6310466bb0e1c535c0c0\nauthor Aaron Hill <aa1ronham@gmail.com> 1639848229 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1641067843 -0500\n\nMove `PatKind::Lit` checking from ast_validation to ast lowering\n\nFixes #92074\n\nThis allows us to insert an `ExprKind::Err` when an invalid expression\nis used in a literal pattern, preventing later stages of compilation\nfrom seeing an unexpected literal pattern.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/137c374c414e26f50fdfe54cfd3d6a672ff25533", "html_url": "https://github.com/rust-lang/rust/commit/137c374c414e26f50fdfe54cfd3d6a672ff25533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/137c374c414e26f50fdfe54cfd3d6a672ff25533/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "html_url": "https://github.com/rust-lang/rust/commit/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0"}], "stats": {"total": 163, "additions": 109, "deletions": 54}, "files": [{"sha": "ebae77984330ffeec58114301f859be28d39017c", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/137c374c414e26f50fdfe54cfd3d6a672ff25533/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137c374c414e26f50fdfe54cfd3d6a672ff25533/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=137c374c414e26f50fdfe54cfd3d6a672ff25533", "patch": "@@ -24,7 +24,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let lower_sub = |this: &mut Self| sub.as_ref().map(|s| this.lower_pat(&*s));\n                         break self.lower_pat_ident(pattern, binding_mode, ident, lower_sub);\n                     }\n-                    PatKind::Lit(ref e) => break hir::PatKind::Lit(self.lower_expr(e)),\n+                    PatKind::Lit(ref e) => {\n+                        break hir::PatKind::Lit(self.lower_expr_within_pat(e, false));\n+                    }\n                     PatKind::TupleStruct(ref qself, ref path, ref pats) => {\n                         let qpath = self.lower_qpath(\n                             pattern.id,\n@@ -81,8 +83,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     PatKind::Range(ref e1, ref e2, Spanned { node: ref end, .. }) => {\n                         break hir::PatKind::Range(\n-                            e1.as_deref().map(|e| self.lower_expr(e)),\n-                            e2.as_deref().map(|e| self.lower_expr(e)),\n+                            e1.as_deref().map(|e| self.lower_expr_within_pat(e, true)),\n+                            e2.as_deref().map(|e| self.lower_expr_within_pat(e, true)),\n                             self.lower_range_end(end, e2.is_some()),\n                         );\n                     }\n@@ -314,4 +316,33 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             RangeEnd::Excluded | RangeEnd::Included(_) => hir::RangeEnd::Included,\n         }\n     }\n+\n+    /// Matches `'-' lit | lit (cf. parser::Parser::parse_literal_maybe_minus)`,\n+    /// or paths for ranges.\n+    //\n+    // FIXME: do we want to allow `expr -> pattern` conversion to create path expressions?\n+    // That means making this work:\n+    //\n+    // ```rust,ignore (FIXME)\n+    // struct S;\n+    // macro_rules! m {\n+    //     ($a:expr) => {\n+    //         let $a = S;\n+    //     }\n+    // }\n+    // m!(S);\n+    // ```\n+    fn lower_expr_within_pat(&mut self, expr: &Expr, allow_paths: bool) -> &'hir hir::Expr<'hir> {\n+        match expr.kind {\n+            ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Err => {}\n+            ExprKind::Path(..) if allow_paths => {}\n+            ExprKind::Unary(UnOp::Neg, ref inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n+            _ => {\n+                self.diagnostic()\n+                    .span_err(expr.span, \"arbitrary expressions aren't allowed in patterns\");\n+                return self.arena.alloc(self.expr_err(expr.span));\n+            }\n+        }\n+        self.lower_expr(expr)\n+    }\n }"}, {"sha": "6237a01f6943539fa7e1a3cadc725d6447e4af83", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/137c374c414e26f50fdfe54cfd3d6a672ff25533/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137c374c414e26f50fdfe54cfd3d6a672ff25533/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=137c374c414e26f50fdfe54cfd3d6a672ff25533", "patch": "@@ -302,34 +302,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// Matches `'-' lit | lit (cf. parser::Parser::parse_literal_maybe_minus)`,\n-    /// or paths for ranges.\n-    //\n-    // FIXME: do we want to allow `expr -> pattern` conversion to create path expressions?\n-    // That means making this work:\n-    //\n-    // ```rust,ignore (FIXME)\n-    // struct S;\n-    // macro_rules! m {\n-    //     ($a:expr) => {\n-    //         let $a = S;\n-    //     }\n-    // }\n-    // m!(S);\n-    // ```\n-    fn check_expr_within_pat(&self, expr: &Expr, allow_paths: bool) {\n-        match expr.kind {\n-            ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Err => {}\n-            ExprKind::Path(..) if allow_paths => {}\n-            ExprKind::Unary(UnOp::Neg, ref inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n-            _ => self.err_handler().span_err(\n-                expr.span,\n-                \"arbitrary expressions aren't allowed \\\n-                                                         in patterns\",\n-            ),\n-        }\n-    }\n-\n     fn check_late_bound_lifetime_defs(&self, params: &[GenericParam]) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n@@ -1426,25 +1398,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_pat(&mut self, pat: &'a Pat) {\n-        match &pat.kind {\n-            PatKind::Lit(expr) => {\n-                self.check_expr_within_pat(expr, false);\n-            }\n-            PatKind::Range(start, end, _) => {\n-                if let Some(expr) = start {\n-                    self.check_expr_within_pat(expr, true);\n-                }\n-                if let Some(expr) = end {\n-                    self.check_expr_within_pat(expr, true);\n-                }\n-            }\n-            _ => {}\n-        }\n-\n-        visit::walk_pat(self, pat)\n-    }\n-\n     fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n         self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n         visit::walk_poly_trait_ref(self, t, m);"}, {"sha": "2bd1b3b9454a6606f98da129e2c876fda550bc29", "filename": "src/test/ui/match/expr_before_ident_pat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fexpr_before_ident_pat.stderr?ref=137c374c414e26f50fdfe54cfd3d6a672ff25533", "patch": "@@ -1,14 +1,14 @@\n-error: arbitrary expressions aren't allowed in patterns\n+error[E0425]: cannot find value `a` in this scope\n   --> $DIR/expr_before_ident_pat.rs:12:12\n    |\n LL |     funny!(a, a);\n-   |            ^\n+   |            ^ not found in this scope\n \n-error[E0425]: cannot find value `a` in this scope\n+error: arbitrary expressions aren't allowed in patterns\n   --> $DIR/expr_before_ident_pat.rs:12:12\n    |\n LL |     funny!(a, a);\n-   |            ^ not found in this scope\n+   |            ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "039d3b314445d98ab43c908f3809ce289bfa1350", "filename": "src/test/ui/pattern/issue-92074-macro-ice.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.rs?ref=137c374c414e26f50fdfe54cfd3d6a672ff25533", "patch": "@@ -0,0 +1,36 @@\n+pub enum En {\n+    A(Vec<u8>)\n+}\n+\n+fn get_usize() -> usize {\n+    0\n+}\n+\n+macro_rules! force_expr {\n+    ($e:expr) => { $e }\n+}\n+\n+macro_rules! force_pat {\n+    ($a:expr, $b:expr) => { $a..=$b }\n+}\n+\n+macro_rules! make_vec {\n+    () => { force_expr!(Vec::new()) } //~ ERROR arbitrary expressions aren't allowed\n+}\n+\n+macro_rules! make_pat {\n+    () => { force_pat!(get_usize(), get_usize()) }\n+    //~^ ERROR arbitrary expressions aren't allowed\n+    //~| ERROR arbitrary expressions aren't allowed\n+}\n+\n+#[allow(unreachable_code)]\n+fn f() -> Result<(), impl core::fmt::Debug> {\n+    let x: En = loop {};\n+\n+    assert!(matches!(x, En::A(make_vec!())));\n+    assert!(matches!(5, make_pat!()));\n+    Ok::<(), &'static str>(())\n+}\n+\n+fn main() {}"}, {"sha": "b340afff010f75303bf858b0cc0faa6ada048f34", "filename": "src/test/ui/pattern/issue-92074-macro-ice.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/137c374c414e26f50fdfe54cfd3d6a672ff25533/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-92074-macro-ice.stderr?ref=137c374c414e26f50fdfe54cfd3d6a672ff25533", "patch": "@@ -0,0 +1,35 @@\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/issue-92074-macro-ice.rs:18:25\n+   |\n+LL |     () => { force_expr!(Vec::new()) }\n+   |                         ^^^^^^^^^^\n+...\n+LL |     assert!(matches!(x, En::A(make_vec!())));\n+   |                               ----------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `make_vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/issue-92074-macro-ice.rs:22:24\n+   |\n+LL |     () => { force_pat!(get_usize(), get_usize()) }\n+   |                        ^^^^^^^^^^^\n+...\n+LL |     assert!(matches!(5, make_pat!()));\n+   |                         ----------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `make_pat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/issue-92074-macro-ice.rs:22:37\n+   |\n+LL |     () => { force_pat!(get_usize(), get_usize()) }\n+   |                                     ^^^^^^^^^^^\n+...\n+LL |     assert!(matches!(5, make_pat!()));\n+   |                         ----------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `make_pat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}]}