{"sha": "479ce39939014f0071f8600fa4ce150e33cb7d5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OWNlMzk5MzkwMTRmMDA3MWY4NjAwZmE0Y2UxNTBlMzNjYjdkNWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-26T04:58:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-19T00:30:35Z"}, "message": "Add explanation to type mismatch involving type params and assoc types", "tree": {"sha": "61f0645ebc04750f5327d420052619057271a3e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f0645ebc04750f5327d420052619057271a3e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479ce39939014f0071f8600fa4ce150e33cb7d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479ce39939014f0071f8600fa4ce150e33cb7d5b", "html_url": "https://github.com/rust-lang/rust/commit/479ce39939014f0071f8600fa4ce150e33cb7d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479ce39939014f0071f8600fa4ce150e33cb7d5b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dece57302a8e6775b34dd6447eb98552e83bdc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dece57302a8e6775b34dd6447eb98552e83bdc9d", "html_url": "https://github.com/rust-lang/rust/commit/dece57302a8e6775b34dd6447eb98552e83bdc9d"}], "stats": {"total": 204, "additions": 181, "deletions": 23}, "files": [{"sha": "7154962b59295d8d980e29e6e11399f9b94e1d08", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -655,11 +655,11 @@ pub struct VtableTraitAliasData<'tcx, N> {\n }\n \n /// Creates predicate obligations from the generic bounds.\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> PredicateObligations<'tcx>\n-{\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> PredicateObligations<'tcx> {\n     util::predicates_for_generics(cause, 0, param_env, generic_bounds)\n }\n "}, {"sha": "3e5520dd46557af9c9112fca61b3f4b81135e632", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -513,20 +513,19 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n }\n \n /// See [`super::obligations_for_generics`].\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     recursion_depth: usize,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> Vec<PredicateObligation<'tcx>>\n-{\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\",\n-           generic_bounds);\n-\n-    generic_bounds.predicates.iter().map(|predicate| {\n-        Obligation { cause: cause.clone(),\n-                     recursion_depth,\n-                     param_env,\n-                     predicate: predicate.clone() }\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    recursion_depth: usize,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> Vec<PredicateObligation<'tcx>> {\n+    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n+\n+    generic_bounds.predicates.iter().map(|predicate| Obligation {\n+        cause: cause.clone(),\n+        recursion_depth,\n+        param_env,\n+        predicate: predicate.clone(),\n     }).collect()\n }\n "}, {"sha": "993d627d6e1766c62521bfcdfd03b6ce7543bea2", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -275,10 +275,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                                  `.await`ing on both of them\");\n                     }\n                 }\n-                if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n-                       (&values.found.sty, &values.expected.sty) // Issue #53280\n-                {\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n+                match (&values.expected.sty, &values.found.sty) {\n+                    (ty::Float(_), ty::Infer(ty::IntVar(_))) => if let Ok( // Issue #53280\n+                        snippet,\n+                    ) = self.sess.source_map().span_to_snippet(sp) {\n                         if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n                             db.span_suggestion(\n                                 sp,\n@@ -287,8 +287,96 @@ impl<'tcx> TyCtxt<'tcx> {\n                                 Applicability::MachineApplicable\n                             );\n                         }\n+                    },\n+                    (ty::Param(_), ty::Param(_)) => {\n+                        db.note(\"a type parameter was expected, but a different one was found; \\\n+                                 you might be missing a type parameter or trait bound\");\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), ty::Projection(_)) => {\n+                        db.note(\"an associated type was expected, but a different one was found\");\n+                    }\n+                    (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n+                        db.note(\"you might be missing a type parameter or trait bound\");\n+                    }\n+                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                        db.help(\"type parameters must be constrained to match other types\");\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given a type parameter `T` and a method `foo`:\n+```\n+trait Trait<T> { fn foo(&self) -> T; }\n+```\n+the only ways to implement method `foo` are:\n+- constrain `T` with an explicit type:\n+```\n+impl Trait<String> for X {\n+    fn foo(&self) -> String { String::new() }\n+}\n+```\n+- add a trait bound to `T` and call a method on that trait that returns `Self`:\n+```\n+impl<T: std::default::Default> Trait<T> for X {\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n+}\n+```\n+- change `foo` to return an argument of type `T`:\n+```\n+impl<T> Trait<T> for X {\n+    fn foo(&self, x: T) -> T { x }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), _) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}` or calling a \\\n+                             method that returns `{}`\",\n+                            values.expected,\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given an associated type `T` and a method `foo`:\n+```\n+trait Trait {\n+    type T;\n+    fn foo(&self) -> Self::T;\n+}\n+```\n+the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n+```\n+impl Trait for X {\n+    type T = String;\n+    fn foo(&self) -> Self::T { String::new() }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n+                    }\n+                    (_, ty::Projection(_)) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}`\",\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n                     }\n+                    _ => {}\n                 }\n+                debug!(\n+                    \"note_and_explain_type_err expected={:?} ({:?}) found={:?} ({:?})\",\n+                    values.expected,\n+                    values.expected.sty,\n+                    values.found,\n+                    values.found.sty,\n+                );\n             },\n             CyclicTy(ty) => {\n                 // Watch out for various cases of cyclic types and try to explain."}, {"sha": "ca6118cb3ba985ccdddc905886186ed8c969727b", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected type `<T as Foo>::Out`\n               found type `&'static str`\n+   = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "c9d88b7af0753d5a7dcca44c8cfdb84c0ee98e55", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |     let _: Bar = x.boo();\n    |\n    = note: expected type `Bar`\n               found type `<I as Foo>::A`\n+   = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5"}, {"sha": "e037bd851ca2134154ba6a905cad333f07e6a0f6", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |\n    = note: expected type `T`\n               found type `std::option::Option<T>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "d6328a64c7c74debbd5441fabfed3c4ca2d00ba6", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |\n    = note: expected type `<T as Foo>::Y`\n               found type `i32`\n+   = note: consider constraining the associated type `<T as Foo>::Y` to `i32` or calling a method that returns `<T as Foo>::Y`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -21,6 +23,8 @@ LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |\n    = note: expected type `<T as Foo>::X`\n               found type `u32`\n+   = note: consider constraining the associated type `<T as Foo>::X` to `u32` or calling a method that returns `<T as Foo>::X`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8176e96d6de1fac14702dc224ce5b9c26d12d7c7", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "fd6fce938b2c77bc1c56d8212c34fdf2dc0d782a", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |     let v = Unit2.m(\n    |\n    = note: expected type `Unit4`\n               found type `<_ as Ty<'_>>::V`\n+   = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19"}, {"sha": "99c6a8cdd6daf2c2ebe303f9f8cd6002ca3209ad", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -14,6 +14,8 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as impl_trait::Trait>::Assoc`\n+   = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n@@ -30,6 +32,8 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 3 previous errors"}, {"sha": "e30e2626e9f34c46de7862449e954628e206b94e", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -15,6 +15,8 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note: expected type `i32`\n               found type `<impl Foo as Leak>::T`\n+   = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10"}, {"sha": "e4d0a731ebfe55cf425c8f5b90398b4b9282be5d", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`\n               found type `fn(&(), &impl Debug, &B)`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "d92c3f034e5a2f0a0d5cadacd3250f56c7e5e350", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -8,6 +8,8 @@ LL |     x\n    |\n    = note: expected type `std::string::String`\n               found type `impl Debug`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "98a70f268cf72ffa9387b3ad3ad5f01d5662ae61", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |     a = y;\n    |\n    = note: expected type `impl Debug` (type parameter)\n               found type `impl Debug` (type parameter)\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "3f2d0aa87adc1174522da52aa655e2baeb14c974", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |         self.iter()\n    |\n    = note: expected type `I`\n               found type `std::slice::Iter<'_, N>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0599]: no method named `iter` found for type `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23"}, {"sha": "4c464e6d4f685d6c0f9daa4a012cf82f9626c545", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:12:3\n@@ -15,6 +17,8 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:20:3\n@@ -24,6 +28,8 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9658f6980be2f82dea31255fc4d392b5347be572", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,7 @@ LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::n\n    |\n    = note: expected type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n               found type `T`\n+   = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error\n "}, {"sha": "a6ccc4835fa682eae1b728c7bc60f71a367ab4ce", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |     xx = y;\n    |\n    = note: expected type `T`\n               found type `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "9c11a02923c8c2a9d68e728d389c3da247dbb258", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -8,6 +8,8 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`\n+   = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "4a9afb9d2494e615b440d64df730b3b1dc64553c", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |         Some(true)\n    |\n    = note: expected type `bool` (type parameter)\n               found type `bool` (bool)\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "43cebd7f9c245347614c083ed6d4818d87540288", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -9,6 +9,8 @@ LL |     ()\n    |\n    = note: expected type `<T as Foo>::Assoc`\n               found type `()`\n+   = note: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-projection.rs:28:5\n@@ -23,6 +25,8 @@ LL |     generic::<()>()\n    |\n    = note: expected type `()`\n               found type `<() as Foo>::Assoc`\n+   = note: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "932087421fbcbc49277a40b6b75c5b03dc5c5ea3", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -8,6 +8,8 @@ LL |         Box::new(self)\n    |\n    = note: expected type `<T as Example>::Output`\n               found type `std::boxed::Box<T>`\n+   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:25:5\n@@ -19,6 +21,8 @@ LL |     Example::generate(t)\n    |\n    = note: expected type `std::boxed::Box<T>`\n               found type `<T as Example>::Output`\n+   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b905cd1a294cccc80ab0cc0957ac991df0a44b44", "filename": "src/test/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -12,6 +12,8 @@ LL |             inner: u\n    |\n    = note: expected type `T`\n               found type `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:13:9\n@@ -27,6 +29,8 @@ LL | |         }\n    |\n    = note: expected type `Foo<U>`\n               found type `Foo<T>`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a0a617fdbbc35646751a6a5f4862d3717cfc568e", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |         Self::TSVariant(());\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n@@ -27,6 +29,8 @@ LL |         Self::<()>::TSVariant(());\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:20:16\n@@ -48,6 +52,8 @@ LL |         Self::SVariant { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:28:26\n@@ -63,6 +69,8 @@ LL |         Self::SVariant::<()> { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:31:16\n@@ -78,6 +86,8 @@ LL |         Self::<()>::SVariant { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:34:16\n@@ -99,6 +109,8 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |\n    = note: expected type `T`\n               found type `()`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:41:26"}, {"sha": "3397eec9e050bf942c95838dd1fcb1a59b59247b", "filename": "src/test/ui/type/type-parameter-names.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -8,6 +8,8 @@ LL |     x\n    |\n    = note: expected type `Bar`\n               found type `Foo`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "a10bf4e0b77876890dc9d15a1c59bdc0caf846a6", "filename": "src/test/ui/type/type-params-in-different-spaces-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -6,6 +6,8 @@ LL |         *self + rhs\n    |\n    = note: expected type `Self`\n               found type `T`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "9f0fa5a0ea1fed5bf099ba6488fc3030e4e73b0b", "filename": "src/test/ui/type/type-params-in-different-spaces-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479ce39939014f0071f8600fa4ce150e33cb7d5b/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr?ref=479ce39939014f0071f8600fa4ce150e33cb7d5b", "patch": "@@ -8,6 +8,8 @@ LL |         u\n    |\n    = note: expected type `Self`\n               found type `X`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}]}