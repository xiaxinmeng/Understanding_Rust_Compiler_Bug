{"sha": "73557faed23678fc443f3fa52727b5f200f597d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTU3ZmFlZDIzNjc4ZmM0NDNmM2ZhNTI3MjdiNWYyMDBmNTk3ZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T03:12:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Use `Option` in `ImplItemKind::Const`.", "tree": {"sha": "d5b14c48ff17af72abccd66ce88397d1a57490ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b14c48ff17af72abccd66ce88397d1a57490ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73557faed23678fc443f3fa52727b5f200f597d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73557faed23678fc443f3fa52727b5f200f597d2", "html_url": "https://github.com/rust-lang/rust/commit/73557faed23678fc443f3fa52727b5f200f597d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73557faed23678fc443f3fa52727b5f200f597d2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bbe9cbbe9921646cdedb856e34dc951641ed96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bbe9cbbe9921646cdedb856e34dc951641ed96", "html_url": "https://github.com/rust-lang/rust/commit/c4bbe9cbbe9921646cdedb856e34dc951641ed96"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "32b36d2021b0f9b2a73350b95d93c60f65300710", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -899,7 +899,13 @@ impl LoweringContext<'_> {\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Const(\n                     self.lower_ty(ty, ImplTraitContext::disallowed()),\n-                    self.lower_const_body(expr),\n+                    match expr {\n+                        Some(expr) => self.lower_const_body(expr),\n+                        None => self.lower_body(|this| (\n+                            hir_vec![],\n+                            this.expr(i.span, hir::ExprKind::Err, ThinVec::new()),\n+                        )),\n+                    }\n                 ),\n             ),\n             ImplItemKind::Method(ref sig, ref body) => {"}, {"sha": "68fdfd24d6164e42c433a2b7add57767a72b0182", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -756,13 +756,16 @@ impl<'a> Parser<'a> {\n     ///     ImplItemConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n     fn parse_impl_const(&mut self) -> PResult<'a, (Ident, ImplItemKind, Generics)> {\n         self.expect_keyword(kw::Const)?;\n-        let name = self.parse_ident()?;\n+        let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n-        let typ = self.parse_ty()?;\n-        self.expect(&token::Eq)?;\n-        let expr = self.parse_expr()?;\n+        let ty = self.parse_ty()?;\n+        let expr = if self.eat(&token::Eq) {\n+            Some(self.parse_expr()?)\n+        } else {\n+            None\n+        };\n         self.expect_semi()?;\n-        Ok((name, ImplItemKind::Const(typ, expr), Generics::default()))\n+        Ok((ident, ImplItemKind::Const(ty, expr), Generics::default()))\n     }\n \n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n@@ -912,13 +915,13 @@ impl<'a> Parser<'a> {\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n-        let default = if self.eat(&token::Eq) {\n+        let expr = if self.eat(&token::Eq) {\n             Some(self.parse_expr()?)\n         } else {\n             None\n         };\n         self.expect_semi()?;\n-        Ok((ident, TraitItemKind::Const(ty, default), Generics::default()))\n+        Ok((ident, TraitItemKind::Const(ty, expr), Generics::default()))\n     }\n \n     /// Parses the following grammar:"}, {"sha": "ba0e6b100eea698753132d432362fa85d678bed4", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -259,12 +259,12 @@ impl<'a> AstValidator<'a> {\n                 !arr.contains(&attr.name_or_empty()) && attr::is_builtin_attr(attr)\n             })\n             .for_each(|attr| if attr.is_doc_comment() {\n-                let mut err = self.err_handler().struct_span_err(\n+                self.err_handler().struct_span_err(\n                     attr.span,\n                     \"documentation comments cannot be applied to function parameters\"\n-                );\n-                err.span_label(attr.span, \"doc comments are not allowed here\");\n-                err.emit();\n+                )\n+                .span_label(attr.span, \"doc comments are not allowed here\")\n+                .emit();\n             }\n             else {\n                 self.err_handler().span_err(attr.span, \"allow, cfg, cfg_attr, deny, \\\n@@ -746,8 +746,22 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n-        if let ImplItemKind::Method(ref sig, _) = ii.kind {\n-            self.check_fn_decl(&sig.decl);\n+        match &ii.kind {\n+            ImplItemKind::Const(ty, None) => {\n+                self.err_handler()\n+                    .struct_span_err(ii.span, \"associated constant in `impl` without body\")\n+                    .span_suggestion(\n+                        ii.span,\n+                        \"provide a definition for the constant\",\n+                        format!(\"const {}: {} = <expr>;\", ii.ident, pprust::ty_to_string(ty)),\n+                        Applicability::HasPlaceholders,\n+                    )\n+                    .emit();\n+            }\n+            ImplItemKind::Method(sig, _) => {\n+                self.check_fn_decl(&sig.decl);\n+            }\n+            _ => {}\n         }\n         visit::walk_impl_item(self, ii);\n     }"}, {"sha": "97cbcb6401c5502e937ada85c73626843873a9f1", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -1110,7 +1110,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.id,\n                     impl_item.ident,\n                     &ty,\n-                    Some(expr),\n+                    expr.as_deref(),\n                     impl_id,\n                     impl_item.vis.clone(),\n                     &impl_item.attrs,"}, {"sha": "17a57387da7bcb84efa14d8f404e0c0d7b136695", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -1635,8 +1635,8 @@ pub struct ImplItem<K = ImplItemKind> {\n \n /// Represents various kinds of content within an `impl`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum ImplItemKind {\n-    Const(P<Ty>, P<Expr>),\n+pub enum ImplItemKind  {\n+    Const(P<Ty>, Option<P<Expr>>),\n     Method(FnSig, P<Block>),\n     TyAlias(P<Ty>),\n     Macro(Mac),"}, {"sha": "147014550138fd02230b4c542c4bcb5b5e212533", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -981,7 +981,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n     match kind  {\n         ImplItemKind::Const(ty, expr) => {\n             visitor.visit_ty(ty);\n-            visitor.visit_expr(expr);\n+            visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n         ImplItemKind::Method(sig, body) => {\n             visit_fn_sig(sig, visitor);"}, {"sha": "c1405e15819a43ddaeabe5149c18352ab226bd91", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -1599,7 +1599,7 @@ impl<'a> State<'a> {\n         self.print_defaultness(ii.defaultness);\n         match ii.kind {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                self.print_associated_const(ii.ident, ty, Some(expr), &ii.vis);\n+                self.print_associated_const(ii.ident, ty, expr.as_deref(), &ii.vis);\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.head(\"\");"}, {"sha": "0b7a7d993aa98ea827f56cde1d7fb419ee298b9d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -617,7 +617,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n     match impl_item.kind {\n         ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n-            visitor.visit_expr(expr);\n+            walk_list!(visitor, visit_expr, expr);\n         }\n         ImplItemKind::Method(ref sig, ref body) => {\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), body),"}, {"sha": "d1124561374a52b565c66b97d91139e04bdfa98f", "filename": "src/test/ui/parser/impl-item-const-pass.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-pass.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl X {\n+    const Y: u8;\n+}"}, {"sha": "5d4692f9f14acdcce4fdafffc9ae163cfa3ae839", "filename": "src/test/ui/parser/impl-item-const-semantic-fail.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.rs?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -0,0 +1,7 @@\n+fn main() {}\n+\n+struct X;\n+\n+impl X {\n+    const Y: u8; //~ ERROR associated constant in `impl` without body\n+}"}, {"sha": "31a15f8e80e3d658b556da279c52829a778053c2", "filename": "src/test/ui/parser/impl-item-const-semantic-fail.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73557faed23678fc443f3fa52727b5f200f597d2/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr?ref=73557faed23678fc443f3fa52727b5f200f597d2", "patch": "@@ -0,0 +1,8 @@\n+error: associated constant in `impl` without body\n+  --> $DIR/impl-item-const-semantic-fail.rs:6:5\n+   |\n+LL |     const Y: u8;\n+   |     ^^^^^^^^^^^^ help: provide a definition for the constant: `const Y: u8 = <expr>;`\n+\n+error: aborting due to previous error\n+"}]}