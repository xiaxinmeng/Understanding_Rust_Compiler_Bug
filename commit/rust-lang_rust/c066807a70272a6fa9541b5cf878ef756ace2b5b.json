{"sha": "c066807a70272a6fa9541b5cf878ef756ace2b5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjY4MDdhNzAyNzJhNmZhOTU0MWI1Y2Y4NzhlZjc1NmFjZTJiNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-10T08:08:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-10T08:08:53Z"}, "message": "Auto merge of #5148 - krishna-veerareddy:issue-5147-option-env-unwrap, r=flip1995\n\nAdd `option-env-unwrap` lint\n\nchangelog: Add `option-env-unwrap` lint\n\nFixes #5147", "tree": {"sha": "2c5ebe12575f9ccd8f32a442afded4856141973d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5ebe12575f9ccd8f32a442afded4856141973d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c066807a70272a6fa9541b5cf878ef756ace2b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c066807a70272a6fa9541b5cf878ef756ace2b5b", "html_url": "https://github.com/rust-lang/rust/commit/c066807a70272a6fa9541b5cf878ef756ace2b5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c066807a70272a6fa9541b5cf878ef756ace2b5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701a5791accde652686933cfb3c48d5a6d228856", "url": "https://api.github.com/repos/rust-lang/rust/commits/701a5791accde652686933cfb3c48d5a6d228856", "html_url": "https://github.com/rust-lang/rust/commit/701a5791accde652686933cfb3c48d5a6d228856"}, {"sha": "b48b221f809343bd4da8242a1ea456efd76f3f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48b221f809343bd4da8242a1ea456efd76f3f90", "html_url": "https://github.com/rust-lang/rust/commit/b48b221f809343bd4da8242a1ea456efd76f3f90"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "3658df88d40d37346a942157ab8bf1636eeb6247", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -1276,6 +1276,7 @@ Released 2018-09-13\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n [`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n+[`option_env_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap\n [`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn"}, {"sha": "fd7f33f91d51074eb3f0ae5dc862535f36688077", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 354 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 355 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "f900a99f314d7c1ec10bd5b38aaecb74f962eaa1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -267,6 +267,7 @@ pub mod no_effect;\n pub mod non_copy_const;\n pub mod non_expressive_names;\n pub mod open_options;\n+pub mod option_env_unwrap;\n pub mod overflow_check_conditional;\n pub mod panic_unimplemented;\n pub mod partialeq_ne_impl;\n@@ -713,6 +714,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         &non_expressive_names::SIMILAR_NAMES,\n         &open_options::NONSENSICAL_OPEN_OPTIONS,\n+        &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         &panic_unimplemented::PANIC,\n         &panic_unimplemented::PANIC_PARAMS,\n@@ -1003,6 +1005,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n+    store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1285,6 +1288,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n+        LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n@@ -1590,6 +1594,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n+        LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&serde_api::SERDE_API_MISUSE),"}, {"sha": "1af7793499f64b9a2060472ce3ad5d85b9284f30", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -0,0 +1,54 @@\n+use crate::utils::{is_direct_expn_of, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use syntax::ast::*;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `option_env!(...).unwrap()` and\n+    /// suggests usage of the `env!` macro.\n+    ///\n+    /// **Why is this bad?** Unwrapping the result of `option_env!` will panic\n+    /// at run-time if the environment variable doesn't exist, whereas `env!`\n+    /// catches it at compile-time.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// let _ = option_env!(\"HOME\").unwrap();\n+    /// ```\n+    ///\n+    /// Is better expressed as:\n+    ///\n+    /// ```rust,no_run\n+    /// let _ = env!(\"HOME\");\n+    /// ```\n+    pub OPTION_ENV_UNWRAP,\n+    correctness,\n+    \"using `option_env!(...).unwrap()` to get environment variable\"\n+}\n+\n+declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n+\n+impl EarlyLintPass for OptionEnvUnwrap {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(path_segment, args) = &expr.kind;\n+            let method_name = path_segment.ident.as_str();\n+            if method_name == \"expect\" || method_name == \"unwrap\";\n+            if let ExprKind::Call(caller, _) = &args[0].kind;\n+            if is_direct_expn_of(caller.span, \"option_env\").is_some();\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    OPTION_ENV_UNWRAP,\n+                    expr.span,\n+                    \"this will panic at run-time if the environment variable doesn't exist at compile-time\",\n+                    \"consider using the `env!` macro instead\"\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "d4f94a9b60a42afb2094cf534c3348e70e5e6c5a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 354] = [\n+pub const ALL_LINTS: [Lint; 355] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1498,6 +1498,13 @@ pub const ALL_LINTS: [Lint; 354] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"option_env_unwrap\",\n+        group: \"correctness\",\n+        desc: \"using `option_env!(...).unwrap()` to get environment variable\",\n+        deprecation: None,\n+        module: \"option_env_unwrap\",\n+    },\n     Lint {\n         name: \"option_expect_used\",\n         group: \"restriction\","}, {"sha": "0bbb9534928effd12458dfd4960534422a237f79", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -46,3 +46,13 @@ macro_rules! take_external {\n         std::mem::replace($s, Default::default())\n     };\n }\n+\n+#[macro_export]\n+macro_rules! option_env_unwrap_external {\n+    ($env: expr) => {\n+        option_env!($env).unwrap()\n+    };\n+    ($env: expr, $message: expr) => {\n+        option_env!($env).expect($message)\n+    };\n+}"}, {"sha": "642c77460a3407076ed9be98fa17eeb94feb1196", "filename": "tests/ui/option_env_unwrap.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.rs?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -0,0 +1,23 @@\n+// aux-build:macro_rules.rs\n+#![warn(clippy::option_env_unwrap)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! option_env_unwrap {\n+    ($env: expr) => {\n+        option_env!($env).unwrap()\n+    };\n+    ($env: expr, $message: expr) => {\n+        option_env!($env).expect($message)\n+    };\n+}\n+\n+fn main() {\n+    let _ = option_env!(\"PATH\").unwrap();\n+    let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n+    let _ = option_env_unwrap!(\"PATH\");\n+    let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n+    let _ = option_env_unwrap_external!(\"PATH\");\n+    let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n+}"}, {"sha": "8de9c8a9d29e0a1da2b4c59bef6ccdd48b8b7491", "filename": "tests/ui/option_env_unwrap.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c066807a70272a6fa9541b5cf878ef756ace2b5b/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=c066807a70272a6fa9541b5cf878ef756ace2b5b", "patch": "@@ -0,0 +1,61 @@\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:17:13\n+   |\n+LL |     let _ = option_env!(\"PATH\").unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::option-env-unwrap` implied by `-D warnings`\n+   = help: consider using the `env!` macro instead\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:18:13\n+   |\n+LL |     let _ = option_env!(\"PATH\").expect(\"environment variable PATH isn't set\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the `env!` macro instead\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:9:9\n+   |\n+LL |         option_env!($env).unwrap()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     let _ = option_env_unwrap!(\"PATH\");\n+   |             -------------------------- in this macro invocation\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:12:9\n+   |\n+LL |         option_env!($env).expect($message)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\");\n+   |             ----------------------------------------------------------------- in this macro invocation\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:21:13\n+   |\n+LL |     let _ = option_env_unwrap_external!(\"PATH\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: this will panic at run-time if the environment variable doesn't exist at compile-time\n+  --> $DIR/option_env_unwrap.rs:22:13\n+   |\n+LL |     let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH isn't set\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the `env!` macro instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}]}