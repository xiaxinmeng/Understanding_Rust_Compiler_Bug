{"sha": "a51777ec874e31b29d85efaa186fe4841257b168", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MTc3N2VjODc0ZTMxYjI5ZDg1ZWZhYTE4NmZlNDg0MTI1N2IxNjg=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-14T17:35:36Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-14T18:13:32Z"}, "message": "Improve `thread::Builder` documentation.\n\nPart of #29378 .\n\n- In particular explains *why* we would use the builder instead of\n  the free function.\n- Changes the parent-child explanation for a spawned-caller.\n- Add link to `io::Result` in `thread::Builder`\n- Corrects the `thread::Builder::spawn` documentation.", "tree": {"sha": "49221d0532c3b118a51a9a34b5b32df271432907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49221d0532c3b118a51a9a34b5b32df271432907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a51777ec874e31b29d85efaa186fe4841257b168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a51777ec874e31b29d85efaa186fe4841257b168", "html_url": "https://github.com/rust-lang/rust/commit/a51777ec874e31b29d85efaa186fe4841257b168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a51777ec874e31b29d85efaa186fe4841257b168/comments", "author": null, "committer": null, "parents": [{"sha": "77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "html_url": "https://github.com/rust-lang/rust/commit/77f1bec6f5eb9ed632c973b97b12701294e6d3a5"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "1f079c21f57764d0d7cbb0fd3eceb71ca4239488", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a51777ec874e31b29d85efaa186fe4841257b168/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51777ec874e31b29d85efaa186fe4841257b168/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a51777ec874e31b29d85efaa186fe4841257b168", "patch": "@@ -180,8 +180,33 @@ pub use self::local::{LocalKey, LocalKeyState};\n // Builder\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Thread configuration. Provides detailed control over the properties\n-/// and behavior of new threads.\n+/// Thread factory, which can be used in order to configure the properties of\n+/// a new thread.\n+///\n+/// Methods can be chained on it in order to configure it.\n+///\n+/// The two configurations available are:\n+///\n+/// - [`name`]: allows to give a name to the thread which is currently\n+///   only used in `panic` messages.\n+/// - [`stack_size`]: specifies the desired stack size. Note that this can\n+///   be overriden by the OS.\n+///\n+/// If the [`stack_size`] field is not specified, the stack size\n+/// will be the `RUST_MIN_STACK` environment variable. If it is\n+/// not specified either, a sensible default will be set.\n+///\n+/// If the [`name`] field is not specified, the thread will not be named.\n+///\n+/// The [`spawn`] method will take ownership of the builder and create an\n+/// [`io::Result`] to the thread handle with the given configuration.\n+///\n+/// The [`thread::spawn`] free function uses a `Builder` with default\n+/// configuration and [`unwrap`]s its return value.\n+///\n+/// You may want to use [`spawn`] instead of [`thread::spawn`], when you want\n+/// to recover from a failure to launch a thread, indeed the free function will\n+/// panick where the `Builder` method will return a [`io::Result`].\n ///\n /// # Examples\n ///\n@@ -196,6 +221,13 @@ pub use self::local::{LocalKey, LocalKeyState};\n ///\n /// handler.join().unwrap();\n /// ```\n+///\n+/// [`thread::spawn`]: ../../std/thread/fn.spawn.html\n+/// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n+/// [`name`]: ../../std/thread/struct.Builder.html#method.name\n+/// [`spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n+/// [`io::Result`]: ../../std/io/type.Result.html\n+/// [`unwrap`]: ../../std/result/enum.Result.html#method.unwrap\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Builder {\n@@ -209,11 +241,6 @@ impl Builder {\n     /// Generates the base configuration for spawning a thread, from which\n     /// configuration methods can be chained.\n     ///\n-    /// If the [`stack_size`] field is not specified, the stack size\n-    /// will be the `RUST_MIN_STACK` environment variable.  If it is\n-    /// not specified either, a sensible default will be set (2MB as\n-    /// of the writting of this doc).\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -229,8 +256,6 @@ impl Builder {\n     ///\n     /// handler.join().unwrap();\n     /// ```\n-    ///\n-    /// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Builder {\n         Builder {\n@@ -280,9 +305,10 @@ impl Builder {\n         self\n     }\n \n-    /// Spawns a new thread, and returns a join handle for it.\n+    /// Spawns a new thread by taking ownership of the `Builder`, and returns an\n+    /// [`io::Result`] to its [`JoinHandle`].\n     ///\n-    /// The child thread may outlive the parent (unless the parent thread\n+    /// The spawned thread may outlive the caller (unless the caller thread\n     /// is the main thread; the whole process is terminated when the main\n     /// thread finishes). The join handle can be used to block on\n     /// termination of the child thread, including recovering its panics.\n@@ -297,6 +323,7 @@ impl Builder {\n     ///\n     /// [`spawn`]: ../../std/thread/fn.spawn.html\n     /// [`io::Result`]: ../../std/io/type.Result.html\n+    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n     ///\n     /// # Examples\n     ///"}]}