{"sha": "be6bb56ee0c88353a01675c4cc525020f1d3137a", "node_id": "C_kwDOAAsO6NoAKGJlNmJiNTZlZTBjODgzNTNhMDE2NzVjNGNjNTI1MDIwZjFkMzEzN2E", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T12:30:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T13:54:40Z"}, "message": "add -Zextra-const-ub-checks to enable more UB checking in const-eval", "tree": {"sha": "c049cd79befa17f6a8ac5e1ad7824bf9d1c1941a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c049cd79befa17f6a8ac5e1ad7824bf9d1c1941a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be6bb56ee0c88353a01675c4cc525020f1d3137a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be6bb56ee0c88353a01675c4cc525020f1d3137a", "html_url": "https://github.com/rust-lang/rust/commit/be6bb56ee0c88353a01675c4cc525020f1d3137a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be6bb56ee0c88353a01675c4cc525020f1d3137a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc71eef498a24af884c4ffa288101a73447bfc61", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc71eef498a24af884c4ffa288101a73447bfc61", "html_url": "https://github.com/rust-lang/rust/commit/cc71eef498a24af884c4ffa288101a73447bfc61"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "684877cae76776f025de733a7e9afea14017cdd1", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -236,6 +236,16 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     const PANIC_ON_ALLOC_FAIL: bool = false; // will be raised as a proper error\n \n+    #[inline(always)]\n+    fn enforce_alignment(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    }\n+\n     fn load_mir(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         instance: ty::InstanceDef<'tcx>,"}, {"sha": "f1b1855c3ec743193f4d75d9b2803072936afce2", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -1005,6 +1005,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     #[inline(always)]\n     pub fn validate_operand(&self, op: &OpTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n+        // Note that we *could* actually be in CTFE here with `-Zextra-const-ub-checks`, but it's\n+        // still correct to not use `ctfe_mode`: that mode is for validation of the final constant\n+        // value, it rules out things like `UnsafeCell` in awkward places. It also can make checking\n+        // recurse through references which, for now, we don't want here, either.\n         self.validate_operand_internal(op, vec![], None, None)\n     }\n }"}, {"sha": "0032dd7d113f8ea1bd448c9bf9d74772b6d7d909", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -1310,6 +1310,8 @@ options! {\n         \"emit the bc module with thin LTO info (default: yes)\"),\n     export_executable_symbols: bool = (false, parse_bool, [TRACKED],\n         \"export symbols from executables, as if they were dynamic libraries\"),\n+    extra_const_ub_checks: bool = (false, parse_bool, [TRACKED],\n+        \"turns on more checks to detect const UB, which can be slow (default: no)\"),\n     #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::fewer_names` instead of this field\"))]\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\"}, {"sha": "236469ce9797a643843f62a538ee68962571db55", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -38,6 +38,7 @@\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n     -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries\n+    -Z                   extra-const-ub-checks=val -- turns on more checks to detect const UB, which can be slow (default: no)\n     -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n     -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n     -Z                                    fuel=val -- set the optimization fuel quota for a crate"}, {"sha": "ebbe315b8f818fc7756679b3cc5c8c34f90ce122", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: -Zextra-const-ub-checks\n+#![feature(const_ptr_read)]\n+\n+use std::mem::transmute;\n+\n+const INVALID_BOOL: () = unsafe {\n+    let _x: bool = transmute(3u8);\n+    //~^ ERROR: evaluation of constant value failed\n+    //~| invalid value\n+};\n+\n+const INVALID_PTR_IN_INT: () = unsafe {\n+    let _x: usize = transmute(&3u8);\n+    //~^ ERROR: evaluation of constant value failed\n+    //~| invalid value\n+};\n+\n+const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n+    let x: &[u8] = &[0; 32];\n+    let _x: (usize, usize) = transmute(x);\n+    //~^ ERROR: evaluation of constant value failed\n+    //~| invalid value\n+};\n+\n+const UNALIGNED_PTR: () = unsafe {\n+    let _x: &u32 = transmute(&[0u8; 4]);\n+    //~^ ERROR: evaluation of constant value failed\n+    //~| invalid value\n+};\n+\n+const UNALIGNED_READ: () = {\n+    INNER; //~ERROR any use of this value will cause an error\n+    //~| previously accepted\n+    // There is an error here but its span is in the standard library so we cannot match it...\n+    // so we have this in a *nested* const, such that the *outer* const fails to use it.\n+    const INNER: () = unsafe {\n+        let x = &[0u8; 4];\n+        let ptr = x.as_ptr().cast::<u32>();\n+        ptr.read();\n+    };\n+};\n+\n+fn main() {}"}, {"sha": "66634f3dd5695a4bd3ba9d90fe215429d3807b20", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be6bb56ee0c88353a01675c4cc525020f1d3137a/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.stderr?ref=be6bb56ee0c88353a01675c4cc525020f1d3137a", "patch": "@@ -0,0 +1,71 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:7:20\n+   |\n+LL |     let _x: bool = transmute(3u8);\n+   |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:13:21\n+   |\n+LL |     let _x: usize = transmute(&3u8);\n+   |                     ^^^^^^^^^^^^^^^ constructing invalid value: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:20:30\n+   |\n+LL |     let _x: (usize, usize) = transmute(x);\n+   |                              ^^^^^^^^^^^^ constructing invalid value at .0: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/detect-extra-ub.rs:26:20\n+   |\n+LL |     let _x: &u32 = transmute(&[0u8; 4]);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         accessing memory with alignment 1, but alignment 4 is required\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+  ::: $DIR/detect-extra-ub.rs:39:9\n+   |\n+LL |         ptr.read();\n+   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:39:9\n+\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:32:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`.\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/detect-extra-ub.rs:32:5\n+   |\n+LL | const UNALIGNED_READ: () = {\n+   | ------------------------\n+LL |     INNER;\n+   |     ^^^^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}]}