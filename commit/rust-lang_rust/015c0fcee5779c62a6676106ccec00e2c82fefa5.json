{"sha": "015c0fcee5779c62a6676106ccec00e2c82fefa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNWMwZmNlZTU3NzljNjJhNjY3NjEwNmNjZWMwMGUyYzgyZmVmYTU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T21:32:45Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:48Z"}, "message": "librustc_driver: use unboxed closures", "tree": {"sha": "e39ce1ab363b1d0a94bf828e05b243c94c4e1ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39ce1ab363b1d0a94bf828e05b243c94c4e1ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015c0fcee5779c62a6676106ccec00e2c82fefa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015c0fcee5779c62a6676106ccec00e2c82fefa5", "html_url": "https://github.com/rust-lang/rust/commit/015c0fcee5779c62a6676106ccec00e2c82fefa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015c0fcee5779c62a6676106ccec00e2c82fefa5/comments", "author": null, "committer": null, "parents": [{"sha": "521a6e62b14b2e44d58972c9e28772fc9685b6d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/521a6e62b14b2e44d58972c9e28772fc9685b6d5", "html_url": "https://github.com/rust-lang/rust/commit/521a6e62b14b2e44d58972c9e28772fc9685b6d5"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "d655b704053096fe7aad68e03756e2304bf35a26", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=015c0fcee5779c62a6676106ccec00e2c82fefa5", "patch": "@@ -25,6 +25,7 @@\n #![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unboxed_closures)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "7ec05b6a0306e3c331732067c587e069fb801c50", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=015c0fcee5779c62a6676106ccec00e2c82fefa5", "patch": "@@ -99,13 +99,15 @@ pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifie\n \n impl PpSourceMode {\n     /// Constructs a `PrinterSupport` object and passes it to `f`.\n-    fn call_with_pp_support<'tcx, A, B>(&self,\n-                                        sess: Session,\n-                                        ast_map: Option<ast_map::Map<'tcx>>,\n-                                        type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n-                                        id: String,\n-                                        payload: B,\n-                                        f: |&PrinterSupport, B| -> A) -> A {\n+    fn call_with_pp_support<'tcx, A, B, F>(&self,\n+                                           sess: Session,\n+                                           ast_map: Option<ast_map::Map<'tcx>>,\n+                                           type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n+                                           id: String,\n+                                           payload: B,\n+                                           f: F) -> A where\n+        F: FnOnce(&PrinterSupport, B) -> A,\n+    {\n         match *self {\n             PpmNormal | PpmExpanded => {\n                 let annotation = NoAnn { sess: sess, ast_map: ast_map };"}, {"sha": "dda3754cf7371cbeab9ef33d462aed0056ca0a9f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015c0fcee5779c62a6676106ccec00e2c82fefa5/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=015c0fcee5779c62a6676106ccec00e2c82fefa5", "patch": "@@ -93,9 +93,11 @@ fn errors(msgs: &[&str]) -> (Box<Emitter+Send>, uint) {\n     (box ExpectErrorEmitter { messages: v } as Box<Emitter+Send>, msgs.len())\n }\n \n-fn test_env(source_string: &str,\n-            (emitter, expected_err_count): (Box<Emitter+Send>, uint),\n-            body: |Env|) {\n+fn test_env<F>(source_string: &str,\n+               (emitter, expected_err_count): (Box<Emitter+Send>, uint),\n+               body: F) where\n+    F: FnOnce(Env),\n+{\n     let mut options =\n         config::basic_options();\n     options.debugging_opts |= config::VERBOSE;"}]}