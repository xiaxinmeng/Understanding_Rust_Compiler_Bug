{"sha": "0799288f0189c07907a30787e7d2f5f0bf960996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTkyODhmMDE4OWMwNzkwN2EzMDc4N2U3ZDJmNWYwYmY5NjA5OTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-20T19:43:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-20T19:43:04Z"}, "message": "Don't write trailing whitespace when formatting empty GenericPredicates", "tree": {"sha": "f88d886853bd27a397eef1c73e4b5fcf6ae75d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f88d886853bd27a397eef1c73e4b5fcf6ae75d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0799288f0189c07907a30787e7d2f5f0bf960996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0799288f0189c07907a30787e7d2f5f0bf960996", "html_url": "https://github.com/rust-lang/rust/commit/0799288f0189c07907a30787e7d2f5f0bf960996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0799288f0189c07907a30787e7d2f5f0bf960996/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5192d917e998d78fd25c4013eb8117f7401068", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5192d917e998d78fd25c4013eb8117f7401068", "html_url": "https://github.com/rust-lang/rust/commit/9e5192d917e998d78fd25c4013eb8117f7401068"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "b3218833d0bf36bdc7fd8f6d5610a87030da6e2c", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=0799288f0189c07907a30787e7d2f5f0bf960996", "patch": "@@ -28,7 +28,7 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef,\n-    display::{write_bounds_like_dyn_trait, HirDisplayError, HirFormatter},\n+    display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n     method_resolution,\n     traits::{FnTrait, Solution, SolutionVariables},\n     ApplicationTy, BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate,\n@@ -1379,8 +1379,7 @@ impl HirDisplay for TypeParam {\n         let substs = Substs::type_params(f.db, self.id.parent);\n         let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n         if !(predicates.is_empty() || f.omit_verbose_types()) {\n-            write!(f, \": \")?;\n-            write_bounds_like_dyn_trait(&predicates, f)?;\n+            write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, f)?;\n         }\n         Ok(())\n     }"}, {"sha": "271fcbfaff21007514b65dd18b7f2e17040d88c6", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=0799288f0189c07907a30787e7d2f5f0bf960996", "patch": "@@ -467,8 +467,7 @@ impl HirDisplay for ApplicationTy {\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n                         let bounds = data.subst(&self.parameters);\n-                        write!(f, \"impl \")?;\n-                        write_bounds_like_dyn_trait(&bounds.value, f)?;\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                         // FIXME: it would maybe be good to distinguish this from the alias type (when debug printing), and to show the substitution\n                     }\n                     OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n@@ -548,10 +547,10 @@ impl HirDisplay for Ty {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        write!(f, \"impl \")?;\n                         let bounds = f.db.generic_predicates_for_param(*id);\n                         let substs = Substs::type_params_for_generics(&generics);\n-                        write_bounds_like_dyn_trait(\n+                        write_bounds_like_dyn_trait_with_prefix(\n+                            \"impl\",\n                             &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),\n                             f,\n                         )?;\n@@ -560,8 +559,7 @@ impl HirDisplay for Ty {\n             }\n             Ty::Bound(idx) => write!(f, \"?{}.{}\", idx.debruijn.depth(), idx.index)?,\n             Ty::Dyn(predicates) => {\n-                write!(f, \"dyn \")?;\n-                write_bounds_like_dyn_trait(predicates, f)?;\n+                write_bounds_like_dyn_trait_with_prefix(\"dyn\", predicates, f)?;\n             }\n             Ty::Opaque(opaque_ty) => {\n                 match opaque_ty.opaque_ty_id {\n@@ -572,8 +570,7 @@ impl HirDisplay for Ty {\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n                         let bounds = data.subst(&opaque_ty.parameters);\n-                        write!(f, \"impl \")?;\n-                        write_bounds_like_dyn_trait(&bounds.value, f)?;\n+                        write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                     }\n                     OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"{{async block}}\")?;\n@@ -627,7 +624,21 @@ fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = Trai\n     ArrayVec::from(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n }\n \n-pub fn write_bounds_like_dyn_trait(\n+pub fn write_bounds_like_dyn_trait_with_prefix(\n+    prefix: &str,\n+    predicates: &[GenericPredicate],\n+    f: &mut HirFormatter,\n+) -> Result<(), HirDisplayError> {\n+    write!(f, \"{}\", prefix)?;\n+    if !predicates.is_empty() {\n+        write!(f, \" \")?;\n+        write_bounds_like_dyn_trait(predicates, f)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn write_bounds_like_dyn_trait(\n     predicates: &[GenericPredicate],\n     f: &mut HirFormatter,\n ) -> Result<(), HirDisplayError> {"}, {"sha": "1298e5a8831382c454c5d1771a58350989c6c16c", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0799288f0189c07907a30787e7d2f5f0bf960996/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=0799288f0189c07907a30787e7d2f5f0bf960996", "patch": "@@ -1410,9 +1410,9 @@ fn weird_bounds() {\n         \"#,\n         expect![[r#\"\n             23..24 'a': impl Trait\n-            50..51 'b': impl \n+            50..51 'b': impl\n             69..70 'c': impl Trait\n-            86..87 'd': impl \n+            86..87 'd': impl\n             107..108 'e': impl {error}\n             123..124 'f': impl Trait + {error}\n             147..149 '{}': ()"}]}