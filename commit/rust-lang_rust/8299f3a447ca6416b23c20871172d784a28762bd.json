{"sha": "8299f3a447ca6416b23c20871172d784a28762bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTlmM2E0NDdjYTY0MTZiMjNjMjA4NzExNzJkNzg0YTI4NzYyYmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-07T17:41:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-13T01:19:06Z"}, "message": "libcore: add send_map::with_find_ref and with_get_ref.", "tree": {"sha": "28b807b0496faf14cec15bc320ebfa815f1d2b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b807b0496faf14cec15bc320ebfa815f1d2b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8299f3a447ca6416b23c20871172d784a28762bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8299f3a447ca6416b23c20871172d784a28762bd", "html_url": "https://github.com/rust-lang/rust/commit/8299f3a447ca6416b23c20871172d784a28762bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8299f3a447ca6416b23c20871172d784a28762bd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f", "html_url": "https://github.com/rust-lang/rust/commit/35a418eb88fbb9f8868d87dca5e5858ddf5f9b9f"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "49a376bb2731893bb78c45328e57ee37cc124e26", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8299f3a447ca6416b23c20871172d784a28762bd/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8299f3a447ca6416b23c20871172d784a28762bd/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=8299f3a447ca6416b23c20871172d784a28762bd", "patch": "@@ -22,6 +22,8 @@ trait SendMap<K:Eq Hash, V: Copy> {\n     fn each_value_ref(&self, blk: fn(v: &V) -> bool);\n     fn find(&const self, k: &K) -> Option<V>;\n     fn get(&const self, k: &K) -> V;\n+    fn with_find_ref<T>(&const self, k: &K, blk: fn(Option<&V>) -> T) -> T;\n+    fn with_get_ref<T>(&const self, k: &K, blk: fn(v: &V) -> T) -> T;\n }\n \n /// Open addressing with linear probing.\n@@ -290,6 +292,27 @@ mod linear {\n         }\n         */\n \n+        fn with_find_ref<T>(&self, k: &K, blk: fn(Option<&V>) -> T) -> T {\n+            match self.bucket_for_key(self.buckets, k) {\n+                FoundEntry(idx) => {\n+                    match self.buckets[idx] {\n+                        Some(bkt) => blk(Some(&bkt.value)),\n+                        None => fail ~\"LinearMap::find: internal logic error\"\n+                    }\n+                }\n+                TableFull | FoundHole(_) => blk(None),\n+            }\n+        }\n+\n+        fn with_get_ref<T>(&self, k: &K, blk: fn(v: &V) -> T) -> T {\n+            do self.with_find_ref(k) |v| {\n+                match v {\n+                    Some(v) => blk(v),\n+                    None => fail fmt!(\"No entry found for key: %?\", k),\n+                }\n+            }\n+        }\n+\n         fn each_ref(&self, blk: fn(k: &K, v: &V) -> bool) {\n             for vec::each(self.buckets) |slot| {\n                 let mut broke = false;\n@@ -426,4 +449,12 @@ mod test {\n         }\n         assert observed == 0xFFFF_FFFF;\n     }\n+\n+    #[test]\n+    fn with_find_ref() {\n+        let mut m = ~LinearMap();\n+        m.with_find_ref(&1, |v| assert v.is_none());\n+        m.insert(1, 2);\n+        m.with_find_ref(&1, |v| assert *v.get() == 2);\n+    }\n }"}]}