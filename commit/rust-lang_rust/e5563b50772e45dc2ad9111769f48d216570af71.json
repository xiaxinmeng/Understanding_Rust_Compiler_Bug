{"sha": "e5563b50772e45dc2ad9111769f48d216570af71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTYzYjUwNzcyZTQ1ZGMyYWQ5MTExNzY5ZjQ4ZDIxNjU3MGFmNzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-18T11:38:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-19T11:58:32Z"}, "message": "Improve windows support", "tree": {"sha": "f94c19f4bf3833949c6ecacf93ae86b2c3823c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94c19f4bf3833949c6ecacf93ae86b2c3823c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5563b50772e45dc2ad9111769f48d216570af71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5563b50772e45dc2ad9111769f48d216570af71", "html_url": "https://github.com/rust-lang/rust/commit/e5563b50772e45dc2ad9111769f48d216570af71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5563b50772e45dc2ad9111769f48d216570af71/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d6b3dab658d76078741cc78b0bda1682b43a7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6b3dab658d76078741cc78b0bda1682b43a7ec", "html_url": "https://github.com/rust-lang/rust/commit/0d6b3dab658d76078741cc78b0bda1682b43a7ec"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "db046be1866b20f564b61af18fe8484dc75480ed", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=e5563b50772e45dc2ad9111769f48d216570af71", "patch": "@@ -35,5 +35,5 @@ pub(crate) fn build_backend(channel: &str) -> String {\n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     crate::utils::spawn_and_wait(cmd);\n \n-    crate::rustc_info::get_dylib_name(\"rustc_codegen_cranelift\")\n+    crate::rustc_info::get_file_name(\"rustc_codegen_cranelift\", \"dylib\")\n }"}, {"sha": "547159438e90e9a43b01edacbcc0d5d3fa822be9", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=e5563b50772e45dc2ad9111769f48d216570af71", "patch": "@@ -1,10 +1,12 @@\n-use crate::utils::spawn_and_wait;\n-use crate::utils::try_hard_link;\n-use crate::SysrootKind;\n+use std::env;\n use std::fs;\n use std::path::Path;\n use std::process::{self, Command};\n \n+use crate::rustc_info::get_file_name;\n+use crate::utils::{spawn_and_wait, try_hard_link};\n+use crate::SysrootKind;\n+\n pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n@@ -22,15 +24,24 @@ pub(crate) fn build_sysroot(\n     // Copy the backend\n     for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n         try_hard_link(\n-            Path::new(\"target\").join(channel).join(file),\n-            target_dir.join(\"bin\").join(file),\n+            Path::new(\"target\").join(channel).join(get_file_name(file, \"bin\")),\n+            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n         );\n     }\n \n-    try_hard_link(\n-        Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n-        target_dir.join(\"lib\").join(cg_clif_dylib),\n-    );\n+    if cfg!(windows) {\n+        // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+        // binaries.\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n+            target_dir.join(\"bin\").join(cg_clif_dylib),\n+        );\n+    } else {\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n+            target_dir.join(\"lib\").join(cg_clif_dylib),\n+        );\n+    }\n \n     // Copy supporting files\n     try_hard_link(\"rust-toolchain\", target_dir.join(\"rust-toolchain\"));\n@@ -141,8 +152,10 @@ fn build_clif_sysroot_for_triple(channel: &str, target_dir: &Path, triple: &str)\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n     build_cmd.env(\"RUSTFLAGS\", rustflags);\n-    build_cmd\n-        .env(\"RUSTC\", target_dir.join(\"bin\").join(\"cg_clif_build_sysroot\").canonicalize().unwrap());\n+    build_cmd.env(\n+        \"RUSTC\",\n+        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n+    );\n     // FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n     build_cmd.env(\"CARGO_INCREMENTAL\", \"0\").env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);"}, {"sha": "d26f24f88564330d608420d8ac293f5fec52080d", "filename": "build_system/prepare.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=e5563b50772e45dc2ad9111769f48d216570af71", "patch": "@@ -1,13 +1,12 @@\n+use std::env;\n use std::ffi::OsStr;\n use std::ffi::OsString;\n use std::fs;\n use std::path::Path;\n-use std::path::PathBuf;\n use std::process::Command;\n \n-use crate::rustc_info::get_rustc_path;\n-use crate::utils::copy_dir_recursively;\n-use crate::utils::spawn_and_wait;\n+use crate::rustc_info::{get_file_name, get_rustc_path};\n+use crate::utils::{copy_dir_recursively, spawn_and_wait};\n \n pub(crate) fn prepare() {\n     prepare_sysroot();\n@@ -38,13 +37,18 @@ pub(crate) fn prepare() {\n     let mut build_cmd = Command::new(\"cargo\");\n     build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n     spawn_and_wait(build_cmd);\n-    fs::copy(\"simple-raytracer/target/debug/main\", \"simple-raytracer/raytracer_cg_llvm\").unwrap();\n+    fs::copy(\n+        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n+        // FIXME use get_file_name here too once testing is migrated to rust\n+        \"simple-raytracer/raytracer_cg_llvm\",\n+    )\n+    .unwrap();\n }\n \n fn prepare_sysroot() {\n     let rustc_path = get_rustc_path();\n     let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n-    let sysroot_src = PathBuf::from(\"build_sysroot\").canonicalize().unwrap().join(\"sysroot_src\");\n+    let sysroot_src = env::current_dir().unwrap().join(\"build_sysroot\").join(\"sysroot_src\");\n \n     assert!(sysroot_src_orig.exists());\n \n@@ -114,7 +118,7 @@ fn get_patches(crate_name: &str) -> Vec<OsString> {\n fn apply_patches(crate_name: &str, target_dir: &Path) {\n     for patch in get_patches(crate_name) {\n         eprintln!(\"[PATCH] {:?} <- {:?}\", target_dir.file_name().unwrap(), patch);\n-        let patch_arg = Path::new(\"patches\").join(patch).canonicalize().unwrap();\n+        let patch_arg = env::current_dir().unwrap().join(\"patches\").join(patch);\n         let mut apply_patch_cmd = Command::new(\"git\");\n         apply_patch_cmd.arg(\"am\").arg(patch_arg).arg(\"-q\").current_dir(target_dir);\n         spawn_and_wait(apply_patch_cmd);"}, {"sha": "3bf86d9a1145fd666c32dd7b1a904f42082f013a", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5563b50772e45dc2ad9111769f48d216570af71/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=e5563b50772e45dc2ad9111769f48d216570af71", "patch": "@@ -37,15 +37,23 @@ pub(crate) fn get_default_sysroot() -> PathBuf {\n     Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n }\n \n-pub(crate) fn get_dylib_name(crate_name: &str) -> String {\n-    let dylib_name = Command::new(\"rustc\")\n+pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n+    let file_name = Command::new(\"rustc\")\n         .stderr(Stdio::inherit())\n-        .args(&[\"--crate-name\", crate_name, \"--crate-type\", \"dylib\", \"--print\", \"file-names\", \"-\"])\n+        .args(&[\n+            \"--crate-name\",\n+            crate_name,\n+            \"--crate-type\",\n+            crate_type,\n+            \"--print\",\n+            \"file-names\",\n+            \"-\",\n+        ])\n         .output()\n         .unwrap()\n         .stdout;\n-    let dylib_name = String::from_utf8(dylib_name).unwrap().trim().to_owned();\n-    assert!(!dylib_name.contains('\\n'));\n-    assert!(dylib_name.contains(crate_name));\n-    dylib_name\n+    let file_name = String::from_utf8(file_name).unwrap().trim().to_owned();\n+    assert!(!file_name.contains('\\n'));\n+    assert!(file_name.contains(crate_name));\n+    file_name\n }"}]}