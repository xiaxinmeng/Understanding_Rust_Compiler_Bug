{"sha": "a4c328812997540c82f5039d346d0b30bc1feac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YzMyODgxMjk5NzU0MGM4MmY1MDM5ZDM0NmQwYjMwYmMxZmVhYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-14T17:15:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:53Z"}, "message": "Change the sigs of set_print/set_panic to allow restoring the default objects", "tree": {"sha": "69427c145feba36c3cc4d5fab672fac300931a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69427c145feba36c3cc4d5fab672fac300931a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c328812997540c82f5039d346d0b30bc1feac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c328812997540c82f5039d346d0b30bc1feac4", "html_url": "https://github.com/rust-lang/rust/commit/a4c328812997540c82f5039d346d0b30bc1feac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c328812997540c82f5039d346d0b30bc1feac4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "183b2ddce4771df3bcfe36eb229a1791fe4b0f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/183b2ddce4771df3bcfe36eb229a1791fe4b0f8f", "html_url": "https://github.com/rust-lang/rust/commit/183b2ddce4771df3bcfe36eb229a1791fe4b0f8f"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "492165e2f2a8e081290d8af025ea390352c5b330", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a4c328812997540c82f5039d346d0b30bc1feac4", "patch": "@@ -1075,7 +1075,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n     }\n \n     let thread = cfg.spawn(move || {\n-         io::set_panic(box err);\n+         io::set_panic(Some(box err));\n          f()\n      });\n \n@@ -1121,7 +1121,7 @@ fn exit_on_err() -> ! {\n     // Panic so the process returns a failure code, but don't pollute the\n     // output with some unnecessary panic messages, we've already\n     // printed everything that we needed to.\n-    io::set_panic(box io::sink());\n+    io::set_panic(Some(box io::sink()));\n     panic!();\n }\n "}, {"sha": "02f0916de0ef3a970e0cd95c11ba4f0823912912", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a4c328812997540c82f5039d346d0b30bc1feac4", "patch": "@@ -228,7 +228,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let codemap = Rc::new(CodeMap::new());\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                       Some(codemap.clone()));\n-    let old = io::set_panic(box Sink(data.clone()));\n+    let old = io::set_panic(Some(box Sink(data.clone())));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     // Compile the code"}, {"sha": "6421595a009a7124e5635abf580f271b111c5719", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a4c328812997540c82f5039d346d0b30bc1feac4", "patch": "@@ -593,11 +593,11 @@ impl<'a> Write for StderrLock<'a> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n+pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     use panicking::LOCAL_STDERR;\n     use mem;\n     LOCAL_STDERR.with(move |slot| {\n-        mem::replace(&mut *slot.borrow_mut(), Some(sink))\n+        mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)\n@@ -617,10 +617,10 @@ pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n+pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     use mem;\n     LOCAL_STDOUT.with(move |slot| {\n-        mem::replace(&mut *slot.borrow_mut(), Some(sink))\n+        mem::replace(&mut *slot.borrow_mut(), sink)\n     }).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)"}, {"sha": "5949afe0ff167c070710d903c126450d693da163", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a4c328812997540c82f5039d346d0b30bc1feac4", "patch": "@@ -1200,8 +1200,8 @@ pub fn run_test(opts: &TestOpts,\n \n                 let result_guard = cfg.spawn(move || {\n                     if !nocapture {\n-                        io::set_print(box Sink(data2.clone()));\n-                        io::set_panic(box Sink(data2));\n+                        io::set_print(Some(box Sink(data2.clone())));\n+                        io::set_panic(Some(box Sink(data2)));\n                     }\n                     testfn()\n                 })\n@@ -1213,8 +1213,8 @@ pub fn run_test(opts: &TestOpts,\n         } else {\n             let oldio = if !nocapture {\n                 Some((\n-                    io::set_print(box Sink(data2.clone())),\n-                    io::set_panic(box Sink(data2))\n+                    io::set_print(Some(box Sink(data2.clone()))),\n+                    io::set_panic(Some(box Sink(data2)))\n                 ))\n             } else {\n                 None\n@@ -1227,12 +1227,8 @@ pub fn run_test(opts: &TestOpts,\n             }));\n \n             if let Some((printio, panicio)) = oldio {\n-                if let Some(printio) = printio {\n-                    io::set_print(printio);\n-                }\n-                if let Some(panicio) = panicio {\n-                    io::set_panic(panicio);\n-                }\n+                io::set_print(printio);\n+                io::set_panic(panicio);\n             };\n \n             let test_result = calc_result(&desc, result);"}, {"sha": "13d5cc989e94dac4a8dfd332bc55e2abcea5d87b", "filename": "src/test/run-pass/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c328812997540c82f5039d346d0b30bc1feac4/src%2Ftest%2Frun-pass%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-stderr.rs?ref=a4c328812997540c82f5039d346d0b30bc1feac4", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     let data = Arc::new(Mutex::new(Vec::new()));\n     let sink = Sink(data.clone());\n     let res = thread::Builder::new().spawn(move|| -> () {\n-        io::set_panic(Box::new(sink));\n+        io::set_panic(Some(Box::new(sink)));\n         panic!(\"Hello, world!\")\n     }).unwrap().join();\n     assert!(res.is_err());"}]}