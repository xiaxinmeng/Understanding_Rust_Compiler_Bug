{"sha": "24fb393207967d3f3b2802a0dbdd3efafab4e595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZmIzOTMyMDc5NjdkM2YzYjI4MDJhMGRiZGQzZWZhZmFiNGU1OTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-04-22T01:34:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-22T01:34:03Z"}, "message": "Rollup merge of #70998 - estebank:suggest-impl-trait-empty-fn, r=varkor\n\nSuggest `-> impl Trait` and `-> Box<dyn Trait>` on fn that doesn't return\n\nDuring development, a function could have a return type set that is a\nbare trait object by accident. We already suggest using either a boxed\ntrait object or `impl Trait` if the return paths will allow it. We now\ndo so too when there are *no* return paths or they all resolve to `!`.\nWe still don't handle cases where the trait object is *not* the entirety\nof the return type gracefully.\n\nCloses #38376.", "tree": {"sha": "65a9e90822f9957eb7dce831121923d5be2c9dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a9e90822f9957eb7dce831121923d5be2c9dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24fb393207967d3f3b2802a0dbdd3efafab4e595", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJen58LCRBK7hj4Ov3rIwAAdHIIAAzjNAsIoCfz4E0DjspzHL2J\ne/j0Wdv3b08WPQRwyaaC95A48Mbhg57H/GnRox7/lF2Te6JSxKexiQJiHL17RqYu\nszjZ7L6UtxFJrBngTrtI9dRuzpmZ38nAuMeREurUOtDYmpA3jH3WmRMLdM3D2u4n\ne+cSbx2jrsPYMcxLQTen321vBfgl9oGEMa0745NaxpY37+5pMhdx986i9V0Ht2dn\nSgvY6OrbD7vZKvMBC0l1XKvMqpTYke7zVBmqZcg9cluVGlmMeVPPmgBnbgXYTBn6\nNV9mUN/TSZcmi5ylItxpQ+f0VxWG5zvY2bbJEOLoZrpfhuYDMHtANG0FB9+U8Dk=\n=s6JQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 65a9e90822f9957eb7dce831121923d5be2c9dac\nparent 45d050cde277b22a755847338f2acc2c7b834141\nparent e53625706106e0227656ddd2fa4d7df54ae2b90e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1587519243 +0900\ncommitter GitHub <noreply@github.com> 1587519243 +0900\n\nRollup merge of #70998 - estebank:suggest-impl-trait-empty-fn, r=varkor\n\nSuggest `-> impl Trait` and `-> Box<dyn Trait>` on fn that doesn't return\n\nDuring development, a function could have a return type set that is a\nbare trait object by accident. We already suggest using either a boxed\ntrait object or `impl Trait` if the return paths will allow it. We now\ndo so too when there are *no* return paths or they all resolve to `!`.\nWe still don't handle cases where the trait object is *not* the entirety\nof the return type gracefully.\n\nCloses #38376.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24fb393207967d3f3b2802a0dbdd3efafab4e595", "html_url": "https://github.com/rust-lang/rust/commit/24fb393207967d3f3b2802a0dbdd3efafab4e595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24fb393207967d3f3b2802a0dbdd3efafab4e595/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d050cde277b22a755847338f2acc2c7b834141", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d050cde277b22a755847338f2acc2c7b834141", "html_url": "https://github.com/rust-lang/rust/commit/45d050cde277b22a755847338f2acc2c7b834141"}, {"sha": "e53625706106e0227656ddd2fa4d7df54ae2b90e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53625706106e0227656ddd2fa4d7df54ae2b90e", "html_url": "https://github.com/rust-lang/rust/commit/e53625706106e0227656ddd2fa4d7df54ae2b90e"}], "stats": {"total": 216, "additions": 161, "deletions": 55}, "files": [{"sha": "305667e58f8fb3afb669fd325738051b23763842", "filename": "src/librustc_error_codes/error_codes/E0746.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -2,8 +2,7 @@ Return types cannot be `dyn Trait`s as they must be `Sized`.\n \n Erroneous code example:\n \n-```compile_fail,E0277\n-# // FIXME: after E0746 is in beta, change the above\n+```compile_fail,E0746\n trait T {\n     fn bar(&self);\n }"}, {"sha": "e698335b2c240406d5703148cafb611f3ac5e371", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 92, "deletions": 32, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n+    self, AdtKind, DefIdTree, Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -826,12 +826,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             .iter()\n             .filter_map(|expr| tables.node_type_opt(expr.hir_id))\n             .map(|ty| self.resolve_vars_if_possible(&ty));\n-        let (last_ty, all_returns_have_same_type) = ret_types.clone().fold(\n-            (None, true),\n-            |(last_ty, mut same): (std::option::Option<Ty<'_>>, bool), ty| {\n+        let (last_ty, all_returns_have_same_type, only_never_return) = ret_types.clone().fold(\n+            (None, true, true),\n+            |(last_ty, mut same, only_never_return): (std::option::Option<Ty<'_>>, bool, bool),\n+             ty| {\n                 let ty = self.resolve_vars_if_possible(&ty);\n-                same &= last_ty.map_or(true, |last_ty| last_ty == ty) && ty.kind != ty::Error;\n-                (Some(ty), same)\n+                same &=\n+                    ty.kind != ty::Error\n+                        && last_ty.map_or(true, |last_ty| {\n+                            // FIXME: ideally we would use `can_coerce` here instead, but `typeck` comes\n+                            // *after* in the dependency graph.\n+                            match (&ty.kind, &last_ty.kind) {\n+                                (Infer(InferTy::IntVar(_)), Infer(InferTy::IntVar(_)))\n+                                | (Infer(InferTy::FloatVar(_)), Infer(InferTy::FloatVar(_)))\n+                                | (Infer(InferTy::FreshIntTy(_)), Infer(InferTy::FreshIntTy(_)))\n+                                | (\n+                                    Infer(InferTy::FreshFloatTy(_)),\n+                                    Infer(InferTy::FreshFloatTy(_)),\n+                                ) => true,\n+                                _ => ty == last_ty,\n+                            }\n+                        });\n+                (Some(ty), same, only_never_return && matches!(ty.kind, ty::Never))\n             },\n         );\n         let all_returns_conform_to_trait =\n@@ -840,13 +856,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     ty::Dynamic(predicates, _) => {\n                         let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n                         let param_env = ty::ParamEnv::empty();\n-                        ret_types.all(|returned_ty| {\n-                            predicates.iter().all(|predicate| {\n-                                let pred = predicate.with_self_ty(self.tcx, returned_ty);\n-                                let obl = Obligation::new(cause.clone(), param_env, pred);\n-                                self.predicate_may_hold(&obl)\n+                        only_never_return\n+                            || ret_types.all(|returned_ty| {\n+                                predicates.iter().all(|predicate| {\n+                                    let pred = predicate.with_self_ty(self.tcx, returned_ty);\n+                                    let obl = Obligation::new(cause.clone(), param_env, pred);\n+                                    self.predicate_may_hold(&obl)\n+                                })\n                             })\n-                        })\n                     }\n                     _ => false,\n                 }\n@@ -855,21 +872,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n         let sm = self.tcx.sess.source_map();\n-        let (snippet, last_ty) =\n-            if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = (\n-                // Verify that we're dealing with a return `dyn Trait`\n-                ret_ty.span.overlaps(span),\n-                &ret_ty.kind,\n-                sm.span_to_snippet(ret_ty.span),\n-                // If any of the return types does not conform to the trait, then we can't\n-                // suggest `impl Trait` nor trait objects, it is a type mismatch error.\n-                all_returns_conform_to_trait,\n-                last_ty,\n-            ) {\n-                (snippet, last_ty)\n-            } else {\n-                return false;\n-            };\n+        let snippet = if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n+            // Verify that we're dealing with a return `dyn Trait`\n+            ret_ty.span.overlaps(span),\n+            &ret_ty.kind,\n+            sm.span_to_snippet(ret_ty.span),\n+            // If any of the return types does not conform to the trait, then we can't\n+            // suggest `impl Trait` nor trait objects: it is a type mismatch error.\n+            all_returns_conform_to_trait,\n+        ) {\n+            snippet\n+        } else {\n+            return false;\n+        };\n         err.code(error_code!(E0746));\n         err.set_primary_message(\"return type cannot have an unboxed trait object\");\n         err.children.clear();\n@@ -881,13 +896,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             #using-trait-objects-that-allow-for-values-of-different-types>\";\n         let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n         let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n-        if all_returns_have_same_type {\n+        if only_never_return {\n+            // No return paths, probably using `panic!()` or similar.\n+            // Suggest `-> T`, `-> impl Trait`, and if `Trait` is object safe, `-> Box<dyn Trait>`.\n+            suggest_trait_object_return_type_alternatives(\n+                err,\n+                ret_ty.span,\n+                trait_obj,\n+                is_object_safe,\n+            );\n+        } else if let (Some(last_ty), true) = (last_ty, all_returns_have_same_type) {\n             // Suggest `-> impl Trait`.\n             err.span_suggestion(\n                 ret_ty.span,\n                 &format!(\n-                    \"return `impl {1}` instead, as all return paths are of type `{}`, \\\n-                        which implements `{1}`\",\n+                    \"use `impl {1}` as the return type, as all return paths are of type `{}`, \\\n+                     which implements `{1}`\",\n                     last_ty, trait_obj,\n                 ),\n                 format!(\"impl {}\", trait_obj),\n@@ -925,8 +949,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             err.note(trait_obj_msg);\n             err.note(&format!(\n-                \"if all the returned values were of the same type you could use \\\n-                    `impl {}` as the return type\",\n+                \"if all the returned values were of the same type you could use `impl {}` as the \\\n+                 return type\",\n                 trait_obj,\n             ));\n             err.note(impl_trait_msg);\n@@ -1813,3 +1837,39 @@ impl NextTypeParamName for &[hir::GenericParam<'_>] {\n             .to_string()\n     }\n }\n+\n+fn suggest_trait_object_return_type_alternatives(\n+    err: &mut DiagnosticBuilder<'tcx>,\n+    ret_ty: Span,\n+    trait_obj: &str,\n+    is_object_safe: bool,\n+) {\n+    err.span_suggestion(\n+        ret_ty,\n+        \"use some type `T` that is `T: Sized` as the return type if all return paths have the \\\n+            same type\",\n+        \"T\".to_string(),\n+        Applicability::MaybeIncorrect,\n+    );\n+    err.span_suggestion(\n+        ret_ty,\n+        &format!(\n+            \"use `impl {}` as the return type if all return paths have the same type but you \\\n+                want to expose only the trait in the signature\",\n+            trait_obj,\n+        ),\n+        format!(\"impl {}\", trait_obj),\n+        Applicability::MaybeIncorrect,\n+    );\n+    if is_object_safe {\n+        err.span_suggestion(\n+            ret_ty,\n+            &format!(\n+                \"use a boxed trait object if all return paths implement trait `{}`\",\n+                trait_obj,\n+            ),\n+            format!(\"Box<dyn {}>\", trait_obj),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "65bcb19b20a8914437cc7ba0ae2fa5a5218f3fe0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -1305,7 +1305,6 @@ fn check_fn<'a, 'tcx>(\n     let hir = tcx.hir();\n \n     let declared_ret_ty = fn_sig.output();\n-    fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n     let revealed_ret_ty =\n         fcx.instantiate_opaque_types_from_value(fn_id, &declared_ret_ty, decl.output.span());\n     debug!(\"check_fn: declared_ret_ty: {}, revealed_ret_ty: {}\", declared_ret_ty, revealed_ret_ty);\n@@ -1374,7 +1373,25 @@ fn check_fn<'a, 'tcx>(\n \n     inherited.tables.borrow_mut().liberated_fn_sigs_mut().insert(fn_id, fn_sig);\n \n-    fcx.check_return_expr(&body.value);\n+    if let ty::Dynamic(..) = declared_ret_ty.kind {\n+        // FIXME: We need to verify that the return type is `Sized` after the return expression has\n+        // been evaluated so that we have types available for all the nodes being returned, but that\n+        // requires the coerced evaluated type to be stored. Moving `check_return_expr` before this\n+        // causes unsized errors caused by the `declared_ret_ty` to point at the return expression,\n+        // while keeping the current ordering we will ignore the tail expression's type because we\n+        // don't know it yet. We can't do `check_expr_kind` while keeping `check_return_expr`\n+        // because we will trigger \"unreachable expression\" lints unconditionally.\n+        // Because of all of this, we perform a crude check to know whether the simplest `!Sized`\n+        // case that a newcomer might make, returning a bare trait, and in that case we populate\n+        // the tail expression's type so that the suggestion will be correct, but ignore all other\n+        // possible cases.\n+        fcx.check_expr(&body.value);\n+        fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n+        tcx.sess.delay_span_bug(decl.output.span(), \"`!Sized` return type\");\n+    } else {\n+        fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n+        fcx.check_return_expr(&body.value);\n+    }\n \n     // We insert the deferred_generator_interiors entry after visiting the body.\n     // This ensures that all nested generators appear before the entry of this generator."}, {"sha": "3757ed6d0926eb1b45e5686ab500e1620a28186a", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn foo() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^"}, {"sha": "cbf1daabe2b4e69e0af6b205283b75f60a4e1c45", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -14,7 +14,7 @@ fn bap() -> Trait { Struct }\n //~^ ERROR E0746\n fn ban() -> dyn Trait { Struct }\n //~^ ERROR E0746\n-fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0277\n+fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0746\n // Suggest using `Box<dyn Trait>`\n fn bal() -> dyn Trait { //~ ERROR E0746\n     if true {\n@@ -26,7 +26,7 @@ fn bax() -> dyn Trait { //~ ERROR E0746\n     if true {\n         Struct\n     } else {\n-        42\n+        42 //~ ERROR `if` and `else` have incompatible types\n     }\n }\n fn bam() -> Box<dyn Trait> {"}, {"sha": "c55dbd7d2fafe9559d669780b399b9e2bc9d0929", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -49,7 +49,7 @@ LL | fn bap() -> Trait { Struct }\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn bap() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n@@ -61,20 +61,29 @@ LL | fn ban() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `Struct`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `Struct`, which implements `Trait`\n    |\n LL | fn ban() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n-error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:17:13\n    |\n LL | fn bak() -> dyn Trait { unimplemented!() }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: the return type of a function must have a statically known size\n+help: use some type `T` that is `T: Sized` as the return type if all return paths have the same type\n+   |\n+LL | fn bak() -> T { unimplemented!() }\n+   |             ^\n+help: use `impl Trait` as the return type if all return paths have the same type but you want to expose only the trait in the signature\n+   |\n+LL | fn bak() -> impl Trait { unimplemented!() }\n+   |             ^^^^^^^^^^\n+help: use a boxed trait object if all return paths implement trait `Trait`\n+   |\n+LL | fn bak() -> Box<dyn Trait> { unimplemented!() }\n+   |             ^^^^^^^^^^^^^^\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n@@ -95,6 +104,18 @@ LL |     }\n LL |     Box::new(42)\n    |\n \n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:9\n+   |\n+LL | /     if true {\n+LL | |         Struct\n+   | |         ------ expected because of this\n+LL | |     } else {\n+LL | |         42\n+   | |         ^^ expected struct `Struct`, found integer\n+LL | |     }\n+   | |_____- `if` and `else` have incompatible types\n+\n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:13\n    |\n@@ -249,7 +270,7 @@ LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^\n@@ -261,12 +282,12 @@ LL | fn bay() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n-help: return `impl Trait` instead, as all return paths are of type `{integer}`, which implements `Trait`\n+help: use `impl Trait` as the return type, as all return paths are of type `{integer}`, which implements `Trait`\n    |\n LL | fn bay() -> impl Trait {\n    |             ^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0746.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "4bf5b6c0f30322fa7562a4dfbcb11617cdc8cd25", "filename": "src/test/ui/issues/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.rs?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -2,7 +2,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     dyn AbstractRenderer\n-//~^ ERROR the size for values of type\n+//~^ ERROR return type cannot have an unboxed trait object\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "1eb6822b8a11abb20467db9d06bfda7daa94af32", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24fb393207967d3f3b2802a0dbdd3efafab4e595/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=24fb393207967d3f3b2802a0dbdd3efafab4e595", "patch": "@@ -1,13 +1,22 @@\n-error[E0277]: the size for values of type `(dyn AbstractRenderer + 'static)` cannot be known at compilation time\n+error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/issue-18107.rs:4:5\n    |\n LL |     dyn AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: the return type of a function must have a statically known size\n+help: use some type `T` that is `T: Sized` as the return type if all return paths have the same type\n+   |\n+LL |     T\n+   |\n+help: use `impl AbstractRenderer` as the return type if all return paths have the same type but you want to expose only the trait in the signature\n+   |\n+LL |     impl AbstractRenderer\n+   |\n+help: use a boxed trait object if all return paths implement trait `AbstractRenderer`\n+   |\n+LL |     Box<dyn AbstractRenderer>\n+   |\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0746`."}]}