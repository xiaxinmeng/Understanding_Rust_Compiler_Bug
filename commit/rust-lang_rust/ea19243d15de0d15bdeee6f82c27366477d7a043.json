{"sha": "ea19243d15de0d15bdeee6f82c27366477d7a043", "node_id": "C_kwDOAAsO6NoAKGVhMTkyNDNkMTVkZTBkMTViZGVlZTZmODJjMjczNjY0NzdkN2EwNDM", "commit": {"author": {"name": "ldm0", "email": "ldm2993593805@163.com", "date": "2023-06-10T16:58:51Z"}, "committer": {"name": "ldm0", "email": "ldm2993593805@163.com", "date": "2023-06-10T16:58:51Z"}, "message": "Add test", "tree": {"sha": "c6339dc162f96094f89e9abacbc9751a511395b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6339dc162f96094f89e9abacbc9751a511395b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea19243d15de0d15bdeee6f82c27366477d7a043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea19243d15de0d15bdeee6f82c27366477d7a043", "html_url": "https://github.com/rust-lang/rust/commit/ea19243d15de0d15bdeee6f82c27366477d7a043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea19243d15de0d15bdeee6f82c27366477d7a043/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859bac7af8705f610ae8aa5c7df17398a46c0cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/859bac7af8705f610ae8aa5c7df17398a46c0cdf", "html_url": "https://github.com/rust-lang/rust/commit/859bac7af8705f610ae8aa5c7df17398a46c0cdf"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "f50d360ac9f338406c40411fd0980399da083137", "filename": "tests/codegen/enum-u128.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea19243d15de0d15bdeee6f82c27366477d7a043/tests%2Fcodegen%2Fenum-u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea19243d15de0d15bdeee6f82c27366477d7a043/tests%2Fcodegen%2Fenum-u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenum-u128.rs?ref=ea19243d15de0d15bdeee6f82c27366477d7a043", "patch": "@@ -0,0 +1,27 @@\n+// This tests that debug info for \"c-like\" 128bit enums is properly emitted.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n+\n+//\n+// ignore-msvc\n+\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+// CHECK-LABEL: @main\n+// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"Foo\",{{.*}}flags: DIFlagEnumClass,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Lo\",{{.*}}value: 0,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Hi\",{{.*}}value: 18446744073709551616,{{.*}}\n+// CHECK: {{.*}}DIEnumerator{{.*}}name: \"Bar\",{{.*}}value: 18446745000000000123,{{.*}}\n+\n+#![allow(incomplete_features)]\n+#![feature(repr128)]\n+\n+#[repr(u128)]\n+pub enum Foo {\n+    Lo,\n+    Hi = 1 << 64,\n+    Bar = 18_446_745_000_000_000_123,\n+}\n+\n+pub fn main() {\n+    let foo = Foo::Bar;\n+}"}]}