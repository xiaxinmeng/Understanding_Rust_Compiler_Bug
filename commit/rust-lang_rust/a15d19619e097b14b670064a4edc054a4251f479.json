{"sha": "a15d19619e097b14b670064a4edc054a4251f479", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNWQxOTYxOWUwOTdiMTRiNjcwMDY0YTRlZGMwNTRhNDI1MWY0Nzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-12T18:06:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-12T18:06:36Z"}, "message": "Merge #6845\n\n6845: Don't HirDisplay unknown types when displaying for source r=Veykril a=Veykril\n\nWas wondering why the add missing impl assist didn't do anything here:\r\n![Code_JCA1Qo0V9P](https://user-images.githubusercontent.com/3757771/101990300-7af44a80-3ca6-11eb-8431-e5eb4de4e78c.png)\r\nTurns out me forgetting to set the Index::Idx type in the trait causes RA to panic due to it trying to to create an unparsable type in the `make` module.\r\nNow we get this instead which imo is definitely better to have.\r\n![Code_MUFPJUCULY](https://user-images.githubusercontent.com/3757771/101990347-c9094e00-3ca6-11eb-9c6a-146bddf64b7c.png)\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "87f60edd15e470fbc342cef28b0674ba1cf71df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f60edd15e470fbc342cef28b0674ba1cf71df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15d19619e097b14b670064a4edc054a4251f479", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf1QasCRBK7hj4Ov3rIwAAdHIIAK03ip2wTgkwNzQsD+3vWLqr\nTYhU18OlsVlsexRf6dFxd3LsGsNglr+fKYF2hPZz6krPmciiLhlbJOiPX4cLfsGS\nwnnuPNKXYfwerSVVS8dZC2nm/Zr5eBd3TAbX/HdJQRq86VpQtkhAnYx04LfDrcgc\ngsVwjoLsBag/r5/oxQJChjjiilA5StHOuarEyUpd8jqRv+oEf+i9jyO5ei/3qY0T\npsP0btGoDm1RqDf9DuELYLgstlHF4nvkggRPliBsvnu79dwCP7auIlqT/473SZN7\nMQQISppjx0SRUbhxgeiIqqTyPuK9LKjiwaiAkKsANStTJgPZ3OOHy55nvrj+UoU=\n=LRQZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 87f60edd15e470fbc342cef28b0674ba1cf71df9\nparent 10f633283180d513138d0d969eceba96e3ce9f96\nparent 69b78edb5e2a40d8665db713d363bd16c835d6cf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607796396 +0000\ncommitter GitHub <noreply@github.com> 1607796396 +0000\n\nMerge #6845\n\n6845: Don't HirDisplay unknown types when displaying for source r=Veykril a=Veykril\n\nWas wondering why the add missing impl assist didn't do anything here:\r\n![Code_JCA1Qo0V9P](https://user-images.githubusercontent.com/3757771/101990300-7af44a80-3ca6-11eb-8431-e5eb4de4e78c.png)\r\nTurns out me forgetting to set the Index::Idx type in the trait causes RA to panic due to it trying to to create an unparsable type in the `make` module.\r\nNow we get this instead which imo is definitely better to have.\r\n![Code_MUFPJUCULY](https://user-images.githubusercontent.com/3757771/101990347-c9094e00-3ca6-11eb-9c6a-146bddf64b7c.png)\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15d19619e097b14b670064a4edc054a4251f479", "html_url": "https://github.com/rust-lang/rust/commit/a15d19619e097b14b670064a4edc054a4251f479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15d19619e097b14b670064a4edc054a4251f479/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f633283180d513138d0d969eceba96e3ce9f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f633283180d513138d0d969eceba96e3ce9f96", "html_url": "https://github.com/rust-lang/rust/commit/10f633283180d513138d0d969eceba96e3ce9f96"}, {"sha": "69b78edb5e2a40d8665db713d363bd16c835d6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b78edb5e2a40d8665db713d363bd16c835d6cf", "html_url": "https://github.com/rust-lang/rust/commit/69b78edb5e2a40d8665db713d363bd16c835d6cf"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "e413505d3e46a7ca19be08b949d6fbb4749652fb", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a15d19619e097b14b670064a4edc054a4251f479/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15d19619e097b14b670064a4edc054a4251f479/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=a15d19619e097b14b670064a4edc054a4251f479", "patch": "@@ -781,6 +781,31 @@ impl Test for () {\n         ${0:todo!()}\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn missing_generic_type() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo<BAR> {\n+    fn foo(&self, bar: BAR);\n+}\n+impl Foo for () {\n+    <|>\n+}\n+\"#,\n+            r#\"\n+trait Foo<BAR> {\n+    fn foo(&self, bar: BAR);\n+}\n+impl Foo for () {\n+    fn foo(&self, bar: BAR) {\n+        ${0:todo!()}\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "0e827a29e78b39544d6eded201fef078f6c697d1", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a15d19619e097b14b670064a4edc054a4251f479/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15d19619e097b14b670064a4edc054a4251f479/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=a15d19619e097b14b670064a4edc054a4251f479", "patch": "@@ -178,6 +178,7 @@ impl DisplayTarget {\n #[derive(Debug)]\n pub enum DisplaySourceCodeError {\n     PathNotFound,\n+    UnknownType,\n }\n \n pub enum HirDisplayError {\n@@ -558,7 +559,14 @@ impl HirDisplay for Ty {\n                     }\n                 };\n             }\n-            Ty::Unknown => write!(f, \"{{unknown}}\")?,\n+            Ty::Unknown => {\n+                if f.display_target.is_source_code() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::UnknownType,\n+                    ));\n+                }\n+                write!(f, \"{{unknown}}\")?;\n+            }\n             Ty::Infer(..) => write!(f, \"_\")?,\n         }\n         Ok(())"}]}