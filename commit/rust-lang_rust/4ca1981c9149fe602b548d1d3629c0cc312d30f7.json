{"sha": "4ca1981c9149fe602b548d1d3629c0cc312d30f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTE5ODFjOTE0OWZlNjAyYjU0OGQxZDM2MjljMGNjMzEyZDMwZjc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-02T14:20:37Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Fix warnings & format", "tree": {"sha": "12e12ded4636f60d02e10349ce8af1fc7d65d5a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e12ded4636f60d02e10349ce8af1fc7d65d5a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca1981c9149fe602b548d1d3629c0cc312d30f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca1981c9149fe602b548d1d3629c0cc312d30f7", "html_url": "https://github.com/rust-lang/rust/commit/4ca1981c9149fe602b548d1d3629c0cc312d30f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca1981c9149fe602b548d1d3629c0cc312d30f7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693582946fae1813627ad59f60a31c9237e98744", "url": "https://api.github.com/repos/rust-lang/rust/commits/693582946fae1813627ad59f60a31c9237e98744", "html_url": "https://github.com/rust-lang/rust/commit/693582946fae1813627ad59f60a31c9237e98744"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "893e727c2e1b5b4d522c06ca259af2884f0ccfd8", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=4ca1981c9149fe602b548d1d3629c0cc312d30f7", "patch": "@@ -6,15 +6,15 @@ use chalk_ir::{\n     cast::{Cast, CastTo, Caster},\n     fold::Fold,\n     interner::HasInterner,\n-    AdtId, BoundVar, DebruijnIndex, Safety, Scalar,\n+    AdtId, BoundVar, DebruijnIndex, Scalar,\n };\n use hir_def::{builtin_type::BuiltinType, GenericDefId, TraitId, TypeAliasId};\n use smallvec::SmallVec;\n \n use crate::{\n     db::HirDatabase, primitive, to_assoc_type_id, to_chalk_trait_id, utils::generics, Binders,\n-    CallableSig, FnPointer, FnSig, FnSubst, GenericArg, Interner, ProjectionTy, Substitution,\n-    TraitRef, Ty, TyDefId, TyExt, TyKind, ValueTyDefId,\n+    CallableSig, GenericArg, Interner, ProjectionTy, Substitution, TraitRef, Ty, TyDefId, TyExt,\n+    TyKind, ValueTyDefId,\n };\n \n /// This is a builder for `Ty` or anything that needs a `Substitution`."}, {"sha": "c82bda70f44fabee6cb03bfb6f77a9ec72cdb24f", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=4ca1981c9149fe602b548d1d3629c0cc312d30f7", "patch": "@@ -65,7 +65,7 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    fn coerce_inner(&mut self, mut from_ty: Ty, to_ty: &Ty) -> InferResult {\n+    fn coerce_inner(&mut self, from_ty: Ty, to_ty: &Ty) -> InferResult {\n         if from_ty.is_never() {\n             // Subtle: If we are coercing from `!` to `?T`, where `?T` is an unbound\n             // type variable, we want `?T` to fallback to `!` if not\n@@ -145,10 +145,9 @@ impl<'a> InferenceContext<'a> {\n     /// To match `A` with `B`, autoderef will be performed,\n     /// calling `deref`/`deref_mut` where necessary.\n     fn coerce_ref(&mut self, from_ty: Ty, to_ty: &Ty, to_mt: Mutability) -> InferResult {\n-        let (from_mt, from_inner) = match from_ty.kind(&Interner) {\n-            TyKind::Ref(mt, _, ty) => {\n+        match from_ty.kind(&Interner) {\n+            TyKind::Ref(mt, _, _) => {\n                 coerce_mutabilities(*mt, to_mt)?;\n-                (*mt, ty.clone())\n             }\n             _ => return self.unify_inner(&from_ty, to_ty),\n         };\n@@ -160,7 +159,7 @@ impl<'a> InferenceContext<'a> {\n         // the structure like it is.\n \n         let canonicalized = self.canonicalize(from_ty.clone());\n-        let mut autoderef = autoderef::autoderef(\n+        let autoderef = autoderef::autoderef(\n             self.db,\n             self.resolver.krate(),\n             InEnvironment {\n@@ -237,7 +236,7 @@ impl<'a> InferenceContext<'a> {\n     /// or a function pointer.\n     fn coerce_from_fn_item(&mut self, from_ty: Ty, to_ty: &Ty) -> InferResult {\n         match to_ty.kind(&Interner) {\n-            TyKind::Function(b_sig) => {\n+            TyKind::Function(_) => {\n                 let from_sig = from_ty.callable_sig(self.db).expect(\"FnDef had no sig\");\n \n                 // FIXME check ABI: Intrinsics are not coercible to function pointers"}, {"sha": "a635501b5b71d3b1c3285975b66097099f73d2b0", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca1981c9149fe602b548d1d3629c0cc312d30f7/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=4ca1981c9149fe602b548d1d3629c0cc312d30f7", "patch": "@@ -134,18 +134,10 @@ pub(super) struct TypeVariableTable {\n }\n \n impl TypeVariableTable {\n-    fn push(&mut self, data: TypeVariableData) {\n-        self.inner.push(data);\n-    }\n-\n     pub(super) fn set_diverging(&mut self, iv: InferenceVar, diverging: bool) {\n         self.inner[iv.index() as usize].diverging = diverging;\n     }\n \n-    fn is_diverging(&mut self, iv: InferenceVar) -> bool {\n-        self.inner[iv.index() as usize].diverging\n-    }\n-\n     fn fallback_value(&self, iv: InferenceVar, kind: TyVariableKind) -> Ty {\n         match kind {\n             _ if self.inner[iv.index() as usize].diverging => TyKind::Never,\n@@ -221,7 +213,7 @@ impl<'a> InferenceTable<'a> {\n     /// Unify two types and register new trait goals that arise from that.\n     // TODO give these two functions better names\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n-        let result = if let Ok(r) = self.unify_inner(ty1, ty2) {\n+        let _result = if let Ok(r) = self.unify_inner(ty1, ty2) {\n             r\n         } else {\n             return false;\n@@ -241,11 +233,11 @@ impl<'a> InferenceTable<'a> {\n             ty1,\n             ty2,\n         ) {\n-            Ok(result) => {\n+            Ok(_result) => {\n                 // TODO deal with new goals\n                 Ok(InferOk {})\n             }\n-            Err(NoSolution) => Err(TypeError),\n+            Err(chalk_ir::NoSolution) => Err(TypeError),\n         }\n     }\n "}]}