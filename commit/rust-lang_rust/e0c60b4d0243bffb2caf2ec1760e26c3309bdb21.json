{"sha": "e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYzYwYjRkMDI0M2JmZmIyY2FmMmVjMTc2MGUyNmMzMzA5YmRiMjE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-19T20:56:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-09-19T20:56:38Z"}, "message": "rustdoc: implement --sysroot\n\nwith the same semantics as rustc. This let us build documentation for a\ncrate that depends on a custom sysroot.", "tree": {"sha": "94d8aee30460663f3ff7d680f76e55326bd6beb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d8aee30460663f3ff7d680f76e55326bd6beb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "html_url": "https://github.com/rust-lang/rust/commit/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21/comments", "author": null, "committer": null, "parents": [{"sha": "5f6f8384484382aeec5e1f647e18d37992966425", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6f8384484382aeec5e1f647e18d37992966425", "html_url": "https://github.com/rust-lang/rust/commit/5f6f8384484382aeec5e1f647e18d37992966425"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "2fde097ae7ac860fe296bad14ebb734edbf7c831", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "patch": "@@ -30,6 +30,7 @@ use errors::emitter::ColorConfig;\n \n use std::cell::{RefCell, Cell};\n use std::rc::Rc;\n+use std::path::PathBuf;\n \n use visit_ast::RustdocVisitor;\n use clean;\n@@ -101,7 +102,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n                 externs: config::Externs,\n                 input: Input,\n-                triple: Option<String>) -> (clean::Crate, RenderInfo)\n+                triple: Option<String>,\n+                maybe_sysroot: Option<PathBuf>) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -113,7 +115,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n     let sessopts = config::Options {\n-        maybe_sysroot: None,\n+        maybe_sysroot: maybe_sysroot,\n         search_paths: search_paths,\n         crate_types: vec!(config::CrateTypeRlib),\n         lint_opts: vec!((warning_lint, lint::Allow)),"}, {"sha": "4b6eb62b80c07e7a2b19f5ca3efc5d9c5fb46f1d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c60b4d0243bffb2caf2ec1760e26c3309bdb21/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e0c60b4d0243bffb2caf2ec1760e26c3309bdb21", "patch": "@@ -186,6 +186,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                          own theme\", \"PATH\")),\n         unstable(optmulti(\"Z\", \"\",\n                           \"internal and debugging options (only on nightly build)\", \"FLAG\")),\n+        stable(optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")),\n     )\n }\n \n@@ -370,6 +371,7 @@ fn rust_input(cratefile: &str, externs: Externs, matches: &getopts::Matches) ->\n     }\n     let cfgs = matches.opt_strs(\"cfg\");\n     let triple = matches.opt_str(\"target\");\n+    let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n \n     let cr = PathBuf::from(cratefile);\n     info!(\"starting to run rustc\");\n@@ -379,7 +381,7 @@ fn rust_input(cratefile: &str, externs: Externs, matches: &getopts::Matches) ->\n         use rustc::session::config::Input;\n \n         tx.send(core::run_core(paths, cfgs, externs, Input::File(cr),\n-                               triple)).unwrap();\n+                               triple, maybe_sysroot)).unwrap();\n     });\n     let (mut krate, renderinfo) = rx.recv().unwrap();\n     info!(\"finished with rustc\");"}]}