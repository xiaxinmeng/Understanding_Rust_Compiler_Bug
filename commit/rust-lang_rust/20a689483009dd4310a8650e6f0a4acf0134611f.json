{"sha": "20a689483009dd4310a8650e6f0a4acf0134611f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTY4OTQ4MzAwOWRkNDMxMGE4NjUwZTZmMGE0YWNmMDEzNDYxMWY=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-04T19:55:58Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-15T17:55:18Z"}, "message": "Deprecate `str::from_chars`\n\nUse `String::from_chars` instead\n\n[breaking-change]", "tree": {"sha": "9973235bd71a3a417c3305b52db4aec9d976c3a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9973235bd71a3a417c3305b52db4aec9d976c3a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a689483009dd4310a8650e6f0a4acf0134611f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a689483009dd4310a8650e6f0a4acf0134611f", "html_url": "https://github.com/rust-lang/rust/commit/20a689483009dd4310a8650e6f0a4acf0134611f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a689483009dd4310a8650e6f0a4acf0134611f/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211f1caa290d83a3e24ad99d53395975a3981014", "url": "https://api.github.com/repos/rust-lang/rust/commits/211f1caa290d83a3e24ad99d53395975a3981014", "html_url": "https://github.com/rust-lang/rust/commit/211f1caa290d83a3e24ad99d53395975a3981014"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "0c325a0d65aef660e8f891bce0868885afc34b46", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -813,7 +813,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                 c\n             }\n         } ).collect();\n-        str::from_chars(c.as_slice()).to_string()\n+        String::from_chars(c.as_slice())\n     }\n \n     #[cfg(target_os = \"win32\")]"}, {"sha": "0b8535d1a34026478e6d270bfe22d1c85d03a1e9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -148,11 +148,11 @@ pub fn from_char(ch: char) -> String {\n /// # Example\n ///\n /// ```rust\n-/// use std::str;\n /// let chars = ['h', 'e', 'l', 'l', 'o'];\n-/// let string = str::from_chars(chars);\n+/// let string = String::from_chars(chars);\n /// assert_eq!(string.as_slice(), \"hello\");\n /// ```\n+#[deprecated = \"use String::from_chars instead\"]\n pub fn from_chars(chs: &[char]) -> String {\n     chs.iter().map(|c| *c).collect()\n }"}, {"sha": "9223413fbdf3e1d66f86afd68317ab96c149c7e0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -91,6 +91,20 @@ impl String {\n             Err(vec)\n         }\n     }\n+    \n+    /// Convert a vector of chars to a string\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let chars = ['h', 'e', 'l', 'l', 'o'];\n+    /// let string = String::from_chars(chars);\n+    /// assert_eq!(string.as_slice(), \"hello\");\n+    /// ```\n+    #[inline]\n+    pub fn from_chars(chs: &[char]) -> String {\n+        chs.iter().map(|c| *c).collect()\n+    }\n \n     /// Return the underlying byte buffer, encoded as UTF-8.\n     #[inline]"}, {"sha": "bc1e86449e09991adb0ca1583d6732beb54e542e", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -510,7 +510,7 @@ impl<'a> Parser<'a> {\n             };\n         self.chari = closer;\n         let greed = try!(self.get_next_greedy());\n-        let inner = str::from_chars(\n+        let inner = String::from_chars(\n             self.chars.as_slice().slice(start + 1, closer));\n \n         // Parse the min and max values from the regex.\n@@ -944,7 +944,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn slice(&self, start: uint, end: uint) -> String {\n-        str::from_chars(self.chars.as_slice().slice(start, end)).to_string()\n+        String::from_chars(self.chars.as_slice().slice(start, end))\n     }\n }\n "}, {"sha": "1e9c58b66b75b2b32743def06a2516d064319d48", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -685,7 +685,7 @@ mod test {\n         let hs = uuid1.to_hyphenated_str();\n         let ss = uuid1.to_string();\n \n-        let hsn = str::from_chars(hs.as_slice()\n+        let hsn = String::from_chars(hs.as_slice()\n                                     .chars()\n                                     .filter(|&c| c != '-')\n                                     .collect::<Vec<char>>()"}, {"sha": "e2b7e6cbecdf940fe7421f7b5887b5a7498bc624", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -100,9 +100,7 @@ impl fmt::Show for AsciiArt {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // Convert each line into a string.\n         let lines = self.lines.iter()\n-                              .map(|line| {\n-                                  str::from_chars(line.as_slice()).to_string()\n-                              })\n+                              .map(|line| String::from_chars(line.as_slice()))\n                               .collect::<Vec<String>>();\n \n         // Concatenate the lines together using a new-line."}, {"sha": "d26a17d19f80783b89d4348604e367554e687a86", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a689483009dd4310a8650e6f0a4acf0134611f/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=20a689483009dd4310a8650e6f0a4acf0134611f", "patch": "@@ -13,13 +13,13 @@ use std::str;\n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n     let chs: Vec<char> = vec!('e', '\u00e9', '\u20ac', '\\U00010000');\n-    let s: String = str::from_chars(chs.as_slice()).to_string();\n+    let s: String = String::from_chars(chs.as_slice()).to_string();\n     let schs: Vec<char> = s.as_slice().chars().collect();\n \n     assert!(s.len() == 10u);\n     assert!(s.as_slice().char_len() == 4u);\n     assert!(schs.len() == 4u);\n-    assert!(str::from_chars(schs.as_slice()).to_string() == s);\n+    assert!(String::from_chars(schs.as_slice()) == s);\n     assert!(s.as_slice().char_at(0u) == 'e');\n     assert!(s.as_slice().char_at(1u) == '\u00e9');\n "}]}