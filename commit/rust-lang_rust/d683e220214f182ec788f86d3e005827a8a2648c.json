{"sha": "d683e220214f182ec788f86d3e005827a8a2648c", "node_id": "C_kwDOAAsO6NoAKGQ2ODNlMjIwMjE0ZjE4MmVjNzg4Zjg2ZDNlMDA1ODI3YThhMjY0OGM", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:03:18Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:03:18Z"}, "message": "Use u32 more", "tree": {"sha": "0111bef158404892659d2a7442e1d51de7cddab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0111bef158404892659d2a7442e1d51de7cddab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d683e220214f182ec788f86d3e005827a8a2648c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d683e220214f182ec788f86d3e005827a8a2648c", "html_url": "https://github.com/rust-lang/rust/commit/d683e220214f182ec788f86d3e005827a8a2648c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d683e220214f182ec788f86d3e005827a8a2648c/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8012acc90e6d6ba0e59bb0513dc419a3aa4739bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8012acc90e6d6ba0e59bb0513dc419a3aa4739bb", "html_url": "https://github.com/rust-lang/rust/commit/8012acc90e6d6ba0e59bb0513dc419a3aa4739bb"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "527ba08717a4b080826eab7598ae6333101bddfa", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d683e220214f182ec788f86d3e005827a8a2648c/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d683e220214f182ec788f86d3e005827a8a2648c/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=d683e220214f182ec788f86d3e005827a8a2648c", "patch": "@@ -66,7 +66,7 @@ impl WideChar {\n     }\n \n     /// Returns the length in UTF-16 or UTF-32 code units.\n-    fn wide_len(&self, enc: WideEncoding) -> usize {\n+    fn wide_len(&self, enc: WideEncoding) -> u32 {\n         match enc {\n             WideEncoding::Utf16 => {\n                 if self.len() == TextSize::from(4) {\n@@ -75,7 +75,6 @@ impl WideChar {\n                     1\n                 }\n             }\n-\n             WideEncoding::Utf32 => 1,\n         }\n     }\n@@ -157,20 +156,19 @@ impl LineIndex {\n \n     /// Transforms the `LineCol` with the given `WideEncoding` into a `WideLineCol`.\n     pub fn to_wide(&self, enc: WideEncoding, line_col: LineCol) -> Option<WideLineCol> {\n-        let col: TextSize = line_col.col.into();\n-        let mut res: usize = col.into();\n+        let mut col = line_col.col;\n         if let Some(wide_chars) = self.line_wide_chars.get(&line_col.line) {\n             for c in wide_chars.iter() {\n                 if u32::from(c.end) <= line_col.col {\n-                    res -= usize::from(c.len()) - c.wide_len(enc);\n+                    col -= u32::from(c.len()) - c.wide_len(enc);\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n                     break;\n                 }\n             }\n         }\n-        Some(WideLineCol { line: line_col.line, col: res as u32 })\n+        Some(WideLineCol { line: line_col.line, col })\n     }\n \n     /// Transforms the `WideLineCol` with the given `WideEncoding` into a `LineCol`."}]}