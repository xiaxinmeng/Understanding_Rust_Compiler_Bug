{"sha": "b146e335180e00db10d729837cd0507b4a945be5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDZlMzM1MTgwZTAwZGIxMGQ3Mjk4MzdjZDA1MDdiNGE5NDViZTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T08:51:24Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T10:37:25Z"}, "message": "Rollup merge of #49563 - japaric:std-thumb, r=alexcrichton\n\nadd a dist builder to build rust-std components for the THUMB targets\n\nthe rust-std component only contains the core and compiler-builtins (+c +mem) crates\n\ncc #49382\n\n- I'm not entirely sure if this PR alone will produce rust-std components installable by rustup or if something else needs to be changed\n- I could have done the THUMB builds in an existing builder / image; I wasn't sure if that was a good idea so I added a new image\n- I could build other crates like alloc into the rust-std component but, AFAICT, that would require calling Cargo a second time (one for alloc and one for compiler-builtins), or have alloc depend on compiler-builtins (#49503 will perform that change) *and* have alloc resurface the \"c\" and \"mem\" Cargo features.\n\nr? @alexcrichton", "tree": {"sha": "7500f08813237e7b163c5dd9cac077b3288cdea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7500f08813237e7b163c5dd9cac077b3288cdea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b146e335180e00db10d729837cd0507b4a945be5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrF/GYACgkQ/vbIBR0O\nATy8TRAAl4LfDZzGXlBlKhntOrbJAsLd2vTqkApJ26taRkyqwngaHC1m6bDsxnir\nKIKDOTmcmQ7AdS8QcHppa+Z92lizHSFdsqRYb+6JIo11M3HPSqOhLIWEx61G9fDn\nnLoN91DNbxA3uojuS8VFHgWHZqE+nfFJsZ2Pfht/pjutlJtUWyFVtNM5ScGiN7+g\nUq/0rLXlhbGMgc00TGfBGoDOK/ypfodOqecavXyh7cwZXpf1E8KIhjzAV/HRIJjM\noJGp95IvunhgEwd4AkzKrUYRVFtONJG/BdiVo0opF722fQpiLfaSVLSuJrHajf89\nKWWHwJmmm2RPmD/XKgGO3xCZTB4axnvkNPGvcPxE3hmEoDG3ijQL61UNlAIEHHQv\nSXPpgs+IRP07tyohrNvaSug9R8VHiaX8qqq5mDlSEjiGP70U14yHguPg4466THFX\n7jn6VTErEuk2d5K/q5iha/vN1MHoG9OMgssEqQj5mRSXtpDE1te3HqwF1gBAUdF3\nwHe7K5/wd06dwZEF2wMQ8DWr5+8/+E01+NoVVA4C+kL0mP3v8/SYtDSepTbkeN0d\nHpQLkyyOwEmeZ51vL21PASK46XZXPFBKEhxIzvkiVfTL0de0OyiFWRhhI/pynveg\nXC1ddJU8u/ZQ1zT6maJb2CaQ5xhb3x/VEpx+17qkOvHXOY3D3Ik=\n=vw+s\n-----END PGP SIGNATURE-----", "payload": "tree 7500f08813237e7b163c5dd9cac077b3288cdea7\nparent 23689cc8e9a6d2c1e6b5f01c749714194bf8f653\nparent b1015f5c5a4dcd6118b86ef5361371f04a7bce8b\nauthor kennytm <kennytm@gmail.com> 1522918284 +0800\ncommitter kennytm <kennytm@gmail.com> 1522924645 +0800\n\nRollup merge of #49563 - japaric:std-thumb, r=alexcrichton\n\nadd a dist builder to build rust-std components for the THUMB targets\n\nthe rust-std component only contains the core and compiler-builtins (+c +mem) crates\n\ncc #49382\n\n- I'm not entirely sure if this PR alone will produce rust-std components installable by rustup or if something else needs to be changed\n- I could have done the THUMB builds in an existing builder / image; I wasn't sure if that was a good idea so I added a new image\n- I could build other crates like alloc into the rust-std component but, AFAICT, that would require calling Cargo a second time (one for alloc and one for compiler-builtins), or have alloc depend on compiler-builtins (#49503 will perform that change) *and* have alloc resurface the \"c\" and \"mem\" Cargo features.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b146e335180e00db10d729837cd0507b4a945be5", "html_url": "https://github.com/rust-lang/rust/commit/b146e335180e00db10d729837cd0507b4a945be5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b146e335180e00db10d729837cd0507b4a945be5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "url": "https://api.github.com/repos/rust-lang/rust/commits/23689cc8e9a6d2c1e6b5f01c749714194bf8f653", "html_url": "https://github.com/rust-lang/rust/commit/23689cc8e9a6d2c1e6b5f01c749714194bf8f653"}, {"sha": "b1015f5c5a4dcd6118b86ef5361371f04a7bce8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1015f5c5a4dcd6118b86ef5361371f04a7bce8b", "html_url": "https://github.com/rust-lang/rust/commit/b1015f5c5a4dcd6118b86ef5361371f04a7bce8b"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "9cc18464fea094668f1c716c74cffe340e233827", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 44, "deletions": 34, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -140,48 +140,58 @@ pub fn std_cargo(build: &Builder,\n                  compiler: &Compiler,\n                  target: Interned<String>,\n                  cargo: &mut Command) {\n-    let mut features = build.std_features();\n-\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n \n-    // When doing a local rebuild we tell cargo that we're stage1 rather than\n-    // stage0. This works fine if the local rust and being-built rust have the\n-    // same view of what the default allocator is, but fails otherwise. Since\n-    // we don't have a way to express an allocator preference yet, work\n-    // around the issue in the case of a local rebuild with jemalloc disabled.\n-    if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n-        features.push_str(\" force_alloc_system\");\n-    }\n+    if build.no_std(target) == Some(true) {\n+        // for no-std targets we only compile a few no_std crates\n+        cargo.arg(\"--features\").arg(\"c mem\")\n+            .args(&[\"-p\", \"alloc\"])\n+            .args(&[\"-p\", \"compiler_builtins\"])\n+            .args(&[\"-p\", \"std_unicode\"])\n+            .arg(\"--manifest-path\")\n+            .arg(build.src.join(\"src/rustc/compiler_builtins_shim/Cargo.toml\"));\n+    } else {\n+        let mut features = build.std_features();\n+\n+        // When doing a local rebuild we tell cargo that we're stage1 rather than\n+        // stage0. This works fine if the local rust and being-built rust have the\n+        // same view of what the default allocator is, but fails otherwise. Since\n+        // we don't have a way to express an allocator preference yet, work\n+        // around the issue in the case of a local rebuild with jemalloc disabled.\n+        if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n+            features.push_str(\" force_alloc_system\");\n+        }\n \n-    if compiler.stage != 0 && build.config.sanitizers {\n-        // This variable is used by the sanitizer runtime crates, e.g.\n-        // rustc_lsan, to build the sanitizer runtime from C code\n-        // When this variable is missing, those crates won't compile the C code,\n-        // so we don't set this variable during stage0 where llvm-config is\n-        // missing\n-        // We also only build the runtimes when --enable-sanitizers (or its\n-        // config.toml equivalent) is used\n-        let llvm_config = build.ensure(native::Llvm {\n-            target: build.config.build,\n-            emscripten: false,\n-        });\n-        cargo.env(\"LLVM_CONFIG\", llvm_config);\n-    }\n+        if compiler.stage != 0 && build.config.sanitizers {\n+            // This variable is used by the sanitizer runtime crates, e.g.\n+            // rustc_lsan, to build the sanitizer runtime from C code\n+            // When this variable is missing, those crates won't compile the C code,\n+            // so we don't set this variable during stage0 where llvm-config is\n+            // missing\n+            // We also only build the runtimes when --enable-sanitizers (or its\n+            // config.toml equivalent) is used\n+            let llvm_config = build.ensure(native::Llvm {\n+                target: build.config.build,\n+                emscripten: false,\n+            });\n+            cargo.env(\"LLVM_CONFIG\", llvm_config);\n+        }\n \n-    cargo.arg(\"--features\").arg(features)\n-        .arg(\"--manifest-path\")\n-        .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n+        cargo.arg(\"--features\").arg(features)\n+            .arg(\"--manifest-path\")\n+            .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n \n-    if let Some(target) = build.config.target_config.get(&target) {\n-        if let Some(ref jemalloc) = target.jemalloc {\n-            cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n+        if let Some(target) = build.config.target_config.get(&target) {\n+            if let Some(ref jemalloc) = target.jemalloc {\n+                cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n+            }\n         }\n-    }\n-    if target.contains(\"musl\") {\n-        if let Some(p) = build.musl_root(target) {\n-            cargo.env(\"MUSL_ROOT\", p);\n+        if target.contains(\"musl\") {\n+            if let Some(p) = build.musl_root(target) {\n+                cargo.env(\"MUSL_ROOT\", p);\n+            }\n         }\n     }\n }"}, {"sha": "863abd14935a8f3493b0994ac4314e8bce5cb804", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -161,6 +161,7 @@ pub struct Target {\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub qemu_rootfs: Option<PathBuf>,\n+    pub no_std: bool,\n }\n \n /// Structure of the `config.toml` file that configuration is read from."}, {"sha": "e1f5d34bf67235c5e2a58225e4e4903f5b6b55a4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -642,7 +642,12 @@ impl Step for Std {\n         if build.hosts.iter().any(|t| t == target) {\n             builder.ensure(compile::Rustc { compiler, target });\n         } else {\n-            builder.ensure(compile::Test { compiler, target });\n+            if build.no_std(target) == Some(true) {\n+                // the `test` doesn't compile for no-std targets\n+                builder.ensure(compile::Std { compiler, target });\n+            } else {\n+                builder.ensure(compile::Test { compiler, target });\n+            }\n         }\n \n         let image = tmpdir(build).join(format!(\"{}-{}-image\", name, target));"}, {"sha": "ea4368c0323fbd761b127afd0e32a3a65222a869", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -750,6 +750,12 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns true if this is a no-std `target`, if defined\n+    fn no_std(&self, target: Interned<String>) -> Option<bool> {\n+        self.config.target_config.get(&target)\n+            .map(|t| t.no_std)\n+    }\n+\n     /// Returns whether the target will be tested using the `remote-test-client`\n     /// and `remote-test-server` binaries.\n     fn remote_tested(&self, target: Interned<String>) -> bool {"}, {"sha": "1b1cec5f18c07d530795f35ee5df4d4faa8145e8", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -169,6 +169,19 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n+        if target.contains(\"-none-\") {\n+            if build.no_std(*target).is_none() {\n+                let target = build.config.target_config.entry(target.clone())\n+                    .or_insert(Default::default());\n+\n+                target.no_std = true;\n+            }\n+\n+            if build.no_std(*target) == Some(false) {\n+                panic!(\"All the *-none-* targets are no-std targets\")\n+            }\n+        }\n+\n         // Make sure musl-root is valid\n         if target.contains(\"musl\") {\n             // If this is a native target (host is also musl) and no musl-root is given,"}, {"sha": "00366301aa17aba600cb8c4f112a220124daab0c", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -20,7 +20,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   bzip2 \\\n   patch \\\n   libssl-dev \\\n-  pkg-config\n+  pkg-config \\\n+  gcc-arm-none-eabi \\\n+  libnewlib-arm-none-eabi\n \n WORKDIR /build\n \n@@ -86,6 +88,10 @@ ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabihf\n ENV TARGETS=$TARGETS,aarch64-unknown-linux-musl\n ENV TARGETS=$TARGETS,sparc64-unknown-linux-gnu\n ENV TARGETS=$TARGETS,x86_64-unknown-redox\n+ENV TARGETS=$TARGETS,thumbv6m-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7m-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7em-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7em-none-eabihf\n \n # FIXME: remove armv5te vars after https://github.com/alexcrichton/cc-rs/issues/271\n #        get fixed and cc update"}, {"sha": "7d8423ca84eb41622f382652c0adb2641ea0fcbd", "filename": "src/rustc/compiler_builtins_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b146e335180e00db10d729837cd0507b4a945be5/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b146e335180e00db10d729837cd0507b4a945be5/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml?ref=b146e335180e00db10d729837cd0507b4a945be5", "patch": "@@ -35,5 +35,6 @@ cc = \"1.0.1\"\n [features]\n c = []\n default = [\"c\", \"rustbuild\", \"compiler-builtins\"]\n+mem = []\n rustbuild = []\n compiler-builtins = []"}]}