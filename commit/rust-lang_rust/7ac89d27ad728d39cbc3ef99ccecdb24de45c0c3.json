{"sha": "7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzg5ZDI3YWQ3MjhkMzljYmMzZWY5OWNjZWNkYjI0ZGU0NWMwYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-15T12:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-15T12:51:31Z"}, "message": "Auto merge of #29040 - nrc:save-defid, r=@nikomatsakis\n\nWith this change, normalised node ids correspond to def id indices where they exist, or are made disjoint from def ids otherwise.\r\n\r\nr? @nikomatsakis", "tree": {"sha": "b66374f73b9837aee820b4de844416a2e3528d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66374f73b9837aee820b4de844416a2e3528d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "html_url": "https://github.com/rust-lang/rust/commit/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad1b7d947b389d71b5d150d2fe92a6311c21c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad1b7d947b389d71b5d150d2fe92a6311c21c28", "html_url": "https://github.com/rust-lang/rust/commit/1ad1b7d947b389d71b5d150d2fe92a6311c21c28"}, {"sha": "06b5a951a040a36f920405c6e7d34ca6962dbd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b5a951a040a36f920405c6e7d34ca6962dbd83", "html_url": "https://github.com/rust-lang/rust/commit/06b5a951a040a36f920405c6e7d34ca6962dbd83"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "e5fadc9a19b92d174207198fdde328590ebfe77d", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "patch": "@@ -69,7 +69,7 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n     analysis: &'l ty::CrateAnalysis,\n \n     span: SpanUtils<'l>,\n-    fmt: FmtStrs<'l>,\n+    fmt: FmtStrs<'l, 'tcx>,\n \n     cur_scope: NodeId,\n }\n@@ -91,7 +91,8 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                   out: output_file,\n                                   dump_spans: false,\n                               },\n-                              span_utils),\n+                              span_utils,\n+                              tcx),\n             cur_scope: 0,\n         }\n     }"}, {"sha": "a32d8b1b761c540e839e3ad0df8bef5484d0e3ad", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=7ac89d27ad728d39cbc3ef99ccecdb24de45c0c3", "patch": "@@ -15,6 +15,7 @@ use super::span_utils::SpanUtils;\n \n use metadata::cstore::LOCAL_CRATE;\n use middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use middle::ty;\n \n use std::io::Write;\n \n@@ -51,9 +52,10 @@ impl Recorder {\n     }\n }\n \n-pub struct FmtStrs<'a> {\n+pub struct FmtStrs<'a, 'tcx: 'a> {\n     pub recorder: Box<Recorder>,\n     span: SpanUtils<'a>,\n+    tcx: &'a ty::ctxt<'tcx>,\n }\n \n macro_rules! s { ($e:expr) => { format!(\"{}\", $e) }}\n@@ -96,11 +98,29 @@ pub enum Row {\n     FnRef,\n }\n \n-impl<'a> FmtStrs<'a> {\n-    pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>) -> FmtStrs<'a> {\n+impl<'a, 'tcx: 'a> FmtStrs<'a, 'tcx> {\n+    pub fn new(rec: Box<Recorder>,\n+               span: SpanUtils<'a>,\n+               tcx: &'a ty::ctxt<'tcx>)\n+               -> FmtStrs<'a, 'tcx> {\n         FmtStrs {\n             recorder: rec,\n             span: span,\n+            tcx: tcx,\n+        }\n+    }\n+\n+    // Emitted ids are used to cross-reference items across crates. DefIds and\n+    // NodeIds do not usually correspond in any way. The strategy is to use the\n+    // index from the DefId as a crate-local id. However, within a crate, DefId\n+    // indices and NodeIds can overlap. So, we must adjust the NodeIds. If an\n+    // item can be identified by a DefId as well as a NodeId, then we use the\n+    // DefId index as the id. If it can't, then we have to use the NodeId, but\n+    // need to adjust it so it will not clash with any possible DefId index.\n+    fn normalize_node_id(&self, id: NodeId) -> usize {\n+        match self.tcx.map.opt_local_def_id(id) {\n+            Some(id) => id.index.as_usize(),\n+            None => id as usize + self.tcx.map.num_local_def_ids()\n         }\n     }\n \n@@ -321,6 +341,7 @@ impl<'a> FmtStrs<'a> {\n         let mut qualname = String::from(name);\n         qualname.push_str(\"$\");\n         qualname.push_str(&id.to_string());\n+        let id = self.normalize_node_id(id);\n         self.check_and_record(Variable,\n                               span,\n                               sub_span,\n@@ -338,6 +359,7 @@ impl<'a> FmtStrs<'a> {\n         let mut qualname = String::from(fn_name);\n         qualname.push_str(\"::\");\n         qualname.push_str(name);\n+        let id = self.normalize_node_id(id);\n         self.check_and_record(Variable,\n                               span,\n                               sub_span,\n@@ -354,6 +376,8 @@ impl<'a> FmtStrs<'a> {\n                       value: &str,\n                       typ: &str,\n                       scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Variable,\n                               span,\n                               sub_span,\n@@ -368,6 +392,8 @@ impl<'a> FmtStrs<'a> {\n                      qualname: &str,\n                      typ: &str,\n                      scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Variable,\n                               span,\n                               sub_span,\n@@ -381,6 +407,8 @@ impl<'a> FmtStrs<'a> {\n                     name: &str,\n                     scope_id: NodeId,\n                     value: &str) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Enum, span, sub_span, svec!(id, name, scope_id, value));\n     }\n \n@@ -393,6 +421,8 @@ impl<'a> FmtStrs<'a> {\n                              typ: &str,\n                              val: &str,\n                              scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Variant,\n                               span,\n                               sub_span,\n@@ -408,6 +438,9 @@ impl<'a> FmtStrs<'a> {\n                               typ: &str,\n                               val: &str,\n                               scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n+        let ctor_id = self.normalize_node_id(ctor_id);\n         self.check_and_record(VariantStruct,\n                               span,\n                               sub_span,\n@@ -420,6 +453,8 @@ impl<'a> FmtStrs<'a> {\n                   id: NodeId,\n                   name: &str,\n                   scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Function,\n                               span,\n                               sub_span,\n@@ -433,6 +468,8 @@ impl<'a> FmtStrs<'a> {\n                       name: &str,\n                       decl_id: Option<DefId>,\n                       scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         let values = match decl_id {\n             Some(decl_id) => svec!(id,\n                                    name,\n@@ -450,6 +487,8 @@ impl<'a> FmtStrs<'a> {\n                            id: NodeId,\n                            name: &str,\n                            scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(MethodDecl, span, sub_span, svec!(id, name, scope_id));\n     }\n \n@@ -461,6 +500,9 @@ impl<'a> FmtStrs<'a> {\n                       name: &str,\n                       scope_id: NodeId,\n                       value: &str) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n+        let ctor_id = self.normalize_node_id(ctor_id);\n         self.check_and_record(Struct,\n                               span,\n                               sub_span,\n@@ -474,6 +516,8 @@ impl<'a> FmtStrs<'a> {\n                      name: &str,\n                      scope_id: NodeId,\n                      value: &str) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(Trait, span, sub_span, svec!(id, name, scope_id, value));\n     }\n \n@@ -484,6 +528,8 @@ impl<'a> FmtStrs<'a> {\n                     ref_id: Option<DefId>,\n                     trait_id: Option<DefId>,\n                     scope_id: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let scope_id = self.normalize_node_id(scope_id);\n         let ref_id = ref_id.unwrap_or(CRATE_ROOT_DEF_ID);\n         let trait_id = trait_id.unwrap_or(CRATE_ROOT_DEF_ID);\n         self.check_and_record(Impl,\n@@ -504,6 +550,8 @@ impl<'a> FmtStrs<'a> {\n                    name: &str,\n                    parent: NodeId,\n                    filename: &str) {\n+        let id = self.normalize_node_id(id);\n+        let parent = self.normalize_node_id(parent);\n         self.check_and_record(Module,\n                               span,\n                               sub_span,\n@@ -517,6 +565,8 @@ impl<'a> FmtStrs<'a> {\n                          mod_id: Option<DefId>,\n                          name: &str,\n                          parent: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let parent = self.normalize_node_id(parent);\n         let mod_id = mod_id.unwrap_or(CRATE_ROOT_DEF_ID);\n         self.check_and_record(UseAlias,\n                               span,\n@@ -530,6 +580,8 @@ impl<'a> FmtStrs<'a> {\n                         id: NodeId,\n                         values: &str,\n                         parent: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let parent = self.normalize_node_id(parent);\n         self.check_and_record(UseGlob, span, sub_span, svec!(id, values, parent));\n     }\n \n@@ -541,6 +593,8 @@ impl<'a> FmtStrs<'a> {\n                             name: &str,\n                             loc: &str,\n                             parent: NodeId) {\n+        let id = self.normalize_node_id(id);\n+        let parent = self.normalize_node_id(parent);\n         self.check_and_record(ExternCrate,\n                               span,\n                               sub_span,\n@@ -552,6 +606,7 @@ impl<'a> FmtStrs<'a> {\n                        sub_span: Option<Span>,\n                        base_id: DefId,\n                        deriv_id: NodeId) {\n+        let deriv_id = self.normalize_node_id(deriv_id);\n         self.check_and_record(Inheritance,\n                               span,\n                               sub_span,\n@@ -563,6 +618,7 @@ impl<'a> FmtStrs<'a> {\n                        sub_span: Option<Span>,\n                        id: DefId,\n                        scope_id: NodeId) {\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(FnCall,\n                               span,\n                               sub_span,\n@@ -575,6 +631,7 @@ impl<'a> FmtStrs<'a> {\n                          defid: Option<DefId>,\n                          declid: Option<DefId>,\n                          scope_id: NodeId) {\n+        let scope_id = self.normalize_node_id(scope_id);\n         let defid = defid.unwrap_or(CRATE_ROOT_DEF_ID);\n         let (dcn, dck) = match declid {\n             Some(declid) => (s!(declid.index.as_usize()), s!(declid.krate)),\n@@ -587,6 +644,7 @@ impl<'a> FmtStrs<'a> {\n     }\n \n     pub fn sub_mod_ref_str(&mut self, span: Span, sub_span: Span, qualname: &str, parent: NodeId) {\n+        let parent = self.normalize_node_id(parent);\n         self.record_with_span(ModRef, span, sub_span, svec!(0, 0, qualname, parent));\n     }\n \n@@ -596,6 +654,7 @@ impl<'a> FmtStrs<'a> {\n                        id: NodeId,\n                        qualname: &str,\n                        value: &str) {\n+        let id = self.normalize_node_id(id);\n         self.check_and_record(Typedef, span, sub_span, svec!(id, qualname, value));\n     }\n \n@@ -621,6 +680,7 @@ impl<'a> FmtStrs<'a> {\n                    sub_span: Option<Span>,\n                    id: DefId,\n                    scope_id: NodeId) {\n+        let scope_id = self.normalize_node_id(scope_id);\n         self.check_and_record(kind,\n                               span,\n                               sub_span,"}]}