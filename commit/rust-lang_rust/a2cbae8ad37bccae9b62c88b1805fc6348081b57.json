{"sha": "a2cbae8ad37bccae9b62c88b1805fc6348081b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2JhZThhZDM3YmNjYWU5YjYyYzg4YjE4MDVmYzYzNDgwODFiNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T14:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-10T14:08:19Z"}, "message": "Rollup merge of #62275 - eddyb:const-drop-replace, r=pnkfelix\n\nrustc_mir: treat DropAndReplace as Drop + Assign in qualify_consts.\n\nThis slipped through the cracks and never got implemented (thankfully that just meant it was overly conservative and didn't allow assignments that don't *actually* drop the previous value).\nFixes #62273.\n\nr? @oli-obk", "tree": {"sha": "7af148861204308401cd5d57881a8b26e9f44a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af148861204308401cd5d57881a8b26e9f44a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2cbae8ad37bccae9b62c88b1805fc6348081b57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJfFTCRBK7hj4Ov3rIwAAdHIIAFQRM9vhrFW1TfbWME6Gn1XF\nCflzC/JpWriQ6PnJslgJ+pOzDMD/0V1GMGRQvQzTSvaOuIWHq1xfZkkE1WWvs7mg\n+z4ef2yfYyCOc3P8JV8vzymmYPs4SvWb03tFeFqaU3uFj9lNuex1S1tfFLUnYIfJ\nHC+oVC4W61YBTdJDtvbDGxO9dkuW995f77KkkvGgK394KAOgg6lvomVxAvmGZTB3\nOGz+1ps58c2bGxk5ovfd3sMmULqa5WcZP67jbvowbdxbRqPuc0qbZ2bvncC1++Z3\nHhesebeynYhx0hCHHnsdPwrTe9FXPHYHax81UgaFkcBD3kjUR/aiXjvESj+q9Ow=\n=QYoO\n-----END PGP SIGNATURE-----\n", "payload": "tree 7af148861204308401cd5d57881a8b26e9f44a94\nparent d4e15655092d1bdae79619eb0ff2c3cb5468fc36\nparent f6e5ac640be7ca71f389b6842cfeb83c24bd15c7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562767699 +0200\ncommitter GitHub <noreply@github.com> 1562767699 +0200\n\nRollup merge of #62275 - eddyb:const-drop-replace, r=pnkfelix\n\nrustc_mir: treat DropAndReplace as Drop + Assign in qualify_consts.\n\nThis slipped through the cracks and never got implemented (thankfully that just meant it was overly conservative and didn't allow assignments that don't *actually* drop the previous value).\nFixes #62273.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cbae8ad37bccae9b62c88b1805fc6348081b57", "html_url": "https://github.com/rust-lang/rust/commit/a2cbae8ad37bccae9b62c88b1805fc6348081b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2cbae8ad37bccae9b62c88b1805fc6348081b57/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e15655092d1bdae79619eb0ff2c3cb5468fc36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e15655092d1bdae79619eb0ff2c3cb5468fc36", "html_url": "https://github.com/rust-lang/rust/commit/d4e15655092d1bdae79619eb0ff2c3cb5468fc36"}, {"sha": "f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "html_url": "https://github.com/rust-lang/rust/commit/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "1fa539f8a2aee28d761b96b2a311e7af725b101d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a2cbae8ad37bccae9b62c88b1805fc6348081b57", "patch": "@@ -142,6 +142,7 @@ impl<'a, 'tcx> ConstCx<'a, 'tcx> {\n #[derive(Copy, Clone, Debug)]\n enum ValueSource<'a, 'tcx> {\n     Rvalue(&'a Rvalue<'tcx>),\n+    DropAndReplace(&'a Operand<'tcx>),\n     Call {\n         callee: &'a Operand<'tcx>,\n         args: &'a [Operand<'tcx>],\n@@ -298,6 +299,7 @@ trait Qualif {\n     fn in_value(cx: &ConstCx<'_, 'tcx>, source: ValueSource<'_, 'tcx>) -> bool {\n         match source {\n             ValueSource::Rvalue(rvalue) => Self::in_rvalue(cx, rvalue),\n+            ValueSource::DropAndReplace(source) => Self::in_operand(cx, source),\n             ValueSource::Call { callee, args, return_ty } => {\n                 Self::in_call(cx, callee, args, return_ty)\n             }\n@@ -889,6 +891,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             let target = match body[bb].terminator().kind {\n                 TerminatorKind::Goto { target } |\n                 TerminatorKind::Drop { target, .. } |\n+                TerminatorKind::DropAndReplace { target, .. } |\n                 TerminatorKind::Assert { target, .. } |\n                 TerminatorKind::Call { destination: Some((_, target)), .. } => {\n                     Some(target)\n@@ -900,7 +903,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n \n                 TerminatorKind::SwitchInt {..} |\n-                TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume |\n                 TerminatorKind::Abort |\n                 TerminatorKind::GeneratorDrop |\n@@ -1393,8 +1395,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             for arg in args {\n                 self.visit_operand(arg, location);\n             }\n-        } else if let TerminatorKind::Drop { location: ref place, .. } = *kind {\n-            self.super_terminator_kind(kind, location);\n+        } else if let TerminatorKind::Drop {\n+            location: ref place, ..\n+        } | TerminatorKind::DropAndReplace {\n+            location: ref place, ..\n+        } = *kind {\n+            match *kind {\n+                TerminatorKind::DropAndReplace { .. } => {}\n+                _ => self.super_terminator_kind(kind, location),\n+            }\n \n             // Deny *any* live drops anywhere other than functions.\n             if self.mode.requires_const_checking() {\n@@ -1423,6 +1432,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n             }\n+\n+            match *kind {\n+                TerminatorKind::DropAndReplace { ref value, .. } => {\n+                    self.assign(place, ValueSource::DropAndReplace(value), location);\n+                    self.visit_operand(value, location);\n+                }\n+                _ => {}\n+            }\n         } else {\n             // Qualify any operands inside other terminators.\n             self.super_terminator_kind(kind, location);"}, {"sha": "18692dbced679d4dfeb3c1d9102614715f830eb2", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=a2cbae8ad37bccae9b62c88b1805fc6348081b57", "patch": "@@ -9,10 +9,21 @@ impl Drop for FakeNeedsDrop {\n // ok\n const X: FakeNeedsDrop = { let x = FakeNeedsDrop; x };\n \n+// ok (used to incorrectly error, see #62273)\n+const X2: FakeNeedsDrop = { let x; x = FakeNeedsDrop; x };\n+\n // error\n const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR constant contains unimplemented expression type\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+// error\n+const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+//~^ ERROR destructors cannot be evaluated at compile-time\n \n // error\n const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR constant contains unimplemented expression type\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+// error\n+const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n+//~^ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "0a6a222ae2963a30ea5cb396edebb294dbe53d71", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2cbae8ad37bccae9b62c88b1805fc6348081b57/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=a2cbae8ad37bccae9b62c88b1805fc6348081b57", "patch": "@@ -1,15 +1,26 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:13:55\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:16:32\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-   |                                                       ^\n+   |                                ^^^^^ constants cannot evaluate destructors\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:17:35\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:20:33\n+   |\n+LL | const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+   |                                 ^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:24:21\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-   |                                   ^\n+   |                     ^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:28:22\n+   |\n+LL | const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n+   |                      ^^^^^ constants cannot evaluate destructors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0019`."}]}