{"sha": "f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYzZhMmUzZGJlNDc3YTdlMGFjNzE0YTViZGJkYTZlODgzOGZjZmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-15T14:15:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-16T17:38:19Z"}, "message": "Fix remaining test failure", "tree": {"sha": "bc2e523c1ab11a257a9910f471fe92759af0d6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2e523c1ab11a257a9910f471fe92759af0d6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "html_url": "https://github.com/rust-lang/rust/commit/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0660dd10d203cba4069b48d00d02ec9935a916f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0660dd10d203cba4069b48d00d02ec9935a916f0", "html_url": "https://github.com/rust-lang/rust/commit/0660dd10d203cba4069b48d00d02ec9935a916f0"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "204c30e3d03e21e7be6c350444c68ec19f513283", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "patch": "@@ -21,9 +21,7 @@ fn expand_rules(rules: &[crate::Rule], input: &tt::Subtree) -> ExpandResult<tt::\n         let (new_match, bindings_err) = matcher::match_(&rule.lhs, input);\n         if bindings_err.is_none() {\n             // if we find a rule that applies without errors, we're done\n-            eprintln!(\"match without errors: {:?}\", new_match);\n             let (res, transcribe_err) = transcriber::transcribe(&rule.rhs, &new_match.bindings);\n-            eprintln!(\"transcribe_err = {:?}\", transcribe_err);\n             if transcribe_err.is_none() {\n                 return (res, None);\n             }"}, {"sha": "f40d55d4eec0112a057d37e6373f891df6d8f2fc", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "patch": "@@ -255,7 +255,7 @@ impl<'a> TtIter<'a> {\n     pub(crate) fn expect_fragment(\n         &mut self,\n         fragment_kind: ra_parser::FragmentKind,\n-    ) -> ExpandResult<tt::TokenTree> {\n+    ) -> ExpandResult<Option<tt::TokenTree>> {\n         pub(crate) struct OffsetTokenSink<'a> {\n             pub(crate) cursor: Cursor<'a>,\n             pub(crate) error: bool,\n@@ -297,12 +297,16 @@ impl<'a> TtIter<'a> {\n             }\n         }\n         self.inner = self.inner.as_slice()[res.len()..].iter();\n+        if res.len() == 0 && err.is_none() {\n+            err = Some(err!(\"no tokens consumed\"));\n+        }\n         let res = match res.len() {\n-            1 => res[0].clone(),\n-            _ => tt::TokenTree::Subtree(tt::Subtree {\n+            1 => Some(res[0].clone()),\n+            0 => None,\n+            _ => Some(tt::TokenTree::Subtree(tt::Subtree {\n                 delimiter: None,\n                 token_trees: res.into_iter().cloned().collect(),\n-            }),\n+            })),\n         };\n         (res, err)\n     }\n@@ -312,7 +316,7 @@ impl<'a> TtIter<'a> {\n         match fork.expect_fragment(Visibility) {\n             (tt, None) => {\n                 *self = fork;\n-                Some(tt)\n+                tt\n             }\n             (_, Some(_)) => None,\n         }\n@@ -419,8 +423,8 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n         }\n     };\n     let (tt, err) = input.expect_fragment(fragment);\n-    let fragment = if kind == \"expr\" { Fragment::Ast(tt) } else { Fragment::Tokens(tt) };\n-    (Some(fragment), err)\n+    let fragment = if kind == \"expr\" { tt.map(Fragment::Ast) } else { tt.map(Fragment::Tokens) };\n+    (fragment, err)\n }\n \n fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &tt::Subtree) -> Result<(), ExpandError> {"}]}