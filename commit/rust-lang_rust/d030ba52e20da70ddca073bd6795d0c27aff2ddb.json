{"sha": "d030ba52e20da70ddca073bd6795d0c27aff2ddb", "node_id": "C_kwDOAAsO6NoAKGQwMzBiYTUyZTIwZGE3MGRkY2EwNzNiZDY3OTVkMGMyN2FmZjJkZGI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T17:08:59Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:05:52Z"}, "message": "Use structured suggestions for `for_loop_over_fallibles` lint", "tree": {"sha": "b9f9a6f9f91c6f2314bdd187e390c6a9126987da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f9a6f9f91c6f2314bdd187e390c6a9126987da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d030ba52e20da70ddca073bd6795d0c27aff2ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d030ba52e20da70ddca073bd6795d0c27aff2ddb", "html_url": "https://github.com/rust-lang/rust/commit/d030ba52e20da70ddca073bd6795d0c27aff2ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d030ba52e20da70ddca073bd6795d0c27aff2ddb/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa380a82a5886768d0509222dc0d49db231a3403", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa380a82a5886768d0509222dc0d49db231a3403", "html_url": "https://github.com/rust-lang/rust/commit/fa380a82a5886768d0509222dc0d49db231a3403"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "d765131442f6f603902f55ad44eb44d93228adee", "filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d030ba52e20da70ddca073bd6795d0c27aff2ddb/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d030ba52e20da70ddca073bd6795d0c27aff2ddb/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs?ref=d030ba52e20da70ddca073bd6795d0c27aff2ddb", "patch": "@@ -1,6 +1,7 @@\n use crate::{LateContext, LateLintPass, LintContext};\n \n use hir::{Expr, Pat};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_span::sym;\n@@ -65,18 +66,24 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopOverFallibles {\n             _ => return,\n         };\n \n-        let Ok(pat_snip) = cx.sess().source_map().span_to_snippet(pat.span) else { return };\n         let Ok(arg_snip) = cx.sess().source_map().span_to_snippet(arg.span) else { return };\n \n-        let help_string = format!(\n-            \"consider replacing `for {pat_snip} in {arg_snip}` with `if let {var}({pat_snip}) = {arg_snip}`\"\n-        );\n         let msg = format!(\n             \"for loop over `{arg_snip}`, which is {article} `{ty}`. This is more readably written as an `if let` statement\",\n         );\n \n         cx.struct_span_lint(FOR_LOOP_OVER_FALLIBLES, arg.span, |diag| {\n-            diag.build(msg).help(help_string).emit()\n+            diag.build(msg)\n+                .multipart_suggestion_verbose(\n+                    \"consider using `if let` to clear intent\",\n+                    vec![\n+                        // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n+                        (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n+                        (pat.span.between(arg.span), format!(\") = \")),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit()\n         })\n     }\n }\n@@ -89,11 +96,10 @@ fn extract_for_loop<'tcx>(expr: &Expr<'tcx>) -> Option<(&'tcx Pat<'tcx>, &'tcx E\n     && let [stmt] = block.stmts\n     && let hir::StmtKind::Expr(e) = stmt.kind\n     && let hir::ExprKind::Match(_, [_, some_arm], _) = e.kind\n-    && let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind \n+    && let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind\n     {\n         Some((field.pat, arg))\n     } else {\n         None\n     }\n-    \n-}\n\\ No newline at end of file\n+}"}]}