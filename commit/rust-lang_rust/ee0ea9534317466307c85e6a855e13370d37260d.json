{"sha": "ee0ea9534317466307c85e6a855e13370d37260d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMGVhOTUzNDMxNzQ2NjMwN2M4NWU2YTg1NWUxMzM3MGQzNzI2MGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-12-27T09:15:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-12-28T09:29:21Z"}, "message": "rustdoc: pretty-print nested bodies in inlined constants.", "tree": {"sha": "35ee7279b97b996b377f6b8df72631f363b45648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ee7279b97b996b377f6b8df72631f363b45648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0ea9534317466307c85e6a855e13370d37260d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ea9534317466307c85e6a855e13370d37260d", "html_url": "https://github.com/rust-lang/rust/commit/ee0ea9534317466307c85e6a855e13370d37260d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ea9534317466307c85e6a855e13370d37260d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aae835803037e578baa19e5a4982177f5444c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aae835803037e578baa19e5a4982177f5444c26", "html_url": "https://github.com/rust-lang/rust/commit/4aae835803037e578baa19e5a4982177f5444c26"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "9149da459c26e85127ca50ed0bca90877fd42d7b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -856,7 +856,7 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct BodyId {\n     pub node_id: NodeId,\n }"}, {"sha": "7151e5226cab0cb3f365d3b8a63d07af06706403", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -33,6 +33,8 @@ use mir::Mir;\n use session::Session;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeSet, DefIdMap};\n+\n+use std::collections::BTreeMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n use syntax::ast;\n@@ -250,6 +252,7 @@ pub trait CrateStore<'tcx> {\n     // misc. metadata\n     fn maybe_get_item_body<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                -> Option<&'tcx hir::Body>;\n+    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body>;\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool;\n \n     fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> Mir<'tcx>;\n@@ -421,6 +424,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                                -> Option<&'tcx hir::Body> {\n         bug!(\"maybe_get_item_body\")\n     }\n+    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n+        bug!(\"item_body_nested_bodies\")\n+    }\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n         bug!(\"const_is_rvalue_promotable_to_static\")\n     }"}, {"sha": "b27b164bd47aaffec7910ac2f3ca775b22f0f119", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -30,6 +30,7 @@ pub struct Ast<'tcx> {\n     id_range: IdRange,\n     body: Lazy<hir::Body>,\n     side_tables: LazySeq<(ast::NodeId, TableEntry<'tcx>)>,\n+    pub nested_bodies: LazySeq<hir::Body>,\n     pub rvalue_promotable_to_static: bool,\n }\n \n@@ -61,13 +62,24 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             visitor.count\n         };\n \n+        let nested_pos = self.position();\n+        let nested_count = {\n+            let mut visitor = NestedBodyEncodingVisitor {\n+                ecx: self,\n+                count: 0,\n+            };\n+            visitor.visit_body(body);\n+            visitor.count\n+        };\n+\n         let rvalue_promotable_to_static =\n             self.tcx.rvalue_promotable_to_static.borrow()[&body.value.id];\n \n         self.lazy(&Ast {\n             id_range: id_visitor.result(),\n             body: Lazy::with_position(body_pos),\n             side_tables: LazySeq::with_position_and_length(tables_pos, tables_count),\n+            nested_bodies: LazySeq::with_position_and_length(nested_pos, nested_count),\n             rvalue_promotable_to_static: rvalue_promotable_to_static\n         })\n     }\n@@ -102,6 +114,25 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n     }\n }\n \n+struct NestedBodyEncodingVisitor<'a, 'b: 'a, 'tcx: 'b> {\n+    ecx: &'a mut EncodeContext<'b, 'tcx>,\n+    count: usize,\n+}\n+\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedBodyEncodingVisitor<'a, 'b, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_nested_body(&mut self, body: hir::BodyId) {\n+        let body = self.ecx.tcx.map.body(body);\n+        body.encode(self.ecx).unwrap();\n+        self.count += 1;\n+\n+        self.visit_body(body);\n+    }\n+}\n+\n /// Decodes an item's body from its AST in the cdata's metadata and adds it to the\n /// ast-map.\n pub fn decode_body<'a, 'tcx>(cdata: &CrateMetadata,"}, {"sha": "64513fa41b219d03938faa1328369aa54df3b1c6", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -36,6 +36,8 @@ use rustc::hir::svh::Svh;\n use rustc_back::target::Target;\n use rustc::hir;\n \n+use std::collections::BTreeMap;\n+\n impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn describe_def(&self, def: DefId) -> Option<Def> {\n         self.dep_graph.read(DepNode::MetaData(def));\n@@ -455,6 +457,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         inlined\n     }\n \n+    fn item_body_nested_bodies(&self, def: DefId) -> BTreeMap<hir::BodyId, hir::Body> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).item_body_nested_bodies(def.index)\n+    }\n+\n     fn const_is_rvalue_promotable_to_static(&self, def: DefId) -> bool {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).const_is_rvalue_promotable_to_static(def.index)"}, {"sha": "c27e06c50222be8e123094038dfba0b1424fd07b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -32,6 +32,7 @@ use rustc::mir::Mir;\n \n use std::borrow::Cow;\n use std::cell::Ref;\n+use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::str;\n@@ -829,6 +830,12 @@ impl<'a, 'tcx> CrateMetadata {\n         })\n     }\n \n+    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n+        self.entry(id).ast.into_iter().flat_map(|ast| {\n+            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n+        }).collect()\n+    }\n+\n     pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {\n         self.entry(id).ast.expect(\"const item missing `ast`\")\n             .decode(self).rvalue_promotable_to_static"}, {"sha": "cba5e1ba6f3184b2f928ce29ed60d915ff5c4726", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ea9534317466307c85e6a855e13370d37260d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ee0ea9534317466307c85e6a855e13370d37260d", "patch": "@@ -10,6 +10,8 @@\n \n //! Support for inlining external documentation into the current AST.\n \n+use std::collections::BTreeMap;\n+use std::io;\n use std::iter::once;\n \n use syntax::ast;\n@@ -342,8 +344,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         match item.kind {\n             ty::AssociatedKind::Const => {\n                 let default = if item.defaultness.has_value() {\n-                    Some(hir::print::to_string(&cx.tcx.map, |s| s.print_expr(\n-                        &tcx.sess.cstore.maybe_get_item_body(tcx, item.def_id).unwrap().value)))\n+                    Some(print_inlined_const(cx, item.def_id))\n                 } else {\n                     None\n                 };\n@@ -473,11 +474,33 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n     }\n }\n \n+struct InlinedConst {\n+    nested_bodies: BTreeMap<hir::BodyId, hir::Body>\n+}\n+\n+impl hir::print::PpAnn for InlinedConst {\n+    fn nested(&self, state: &mut hir::print::State, nested: hir::print::Nested)\n+              -> io::Result<()> {\n+        if let hir::print::Nested::Body(body) = nested {\n+            state.print_expr(&self.nested_bodies[&body].value)\n+        } else {\n+            Ok(())\n+        }\n+    }\n+}\n+\n+fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n+    let body = cx.tcx.sess.cstore.maybe_get_item_body(cx.tcx, did).unwrap();\n+    let inlined = InlinedConst {\n+        nested_bodies: cx.tcx.sess.cstore.item_body_nested_bodies(did)\n+    };\n+    hir::print::to_string(&inlined, |s| s.print_expr(&body.value))\n+}\n+\n fn build_const(cx: &DocContext, did: DefId) -> clean::Constant {\n     clean::Constant {\n         type_: cx.tcx.item_type(did).clean(cx),\n-        expr: hir::print::to_string(&cx.tcx.map, |s| s.print_expr(\n-            &cx.tcx.sess.cstore.maybe_get_item_body(cx.tcx, did).unwrap().value))\n+        expr: print_inlined_const(cx, did)\n     }\n }\n "}]}