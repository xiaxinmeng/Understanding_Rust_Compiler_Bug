{"sha": "3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNmE2ZjY2NzMwNDFjZjllZTMxNWMwMGY5YjBlMjRlMmMwNjcwOTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T13:16:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T13:16:58Z"}, "message": "Add render test functionality", "tree": {"sha": "001e556601e9dd37556338f877759466846c7af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001e556601e9dd37556338f877759466846c7af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "html_url": "https://github.com/rust-lang/rust/commit/3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39198490f878a9ae395af1cf923fb7375de4548", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39198490f878a9ae395af1cf923fb7375de4548", "html_url": "https://github.com/rust-lang/rust/commit/d39198490f878a9ae395af1cf923fb7375de4548"}], "stats": {"total": 203, "additions": 139, "deletions": 64}, "files": [{"sha": "7903b919c6a8a9413b90d692d5e028b593bf11af", "filename": ".cargo/config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -1,4 +1,5 @@\n [alias]\n-parse = \"run --package tools --bin parse\"\n gen-kinds = \"run --package tools -- gen-kinds\"\n gen-tests = \"run --package tools -- gen-tests\"\n+render-test = \"run --package cli -- render-test\"\n+parse = \"run --package cli -- parse\""}, {"sha": "b89573e2bacbe9edf66ef770143b1ab281bfbd64", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -5,7 +5,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n license = \"MIT OR Apache-2.0\"\n \n [workspace]\n-members = [ \"tools\" ]\n+members = [ \"tools\", \"cli\" ]\n \n [dependencies]\n unicode-xid = \"0.1.0\""}, {"sha": "a259eef633ecf269ebea7c7c7e9cbf3b654c8187", "filename": "cli/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2FCargo.toml?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"cli\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+publish = false\n+\n+[dependencies]\n+clap = \"2.32.0\"\n+failure = \"0.1.1\"\n+libsyntax2 = { path = \"../\" }\n+tools = { path = \"../tools\" }"}, {"sha": "94183c552e83c4a45fba43ccb3bbfce785451006", "filename": "cli/src/main.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -0,0 +1,68 @@\n+extern crate clap;\n+#[macro_use]\n+extern crate failure;\n+extern crate libsyntax2;\n+extern crate tools;\n+\n+use std::{fs, path::Path, io::Read};\n+use clap::{App, Arg, SubCommand};\n+use tools::collect_tests;\n+\n+type Result<T> = ::std::result::Result<T, failure::Error>;\n+\n+fn main() -> Result<()> {\n+    let matches = App::new(\"libsyntax2-cli\")\n+        .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n+        .subcommand(\n+            SubCommand::with_name(\"render-test\")\n+                .arg(Arg::with_name(\"line\").long(\"--line\").required(true).takes_value(true))\n+                .arg(Arg::with_name(\"file\").long(\"--file\").required(true).takes_value(true))\n+        )\n+        .subcommand(SubCommand::with_name(\"parse\"))\n+        .get_matches();\n+    match matches.subcommand() {\n+        (\"parse\", _) => {\n+            let tree = parse()?;\n+            println!(\"{}\", tree);\n+        },\n+        (\"render-test\", Some(matches)) => {\n+            let file = matches.value_of(\"file\").unwrap();\n+            let file = Path::new(file);\n+            let line: usize = matches.value_of(\"line\").unwrap().parse()?;\n+            let line = line - 1;\n+            let (test, tree) = render_test(file, line)?;\n+            println!(\"{}\\n{}\", test, tree);\n+        }\n+        _ => unreachable!(),\n+    }\n+    Ok(())\n+\n+}\n+\n+fn parse() -> Result<String> {\n+    let text = read_stdin()?;\n+    let file = libsyntax2::parse(text);\n+    let tree = libsyntax2::utils::dump_tree(&file);\n+    Ok(tree)\n+}\n+\n+fn read_stdin() -> Result<String> {\n+    let mut buff = String::new();\n+    ::std::io::stdin().read_to_string(&mut buff)?;\n+    Ok(buff)\n+}\n+\n+fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n+    let text = fs::read_to_string(file)?;\n+    let tests = collect_tests(&text);\n+    let test = tests.into_iter().find(|t| {\n+        t.start_line <= line && line <= t.start_line + t.text.lines().count()\n+    });\n+    let test = match test {\n+        None => bail!(\"No test found at line {} at {}\", line, file.display()),\n+        Some(test) => test,\n+    };\n+    let file = libsyntax2::parse(test.text.clone());\n+    let tree = libsyntax2::utils::dump_tree(&file);\n+    Ok((test.text, tree))\n+}"}, {"sha": "9e513edb23b4f21f1060ced02cc78f5ef6c034fa", "filename": "src/bin/cli.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d39198490f878a9ae395af1cf923fb7375de4548/src%2Fbin%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39198490f878a9ae395af1cf923fb7375de4548/src%2Fbin%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcli.rs?ref=d39198490f878a9ae395af1cf923fb7375de4548", "patch": "@@ -1,20 +0,0 @@\n-extern crate libsyntax2;\n-\n-use std::io::Read;\n-\n-use libsyntax2::{\n-    parse, utils::dump_tree\n-};\n-\n-fn main() {\n-    let text = read_input();\n-    let file = parse(text);\n-    let tree = dump_tree(&file);\n-    println!(\"{}\", tree);\n-}\n-\n-fn read_input() -> String {\n-    let mut buff = String::new();\n-    ::std::io::stdin().read_to_string(&mut buff).unwrap();\n-    buff\n-}"}, {"sha": "40f41535e6d66ced46166903c39f2c80bb550f06", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -1,5 +1,9 @@\n use super::*;\n \n+// test expr_literals\n+// fn foo() {\n+//     let _ = 92;\n+// }\n pub(super) fn literal(p: &mut Parser) -> bool {\n     match p.current() {\n         TRUE_KW | FALSE_KW | INT_NUMBER | FLOAT_NUMBER | BYTE | CHAR | STRING | RAW_STRING"}, {"sha": "157818bdf926e12d6b1cb526faec7f7500ab70da", "filename": "tools/src/lib.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Flib.rs?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -0,0 +1,50 @@\n+extern crate itertools;\n+use itertools::Itertools;\n+\n+#[derive(Debug, Eq)]\n+pub struct Test {\n+    pub start_line: usize,\n+    pub name: String,\n+    pub text: String,\n+}\n+\n+impl PartialEq for Test {\n+    fn eq(&self, other: &Test) -> bool {\n+        self.name.eq(&other.name)\n+    }\n+}\n+\n+pub fn collect_tests(s: &str) -> Vec<Test> {\n+    let mut res = vec![];\n+    let prefix = \"// \";\n+    let comment_blocks = s\n+        .lines()\n+        .map(str::trim_left)\n+        .enumerate()\n+        .group_by(|(idx, line)| line.starts_with(prefix));\n+\n+    'outer: for (is_comment, block) in comment_blocks.into_iter() {\n+        if !is_comment {\n+            continue;\n+        }\n+        let mut block = block.map(|(idx, line)| (idx, &line[prefix.len()..]));\n+\n+        let (start_line, name) = loop {\n+            match block.next() {\n+                Some((idx, line)) if line.starts_with(\"test \") => {\n+                    break (idx, line[\"test \".len()..].to_string())\n+                },\n+                Some(_) => (),\n+                None => continue 'outer,\n+            }\n+        };\n+        let text: String = itertools::join(\n+            block.map(|(_, line)| line)\n+                .chain(::std::iter::once(\"\")),\n+            \"\\n\"\n+        );\n+        assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n+        res.push(Test { start_line, name, text })\n+    }\n+    res\n+}"}, {"sha": "671f0538847ab7bf54ed4c49b57bab93eb7559da", "filename": "tools/src/main.rs", "status": "renamed", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6a6f6673041cf9ee315c00f9b0e24e2c067091/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=3b6a6f6673041cf9ee315c00f9b0e24e2c067091", "patch": "@@ -1,14 +1,14 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n-extern crate itertools;\n extern crate ron;\n extern crate tera;\n extern crate walkdir;\n+extern crate tools;\n \n-use clap::{App, Arg, SubCommand};\n-use itertools::Itertools;\n use std::{collections::HashSet, fs, path::Path};\n+use clap::{App, Arg, SubCommand};\n+use tools::{collect_tests, Test};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -96,17 +96,6 @@ fn gen_tests(verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-#[derive(Debug, Eq)]\n-struct Test {\n-    name: String,\n-    text: String,\n-}\n-\n-impl PartialEq for Test {\n-    fn eq(&self, other: &Test) -> bool {\n-        self.name.eq(&other.name)\n-    }\n-}\n \n impl ::std::hash::Hash for Test {\n     fn hash<H: ::std::hash::Hasher>(&self, state: &mut H) {\n@@ -135,34 +124,6 @@ fn tests_from_dir(dir: &Path) -> Result<HashSet<Test>> {\n     Ok(res)\n }\n \n-fn collect_tests(s: &str) -> Vec<Test> {\n-    let mut res = vec![];\n-    let prefix = \"// \";\n-    let comment_blocks = s\n-        .lines()\n-        .map(str::trim_left)\n-        .group_by(|line| line.starts_with(prefix));\n-\n-    'outer: for (is_comment, block) in comment_blocks.into_iter() {\n-        if !is_comment {\n-            continue;\n-        }\n-        let mut block = block.map(|line| &line[prefix.len()..]);\n-\n-        let name = loop {\n-            match block.next() {\n-                Some(line) if line.starts_with(\"test \") => break line[\"test \".len()..].to_string(),\n-                Some(_) => (),\n-                None => continue 'outer,\n-            }\n-        };\n-        let text: String = itertools::join(block.chain(::std::iter::once(\"\")), \"\\n\");\n-        assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n-        res.push(Test { name, text })\n-    }\n-    res\n-}\n-\n fn existing_tests(dir: &Path) -> Result<HashSet<Test>> {\n     let mut res = HashSet::new();\n     for file in fs::read_dir(dir)? {", "previous_filename": "tools/src/bin/main.rs"}]}