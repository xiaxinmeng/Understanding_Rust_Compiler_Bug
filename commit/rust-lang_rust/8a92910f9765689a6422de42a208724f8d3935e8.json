{"sha": "8a92910f9765689a6422de42a208724f8d3935e8", "node_id": "C_kwDOAAsO6NoAKDhhOTI5MTBmOTc2NTY4OWE2NDIyZGU0MmEyMDg3MjRmOGQzOTM1ZTg", "commit": {"author": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T14:53:17Z"}, "committer": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T14:53:17Z"}, "message": "Formatting", "tree": {"sha": "24211e45598d3d9a3c1d6b38e027bab4d7fb8e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24211e45598d3d9a3c1d6b38e027bab4d7fb8e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a92910f9765689a6422de42a208724f8d3935e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE7WZLfNy5oeDQue2p1FagNJ1zoKMFAmM+690ACgkQ1FagNJ1z\noKNuOxAAplmZR+JcCMKqCu8iLEr7fkuHkvX4LVMHnnGFVsa2HttKl2rt/5G6c4td\ndh2HGNxc5e3AmlNyvCO8KPP2gLZtEwWW1w0IvCtgt5JaZ+cbf1pKfRd91SjZ5x77\nJFpQdw8lx3IORQ5gPSv3EZGJE3hXtd37/r2LCoZcyKI4lj5oPSazrneotK6EeFnJ\nqRrnI/PjvD3jOo5VbyAigTnC2zoRWn/ekpbxSro0h7E4smgSpSwghqnS5fVYbLjO\ngagkFMa3a36gCoeC7+NSdiPsp/29CL5NFyt2qg7pPU8s3W2Wdte18asRmYEsgJwR\nSe/KX2Y596ZRi5GAeSHoi0ItUQL+8/Rf+9tGMIGEjHvXZ2tOwZwAFYmsueMfD712\n0AnYq/QVim9ZiV3T944pw5K5qFkmhwgp5SiG4U9erlt2Av7XKDdFrCl41YQoxps3\nDHk/Hh9VfOsR/ehCW7+ZyRhFvf6b/nJ69qegZ5qBFz3S2yUuktBSIFJQuPesY1NZ\nJuLqnfHNu84PLj3KvA5XZxZTJewtYycGJuXdYsv8WQZSxOKl6JLV97SKV7uxNJOd\nCnydD8F+3TNyINoalGaanBo9IIeWXwW5BshAkwKPO/crRgozZUDJSMf2ixgXVLie\n5WVIEIu55TdOv4gAi+pT9V3MoYTVI1VjBXjDbYPCpq17t9TAcNw=\n=c9nS\n-----END PGP SIGNATURE-----", "payload": "tree 24211e45598d3d9a3c1d6b38e027bab4d7fb8e81\nparent c660a5ce3444a8c84eeb3afe8ea7cdf12b025e25\nauthor btwotwo <10519967+btwotwo@users.noreply.github.com> 1665067997 +0200\ncommitter btwotwo <10519967+btwotwo@users.noreply.github.com> 1665067997 +0200\n\nFormatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a92910f9765689a6422de42a208724f8d3935e8", "html_url": "https://github.com/rust-lang/rust/commit/8a92910f9765689a6422de42a208724f8d3935e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a92910f9765689a6422de42a208724f8d3935e8/comments", "author": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c660a5ce3444a8c84eeb3afe8ea7cdf12b025e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/c660a5ce3444a8c84eeb3afe8ea7cdf12b025e25", "html_url": "https://github.com/rust-lang/rust/commit/c660a5ce3444a8c84eeb3afe8ea7cdf12b025e25"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "809f6d4b7c1e6bcb63ff9612b92229e0e0a8c647", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=8a92910f9765689a6422de42a208724f8d3935e8", "patch": "@@ -27,10 +27,7 @@ const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n (\"CARGO_TARGET_TMPDIR\",\"Only set when building integration test or benchmark code. This is a path to a directory inside the target directory where integration tests or benchmarks are free to put any data needed by the tests/benches. Cargo initially creates this directory but doesn't manage its content in any way, this is the responsibility of the test code\")\n ];\n \n-pub(crate) fn complete_cargo_env_vars(\n-    acc: &mut Completions,\n-    expanded: &ast::String,\n-) -> Option<()> {\n+pub(crate) fn complete_cargo_env_vars(acc: &mut Completions, expanded: &ast::String) -> Option<()> {\n     guard_env_macro(expanded)?;\n     let range = expanded.text_range_between_quotes()?;\n \n@@ -57,15 +54,25 @@ mod tests {\n     use crate::tests::{check_edit, completion_list};\n \n     fn check(macro_name: &str) {\n-        check_edit(\"CARGO_BIN_NAME\",&format!(r#\"\n+        check_edit(\n+            \"CARGO_BIN_NAME\",\n+            &format!(\n+                r#\"\n             fn main() {{\n                 let foo = {}!(\"CAR$0\");\n             }}\n-        \"#, macro_name), &format!(r#\"\n+        \"#,\n+                macro_name\n+            ),\n+            &format!(\n+                r#\"\n             fn main() {{\n                 let foo = {}!(\"CARGO_BIN_NAME\");\n             }}\n-        \"#, macro_name));\n+        \"#,\n+                macro_name\n+            ),\n+        );\n     }\n     #[test]\n     fn completes_env_variable_in_env() {"}, {"sha": "8836167630a4d1ae517793e6c7fbae4f4e186dde", "filename": "crates/ide-db/src/syntax_helpers/format_string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=8a92910f9765689a6422de42a208724f8d3935e8", "patch": "@@ -1,6 +1,7 @@\n //! Tools to work with format string literals for the `format_args!` family of macros.\n use syntax::{\n-    ast::{self, IsString}, TextRange, TextSize,\n+    ast::{self, IsString},\n+    TextRange, TextSize,\n };\n \n use super::node_ext::get_outer_macro_name;"}, {"sha": "5265b3d16156407c1acaddc70594250f7b9c11d2", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a92910f9765689a6422de42a208724f8d3935e8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=8a92910f9765689a6422de42a208724f8d3935e8", "patch": "@@ -2,8 +2,8 @@\n use itertools::Itertools;\n use parser::T;\n use syntax::{\n-    ast::{self, HasLoopBody, PathSegmentKind, VisibilityKind, NameRef},\n-    AstNode, Preorder, RustLanguage, WalkEvent, AstToken,\n+    ast::{self, HasLoopBody, NameRef, PathSegmentKind, VisibilityKind},\n+    AstNode, AstToken, Preorder, RustLanguage, WalkEvent,\n };\n \n pub fn expr_as_name_ref(expr: &ast::Expr) -> Option<ast::NameRef> {\n@@ -463,4 +463,4 @@ pub fn get_outer_macro_name(string: &ast::String) -> Option<NameRef> {\n     let name = macro_call.path()?.segment()?.name_ref()?;\n \n     Some(name)\n-}\n\\ No newline at end of file\n+}"}]}