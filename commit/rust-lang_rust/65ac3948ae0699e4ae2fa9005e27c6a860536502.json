{"sha": "65ac3948ae0699e4ae2fa9005e27c6a860536502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YWMzOTQ4YWUwNjk5ZTRhZTJmYTkwMDVlMjdjNmE4NjA1MzY1MDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-09T18:50:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T18:50:28Z"}, "message": "Rollup merge of #74070 - eddyb:forall-tcx-providers, r=nikomatsakis\n\n Use for<'tcx> fn pointers in Providers, instead of having Providers<'tcx>.\n\nIn order to work around normalization-under-HRTB (for `provide!` in `rustc_metadata`), we ended up with this:\n```rust\nstruct Providers<'tcx> {\n    type_of: fn(TyCtxt<'tcx>, DefId) -> Ty<'tcx>,\n    // ...\n}\n```\nBut what I initially wanted to do, IIRC, was this:\n```rust\nstruct Providers {\n    type_of: for<'tcx> fn(TyCtxt<'tcx>, DefId) -> Ty<'tcx>,\n    // ...\n}\n```\n\nThis PR moves to the latter, for the simple reason that only the latter allows keeping a `Providers` value, or a subset of its `fn` pointer fields, around in a `static` or `thread_local!`, which can be really useful for custom drivers that override queries.\n(@jyn514 and I came across a concrete usecase of that in `rustdoc`)\n\nThe `provide!` macro in `rustc_metadata` is fixed by making the query key/value types available as type aliases under `ty::query::query_{keys,values}`, not just associated types (this is the first commit).\n\nr? @nikomatsakis", "tree": {"sha": "bc923be4024910773f7fad0c60e4d90f26dc174b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc923be4024910773f7fad0c60e4d90f26dc174b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ac3948ae0699e4ae2fa9005e27c6a860536502", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfB2b0CRBK7hj4Ov3rIwAAdHIIAJAmLbVJEZIFM/zz0hzMoD7c\nYWaPxfTSueOoQM8TCxLdfmO4gBtv8Yx2NXoCoZYUl+prpbZ4rThPX8qrAN/l+4hw\nMtABk2h91eyCwnPoDLL6Wb/6NhZ1PIvIdKNEV5VCdbPwelRHhMOXDG3FxV3ZakzF\ntIFquKtZxsKr6mDkzGzLIjR8BCQQOGHD37WvOH4Jmbzdc8RVJjdzPC5OHufOkEeV\nJEvzAkRjUSDjwQySHPnfpc/AIVyrAIqVMt7WehW5yvleXdYJEnzWRNcQX/wMFKae\nRKQl9tdqOfUQJ9oUPqK3Ymt1VrMgA42AR6UzdSH1832AuNLjvzvWkbHph8bKXqQ=\n=e58S\n-----END PGP SIGNATURE-----\n", "payload": "tree bc923be4024910773f7fad0c60e4d90f26dc174b\nparent d163524cf46c5d17b5243d6fb0b0b91d2749857d\nparent f07100afc8650101ac924d728521e1a5d0ce9080\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594320628 -0700\ncommitter GitHub <noreply@github.com> 1594320628 -0700\n\nRollup merge of #74070 - eddyb:forall-tcx-providers, r=nikomatsakis\n\n Use for<'tcx> fn pointers in Providers, instead of having Providers<'tcx>.\n\nIn order to work around normalization-under-HRTB (for `provide!` in `rustc_metadata`), we ended up with this:\n```rust\nstruct Providers<'tcx> {\n    type_of: fn(TyCtxt<'tcx>, DefId) -> Ty<'tcx>,\n    // ...\n}\n```\nBut what I initially wanted to do, IIRC, was this:\n```rust\nstruct Providers {\n    type_of: for<'tcx> fn(TyCtxt<'tcx>, DefId) -> Ty<'tcx>,\n    // ...\n}\n```\n\nThis PR moves to the latter, for the simple reason that only the latter allows keeping a `Providers` value, or a subset of its `fn` pointer fields, around in a `static` or `thread_local!`, which can be really useful for custom drivers that override queries.\n(@jyn514 and I came across a concrete usecase of that in `rustdoc`)\n\nThe `provide!` macro in `rustc_metadata` is fixed by making the query key/value types available as type aliases under `ty::query::query_{keys,values}`, not just associated types (this is the first commit).\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ac3948ae0699e4ae2fa9005e27c6a860536502", "html_url": "https://github.com/rust-lang/rust/commit/65ac3948ae0699e4ae2fa9005e27c6a860536502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ac3948ae0699e4ae2fa9005e27c6a860536502/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d163524cf46c5d17b5243d6fb0b0b91d2749857d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d163524cf46c5d17b5243d6fb0b0b91d2749857d", "html_url": "https://github.com/rust-lang/rust/commit/d163524cf46c5d17b5243d6fb0b0b91d2749857d"}, {"sha": "f07100afc8650101ac924d728521e1a5d0ce9080", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07100afc8650101ac924d728521e1a5d0ce9080", "html_url": "https://github.com/rust-lang/rust/commit/f07100afc8650101ac924d728521e1a5d0ce9080"}], "stats": {"total": 227, "additions": 123, "deletions": 104}, "files": [{"sha": "c53a64664a6395e568e921a80bf13791b7dac420", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -342,7 +342,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.target_features_whitelist = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         if tcx.sess.opts.actually_rustdoc {\n@@ -360,7 +360,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     provide_extern(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         // Build up a map from DefId to a `NativeLib` structure, where\n         // `NativeLib` internally contains information about"}, {"sha": "67d4b2642c058d3cfe26ea411a7bbfd29a4c6cbf", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -241,11 +241,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n         Box::new(metadata::LlvmMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n+    fn provide(&self, providers: &mut ty::query::Providers) {\n         attributes::provide(providers);\n     }\n \n-    fn provide_extern(&self, providers: &mut ty::query::Providers<'_>) {\n+    fn provide_extern(&self, providers: &mut ty::query::Providers) {\n         attributes::provide_extern(providers);\n     }\n "}, {"sha": "2efbfcb995027bcef5825636460d6fe5746dcfd8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -161,9 +161,9 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n }\n \n fn exported_symbols_provider_local(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> &'tcx [(ExportedSymbol<'_>, SymbolExportLevel)] {\n+) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -366,7 +366,7 @@ fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> b\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n@@ -375,7 +375,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.upstream_drop_glue_for = upstream_drop_glue_for_provider;\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }"}, {"sha": "4e257fba44ab69769cb04f89333e21b7fa076826", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -853,7 +853,7 @@ impl CrateInfo {\n     }\n }\n \n-pub fn provide_both(providers: &mut Providers<'_>) {\n+pub fn provide_both(providers: &mut Providers) {\n     providers.backend_optimization_level = |tcx, cratenum| {\n         let for_speed = match tcx.sess.opts.optimize {\n             // If globally no optimisation is done, #[optimize] has no effect."}, {"sha": "bdd73c083135299021638c22d4b3c8ce505dcdd4", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -138,12 +138,12 @@ pub struct CodegenResults {\n     pub crate_info: CrateInfo,\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     crate::back::symbol_export::provide(providers);\n     crate::base::provide_both(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers<'_>) {\n+pub fn provide_extern(providers: &mut Providers) {\n     crate::back::symbol_export::provide_extern(providers);\n     crate::base::provide_both(providers);\n }"}, {"sha": "3522ea0115334bba1ca196a42f9398470f98d437", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -55,8 +55,8 @@ pub trait CodegenBackend {\n     fn print_version(&self) {}\n \n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n-    fn provide(&self, _providers: &mut Providers<'_>);\n-    fn provide_extern(&self, _providers: &mut Providers<'_>);\n+    fn provide(&self, _providers: &mut Providers);\n+    fn provide_extern(&self, _providers: &mut Providers);\n     fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "570104e09b8427d692fbcd3cd3ddf6a692cee45f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -38,7 +38,7 @@ pub struct Compiler {\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n }\n \n impl Compiler {\n@@ -153,7 +153,7 @@ pub struct Config {\n     ///\n     /// The second parameter is local providers and the third parameter is external providers.\n     pub override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n \n     /// Registry of diagnostics codes.\n     pub registry: Registry,"}, {"sha": "6d85c2f1825447c8ebf6a577684a7f055a2cecc4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -719,7 +719,7 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn default_provide(providers: &mut ty::query::Providers) {\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n     plugin::build::provide(providers);\n@@ -740,7 +740,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_codegen_ssa::provide(providers);\n }\n \n-pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n+pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n     rustc_metadata::provide_extern(providers);\n     rustc_codegen_ssa::provide_extern(providers);\n }"}, {"sha": "e91003b450c3c0087fb7881778019c27327f8007", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -35,6 +35,6 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { proc_macro_decls_static, ..*providers };\n }"}, {"sha": "2e9cd962a7401e13f4979f6db1895b6686c0c84c", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -571,6 +571,6 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.lint_levels = lint_levels;\n }"}, {"sha": "6b5353e033fc8136dbac699037f66f5b4f5d27ec", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -88,7 +88,7 @@ pub use rustc_session::lint::Level::{self, *};\n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Lint, LintId};\n pub use rustc_session::lint::{LintArray, LintPass};\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     levels::provide(providers);\n     *providers = Providers { lint_mod, ..*providers };\n }"}, {"sha": "201a32d387779bc31084052007d0e86dc77394cc", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::query::QueryConfig;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n@@ -31,13 +30,11 @@ use std::any::Any;\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n-        pub fn provide_extern<$lt>(providers: &mut Providers<$lt>) {\n-            // HACK(eddyb) `$lt: $lt` forces `$lt` to be early-bound, which\n-            // allows the associated type in the return type to be normalized.\n-            $(fn $name<$lt: $lt, T: IntoArgs>(\n+        pub fn provide_extern(providers: &mut Providers) {\n+            $(fn $name<$lt>(\n                 $tcx: TyCtxt<$lt>,\n-                def_id_arg: T,\n-            ) -> <ty::queries::$name<$lt> as QueryConfig<TyCtxt<$lt>>>::Value {\n+                def_id_arg: ty::query::query_keys::$name<$lt>,\n+            ) -> ty::query::query_values::$name<$lt> {\n                 let _prof_timer =\n                     $tcx.prof.generic_activity(\"metadata_decode_entry\");\n \n@@ -243,7 +240,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about"}, {"sha": "250f4d5187f2fa7c920d53844276134f8abbdef2", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -1067,6 +1067,6 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.def_kind = |tcx, def_id| tcx.hir().def_kind(def_id.expect_local());\n }"}, {"sha": "485f9b7ce8a6c204e37933ab83e33cfc386dd6b1", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.parent_module_from_def_id = |tcx, id| {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id)))"}, {"sha": "c4a5bc302227d00e7006785724f564101f579e79", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -1060,8 +1060,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n-        local_providers: ty::query::Providers<'tcx>,\n-        extern_providers: ty::query::Providers<'tcx>,\n+        local_providers: ty::query::Providers,\n+        extern_providers: ty::query::Providers,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         krate: &'tcx hir::Crate<'tcx>,\n@@ -2699,7 +2699,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n     t as *const () == u as *const ()\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}, {"sha": "48d0fc1839e2f2fe66357e4a1908c5455b1ec5fd", "filename": "src/librustc_middle/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferase_regions.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n-pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(super) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { erase_regions_ty, ..*providers };\n }\n "}, {"sha": "5afcb23f2f299033b93461335aff54e860953978", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -210,7 +210,7 @@ fn layout_raw<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { layout_raw, ..*providers };\n }\n "}, {"sha": "7ca9569a0a13370b9dd226ac34bd2e1263669d06", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -2966,7 +2966,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     None\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);"}, {"sha": "f3fa3634026fd73a4ee8b309307f359bf048c2e9", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -318,15 +318,34 @@ macro_rules! define_queries_inner {\n             }\n         }\n \n+        #[allow(nonstandard_style)]\n         pub mod queries {\n             use std::marker::PhantomData;\n \n-            $(#[allow(nonstandard_style)]\n-            pub struct $name<$tcx> {\n+            $(pub struct $name<$tcx> {\n                 data: PhantomData<&$tcx ()>\n             })*\n         }\n \n+        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n+        // below, but using type aliases instead of associated types, to bypass\n+        // the limitations around normalizing under HRTB - for example, this:\n+        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n+        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n+        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_keys {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $($K)*;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_values {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $V;)*\n+        }\n+\n         $(impl<$tcx> QueryConfig<TyCtxt<$tcx>> for queries::$name<$tcx> {\n             type Key = $($K)*;\n             type Value = $V;\n@@ -478,13 +497,16 @@ macro_rules! define_queries_inner {\n             input: ($(([$($modifiers)*] [$name] [$($K)*] [$V]))*)\n         }\n \n-        impl<$tcx> Copy for Providers<$tcx> {}\n-        impl<$tcx> Clone for Providers<$tcx> {\n+        impl Copy for Providers {}\n+        impl Clone for Providers {\n             fn clone(&self) -> Self { *self }\n         }\n     }\n }\n \n+// FIXME(eddyb) this macro (and others?) use `$tcx` and `'tcx` interchangeably.\n+// We should either not take `$tcx` at all and use `'tcx` everywhere, or use\n+// `$tcx` everywhere (even if that isn't necessary due to lack of hygiene).\n macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n@@ -494,8 +516,8 @@ macro_rules! define_queries_struct {\n             /// `DepGraph::try_mark_green()` and the query infrastructure.\n             pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n \n-            providers: IndexVec<CrateNum, Providers<$tcx>>,\n-            fallback_extern_providers: Box<Providers<$tcx>>,\n+            providers: IndexVec<CrateNum, Providers>,\n+            fallback_extern_providers: Box<Providers>,\n \n             $($(#[$attr])*  $name: QueryState<\n                 TyCtxt<$tcx>,\n@@ -505,8 +527,8 @@ macro_rules! define_queries_struct {\n \n         impl<$tcx> Queries<$tcx> {\n             pub(crate) fn new(\n-                providers: IndexVec<CrateNum, Providers<$tcx>>,\n-                fallback_extern_providers: Providers<$tcx>,\n+                providers: IndexVec<CrateNum, Providers>,\n+                fallback_extern_providers: Providers,\n                 on_disk_cache: OnDiskCache<'tcx>,\n             ) -> Self {\n                 Queries {\n@@ -539,11 +561,11 @@ macro_rules! define_queries_struct {\n macro_rules! define_provider_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n-        pub struct Providers<$tcx> {\n-            $(pub $name: fn(TyCtxt<$tcx>, $K) -> $R,)*\n+        pub struct Providers {\n+            $(pub $name: for<$tcx> fn(TyCtxt<$tcx>, $K) -> $R,)*\n         }\n \n-        impl<$tcx> Default for Providers<$tcx> {\n+        impl Default for Providers {\n             fn default() -> Self {\n                 $(fn $name<$tcx>(_: TyCtxt<$tcx>, key: $K) -> $R {\n                     bug!(\"`tcx.{}({:?})` unsupported by its crate\","}, {"sha": "0903ef5089861737c190dbb57773ca4178a65e0c", "filename": "src/librustc_middle/util/bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_middle%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Futil%2Fbug.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -47,6 +47,6 @@ pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n     );\n }\n \n-pub fn provide(providers: &mut crate::ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut crate::ty::query::Providers) {\n     *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n }"}, {"sha": "beb5f1fe924ece19bac9235d3152dd4b0cdfef52", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -86,7 +86,7 @@ crate struct Upvar {\n \n const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n "}, {"sha": "daa458f70f9a7f7f9d74eaf7c56666c14a283c2c", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -156,7 +156,7 @@ fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         && tcx.lookup_const_stability(def_id).map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         is_const_fn_raw,\n         is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),"}, {"sha": "eff1dc135554fd9cc1efcdd9e1e21e52bedf9c8e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -47,7 +47,7 @@ pub mod util;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     borrow_check::provide(providers);\n     const_eval::provide(providers);\n     shim::provide(providers);"}, {"sha": "ebea65c8f96f288f795346ed3bd39a2a348ace1f", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -880,9 +880,9 @@ where\n }\n \n fn collect_and_partition_mono_items(\n-    tcx: TyCtxt<'_>,\n+    tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n-) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'_>]) {\n+) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n@@ -994,7 +994,7 @@ fn collect_and_partition_mono_items(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.collect_and_partition_mono_items = collect_and_partition_mono_items;\n \n     providers.is_codegened_item = |tcx, def_id| {"}, {"sha": "98286cddea68b8d03085f7772b080adac3a37ca4", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -23,7 +23,7 @@ use crate::util::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle\n use crate::util::expand_aggregate;\n use crate::util::patch::MirPatch;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n "}, {"sha": "f218dd397c0c8d9e59558b9d7b5da3adede2e6e9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     }\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafety_check_result, unsafe_derive_on_repr_packed, ..*providers };\n }\n "}, {"sha": "76904b7edd533525da8d826d0c9c0bbe6fb8fd1a", "filename": "src/librustc_mir/transform/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -25,7 +25,7 @@ pub struct InstrumentCoverage;\n \n /// The `query` provider for `CoverageInfo`, requested by `codegen_intrinsic_call()` when\n /// constructing the arguments for `llvm.instrprof.increment`.\n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     providers.coverageinfo = |tcx, def_id| coverageinfo_from_mir(tcx, def_id);\n }\n "}, {"sha": "816cf08a6da488c739e6f0952a87857c08d5d9e4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -43,7 +43,7 @@ pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n pub mod validate;\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     self::check_unsafety::provide(providers);\n     *providers = Providers {\n         mir_keys,"}, {"sha": "be495e431eb3cf3262610cf47d3e13e1ee8bb380", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -23,7 +23,7 @@ mod lints;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.check_match = hair::pattern::check_match;\n     providers.lit_to_const = hair::constant::lit_to_const;\n     providers.mir_built = build::mir_built;"}, {"sha": "3272ac8f9c73d9ab9341fd11ad79aa7996a71373", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -469,6 +469,6 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n         .visit_item_likes_in_module(module_def_id, &mut CheckAttrVisitor { tcx }.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_attrs, ..*providers };\n }"}, {"sha": "b1ebab3f2f8064de56ce69ea0aba654b6aa45a4f", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -62,7 +62,7 @@ fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n "}, {"sha": "3cce4b8d00e8b8572593d9596c9251fa01c52fdd", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -118,7 +118,7 @@ fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     collector\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.diagnostic_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "11612101e377131a7db58e8eb28cc5035d2baf62", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -217,6 +217,6 @@ pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(LocalDefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { entry_fn, ..*providers };\n }"}, {"sha": "25edfad86e8ec8a932fa84ffd6188b9e33305b2f", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -18,7 +18,7 @@ fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx }.as_deep_visitor());\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_intrinsics, ..*providers };\n }\n "}, {"sha": "809697134b759c89c02cf37341e725d78ce8977c", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -205,7 +205,7 @@ fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n     items\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "3f10c418811b71c62f94e248bb4637720c747942", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -37,7 +37,7 @@ pub mod stability;\n mod upvars;\n mod weak_lang_items;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);\n     diagnostic_items::provide(providers);"}, {"sha": "922a475e5f4e480ad4ca700938883c5ba44cd43a", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -135,7 +135,7 @@ fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     collector.lib_features\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.get_lib_features = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         collect(tcx)"}, {"sha": "3675a987644daef2d3cfea1f44b521e3007f3ffb", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -179,7 +179,7 @@ fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_liveness, ..*providers };\n }\n "}, {"sha": "9b4da71e5e961e9d0d1f4a8418aed02e4bceeaca", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -36,7 +36,7 @@ fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_loops, ..*providers };\n }\n "}, {"sha": "c46f4856cfe3a84e520852ca3605ae69382a0dd2", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -425,6 +425,6 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx HirIdSet\n     tcx.arena.alloc(reachable_context.reachable_symbols)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { reachable_set, ..*providers };\n }"}, {"sha": "b2a89651881e5142252b86240e7a8caaaee86f9d", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -842,6 +842,6 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     tcx.arena.alloc(scope_tree)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { region_scope_tree, ..*providers };\n }"}, {"sha": "5bacab671ec146febe32eb4ddf6630d48821ac58", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -476,7 +476,7 @@ fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n-pub(crate) fn provide(providers: &mut Providers<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_unstable_api_usage, ..*providers };\n     providers.stability_index = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "3aed4942563ddcffb6267e9ede9554c862f2374f", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.upvars_mentioned = |tcx, def_id| {\n         if !tcx.is_closure(def_id) {\n             return None;"}, {"sha": "db2363316cd1a71bd7b18005a94d04b70fd941a3", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -57,6 +57,6 @@ fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { plugin_registrar_fn, ..*providers };\n }"}, {"sha": "2c5cbed2192ef35b1a38f8e418bd66b9101845ae", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -2029,7 +2029,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         privacy_access_levels,\n         check_private_in_public,"}, {"sha": "e9b917168d67b14ce3dfdc1f273639cde2398add", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -278,7 +278,7 @@ type ScopeRef<'a> = &'a Scope<'a>;\n \n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         resolve_lifetimes,\n "}, {"sha": "a4ae9eb773168b7bfea2366fb887b404f8ef07ef", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -3102,6 +3102,6 @@ impl CrateLint {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     late::lifetimes::provide(providers);\n }"}, {"sha": "012321026938e8643ccadd213890e59ee0b4e2dc", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -126,7 +126,7 @@ pub fn symbol_name_for_instance_in_crate(\n     compute_symbol_name(tcx, instance, || instantiating_crate)\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { symbol_name: symbol_name_provider, ..*providers };\n }\n "}, {"sha": "e8006129e3ef8666f8148c34c7f185a97cbe282e", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -550,7 +550,7 @@ fn type_implements_trait<'tcx>(\n     tcx.infer_ctxt().enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     object_safety::provide(providers);\n     structural_match::provide(providers);\n     *providers = ty::query::Providers {"}, {"sha": "f00d668e1ae5074ec7a67ecfa20049a7d642b437", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -792,6 +792,6 @@ fn contains_illegal_self_type_reference<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { object_safety_violations, ..*providers };\n }"}, {"sha": "377d163d1043913cc4e92035bc8a2901563db11c", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     providers.has_structural_eq_impls = |tcx, ty| {\n         tcx.infer_ctxt().enter(|infcx| {\n             let cause = ObligationCause::dummy();"}, {"sha": "0c5d57551f9c552976e84b9f046c107308be7181", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -29,7 +29,7 @@ use crate::chalk::lowering::{LowerInto, ParamsSubstitutor};\n \n use chalk_solve::Solution;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { evaluate_goal, ..*p };\n }\n "}, {"sha": "ce00060b9b17270d2a6d473308758c98271545ea", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -17,7 +17,7 @@ use rustc_trait_selection::traits::{\n     Normalized, ObligationCause, TraitEngine, TraitEngineExt as _,\n };\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { dropck_outlives, adt_dtorck_constraint, ..*p };\n }\n "}, {"sha": "2404b7ff4b54a69223b555ee0a9abaffd06ab15b", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -7,7 +7,7 @@ use rustc_trait_selection::traits::{\n     EvaluationResult, Obligation, ObligationCause, OverflowError, SelectionContext, TraitQueryMode,\n };\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { evaluate_obligation, ..*p };\n }\n "}, {"sha": "bda3da120e958893fbfd7082413197d836f82317", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -18,7 +18,7 @@ use rustc_trait_selection::traits::FulfillmentContext;\n use rustc_trait_selection::traits::TraitEngine;\n use smallvec::{smallvec, SmallVec};\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { implied_outlives_bounds, ..*p };\n }\n "}, {"sha": "b8e23760ba5d4aeba071b7f9abb4170e28801dab", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -22,7 +22,7 @@ mod type_op;\n \n use rustc_middle::ty::query::Providers;\n \n-pub fn provide(p: &mut Providers<'_>) {\n+pub fn provide(p: &mut Providers) {\n     dropck_outlives::provide(p);\n     evaluate_obligation::provide(p);\n     implied_outlives_bounds::provide(p);"}, {"sha": "7092515af0882709a597517b3d1a875d19220082", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -7,7 +7,7 @@ use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n }\n "}, {"sha": "a8e376838e218c0c516ab22236dbb176a857816a", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -10,7 +10,7 @@ use rustc_trait_selection::traits::query::{\n use rustc_trait_selection::traits::{self, ObligationCause, SelectionContext};\n use std::sync::atomic::Ordering;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers { normalize_projection_ty, ..*p };\n }\n "}, {"sha": "9cc9a35b38b8adfb5b9293cb89f147cdb8197214", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -21,7 +21,7 @@ use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, TraitEngine};\n use std::fmt;\n \n-crate fn provide(p: &mut Providers<'_>) {\n+crate fn provide(p: &mut Providers) {\n     *p = Providers {\n         type_op_ascribe_user_type,\n         type_op_eq,"}, {"sha": "8d153e77f0b7d402e6791aeb48822bdd5703ae33", "filename": "src/librustc_ty/common_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fcommon_traits.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -36,6 +36,6 @@ fn is_item_raw<'tcx>(\n     })\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { is_copy_raw, is_sized_raw, is_freeze_raw, ..*providers };\n }"}, {"sha": "9f5ab7f8e4a0233ae6acaafb9520a0a316a7c714", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -243,6 +243,6 @@ fn resolve_associated_item<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { resolve_instance, ..*providers };\n }"}, {"sha": "8f3b20c7aaf406ff682857c34c5b55ac77d375bf", "filename": "src/librustc_ty/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -21,7 +21,7 @@ pub mod instance;\n mod needs_drop;\n mod ty;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     common_traits::provide(providers);\n     needs_drop::provide(providers);\n     ty::provide(providers);"}, {"sha": "c4af95205fe27171ad23cb5995bcffe0d21298ea", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -183,6 +183,6 @@ fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, Alw\n     res.map(|components| tcx.intern_type_list(&components))\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { needs_drop_raw, adt_drop_tys, ..*providers };\n }"}, {"sha": "c99bc8a47e33b45524d1d55b51ab22e0fea0bc2d", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -494,7 +494,7 @@ fn projection_predicates(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Pre\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n         associated_item,"}, {"sha": "b1799c6eef3365cf5c5e20e8cb033cd44bbc0031", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -28,7 +28,7 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     suggest::provide(providers);\n     probe::provide(providers);\n }"}, {"sha": "ba952df7e4e2861dc1b914c59d3e56f057cc1c9f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n "}, {"sha": "44ffabc4c266222617f11b17708e22c0330cf386", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -1292,7 +1292,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     traits\n }\n \n-pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+pub fn provide(providers: &mut ty::query::Providers) {\n     providers.all_traits = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         &tcx.arena.alloc(compute_all_traits(tcx))[..]"}, {"sha": "fa7360ce90051b36abb43327375ae195ffd67093", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -760,7 +760,7 @@ fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,"}, {"sha": "1483244717b4fda8609a91a63c89e13540f95c33", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -151,7 +151,7 @@ fn enforce_empty_impls_for_marker_traits(\n     struct_span_err!(tcx.sess, span, E0715, \"impls for marker traits cannot contain items\").emit();\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     use self::builtin::coerce_unsized_info;\n     use self::inherent_impls::{crate_inherent_impls, inherent_impls};\n     use self::inherent_impls_overlap::crate_inherent_impls_overlap_check;"}, {"sha": "4f88836118d52b2cee33125fe31df08e929427e9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -62,7 +62,7 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     );\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         type_of: type_of::type_of,\n         generics_of,"}, {"sha": "891e482b43133d9fbc48573c1cde7491370f7210", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -69,7 +69,7 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n         .visit_item_likes_in_module(module_def_id, &mut ImplWfCheck { tcx, min_specialization });\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_impl_wf, ..*providers };\n }\n "}, {"sha": "9ba2545ba63cbc8d98d512826a4679d9667f3f01", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -309,7 +309,7 @@ fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     }\n }\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     collect::provide(providers);\n     coherence::provide(providers);\n     check::provide(providers);"}, {"sha": "cc5858314597c2f49ce23547bcdb711493f410e5", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -13,7 +13,7 @@ mod implicit_infer;\n pub mod test;\n mod utils;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { inferred_outlives_of, inferred_outlives_crate, ..*providers };\n }\n "}, {"sha": "b307363dc3ab05a8e648bc8c00efe8e4073a7523", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac3948ae0699e4ae2fa9005e27c6a860536502/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=65ac3948ae0699e4ae2fa9005e27c6a860536502", "patch": "@@ -26,7 +26,7 @@ pub mod test;\n /// Code for transforming variances.\n mod xform;\n \n-pub fn provide(providers: &mut Providers<'_>) {\n+pub fn provide(providers: &mut Providers) {\n     *providers = Providers { variances_of, crate_variances, ..*providers };\n }\n "}]}