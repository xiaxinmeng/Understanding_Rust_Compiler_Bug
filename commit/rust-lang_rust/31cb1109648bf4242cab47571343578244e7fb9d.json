{"sha": "31cb1109648bf4242cab47571343578244e7fb9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxY2IxMTA5NjQ4YmY0MjQyY2FiNDc1NzEzNDM1NzgyNDRlN2ZiOWQ=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-10T02:48:26Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T20:59:14Z"}, "message": "add concinient methods to Increment/InitializeVisitor", "tree": {"sha": "270e7929677b9fd35b6dd2b03816311c373ae508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270e7929677b9fd35b6dd2b03816311c373ae508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31cb1109648bf4242cab47571343578244e7fb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31cb1109648bf4242cab47571343578244e7fb9d", "html_url": "https://github.com/rust-lang/rust/commit/31cb1109648bf4242cab47571343578244e7fb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31cb1109648bf4242cab47571343578244e7fb9d/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d5b89a1de15df9052fdf44d01b174add82837f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d5b89a1de15df9052fdf44d01b174add82837f", "html_url": "https://github.com/rust-lang/rust/commit/b2d5b89a1de15df9052fdf44d01b174add82837f"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "61f0059cca47eb8839cfc99d6e3581e7b5da0fb2", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/31cb1109648bf4242cab47571343578244e7fb9d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cb1109648bf4242cab47571343578244e7fb9d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=31cb1109648bf4242cab47571343578244e7fb9d", "patch": "@@ -1536,31 +1536,17 @@ fn check_for_loop_explicit_counter<'tcx>(\n     expr: &'tcx Expr<'_>,\n ) {\n     // Look for variables that are incremented once per loop iteration.\n-    let mut visitor = IncrementVisitor {\n-        cx,\n-        states: FxHashMap::default(),\n-        depth: 0,\n-        done: false,\n-    };\n+    let mut visitor = IncrementVisitor::new(cx);\n     walk_expr(&mut visitor, body);\n \n     // For each candidate, check the parent block to see if\n     // it's initialized to zero at the start of the loop.\n     if let Some(block) = get_enclosing_block(&cx, expr.hir_id) {\n-        for (id, _) in visitor.states.iter().filter(|&(_, v)| *v == VarState::IncrOnce) {\n-            let mut visitor2 = InitializeVisitor {\n-                cx,\n-                end_expr: expr,\n-                var_id: *id,\n-                state: VarState::IncrOnce,\n-                name: None,\n-                depth: 0,\n-                past_loop: false,\n-            };\n+        for id in visitor.into_results() {\n+            let mut visitor2 = InitializeVisitor::new(cx, expr, id);\n             walk_block(&mut visitor2, block);\n \n-            if visitor2.state == VarState::Warn {\n-                if let Some(name) = visitor2.name {\n+            if let Some(name) = visitor2.get_result() {\n                     let mut applicability = Applicability::MachineApplicable;\n \n                     // for some reason this is the only way to get the `Span`\n@@ -1585,7 +1571,6 @@ fn check_for_loop_explicit_counter<'tcx>(\n                         ),\n                         applicability,\n                     );\n-                }\n             }\n         }\n     }\n@@ -2142,6 +2127,24 @@ struct IncrementVisitor<'a, 'tcx> {\n     done: bool,\n }\n \n+impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n+        Self {\n+            cx,\n+            states: FxHashMap::default(),\n+            depth: 0,\n+            done: false,\n+        }\n+    }\n+\n+    fn into_results(self) -> impl Iterator<Item = HirId> {\n+        self.states\n+            .into_iter()\n+            .filter(|(_, state)| *state == VarState::IncrOnce)\n+            .map(|(id, _)| id)\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n@@ -2209,6 +2212,28 @@ struct InitializeVisitor<'a, 'tcx> {\n     past_loop: bool,\n }\n \n+impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>, end_expr: &'tcx Expr<'tcx>, var_id: HirId) -> Self {\n+        Self {\n+            cx,\n+            end_expr,\n+            var_id,\n+            state: VarState::IncrOnce,\n+            name: None,\n+            depth: 0,\n+            past_loop: false,\n+        }\n+    }\n+\n+    fn get_result(&self) -> Option<Name> {\n+        if self.state == VarState::Warn {\n+            self.name\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n "}]}