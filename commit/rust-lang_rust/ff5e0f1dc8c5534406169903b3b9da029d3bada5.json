{"sha": "ff5e0f1dc8c5534406169903b3b9da029d3bada5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWUwZjFkYzhjNTUzNDQwNjE2OTkwM2IzYjlkYTAyOWQzYmFkYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-21T02:16:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-21T02:16:35Z"}, "message": "Auto merge of #74846 - Aaron1011:fix/pat-token-capture, r=petrochenkov\n\nCapture tokens for Pat used in macro_rules! argument\n\nThis extends PR #73293 to handle patterns (Pat). Unlike expressions,\npatterns do not support custom attributes, so we only need to capture\ntokens during macro_rules! argument parsing.", "tree": {"sha": "2a90ec3023613668d1e89dbb54d1311440ceb0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a90ec3023613668d1e89dbb54d1311440ceb0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5e0f1dc8c5534406169903b3b9da029d3bada5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5e0f1dc8c5534406169903b3b9da029d3bada5", "html_url": "https://github.com/rust-lang/rust/commit/ff5e0f1dc8c5534406169903b3b9da029d3bada5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5e0f1dc8c5534406169903b3b9da029d3bada5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d4d39612aae0b8398340bd83d592cafad8e4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d4d39612aae0b8398340bd83d592cafad8e4ec", "html_url": "https://github.com/rust-lang/rust/commit/d9d4d39612aae0b8398340bd83d592cafad8e4ec"}, {"sha": "607a1900592c91ba2b284afda8ea9a1521d52475", "url": "https://api.github.com/repos/rust-lang/rust/commits/607a1900592c91ba2b284afda8ea9a1521d52475", "html_url": "https://github.com/rust-lang/rust/commit/607a1900592c91ba2b284afda8ea9a1521d52475"}], "stats": {"total": 95, "additions": 85, "deletions": 10}, "files": [{"sha": "e06881711c4213b504428ac4fc7ea975c6f70c93", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -550,6 +550,7 @@ pub struct Pat {\n     pub id: NodeId,\n     pub kind: PatKind,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n impl Pat {\n@@ -2138,6 +2139,7 @@ impl Param {\n                 id: DUMMY_NODE_ID,\n                 kind: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),\n                 span,\n+                tokens: None,\n             }),\n             span,\n             ty,"}, {"sha": "1e922d3415fdbb7e4d8db0441d152b6b18d59b9a", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -1053,7 +1053,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n }\n \n pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n-    let Pat { id, kind, span } = pat.deref_mut();\n+    let Pat { id, kind, span, tokens: _ } = pat.deref_mut();\n     vis.visit_id(id);\n     match kind {\n         PatKind::Wild | PatKind::Rest => {}"}, {"sha": "4c01cb8159a30854f1e6405cfb7a6c894d8b55d6", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -551,6 +551,7 @@ impl MacResult for MacEager {\n                     id: ast::DUMMY_NODE_ID,\n                     span: e.span,\n                     kind: PatKind::Lit(e),\n+                    tokens: None,\n                 }));\n             }\n         }\n@@ -597,7 +598,7 @@ impl DummyResult {\n \n     /// A plain dummy pattern.\n     pub fn raw_pat(sp: Span) -> ast::Pat {\n-        ast::Pat { id: ast::DUMMY_NODE_ID, kind: PatKind::Wild, span: sp }\n+        ast::Pat { id: ast::DUMMY_NODE_ID, kind: PatKind::Wild, span: sp, tokens: None }\n     }\n \n     /// A plain dummy type."}, {"sha": "9490b62aa1797c987fb3b63a7fa64d783a32dcfa", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -392,7 +392,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn pat(&self, span: Span, kind: PatKind) -> P<ast::Pat> {\n-        P(ast::Pat { id: ast::DUMMY_NODE_ID, kind, span })\n+        P(ast::Pat { id: ast::DUMMY_NODE_ID, kind, span, tokens: None })\n     }\n     pub fn pat_wild(&self, span: Span) -> P<ast::Pat> {\n         self.pat(span, PatKind::Wild)"}, {"sha": "29fb4c95ec69f744743f30ee07558245b4d864b3", "filename": "src/librustc_expand/placeholders.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fplaceholders.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -38,7 +38,8 @@ pub fn placeholder(\n         })\n     };\n     let ty = || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span });\n-    let pat = || P(ast::Pat { id, kind: ast::PatKind::MacCall(mac_placeholder()), span });\n+    let pat =\n+        || P(ast::Pat { id, kind: ast::PatKind::MacCall(mac_placeholder()), span, tokens: None });\n \n     match kind {\n         AstFragmentKind::Expr => AstFragment::Expr(expr_placeholder()),\n@@ -85,6 +86,7 @@ pub fn placeholder(\n             id,\n             span,\n             kind: ast::PatKind::MacCall(mac_placeholder()),\n+            tokens: None,\n         })),\n         AstFragmentKind::Ty => {\n             AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::MacCall(mac_placeholder()) }))"}, {"sha": "7b7235eed36349a1a337541b56b0019dc78e8e52", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -263,6 +263,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         Nonterminal::NtItem(ref item) => {\n             prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n         }\n+        Nonterminal::NtPat(ref pat) => pat.tokens.clone(),\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())\n         }"}, {"sha": "12efe391fb964d39f13d8c3e39a77d4046b9cfb5", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -26,6 +26,7 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n         id: ast::DUMMY_NODE_ID,\n         kind: PatKind::Ident(BindingMode::ByValue(Mutability::Not), ident, None),\n         span: ident.span,\n+        tokens: None,\n     });\n     let ty = Ty { kind: TyKind::Err, span: ident.span, id: ast::DUMMY_NODE_ID };\n     Param {\n@@ -83,7 +84,12 @@ impl RecoverQPath for Pat {\n         self.to_ty()\n     }\n     fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n-        Self { span: path.span, kind: PatKind::Path(qself, path), id: ast::DUMMY_NODE_ID }\n+        Self {\n+            span: path.span,\n+            kind: PatKind::Path(qself, path),\n+            id: ast::DUMMY_NODE_ID,\n+            tokens: None,\n+        }\n     }\n }\n \n@@ -1526,7 +1532,8 @@ impl<'a> Parser<'a> {\n         .emit();\n \n         // Pretend the pattern is `_`, to avoid duplicate errors from AST validation.\n-        let pat = P(Pat { kind: PatKind::Wild, span: pat.span, id: ast::DUMMY_NODE_ID });\n+        let pat =\n+            P(Pat { kind: PatKind::Wild, span: pat.span, id: ast::DUMMY_NODE_ID, tokens: None });\n         Ok((pat, ty))\n     }\n "}, {"sha": "f40cd1131d260650cad5d878c6356eb223c02b6b", "filename": "src/librustc_parse/parser/nonterminal.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fnonterminal.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -116,7 +116,14 @@ impl<'a> Parser<'a> {\n                 Some(s) => token::NtStmt(s),\n                 None => return Err(self.struct_span_err(self.token.span, \"expected a statement\")),\n             },\n-            NonterminalKind::Pat => token::NtPat(self.parse_pat(None)?),\n+            NonterminalKind::Pat => {\n+                let (mut pat, tokens) = self.collect_tokens(|this| this.parse_pat(None))?;\n+                // We have have eaten an NtPat, which could already have tokens\n+                if pat.tokens.is_none() {\n+                    pat.tokens = Some(tokens);\n+                }\n+                token::NtPat(pat)\n+            }\n             NonterminalKind::Expr => {\n                 let (mut expr, tokens) = self.collect_tokens(|this| this.parse_expr())?;\n                 // If we captured tokens during parsing (due to outer attributes),"}, {"sha": "2c0133a24dcb1e4f3955204a9c52f630cd119da3", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -1007,6 +1007,6 @@ impl<'a> Parser<'a> {\n     }\n \n     fn mk_pat(&self, span: Span, kind: PatKind) -> P<Pat> {\n-        P(Pat { kind, span, id: ast::DUMMY_NODE_ID })\n+        P(Pat { kind, span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n }"}, {"sha": "633d153e391dd18beae8f294904524bf41ff2b52", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -164,6 +164,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     kind: PatKind::Wild,\n                     span: DUMMY_SP,\n+                    tokens: None,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Let(pat.clone(), e)))\n             },"}, {"sha": "2ff6ad6d68f35a0d930e5159a3ce06d975a1b6c3", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -1,12 +1,20 @@\n // aux-build:test-macros.rs\n // check-pass\n+// compile-flags: -Z span-debug\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n \n extern crate test_macros;\n-use test_macros::recollect;\n+use test_macros::print_bang;\n \n macro_rules! use_expr {\n     ($expr:expr) => {\n-        recollect!($expr)\n+        print_bang!($expr)\n+    }\n+}\n+\n+macro_rules! use_pat {\n+    ($pat:pat) => {\n+        print_bang!($pat)\n     }\n }\n \n@@ -17,6 +25,10 @@ impl Foo {\n     fn use_self(self) {\n         drop(use_expr!(self));\n     }\n+\n+    fn with_pat(use_pat!((a, b)): (u32, u32)) {\n+        println!(\"Args: {} {}\", a, b);\n+    }\n }\n \n fn main() {}"}, {"sha": "28812e205480398beb394f00d00cce7039ee87d3", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -0,0 +1,41 @@\n+PRINT-BANG INPUT (DISPLAY): self\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"self\",\n+                span: $DIR/capture-macro-rules-invoke.rs:26:24: 26:28 (#CTXT),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:11:21: 11:26 (#CTXT),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): (a, b)\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:29:27: 29:28 (#CTXT),\n+                    },\n+                    Punct {\n+                        ch: ',',\n+                        spacing: Alone,\n+                        span: $DIR/capture-macro-rules-invoke.rs:29:28: 29:29 (#CTXT),\n+                    },\n+                    Ident {\n+                        ident: \"b\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:29:30: 29:31 (#CTXT),\n+                    },\n+                ],\n+                span: $DIR/capture-macro-rules-invoke.rs:29:26: 29:32 (#CTXT),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:17:21: 17:25 (#CTXT),\n+    },\n+]"}, {"sha": "9fe771cef45bfbb80f691517f847512dda07bb08", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5e0f1dc8c5534406169903b3b9da029d3bada5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=ff5e0f1dc8c5534406169903b3b9da029d3bada5", "patch": "@@ -340,6 +340,7 @@ fn take_pat(from: &mut Pat) -> Pat {\n         id: DUMMY_NODE_ID,\n         kind: Wild,\n         span: DUMMY_SP,\n+        tokens: None\n     };\n     mem::replace(from, dummy)\n }"}]}