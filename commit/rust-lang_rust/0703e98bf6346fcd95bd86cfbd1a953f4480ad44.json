{"sha": "0703e98bf6346fcd95bd86cfbd1a953f4480ad44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MDNlOThiZjYzNDZmY2Q5NWJkODZjZmJkMWE5NTNmNDQ4MGFkNDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-15T19:04:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-15T19:04:33Z"}, "message": "Remove cg_clif fake target feature", "tree": {"sha": "fbe7d822ffd74ca5f51098afeac936c177652b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe7d822ffd74ca5f51098afeac936c177652b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0703e98bf6346fcd95bd86cfbd1a953f4480ad44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0703e98bf6346fcd95bd86cfbd1a953f4480ad44", "html_url": "https://github.com/rust-lang/rust/commit/0703e98bf6346fcd95bd86cfbd1a953f4480ad44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0703e98bf6346fcd95bd86cfbd1a953f4480ad44/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d46a30469c4156fefb7ef046953ea19c4d6a2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d46a30469c4156fefb7ef046953ea19c4d6a2f2", "html_url": "https://github.com/rust-lang/rust/commit/3d46a30469c4156fefb7ef046953ea19c4d6a2f2"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "d285936e22bfbd9f011969c0b7b9035777b8e91a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0703e98bf6346fcd95bd86cfbd1a953f4480ad44/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0703e98bf6346fcd95bd86cfbd1a953f4480ad44/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0703e98bf6346fcd95bd86cfbd1a953f4480ad44", "patch": "@@ -184,13 +184,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 // rustdoc needs to be able to document functions that use all the features, so\n                 // whitelist them all\n                 target_features_whitelist::all_known_features()\n-                    .chain(Some((\"cg_clif\", None)))\n                     .map(|(a, b)| (a.to_string(), b))\n                     .collect()\n             } else {\n                 target_features_whitelist::target_feature_whitelist(tcx.sess)\n                     .iter()\n-                    .chain(&Some((\"cg_clif\", None)))\n                     .map(|&(a, b)| (a.to_string(), b))\n                     .collect()\n             }\n@@ -199,7 +197,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     fn provide_extern(&self, _providers: &mut Providers) {}\n \n     fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n-        vec![rustc_span::Symbol::intern(\"cg_clif\")]\n+        vec![]\n     }\n \n     fn codegen_crate<'tcx>("}]}