{"sha": "87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NTQwYmQzYmNhOGRjZDg2MjIzMjYxZjhjNzZjNWJiZjY4MTFlZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T09:03:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-08T09:03:46Z"}, "message": "Auto merge of #67760 - Mark-Simulacrum:rustc-dirty, r=alexcrichton\n\nClear out target directory if compiler has changed\n\nPreviously, we relied fully on Cargo to detect that the compiler had changed and\nit needed to rebuild the standard library (or later \"components\"). This used to\nnot quite be the case prior to moving to LLVM be a separate cargo invocation;\nsubsequent compiles would recompile std and friends if LLVM had changed\n(#67077 is the PR that changes things here).\n\nThis PR moves us to clearing out libstd when it is being compiled if the rustc\nwe're using has changed. We fairly harshly limit the cases in which we do this\n(e.g., ignoring dry run mode, and so forth, as well as rustdoc invocations).\nThis is primarily because when we're not using the compiler directly, so\nclearing out in other cases is likely to lead to bugs, particularly as our\ndeletion scheme is pretty blunt today (basically removing more than is needed,\ni.e., not just the rustc artifacts).\n\nIn practice, this targeted fix does fix the known bug, though it may not fully\nresolve the problem here. It's also not clear that there is a full fix hiding\nhere that doesn't involve a more major change (like -Zbinary-dep-depinfo was).\n\nAs a drive-by fix, don't delete the compiler before calling Build::copy, as that\nalso deletes the compiler.", "tree": {"sha": "979dbdaf6603ef186508eaf47cd6b63a3fa8e134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979dbdaf6603ef186508eaf47cd6b63a3fa8e134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "html_url": "https://github.com/rust-lang/rust/commit/87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48e576756cd0c360e5522974fc8d5867b439092", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48e576756cd0c360e5522974fc8d5867b439092", "html_url": "https://github.com/rust-lang/rust/commit/f48e576756cd0c360e5522974fc8d5867b439092"}, {"sha": "ccd8c8c89027b32c5dc19c1471deae588baf38ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd8c8c89027b32c5dc19c1471deae588baf38ce", "html_url": "https://github.com/rust-lang/rust/commit/ccd8c8c89027b32c5dc19c1471deae588baf38ce"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "3a14b3e71c4777b7a9ec3e3618a68e6caa93cff0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "patch": "@@ -726,7 +726,7 @@ impl<'a> Builder<'a> {\n             self.clear_if_dirty(&my_out, &rustdoc);\n         }\n \n-        cargo.env(\"CARGO_TARGET_DIR\", out_dir).arg(cmd).arg(\"-Zconfig-profile\");\n+        cargo.env(\"CARGO_TARGET_DIR\", &out_dir).arg(cmd).arg(\"-Zconfig-profile\");\n \n         let profile_var = |name: &str| {\n             let profile = if self.config.rust_optimize { \"RELEASE\" } else { \"DEV\" };\n@@ -865,6 +865,18 @@ impl<'a> Builder<'a> {\n         let sysroot = if use_snapshot { self.rustc_snapshot_sysroot() } else { &maybe_sysroot };\n         let libdir = self.rustc_libdir(compiler);\n \n+        // Clear the output directory if the real rustc we're using has changed;\n+        // Cargo cannot detect this as it thinks rustc is bootstrap/debug/rustc.\n+        //\n+        // Avoid doing this during dry run as that usually means the relevant\n+        // compiler is not yet linked/copied properly.\n+        //\n+        // Only clear out the directory if we're compiling std; otherwise, we\n+        // should let Cargo take care of things for us (via depdep info)\n+        if !self.config.dry_run && mode == Mode::ToolStd && cmd == \"build\" {\n+            self.clear_if_dirty(&out_dir, &self.rustc(compiler));\n+        }\n+\n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n         // how the actual compiler itself is called."}, {"sha": "7f0bb5813a4a0373499356544d48bfc111944438", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87540bd3bca8dcd86223261f8c76c5bbf6811ee6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=87540bd3bca8dcd86223261f8c76c5bbf6811ee6", "patch": "@@ -776,7 +776,6 @@ impl Step for Assemble {\n         let bindir = sysroot.join(\"bin\");\n         t!(fs::create_dir_all(&bindir));\n         let compiler = builder.rustc(target_compiler);\n-        let _ = fs::remove_file(&compiler);\n         builder.copy(&rustc, &compiler);\n \n         target_compiler"}]}