{"sha": "fc57358efda7c028cbe8a438446cce5f540f48ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTczNThlZmRhN2MwMjhjYmU4YTQzODQ0NmNjZTVmNTQwZjQ4Y2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-25T14:30:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T14:30:10Z"}, "message": "Merge #4133\n\n4133: main: eagerly prime goto-definition caches r=matklad a=BurntSushi\n\nThis commit eagerly primes the caches used by goto-definition by\r\nsubmitting a \"phantom\" goto-definition request. This is perhaps a bit\r\ncircuitous, but it does actually get the job done. The result of this\r\nchange is that once RA is finished its initial loading of a project,\r\ngoto-definition requests are instant. There don't appear to be any more\r\nsurprise latency spikes.\r\n\r\nThis _partially_ addresses #1650 in that it front-loads the latency of the\r\nfirst goto-definition request, which in turn makes it more predictable and\r\nless surprising. In particular, this addresses the use case where one opens\r\nthe text editor, starts reading code for a while, and only later issues the\r\nfirst goto-definition request. Before this PR, that first goto-definition request\r\nis guaranteed to have high latency in any reasonably sized project. But\r\nafter this PR, there's a good chance that it will now be instant.\r\n\r\nWhat this _doesn't_ address is that initial loading time. In fact, it makes it\r\nlonger by adding a phantom goto-definition request to the initial startup\r\nsequence. However, I observed that while this did make initial loading\r\nslower, it was overall a somewhat small (but not insignificant) fraction\r\nof initial loading time.\r\n\r\n-----\r\n\r\nAt least, the above is what I _want_ to do. The actual change in this PR is just a proof-of-concept. I came up with after an evening of printf-debugging. Once I found the spot where this cache priming should go, I was unsure of how to generate a phantom input. So I just took an input I knew worked from my printf-debugging and hacked it in. Obviously, what I'd like to do is make this more general such that it will always work.\r\n\r\nI don't know whether this is the \"right\" approach or not. My guess is that there is perhaps a cleaner solution that more directly primes whatever cache is being lazily populated rather than fudging the issue with a phantom goto-definition request.\r\n\r\nI created this as a draft PR because I'd really like help making this general. I think whether y'all want to accept this patch is perhaps a separate question. IMO, it seems like a good idea, but to be honest, I'm happy to maintain this patch on my own since it's so trivial. But I would like to generalize it so that it will work in any project.\r\n\r\nMy thinking is that all I really need to do is find a file and a token somewhere in the loaded project, and then use that as input. But I don't quite know how to connect all the data structures to do that. Any help would be appreciated!\r\n\r\ncc @matklad since I've been a worm in your ear about this problem. :-)\n\nCo-authored-by: Andrew Gallant <jamslam@gmail.com>", "tree": {"sha": "402dd311ea4de95468c79eb8afa6722b7391dbb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402dd311ea4de95468c79eb8afa6722b7391dbb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc57358efda7c028cbe8a438446cce5f540f48ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepElyCRBK7hj4Ov3rIwAAdHIIAEHw2fIhD8u067C62jtfm2uH\nhaDWA2z3OztUlJC6D++L9a/DE26/oSSgq3kTD71cLGwF1PZitmce2ppnBJyMtk0g\nO4R4VG7GQN5iipHKAhJ4OCzWsHJexmqttbB/gdIJHJP8JnF8eNGUdJQYxPv28mQr\nPH8OezyVd7BlVAAk1s7vLyNz8vNfbzDbgWfVtGW5k2Phms54SNM7MBuf0f/OCMs/\nMf0xbJMyfwPjLHB+EPx6MBgeybllz/LSoupLHRTnWhtNQMtObEXaPFUP7Ym0SwcL\n2mJH8li2wY4pJ+x41vmLmeFsPRvg5Mvhp4gwGzwrJiyMyu/XyDwLb0N159K+JRA=\n=hrga\n-----END PGP SIGNATURE-----\n", "payload": "tree 402dd311ea4de95468c79eb8afa6722b7391dbb8\nparent 05981823bac91ba338110902fd435c6e3166f1d6\nparent 0c12b7e8c8605e84873858da0c4aa170140c14bb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587825010 +0000\ncommitter GitHub <noreply@github.com> 1587825010 +0000\n\nMerge #4133\n\n4133: main: eagerly prime goto-definition caches r=matklad a=BurntSushi\n\nThis commit eagerly primes the caches used by goto-definition by\r\nsubmitting a \"phantom\" goto-definition request. This is perhaps a bit\r\ncircuitous, but it does actually get the job done. The result of this\r\nchange is that once RA is finished its initial loading of a project,\r\ngoto-definition requests are instant. There don't appear to be any more\r\nsurprise latency spikes.\r\n\r\nThis _partially_ addresses #1650 in that it front-loads the latency of the\r\nfirst goto-definition request, which in turn makes it more predictable and\r\nless surprising. In particular, this addresses the use case where one opens\r\nthe text editor, starts reading code for a while, and only later issues the\r\nfirst goto-definition request. Before this PR, that first goto-definition request\r\nis guaranteed to have high latency in any reasonably sized project. But\r\nafter this PR, there's a good chance that it will now be instant.\r\n\r\nWhat this _doesn't_ address is that initial loading time. In fact, it makes it\r\nlonger by adding a phantom goto-definition request to the initial startup\r\nsequence. However, I observed that while this did make initial loading\r\nslower, it was overall a somewhat small (but not insignificant) fraction\r\nof initial loading time.\r\n\r\n-----\r\n\r\nAt least, the above is what I _want_ to do. The actual change in this PR is just a proof-of-concept. I came up with after an evening of printf-debugging. Once I found the spot where this cache priming should go, I was unsure of how to generate a phantom input. So I just took an input I knew worked from my printf-debugging and hacked it in. Obviously, what I'd like to do is make this more general such that it will always work.\r\n\r\nI don't know whether this is the \"right\" approach or not. My guess is that there is perhaps a cleaner solution that more directly primes whatever cache is being lazily populated rather than fudging the issue with a phantom goto-definition request.\r\n\r\nI created this as a draft PR because I'd really like help making this general. I think whether y'all want to accept this patch is perhaps a separate question. IMO, it seems like a good idea, but to be honest, I'm happy to maintain this patch on my own since it's so trivial. But I would like to generalize it so that it will work in any project.\r\n\r\nMy thinking is that all I really need to do is find a file and a token somewhere in the loaded project, and then use that as input. But I don't quite know how to connect all the data structures to do that. Any help would be appreciated!\r\n\r\ncc @matklad since I've been a worm in your ear about this problem. :-)\n\nCo-authored-by: Andrew Gallant <jamslam@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57358efda7c028cbe8a438446cce5f540f48ca", "html_url": "https://github.com/rust-lang/rust/commit/fc57358efda7c028cbe8a438446cce5f540f48ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc57358efda7c028cbe8a438446cce5f540f48ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05981823bac91ba338110902fd435c6e3166f1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05981823bac91ba338110902fd435c6e3166f1d6", "html_url": "https://github.com/rust-lang/rust/commit/05981823bac91ba338110902fd435c6e3166f1d6"}, {"sha": "0c12b7e8c8605e84873858da0c4aa170140c14bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c12b7e8c8605e84873858da0c4aa170140c14bb", "html_url": "https://github.com/rust-lang/rust/commit/0c12b7e8c8605e84873858da0c4aa170140c14bb"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "90bf7d25f20c7b17f65bc4637c4b0d4605f2bfb4", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57358efda7c028cbe8a438446cce5f540f48ca/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=fc57358efda7c028cbe8a438446cce5f540f48ca", "patch": "@@ -3,13 +3,10 @@\n //! request takes longer to compute. This modules implemented prepopulating of\n //! various caches, it's not really advanced at the moment.\n \n-use hir::Semantics;\n-\n use crate::{FileId, RootDatabase};\n \n pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n-    let sema = Semantics::new(db);\n     for file in files {\n-        let _ = sema.to_module_def(file);\n+        let _ = crate::syntax_highlighting::highlight(db, file, None);\n     }\n }"}, {"sha": "f3aef3f0f29bad90d91b72ca796671e69698aec6", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc57358efda7c028cbe8a438446cce5f540f48ca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57358efda7c028cbe8a438446cce5f540f48ca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fc57358efda7c028cbe8a438446cce5f540f48ca", "patch": "@@ -222,6 +222,7 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n     libdata_receiver.into_iter().for_each(drop);\n     log::info!(\"...tasks have finished\");\n     log::info!(\"joining threadpool...\");\n+    pool.join();\n     drop(pool);\n     log::info!(\"...threadpool has finished\");\n \n@@ -417,28 +418,29 @@ fn loop_turn(\n         && loop_state.pending_libraries.is_empty()\n         && loop_state.in_flight_libraries == 0\n     {\n+        state_changed = true;\n         loop_state.workspace_loaded = true;\n         if let Some(flycheck) = &world_state.flycheck {\n             flycheck.update();\n         }\n-        pool.execute({\n-            let subs = loop_state.subscriptions.subscriptions();\n-            let snap = world_state.snapshot();\n-            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n-        });\n     }\n \n     if show_progress {\n         send_startup_progress(&connection.sender, loop_state);\n     }\n \n-    if state_changed {\n+    if state_changed && loop_state.workspace_loaded {\n         update_file_notifications_on_threadpool(\n             pool,\n             world_state.snapshot(),\n             task_sender.clone(),\n             loop_state.subscriptions.subscriptions(),\n-        )\n+        );\n+        pool.execute({\n+            let subs = loop_state.subscriptions.subscriptions();\n+            let snap = world_state.snapshot();\n+            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n+        });\n     }\n \n     let loop_duration = loop_start.elapsed();"}]}