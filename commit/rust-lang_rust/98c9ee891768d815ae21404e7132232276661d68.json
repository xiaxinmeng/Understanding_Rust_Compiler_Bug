{"sha": "98c9ee891768d815ae21404e7132232276661d68", "node_id": "C_kwDOAAsO6NoAKDk4YzllZTg5MTc2OGQ4MTVhZTIxNDA0ZTcxMzIyMzIyNzY2NjFkNjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-03T10:02:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T10:02:55Z"}, "message": "Rollup merge of #94537 - est31:master, r=notriddle\n\nUse ? operator in one instance instead of manual match\n\nAs suggested [here](https://github.com/rust-lang/rust/pull/94139#discussion_r818102403).\n\nr? `@notriddle`", "tree": {"sha": "25631ebf8a48942181f7f88ac512233eeb62fbb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25631ebf8a48942181f7f88ac512233eeb62fbb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c9ee891768d815ae21404e7132232276661d68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIJJPCRBK7hj4Ov3rIwAAPqcIAE4KAJovSdshkokHnM2JIuQA\n8KCRxF5g7kv1zqmjQOo+p4PJxahv+2xF6/qhx28IrzNUtQW4nWsmvyym8c2BtEyM\ntibjkd3uxm76hGadZXBDgg7YHrCHguykIpwZcUzhPW0DoQzj24oqIpStXfljalAR\n5MpCN2DSZN5WBZJotKHKoNDpgLvI9NheSSQecYEIz6cZRJNhPZJ+gAFqLg84rwnV\nnDR5h1663W5Odzq7bfr7UVPzcvY4mOfMUKClRWZUhcXJpa3wER34MD3p6sJJtBCs\nMlVyPjxY9r8wgmDawEyWUq9hq55v6xUbUcx4Y8efUt7a9lQoo2IZl/O78n3+pIs=\n=rIpg\n-----END PGP SIGNATURE-----\n", "payload": "tree 25631ebf8a48942181f7f88ac512233eeb62fbb4\nparent 250e7e1efe897eaf505ab53a44ff6ac1464a65b1\nparent fe78bd49207ec302cdb1898cdb56bc4194aa24fb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646301775 +0100\ncommitter GitHub <noreply@github.com> 1646301775 +0100\n\nRollup merge of #94537 - est31:master, r=notriddle\n\nUse ? operator in one instance instead of manual match\n\nAs suggested [here](https://github.com/rust-lang/rust/pull/94139#discussion_r818102403).\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c9ee891768d815ae21404e7132232276661d68", "html_url": "https://github.com/rust-lang/rust/commit/98c9ee891768d815ae21404e7132232276661d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c9ee891768d815ae21404e7132232276661d68/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250e7e1efe897eaf505ab53a44ff6ac1464a65b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/250e7e1efe897eaf505ab53a44ff6ac1464a65b1", "html_url": "https://github.com/rust-lang/rust/commit/250e7e1efe897eaf505ab53a44ff6ac1464a65b1"}, {"sha": "fe78bd49207ec302cdb1898cdb56bc4194aa24fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe78bd49207ec302cdb1898cdb56bc4194aa24fb", "html_url": "https://github.com/rust-lang/rust/commit/fe78bd49207ec302cdb1898cdb56bc4194aa24fb"}], "stats": {"total": 99, "additions": 48, "deletions": 51}, "files": [{"sha": "63a8e85f7c54044413df3e4c6551f6697fe6b059", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 48, "deletions": 51, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/98c9ee891768d815ae21404e7132232276661d68/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c9ee891768d815ae21404e7132232276661d68/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=98c9ee891768d815ae21404e7132232276661d68", "patch": "@@ -111,58 +111,55 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n \n-    let res = interface::run_compiler(config, |compiler| {\n-        compiler.enter(|queries| {\n-            let mut global_ctxt = queries.global_ctxt()?.take();\n-\n-            let collector = global_ctxt.enter(|tcx| {\n-                let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n-\n-                let opts = scrape_test_config(crate_attrs);\n-                let enable_per_target_ignores = options.enable_per_target_ignores;\n-                let mut collector = Collector::new(\n-                    tcx.crate_name(LOCAL_CRATE),\n-                    options,\n-                    false,\n-                    opts,\n-                    Some(compiler.session().parse_sess.clone_source_map()),\n-                    None,\n-                    enable_per_target_ignores,\n-                );\n-\n-                let mut hir_collector = HirCollector {\n-                    sess: compiler.session(),\n-                    collector: &mut collector,\n-                    map: tcx.hir(),\n-                    codes: ErrorCodes::from(\n-                        compiler.session().opts.unstable_features.is_nightly_build(),\n-                    ),\n-                    tcx,\n-                };\n-                hir_collector.visit_testable(\n-                    \"\".to_string(),\n-                    CRATE_HIR_ID,\n-                    tcx.hir().span(CRATE_HIR_ID),\n-                    |this| tcx.hir().walk_toplevel_module(this),\n-                );\n-\n-                collector\n-            });\n-            if compiler.session().diagnostic().has_errors_or_lint_errors() {\n-                FatalError.raise();\n-            }\n+    let (tests, unused_extern_reports, compiling_test_count) =\n+        interface::run_compiler(config, |compiler| {\n+            compiler.enter(|queries| {\n+                let mut global_ctxt = queries.global_ctxt()?.take();\n+\n+                let collector = global_ctxt.enter(|tcx| {\n+                    let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n+\n+                    let opts = scrape_test_config(crate_attrs);\n+                    let enable_per_target_ignores = options.enable_per_target_ignores;\n+                    let mut collector = Collector::new(\n+                        tcx.crate_name(LOCAL_CRATE),\n+                        options,\n+                        false,\n+                        opts,\n+                        Some(compiler.session().parse_sess.clone_source_map()),\n+                        None,\n+                        enable_per_target_ignores,\n+                    );\n+\n+                    let mut hir_collector = HirCollector {\n+                        sess: compiler.session(),\n+                        collector: &mut collector,\n+                        map: tcx.hir(),\n+                        codes: ErrorCodes::from(\n+                            compiler.session().opts.unstable_features.is_nightly_build(),\n+                        ),\n+                        tcx,\n+                    };\n+                    hir_collector.visit_testable(\n+                        \"\".to_string(),\n+                        CRATE_HIR_ID,\n+                        tcx.hir().span(CRATE_HIR_ID),\n+                        |this| tcx.hir().walk_toplevel_module(this),\n+                    );\n+\n+                    collector\n+                });\n+                if compiler.session().diagnostic().has_errors_or_lint_errors() {\n+                    FatalError.raise();\n+                }\n \n-            let unused_extern_reports = collector.unused_extern_reports.clone();\n-            let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n-            let ret: Result<_, ErrorGuaranteed> =\n-                Ok((collector.tests, unused_extern_reports, compiling_test_count));\n-            ret\n-        })\n-    });\n-    let (tests, unused_extern_reports, compiling_test_count) = match res {\n-        Ok(res) => res,\n-        Err(ErrorGuaranteed) => return Err(ErrorGuaranteed),\n-    };\n+                let unused_extern_reports = collector.unused_extern_reports.clone();\n+                let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n+                let ret: Result<_, ErrorGuaranteed> =\n+                    Ok((collector.tests, unused_extern_reports, compiling_test_count));\n+                ret\n+            })\n+        })?;\n \n     run_tests(test_args, nocapture, tests);\n "}]}