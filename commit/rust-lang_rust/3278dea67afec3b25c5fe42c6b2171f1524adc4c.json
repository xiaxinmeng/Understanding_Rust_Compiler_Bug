{"sha": "3278dea67afec3b25c5fe42c6b2171f1524adc4c", "node_id": "C_kwDOAAsO6NoAKDMyNzhkZWE2N2FmZWMzYjI1YzVmZTQyYzZiMjE3MWYxNTI0YWRjNGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T23:01:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T23:01:06Z"}, "message": "Rollup merge of #103396 - RalfJung:pinning-closure-captures, r=dtolnay\n\nPin::new_unchecked: discuss pinning closure captures\n\nRegardless of how the discussion in https://github.com/rust-lang/rust/pull/102737 turns out, pinning closure captures is super subtle business and probably worth discussing separately.", "tree": {"sha": "9081386b9ba1987d1c10396b44d1a114e106159d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9081386b9ba1987d1c10396b44d1a114e106159d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3278dea67afec3b25c5fe42c6b2171f1524adc4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfAMyCRBK7hj4Ov3rIwAAx3sIAAhLuJDVsI0pmxVysS29zUnJ\n1mvp1baV2YQgCgVwz0NSqLDn/rUETtEZFf6jQo7ont69UDbJ8k+aY8jNtgajs8+D\n9MWzKz96ndkNnQuG+idxT52lbJFl+ikUEPSgGT1+D4FXl6EBDMGtpsxK4loRYdxW\ngaAFZtpDAU4F9X9d/DI7rihYYezpceZrzOqib3d3OJfjq7QZQAF/JFnaTlcRQ2xk\nBsSajWrCmh3Q3eW4BFDM1hQf1x0rd+2gTCowgDprThLd1pzM9KMQSpNyj0SSESoz\nj3e4szA7MjMM1pyqb6ZCYqF9dLIjxeOAPoPM8ntiMfMuPOavAjrXLYl+8xOZYFw=\n=9zFc\n-----END PGP SIGNATURE-----\n", "payload": "tree 9081386b9ba1987d1c10396b44d1a114e106159d\nparent b7bc90fea3b441234a84b49fdafeb75815eebbab\nparent 964290a0ada338f129a0ebd006e6cd3e1f55951f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669071666 +0100\ncommitter GitHub <noreply@github.com> 1669071666 +0100\n\nRollup merge of #103396 - RalfJung:pinning-closure-captures, r=dtolnay\n\nPin::new_unchecked: discuss pinning closure captures\n\nRegardless of how the discussion in https://github.com/rust-lang/rust/pull/102737 turns out, pinning closure captures is super subtle business and probably worth discussing separately.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3278dea67afec3b25c5fe42c6b2171f1524adc4c", "html_url": "https://github.com/rust-lang/rust/commit/3278dea67afec3b25c5fe42c6b2171f1524adc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3278dea67afec3b25c5fe42c6b2171f1524adc4c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bc90fea3b441234a84b49fdafeb75815eebbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bc90fea3b441234a84b49fdafeb75815eebbab", "html_url": "https://github.com/rust-lang/rust/commit/b7bc90fea3b441234a84b49fdafeb75815eebbab"}, {"sha": "964290a0ada338f129a0ebd006e6cd3e1f55951f", "url": "https://api.github.com/repos/rust-lang/rust/commits/964290a0ada338f129a0ebd006e6cd3e1f55951f", "html_url": "https://github.com/rust-lang/rust/commit/964290a0ada338f129a0ebd006e6cd3e1f55951f"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "4524fa4c48d2b8a062f1cf2d2b0cb9cdfa2da323", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3278dea67afec3b25c5fe42c6b2171f1524adc4c/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3278dea67afec3b25c5fe42c6b2171f1524adc4c/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=3278dea67afec3b25c5fe42c6b2171f1524adc4c", "patch": "@@ -543,7 +543,7 @@ impl<P: Deref> Pin<P> {\n     ///         let p: Pin<&mut T> = Pin::new_unchecked(&mut a);\n     ///         // This should mean the pointee `a` can never move again.\n     ///     }\n-    ///     mem::swap(&mut a, &mut b);\n+    ///     mem::swap(&mut a, &mut b); // Potential UB down the road \u26a0\ufe0f\n     ///     // The address of `a` changed to `b`'s stack slot, so `a` got moved even\n     ///     // though we have previously pinned it! We have violated the pinning API contract.\n     /// }\n@@ -563,13 +563,66 @@ impl<P: Deref> Pin<P> {\n     ///         // This should mean the pointee can never move again.\n     ///     }\n     ///     drop(pinned);\n-    ///     let content = Rc::get_mut(&mut x).unwrap();\n+    ///     let content = Rc::get_mut(&mut x).unwrap(); // Potential UB down the road \u26a0\ufe0f\n     ///     // Now, if `x` was the only reference, we have a mutable reference to\n     ///     // data that we pinned above, which we could use to move it as we have\n     ///     // seen in the previous example. We have violated the pinning API contract.\n     ///  }\n     ///  ```\n     ///\n+    /// ## Pinning of closure captures\n+    ///\n+    /// Particular care is required when using `Pin::new_unchecked` in a closure:\n+    /// `Pin::new_unchecked(&mut var)` where `var` is a by-value (moved) closure capture\n+    /// implicitly makes the promise that the closure itself is pinned, and that *all* uses\n+    /// of this closure capture respect that pinning.\n+    /// ```\n+    /// use std::pin::Pin;\n+    /// use std::task::Context;\n+    /// use std::future::Future;\n+    ///\n+    /// fn move_pinned_closure(mut x: impl Future, cx: &mut Context<'_>) {\n+    ///     // Create a closure that moves `x`, and then internally uses it in a pinned way.\n+    ///     let mut closure = move || unsafe {\n+    ///         let _ignore = Pin::new_unchecked(&mut x).poll(cx);\n+    ///     };\n+    ///     // Call the closure, so the future can assume it has been pinned.\n+    ///     closure();\n+    ///     // Move the closure somewhere else. This also moves `x`!\n+    ///     let mut moved = closure;\n+    ///     // Calling it again means we polled the future from two different locations,\n+    ///     // violating the pinning API contract.\n+    ///     moved(); // Potential UB \u26a0\ufe0f\n+    /// }\n+    /// ```\n+    /// When passing a closure to another API, it might be moving the closure any time, so\n+    /// `Pin::new_unchecked` on closure captures may only be used if the API explicitly documents\n+    /// that the closure is pinned.\n+    ///\n+    /// The better alternative is to avoid all that trouble and do the pinning in the outer function\n+    /// instead (here using the unstable `pin` macro):\n+    /// ```\n+    /// #![feature(pin_macro)]\n+    /// use std::pin::pin;\n+    /// use std::task::Context;\n+    /// use std::future::Future;\n+    ///\n+    /// fn move_pinned_closure(mut x: impl Future, cx: &mut Context<'_>) {\n+    ///     let mut x = pin!(x);\n+    ///     // Create a closure that captures `x: Pin<&mut _>`, which is safe to move.\n+    ///     let mut closure = move || {\n+    ///         let _ignore = x.as_mut().poll(cx);\n+    ///     };\n+    ///     // Call the closure, so the future can assume it has been pinned.\n+    ///     closure();\n+    ///     // Move the closure somewhere else.\n+    ///     let mut moved = closure;\n+    ///     // Calling it again here is fine (except that we might be polling a future that already\n+    ///     // returned `Poll::Ready`, but that is a separate problem).\n+    ///     moved();\n+    /// }\n+    /// ```\n+    ///\n     /// [`mem::swap`]: crate::mem::swap\n     #[lang = \"new_unchecked\"]\n     #[inline(always)]"}]}