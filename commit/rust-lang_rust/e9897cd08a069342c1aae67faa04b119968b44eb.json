{"sha": "e9897cd08a069342c1aae67faa04b119968b44eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ODk3Y2QwOGEwNjkzNDJjMWFhZTY3ZmFhMDRiMTE5OTY4YjQ0ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-06T13:50:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-06T13:50:16Z"}, "message": "auto merge of #7598 : sanxiyn/rust/rollup-1, r=sanxiyn\n\nc9b9462 r=z0w0\r\n2e65782 r=cmr\r\n2045889 r=thestinger\r\n30fca57 r=huonw", "tree": {"sha": "d60abc811111ee9e51cd1c20af526a8990d8dd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d60abc811111ee9e51cd1c20af526a8990d8dd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9897cd08a069342c1aae67faa04b119968b44eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9897cd08a069342c1aae67faa04b119968b44eb", "html_url": "https://github.com/rust-lang/rust/commit/e9897cd08a069342c1aae67faa04b119968b44eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9897cd08a069342c1aae67faa04b119968b44eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6595c42577964247aaf7f61e5f054902c2ce1d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6595c42577964247aaf7f61e5f054902c2ce1d45", "html_url": "https://github.com/rust-lang/rust/commit/6595c42577964247aaf7f61e5f054902c2ce1d45"}, {"sha": "376d5d6aae9a448a0f58a9a98e8dcec9eeeaece7", "url": "https://api.github.com/repos/rust-lang/rust/commits/376d5d6aae9a448a0f58a9a98e8dcec9eeeaece7", "html_url": "https://github.com/rust-lang/rust/commit/376d5d6aae9a448a0f58a9a98e8dcec9eeeaece7"}], "stats": {"total": 130, "additions": 57, "deletions": 73}, "files": [{"sha": "f40bed8640dce16e2f0d46475a0e1c3c6f3eedc0", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -95,7 +95,7 @@ syn region    rustDeriving    start=\"deriving(\" end=\")\" contains=rustTrait\n \" Number literals\n syn match     rustNumber      display \"\\<[0-9][0-9_]*\\>\"\n syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n+syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(i\\|i8\\|i16\\|i32\\|i64\\)\\>\"\n \n syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\>\"\n syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\""}, {"sha": "bbac4a2907c0fa8a60c57c6dd32530f8ca5f8657", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -17,7 +17,7 @@ use front::config;\n use std::vec;\n use syntax::ast_util::*;\n use syntax::attr;\n-use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n+use syntax::codemap::{dummy_sp, span, ExpnInfo, NameAndSpan};\n use syntax::codemap;\n use syntax::ext::base::ExtCtxt;\n use syntax::fold;\n@@ -72,13 +72,13 @@ fn generate_test_harness(sess: session::Session,\n     };\n \n     let ext_cx = cx.ext_cx;\n-    ext_cx.bt_push(ExpandedFrom(CallInfo {\n+    ext_cx.bt_push(ExpnInfo {\n         call_site: dummy_sp(),\n         callee: NameAndSpan {\n             name: @\"test\",\n             span: None\n         }\n-    }));\n+    });\n \n     let precursor = @fold::AstFoldFns {\n         fold_crate: fold::wrap(|a,b| fold_crate(cx, a, b) ),"}, {"sha": "c39b676b97f01630858dae6d9cebda3bb4cd75c8", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -966,10 +966,6 @@ fn lint_unused_mut() -> visit::vt<@mut Context> {\n             visit_fn_decl(cx, &tm.decl);\n             visit::visit_ty_method(tm, (cx, vt));\n         },\n-        visit_struct_method: |sm, (cx, vt)| {\n-            visit_fn_decl(cx, &sm.decl);\n-            visit::visit_struct_method(sm, (cx, vt));\n-        },\n         visit_trait_method: |tm, (cx, vt)| {\n             match *tm {\n                 ast::required(ref tm) => visit_fn_decl(cx, &tm.decl),\n@@ -1049,14 +1045,6 @@ fn lint_missing_doc() -> visit::vt<@mut Context> {\n     }\n \n     visit::mk_vt(@visit::Visitor {\n-        visit_struct_method: |m, (cx, vt)| {\n-            if m.vis == ast::public {\n-                check_attrs(cx, m.attrs, m.span,\n-                            \"missing documentation for a method\");\n-            }\n-            visit::visit_struct_method(m, (cx, vt));\n-        },\n-\n         visit_ty_method: |m, (cx, vt)| {\n             // All ty_method objects are linted about because they're part of a\n             // trait (no visibility)"}, {"sha": "7e89d0407816031ea3e191822df7460a798e7d00", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -174,18 +174,13 @@ pub struct FileMapAndBytePos {fm: @FileMap, pos: BytePos}\n #[deriving(IterBytes)]\n pub struct NameAndSpan {name: @str, span: Option<span>}\n \n+/// Extra information for tracking macro expansion of spans\n #[deriving(IterBytes)]\n-pub struct CallInfo {\n+pub struct ExpnInfo {\n     call_site: span,\n     callee: NameAndSpan\n }\n \n-/// Extra information for tracking macro expansion of spans\n-#[deriving(IterBytes)]\n-pub enum ExpnInfo {\n-    ExpandedFrom(CallInfo)\n-}\n-\n pub type FileName = @str;\n \n pub struct FileLines"}, {"sha": "ad14b567b9602c6b0524239129d3277866a44d90", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -11,8 +11,7 @@\n use ast;\n use ast::Name;\n use codemap;\n-use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n-use codemap::CallInfo;\n+use codemap::{CodeMap, span, ExpnInfo};\n use diagnostic::span_handler;\n use ext;\n use parse;\n@@ -243,7 +242,7 @@ impl ExtCtxt {\n     pub fn cfg(&self) -> ast::crate_cfg { copy self.cfg }\n     pub fn call_site(&self) -> span {\n         match *self.backtrace {\n-            Some(@ExpandedFrom(CallInfo {call_site: cs, _})) => cs,\n+            Some(@ExpnInfo {call_site: cs, _}) => cs,\n             None => self.bug(\"missing top span\")\n         }\n     }\n@@ -254,21 +253,19 @@ impl ExtCtxt {\n     pub fn mod_path(&self) -> ~[ast::ident] { copy *self.mod_path }\n     pub fn bt_push(&self, ei: codemap::ExpnInfo) {\n         match ei {\n-            ExpandedFrom(CallInfo {call_site: cs, callee: ref callee}) => {\n+            ExpnInfo {call_site: cs, callee: ref callee} => {\n                 *self.backtrace =\n-                    Some(@ExpandedFrom(CallInfo {\n+                    Some(@ExpnInfo {\n                         call_site: span {lo: cs.lo, hi: cs.hi,\n                                          expn_info: *self.backtrace},\n-                        callee: copy *callee}));\n+                        callee: copy *callee});\n             }\n         }\n     }\n     pub fn bt_pop(&self) {\n         match *self.backtrace {\n-            Some(@ExpandedFrom(\n-                CallInfo {\n-                    call_site: span {expn_info: prev, _}, _\n-                })) => {\n+            Some(@ExpnInfo {\n+                call_site: span {expn_info: prev, _}, _}) => {\n                 *self.backtrace = prev\n             }\n             _ => self.bug(\"tried to pop without a push\")"}, {"sha": "2b18ede88791b01a7baaabf037b476bf48289efb", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -16,7 +16,7 @@ use ast;\n use ast_util::{new_rename, new_mark, resolve};\n use attr;\n use codemap;\n-use codemap::{span, CallInfo, ExpandedFrom, NameAndSpan, spanned};\n+use codemap::{span, ExpnInfo, NameAndSpan, spanned};\n use ext::base::*;\n use fold::*;\n use parse;\n@@ -60,13 +60,13 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                             expander: exp,\n                             span: exp_sp\n                         }))) => {\n-                            cx.bt_push(ExpandedFrom(CallInfo {\n+                            cx.bt_push(ExpnInfo {\n                                 call_site: s,\n                                 callee: NameAndSpan {\n                                     name: extnamestr,\n                                     span: exp_sp,\n                                 },\n-                            }));\n+                            });\n \n                             let expanded = match exp(cx, mac.span, *tts) {\n                                 MRExpr(e) => e,\n@@ -131,13 +131,13 @@ pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n \n             match (*extsbox).find(&intern(mname)) {\n               Some(@SE(ItemDecorator(dec_fn))) => {\n-                  cx.bt_push(ExpandedFrom(CallInfo {\n+                  cx.bt_push(ExpnInfo {\n                       call_site: attr.span,\n                       callee: NameAndSpan {\n                           name: mname,\n                           span: None\n                       }\n-                  }));\n+                  });\n                   let r = dec_fn(cx, attr.span, attr.node.value, items);\n                   cx.bt_pop();\n                   r\n@@ -227,13 +227,13 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                                     given '%s'\", extnamestr,\n                                    ident_to_str(&it.ident)));\n             }\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n                     span: expand.span\n                 }\n-            }));\n+            });\n             ((*expand).expander)(cx, it.span, tts)\n         }\n         Some(@SE(IdentTT(ref expand))) => {\n@@ -242,13 +242,13 @@ pub fn expand_item_mac(extsbox: @mut SyntaxEnv,\n                               fmt!(\"macro %s! expects an ident argument\",\n                                    extnamestr));\n             }\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: it.span,\n                 callee: NameAndSpan {\n                     name: extnamestr,\n                     span: expand.span\n                 }\n-            }));\n+            });\n             ((*expand).expander)(cx, it.span, it.ident, tts)\n         }\n         _ => cx.span_fatal(\n@@ -319,10 +319,10 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n \n         Some(@SE(NormalTT(\n             SyntaxExpanderTT{expander: exp, span: exp_sp}))) => {\n-            cx.bt_push(ExpandedFrom(CallInfo {\n+            cx.bt_push(ExpnInfo {\n                 call_site: sp,\n                 callee: NameAndSpan { name: extnamestr, span: exp_sp }\n-            }));\n+            });\n             let expanded = match exp(cx, mac.span, tts) {\n                 MRExpr(e) =>\n                     @codemap::spanned { node: stmt_expr(e, cx.next_id()),"}, {"sha": "b43536389e2cd06829e716447f98c01143e3da23", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -10,8 +10,8 @@\n \n use ast;\n use codemap;\n-use codemap::{Pos, ExpandedFrom, span};\n-use codemap::{CallInfo, NameAndSpan};\n+use codemap::{Pos, span};\n+use codemap::{ExpnInfo, NameAndSpan};\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n@@ -117,14 +117,14 @@ pub fn expand_include_bin(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n // recur along an ExpnInfo chain to find the original expression\n fn topmost_expn_info(expn_info: @codemap::ExpnInfo) -> @codemap::ExpnInfo {\n     match *expn_info {\n-        ExpandedFrom(CallInfo { call_site: ref call_site, _ }) => {\n+        ExpnInfo { call_site: ref call_site, _ } => {\n             match call_site.expn_info {\n                 Some(next_expn_info) => {\n                     match *next_expn_info {\n-                        ExpandedFrom(CallInfo {\n+                        ExpnInfo {\n                             callee: NameAndSpan { name: ref name, _ },\n                             _\n-                        }) => {\n+                        } => {\n                             // Don't recurse into file using \"include!\"\n                             if \"include\" == *name  {\n                                 expn_info"}, {"sha": "ae87fd8774a9ace0c2ebb0e37bf1657ad25abc2b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -1549,10 +1549,10 @@ impl Parser {\n         } else if self.eat_keyword(keywords::If) {\n             return self.parse_if_expr();\n         } else if self.eat_keyword(keywords::For) {\n-            return self.parse_sugary_call_expr(~\"for\", ForSugar,\n+            return self.parse_sugary_call_expr(lo, ~\"for\", ForSugar,\n                                                expr_loop_body);\n         } else if self.eat_keyword(keywords::Do) {\n-            return self.parse_sugary_call_expr(~\"do\", DoSugar,\n+            return self.parse_sugary_call_expr(lo, ~\"do\", DoSugar,\n                                                expr_do_body);\n         } else if self.eat_keyword(keywords::While) {\n             return self.parse_while_expr();\n@@ -2264,12 +2264,11 @@ impl Parser {\n     // parse a 'for' or 'do'.\n     // the 'for' and 'do' expressions parse as calls, but look like\n     // function calls followed by a closure expression.\n-    pub fn parse_sugary_call_expr(&self,\n+    pub fn parse_sugary_call_expr(&self, lo: BytePos,\n                                   keyword: ~str,\n                                   sugar: CallSugar,\n                                   ctor: &fn(v: @expr) -> expr_)\n                                   -> @expr {\n-        let lo = self.last_span;\n         // Parse the callee `foo` in\n         //    for foo || {\n         //    for foo.bar || {\n@@ -2286,21 +2285,21 @@ impl Parser {\n                 let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                             ctor(block));\n                 let args = vec::append(copy *args, [last_arg]);\n-                self.mk_expr(lo.lo, block.span.hi, expr_call(f, args, sugar))\n+                self.mk_expr(lo, block.span.hi, expr_call(f, args, sugar))\n             }\n             expr_method_call(_, f, i, ref tps, ref args, NoSugar) => {\n                 let block = self.parse_lambda_block_expr();\n                 let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                             ctor(block));\n                 let args = vec::append(copy *args, [last_arg]);\n-                self.mk_expr(lo.lo, block.span.hi,\n+                self.mk_expr(lo, block.span.hi,\n                              self.mk_method_call(f, i, copy *tps, args, sugar))\n             }\n             expr_field(f, i, ref tps) => {\n                 let block = self.parse_lambda_block_expr();\n                 let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                             ctor(block));\n-                self.mk_expr(lo.lo, block.span.hi,\n+                self.mk_expr(lo, block.span.hi,\n                              self.mk_method_call(f, i, copy *tps, ~[last_arg], sugar))\n             }\n             expr_path(*) | expr_call(*) | expr_method_call(*) |\n@@ -2309,7 +2308,7 @@ impl Parser {\n                 let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                             ctor(block));\n                 self.mk_expr(\n-                    lo.lo,\n+                    lo,\n                     last_arg.span.hi,\n                     self.mk_call(e, ~[last_arg], sugar))\n             }\n@@ -2319,7 +2318,7 @@ impl Parser {\n                 // but they aren't represented by tests\n                 debug!(\"sugary call on %?\", e.node);\n                 self.span_fatal(\n-                    *lo,\n+                    e.span,\n                     fmt!(\"`%s` must be followed by a block call\", keyword));\n             }\n         }"}, {"sha": "5bde51ad70fa204c7fdc4ab0ed88d41e8f2437ab", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -90,7 +90,6 @@ pub struct Visitor<E> {\n     visit_trait_method: @fn(&trait_method, (E, vt<E>)),\n     visit_struct_def: @fn(@struct_def, ident, &Generics, node_id, (E, vt<E>)),\n     visit_struct_field: @fn(@struct_field, (E, vt<E>)),\n-    visit_struct_method: @fn(@method, (E, vt<E>))\n }\n \n pub type visitor<E> = @Visitor<E>;\n@@ -116,7 +115,6 @@ pub fn default_visitor<E: Copy>() -> visitor<E> {\n         visit_trait_method: |a,b|visit_trait_method::<E>(a, b),\n         visit_struct_def: |a,b,c,d,e|visit_struct_def::<E>(a, b, c, d, e),\n         visit_struct_field: |a,b|visit_struct_field::<E>(a, b),\n-        visit_struct_method: |a,b|visit_struct_method::<E>(a, b)\n     };\n }\n \n@@ -414,10 +412,6 @@ pub fn visit_struct_field<E: Copy>(sf: &struct_field, (e, v): (E, vt<E>)) {\n     (v.visit_ty)(sf.node.ty, (e, v));\n }\n \n-pub fn visit_struct_method<E: Copy>(m: &method, (e, v): (E, vt<E>)) {\n-    visit_method_helper(m, (e, v));\n-}\n-\n pub fn visit_block<E: Copy>(b: &blk, (e, v): (E, vt<E>)) {\n     for b.node.view_items.iter().advance |vi| {\n         (v.visit_view_item)(*vi, (copy e, v));\n@@ -729,10 +723,6 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(sf);\n         visit_struct_field(sf, (e, v));\n     }\n-    fn v_struct_method(f: @fn(@method), m: @method, (e, v): ((), vt<()>)) {\n-        f(m);\n-        visit_struct_method(m, (e, v));\n-    }\n     return mk_vt(@Visitor {\n         visit_mod: |a,b,c,d|v_mod(v.visit_mod, a, b, c, d),\n         visit_view_item: |a,b| v_view_item(v.visit_view_item, a, b),\n@@ -760,7 +750,5 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n             v_struct_def(v.visit_struct_def, a, b, c, d, e),\n         visit_struct_field: |a,b|\n             v_struct_field(v.visit_struct_field, a, b),\n-        visit_struct_method: |a,b|\n-            v_struct_method(v.visit_struct_method, a, b)\n     });\n }"}, {"sha": "310de3657b385e06bc2b7177cd20c85aa7d3d8a2", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let needlesArr: ~[char] = ~['a', 'f'];\n     do needlesArr.iter().fold() |x, y| {\n     }\n-    //~^ ERROR 1 parameter was supplied (including the closure passed by the `do` keyword)\n+    //~^^ ERROR 1 parameter was supplied (including the closure passed by the `do` keyword)\n     //\n     // the first error is, um, non-ideal.\n }"}, {"sha": "c666950034a01072075b9b54b02612d2fd4ad4cb", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -108,7 +108,6 @@\n          '\\xA0', '\\u1680', '\\u180E', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n          '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200A',\n          '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n-     // <= bugs in pretty-printer?\n     for chars.iter().advance |c| {\n         let ws = c.is_whitespace();\n         println(fmt!(\"%? %?\" , c , ws));"}, {"sha": "f0d46f39cdf9cba980bed076165c9fcf9df21fb9", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -104,6 +104,6 @@ fn main() {\n          '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n     for chars.iter().advance |c| {\n         let ws = c.is_whitespace();\n-        println(fmt!(\"%? %?\", c , ws)); // <= bugs in pretty-printer?\n+        println(fmt!(\"%? %?\", c , ws));\n     }\n }"}, {"sha": "15631337d2a44f8490bf712a16cb9da827081156", "filename": "src/test/pretty/for-comment.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Ffor-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9897cd08a069342c1aae67faa04b119968b44eb/src%2Ftest%2Fpretty%2Ffor-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffor-comment.rs?ref=e9897cd08a069342c1aae67faa04b119968b44eb", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+fn f(v: &[int]) {\n+    let mut n = 0;\n+    for v.iter().advance |e| {\n+        n = *e; // This comment once triggered pretty printer bug\n+    }\n+}"}]}