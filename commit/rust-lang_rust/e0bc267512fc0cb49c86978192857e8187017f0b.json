{"sha": "e0bc267512fc0cb49c86978192857e8187017f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYmMyNjc1MTJmYzBjYjQ5Yzg2OTc4MTkyODU3ZTgxODcwMTdmMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T13:02:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T13:02:02Z"}, "message": "Auto merge of #76110 - FedericoPonzi:convert-openoptions-cint, r=JoshTriplett\n\nFunction to convert OpenOptions to c_int\n\nFixes: #74943\nThe creation_mode and access_mode function were already available in the OpenOptions struct, but currently private. I've added a new free functions to unix/fs.rs which takes the OpenOptions, and returns the c_int to be used as parameter for the `open` call.", "tree": {"sha": "f81490c021e11fb3dc7ecf55104fa9f6519d8ef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f81490c021e11fb3dc7ecf55104fa9f6519d8ef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0bc267512fc0cb49c86978192857e8187017f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bc267512fc0cb49c86978192857e8187017f0b", "html_url": "https://github.com/rust-lang/rust/commit/e0bc267512fc0cb49c86978192857e8187017f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0bc267512fc0cb49c86978192857e8187017f0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc5e4d4d5715cfe111def11bbd1d8afae2ea80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc5e4d4d5715cfe111def11bbd1d8afae2ea80e", "html_url": "https://github.com/rust-lang/rust/commit/cbc5e4d4d5715cfe111def11bbd1d8afae2ea80e"}, {"sha": "2f5192280f57ab859a2414ff2e9b6f6398d3feb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5192280f57ab859a2414ff2e9b6f6398d3feb7", "html_url": "https://github.com/rust-lang/rust/commit/2f5192280f57ab859a2414ff2e9b6f6398d3feb7"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "83cbe25d41bde5317bdcb0ce3c38f22c4ffbd9ee", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e0bc267512fc0cb49c86978192857e8187017f0b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bc267512fc0cb49c86978192857e8187017f0b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=e0bc267512fc0cb49c86978192857e8187017f0b", "patch": "@@ -348,6 +348,31 @@ pub trait OpenOptionsExt {\n     /// ```\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: i32) -> &mut Self;\n+\n+    /// Get the flags as [`libc::c_int`].\n+    ///\n+    /// This method allows the reuse of the OpenOptions as flags argument for [`libc::open`].\n+    ///\n+    /// [`libc::c_int`]: https://docs.rs/libc/*/libc/type.c_int.html\n+    /// [`libc::open`]: https://docs.rs/libc/*/libc/fn.open.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// # #![feature(rustc_private)]\n+    /// #![feature(open_options_ext_as_flags)]\n+    /// extern crate libc;\n+    /// use std::ffi::CString;\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// let mut options = OpenOptions::new();\n+    /// options.write(true).read(true);\n+    /// let file_name = CString::new(\"foo.txt\").unwrap();\n+    /// let file = unsafe { libc::open(file_name.as_c_str().as_ptr(), options.as_flags().unwrap()) };\n+    /// ```\n+    #[unstable(feature = \"open_options_ext_as_flags\", issue = \"76801\")]\n+    fn as_flags(&self) -> io::Result<libc::c_int>;\n }\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n@@ -361,6 +386,10 @@ impl OpenOptionsExt for OpenOptions {\n         self.as_inner_mut().custom_flags(flags);\n         self\n     }\n+\n+    fn as_flags(&self) -> io::Result<libc::c_int> {\n+        self.as_inner().as_flags()\n+    }\n }\n \n /// Unix-specific extensions to [`fs::Metadata`]."}, {"sha": "09954f0c43c56ca421783643256d28da91b847c7", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0bc267512fc0cb49c86978192857e8187017f0b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bc267512fc0cb49c86978192857e8187017f0b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=e0bc267512fc0cb49c86978192857e8187017f0b", "patch": "@@ -656,6 +656,12 @@ impl OpenOptions {\n         self.mode = mode as mode_t;\n     }\n \n+    pub fn as_flags(&self) -> io::Result<c_int> {\n+        let access_mode = self.get_access_mode()?;\n+        let creation_mode = self.get_creation_mode()?;\n+        Ok(creation_mode | access_mode | self.custom_flags)\n+    }\n+\n     fn get_access_mode(&self) -> io::Result<c_int> {\n         match (self.read, self.write, self.append) {\n             (true, false, false) => Ok(libc::O_RDONLY),"}]}