{"sha": "7af865b33348730aacc02afeb3233cf8d90bb1f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjg2NWIzMzM0ODczMGFhY2MwMmFmZWIzMjMzY2Y4ZDkwYmIxZjI=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2015-05-21T18:55:51Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2015-07-21T20:11:52Z"}, "message": "Static linking", "tree": {"sha": "441d9f4d15376ad0adead6e49408c3fb3ab056d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/441d9f4d15376ad0adead6e49408c3fb3ab056d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af865b33348730aacc02afeb3233cf8d90bb1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af865b33348730aacc02afeb3233cf8d90bb1f2", "html_url": "https://github.com/rust-lang/rust/commit/7af865b33348730aacc02afeb3233cf8d90bb1f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af865b33348730aacc02afeb3233cf8d90bb1f2/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c1884c26cf41a338e903ec60f58bdad49af886", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c1884c26cf41a338e903ec60f58bdad49af886", "html_url": "https://github.com/rust-lang/rust/commit/e5c1884c26cf41a338e903ec60f58bdad49af886"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "ea5238c38146605162e89c7fa3540992c0f22924", "filename": "src/doc/trpl/advanced-linking.md", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7af865b33348730aacc02afeb3233cf8d90bb1f2/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/7af865b33348730aacc02afeb3233cf8d90bb1f2/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fadvanced-linking.md?ref=7af865b33348730aacc02afeb3233cf8d90bb1f2", "patch": "@@ -30,3 +30,130 @@ meaning.\n It is highly recommended to *not* use this attribute, and rather use the more\n formal `#[link(...)]` attribute on `extern` blocks instead.\n \n+# Static linking\n+\n+Static linking refers to the process of creating output that contain all\n+required libraries and so don't need libraries installed on every system where\n+you want to use your compiled project. Pure-Rust dependencies are statically\n+linked by default so you can use created binaries and libraries without\n+installing the Rust everywhere. By contrast, native libraries\n+(e.g. `libc` and `libm`) usually dynamically linked, but it is possible to\n+change this and statically link them as well.\n+\n+Linking is a very platform dependent topic - on some platforms, static linking\n+may not be possible at all! This section assumes some basic familiarity with\n+linking on your platform on choice.\n+\n+## Linux\n+\n+By default, all Rust programs on Linux will link to the system `libc` along with\n+a number of other libraries. Let's look at an example on a 64-bit linux machine\n+with GCC and `glibc` (by far the most common `libc` on Linux):\n+\n+``` text\n+$ cat example.rs\n+fn main() {}\n+$ rustc example.rs\n+$ ldd example\n+        linux-vdso.so.1 =>  (0x00007ffd565fd000)\n+        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa81889c000)\n+        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa81867e000)\n+        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa818475000)\n+        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fa81825f000)\n+        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa817e9a000)\n+        /lib64/ld-linux-x86-64.so.2 (0x00007fa818cf9000)\n+        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa817b93000)\n+```\n+\n+Dynamic linking on Linux can be undesirable if you wish to use new library\n+features on old systems or target systems which do not have the required\n+dependencies for your program to run.\n+\n+The first step in using static linking is examining the Rust linking arguments\n+with an option to rustc. Newlines have been added for readability:\n+\n+``` text\n+$ rustc example.rs -Z print-link-args\n+\"cc\"\n+    \"-Wl,--as-needed\"\n+    \"-m64\"\n+    [...]\n+    \"-o\" \"example\"\n+    \"example.o\"\n+    \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\"\n+    \"-Wl,--gc-sections\"\n+    \"-pie\"\n+    \"-nodefaultlibs\"\n+    [...]\n+    \"-Wl,--whole-archive\" \"-Wl,-Bstatic\"\n+    \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\"\n+    \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_s\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\n+```\n+\n+Arguments with a `-L` before them set up the linker search path and arguments\n+ending with `.rlib` are linking Rust crates statically into your application.\n+Neither of these are relevent for static linking so have been ommitted.\n+\n+The first step in being able to statically link is to obtain an object file.\n+This can be achieved with `rustc --emit obj example.rs`, and creates a file\n+called `example.o`, which you can see being passed in the command line above -\n+rustc automatically deletes it when finished with it by default. As you now have\n+the object file, you should be able to run the link command obtained with\n+`print-link-args` to create perform the linking stage yourself.\n+\n+In order to statically link, there are a number of changes you must make. Below\n+is the command required to perform a static link; we will go through them each\n+in turn.\n+\n+``` text\n+$ rustc example.rs -Z print-link-args\n+\"cc\"\n+    \"-static\"\n+    \"-m64\"\n+    [...]\n+    \"-o\" \"example\"\n+    \"example.o\"\n+    \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\"\n+    \"-Wl,--gc-sections\"\n+    \"-nodefaultlibs\"\n+    [...]\n+    \"-Wl,--whole-archive\"\n+    \"-Wl,--no-whole-archive\"\n+    \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_eh\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\n+```\n+\n+ - `-static` was added - this is the signal to the compiler to use a static\n+   glibc, among other things\n+ - `-Wl,--as-needed` was removed - this can be left in, but is unnecessary\n+   as it only applies to dynamic librares\n+ - `-pie` was removed - this is not compatible with static binaries\n+ - both `-Wl,-B*` options were removed - everything will be linked statically,\n+   so informing the linker of how certain libraries should be linked is not\n+   appropriate\n+ - `-lgcc_s` was changed to `-lgcc_eh` - `gcc_s` is the GCC support library,\n+   which Rust uses for unwinding support. This is only available as a dynamic\n+   library, so we must specify the static version of the library providing\n+   unwinding support.\n+\n+By running this command, you will likely see some warnings like\n+\n+``` text\n+warning: Using 'getpwuid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking\n+```\n+\n+These should be considered carefully! They indicate calls in glibc which\n+*cannot* be statically linked without significant extra effort. An application\n+using these calls will find it is not as portable as 'static binary' would imply.\n+Rust supports targeting musl as an alternative libc to be able to fully\n+statically link these calls.\n+\n+As we are confident that our code does not use these calls, we can now see the\n+fruits of our labour:\n+\n+```\n+$ ldd example\n+        not a dynamic executable\n+```\n+\n+This binary can be copied to virtually any 64-bit Linux machine and work\n+without requiring external libraries."}]}