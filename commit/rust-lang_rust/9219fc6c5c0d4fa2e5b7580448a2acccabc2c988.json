{"sha": "9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTlmYzZjNWMwZDRmYTJlNWI3NTgwNDQ4YTJhY2NjYWJjMmM5ODg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-15T07:21:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-15T08:10:51Z"}, "message": "Reintroduce `extern crate` for non-Cargo dependencies.", "tree": {"sha": "dec862bb665c4987590cf53d93550b4ffdd6c247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec862bb665c4987590cf53d93550b4ffdd6c247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "html_url": "https://github.com/rust-lang/rust/commit/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aaef72fa0ba875fa2592990d1a50ea8b6e688a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aaef72fa0ba875fa2592990d1a50ea8b6e688a0", "html_url": "https://github.com/rust-lang/rust/commit/4aaef72fa0ba875fa2592990d1a50ea8b6e688a0"}], "stats": {"total": 1418, "additions": 723, "deletions": 695}, "files": [{"sha": "4d921daea8a4d9bfa0a3760e7ee374ab7936033e", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::span_lint;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use std::f64::consts as f64;\n-use syntax::ast::{FloatTy, Lit, LitKind};\n-use syntax::symbol;\n+use crate::syntax::ast::{FloatTy, Lit, LitKind};\n+use crate::syntax::symbol;\n \n /// **What it does:** Checks for floating point literals that approximate\n /// constants which are defined in"}, {"sha": "bdf8d237c704071cc8ca42a58387d07917541e19", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::span_lint;\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Span;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n \n /// **What it does:** Checks for plain integer arithmetic.\n ///"}, {"sha": "d50b72b19ac5e537a629cc88e8a9280f8ecd4ed8", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n use crate::utils::{higher, sugg};\n-use rustc::hir;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast;\n+use crate::syntax::ast;\n \n /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n /// patterns.\n@@ -220,7 +220,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n }\n \n fn is_commutative(op: hir::BinOpKind) -> bool {\n-    use rustc::hir::BinOpKind::*;\n+    use crate::rustc::hir::BinOpKind::*;\n     match op {\n         Add | Mul | And | Or | BitXor | BitAnd | BitOr | Eq | Ne => true,\n         Sub | Div | Rem | Shl | Shr | Lt | Le | Ge | Gt => false,"}, {"sha": "3a8514818f6fd05a4c8fc42be21362a8e1a0fe16", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -5,14 +5,14 @@ use crate::utils::{\n     in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then,\n     without_block_comments,\n };\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, TyCtxt};\n+use crate::rustc::ty::{self, TyCtxt};\n use semver::Version;\n-use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n-use syntax::source_map::Span;\n+use crate::syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n+use crate::syntax::source_map::Span;\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics."}, {"sha": "93c6bee03bfedf44da49b65a3ab0e75931d0c4ec", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast::LitKind;\n-use syntax::source_map::Span;\n+use crate::syntax::ast::LitKind;\n+use crate::syntax::source_map::Span;\n use crate::utils::{span_lint, span_lint_and_then};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};"}, {"sha": "9d6005cd6121b3b29b9a6f26b6959a2d126fef0d", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n use crate::utils::span_lint;\n \n /// **What it does:** Checks for usage of blacklisted names for variables, such"}, {"sha": "c1b4b4575ab277e44236ddbf11d5c616d1596113", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n use matches::matches;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use crate::utils::*;\n \n /// **What it does:** Checks for `if` conditions that use blocks to contain an"}, {"sha": "b2639330071c3c14b0cb999762772f43e91564ca", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::hir::intravisit::*;\n-use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n-use syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n-use rustc_data_structures::thin_vec::ThinVec;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::*;\n+use crate::syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n+use crate::syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n+use crate::rustc_data_structures::thin_vec::ThinVec;\n use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq, get_trait_def_id, implements_trait};\n \n /// **What it does:** Checks for boolean expressions that can be written more"}, {"sha": "7ec556b5d78c4d5963cf12e347e8b5a679baf1e8", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use syntax::ast::{Name, UintTy};\n+use crate::rustc::ty;\n+use crate::syntax::ast::{Name, UintTy};\n use crate::utils::{contains_name, get_pat_name, match_type, paths, single_segment_path, snippet, span_lint_and_sugg,\n             walk_ptrs_ty};\n "}, {"sha": "a24436991e55b7e6cb8733d9e91a4fcbbd36dbb2", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -12,10 +12,10 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast;\n+use crate::syntax::ast;\n \n use crate::utils::{in_macro, snippet_block, span_lint_and_sugg, span_lint_and_then};\n use crate::utils::sugg::Sugg;"}, {"sha": "6daddb5fe1379ae76ca97b17681613cca96bc98d", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use syntax::ast::*;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime."}, {"sha": "43796004d0e7fcade118c632ad5535e74e4a60bb", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,18 +1,18 @@\n #![allow(clippy::float_cmp)]\n \n-use rustc::lint::LateContext;\n-use rustc::{span_bug, bug};\n-use rustc::hir::def::Def;\n-use rustc::hir::*;\n-use rustc::ty::{self, Ty, TyCtxt, Instance};\n-use rustc::ty::subst::{Subst, Substs};\n+use crate::rustc::lint::LateContext;\n+use crate::rustc::{span_bug, bug};\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::*;\n+use crate::rustc::ty::{self, Ty, TyCtxt, Instance};\n+use crate::rustc::ty::subst::{Subst, Substs};\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::rc::Rc;\n-use syntax::ast::{FloatTy, LitKind};\n-use syntax::ptr::P;\n+use crate::syntax::ast::{FloatTy, LitKind};\n+use crate::syntax::ptr::P;\n use crate::utils::{sext, unsext, clip};\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n@@ -139,7 +139,7 @@ impl Constant {\n \n /// parse a `LitKind` to a `Constant`\n pub fn lit_to_constant<'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n-    use syntax::ast::*;\n+    use crate::syntax::ast::*;\n \n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n@@ -279,7 +279,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     instance,\n                     promoted: None,\n                 };\n-                use rustc::mir::interpret::GlobalId;\n+                use crate::rustc::mir::interpret::GlobalId;\n                 let result = self.tcx.const_eval(self.param_env.and(gid)).ok()?;\n                 let ret = miri_to_const(self.tcx, result);\n                 if ret.is_some() {\n@@ -409,7 +409,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n }\n \n pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'tcx>) -> Option<Constant> {\n-    use rustc::mir::interpret::{Scalar, ScalarMaybeUndef, ConstValue};\n+    use crate::rustc::mir::interpret::{Scalar, ScalarMaybeUndef, ConstValue};\n     match result.val {\n         ConstValue::Scalar(Scalar::Bits{ bits: b, ..}) => match result.ty.sty {\n             ty::Bool => Some(Constant::Bool(b == 1)),"}, {"sha": "76c8360be62d9273cf41ff7729b8636d2773ed83", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,12 +1,12 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty::Ty;\n-use rustc::hir::*;\n-use rustc_data_structures::fx::FxHashMap;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty::Ty;\n+use crate::rustc::hir::*;\n+use crate::rustc_data_structures::fx::FxHashMap;\n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n-use syntax::symbol::LocalInternedString;\n-use rustc_data_structures::small_vec::OneVector;\n+use crate::syntax::symbol::LocalInternedString;\n+use crate::rustc_data_structures::small_vec::OneVector;\n use crate::utils::{SpanlessEq, SpanlessHash};\n use crate::utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n "}, {"sha": "17f32c7bb457e66a37d618b3b92496e575b43986", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n-use rustc::hir::{Item, ItemKind};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::{Item, ItemKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for types that implement `Copy` as well as\n /// `Iterator`."}, {"sha": "db85a3f3fda9c696e3f99351b1553dc92e8c109e", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,13 +1,13 @@\n //! calculate cyclomatic complexity and warn about overly complex functions\n \n-use rustc::cfg::CFG;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::ty;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use syntax::ast::{Attribute, NodeId};\n-use syntax::source_map::Span;\n+use crate::rustc::cfg::CFG;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::syntax::ast::{Attribute, NodeId};\n+use crate::syntax::source_map::Span;\n \n use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n "}, {"sha": "5f2b1a29dc7755c409613a1a59b3b37c4d405e88", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::TyKind;\n+use crate::rustc::ty::TyKind;\n \n use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n "}, {"sha": "21365f60586c6a20407a8813ab1f4caa3b75c55f", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n-use rustc::hir::*;\n-use syntax::source_map::Span;\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::hir::*;\n+use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n "}, {"sha": "19f2916cc5ef116b3bc666fe54da86bd7f9dc721", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n use itertools::Itertools;\n use pulldown_cmark;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast;\n-use syntax::source_map::{BytePos, Span};\n-use syntax_pos::Pos;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast;\n+use crate::syntax::source_map::{BytePos, Span};\n+use crate::syntax_pos::Pos;\n use crate::utils::span_lint;\n use url::Url;\n "}, {"sha": "c692bffaff60e1fefe954c62e1f9f199a7c8727d", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n //! Lint on unnecessary double comparisons. Some examples:\n \n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n \n use crate::utils::{snippet, span_lint_and_sugg, SpanlessEq};\n "}, {"sha": "90aaea90d965adc944b4d8c1b035c5a369390677", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use syntax::ast::*;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for unnecessary double parentheses.\n ///"}, {"sha": "1dbca5ed9ba20de3c49f60c2da211a82d09dbc45", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::rustc::hir::*;\n use crate::utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference"}, {"sha": "8ac34d9daa30f6f60a9e94cdade9241f5f4cf3e3", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::source_map::Spanned;\n+use crate::syntax::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;"}, {"sha": "21a77e2263f7d0acdfce6dc1e1e5914803250af8", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n //! lint on if expressions with an else if, but without a final else branch\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n \n use crate::utils::span_lint_and_sugg;\n "}, {"sha": "48c96a0ffad7faca9d8453bfd655899e52213d99", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n //! lint when there is an enum with no variants\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n use crate::utils::span_lint_and_then;\n \n /// **What it does:** Checks for `enum`s with no variants."}, {"sha": "167f5633b2e6acd0b7bfeeec957e42d64f14e62b", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::source_map::Span;\n+use crate::syntax::source_map::Span;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n "}, {"sha": "b49322dcaf956424c8a7cea19f77b839f904d8c2", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,16 +1,16 @@\n //! lint on C-like enums that are `repr(isize/usize)` and have values that\n //! don't fit into an `i32`\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::ty;\n-use rustc::ty::subst::Substs;\n-use syntax::ast::{IntTy, UintTy};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::rustc::ty::subst::Substs;\n+use crate::syntax::ast::{IntTy, UintTy};\n use crate::utils::span_lint;\n use crate::consts::{Constant, miri_to_const};\n-use rustc::ty::util::IntTypeExt;\n-use rustc::mir::interpret::GlobalId;\n+use crate::rustc::ty::util::IntTypeExt;\n+use crate::rustc::mir::interpret::GlobalId;\n \n /// **What it does:** Checks for C-like enumerations that are\n /// `repr(isize/usize)` and have values that don't fit into an `i32`."}, {"sha": "d594406decf02cefc19b1109fe2a66be195d27c7", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n //! lint on `use`ing all variants of an enum\n \n-use rustc::hir::*;\n-use rustc::hir::def::Def;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::NodeId;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::NodeId;\n+use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n \n /// **What it does:** Checks for `use Enum::*`."}, {"sha": "c68439d161b9dc81724f81ec8c952c0d207773d5", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, Lint};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n-use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, Lint};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n+use crate::syntax::source_map::Span;\n+use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{span_help_and_lint, span_lint};\n use crate::utils::{camel_case_from, camel_case_until, in_macro};\n "}, {"sha": "d182faa1e5c967e209918bf71e723c729fe9e854", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for equal operands to comparison, logical and"}, {"sha": "7e313daffa418f436dbeb81c37ed03d63b2c28e5", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n use crate::consts::{constant_simple, Constant};\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for erasing operations, e.g. `x * 0`."}, {"sha": "8af232420b1898115542aadf34e0f8e209a712ab", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,14 +1,14 @@\n-use rustc::hir::*;\n-use rustc::hir::intravisit as visit;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::{cmt_, Categorization};\n-use rustc::ty::{self, Ty};\n-use rustc::ty::layout::LayoutOf;\n-use rustc::util::nodemap::NodeSet;\n-use syntax::ast::NodeId;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit as visit;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::middle::expr_use_visitor::*;\n+use crate::rustc::middle::mem_categorization::{cmt_, Categorization};\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::ty::layout::LayoutOf;\n+use crate::rustc::util::nodemap::NodeSet;\n+use crate::syntax::ast::NodeId;\n+use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n \n pub struct Pass {"}, {"sha": "e331f6adf3ad2a629feaa80e38c820ac17f483fe", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::rustc::hir::*;\n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n \n #[allow(missing_copy_implementations)]"}, {"sha": "068d6fb135fd7298a056ed07e7d097b468a3f08b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc::hir::*;\n-use rustc::ty;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast;\n+use crate::syntax::ast;\n use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n \n /// **What it does:** Checks for a read and a write to the same variable where"}, {"sha": "6df88cdc6c3c1550c14844bcb55229a0270ea7df", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,13 +1,13 @@\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::TyKind;\n+use crate::rustc::ty::TyKind;\n use std::f32;\n use std::f64;\n use std::fmt;\n-use syntax::ast::*;\n-use syntax_pos::symbol::Symbol;\n+use crate::syntax::ast::*;\n+use crate::syntax_pos::symbol::Symbol;\n use crate::utils::span_lint_and_sugg;\n \n /// **What it does:** Checks for float literals with a precision greater"}, {"sha": "888dca97928bd88e8369b490e61de503e1447e2c", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n use crate::utils::opt_def_id;"}, {"sha": "146e23665523ee584d237739b771cb849ca32121", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir;\n-use rustc::ty;\n-use syntax_pos::Span;\n+use crate::rustc::hir;\n+use crate::rustc::ty;\n+use crate::syntax_pos::Span;\n use crate::utils::{match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty, is_expn_of, opt_def_id};\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n \n@@ -52,8 +52,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n }\n \n fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &hir::HirVec<hir::ImplItemRef>) {\n-    use rustc::hir::*;\n-    use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+    use crate::rustc::hir::*;\n+    use crate::rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n \n     struct FindPanicUnwrap<'a, 'tcx: 'a> {\n         tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "fbc3c750cde4dad563d1f2bd0ed00c2315e8c738", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use syntax::ast::LitKind;\n-use syntax_pos::Span;\n+use crate::rustc::ty;\n+use crate::syntax::ast::LitKind;\n+use crate::syntax_pos::Span;\n use crate::utils::paths;\n use crate::utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n "}, {"sha": "92950706d88d4d7e8a200eb866335d258ed07b94", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast;\n use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n-use syntax::ptr::P;\n+use crate::syntax::ptr::P;\n \n /// **What it does:** Checks for use of the non-existent `=*`, `=!` and `=-`\n /// operators."}, {"sha": "d73c0710ba11d2ce27c05fbdb5886a2675617430", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,14 +1,14 @@\n use matches::matches;\n-use rustc::hir::intravisit;\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use rustc::hir::def::Def;\n-use rustc_data_structures::fx::FxHashSet;\n-use syntax::ast;\n-use rustc_target::spec::abi::Abi;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::intravisit;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc_data_structures::fx::FxHashSet;\n+use crate::syntax::ast;\n+use crate::rustc_target::spec::abi::Abi;\n+use crate::syntax::source_map::Span;\n use crate::utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n \n /// **What it does:** Checks for functions with too many parameters."}, {"sha": "24b0d57d098748bad0b6bb8539ed8073dc14e2e1", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use syntax::ast::NodeId;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::NodeId;\n use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n use crate::utils::{opt_def_id, paths, resolve_node};\n "}, {"sha": "836e4fafba416d874849f7b29515744bfbbbb6fa", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n use crate::consts::{constant_simple, Constant};\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, snippet, span_lint, unsext, clip};\n-use rustc::ty;\n+use crate::rustc::ty;\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`.\n ///"}, {"sha": "c996c91b48b48a8cb209aa71aab80e38bb5456d1", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n \n /// **What it does:** Lint for redundant pattern matching over `Result` or"}, {"sha": "954f8543a877fecfeeaf9bf0eaf7b31ffa688160", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n //! lint on if branches that could be swapped so no `!` operation is necessary\n //! on the condition\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n \n use crate::utils::span_help_and_lint;\n "}, {"sha": "1010b53e09a28651d8fb973bc65d73fcc127f264", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -4,11 +4,11 @@ use crate::consts::{constant, Constant};\n use crate::utils;\n use crate::utils::higher;\n use crate::utils::higher::Range;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use syntax::ast::RangeLimits;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::syntax::ast::RangeLimits;\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index."}, {"sha": "dabc167f37d2010a7e465a832b63b2c1437a1441", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n use super::utils::{get_arg_name, match_var, remove_blocks, snippet, span_lint_and_sugg};\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for matches being used to destructure a single-variant enum"}, {"sha": "a15ec8c14bd17e8bc51a3634bff6dd11038ada15", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span_lint};\n \n /// **What it does:** Checks for iteration that is guaranteed to be infinite."}, {"sha": "36336b863988fdb39bbd9cb4c2f8a999908c5062", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n //! lint on inherent implementations\n \n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc_data_structures::fx::FxHashMap;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_data_structures::fx::FxHashMap;\n use std::default::Default;\n-use syntax_pos::Span;\n+use crate::syntax_pos::Span;\n use crate::utils::span_lint_and_then;\n \n /// **What it does:** Checks for multiple inherent implementations of a struct"}, {"sha": "29492cf8c436ae2b2c01e7ce955a57c921d3fb0e", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use syntax::ast::{Attribute, Name};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::{Attribute, Name};\n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n "}, {"sha": "023a88e1ffaeb2a6496bf295b1103679482193ea", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n "}, {"sha": "55de899837826a4bb8e86241d7909593c1ad67cc", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::rustc::hir::*;\n use crate::utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n \n /// **What it does:** Checks for creation of references to zeroed or uninitialized memory."}, {"sha": "a12c9c400ba0672c653b0e84adfc974e8b25815d", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n //! lint when items are used after statements\n \n use matches::matches;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for items declared after some statement in a block."}, {"sha": "87f9804c1ae967f0712c163709c7a800adeebaac", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n use crate::utils::{snippet_opt, span_lint_and_then};\n-use rustc::ty::layout::LayoutOf;\n+use crate::rustc::ty::layout::LayoutOf;\n \n /// **What it does:** Checks for large size differences between variants on\n /// `enum`s."}, {"sha": "b126b8dbb939d0641554cdbba561a08231468042", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n-use rustc::hir::def_id::DefId;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use rustc_data_structures::fx::FxHashSet;\n-use syntax::ast::{Lit, LitKind, Name};\n-use syntax::source_map::{Span, Spanned};\n+use crate::rustc::hir::def_id::DefId;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::rustc_data_structures::fx::FxHashSet;\n+use crate::syntax::ast::{Lit, LitKind, Name};\n+use crate::syntax::source_map::{Span, Spanned};\n use crate::utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n /// **What it does:** Checks for getting the length of something via `.len()`\n@@ -127,7 +127,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n     // fill the set with current and super traits\n     fn fill_trait_set(traitt: DefId, set: &mut FxHashSet<DefId>, cx: &LateContext<'_, '_>) {\n         if set.insert(traitt) {\n-            for supertrait in ::rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n+            for supertrait in crate::rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n                 fill_trait_set(supertrait, set, cx);\n             }\n         }"}, {"sha": "10dc3cae8af93fe48354fff9936a4e97e7c4a720", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir;\n-use rustc::hir::BindingAnnotation;\n-use rustc::hir::def::Def;\n-use syntax::ast;\n+use crate::rustc::hir;\n+use crate::rustc::hir::BindingAnnotation;\n+use crate::rustc::hir::def::Def;\n+use crate::syntax::ast;\n use crate::utils::{snippet, span_lint_and_then};\n \n /// **What it does:** Checks for variable declarations immediately followed by a"}, {"sha": "3937e5cb9e9e2fc6826149e54747fb5db293149f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -12,10 +12,28 @@\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n #![feature(crate_visibility_modifier)]\n \n-use toml;\n-use rustc_plugin;\n-use rustc;\n+// FIXME: switch to something more ergonomic here, once available.\n+// (currently there is no way to opt into sysroot crates w/o `extern crate`)\n+#[allow(unused_extern_crates)]\n+extern crate fmt_macros;\n+#[allow(unused_extern_crates)]\n+extern crate rustc;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_data_structures;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_errors;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_plugin;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_target;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_typeck;\n+#[allow(unused_extern_crates)]\n+extern crate syntax;\n+#[allow(unused_extern_crates)]\n+extern crate syntax_pos;\n \n+use toml;\n \n macro_rules! declare_clippy_lint {\n     { pub $name:tt, style, $description:tt } => {\n@@ -175,7 +193,7 @@ pub mod zero_div_zero;\n pub use crate::utils::conf::Conf;\n \n mod reexport {\n-    crate use syntax::ast::{Name, NodeId};\n+    crate use crate::syntax::ast::{Name, NodeId};\n }\n \n pub fn register_pre_expansion_lints(session: &rustc::session::Session, store: &mut rustc::lint::LintStore, conf: &Conf) {"}, {"sha": "ee8517b76d7f56c951d71235ec764444a1952dc0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,14 +1,14 @@\n use crate::reexport::*;\n use matches::matches;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::def::Def;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::*;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::source_map::Span;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::*;\n+use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use crate::syntax::source_map::Span;\n use crate::utils::{last_path_segment, span_lint};\n-use syntax::symbol::keywords;\n+use crate::syntax::symbol::keywords;\n \n /// **What it does:** Checks for lifetime annotations which can be removed by\n /// relying on lifetime elision."}, {"sha": "188ca15742355acf8b4687043bf1440b7207c72c", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast::*;\n-use syntax_pos;\n+use crate::syntax::ast::*;\n+use crate::syntax_pos;\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n \n /// **What it does:** Warns if a long integral or floating-point constant does"}, {"sha": "7472700ddbc2b1728c4c72412b5ff212c205f557", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,25 +1,25 @@\n use itertools::Itertools;\n use crate::reexport::*;\n-use rustc::hir::*;\n-use rustc::hir::def::Def;\n-use rustc::hir::def_id;\n-use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::def_id;\n+use crate::rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::middle::region;\n-// use rustc::middle::region::CodeExtent;\n-use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::Categorization;\n-use rustc::middle::mem_categorization::cmt_;\n-use rustc::ty::{self, Ty};\n-use rustc::ty::subst::Subst;\n-use rustc_errors::Applicability;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use crate::rustc::middle::region;\n+// use crate::rustc::middle::region::CodeExtent;\n+use crate::rustc::middle::expr_use_visitor::*;\n+use crate::rustc::middle::mem_categorization::Categorization;\n+use crate::rustc::middle::mem_categorization::cmt_;\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::ty::subst::Subst;\n+use crate::rustc_errors::Applicability;\n+use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::iter::{once, Iterator};\n-use syntax::ast;\n-use syntax::source_map::Span;\n-use syntax_pos::BytePos;\n+use crate::syntax::ast;\n+use crate::syntax::source_map::Span;\n+use crate::syntax_pos::BytePos;\n use crate::utils::{sugg, sext};\n use crate::utils::usage::mutated_variables;\n use crate::consts::{constant, Constant};"}, {"sha": "239602c6db5ef6d54c6eef26967e649daef9313f", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n-use rustc::ty;\n-use syntax::ast;\n+use crate::rustc::hir::*;\n+use crate::rustc::ty;\n+use crate::syntax::ast;\n use crate::utils::{get_arg_ident, is_adjusted, iter_input_pats, match_qpath, match_trait_method, match_type,\n             paths, remove_blocks, snippet, span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq};\n "}, {"sha": "096ef46555dc5288c4aae31d59ac8ec07082c57c", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use rustc_errors::Applicability;\n-use syntax::source_map::Span;\n+use crate::rustc::ty;\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use crate::utils::paths;\n "}, {"sha": "a4c2681e35983fa701bde559e6b9f3983e1c5a21", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,12 +1,12 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n+use crate::rustc::ty::{self, Ty};\n use std::cmp::Ordering;\n use std::collections::Bound;\n-use syntax::ast::LitKind;\n-use syntax::source_map::Span;\n+use crate::syntax::ast::LitKind;\n+use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{expr_block, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n             remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};"}, {"sha": "7a07ecbf02c90083c6c1a2544a27d77382c62e52", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::{Expr, ExprKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::{Expr, ExprKind};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n \n /// **What it does:** Checks for usage of `std::mem::forget(t)` where `t` is"}, {"sha": "1e03503d3138c0deff559e7c7991d7ff720341eb", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,15 +1,15 @@\n use matches::matches;\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, Lint, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, Lint, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n-use rustc::hir::def::Def;\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::hir::def::Def;\n use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n-use syntax::ast;\n-use syntax::source_map::{Span, BytePos};\n+use crate::syntax::ast;\n+use crate::syntax::source_map::{Span, BytePos};\n use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self,\n             is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n             match_type, method_chain_args, match_var, return_ty, remove_blocks, same_tys, single_segment_path, snippet,"}, {"sha": "293d301ebb481cb4bb8721eb1dd613c2bd78700e", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n use crate::consts::{constant_simple, Constant};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use std::cmp::Ordering;\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are"}, {"sha": "f52d3ccf5a4cc41830f979cdfe8a27fd4fa5b8a7", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,17 +1,17 @@\n use crate::reexport::*;\n use matches::matches;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::FnKind;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::FnKind;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use syntax::source_map::{ExpnFormat, Span};\n+use crate::rustc::ty;\n+use crate::syntax::source_map::{ExpnFormat, Span};\n use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal,\n             iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint,\n             span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n-use syntax::ast::{LitKind, CRATE_NODE_ID};\n+use crate::syntax::ast::{LitKind, CRATE_NODE_ID};\n use crate::consts::{constant, Constant};\n \n /// **What it does:** Checks for function arguments and let bindings denoted as"}, {"sha": "5a509802b615cfd0007fc40a1cac5a97be4f1e3f", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, LintContext, in_external_macro};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc_data_structures::fx::FxHashMap;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, LintContext, in_external_macro};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_data_structures::fx::FxHashMap;\n use if_chain::if_chain;\n use std::char;\n-use syntax::ast::*;\n-use syntax::source_map::Span;\n-use syntax::visit::FnKind;\n+use crate::syntax::ast::*;\n+use crate::syntax::source_map::Span;\n+use crate::syntax::visit::FnKind;\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for structure field patterns bound to wildcards."}, {"sha": "685f701ef8be177ec5829d0d0d0231e96afaa48d", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -18,13 +18,13 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::source_map::Span;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::syntax::ast;\n+use crate::syntax::attr;\n+use crate::syntax::source_map::Span;\n use crate::utils::{span_lint, in_macro};\n \n /// **What it does:** Warns if there is missing doc for any documentable item"}, {"sha": "dea3a81e50d35bee8aecdf91168e84cc71b4d0a3", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -9,11 +9,11 @@\n //   except according to those terms.\n //\n \n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast;\n-use syntax::source_map::Span;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast;\n+use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n \n /// **What it does:** it lints if an exported function, method, trait method with default impl,\n@@ -85,7 +85,7 @@ fn check_missing_inline_attrs(cx: &LateContext<'_, '_>,\n }\n \n fn is_executable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>) -> bool {\n-    use rustc::session::config::CrateType;\n+    use crate::rustc::session::config::CrateType;\n \n     cx.tcx.sess.crate_types.get().iter().any(|t: &CrateType| {\n         match t {\n@@ -155,7 +155,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n-        use rustc::ty::{TraitContainer, ImplContainer};\n+        use crate::rustc::ty::{TraitContainer, ImplContainer};\n         if is_executable(cx) {\n             return;\n         }"}, {"sha": "2f6b08c5151af01aaef4ef1478163c352fa03f94", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n //! lint on multiple versions of a crate being used\n \n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n use crate::utils::span_lint;\n \n use cargo_metadata;"}, {"sha": "b3607d623b335fdca0be8ff885c0e80b4423ba84", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir;\n-use rustc::hir::intravisit;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n+use crate::rustc::hir;\n+use crate::rustc::hir::intravisit;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n use crate::utils::{higher, span_lint};\n \n /// **What it does:** Checks for instances of `mut mut` references.\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n-        use rustc::hir::intravisit::Visitor;\n+        use crate::rustc::hir::intravisit::Visitor;\n \n         MutVisitor { cx }.visit_ty(ty);\n     }"}, {"sha": "1bf06b9e20af6d9da736bb9070460b8376906fea", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty::{self, Ty};\n-use rustc::ty::subst::Subst;\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::ty::subst::Subst;\n+use crate::rustc::hir::*;\n use crate::utils::span_lint;\n \n /// **What it does:** Detects giving a mutable reference to a function that only"}, {"sha": "f6caddab48517957b682d8ea8499f807417560f6", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,11 +2,11 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty::{self, Ty};\n-use rustc::hir::Expr;\n-use syntax::ast;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::hir::Expr;\n+use crate::syntax::ast;\n use crate::utils::{match_type, paths, span_lint};\n \n /// **What it does:** Checks for usages of `Mutex<X>` where an atomic will do."}, {"sha": "74b6647551a396dad258fb144a14fb72aac3e76f", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,11 +2,11 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use syntax::ast::LitKind;\n-use syntax::source_map::Spanned;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::LitKind;\n+use crate::syntax::source_map::Spanned;\n use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n use crate::utils::sugg::Sugg;\n "}, {"sha": "ec53f76095f35b3c686b72d3cfe711fb9460de44", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,12 +2,12 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, Expr, ExprKind, MutImmutable, Pat, PatKind};\n-use rustc::ty;\n-use rustc::ty::adjustment::{Adjust, Adjustment};\n+use crate::rustc::hir::{BindingAnnotation, Expr, ExprKind, MutImmutable, Pat, PatKind};\n+use crate::rustc::ty;\n+use crate::rustc::ty::adjustment::{Adjust, Adjustment};\n use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n \n /// **What it does:** Checks for address of operations (`&`) that are going to"}, {"sha": "2db9b9d165bf634e0b2264aec93fafc511eadb59", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,10 +2,10 @@\n //!\n //! This lint is **warn** by default\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n+use crate::rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for useless borrowed references."}, {"sha": "0f7ea34f18a6efed5dce57490dcbfb02aaf8ac35", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -27,10 +27,10 @@\n //! ```\n //!\n //! This lint is **warn** by default.\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast;\n-use syntax::source_map::{original_sp, DUMMY_SP};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast;\n+use crate::syntax::source_map::{original_sp, DUMMY_SP};\n use std::borrow::Cow;\n \n use crate::utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline};"}, {"sha": "eb4cbe22f30a0073e57026c326fdc8ef1df087f1", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,18 +1,18 @@\n use matches::matches;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::FnKind;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::FnKind;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, RegionKind, TypeFoldable};\n-use rustc::traits;\n-use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::mem_categorization as mc;\n-use rustc_target::spec::abi::Abi;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::ast::NodeId;\n-use syntax_pos::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use crate::rustc::ty::{self, RegionKind, TypeFoldable};\n+use crate::rustc::traits;\n+use crate::rustc::middle::expr_use_visitor as euv;\n+use crate::rustc::middle::mem_categorization as mc;\n+use crate::rustc_target::spec::abi::Abi;\n+use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use crate::syntax::ast::NodeId;\n+use crate::syntax_pos::Span;\n+use crate::syntax::errors::DiagnosticBuilder;\n use crate::utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths,\n             snippet, snippet_opt, span_lint_and_then};\n use crate::utils::ptr::get_spans;"}, {"sha": "7c452bed0a3657d42c45235afe2c55511681a168", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::ty;\n-use rustc::hir::{Expr, ExprKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::ty;\n+use crate::rustc::hir::{Expr, ExprKind};\n use crate::utils::span_lint;\n \n /// **What it does:** Checks for needlessly including a base struct on update"}, {"sha": "08ad4dd43c9dc378e91214cac5d03126374e7685", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n use crate::utils::{self, paths, span_lint};"}, {"sha": "f39cfc8d122e34fa80887306588f5fbc34761791", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::source_map::{Span, Spanned};\n+use crate::syntax::source_map::{Span, Spanned};\n \n use crate::consts::{self, Constant};\n use crate::utils::span_lint;"}, {"sha": "131f73b7c6173ce5fb06fc9be8b283a1848dee6b", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::def_id::DefId;\n-use rustc::hir;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::def_id::DefId;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n-use syntax::source_map::Span;\n+use crate::rustc::ty::{self, Ty};\n+use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n use crate::utils::sugg::DiagnosticBuilderExt;"}, {"sha": "5ff0979670d435090446f94536f11b53d3de446b", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::def::Def;\n-use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n use std::ops::Deref;\n "}, {"sha": "3b97e9d4a1716337049e0e73b97fe295f915a126", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,15 +2,15 @@\n //!\n //! This lint is **deny** by default.\n \n-use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::hir::def::Def;\n-use rustc::ty::{self, TypeFlags};\n-use rustc::ty::adjustment::Adjust;\n-use rustc_errors::Applicability;\n-use rustc_typeck::hir_ty_to_ty;\n-use syntax_pos::{DUMMY_SP, Span};\n+use crate::rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::ty::{self, TypeFlags};\n+use crate::rustc::ty::adjustment::Adjust;\n+use crate::rustc_errors::Applicability;\n+use crate::rustc_typeck::hir_ty_to_ty;\n+use crate::syntax_pos::{DUMMY_SP, Span};\n use std::ptr;\n use crate::utils::{in_constant, in_macro, is_copy, span_lint_and_then};\n "}, {"sha": "77642b4727c66f91d9be050a4bf468e586c820a4", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::{LintArray, LintPass, EarlyContext, EarlyLintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n+use crate::rustc::lint::{LintArray, LintPass, EarlyContext, EarlyLintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Span;\n+use crate::syntax::symbol::LocalInternedString;\n+use crate::syntax::ast::*;\n+use crate::syntax::attr;\n+use crate::syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use crate::utils::{span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for names that are very similar and thus confusing."}, {"sha": "cd97e485342ce84f778f63dfb8e2213f00311364", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n+use crate::rustc::hir::*;\n use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n \n /// **What it does:*** Checks for unnecessary `ok()` in if let."}, {"sha": "9133192549fc5e7f58aa1680d2b71fee2bd98fa4", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir::{Expr, ExprKind};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::LitKind;\n-use syntax::source_map::{Span, Spanned};\n+use crate::rustc::hir::{Expr, ExprKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::LitKind;\n+use crate::syntax::source_map::{Span, Spanned};\n use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n \n /// **What it does:** Checks for duplicate open options as well as combinations"}, {"sha": "bdd87ad3a25b0765558713180a5f0cafd842364a", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n+use crate::rustc::hir::*;\n use crate::utils::{span_lint, SpanlessEq};\n \n /// **What it does:** Detects classic underflow/overflow checks."}, {"sha": "404f43312e538cd0ecaae5145b49e26c01b967d2", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast::LitKind;\n-use syntax::ptr::P;\n-use syntax::ext::quote::rt::Span;\n+use crate::syntax::ast::LitKind;\n+use crate::syntax::ptr::P;\n+use crate::syntax::ext::quote::rt::Span;\n use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n \n /// **What it does:** Checks for missing parameters in `panic!`."}, {"sha": "7eb0c089726c35290f1ab39671875e3f5d94989e", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n+use crate::rustc::hir::*;\n use crate::utils::{is_automatically_derived, span_lint};\n \n /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`."}, {"sha": "e77a49266ba530e0c403b747a2256eaaa5585343", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n-use syntax::source_map::Spanned;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n+use crate::syntax::source_map::Spanned;\n use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n \n /// **What it does:** Checks for operations where precedence may be unclear\n@@ -121,15 +121,15 @@ fn is_arith_expr(expr: &Expr) -> bool {\n }\n \n fn is_bit_op(op: BinOpKind) -> bool {\n-    use syntax::ast::BinOpKind::*;\n+    use crate::syntax::ast::BinOpKind::*;\n     match op {\n         BitXor | BitAnd | BitOr | Shl | Shr => true,\n         _ => false,\n     }\n }\n \n fn is_arith_op(op: BinOpKind) -> bool {\n-    use syntax::ast::BinOpKind::*;\n+    use crate::syntax::ast::BinOpKind::*;\n     match op {\n         Add | Sub | Mul | Div | Rem => true,\n         _ => false,"}, {"sha": "1aefc84cb4984be64b8f3f1acaf7aaccaa87579e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,15 +1,15 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n use std::borrow::Cow;\n-use rustc::hir::*;\n-use rustc::hir::QPath;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::QPath;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n-use syntax::ast::NodeId;\n-use syntax::source_map::Span;\n-use syntax_pos::MultiSpan;\n+use crate::rustc::ty;\n+use crate::syntax::ast::NodeId;\n+use crate::syntax::source_map::Span;\n+use crate::syntax_pos::MultiSpan;\n use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n use crate::utils::ptr::get_spans;\n "}, {"sha": "261e5cccbddf6d256cd13c4930c6a7c21b79b554", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,4 +1,4 @@\n-use rustc::{declare_tool_lint, hir, lint, lint_array};\n+use crate::rustc::{declare_tool_lint, hir, lint, lint_array};\n use crate::utils;\n use std::fmt;\n "}, {"sha": "93ea00cec77deeea98e554ff5f34b92d5c195a94", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n-use rustc::hir::def::Def;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::def::Def;\n use crate::utils::sugg::Sugg;\n-use syntax::ptr::P;\n+use crate::syntax::ptr::P;\n \n use crate::utils::{match_def_path, match_type, span_lint_and_then};\n use crate::utils::paths::*;"}, {"sha": "6616099eb9e67f241d0d2337c0c19f3fda772588", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n-use syntax::ast::RangeLimits;\n-use syntax::source_map::Spanned;\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::RangeLimits;\n+use crate::syntax::source_map::Spanned;\n use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then, snippet_opt};\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::sugg::Sugg;"}, {"sha": "38cb4578d9ef9b2a1532172372d2911ea7b1e6ab", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n use crate::utils::{span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands"}, {"sha": "1faacc79df0c68608f280fcedafa1b6c02eef647", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use syntax::ast::{Expr, ExprKind, UnOp};\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::{Expr, ExprKind, UnOp};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::utils::{snippet, span_lint_and_sugg};\n "}, {"sha": "41ff8a4bc0cac77ace8d61f40d2a7d6dd9e7263d", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n use regex_syntax;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc_data_structures::fx::FxHashSet;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_data_structures::fx::FxHashSet;\n use if_chain::if_chain;\n-use syntax::ast::{LitKind, NodeId, StrStyle};\n-use syntax::source_map::{BytePos, Span};\n+use crate::syntax::ast::{LitKind, NodeId, StrStyle};\n+use crate::syntax::source_map::{BytePos, Span};\n use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n use crate::consts::{constant, Constant};\n "}, {"sha": "05cca2ac33807471e80d3587a42153f0c2c6e5a0", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir;\n-use rustc::hir::def::Def;\n+use crate::rustc::hir;\n+use crate::rustc::hir::def::Def;\n use crate::utils::{match_def_path, span_lint_and_sugg};\n \n /// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and"}, {"sha": "4aed77f43e1dbc3d235a9fd29b9e5146daa408f2", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use syntax::ast;\n-use syntax::source_map::Span;\n-use syntax::visit::FnKind;\n+use crate::syntax::ast;\n+use crate::syntax::source_map::Span;\n+use crate::syntax::visit::FnKind;\n \n use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n "}, {"sha": "f2cfdf82d5b62de71be96ab59d87aa802e68c1cc", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n use crate::utils::{get_trait_def_id, paths, span_lint};\n \n /// **What it does:** Checks for mis-uses of the serde API."}, {"sha": "4a9893536008695223f99629a5179e9f568f4fb0", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n use crate::reexport::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::hir::intravisit::FnKind;\n-use rustc::ty;\n-use syntax::source_map::Span;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::FnKind;\n+use crate::rustc::ty;\n+use crate::syntax::source_map::Span;\n use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for bindings that shadow other bindings already in"}, {"sha": "54fced1242588cfee954609a6c772881cdb79a3f", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,7 +1,7 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::source_map::Spanned;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::source_map::Spanned;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n@@ -145,7 +145,7 @@ impl LintPass for StringLitAsBytes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use syntax::ast::LitKind;\n+        use crate::syntax::ast::LitKind;\n         use crate::utils::{in_macro, snippet};\n \n         if let ExprKind::MethodCall(ref path, _, ref args) = e.node {"}, {"sha": "78a2c2adeb376608d0826c6c972e26248c209be8", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use syntax::ast;\n+use crate::rustc::hir;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::syntax::ast;\n use crate::utils::{get_trait_def_id, span_lint};\n \n /// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g."}, {"sha": "1c4092634994b2e3c85abb33f7b28b39f71c40f1", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n use matches::matches;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty;\n+use crate::rustc::ty;\n use crate::utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n "}, {"sha": "7cde4eb48f3b9e39ec15d46c0fbfa6f16ee40df3", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::{Expr, ExprKind};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::{Expr, ExprKind};\n use crate::utils::is_adjusted;\n use crate::utils::span_lint;\n "}, {"sha": "84726e5ded3fcdd9c7e1f927268309704f8903c0", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n-use rustc::hir::*;\n+use crate::rustc::ty::{self, Ty};\n+use crate::rustc::hir::*;\n use std::borrow::Cow;\n-use syntax::ast;\n+use crate::syntax::ast;\n use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use crate::utils::{opt_def_id, sugg};\n "}, {"sha": "baa9a8c3903ecbabed0a6c80fa34dffb3d4b4c65", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,18 +1,18 @@\n use std::cmp;\n \n use matches::matches;\n-use rustc::hir;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::FnKind;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::FnKind;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::TyKind;\n-use rustc::session::config::Config as SessionConfig;\n-use rustc_target::spec::abi::Abi;\n-use rustc_target::abi::LayoutOf;\n-use syntax::ast::NodeId;\n-use syntax_pos::Span;\n+use crate::rustc::ty::TyKind;\n+use crate::rustc::session::config::Config as SessionConfig;\n+use crate::rustc_target::spec::abi::Abi;\n+use crate::rustc_target::abi::LayoutOf;\n+use crate::syntax::ast::NodeId;\n+use crate::syntax_pos::Span;\n use crate::utils::{in_macro, is_copy, is_self, span_lint_and_sugg, snippet};\n \n /// **What it does:** Checks for functions taking arguments by reference, where"}, {"sha": "2766ea58d2d24a9673a47903601d5a51c92f6b2a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,21 +1,21 @@\n #![allow(clippy::default_hash_types)]\n \n use crate::reexport::*;\n-use rustc::hir;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n-use rustc::ty::layout::LayoutOf;\n-use rustc_typeck::hir_ty_to_ty;\n+use crate::rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use crate::rustc::ty::layout::LayoutOf;\n+use crate::rustc_typeck::hir_ty_to_ty;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n use std::borrow::Cow;\n-use syntax::ast::{FloatTy, IntTy, UintTy};\n-use syntax::source_map::Span;\n-use syntax::errors::DiagnosticBuilder;\n+use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n+use crate::syntax::source_map::Span;\n+use crate::syntax::errors::DiagnosticBuilder;\n use crate::utils::{comparisons, differing_macro_contexts, higher, in_constant, in_macro, last_path_segment, match_def_path, match_path,\n             match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n@@ -542,7 +542,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n }\n \n fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n-    use syntax_pos::hygiene::CompilerDesugaringKind;\n+    use crate::syntax_pos::hygiene::CompilerDesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.node {\n         callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n     } else {\n@@ -958,7 +958,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             if let ExprKind::Lit(ref lit) = ex.node {\n-                use syntax::ast::{LitIntType, LitKind};\n+                use crate::syntax::ast::{LitIntType, LitKind};\n                 match lit.node {\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n                     _ => if cast_from.sty == cast_to.sty && !in_external_macro(cx.sess(), expr.span) {\n@@ -1291,7 +1291,7 @@ impl LintPass for CharLitAsU8 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use syntax::ast::{LitKind, UintTy};\n+        use crate::syntax::ast::{LitKind, UintTy};\n \n         if let ExprKind::Cast(ref e, _) = expr.node {\n             if let ExprKind::Lit(ref l) = e.node {\n@@ -1565,7 +1565,7 @@ impl Ord for FullInt {\n \n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<(FullInt, FullInt)> {\n-    use syntax::ast::{IntTy, UintTy};\n+    use crate::syntax::ast::{IntTy, UintTy};\n     use std::*;\n \n     if let ExprKind::Cast(ref cast_exp, _) = expr.node {\n@@ -1748,7 +1748,7 @@ impl LintPass for ImplicitHasher {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n     #[allow(clippy::cast_possible_truncation)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        use syntax_pos::BytePos;\n+        use crate::syntax_pos::BytePos;\n \n         fn suggestion<'a, 'tcx>(\n             cx: &LateContext<'a, 'tcx>,"}, {"sha": "83f9713b59e737cfec0e2235f9a242c835f869b2", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use syntax::ast::{LitKind, NodeId};\n-use syntax::source_map::Span;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::{LitKind, NodeId};\n+use crate::syntax::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n use crate::utils::{is_allowed, snippet, span_help_and_lint};\n "}, {"sha": "e6472eb50bf221a4a1fb6993214e1f5a04989923", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast::*;\n-use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax::ast::*;\n+use crate::syntax::source_map::Span;\n+use crate::syntax::symbol::LocalInternedString;\n use crate::utils::span_lint;\n \n /// **What it does:** Checks for imports that remove \"unsafe\" from an item's"}, {"sha": "82430a794b1f2a0aee75d2e0083f8a9298dffa6a", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,6 +1,6 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n use crate::utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n \n /// **What it does:** Checks for unused written/read amount."}, {"sha": "a67164becfbfd7bad077c9e9d16ea61be511b15a", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir;\n-use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n-use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast;\n-use syntax::source_map::Span;\n-use syntax::symbol::LocalInternedString;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use crate::rustc_data_structures::fx::FxHashMap;\n+use crate::syntax::ast;\n+use crate::syntax::source_map::Span;\n+use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for unused labels."}, {"sha": "f8fe1b3bdfa2dcc4f2b7b702e391a12dfdaa4af8", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,12 +1,12 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n-use rustc::hir::intravisit::*;\n-use rustc::hir::*;\n-use syntax::ast::NodeId;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::intravisit::*;\n+use crate::rustc::hir::*;\n+use crate::syntax::ast::NodeId;\n+use crate::syntax::source_map::Span;\n \n /// **What it does:** Checks for calls of `unwrap[_err]()` that cannot fail.\n ///"}, {"sha": "3b2659a61769d84200ee11f8a6b271e778b44fd1", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::ty;\n-use rustc::{declare_tool_lint, lint_array};\n-use syntax_pos::symbol::keywords::SelfType;\n+use crate::rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::ty;\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::syntax_pos::symbol::keywords::SelfType;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n /// replacement with `Self` is applicable."}, {"sha": "8e8d40e28a9757c3cb813d7aa1f526625755bc5c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -3,13 +3,13 @@\n \n #![allow(clippy::print_stdout, clippy::use_debug)]\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir;\n-use rustc::hir::{Expr, ExprKind, QPath, TyKind, Pat, PatKind, BindingAnnotation, StmtKind, DeclKind, Stmt};\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::{Expr, ExprKind, QPath, TyKind, Pat, PatKind, BindingAnnotation, StmtKind, DeclKind, Stmt};\n+use crate::rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::rustc_data_structures::fx::FxHashMap;\n+use crate::syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n use crate::utils::get_attr;\n \n /// **What it does:** Generates clippy code that detects the offending pattern"}, {"sha": "bd90fe1bc0a624ac8ce9d00b4b905f12015d984d", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,7 +2,7 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use rustc::hir::{BinOpKind, Expr};\n+use crate::rustc::hir::{BinOpKind, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n /// Represent a normalized comparison operator."}, {"sha": "4a58ac2f760ce28ffe6818da353f6cbad0ef24e7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -6,7 +6,7 @@ use lazy_static::lazy_static;\n use std::default::Default;\n use std::{env, fmt, fs, io, path};\n use std::io::Read;\n-use syntax::{ast, source_map};\n+use crate::syntax::{ast, source_map};\n use toml;\n use std::sync::Mutex;\n "}, {"sha": "cfedad49f311c546092e6dba70a4c5b4933045e2", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -4,9 +4,9 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use if_chain::if_chain;\n-use rustc::{hir, ty};\n-use rustc::lint::LateContext;\n-use syntax::ast;\n+use crate::rustc::{hir, ty};\n+use crate::rustc::lint::LateContext;\n+use crate::syntax::ast;\n use crate::utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n \n /// Convert a hir binary operator to the corresponding `ast` type."}, {"sha": "2257fbf77437f62b7b75129fb5fccbe27d218fb6", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,11 +1,11 @@\n use crate::consts::{constant_simple, constant_context};\n-use rustc::lint::LateContext;\n-use rustc::hir::*;\n-use rustc::ty::{TypeckTables};\n+use crate::rustc::lint::LateContext;\n+use crate::rustc::hir::*;\n+use crate::rustc::ty::{TypeckTables};\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n-use syntax::ast::Name;\n-use syntax::ptr::P;\n+use crate::syntax::ast::Name;\n+use crate::syntax::ptr::P;\n use crate::utils::differing_macro_contexts;\n \n /// Type used to check whether two ast are the same. This is different from the"}, {"sha": "413c71ab27bb040154a6215bfb5c8f1e9542c801", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,11 +2,11 @@\n \n //! checks for attributes\n \n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir;\n-use rustc::hir::print;\n-use syntax::ast::Attribute;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir;\n+use crate::rustc::hir::print;\n+use crate::syntax::ast::Attribute;\n use crate::utils::get_attr;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]`"}, {"sha": "97a6922d35de1d49e981c8b6a863ff3ae2601563", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,13 +1,13 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, EarlyContext, EarlyLintPass};\n-use rustc::{declare_tool_lint, lint_array};\n-use rustc::hir::*;\n-use rustc::hir;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, EarlyContext, EarlyLintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::hir;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use crate::utils::{match_qpath, paths, span_lint, span_lint_and_sugg};\n-use syntax::symbol::LocalInternedString;\n-use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n-use syntax::source_map::Span;\n+use crate::syntax::symbol::LocalInternedString;\n+use crate::syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n+use crate::syntax::source_map::Span;\n \n \n /// **What it does:** Checks for various things we like to keep tidy in clippy."}, {"sha": "c113dd7e5a3583f95c68052378ec9a8d784be301", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,27 +1,27 @@\n use crate::reexport::*;\n use matches::matches;\n use if_chain::if_chain;\n-use rustc::hir;\n-use rustc::hir::*;\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc::hir::def::Def;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::Node;\n-use rustc::lint::{LateContext, Level, Lint, LintContext};\n-use rustc::session::Session;\n-use rustc::traits;\n-use rustc::ty::{self, Binder, Ty, TyCtxt, layout::{self, IntegerExt}, subst::Kind};\n-use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n+use crate::rustc::hir;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::rustc::hir::Node;\n+use crate::rustc::lint::{LateContext, Level, Lint, LintContext};\n+use crate::rustc::session::Session;\n+use crate::rustc::traits;\n+use crate::rustc::ty::{self, Binder, Ty, TyCtxt, layout::{self, IntegerExt}, subst::Kind};\n+use crate::rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n use std::borrow::Cow;\n use std::env;\n use std::mem;\n use std::str::FromStr;\n use std::rc::Rc;\n-use syntax::ast::{self, LitKind};\n-use syntax::attr;\n-use syntax::source_map::{Span, DUMMY_SP};\n-use syntax::errors::DiagnosticBuilder;\n-use syntax::symbol::keywords;\n+use crate::syntax::ast::{self, LitKind};\n+use crate::syntax::attr;\n+use crate::syntax::source_map::{Span, DUMMY_SP};\n+use crate::syntax::errors::DiagnosticBuilder;\n+use crate::syntax::symbol::keywords;\n \n mod camel_case;\n pub use self::camel_case::{camel_case_from, camel_case_until};\n@@ -70,7 +70,7 @@ pub fn in_macro(span: Span) -> bool {\n ///\n /// See also the `paths` module.\n pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) -> bool {\n-    use syntax::symbol;\n+    use crate::syntax::symbol;\n \n     struct AbsolutePathBuffer {\n         names: Vec<symbol::LocalInternedString>,"}, {"sha": "a28e1c7fe9d86ee63e37eb0dfcbeca20fbdc62d9", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n use std::borrow::Cow;\n-use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc::lint::LateContext;\n-use syntax::ast::Name;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::*;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::LateContext;\n+use crate::syntax::ast::Name;\n+use crate::syntax::source_map::Span;\n use crate::utils::{get_pat_name, match_var, snippet};\n \n pub fn get_spans("}, {"sha": "f849cef093a65b27fdd5e11ee43463bd84b87b1d", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -2,19 +2,19 @@\n #![deny(clippy::missing_docs_in_private_items)]\n \n use matches::matches;\n-use rustc::hir;\n-use rustc::lint::{EarlyContext, LateContext, LintContext};\n-use rustc_errors;\n+use crate::rustc::hir;\n+use crate::rustc::lint::{EarlyContext, LateContext, LintContext};\n+use crate::rustc_errors;\n use std::borrow::Cow;\n use std::fmt::Display;\n use std;\n-use syntax::source_map::{CharPos, Span};\n-use syntax::parse::token;\n-use syntax::print::pprust::token_to_string;\n-use syntax::util::parser::AssocOp;\n-use syntax::ast;\n+use crate::syntax::source_map::{CharPos, Span};\n+use crate::syntax::parse::token;\n+use crate::syntax::print::pprust::token_to_string;\n+use crate::syntax::util::parser::AssocOp;\n+use crate::syntax::ast;\n use crate::utils::{higher, snippet, snippet_opt};\n-use syntax_pos::{BytePos, Pos};\n+use crate::syntax_pos::{BytePos, Pos};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -86,7 +86,7 @@ impl<'a> Sugg<'a> {\n \n     /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n-        use syntax::ast::RangeLimits;\n+        use crate::syntax::ast::RangeLimits;\n \n         let snippet = snippet(cx, expr.span, default);\n \n@@ -360,7 +360,7 @@ enum Associativity {\n /// they are considered\n /// associative.\n fn associativity(op: &AssocOp) -> Associativity {\n-    use syntax::util::parser::AssocOp::*;\n+    use crate::syntax::util::parser::AssocOp::*;\n \n     match *op {\n         ObsoleteInPlace | Assign | AssignOp(_) => Associativity::Right,\n@@ -382,7 +382,7 @@ fn associativity(op: &AssocOp) -> Associativity {\n \n /// Convert a `hir::BinOp` to the corresponding assigning binary operator.\n fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n-    use syntax::parse::token::BinOpToken::*;\n+    use crate::syntax::parse::token::BinOpToken::*;\n \n     AssocOp::AssignOp(match op.node {\n         hir::BinOpKind::Add => Plus,\n@@ -410,8 +410,8 @@ fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n \n /// Convert an `ast::BinOp` to the corresponding assigning binary operator.\n fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n-    use syntax::ast::BinOpKind::*;\n-    use syntax::parse::token::BinOpToken;\n+    use crate::syntax::ast::BinOpKind::*;\n+    use crate::syntax::parse::token::BinOpToken;\n \n     AssocOp::AssignOp(match op.node {\n         Add => BinOpToken::Plus,"}, {"sha": "826ca78e64b0482c63b859fd778e23c008e7193b", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,14 +1,14 @@\n-use rustc::lint::LateContext;\n+use crate::rustc::lint::LateContext;\n \n-use rustc::hir::def::Def;\n-use rustc::hir::*;\n-use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::cmt_;\n-use rustc::middle::mem_categorization::Categorization;\n-use rustc::ty;\n-use rustc_data_structures::fx::FxHashSet;\n-use syntax::ast::NodeId;\n-use syntax::source_map::Span;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::*;\n+use crate::rustc::middle::expr_use_visitor::*;\n+use crate::rustc::middle::mem_categorization::cmt_;\n+use crate::rustc::middle::mem_categorization::Categorization;\n+use crate::rustc::ty;\n+use crate::rustc_data_structures::fx::FxHashSet;\n+use crate::syntax::ast::NodeId;\n+use crate::syntax::source_map::Span;\n \n /// Returns a set of mutated local variable ids or None if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<NodeId>> {"}, {"sha": "4c6060192cffe028085729334e19a0126b762260", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,9 +1,9 @@\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::ty::{self, Ty};\n-use syntax::source_map::Span;\n+use crate::rustc::ty::{self, Ty};\n+use crate::syntax::source_map::Span;\n use crate::utils::{higher, is_copy, snippet, span_lint_and_sugg};\n use crate::consts::constant;\n "}, {"sha": "a367a04b2badf0ecd80b0c18842c36aa2bb41d8b", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use std::borrow::Cow;\n-use syntax::ast::*;\n-use syntax::parse::{parser, token};\n-use syntax::tokenstream::{ThinTokenStream, TokenStream};\n+use crate::syntax::ast::*;\n+use crate::syntax::parse::{parser, token};\n+use crate::syntax::tokenstream::{ThinTokenStream, TokenStream};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -264,7 +264,7 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n         Ok(token) => token.0.to_string(),\n         Err(_) => return (None, expr),\n     };\n-    use fmt_macros::*;\n+    use crate::fmt_macros::*;\n     let tmp = fmtstr.clone();\n     let mut args = vec![];\n     let mut fmt_parser = Parser::new(&tmp, None);"}, {"sha": "5ceff6d4aa0f84c4cfd83af19b72901f4f4a4e10", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -1,8 +1,8 @@\n use crate::consts::{constant_simple, Constant};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n-use rustc::hir::*;\n+use crate::rustc::hir::*;\n use crate::utils::span_help_and_lint;\n \n /// **What it does:** Checks for `0.0 / 0.0`."}, {"sha": "99f8bc610ff6859ea3f46ab13d4e6a3dd0020880", "filename": "src/driver.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -4,8 +4,14 @@\n #![feature(tool_lints)]\n #![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n-use rustc_driver::{self, driver::CompileController, Compilation};\n-use rustc_plugin;\n+// FIXME: switch to something more ergonomic here, once available.\n+// (currently there is no way to opt into sysroot crates w/o `extern crate`)\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n+#[allow(unused_extern_crates)]\n+extern crate rustc_plugin;\n+use self::rustc_driver::{driver::CompileController, Compilation};\n+\n use std::path::Path;\n use std::process::{exit, Command};\n "}, {"sha": "bfa44d08703c6eceebf62abf539cc5d0d0208520", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9219fc6c5c0d4fa2e5b7580448a2acccabc2c988/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9219fc6c5c0d4fa2e5b7580448a2acccabc2c988", "patch": "@@ -6,7 +6,11 @@\n #![allow(clippy::missing_docs_in_private_items)]\n #![warn(rust_2018_idioms)]\n \n-use rustc_plugin::Registry;\n+// FIXME: switch to something more ergonomic here, once available.\n+// (currently there is no way to opt into sysroot crates w/o `extern crate`)\n+#[allow(unused_extern_crates)]\n+extern crate rustc_plugin;\n+use self::rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry<'_>) {"}]}