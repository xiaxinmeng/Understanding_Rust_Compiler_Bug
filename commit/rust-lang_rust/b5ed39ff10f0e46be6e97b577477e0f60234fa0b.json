{"sha": "b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZWQzOWZmMTBmMGU0NmJlNmU5N2I1Nzc0NzdlMGY2MDIzNGZhMGI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-01T08:23:07Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-01T11:26:45Z"}, "message": "Implement custom read_to_end for io::Take", "tree": {"sha": "5970ac5bf7b4fc86e851f21d5ff6ab49fdb6c355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5970ac5bf7b4fc86e851f21d5ff6ab49fdb6c355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "html_url": "https://github.com/rust-lang/rust/commit/b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ed39ff10f0e46be6e97b577477e0f60234fa0b/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "html_url": "https://github.com/rust-lang/rust/commit/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "b83f3fbe7a59cd94673791f7d3af7ec2bd3836fe", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5ed39ff10f0e46be6e97b577477e0f60234fa0b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ed39ff10f0e46be6e97b577477e0f60234fa0b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b5ed39ff10f0e46be6e97b577477e0f60234fa0b", "patch": "@@ -354,19 +354,26 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n // avoid paying to allocate and zero a huge chunk of memory if the reader only\n // has 4 bytes while still making large reads if the reader does have a ton\n // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every\n-// time is 4,500 times (!) slower than this if the reader has a very small\n-// amount of data to return.\n+// time is 4,500 times (!) slower than a default reservation size of 32 if the\n+// reader has a very small amount of data to return.\n //\n // Because we're extending the buffer with uninitialized data for trusted\n // readers, we need to make sure to truncate that if any of this panics.\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n+    read_to_end_with_reservation(r, buf, 32)\n+}\n+\n+fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n+                                                  buf: &mut Vec<u8>,\n+                                                  reservation_size: usize) -> Result<usize>\n+{\n     let start_len = buf.len();\n     let mut g = Guard { len: buf.len(), buf: buf };\n     let ret;\n     loop {\n         if g.len == g.buf.len() {\n             unsafe {\n-                g.buf.reserve(32);\n+                g.buf.reserve(reservation_size);\n                 let capacity = g.buf.capacity();\n                 g.buf.set_len(capacity);\n                 r.initializer().initialize(&mut g.buf[g.len..]);\n@@ -1899,6 +1906,12 @@ impl<T: Read> Read for Take<T> {\n     unsafe fn initializer(&self) -> Initializer {\n         self.inner.initializer()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n+        let reservation_size = cmp::min(self.limit, 32) as usize;\n+\n+        read_to_end_with_reservation(self, buf, reservation_size)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}