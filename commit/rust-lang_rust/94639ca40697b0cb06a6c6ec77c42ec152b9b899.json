{"sha": "94639ca40697b0cb06a6c6ec77c42ec152b9b899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjM5Y2E0MDY5N2IwY2IwNmE2YzZlYzc3YzQyZWMxNTJiOWI4OTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-10T09:56:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-23T17:28:14Z"}, "message": "rustfmt lowering.rs", "tree": {"sha": "f7e93c1996a9a6987df95ed6990038668ff48dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e93c1996a9a6987df95ed6990038668ff48dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94639ca40697b0cb06a6c6ec77c42ec152b9b899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94639ca40697b0cb06a6c6ec77c42ec152b9b899", "html_url": "https://github.com/rust-lang/rust/commit/94639ca40697b0cb06a6c6ec77c42ec152b9b899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94639ca40697b0cb06a6c6ec77c42ec152b9b899/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bd6f3ee7efe4e257dec353b9a6223571c875de", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bd6f3ee7efe4e257dec353b9a6223571c875de", "html_url": "https://github.com/rust-lang/rust/commit/09bd6f3ee7efe4e257dec353b9a6223571c875de"}], "stats": {"total": 109, "additions": 59, "deletions": 50}, "files": [{"sha": "ca785e5e058633ed6095e4bd5c54d00b371ebfba", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 59, "deletions": 50, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/94639ca40697b0cb06a6c6ec77c42ec152b9b899/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94639ca40697b0cb06a6c6ec77c42ec152b9b899/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=94639ca40697b0cb06a6c6ec77c42ec152b9b899", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir::{self, ImplPolarity};\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::ty::{self, Slice, TyCtxt};\n+use rustc::traits::{Clause, DomainGoal, Goal, PolyDomainGoal, ProgramClause, WhereClauseAtom};\n use rustc::ty::subst::Substs;\n-use rustc::traits::{WhereClauseAtom, PolyDomainGoal, DomainGoal, ProgramClause, Clause, Goal};\n-use syntax::ast;\n+use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n+use syntax::ast;\n+use syntax::ast;\n \n use std::iter;\n \n@@ -24,7 +24,10 @@ trait Lower<T> {\n     fn lower(&self) -> T;\n }\n \n-impl<T, U> Lower<Vec<U>> for Vec<T> where T: Lower<U> {\n+impl<T, U> Lower<Vec<U>> for Vec<T>\n+where\n+    T: Lower<U>,\n+{\n     fn lower(&self) -> Vec<U> {\n         self.iter().map(|item| item.lower()).collect()\n     }\n@@ -42,7 +45,10 @@ impl<'tcx> Lower<WhereClauseAtom<'tcx>> for ty::ProjectionPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx, T> Lower<DomainGoal<'tcx>> for T where T: Lower<WhereClauseAtom<'tcx>> {\n+impl<'tcx, T> Lower<DomainGoal<'tcx>> for T\n+where\n+    T: Lower<WhereClauseAtom<'tcx>>,\n+{\n     fn lower(&self) -> DomainGoal<'tcx> {\n         DomainGoal::Holds(self.lower())\n     }\n@@ -67,7 +73,8 @@ impl<'tcx> Lower<DomainGoal<'tcx>> for ty::TypeOutlivesPredicate<'tcx> {\n /// `forall<'a> { T: Fn(&'a i32) }` which corresponds to something like\n /// `Binder<Holds(Implemented(TraitPredicate))>`.\n impl<'tcx, T> Lower<PolyDomainGoal<'tcx>> for ty::Binder<T>\n-    where T: Lower<DomainGoal<'tcx>> + ty::fold::TypeFoldable<'tcx>\n+where\n+    T: Lower<DomainGoal<'tcx>> + ty::fold::TypeFoldable<'tcx>,\n {\n     fn lower(&self) -> PolyDomainGoal<'tcx> {\n         self.map_bound_ref(|p| p.lower())\n@@ -84,10 +91,9 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n             TypeOutlives(predicate) => predicate.lower(),\n             Projection(predicate) => predicate.lower(),\n             WellFormed(ty) => ty::Binder::dummy(DomainGoal::WellFormedTy(*ty)),\n-            ObjectSafe(..) |\n-            ClosureKind(..) |\n-            Subtype(..) |\n-            ConstEvaluatable(..) => unimplemented!(),\n+            ObjectSafe(..) | ClosureKind(..) | Subtype(..) | ConstEvaluatable(..) => {\n+                unimplemented!()\n+            }\n         }\n     }\n }\n@@ -104,44 +110,41 @@ impl<'tcx> IntoFromEnvGoal for DomainGoal<'tcx> {\n         use self::DomainGoal::*;\n         match self {\n             Holds(wc_atom) => FromEnv(wc_atom),\n-            WellFormed(..) |\n-            FromEnv(..) |\n-            WellFormedTy(..) |\n-            FromEnvTy(..) |\n-            Normalize(..) |\n-            RegionOutlives(..) |\n-            TypeOutlives(..) => self,\n+            WellFormed(..) | FromEnv(..) | WellFormedTy(..) | FromEnvTy(..) | Normalize(..)\n+            | RegionOutlives(..) | TypeOutlives(..) => self,\n         }\n     }\n }\n \n-crate fn program_clauses_for<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                       -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n+crate fn program_clauses_for<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let node = tcx.hir.find(node_id).unwrap();\n     match node {\n         hir::map::Node::NodeItem(item) => match item.node {\n             hir::ItemTrait(..) => program_clauses_for_trait(tcx, def_id),\n             hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n             _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n-        }\n+        },\n         hir::map::Node::NodeImplItem(item) => {\n             if let hir::ImplItemKind::Type(..) = item.node {\n                 program_clauses_for_associated_type_value(tcx, def_id)\n             } else {\n                 Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()))\n             }\n-        },\n+        }\n \n         // FIXME: other constructions e.g. traits, associated types...\n         _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n     }\n }\n \n-fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                       -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n+fn program_clauses_for_trait<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -156,8 +159,8 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     let trait_pred = ty::TraitPredicate {\n         trait_ref: ty::TraitRef {\n             def_id,\n-            substs: Substs::identity_for_item(tcx, def_id)\n-        }\n+            substs: Substs::identity_for_item(tcx, def_id),\n+        },\n     };\n     // `FromEnv(Self: Trait<P1..Pn>)`\n     let from_env = Goal::from(DomainGoal::FromEnv(trait_pred.lower()));\n@@ -169,9 +172,7 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n         goal: impl_trait,\n         hypotheses: tcx.mk_goals(iter::once(from_env)),\n     };\n-    let clauses = iter::once(\n-        Clause::ForAll(ty::Binder::dummy(implemented_from_env))\n-    );\n+    let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n     // Rule Implied-Bound-From-Trait\n     //\n@@ -186,8 +187,8 @@ fn program_clauses_for_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     // FIXME: Remove the [1..] slice; this is a hack because the query\n     // predicates_of currently includes the trait itself (`Self: Trait<P1..Pn>`).\n     let where_clauses = &tcx.predicates_of(def_id).predicates;\n-    let implied_bound_clauses =\n-        where_clauses[1..].into_iter()\n+    let implied_bound_clauses = where_clauses[1..]\n+        .into_iter()\n         .map(|wc| implied_bound_from_trait(tcx, trait_pred, wc));\n \n     Lrc::new(tcx.mk_clauses(clauses.chain(implied_bound_clauses)))\n@@ -203,17 +204,16 @@ fn implied_bound_from_trait<'a, 'tcx>(\n     let impl_trait = DomainGoal::FromEnv(WhereClauseAtom::Implemented(trait_pred));\n \n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`\n-    Clause::ForAll(\n-        where_clause.lower().map_bound(|goal| ProgramClause {\n-            goal: goal.into_from_env_goal(),\n-            hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n-        })\n-    )\n+    Clause::ForAll(where_clause.lower().map_bound(|goal| ProgramClause {\n+        goal: goal.into_from_env_goal(),\n+        hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n+    }))\n }\n \n-fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                      -> Lrc<&'tcx Slice<Clause<'tcx>>>\n-{\n+fn program_clauses_for_impl<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n     if let ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n         return Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()));\n     }\n@@ -231,15 +231,17 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     let trait_ref = tcx.impl_trait_ref(def_id).unwrap();\n     // `Implemented(A0: Trait<A1..An>)`\n     let trait_pred = ty::TraitPredicate { trait_ref }.lower();\n-     // `WC`\n+    // `WC`\n     let where_clauses = tcx.predicates_of(def_id).predicates.lower();\n \n-     // `Implemented(A0: Trait<A1..An>) :- WC`\n+    // `Implemented(A0: Trait<A1..An>) :- WC`\n     let clause = ProgramClause {\n         goal: trait_pred,\n         hypotheses: tcx.mk_goals(\n-            where_clauses.into_iter().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n-        )\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+        ),\n     };\n     Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n }\n@@ -290,7 +292,9 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     let clause = ProgramClause {\n         goal: normalize_goal,\n         hypotheses: tcx.mk_goals(\n-            where_clauses.into_iter().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+            where_clauses\n+                .into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n     Lrc::new(tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause)))))\n@@ -302,14 +306,16 @@ pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     let mut visitor = ClauseDumper { tcx };\n-    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n+    tcx.hir\n+        .krate()\n+        .visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ClauseDumper<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl<'a, 'tcx> ClauseDumper<'a, 'tcx > {\n+impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n     fn process_attrs(&mut self, node_id: ast::NodeId, attrs: &[ast::Attribute]) {\n         let def_id = self.tcx.hir.local_def_id(node_id);\n         for attr in attrs {\n@@ -321,7 +327,10 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx > {\n                         Clause::Implies(program_clause) => program_clause,\n                         Clause::ForAll(program_clause) => program_clause.skip_binder(),\n                     };\n-                    self.tcx.sess.struct_span_err(attr.span, &format!(\"{}\", program_clause)).emit();\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(attr.span, &format!(\"{}\", program_clause))\n+                        .emit();\n                 }\n             }\n         }"}]}