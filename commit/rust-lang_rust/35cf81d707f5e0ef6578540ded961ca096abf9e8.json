{"sha": "35cf81d707f5e0ef6578540ded961ca096abf9e8", "node_id": "C_kwDOAAsO6NoAKDM1Y2Y4MWQ3MDdmNWUwZWY2NTc4NTQwZGVkOTYxY2EwOTZhYmY5ZTg", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-12T14:44:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T14:44:51Z"}, "message": "Rollup merge of #106322 - compiler-errors:CollectAllMismatches-infer-vars, r=oli-obk\n\nHandle inference variables in `CollectAllMismatches` correctly\n\n1. Fix #106240\n2. Treat int/float type variables correctly (see `src/test/ui/iterators/invalid-iterator-chain-with-int-infer.rs`), so we can point out things like \"`Iterator::Item` changed to `{integer}` here\"", "tree": {"sha": "ecc8ea41bb73ae05422c25ee517affafc3ff3069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc8ea41bb73ae05422c25ee517affafc3ff3069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35cf81d707f5e0ef6578540ded961ca096abf9e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwBzjCRBK7hj4Ov3rIwAAWPAIAJi3cASIR0cDoGjhB96MHxSd\nPFqm76mv59l0LrMlbHQ8Ywo5ul76pv5NLaxVESgGRC0vpueWObD/7ZOYa9zB4jhJ\n7M6/8kLskB6nfi7UOf1uLPgT9HD5KmsvxucW00a+08j1HQn1IQOXGvh4l7a5D6gR\n/FrC1+qzi9283+TlqoQhyDUi0WMr0K939kBM2FG47BVHhPQbC7y+/TjfmEvf+3Tq\n7bzXzKefaExTKet7FAq1v+nwYN/iXh+Z0BygEqiD18E75Ya6mhoQH1HBgtFXJMWN\nFoFTl0ZXd1ZDVsmDJ+sSMk6NjB116aC4dm1aVb+KVU9OammoVv0DwDK2bdSBWII=\n=nfv1\n-----END PGP SIGNATURE-----\n", "payload": "tree ecc8ea41bb73ae05422c25ee517affafc3ff3069\nparent 6bf57b8110138f1fbbf91da0e7c6750d30575cc9\nparent 959616ef44fe919f297bba1c3ddc65bd8f2432fc\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1673534691 +0100\ncommitter GitHub <noreply@github.com> 1673534691 +0100\n\nRollup merge of #106322 - compiler-errors:CollectAllMismatches-infer-vars, r=oli-obk\n\nHandle inference variables in `CollectAllMismatches` correctly\n\n1. Fix #106240\n2. Treat int/float type variables correctly (see `src/test/ui/iterators/invalid-iterator-chain-with-int-infer.rs`), so we can point out things like \"`Iterator::Item` changed to `{integer}` here\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35cf81d707f5e0ef6578540ded961ca096abf9e8", "html_url": "https://github.com/rust-lang/rust/commit/35cf81d707f5e0ef6578540ded961ca096abf9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35cf81d707f5e0ef6578540ded961ca096abf9e8/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf57b8110138f1fbbf91da0e7c6750d30575cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf57b8110138f1fbbf91da0e7c6750d30575cc9", "html_url": "https://github.com/rust-lang/rust/commit/6bf57b8110138f1fbbf91da0e7c6750d30575cc9"}, {"sha": "959616ef44fe919f297bba1c3ddc65bd8f2432fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/959616ef44fe919f297bba1c3ddc65bd8f2432fc", "html_url": "https://github.com/rust-lang/rust/commit/959616ef44fe919f297bba1c3ddc65bd8f2432fc"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "ba9ee57d4099cbdfea98488cbbe9beaed46f263a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35cf81d707f5e0ef6578540ded961ca096abf9e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cf81d707f5e0ef6578540ded961ca096abf9e8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=35cf81d707f5e0ef6578540ded961ca096abf9e8", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n \n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         self.infcx.probe(|_| {\n-            if a.is_ty_infer() || b.is_ty_infer() {\n+            if a.is_ty_var() || b.is_ty_var() {\n                 Ok(a)\n             } else {\n                 self.infcx.super_combine_tys(self, a, b).or_else(|e| {\n@@ -71,10 +71,13 @@ impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n         a: ty::Const<'tcx>,\n         b: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        if a == b {\n-            return Ok(a);\n-        }\n-        relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n+        self.infcx.probe(|_| {\n+            if a.is_ct_infer() || b.is_ct_infer() {\n+                Ok(a)\n+            } else {\n+                relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n+            }\n+        })\n     }\n \n     fn binders<T: Relate<'tcx>>("}, {"sha": "5fb633de9831c52c8d64ec22833560e817f001f8", "filename": "tests/ui/consts/ct-var-in-collect_all_mismatches.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.rs?ref=35cf81d707f5e0ef6578540ded961ca096abf9e8", "patch": "@@ -0,0 +1,20 @@\n+struct Foo<T, const N: usize> {\n+    array: [T; N],\n+}\n+\n+trait Bar<const N: usize> {}\n+\n+impl<T, const N: usize> Foo<T, N> {\n+    fn trigger(self) {\n+        self.unsatisfied()\n+        //~^ ERROR the trait bound `T: Bar<N>` is not satisfied\n+    }\n+\n+    fn unsatisfied(self)\n+    where\n+        T: Bar<N>,\n+    {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43fba2573ff62164bdf579e7581e5f571520f0c0", "filename": "tests/ui/consts/ct-var-in-collect_all_mismatches.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr?ref=35cf81d707f5e0ef6578540ded961ca096abf9e8", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: the trait bound `T: Bar<N>` is not satisfied\n+  --> $DIR/ct-var-in-collect_all_mismatches.rs:9:14\n+   |\n+LL |         self.unsatisfied()\n+   |              ^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `T`\n+   |\n+note: required by a bound in `Foo::<T, N>::unsatisfied`\n+  --> $DIR/ct-var-in-collect_all_mismatches.rs:15:12\n+   |\n+LL |     fn unsatisfied(self)\n+   |        ----------- required by a bound in this\n+LL |     where\n+LL |         T: Bar<N>,\n+   |            ^^^^^^ required by this bound in `Foo::<T, N>::unsatisfied`\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: Bar<N>, const N: usize> Foo<T, N> {\n+   |       ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "882a1d139544107a12fd95db6a685c75b8857d49", "filename": "tests/ui/iterators/invalid-iterator-chain-with-int-infer.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.rs?ref=35cf81d707f5e0ef6578540ded961ca096abf9e8", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+    //~^ ERROR a value of type `f32` cannot be made by summing an iterator over elements of type `{integer}`\n+}"}, {"sha": "3cb5e44c711010fd7a8b70237b6c7da0f36825d2", "filename": "tests/ui/iterators/invalid-iterator-chain-with-int-infer.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35cf81d707f5e0ef6578540ded961ca096abf9e8/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiterators%2Finvalid-iterator-chain-with-int-infer.stderr?ref=35cf81d707f5e0ef6578540ded961ca096abf9e8", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: a value of type `f32` cannot be made by summing an iterator over elements of type `{integer}`\n+  --> $DIR/invalid-iterator-chain-with-int-infer.rs:2:41\n+   |\n+LL |     let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+   |                                         ^^^ value of type `f32` cannot be made by summing a `std::iter::Iterator<Item={integer}>`\n+   |\n+   = help: the trait `Sum<{integer}>` is not implemented for `f32`\n+   = help: the following other types implement trait `Sum<A>`:\n+             <f32 as Sum<&'a f32>>\n+             <f32 as Sum>\n+note: the method call chain might not have had the expected associated types\n+  --> $DIR/invalid-iterator-chain-with-int-infer.rs:2:29\n+   |\n+LL |     let x = Some(()).iter().map(|()| 1).sum::<f32>();\n+   |             -------- ------ ^^^^^^^^^^^ `Iterator::Item` changed to `{integer}` here\n+   |             |        |\n+   |             |        `Iterator::Item` is `&()` here\n+   |             this expression has type `Option<()>`\n+note: required by a bound in `std::iter::Iterator::sum`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}