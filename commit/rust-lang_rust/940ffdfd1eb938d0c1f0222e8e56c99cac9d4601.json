{"sha": "940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "node_id": "C_kwDOAAsO6NoAKDk0MGZmZGZkMWViOTM4ZDBjMWYwMjIyZThlNTZjOTljYWM5ZDQ2MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T02:47:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T02:47:51Z"}, "message": "Auto merge of #10763 - GuillaumeGomez:unique_cfg_condition, r=Jarcho\n\nAdd `MINIMAL_CFG_CONDITION` lint\n\nI encountered a few cases where some code had:\n\n```rust\n#[cfg(any(unix))]\n```\n\nIn this case, the `any` is useless. This lint checks this and also for the `all` condition.\n\n```\nchangelog: [`unique_cfg_condition`]: Add new `UNIQUE_CFG_CONDITION` lint\n```", "tree": {"sha": "1ac337ab5fc050d60531257a3cdc5ac61f061e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac337ab5fc050d60531257a3cdc5ac61f061e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "html_url": "https://github.com/rust-lang/rust/commit/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1dbbaec57440790eb6a457f628a0d295a6b80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1dbbaec57440790eb6a457f628a0d295a6b80d", "html_url": "https://github.com/rust-lang/rust/commit/2a1dbbaec57440790eb6a457f628a0d295a6b80d"}, {"sha": "dbc76a766333bf510de601111f31e3eb42fb0434", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc76a766333bf510de601111f31e3eb42fb0434", "html_url": "https://github.com/rust-lang/rust/commit/dbc76a766333bf510de601111f31e3eb42fb0434"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "79f2a47110b9e6cf9494aaeeba1d07cd25ca6ea6", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -4899,6 +4899,7 @@ Released 2018-09-13\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n [`no_mangle_with_rust_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n+[`non_minimal_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool"}, {"sha": "897495ba1087473fb538394426282f5c8d99065b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -338,6 +338,30 @@ declare_clippy_lint! {\n     \"ensures that all `allow` and `expect` attributes have a reason\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `any` and `all` combinators in `cfg` with only one condition.\n+    ///\n+    /// ### Why is this bad?\n+    /// If there is only one condition, no need to wrap it into `any` or `all` combinators.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[cfg(any(unix))]\n+    /// pub struct Bar;\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// #[cfg(unix)]\n+    /// pub struct Bar;\n+    /// ```\n+    #[clippy::version = \"1.71.0\"]\n+    pub NON_MINIMAL_CFG,\n+    style,\n+    \"ensure that all `cfg(any())` and `cfg(all())` have more than one condition\"\n+}\n+\n declare_lint_pass!(Attributes => [\n     ALLOW_ATTRIBUTES_WITHOUT_REASON,\n     INLINE_ALWAYS,\n@@ -651,6 +675,7 @@ impl_lint_pass!(EarlyAttributes => [\n     MISMATCHED_TARGET_OS,\n     EMPTY_LINE_AFTER_OUTER_ATTR,\n     EMPTY_LINE_AFTER_DOC_COMMENTS,\n+    NON_MINIMAL_CFG,\n ]);\n \n impl EarlyLintPass for EarlyAttributes {\n@@ -661,6 +686,7 @@ impl EarlyLintPass for EarlyAttributes {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n         check_deprecated_cfg_attr(cx, attr, &self.msrv);\n         check_mismatched_target_os(cx, attr);\n+        check_minimal_cfg_condition(cx, attr);\n     }\n \n     extract_msrv_attr!(EarlyContext);\n@@ -750,6 +776,48 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: &Msr\n     }\n }\n \n+fn check_nested_cfg(cx: &EarlyContext<'_>, items: &[NestedMetaItem]) {\n+    for item in items.iter() {\n+        if let NestedMetaItem::MetaItem(meta) = item {\n+            if !meta.has_name(sym::any) && !meta.has_name(sym::all) {\n+                continue;\n+            }\n+            if let MetaItemKind::List(list) = &meta.kind {\n+                check_nested_cfg(cx, list);\n+                if list.len() == 1 {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_MINIMAL_CFG,\n+                        meta.span,\n+                        \"unneeded sub `cfg` when there is only one condition\",\n+                        |diag| {\n+                            if let Some(snippet) = snippet_opt(cx, list[0].span()) {\n+                                diag.span_suggestion(meta.span, \"try\", snippet, Applicability::MaybeIncorrect);\n+                            }\n+                        },\n+                    );\n+                } else if list.is_empty() && meta.has_name(sym::all) {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_MINIMAL_CFG,\n+                        meta.span,\n+                        \"unneeded sub `cfg` when there is no condition\",\n+                        |_| {},\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_minimal_cfg_condition(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    if attr.has_name(sym::cfg) &&\n+        let Some(items) = attr.meta_item_list()\n+    {\n+        check_nested_cfg(cx, &items);\n+    }\n+}\n+\n fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n     fn find_os(name: &str) -> Option<&'static str> {\n         UNIX_SYSTEMS"}, {"sha": "aee43edc4780d63265237c4dc8e90d02c66983d3", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -52,6 +52,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::attrs::EMPTY_LINE_AFTER_OUTER_ATTR_INFO,\n     crate::attrs::INLINE_ALWAYS_INFO,\n     crate::attrs::MISMATCHED_TARGET_OS_INFO,\n+    crate::attrs::NON_MINIMAL_CFG_INFO,\n     crate::attrs::USELESS_ATTRIBUTE_INFO,\n     crate::await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE_INFO,\n     crate::await_holding_invalid::AWAIT_HOLDING_LOCK_INFO,"}, {"sha": "430caafb33e12fb0814cc30b927864f2218da6f9", "filename": "tests/ui/non_minimal_cfg.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_minimal_cfg.fixed?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -0,0 +1,17 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+\n+#[cfg(windows)]\n+fn hermit() {}\n+\n+#[cfg(windows)]\n+fn wasi() {}\n+\n+#[cfg(all(unix, not(windows)))]\n+fn the_end() {}\n+\n+#[cfg(any())]\n+fn any() {}\n+\n+fn main() {}"}, {"sha": "a38ce1c21d6e3528b32dac35afcfe64e0743e75e", "filename": "tests/ui/non_minimal_cfg.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_minimal_cfg.rs?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -0,0 +1,17 @@\n+//@run-rustfix\n+\n+#![allow(unused)]\n+\n+#[cfg(all(windows))]\n+fn hermit() {}\n+\n+#[cfg(any(windows))]\n+fn wasi() {}\n+\n+#[cfg(all(any(unix), all(not(windows))))]\n+fn the_end() {}\n+\n+#[cfg(any())]\n+fn any() {}\n+\n+fn main() {}"}, {"sha": "cdfd728aa6115122aca56e4c625d04844ce1b66a", "filename": "tests/ui/non_minimal_cfg.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_minimal_cfg.stderr?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -0,0 +1,28 @@\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:5:7\n+   |\n+LL | #[cfg(all(windows))]\n+   |       ^^^^^^^^^^^^ help: try: `windows`\n+   |\n+   = note: `-D clippy::non-minimal-cfg` implied by `-D warnings`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:8:7\n+   |\n+LL | #[cfg(any(windows))]\n+   |       ^^^^^^^^^^^^ help: try: `windows`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:11:11\n+   |\n+LL | #[cfg(all(any(unix), all(not(windows))))]\n+   |           ^^^^^^^^^ help: try: `unix`\n+\n+error: unneeded sub `cfg` when there is only one condition\n+  --> $DIR/non_minimal_cfg.rs:11:22\n+   |\n+LL | #[cfg(all(any(unix), all(not(windows))))]\n+   |                      ^^^^^^^^^^^^^^^^^ help: try: `not(windows)`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a4c6abce3876449de135ec42e71aaf966e05b944", "filename": "tests/ui/non_minimal_cfg2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_minimal_cfg2.rs?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -0,0 +1,6 @@\n+#![allow(unused)]\n+\n+#[cfg(all())]\n+fn all() {}\n+\n+fn main() {}"}, {"sha": "2a9a36fbcef315fed291e970acaac0641ec27046", "filename": "tests/ui/non_minimal_cfg2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/940ffdfd1eb938d0c1f0222e8e56c99cac9d4601/tests%2Fui%2Fnon_minimal_cfg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_minimal_cfg2.stderr?ref=940ffdfd1eb938d0c1f0222e8e56c99cac9d4601", "patch": "@@ -0,0 +1,10 @@\n+error: unneeded sub `cfg` when there is no condition\n+  --> $DIR/non_minimal_cfg2.rs:3:7\n+   |\n+LL | #[cfg(all())]\n+   |       ^^^^^\n+   |\n+   = note: `-D clippy::non-minimal-cfg` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}