{"sha": "60cca839753b1e88567364dc3b632e136aa35bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2NhODM5NzUzYjFlODg1NjczNjRkYzNiNjMyZTEzNmFhMzViYzY=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-04T01:54:23Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-02-04T01:54:23Z"}, "message": "faster spans", "tree": {"sha": "70df3204e3ddad5c4bae1708cb3f5f9cb81dfb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70df3204e3ddad5c4bae1708cb3f5f9cb81dfb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60cca839753b1e88567364dc3b632e136aa35bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60cca839753b1e88567364dc3b632e136aa35bc6", "html_url": "https://github.com/rust-lang/rust/commit/60cca839753b1e88567364dc3b632e136aa35bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60cca839753b1e88567364dc3b632e136aa35bc6/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "html_url": "https://github.com/rust-lang/rust/commit/6ad11e2e25919b75ebbc36d7910f2a1126a7e873"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "79c5c7f110c4f39bf3e5a91ce3cd7dc9611437a7", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60cca839753b1e88567364dc3b632e136aa35bc6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cca839753b1e88567364dc3b632e136aa35bc6/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=60cca839753b1e88567364dc3b632e136aa35bc6", "patch": "@@ -22,6 +22,7 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(option_expect_none)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "298c995b1660b1320ba7b055552855c8294241a8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/60cca839753b1e88567364dc3b632e136aa35bc6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cca839753b1e88567364dc3b632e136aa35bc6/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=60cca839753b1e88567364dc3b632e136aa35bc6", "patch": "@@ -539,7 +539,7 @@ impl SourceMap {\n \n     pub fn is_line_before_span_empty(&self, sp: Span) -> bool {\n         match self.span_to_prev_source(sp) {\n-            Ok(s) => s.split('\\n').last().map_or(false, |l| l.trim_start().is_empty()),\n+            Ok(s) => s.rsplit_once('\\n').unwrap_or((\"\", &s)).1.trim_start().is_empty(),\n             Err(_) => false,\n         }\n     }\n@@ -632,10 +632,11 @@ impl SourceMap {\n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n         match self.span_to_prev_source(sp) {\n             Err(_) => None,\n-            Ok(source) => source\n-                .split('\\n')\n-                .last()\n-                .map(|last_line| last_line.len() - last_line.trim_start().len()),\n+            Ok(source) => {\n+                let last_line = source.rsplit_once('\\n').unwrap_or((\"\", &source)).1;\n+\n+                Some(last_line.len() - last_line.trim_start().len())\n+            }\n         }\n     }\n \n@@ -651,7 +652,7 @@ impl SourceMap {\n     pub fn span_extend_to_prev_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n             let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\");\n-            if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+            if !prev_source.is_empty() && (accept_newlines || !prev_source.contains('\\n')) {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n         }\n@@ -673,7 +674,7 @@ impl SourceMap {\n                 let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n                 if prev_source.is_empty() && sp.lo().0 != 0 {\n                     return sp.with_lo(BytePos(sp.lo().0 - 1));\n-                } else if !prev_source.contains('\\n') || accept_newlines {\n+                } else if accept_newlines || !prev_source.contains('\\n') {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n             }\n@@ -693,7 +694,7 @@ impl SourceMap {\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {\n             let next_source = next_source.split(c).next().unwrap_or(\"\");\n-            if !next_source.is_empty() && (!next_source.contains('\\n') || accept_newlines) {\n+            if !next_source.is_empty() && (accept_newlines || !next_source.contains('\\n')) {\n                 return sp.with_hi(BytePos(sp.hi().0 + next_source.len() as u32));\n             }\n         }"}]}