{"sha": "58e597e1f7a3d08ea25651f6c6cb35bf18df5820", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTU5N2UxZjdhM2QwOGVhMjU2NTFmNmM2Y2IzNWJmMThkZjU4MjA=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-27T10:22:17Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:51Z"}, "message": "make rangeargument methods non-default; simplify impl", "tree": {"sha": "9695f308fabc0af939b72f9507eb1d79019cd264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9695f308fabc0af939b72f9507eb1d79019cd264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e597e1f7a3d08ea25651f6c6cb35bf18df5820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e597e1f7a3d08ea25651f6c6cb35bf18df5820", "html_url": "https://github.com/rust-lang/rust/commit/58e597e1f7a3d08ea25651f6c6cb35bf18df5820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e597e1f7a3d08ea25651f6c6cb35bf18df5820/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54a3487fc53017661a82aeec8b2d1794ae4fce0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a3487fc53017661a82aeec8b2d1794ae4fce0f", "html_url": "https://github.com/rust-lang/rust/commit/54a3487fc53017661a82aeec8b2d1794ae4fce0f"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "1df4ace377707d286fafc9a243a65c9557d30d12", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58e597e1f7a3d08ea25651f6c6cb35bf18df5820/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e597e1f7a3d08ea25651f6c6cb35bf18df5820/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=58e597e1f7a3d08ea25651f6c6cb35bf18df5820", "patch": "@@ -41,9 +41,7 @@ pub trait RangeArgument<T: ?Sized> {\n     /// assert_eq!((3..10).start(), Included(&3));\n     /// # }\n     /// ```\n-    fn start(&self) -> Bound<&T> {\n-        Unbounded\n-    }\n+    fn start(&self) -> Bound<&T>;\n \n     /// End index bound\n     ///\n@@ -66,22 +64,33 @@ pub trait RangeArgument<T: ?Sized> {\n     /// assert_eq!((3..10).end(), Excluded(&10));\n     /// # }\n     /// ```\n-    fn end(&self) -> Bound<&T> {\n-        Unbounded\n-    }\n+    fn end(&self) -> Bound<&T>;\n }\n \n // FIXME add inclusive ranges to RangeArgument\n \n-impl<T: ?Sized> RangeArgument<T> for RangeFull {}\n+impl<T: ?Sized> RangeArgument<T> for RangeFull {\n+    fn start(&self) -> Bound<&T> {\n+        Unbounded\n+    }\n+    fn end(&self) -> Bound<&T> {\n+        Unbounded\n+    }\n+}\n \n impl<T> RangeArgument<T> for RangeFrom<T> {\n     fn start(&self) -> Bound<&T> {\n         Included(&self.start)\n     }\n+    fn end(&self) -> Bound<&T> {\n+        Unbounded\n+    }\n }\n \n impl<T> RangeArgument<T> for RangeTo<T> {\n+    fn start(&self) -> Bound<&T> {\n+        Unbounded\n+    }\n     fn end(&self) -> Bound<&T> {\n         Excluded(&self.end)\n     }\n@@ -116,18 +125,10 @@ impl<T> RangeArgument<T> for (Bound<T>, Bound<T>) {\n \n impl<'a, T: ?Sized + 'a> RangeArgument<T> for (Bound<&'a T>, Bound<&'a T>) {\n     fn start(&self) -> Bound<&T> {\n-        match *self {\n-            (Included(start), _) => Included(start),\n-            (Excluded(start), _) => Excluded(start),\n-            (Unbounded, _)       => Unbounded,\n-        }\n+        self.0\n     }\n \n     fn end(&self) -> Bound<&T> {\n-        match *self {\n-            (_, Included(end)) => Included(end),\n-            (_, Excluded(end)) => Excluded(end),\n-            (_, Unbounded)     => Unbounded,\n-        }\n+        self.1\n     }\n }"}]}