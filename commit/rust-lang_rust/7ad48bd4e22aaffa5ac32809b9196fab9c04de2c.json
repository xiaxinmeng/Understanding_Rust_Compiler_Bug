{"sha": "7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "node_id": "C_kwDOAAsO6NoAKDdhZDQ4YmQ0ZTIyYWFmZmE1YWMzMjgwOWI5MTk2ZmFiOWMwNGRlMmM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-01-15T02:21:40Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-02-07T20:07:03Z"}, "message": "Change inference var check to be in project_type", "tree": {"sha": "7f104f51d9c3cc783c369204a97dff84d4022eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f104f51d9c3cc783c369204a97dff84d4022eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "html_url": "https://github.com/rust-lang/rust/commit/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3602e0e262275c898966c45553c406c4873472fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/3602e0e262275c898966c45553c406c4873472fe", "html_url": "https://github.com/rust-lang/rust/commit/3602e0e262275c898966c45553c406c4873472fe"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "b594723aa0bd2790ffa768ee570d1bc92856000a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -2470,7 +2470,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n-                        trait_ref.self_ty().skip_binder(),\n+                        trait_pred.self_ty().skip_binder(),\n                         &self.fresh_substs_for_item(span, item_def_id)[1..],\n                     ),\n                     // `Future::Output`"}, {"sha": "36cc14610cb4b8d5d7c3a4651f4a619fe9dfeb7b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -1073,6 +1073,16 @@ fn project<'cx, 'tcx>(\n         return Ok(Projected::Progress(Progress::error(selcx.tcx())));\n     }\n \n+    // If the obligation contains any inference types or consts in associated\n+    // type substs, then we don't assemble any candidates.\n+    // This isn't really correct, but otherwise we can end up in a case where\n+    // we constrain inference variables by selecting a single predicate, when\n+    // we need to stay general. See issue #91762.\n+    let (_, predicate_own_substs) = obligation.predicate.trait_ref_and_own_substs(selcx.tcx());\n+    if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n+        return Err(ProjectionError::TooManyCandidates);\n+    }\n+\n     let mut candidates = ProjectionCandidateSet::None;\n \n     // Make sure that the following procedures are kept in order. ParamEnv"}, {"sha": "47427395b93b36adff83c8dda2f9034cc12346bf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -1521,16 +1521,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             infer_predicate.projection_ty\n         };\n \n-        // If the obligation contains any inference types or consts in associated\n-        // type substs, then we don't match any projection candidates against it.\n-        // This isn't really correct, but otherwise we can end up in a case where\n-        // we constrain inference variables by selecting a single predicate, when\n-        // we need to stay general. See issue #91762.\n-        let (_, predicate_own_substs) =\n-            obligation.predicate.trait_ref_and_own_substs(self.infcx.tcx);\n-        if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n-            return false;\n-        }\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(obligation.predicate, infer_projection)"}, {"sha": "01f99fa448749fdd3a346d844e678c290dec8e73", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -17,6 +17,7 @@ impl<T> UnsafeCopy for T {}\n fn main() {\n     let b = Box::new(42usize);\n     let copy = <()>::copy(&b);\n+    //~^ type annotations needed\n \n     let raw_b = Box::deref(&b) as *const _;\n     let raw_copy = Box::deref(&copy) as *const _;"}, {"sha": "e7ebf5964ba4125d0e05d8d54a65d90de213b621", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -27,6 +27,13 @@ help: consider restricting type parameter `T`\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n    |                +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-74824.rs:19:16\n+   |\n+LL |     let copy = <()>::copy(&b);\n+   |                ^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `copy`\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0282.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b259a3c6e06bc7248985b19f64f8c4d953cf7ca3", "filename": "src/test/ui/generic-associated-types/issue-91762.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -23,7 +23,7 @@ pub trait FunctorExt<T>: Sized {\n \n         arg = self;\n         ret = <Self::Base as Functor>::fmap(arg);\n-        //~^ mismatched types\n+        //~^ type annotations needed\n     }\n }\n "}, {"sha": "a9c465cdd7ea2eb999926995e6d1d43ccd7f8701", "filename": "src/test/ui/generic-associated-types/issue-91762.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ad48bd4e22aaffa5ac32809b9196fab9c04de2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr?ref=7ad48bd4e22aaffa5ac32809b9196fab9c04de2c", "patch": "@@ -1,22 +1,9 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-91762.rs:25:45\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-91762.rs:25:15\n    |\n-LL | / pub trait FunctorExt<T>: Sized {\n-LL | |     type Base: Functor<With<T> = Self>;\n-LL | |\n-LL | |     fn fmap<U>(self) {\n-...  |\n-LL | |         ret = <Self::Base as Functor>::fmap(arg);\n-   | |                                             ^^^ expected associated type, found type parameter `Self`\n-LL | |\n-LL | |     }\n-LL | | }\n-   | |_- this type parameter\n-   |\n-   = note: expected associated type `<<Self as FunctorExt<T>>::Base as Functor>::With<_>`\n-               found type parameter `Self`\n-   = note: you might be missing a type parameter or trait bound\n+LL |         ret = <Self::Base as Functor>::fmap(arg);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `fmap`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0282`."}]}