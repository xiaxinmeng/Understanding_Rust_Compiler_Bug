{"sha": "e490c17eb5d85d6b968d91b2ca93f3607934e78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTBjMTdlYjVkODVkNmI5NjhkOTFiMmNhOTNmMzYwNzkzNGU3OGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-03T09:16:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-03T09:16:41Z"}, "message": "Rollup merge of #25974 - richo:stack-msg, r=alexcrichton\n\nThese are implemented in asm, they're just not inlined.\r\n\r\nOpen questions are:\r\n* Should I just inline them? They're.. big, but it seems as though this needs violates the #[inline(always)] gaurantees the others make.\r\n* Does something (llvm?) provide these as intrinsics? The structure of this code suggests that we could be hoisting off something else, instead of flagrantly ignoring it like we do for power and mips.", "tree": {"sha": "5f5ba78b6cf176d8cef8cb89c3c1a7af04aeac9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5ba78b6cf176d8cef8cb89c3c1a7af04aeac9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e490c17eb5d85d6b968d91b2ca93f3607934e78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e490c17eb5d85d6b968d91b2ca93f3607934e78d", "html_url": "https://github.com/rust-lang/rust/commit/e490c17eb5d85d6b968d91b2ca93f3607934e78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e490c17eb5d85d6b968d91b2ca93f3607934e78d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27dd5e9ce9ad87c4273157154f4b3907cd529a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dd5e9ce9ad87c4273157154f4b3907cd529a53", "html_url": "https://github.com/rust-lang/rust/commit/27dd5e9ce9ad87c4273157154f4b3907cd529a53"}, {"sha": "506d5a8d1946d53f6d052c5b7d6c6d50caa4ff0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/506d5a8d1946d53f6d052c5b7d6c6d50caa4ff0a", "html_url": "https://github.com/rust-lang/rust/commit/506d5a8d1946d53f6d052c5b7d6c6d50caa4ff0a"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "11982ebc572e5b3dc571d8a0726d7b5d5583ff8b", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e490c17eb5d85d6b968d91b2ca93f3607934e78d/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e490c17eb5d85d6b968d91b2ca93f3607934e78d/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=e490c17eb5d85d6b968d91b2ca93f3607934e78d", "patch": "@@ -139,7 +139,6 @@ pub unsafe fn record_os_managed_stack_bounds(stack_lo: usize, _stack_hi: usize)\n pub unsafe fn record_sp_limit(limit: usize) {\n     return target_record_sp_limit(limit);\n \n-    // x86-64\n     #[cfg(all(target_arch = \"x86_64\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -164,7 +163,6 @@ pub unsafe fn record_sp_limit(limit: usize) {\n         asm!(\"movq $0, %fs:32\" :: \"r\"(limit) :: \"volatile\")\n     }\n \n-    // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -182,8 +180,8 @@ pub unsafe fn record_sp_limit(limit: usize) {\n     unsafe fn target_record_sp_limit(_: usize) {\n     }\n \n-    // mips, arm - Some brave soul can port these to inline asm, but it's over\n-    //             my head personally\n+    // mips, arm - The implementations are a bit big for inline asm!\n+    //             They can be found in src/rt/arch/$target_arch/record_sp.S\n     #[cfg(any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               all(target_arch = \"arm\", not(target_os = \"ios\"))))]\n@@ -221,7 +219,6 @@ pub unsafe fn record_sp_limit(limit: usize) {\n pub unsafe fn get_sp_limit() -> usize {\n     return target_get_sp_limit();\n \n-    // x86-64\n     #[cfg(all(target_arch = \"x86_64\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -255,7 +252,6 @@ pub unsafe fn get_sp_limit() -> usize {\n         return limit;\n     }\n \n-    // x86\n     #[cfg(all(target_arch = \"x86\",\n               any(target_os = \"macos\", target_os = \"ios\")))]\n     #[inline(always)]\n@@ -278,8 +274,8 @@ pub unsafe fn get_sp_limit() -> usize {\n         return 1024;\n     }\n \n-    // mips, arm - Some brave soul can port these to inline asm, but it's over\n-    //             my head personally\n+    // mips, arm - The implementations are a bit big for inline asm!\n+    //             They can be found in src/rt/arch/$target_arch/record_sp.S\n     #[cfg(any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               all(target_arch = \"arm\", not(target_os = \"ios\"))))]"}]}