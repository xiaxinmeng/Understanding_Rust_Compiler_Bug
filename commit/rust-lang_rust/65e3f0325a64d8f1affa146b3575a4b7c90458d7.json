{"sha": "65e3f0325a64d8f1affa146b3575a4b7c90458d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTNmMDMyNWE2NGQ4ZjFhZmZhMTQ2YjM1NzVhNGI3YzkwNDU4ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T22:48:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T22:48:46Z"}, "message": "std: Destabilize the internals of panic!\n\nNow that we have a `#[allow_internal_unstable]` attribute for macros there's no\nneed for these two `begin_unwind` functions to be stable. Right now the `panic!`\ninterface is the only one we wish to stabilize, so remove the stability markers\nfrom these functions.\n\nWhile this is a breaking change, it is highly unlikely to break any actual code.\nIt is recommended to use the `panic!` macro instead if it breaks explicit calls\ninto `std::rt`.\n\n[breaking-change]\ncc #24208", "tree": {"sha": "c15a4c19ec50853c86def66321277123bb9b8119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15a4c19ec50853c86def66321277123bb9b8119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e3f0325a64d8f1affa146b3575a4b7c90458d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e3f0325a64d8f1affa146b3575a4b7c90458d7", "html_url": "https://github.com/rust-lang/rust/commit/65e3f0325a64d8f1affa146b3575a4b7c90458d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e3f0325a64d8f1affa146b3575a4b7c90458d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926f38e588bb99aff1902fa94ab82b1db89cbbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/926f38e588bb99aff1902fa94ab82b1db89cbbce", "html_url": "https://github.com/rust-lang/rust/commit/926f38e588bb99aff1902fa94ab82b1db89cbbce"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "3d10c151f80d6b4266375aa48ea747cca6543b48", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65e3f0325a64d8f1affa146b3575a4b7c90458d7/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3f0325a64d8f1affa146b3575a4b7c90458d7/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=65e3f0325a64d8f1affa146b3575a4b7c90458d7", "patch": "@@ -37,6 +37,7 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")"}, {"sha": "2f58a437eb4727992d192b058e58e2b6cef0aff1", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e3f0325a64d8f1affa146b3575a4b7c90458d7/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3f0325a64d8f1affa146b3575a4b7c90458d7/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=65e3f0325a64d8f1affa146b3575a4b7c90458d7", "patch": "@@ -495,7 +495,6 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize)) -> ! {\n     use fmt::Write;\n \n@@ -511,7 +510,6 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize))\n \n /// This is the entry point of unwinding for panic!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n@@ -598,7 +596,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n /// Only a limited number of callbacks can be registered, and this function\n /// returns whether the callback was successfully registered or not. It is not\n /// currently possible to unregister a callback once it has been registered.\n-#[unstable(feature = \"std_misc\")]\n pub unsafe fn register(f: Callback) -> bool {\n     match CALLBACK_CNT.fetch_add(1, Ordering::SeqCst) {\n         // The invocation code has knowledge of this window where the count has"}]}