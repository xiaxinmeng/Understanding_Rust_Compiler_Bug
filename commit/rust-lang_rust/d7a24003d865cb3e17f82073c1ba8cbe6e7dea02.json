{"sha": "d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "node_id": "C_kwDOAAsO6NoAKGQ3YTI0MDAzZDg2NWNiM2UxN2Y4MjA3M2MxYmE4Y2JlNmU3ZGVhMDI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-02T01:34:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T01:34:21Z"}, "message": "Rollup merge of #95354 - dtolnay:rustc_const_stable, r=lcnr\n\nHandle rustc_const_stable attribute in library feature collector\n\nThe library feature collector in [compiler/rustc_passes/src/lib_features.rs](https://github.com/rust-lang/rust/blob/551b4fa395fa588d91cbecfb0cdfe1baa02670cf/compiler/rustc_passes/src/lib_features.rs) has only been looking at `#[stable(\u2026)]`, `#[unstable(\u2026)]`, and `#[rustc_const_unstable(\u2026)]` attributes, while ignoring `#[rustc_const_stable(\u2026)]`. The consequences of this were:\n\n- When any const feature got stabilized (changing one or more `rustc_const_unstable` to `rustc_const_stable`), users who had previously enabled that unstable feature using `#![feature(\u2026)]` would get told \"unknown feature\", rather than rustc's nicer \"the feature \u2026 has been stable since \u2026 and no longer requires an attribute to enable\".\n\n    This can be seen in the way that https://github.com/rust-lang/rust/pull/93957#issuecomment-1079794660 failed after rebase:\n\n    ```console\n    error[E0635]: unknown feature `const_ptr_offset`\n      --> $DIR/offset_from_ub.rs:1:35\n       |\n    LL | #![feature(const_ptr_offset_from, const_ptr_offset)]\n       |                                   ^^^^^^^^^^^^^^^^\n    ```\n\n- We weren't enforcing that a particular feature is either stable everywhere or unstable everywhere, and that a feature that has been stabilized has the same stabilization version everywhere, both of which we enforce for the other stability attributes.\n\nThis PR updates the library feature collector to handle `rustc_const_stable`, and fixes places in the standard library and test suite where `rustc_const_stable` was being used in a way that does not meet the rules for a stability attribute.", "tree": {"sha": "a5c7414f48d1282a3679649737045df6289314d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c7414f48d1282a3679649737045df6289314d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiR6gdCRBK7hj4Ov3rIwAAEn8IAJKLVKbudI5WmydkXKge6d/U\n12VMa6B5Nuqey8PAvWsG0WKXHCx819CA73AVoXmH2kvp5bul0WQYG877uarLeXDX\n23dIhdbFnGpHtCVk8h+mkZZFoZk4BS/7RwMoaa587mrqr4nHiYiisKosZTpl3TTA\nf/i5CwtAtlVfVr5VGS7qpwRcBiYtwIKFbQKzLhfB4e1uZHwP3g+A7F6WCfLDD9OG\nrXyvcvUqV1frG7ULnxMp35QID1VjG8/2G3PE+tJ9bptHpn30JvCu5BQtrMG7G3Uv\n7ERBfZYVZLcILC2etd6BHFNCeIDW6kV7T14lbJ0dzHjmcZVR+HAmo7+WVtlx5UU=\n=I2qR\n-----END PGP SIGNATURE-----\n", "payload": "tree a5c7414f48d1282a3679649737045df6289314d8\nparent eb82facb1626166188d49599a3313fc95201f556\nparent 971ecff70fbaea5f43f979289e9becd5d4fc4b48\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648863261 +0200\ncommitter GitHub <noreply@github.com> 1648863261 +0200\n\nRollup merge of #95354 - dtolnay:rustc_const_stable, r=lcnr\n\nHandle rustc_const_stable attribute in library feature collector\n\nThe library feature collector in [compiler/rustc_passes/src/lib_features.rs](https://github.com/rust-lang/rust/blob/551b4fa395fa588d91cbecfb0cdfe1baa02670cf/compiler/rustc_passes/src/lib_features.rs) has only been looking at `#[stable(\u2026)]`, `#[unstable(\u2026)]`, and `#[rustc_const_unstable(\u2026)]` attributes, while ignoring `#[rustc_const_stable(\u2026)]`. The consequences of this were:\n\n- When any const feature got stabilized (changing one or more `rustc_const_unstable` to `rustc_const_stable`), users who had previously enabled that unstable feature using `#![feature(\u2026)]` would get told \"unknown feature\", rather than rustc's nicer \"the feature \u2026 has been stable since \u2026 and no longer requires an attribute to enable\".\n\n    This can be seen in the way that https://github.com/rust-lang/rust/pull/93957#issuecomment-1079794660 failed after rebase:\n\n    ```console\n    error[E0635]: unknown feature `const_ptr_offset`\n      --> $DIR/offset_from_ub.rs:1:35\n       |\n    LL | #![feature(const_ptr_offset_from, const_ptr_offset)]\n       |                                   ^^^^^^^^^^^^^^^^\n    ```\n\n- We weren't enforcing that a particular feature is either stable everywhere or unstable everywhere, and that a feature that has been stabilized has the same stabilization version everywhere, both of which we enforce for the other stability attributes.\n\nThis PR updates the library feature collector to handle `rustc_const_stable`, and fixes places in the standard library and test suite where `rustc_const_stable` was being used in a way that does not meet the rules for a stability attribute.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "html_url": "https://github.com/rust-lang/rust/commit/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb82facb1626166188d49599a3313fc95201f556", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb82facb1626166188d49599a3313fc95201f556", "html_url": "https://github.com/rust-lang/rust/commit/eb82facb1626166188d49599a3313fc95201f556"}, {"sha": "971ecff70fbaea5f43f979289e9becd5d4fc4b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/971ecff70fbaea5f43f979289e9becd5d4fc4b48", "html_url": "https://github.com/rust-lang/rust/commit/971ecff70fbaea5f43f979289e9becd5d4fc4b48"}], "stats": {"total": 137, "additions": 69, "deletions": 68}, "files": [{"sha": "c414d7c031c0471b34b3ca68b217ec5303e25ee5", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -29,10 +29,11 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n-        let stab_attrs = [sym::stable, sym::unstable, sym::rustc_const_unstable];\n+        let stab_attrs =\n+            [sym::stable, sym::unstable, sym::rustc_const_stable, sym::rustc_const_unstable];\n \n-        // Find a stability attribute (i.e., `#[stable (..)]`, `#[unstable (..)]`,\n-        // `#[rustc_const_unstable (..)]`).\n+        // Find a stability attribute: one of #[stable(\u2026)], #[unstable(\u2026)],\n+        // #[rustc_const_stable(\u2026)], or #[rustc_const_unstable(\u2026)].\n         if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| attr.has_name(**stab_attr)) {\n             let meta_kind = attr.meta_kind();\n             if let Some(MetaItemKind::List(ref metas)) = meta_kind {\n@@ -52,7 +53,9 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                     // This additional check for stability is to make sure we\n                     // don't emit additional, irrelevant errors for malformed\n                     // attributes.\n-                    if *stab_attr != sym::stable || since.is_some() {\n+                    let is_unstable =\n+                        matches!(*stab_attr, sym::unstable | sym::rustc_const_unstable);\n+                    if since.is_some() || is_unstable {\n                         return Some((feature, since, attr.span));\n                     }\n                 }"}, {"sha": "db6898c1308a20b9ca71e5fb5efb35bf2071c6fe", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -56,7 +56,7 @@ impl Layout {\n     ///    must not overflow (i.e., the rounded value must be less than\n     ///    or equal to `usize::MAX`).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_alloc_layout_size_align\", since = \"1.50.0\")]\n     #[inline]\n     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n@@ -93,7 +93,7 @@ impl Layout {\n     /// This function is unsafe as it does not verify the preconditions from\n     /// [`Layout::from_size_align`].\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[rustc_const_stable(feature = \"alloc_layout\", since = \"1.36.0\")]\n+    #[rustc_const_stable(feature = \"const_alloc_layout_unchecked\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n@@ -103,7 +103,7 @@ impl Layout {\n \n     /// The minimum size in bytes for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_alloc_layout_size_align\", since = \"1.50.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn size(&self) -> usize {\n@@ -112,7 +112,7 @@ impl Layout {\n \n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-    #[rustc_const_stable(feature = \"const_alloc_layout\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_alloc_layout_size_align\", since = \"1.50.0\")]\n     #[must_use = \"this returns the minimum alignment, \\\n                   without modifying the layout\"]\n     #[inline]"}, {"sha": "3195205b1b6776a087b07be6dddc396619a8625e", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -1092,7 +1092,7 @@ impl char {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_char_is_ascii\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F"}, {"sha": "474a632773fb810f89a3b0b802a276f831679105", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -1638,7 +1638,7 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = unsafe { cttz_nonzero(x) };\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_cttz\", since = \"1.53.0\")]\n+    #[rustc_const_stable(feature = \"const_cttz_nonzero\", since = \"1.53.0\")]\n     pub fn cttz_nonzero<T: Copy>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`.\n@@ -1718,15 +1718,15 @@ extern \"rust-intrinsic\" {\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`u32::checked_div`]\n-    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.52.0\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_div\", since = \"1.52.0\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior when `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n     /// [`u32::checked_rem`]\n-    #[rustc_const_stable(feature = \"const_int_unchecked_arith\", since = \"1.52.0\")]\n+    #[rustc_const_stable(feature = \"const_int_unchecked_rem\", since = \"1.52.0\")]\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when"}, {"sha": "7dfcc36ce9391284021c9253eb32dc625e58b12d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -97,7 +97,6 @@\n // Library features:\n #![feature(const_align_offset)]\n #![feature(const_align_of_val)]\n-#![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n #![feature(const_array_into_iter_constructors)]\n #![feature(const_bigint_helper_methods)]"}, {"sha": "58d682fc4c8d4b31cb53e0541e48f063f94864fb", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -622,7 +622,7 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init_by_value\", since = \"1.59.0\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     #[track_caller]\n@@ -788,7 +788,7 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n-    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init_ref\", since = \"1.59.0\")]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized."}, {"sha": "005f8749e01e6791347eb09530281e0d650cfcfa", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -299,7 +299,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n+#[rustc_const_stable(feature = \"const_mem_size_of\", since = \"1.24.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of\")]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n@@ -581,7 +581,7 @@ pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[inline]\n #[must_use]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n-#[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n+#[rustc_const_stable(feature = \"const_mem_needs_drop\", since = \"1.36.0\")]\n #[rustc_diagnostic_item = \"needs_drop\"]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()"}, {"sha": "ec460286d0378f9d471991647d53b41777337488", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -270,7 +270,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(0, 0\", stringify!($SelfT), \".reverse_bits());\")]\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n-        #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.37.0\")]\n+        #[rustc_const_stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n@@ -603,7 +603,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -656,7 +656,7 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "8cbece0417b0788b53fea2a686f0e53269c5516d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -281,7 +281,7 @@ impl u8 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.43.0\")]\n+    #[rustc_const_stable(feature = \"const_u8_is_ascii\", since = \"1.43.0\")]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n         *self & 128 == 0"}, {"sha": "0ffbde33a0d1e5dc75f75069b10f7ca7b369bd90", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -74,7 +74,7 @@ macro_rules! nonzero_integers {\n                 /// Returns the value as a primitive type.\n                 #[$stability]\n                 #[inline]\n-                #[rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_get\", since = \"1.34.0\")]\n                 pub const fn get(self) -> $Int {\n                     self.0\n                 }"}, {"sha": "514ac69f7e049f8e69f669dbeacab77e89456d8b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -273,7 +273,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(0, 0\", stringify!($SelfT), \".reverse_bits());\")]\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n-        #[rustc_const_stable(feature = \"const_math\", since = \"1.37.0\")]\n+        #[rustc_const_stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n@@ -591,7 +591,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\")]\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -642,7 +642,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\")]\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.52.0\")]\n+        #[rustc_const_stable(feature = \"const_checked_int_div\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "b5ca9e35dced13fcfb702b23f77dc803951e982e", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -549,7 +549,7 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_option_basics\", since = \"1.48.0\")]\n     pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n     }\n@@ -592,7 +592,7 @@ impl<T> Option<T> {\n                   `.and_then(|_| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_option_basics\", since = \"1.48.0\")]\n     pub const fn is_none(&self) -> bool {\n         !self.is_some()\n     }\n@@ -621,7 +621,7 @@ impl<T> Option<T> {\n     /// println!(\"still can print text: {text:?}\");\n     /// ```\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_option_basics\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn as_ref(&self) -> Option<&T> {\n         match *self {"}, {"sha": "e2a19c1b5818e1e073aa2f70c0ca8798405ae766", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -510,7 +510,7 @@ pub const fn null_mut<T>() -> *mut T {\n /// see the [module documentation][crate::ptr] for details.\n #[inline(always)]\n #[must_use]\n-#[rustc_const_stable(feature = \"strict_provenance\", since = \"1.61.0\")]\n+#[rustc_const_stable(feature = \"stable_things_using_strict_provenance\", since = \"1.61.0\")]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid<T>(addr: usize) -> *const T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n@@ -537,7 +537,7 @@ pub const fn invalid<T>(addr: usize) -> *const T {\n /// see the [module documentation][crate::ptr] for details.\n #[inline(always)]\n #[must_use]\n-#[rustc_const_stable(feature = \"strict_provenance\", since = \"1.61.0\")]\n+#[rustc_const_stable(feature = \"stable_things_using_strict_provenance\", since = \"1.61.0\")]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic."}, {"sha": "641749be36637f7f172eccbba6dc0fdf518b8a86", "filename": "library/core/src/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -536,7 +536,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.is_ok(), false);\n     /// ```\n     #[must_use = \"if you intended to assert that this is ok, consider `.unwrap()` instead\"]\n-    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_ok(&self) -> bool {\n@@ -580,7 +580,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.is_err(), true);\n     /// ```\n     #[must_use = \"if you intended to assert that this is err, consider `.unwrap_err()` instead\"]\n-    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_err(&self) -> bool {\n@@ -698,7 +698,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.as_ref(), Err(&\"Error\"));\n     /// ```\n     #[inline]\n-    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n+    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn as_ref(&self) -> Result<&T, &E> {\n         match *self {"}, {"sha": "6285d1c1cbb564ca275bebd8bc609277294434c8", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -2498,7 +2498,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_access\", since = \"1.15.0\"),\n             stable(feature = \"atomic_from\", since = \"1.23.0\"),\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n-            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.24.0\"),\n+            rustc_const_stable(feature = \"const_ptr_sized_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n             \"isize\",\n             \"\",\n@@ -2518,7 +2518,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_access\", since = \"1.15.0\"),\n             stable(feature = \"atomic_from\", since = \"1.23.0\"),\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n-            rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.24.0\"),\n+            rustc_const_stable(feature = \"const_ptr_sized_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n             \"usize\",\n             \"\","}, {"sha": "6c97305b1a8492908c2cd046b6c4b3998d783325", "filename": "library/core/src/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -333,7 +333,7 @@ impl Duration {\n     ///\n     /// [`subsec_nanos`]: Duration::subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n@@ -356,7 +356,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 {\n@@ -379,7 +379,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n-    #[rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 {\n@@ -402,7 +402,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n-    #[rustc_const_stable(feature = \"duration\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 {"}, {"sha": "0d88a88376ab77c4399da5a6d477ffbd2e1b3524", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -13,7 +13,6 @@\n #![feature(const_convert)]\n #![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n-#![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]"}, {"sha": "036f2919976074653f589471a2f24469e873e920", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -235,7 +235,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)).is_unspecified(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)).is_unspecified(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     #[must_use]\n     #[inline]\n@@ -259,7 +259,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).is_loopback(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1)).is_loopback(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     #[must_use]\n     #[inline]\n@@ -309,7 +309,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(224, 254, 0, 0)).is_multicast(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0)).is_multicast(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     #[must_use]\n     #[inline]\n@@ -387,7 +387,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv4(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv4(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     #[must_use]\n     #[inline]\n@@ -408,7 +408,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(203, 0, 113, 6)).is_ipv6(), false);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0)).is_ipv6(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ip\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     #[must_use]\n     #[inline]\n@@ -454,7 +454,7 @@ impl Ipv4Addr {\n     ///\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_32\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n@@ -516,7 +516,7 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n@@ -540,7 +540,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_unspecified(), true);\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_32\", since = \"1.32.0\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     #[must_use]\n     #[inline]\n@@ -562,7 +562,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_loopback(), true);\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_loopback(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -593,7 +593,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 168, 0, 2).is_private(), true);\n     /// assert_eq!(Ipv4Addr::new(192, 169, 0, 2).is_private(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -621,7 +621,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(169, 254, 10, 65).is_link_local(), true);\n     /// assert_eq!(Ipv4Addr::new(16, 89, 10, 65).is_link_local(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -823,7 +823,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_multicast(), true);\n     /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_multicast(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -845,7 +845,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_broadcast(), true);\n     /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_broadcast(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -873,7 +873,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_documentation(), true);\n     /// assert_eq!(Ipv4Addr::new(193, 34, 17, 19).is_documentation(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -901,7 +901,7 @@ impl Ipv4Addr {\n     ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0xc000, 0x2ff)\n     /// );\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n@@ -928,7 +928,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n     ///            Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc000, 0x2ff));\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n@@ -1216,7 +1216,7 @@ impl Ipv6Addr {\n     ///\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_32\", since = \"1.32.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n@@ -1278,7 +1278,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n     ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n@@ -1315,7 +1315,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unspecified(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0).is_unspecified(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -1339,7 +1339,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_loopback(), true);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -1624,7 +1624,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).is_multicast(), true);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_multicast(), false);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     #[must_use]\n     #[inline]\n@@ -1693,7 +1693,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4(),\n     ///            Some(Ipv4Addr::new(0, 0, 0, 1)));\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_50\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n@@ -1740,7 +1740,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).octets(),\n     ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n     /// ```\n-    #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n+    #[rustc_const_stable(feature = \"const_ip_32\", since = \"1.32.0\")]\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n     #[must_use]\n     #[inline]"}, {"sha": "8455dd9ef95f4f4777b6e195691050ece8d8207e", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -64,7 +64,7 @@ impl Foo {\n     // @has 'foo/struct.Foo.html' '//*[@id=\"method.stable_impl\"]/h4[@class=\"code-header\"]' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]\n+    #[rustc_const_stable(feature = \"const2\", since = \"1.2.0\")]\n     pub const fn stable_impl() -> u32 { 42 }\n }\n \n@@ -75,12 +75,12 @@ impl Bar {\n     // Do not show non-const stabilities that are the same as the enclosing item.\n     // @matches 'foo/struct.Bar.html' '//span[@class=\"since\"]' '^const: 1.2.0$'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]\n+    #[rustc_const_stable(feature = \"const2\", since = \"1.2.0\")]\n     pub const fn stable_impl() -> u32 { 42 }\n \n     // Show const-stability even for unstable functions.\n     // @matches 'foo/struct.Bar.html' '//span[@class=\"since\"]' '^const: 1.3.0$'\n     #[unstable(feature = \"foo2\", issue = \"none\")]\n-    #[rustc_const_stable(feature = \"rust1\", since = \"1.3.0\")]\n+    #[rustc_const_stable(feature = \"const3\", since = \"1.3.0\")]\n     pub const fn const_stable_unstable() -> u32 { 42 }\n }"}, {"sha": "38e5c454edf7566677a91f23a006b1a5af0d7114", "filename": "src/test/ui/consts/assert-type-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: any use of this value will cause an error\n \n #![feature(never_type)]\n-#![feature(const_maybe_uninit_assume_init, const_assert_type2)]\n+#![feature(const_assert_type2)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics;"}, {"sha": "3472c05d12fa80ac23d1ee0375a5e549a2d86c34", "filename": "src/test/ui/consts/const-eval/simd/insert_extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a24003d865cb3e17f82073c1ba8cbe6e7dea02/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs?ref=d7a24003d865cb3e17f82073c1ba8cbe6e7dea02", "patch": "@@ -2,7 +2,7 @@\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n #![feature(staged_api)]\n-#![stable(feature = \"foo\", since = \"1.33.7\")]\n+#![stable(feature = \"foo\", since = \"1.3.37\")]\n #![allow(non_camel_case_types)]\n \n #[repr(simd)] struct i8x1(i8);"}]}