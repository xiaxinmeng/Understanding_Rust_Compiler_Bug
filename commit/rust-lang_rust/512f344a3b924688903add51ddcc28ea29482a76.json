{"sha": "512f344a3b924688903add51ddcc28ea29482a76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMmYzNDRhM2I5MjQ2ODg5MDNhZGQ1MWRkY2MyOGVhMjk0ODJhNzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T11:56:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T11:56:38Z"}, "message": "don't force allocate for Misc casts", "tree": {"sha": "e2765874985115e8ff6bdae2647d7dad02284ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2765874985115e8ff6bdae2647d7dad02284ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/512f344a3b924688903add51ddcc28ea29482a76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCgJ2AAoJEFbW7qD8Z6xGW7sQAIEPMpQo/k4/mPvXnJZ6RWZG\nXsBKLDPKj1S30jXOyhcMs6AuFk0yeNfb9RgY3EJ/ytDuF2iSUPaBGNLCpFOhlLUR\nmu/evwEuWz4XtH4h6ksMtlBWKNZ6Nz+uXxs07o8553y/VPqZPdboDmFBenqd8K0U\nrEfUnZNNZ0wY4W+yWCBdThsbXHmVzTkKUICQBKmNy8mH34Zh5W7YioELYo2Pf6Uc\nddi9WwhpoMjqEsLwEGNQNpIRYMM2P6sTqYsx7Vs12E17UjUuGPvJtdsEBXaYZTBF\ndohorN4WFnzASFK/LyB+G9tzdVPRghMnQhJNv7EFraQ+SvFMU0shfi4GYizcSkp9\nAIv7DWbFu/rItHF8LfIfIkMsYV1kyTpaXdkM83c3h3ZBbsGYXvLE6wFB1mJ/R2kW\nQaDZOTeQRpmtLF+Ifja50n8fx+Pq4kU9Gg6jI/uPRdnuxChNXu3wT7sPLB2LYm8D\nVoygkEWoup4ZdA9cXIAbwjPV/SLQMwCEw8J30LwI1tqkKCUNZ5/G92LsjJbgqqRO\nnO1GErkzu4xnZaLGhNwCLWyEyBgrPVSFzTRYTRO3RxDs3QLZ5Yr7sHtqyIh7xVwn\nITB3DtnKvu4obdtETERwhZ4Ru9UvRtlZqc2+GHVN2f3xmTUZajoeopd9btkX23rs\ncyJYQChgwF3ejJRmUFC/\n=J6l0\n-----END PGP SIGNATURE-----", "payload": "tree e2765874985115e8ff6bdae2647d7dad02284ce4\nparent 7f3cb7fdb8e3b79cb0c2b41398e24f94c806aaaa\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477050998 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477050998 +0200\n\ndon't force allocate for Misc casts"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/512f344a3b924688903add51ddcc28ea29482a76", "html_url": "https://github.com/rust-lang/rust/commit/512f344a3b924688903add51ddcc28ea29482a76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/512f344a3b924688903add51ddcc28ea29482a76/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3cb7fdb8e3b79cb0c2b41398e24f94c806aaaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3cb7fdb8e3b79cb0c2b41398e24f94c806aaaa", "html_url": "https://github.com/rust-lang/rust/commit/7f3cb7fdb8e3b79cb0c2b41398e24f94c806aaaa"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "790c73385b9e5bc89933c5e1861a8add3a2209f8", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/512f344a3b924688903add51ddcc28ea29482a76/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/512f344a3b924688903add51ddcc28ea29482a76/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=512f344a3b924688903add51ddcc28ea29482a76", "patch": "@@ -652,13 +652,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Cast(kind, ref operand, cast_ty) => {\n-                // FIXME(solson)\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n                 use rustc::mir::repr::CastKind::*;\n                 match kind {\n                     Unsize => {\n+                        // FIXME(solson)\n+                        let dest = self.force_allocation(dest)?.to_ptr();\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n                         self.unsize_into(src, src_ty, dest, dest_ty)?;\n@@ -669,32 +668,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let src_ty = self.operand_ty(operand);\n                         if self.type_is_fat_ptr(src_ty) {\n                             trace!(\"misc cast: {:?}\", src);\n-                            let ptr_size = self.memory.pointer_size();\n                             match (src, self.type_is_fat_ptr(dest_ty)) {\n-                                (Value::ByValPair(data, meta), true) => {\n-                                    self.memory.write_primval(dest, data)?;\n-                                    self.memory.write_primval(dest.offset(ptr_size as isize), meta)?;\n+                                (Value::ByRef(_), _) |\n+                                (Value::ByValPair(..), true) => {\n+                                    self.write_value(src, dest, dest_ty)?;\n                                 },\n                                 (Value::ByValPair(data, _), false) => {\n-                                    self.memory.write_primval(dest, data)?;\n-                                },\n-                                (Value::ByRef(ptr), true) => {\n-                                    self.memory.copy(ptr, dest, ptr_size * 2, ptr_size)?;\n-                                },\n-                                (Value::ByRef(ptr), false) => {\n-                                    self.memory.copy(ptr, dest, ptr_size, ptr_size)?;\n+                                    self.write_value(Value::ByVal(data), dest, dest_ty)?;\n                                 },\n                                 (Value::ByVal(_), _) => bug!(\"expected fat ptr\"),\n                             }\n                         } else {\n                             let src_val = self.value_to_primval(src, src_ty)?;\n                             let dest_val = self.cast_primval(src_val, dest_ty)?;\n-                            self.memory.write_primval(dest, dest_val)?;\n+                            self.write_value(Value::ByVal(dest_val), dest, dest_ty)?;\n                         }\n                     }\n \n                     ReifyFnPointer => match self.operand_ty(operand).sty {\n                         ty::TyFnDef(def_id, substs, fn_ty) => {\n+                            // FIXME(solson)\n+                            let dest = self.force_allocation(dest)?.to_ptr();\n                             let fn_ptr = self.memory.create_fn_ptr(def_id, substs, fn_ty);\n                             self.memory.write_ptr(dest, fn_ptr)?;\n                         },\n@@ -703,6 +697,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     UnsafeFnPointer => match dest_ty.sty {\n                         ty::TyFnPtr(unsafe_fn_ty) => {\n+                            // FIXME(solson)\n+                            let dest = self.force_allocation(dest)?.to_ptr();\n                             let src = self.eval_operand(operand)?;\n                             let ptr = src.read_ptr(&self.memory)?;\n                             let (def_id, substs, _) = self.memory.get_fn(ptr.alloc_id)?;"}]}