{"sha": "128c634c7f14ad4a0400c53856e720bfb2cdff36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGM2MzRjN2YxNGFkNGEwNDAwYzUzODU2ZTcyMGJmYjJjZGZmMzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-20T18:08:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T11:08:40Z"}, "message": "also avoid recomputing the layout for unary and binary ops, where possible", "tree": {"sha": "70c64377991c1d7e7c13a152afba116c24de3caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c64377991c1d7e7c13a152afba116c24de3caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128c634c7f14ad4a0400c53856e720bfb2cdff36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128c634c7f14ad4a0400c53856e720bfb2cdff36", "html_url": "https://github.com/rust-lang/rust/commit/128c634c7f14ad4a0400c53856e720bfb2cdff36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128c634c7f14ad4a0400c53856e720bfb2cdff36/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c81ac989a6983d8a571482a8de64d2070f690c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c81ac989a6983d8a571482a8de64d2070f690c", "html_url": "https://github.com/rust-lang/rust/commit/54c81ac989a6983d8a571482a8de64d2070f690c"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "4257c29bfee1cca7b93dfd9d1113335f665da285", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=128c634c7f14ad4a0400c53856e720bfb2cdff36", "patch": "@@ -497,19 +497,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n     /// We cannot do self.read_value(self.eval_operand) due to eval_operand taking &mut self,\n     /// so this helps avoid unnecessary let.\n-    pub fn eval_operand_and_read_valty(\n+    #[inline]\n+    pub fn eval_operand_and_read_value(\n         &mut self,\n         op: &mir::Operand<'tcx>,\n+        layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, ValTy<'tcx>> {\n-        let op = self.eval_operand(op, None)?;\n+        let op = self.eval_operand(op, layout)?;\n         self.read_value(op)\n     }\n-    pub fn eval_operand_and_read_scalar(\n-        &mut self,\n-        op: &mir::Operand<'tcx>,\n-    ) -> EvalResult<'tcx, ScalarMaybeUndef> {\n-        Ok(self.eval_operand_and_read_valty(op)?.to_scalar_or_undef())\n-    }\n \n     /// reads a tag and produces the corresponding variant index\n     pub fn read_discriminant_as_variant_index("}, {"sha": "f39a5ee3e4ef23929db5e20e6581935fae1b3435", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=128c634c7f14ad4a0400c53856e720bfb2cdff36", "patch": "@@ -8,6 +8,33 @@ use rustc::mir::interpret::{EvalResult, Scalar};\n \n use super::{EvalContext, Machine};\n \n+/// Classify whether an operator is \"left-homogeneous\", i.e. the LHS has the\n+/// same type as the result.\n+#[inline]\n+fn binop_left_homogeneous(op: mir::BinOp) -> bool {\n+    use rustc::mir::BinOp::*;\n+    match op {\n+        Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr |\n+        Offset | Shl | Shr =>\n+            true,\n+        Eq | Ne | Lt | Le | Gt | Ge =>\n+            false,\n+    }\n+}\n+/// Classify whether an operator is \"right-homogeneous\", i.e. the RHS has the\n+/// same type as the LHS.\n+#[inline]\n+fn binop_right_homogeneous(op: mir::BinOp) -> bool {\n+    use rustc::mir::BinOp::*;\n+    match op {\n+        Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr |\n+        Eq | Ne | Lt | Le | Gt | Ge =>\n+            true,\n+        Offset | Shl | Shr =>\n+            false,\n+    }\n+}\n+\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     pub fn inc_step_counter_and_detect_loops(&mut self) -> EvalResult<'tcx, ()> {\n         /// The number of steps between loop detector snapshots.\n@@ -147,8 +174,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let left = self.eval_operand_and_read_valty(left)?;\n-                let right = self.eval_operand_and_read_valty(right)?;\n+                let layout = if binop_left_homogeneous(bin_op) { Some(dest.layout) } else { None };\n+                let left = self.eval_operand_and_read_value(left, layout)?;\n+                let layout = if binop_right_homogeneous(bin_op) { Some(left.layout) } else { None };\n+                let right = self.eval_operand_and_read_value(right, layout)?;\n                 self.binop_ignore_overflow(\n                     bin_op,\n                     left,\n@@ -158,8 +187,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n-                let left = self.eval_operand_and_read_valty(left)?;\n-                let right = self.eval_operand_and_read_valty(right)?;\n+                // Due to the extra boolean in the result, we can never reuse the `dest.layout`.\n+                let left = self.eval_operand_and_read_value(left, None)?;\n+                let layout = if binop_right_homogeneous(bin_op) { Some(left.layout) } else { None };\n+                let right = self.eval_operand_and_read_value(right, layout)?;\n                 self.binop_with_overflow(\n                     bin_op,\n                     left,\n@@ -169,8 +200,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n \n             UnaryOp(un_op, ref operand) => {\n-                let val = self.eval_operand_and_read_scalar(operand)?;\n-                let val = self.unary_op(un_op, val.not_undef()?, dest.layout)?;\n+                // The operand always has the same type as the result.\n+                let val = self.eval_operand_and_read_value(operand, Some(dest.layout))?;\n+                let val = self.unary_op(un_op, val.to_scalar()?, dest.layout)?;\n                 self.write_scalar(val, dest)?;\n             }\n "}, {"sha": "82455cacac2d4c759e2e487439068f88d20b3304", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128c634c7f14ad4a0400c53856e720bfb2cdff36/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=128c634c7f14ad4a0400c53856e720bfb2cdff36", "patch": "@@ -144,18 +144,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 target,\n                 ..\n             } => {\n-                let cond_val = self.eval_operand_and_read_scalar(cond)?.not_undef()?.to_bool()?;\n+                let cond_val = self.eval_operand_and_read_value(cond, None)?.to_scalar()?.to_bool()?;\n                 if expected == cond_val {\n                     self.goto_block(target);\n                 } else {\n                     use rustc::mir::interpret::EvalErrorKind::*;\n                     return match *msg {\n                         BoundsCheck { ref len, ref index } => {\n-                            let len = self.eval_operand_and_read_scalar(len)\n-                                .expect(\"can't eval len\")\n+                            let len = self.eval_operand_and_read_value(len, None)\n+                                .expect(\"can't eval len\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n-                            let index = self.eval_operand_and_read_scalar(index)\n-                                .expect(\"can't eval index\")\n+                            let index = self.eval_operand_and_read_value(index, None)\n+                                .expect(\"can't eval index\").to_scalar()?\n                                 .to_bits(self.memory().pointer_size())? as u64;\n                             err!(BoundsCheck { len, index })\n                         }"}]}