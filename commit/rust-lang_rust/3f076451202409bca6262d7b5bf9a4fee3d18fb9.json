{"sha": "3f076451202409bca6262d7b5bf9a4fee3d18fb9", "node_id": "C_kwDOAAsO6NoAKDNmMDc2NDUxMjAyNDA5YmNhNjI2MmQ3YjViZjlhNGZlZTNkMThmYjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-30T08:16:05Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:18:32Z"}, "message": "Lower the assume intrinsic to a MIR statement", "tree": {"sha": "caa5cf3deff3fb465f57d9a2a01641048bd60d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa5cf3deff3fb465f57d9a2a01641048bd60d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f076451202409bca6262d7b5bf9a4fee3d18fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f076451202409bca6262d7b5bf9a4fee3d18fb9", "html_url": "https://github.com/rust-lang/rust/commit/3f076451202409bca6262d7b5bf9a4fee3d18fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f076451202409bca6262d7b5bf9a4fee3d18fb9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7278846102bb829c9a789e91bc43f0ed612943", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7278846102bb829c9a789e91bc43f0ed612943", "html_url": "https://github.com/rust-lang/rust/commit/3c7278846102bb829c9a789e91bc43f0ed612943"}], "stats": {"total": 242, "additions": 212, "deletions": 30}, "files": [{"sha": "ec5fa76ff8ba4fa94c286aa95ac80d32b5180e26", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -392,6 +392,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n             | mir::StatementKind::CopyNonOverlapping(..)\n+            | mir::StatementKind::Assume(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "03ad973cf49039b992db11b3151f2f53a3194aa7", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -72,14 +72,14 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 self.consume_operand(location, dst);\n                 self.consume_operand(location, count);\n             }\n-            StatementKind::Nop\n+            // Only relevant for mir typeck\n+            StatementKind::AscribeUserType(..)\n+            // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            | StatementKind::AscribeUserType(..)\n-            | StatementKind::Retag { .. }\n-            | StatementKind::StorageLive(..) => {\n-                // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n-                // to borrow check.\n-            }\n+            // Takes a `bool` argument, and has no return value, thus being irrelevant for borrowck\n+            | StatementKind::Assume(..)\n+            // Does not actually affect borrowck\n+            | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n@@ -88,7 +88,10 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::Nop\n+            | StatementKind::Retag { .. }\n+            | StatementKind::Deinit(..)\n+            | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")\n             }\n         }"}, {"sha": "663c880d0ae34dacb6a0ecb3c6c0a50f9f4bd0be", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -599,14 +599,14 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n                 )\n             }\n-            StatementKind::Nop\n+            // Only relevant for mir typeck\n+            StatementKind::AscribeUserType(..)\n+            // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            | StatementKind::AscribeUserType(..)\n-            | StatementKind::Retag { .. }\n-            | StatementKind::StorageLive(..) => {\n-                // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n-                // to borrow check.\n-            }\n+            // Takes a `bool` argument, and has no return value, thus being irrelevant for borrowck\n+            | StatementKind::Assume(..)\n+            // Does not actually affect borrowck\n+            | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n@@ -616,7 +616,10 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::Nop\n+            | StatementKind::Retag { .. }\n+            | StatementKind::Deinit(..)\n+            | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")\n             }\n         }"}, {"sha": "e7713bda82c683cd98fd309deccf908b2d552bfd", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -1309,6 +1309,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n             ),\n             StatementKind::FakeRead(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }"}, {"sha": "1f49ead93a3e80cf400edeef8df8b47c44268500", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -791,6 +791,8 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }\n+        // We ignore `assume` intrinsics, they are only useful for optimizations\n+        | StatementKind::Assume(..)\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),"}, {"sha": "f75de9096f3ae7d09b510aae0f82dfd1ba9b395f", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -540,6 +540,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                             return None;\n                         } // conservative handling\n                         StatementKind::Assign(_)\n+                        | StatementKind::Assume(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }\n                         | StatementKind::Deinit(_)"}, {"sha": "0cd9332a58befab6a824ea3873f1f053300c20fa", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -357,9 +357,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     match intrinsic {\n-        sym::assume => {\n-            intrinsic_args!(fx, args => (_a); intrinsic);\n-        }\n         sym::likely | sym::unlikely => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n "}, {"sha": "6393dd9d634fc01f6acb4ea132e399d3b3df7f40", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -77,10 +77,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n \n         let llval = match name {\n-            sym::assume => {\n-                bx.assume(args[0].immediate());\n-                return;\n-            }\n             sym::abort => {\n                 bx.abort();\n                 return;"}, {"sha": "9869e61280dc4c208eb2ee4623a9ea9f33c9696f", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -93,6 +93,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx.memcpy(dst, align, src, align, bytes, crate::MemFlags::empty());\n                 bx\n             }\n+            mir::StatementKind::Assume(box ref op) => {\n+                let op_val = self.codegen_operand(&mut bx, op);\n+                bx.assume(op_val.immediate());\n+                bx\n+            }\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)"}, {"sha": "8157ae2e5b8313370027f78f18eac2a6946336b6", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -506,12 +506,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // These just return their argument\n                 self.copy_op(&args[0], dest, /*allow_transmute*/ false)?;\n             }\n-            sym::assume => {\n-                let cond = self.read_scalar(&args[0])?.to_bool()?;\n-                if !cond {\n-                    throw_ub_format!(\"`assume` intrinsic called with `false`\");\n-                }\n-            }\n             sym::raw_eq => {\n                 let result = self.raw_eq_intrinsic(&args[0], &args[1])?;\n                 self.write_scalar(result, dest)?;"}, {"sha": "3ac1d1b31985ff1fe751cd2df6ca76ee86ae76a0", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -122,6 +122,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n+            // Call Assume\n+            Assume(box op) => {\n+                let op = self.eval_operand(op, None)?;\n+                let cond = self.read_scalar(&op)?.to_bool()?;\n+                if !cond {\n+                    throw_ub_format!(\"`assume` called with `false`\");\n+                }\n+            }\n+\n             // Statements we do not track.\n             AscribeUserType(..) => {}\n "}, {"sha": "347c31ceeeba4d7e35e9cc5961b492466cf1c532", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -679,6 +679,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "dea445f60669f4b89e61e125b5ea167222263a30", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -636,6 +636,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n+            StatementKind::Assume(box ref op) => {\n+                let ty = op.ty(&self.body.local_decls, self.tcx);\n+                if !ty.is_bool() {\n+                    self.fail(\n+                        location,\n+                        format!(\"`assume` argument must be `bool`, but got: `{}`\", ty),\n+                    );\n+                }\n+            }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,"}, {"sha": "48eb292c4904c1ab26994038605a663c02d20a8c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -1377,6 +1377,7 @@ impl Debug for Statement<'_> {\n             }) => {\n                 write!(fmt, \"copy_nonoverlapping(src={:?}, dst={:?}, count={:?})\", src, dst, count)\n             }\n+            Assume(box ref cond) => write!(fmt, \"assume({:?})\", cond),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "cb5adee6910edb197a8323c4fc1d01e554df093f", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -250,6 +250,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n         CopyNonOverlapping(..) => \"CopyNonOverlapping\",\n+        Assume(..) => \"Assume\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "01ac2456a138eca01f8cab1469cd07750bcaa760", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -342,6 +342,14 @@ pub enum StatementKind<'tcx> {\n     /// I vaguely remember Ralf saying somewhere that he thought it should not be.\n     CopyNonOverlapping(Box<CopyNonOverlapping<'tcx>>),\n \n+    /// Denotes a call to the intrinsic function `assume`.\n+    ///\n+    /// The operand must be a boolean. Optimizers may use the value of the boolean to backtrack its\n+    /// computation to infer information about other variables. So if the boolean came from a\n+    /// `x < y` operation, subsequent operations on `x` and `y` could elide various bound checks.\n+    /// If the argument is `false`, this operation is equivalent to `TerminatorKind::Unreachable`.\n+    Assume(Box<Operand<'tcx>>),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }"}, {"sha": "a0273e78b8f61cae5744a28961ceb80a25d8e04f", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -434,6 +434,9 @@ macro_rules! make_mir_visitor {\n                       self.visit_operand(dst, location);\n                       self.visit_operand(count, location)\n                     }\n+                    StatementKind::Assume(box ref $($mutability)? val) => {\n+                        self.visit_operand(val, location)\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }"}, {"sha": "f3ea84e6350707b0d56f1eae76e4c243dcbb2d12", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -271,6 +271,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Nop => None,\n         };\n         if let Some(destination) = destination {"}, {"sha": "bab224a7e0405f8b888c6e88bddd779b11913cf9", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -143,6 +143,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::StorageLive(..) => {}\n         }\n     }"}, {"sha": "d7ea3339a6999d7006083e7b658acc788c33885d", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -331,6 +331,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "1a360a8d40bf9675b659bdbe9bb1e57c58a6b37f", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -105,6 +105,9 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 // safe (at least as emitted during MIR construction)\n             }\n \n+            // Move to above list once mir construction uses it.\n+            StatementKind::Assume(..) => unreachable!(),\n+\n             StatementKind::CopyNonOverlapping(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);"}, {"sha": "f5e91371b5864a060c337b985f9002f8b86ac603", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -826,6 +826,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         // Retain spans from all other statements\n         StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n         | StatementKind::CopyNonOverlapping(..)\n+        | StatementKind::Assume(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::Deinit(..)"}, {"sha": "e95c5d888b2b5713463581c4a4f1c7efff91e891", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -53,6 +53,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::Coverage(_)\n                 | StatementKind::CopyNonOverlapping(_)\n+                | StatementKind::Assume(_)\n                 | StatementKind::Nop => (),\n \n                 StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "a2e12e40be99e43ba95a2936b8aa8906d1ae2713", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -538,6 +538,7 @@ impl<'a> Conflicts<'a> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "2bfcd82de5ee92d9d0f9294ce781448ac408c41b", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -1453,6 +1453,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "652c344ee146d972171d58795b9a70de5b9fb76b", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -62,6 +62,17 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         drop(args);\n                         terminator.kind = TerminatorKind::Goto { target };\n                     }\n+                    sym::assume => {\n+                        let target = target.unwrap();\n+                        let mut args = args.drain(..);\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assume(Box::new(args.next().unwrap())),\n+                        });\n+                        assert_eq!(args.next(), None, \"Extra argument for assume intrinsic\");\n+                        drop(args);\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n                         if let Some(target) = *target {\n                             let lhs;"}, {"sha": "7d1ab06c3bdc3279e2039b7a10b9ab195c134d84", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -52,6 +52,7 @@ impl RemoveNoopLandingPads {\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::Deinit(..)\n                 | StatementKind::CopyNonOverlapping(..)\n+                | StatementKind::Assume(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "34df693cf68005d0a5e0c7444d3433304812f88e", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -250,6 +250,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::CopyNonOverlapping(_)\n+            | StatementKind::Assume(_)\n             | StatementKind::Nop => {}\n         }\n     }\n@@ -318,6 +319,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::CopyNonOverlapping(_)\n+            | StatementKind::Assume(_)\n             | StatementKind::Nop => {}\n \n             // If the discriminant is set, it is always set"}, {"sha": "b51d6d6f4feb86944e290da6c5f8c306963e8bde", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -500,6 +500,7 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Assume(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "1a20fe136c21e83e7203508372a131cd998ea2de", "filename": "src/test/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `assume` before LowerIntrinsics\n++ // MIR for `assume` after LowerIntrinsics\n+  \n+  fn assume() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:17: +0:17\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:97:9: 97:32\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n++         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:38: +2:39\n+          _0 = const ();                   // scope 1 at $DIR/lower_intrinsics.rs:+1:5: +3:6\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "9681e3f696bf847b6db7b00b5d1c54d45036b575", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `f_copy_nonoverlapping` before LowerIntrinsics\n++ // MIR for `f_copy_nonoverlapping` after LowerIntrinsics\n+  \n+  fn f_copy_nonoverlapping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:32: +0:32\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+      let _3: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+      let mut _4: *const i32;              // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+      let mut _5: *const ();               // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+      let mut _6: *const ();               // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+      let _7: &();                         // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+      let mut _8: *mut i32;                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+      let mut _9: *mut ();                 // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+      let mut _10: *mut ();                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+      let mut _11: &mut ();                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+      scope 1 {\n+          debug src => _1;                 // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+          let mut _2: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+          scope 2 {\n+              debug dst => _2;             // in scope 2 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/lower_intrinsics.rs:+1:15: +1:17\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+          Deinit(_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+2:19: +2:21\n+          StorageLive(_3);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+          StorageLive(_4);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          StorageLive(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          StorageLive(_6);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          StorageLive(_7);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _7 = &_1;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _6 = &raw const (*_7);           // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _5 = _6;                         // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          _4 = move _5 as *const i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          StorageDead(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:58: +4:59\n+          StorageLive(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          StorageLive(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          StorageLive(_10);                // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          StorageLive(_11);                // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _11 = &mut _2;                   // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _10 = &raw mut (*_11);           // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          _8 = move _9 as *mut i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n+-         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:90:9: 90:28\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n++         copy_nonoverlapping(src=move _4, dst=move _8, count=const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n++         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:94: +4:95\n+          StorageDead(_4);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:94: +4:95\n+          StorageDead(_11);                // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_10);                // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_7);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_6);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_3);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          _0 = const ();                   // scope 3 at $DIR/lower_intrinsics.rs:+3:5: +5:6\n+          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "66dae0e46b9d7a15912ad5d6c02394dd58f4fee9", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -1,7 +1,7 @@\n // unit-test: LowerIntrinsics\n // ignore-wasm32 compiled with panic=abort by default\n \n-#![feature(core_intrinsics)]\n+#![feature(core_intrinsics, intrinsics)]\n #![crate_type = \"lib\"]\n \n // EMIT_MIR lower_intrinsics.wrapping.LowerIntrinsics.diff\n@@ -51,3 +51,24 @@ pub fn discriminant<T>(t: T) {\n     core::intrinsics::discriminant_value(&());\n     core::intrinsics::discriminant_value(&E::B);\n }\n+\n+extern \"rust-intrinsic\" {\n+    // Cannot use `std::intrinsics::copy_nonoverlapping` as that is a wrapper function\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+// EMIT_MIR lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff\n+pub fn f_copy_nonoverlapping() {\n+    let src = ();\n+    let mut dst = ();\n+    unsafe {\n+        copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+    }\n+}\n+\n+// EMIT_MIR lower_intrinsics.assume.LowerIntrinsics.diff\n+pub fn assume() {\n+    unsafe {\n+        std::intrinsics::assume(true);\n+    }\n+}"}, {"sha": "1c12da7f7416aa926976ccbe1d57f892c75ab72c", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f076451202409bca6262d7b5bf9a4fee3d18fb9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=3f076451202409bca6262d7b5bf9a4fee3d18fb9", "patch": "@@ -211,6 +211,9 @@ fn check_statement<'tcx>(\n         StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n             check_place(tcx, **place, span, body)\n         },\n+        StatementKind::Assume(box op) => {\n+            check_operand(tcx, op, span, body)\n+        },\n \n         StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n             check_operand(tcx, dst, span, body)?;"}]}