{"sha": "e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1N2VlM2QwYmY4ZDhiMTFmZWNjYWI0OTQzMmQ0YzVlOGZjM2EzY2E=", "commit": {"author": {"name": "Marco A L Barbosa", "email": "malbarbo@gmail.com", "date": "2017-10-19T17:49:59Z"}, "committer": {"name": "Marco A L Barbosa", "email": "malbarbo@gmail.com", "date": "2017-10-20T15:18:16Z"}, "message": "Fix some tests for linux gnux32", "tree": {"sha": "af1db29dc844adcecc14e0810f5ae1d4a19713ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1db29dc844adcecc14e0810f5ae1d4a19713ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "html_url": "https://github.com/rust-lang/rust/commit/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/comments", "author": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbcd1bec6150a259fea16ddae6c5881b4b676217", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcd1bec6150a259fea16ddae6c5881b4b676217", "html_url": "https://github.com/rust-lang/rust/commit/dbcd1bec6150a259fea16ddae6c5881b4b676217"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "c6dd41798f2a7ad388ee9b9b3c312a9019a68f9a", "filename": "src/libcore/tests/hash/sip.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -243,24 +243,22 @@ fn test_siphash_2_4() {\n         t += 1;\n     }\n }\n-#[test] #[cfg(target_arch = \"arm\")]\n+\n+#[test]\n+#[cfg(target_pointer_width = \"32\")]\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n     assert!(hash(&(val as u64)) != hash(&(val as usize)));\n     assert_eq!(hash(&(val as u32)), hash(&(val as usize)));\n }\n-#[test] #[cfg(target_arch = \"x86_64\")]\n+\n+#[test]\n+#[cfg(target_pointer_width = \"64\")]\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n     assert_eq!(hash(&(val as u64)), hash(&(val as usize)));\n     assert!(hash(&(val as u32)) != hash(&(val as usize)));\n }\n-#[test] #[cfg(target_arch = \"x86\")]\n-fn test_hash_usize() {\n-    let val = 0xdeadbeef_deadbeef_u64;\n-    assert!(hash(&(val as u64)) != hash(&(val as usize)));\n-    assert_eq!(hash(&(val as u32)), hash(&(val as usize)));\n-}\n \n #[test]\n fn test_hash_idempotent() {"}, {"sha": "4f878d8ad1fa84beccfa75343d1bc5872a0d8fd6", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -92,14 +92,15 @@ impl Condvar {\n         assert_eq!(r, 0);\n \n         // Nanosecond calculations can't overflow because both values are below 1e9.\n-        let nsec = dur.subsec_nanos() as libc::c_long + now.tv_nsec as libc::c_long;\n+        let nsec = dur.subsec_nanos() + now.tv_nsec as u32;\n+\n         let sec = saturating_cast_to_time_t(dur.as_secs())\n             .checked_add((nsec / 1_000_000_000) as libc::time_t)\n             .and_then(|s| s.checked_add(now.tv_sec));\n         let nsec = nsec % 1_000_000_000;\n \n         let timeout = sec.map(|s| {\n-            libc::timespec { tv_sec: s, tv_nsec: nsec }\n+            libc::timespec { tv_sec: s, tv_nsec: nsec as _}\n         }).unwrap_or(TIMESPEC_MAX);\n \n         let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex),"}, {"sha": "a1ca839dc18722158e5f6276a7c1238a89264c5b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -132,14 +132,14 @@ impl FileAttr {\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::from(libc::timespec {\n             tv_sec: self.stat.st_mtime as libc::time_t,\n-            tv_nsec: self.stat.st_mtime_nsec as libc::c_long,\n+            tv_nsec: self.stat.st_mtime_nsec as _,\n         }))\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         Ok(SystemTime::from(libc::timespec {\n             tv_sec: self.stat.st_atime as libc::time_t,\n-            tv_nsec: self.stat.st_atime_nsec as libc::c_long,\n+            tv_nsec: self.stat.st_atime_nsec as _,\n         }))\n     }\n "}, {"sha": "cc889454ce9d67e7ff7ec844c49e80dbdba4680f", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -149,7 +149,7 @@ impl Thread {\n \n     pub fn sleep(dur: Duration) {\n         let mut secs = dur.as_secs();\n-        let mut nsecs = dur.subsec_nanos() as libc::c_long;\n+        let mut nsecs = dur.subsec_nanos() as _;\n \n         // If we're awoken with a signal then the return value will be -1 and\n         // nanosleep will fill in `ts` with the remaining time."}, {"sha": "837cd7292e2808f8cd7abea818e7ea4bac0d367e", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -60,7 +60,7 @@ impl Timespec {\n         Timespec {\n             t: libc::timespec {\n                 tv_sec: secs,\n-                tv_nsec: nsec as libc::c_long,\n+                tv_nsec: nsec as _,\n             },\n         }\n     }\n@@ -83,7 +83,7 @@ impl Timespec {\n         Timespec {\n             t: libc::timespec {\n                 tv_sec: secs,\n-                tv_nsec: nsec as libc::c_long,\n+                tv_nsec: nsec as _,\n             },\n         }\n     }"}, {"sha": "df02426badcc5dde1e2055779a8f0396afde4460", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -13,6 +13,7 @@\n // ignore-x86\n // ignore-arm\n // ignore-emscripten\n+// ignore-gnux32\n // ignore 32-bit platforms (LLVM has a bug with them)\n \n // See issue #37945."}, {"sha": "bd4044b4df3b466d0b14c58bb24ce8c3088e9928", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=e57ee3d0bf8d8b11feccab49432d4c5e8fc3a3ca", "patch": "@@ -73,7 +73,7 @@ pub fn get_env(triple: &str) -> Option<&str> {\n }\n \n pub fn get_pointer_width(triple: &str) -> &'static str {\n-    if triple.contains(\"64\") || triple.starts_with(\"s390x\") {\n+    if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\")) || triple.starts_with(\"s390x\") {\n         \"64bit\"\n     } else {\n         \"32bit\""}]}