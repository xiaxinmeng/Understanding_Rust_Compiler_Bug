{"sha": "7852625b8671211125564cba69d982dd4ee5db24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTI2MjViODY3MTIxMTEyNTU2NGNiYTY5ZDk4MmRkNGVlNWRiMjQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-01T05:32:13Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-01T21:42:57Z"}, "message": "remove leftover obsolete string literals", "tree": {"sha": "a73c2b79a3f2c65121fa6ea7c174f300a7c72a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a73c2b79a3f2c65121fa6ea7c174f300a7c72a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7852625b8671211125564cba69d982dd4ee5db24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7852625b8671211125564cba69d982dd4ee5db24", "html_url": "https://github.com/rust-lang/rust/commit/7852625b8671211125564cba69d982dd4ee5db24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7852625b8671211125564cba69d982dd4ee5db24/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4baff4e15f003260de0cc17f419c418332e77149", "url": "https://api.github.com/repos/rust-lang/rust/commits/4baff4e15f003260de0cc17f419c418332e77149", "html_url": "https://github.com/rust-lang/rust/commit/4baff4e15f003260de0cc17f419c418332e77149"}], "stats": {"total": 140, "additions": 70, "deletions": 70}, "files": [{"sha": "28c7cfb88c9d61434b4969bd489e8a08388adf68", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -170,7 +170,7 @@ fn parse_compile_flags(line: &str) -> Option<~str> {\n }\n \n fn parse_run_flags(line: &str) -> Option<~str> {\n-    parse_name_value_directive(line, ~\"run-flags\")\n+    parse_name_value_directive(line, \"run-flags\".to_owned())\n }\n \n fn parse_debugger_cmd(line: &str) -> Option<~str> {"}, {"sha": "302cc611f381eaa35139fe82486200ad1c9574cc", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -698,13 +698,13 @@ static INITIAL_LOAD_FACTOR: Fraction = (9, 10);\n /// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n ///\n /// // check for a specific one.\n-/// if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n+/// if !book_reviews.contains_key(&(\"Les Mis\u00e9rables\")) {\n ///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n ///              book_reviews.len());\n /// }\n ///\n /// // oops, this review has a lot of spelling mistakes, let's delete it.\n-/// book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n+/// book_reviews.remove(&(\"The Adventures of Sherlock Holmes\"));\n ///\n /// // look up the values associated with some keys.\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];"}, {"sha": "ec1d3f5750adf480a0aa4da2f463d48829662cbb", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -1651,10 +1651,10 @@ mod test_set {\n \n         // FIXME: #5801: this needs a type hint to compile...\n         let result: Option<(&uint, & &'static str)> = z.next();\n-        assert_eq!(result.unwrap(), (&5u, & &\"bar\"));\n+        assert_eq!(result.unwrap(), (&5u, &(\"bar\")));\n \n         let result: Option<(&uint, & &'static str)> = z.next();\n-        assert_eq!(result.unwrap(), (&11u, & &\"foo\"));\n+        assert_eq!(result.unwrap(), (&11u, &(\"foo\")));\n \n         let result: Option<(&uint, & &'static str)> = z.next();\n         assert!(result.is_none());"}, {"sha": "78c2b6c99e955000a83673924d01aeab9ce7ae7c", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -1441,7 +1441,7 @@ mod tests {\n             optmulti(\"l\", \"\", \"Desc\", \"VAL\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -b --banana VAL     Desc\n@@ -1450,7 +1450,7 @@ Options:\n     -k --kiwi           Desc\n     -p [VAL]            Desc\n     -l VAL              Desc\n-\";\n+\".to_owned();\n \n         let generated_usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1471,13 +1471,13 @@ Options:\n                 \"This is a long description which _will_ be wrapped..+..\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -k --kiwi           This is a long description which won't be wrapped..+..\n     -a --apple          This is a long description which _will_ be\n                         wrapped..+..\n-\";\n+\".to_owned();\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1496,14 +1496,14 @@ Options:\n confuse the line wrapping; an apple costs 0.51\u20ac in some parts of Europe.\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -k --k\u2013w\u2013           The word kiwi is normally spelled with two i's\n     -a --apple          This \u201cdescription\u201d has some characters that could\n                         confuse the line wrapping; an apple costs 0.51\u20ac in\n                         some parts of Europe.\n-\";\n+\".to_owned();\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n "}, {"sha": "f88f7fb8115df0e830ab6a47da6d2bf7aedf324f", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -116,7 +116,7 @@ impl<'a> NfaGen<'a> {\n             |cx, name| match name {\n                 &Some(ref name) => {\n                     let name = name.as_slice();\n-                    quote_expr!(cx, Some(~$name))\n+                    quote_expr!(cx, Some($name.to_owned()))\n                 }\n                 &None => quote_expr!(cx, None),\n             }\n@@ -306,7 +306,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n }\n \n ::regex::Regex {\n-    original: ~$regex,\n+    original: $regex.to_owned(),\n     names: vec!$cap_names,\n     p: ::regex::native::Native(exec),\n }"}, {"sha": "050349bbef9d0b4685e9262e01e54a167884bff6", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -2629,16 +2629,16 @@ mod tests {\n         assert_eq!(from_str(\"\\\"\"),    Err(SyntaxError(EOFWhileParsingString, 1, 2)));\n         assert_eq!(from_str(\"\\\"lol\"), Err(SyntaxError(EOFWhileParsingString, 1, 5)));\n \n-        assert_eq!(from_str(\"\\\"\\\"\"), Ok(String(~\"\")));\n-        assert_eq!(from_str(\"\\\"foo\\\"\"), Ok(String(~\"foo\")));\n-        assert_eq!(from_str(\"\\\"\\\\\\\"\\\"\"), Ok(String(~\"\\\"\")));\n-        assert_eq!(from_str(\"\\\"\\\\b\\\"\"), Ok(String(~\"\\x08\")));\n-        assert_eq!(from_str(\"\\\"\\\\n\\\"\"), Ok(String(~\"\\n\")));\n-        assert_eq!(from_str(\"\\\"\\\\r\\\"\"), Ok(String(~\"\\r\")));\n-        assert_eq!(from_str(\"\\\"\\\\t\\\"\"), Ok(String(~\"\\t\")));\n-        assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n-        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n-        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n+        assert_eq!(from_str(\"\\\"\\\"\"), Ok(String(\"\".to_owned())));\n+        assert_eq!(from_str(\"\\\"foo\\\"\"), Ok(String(\"foo\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\\\\"\\\"\"), Ok(String(\"\\\"\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\b\\\"\"), Ok(String(\"\\x08\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\n\\\"\"), Ok(String(\"\\n\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\r\\\"\"), Ok(String(\"\\r\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\t\\\"\"), Ok(String(\"\\t\".to_owned())));\n+        assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(\"foo\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(\"\\u12ab\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(\"\\uAB12\".to_owned())));\n     }\n \n     #[test]\n@@ -2902,23 +2902,23 @@ mod tests {\n     fn test_find(){\n         let json_value = from_str(\"{\\\"dog\\\" : \\\"cat\\\"}\").unwrap();\n         let found_str = json_value.find(&\"dog\".to_owned());\n-        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cat\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == \"cat\");\n     }\n \n     #[test]\n     fn test_find_path(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.find_path(&[&\"dog\".to_owned(),\n                                              &\"cat\".to_owned(), &\"mouse\".to_owned()]);\n-        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cheese\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == \"cheese\");\n     }\n \n     #[test]\n     fn test_search(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.search(&\"mouse\".to_owned()).and_then(|j| j.as_string());\n         assert!(found_str.is_some());\n-        assert!(found_str.unwrap() == &\"cheese\");\n+        assert!(found_str.unwrap() == \"cheese\");\n     }\n \n     #[test]\n@@ -2958,7 +2958,7 @@ mod tests {\n     fn test_as_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n         let json_str = json_value.as_string();\n-        let expected_str = &\"dog\";\n+        let expected_str = \"dog\";\n         assert_eq!(json_str, Some(expected_str));\n     }\n \n@@ -3079,7 +3079,7 @@ mod tests {\n             r#\"{ \"foo\":\"bar\", \"array\" : [0, 1, 2,3 ,4,5], \"idents\":[null,true,false]}\"#,\n             ~[\n                 (ObjectStart,             ~[]),\n-                  (StringValue(~\"bar\"),   ~[Key(\"foo\")]),\n+                  (StringValue(\"bar\".to_owned()),   ~[Key(\"foo\")]),\n                   (ListStart,             ~[Key(\"array\")]),\n                     (NumberValue(0.0),    ~[Key(\"array\"), Index(0)]),\n                     (NumberValue(1.0),    ~[Key(\"array\"), Index(1)]),\n@@ -3167,7 +3167,7 @@ mod tests {\n                   (NumberValue(1.0),            ~[Key(\"a\")]),\n                   (ListStart,                   ~[Key(\"b\")]),\n                     (BooleanValue(true),        ~[Key(\"b\"), Index(0)]),\n-                    (StringValue(~\"foo\\nbar\"),  ~[Key(\"b\"), Index(1)]),\n+                    (StringValue(\"foo\\nbar\".to_owned()),  ~[Key(\"b\"), Index(1)]),\n                     (ObjectStart,               ~[Key(\"b\"), Index(2)]),\n                       (ObjectStart,             ~[Key(\"b\"), Index(2), Key(\"c\")]),\n                         (NullValue,             ~[Key(\"b\"), Index(2), Key(\"c\"), Key(\"d\")]),\n@@ -3299,7 +3299,7 @@ mod tests {\n         assert!(stack.last_is_index());\n         assert!(stack.get(0) == Index(1));\n \n-        stack.push_key(~\"foo\");\n+        stack.push_key(\"foo\".to_owned());\n \n         assert!(stack.len() == 2);\n         assert!(stack.is_equal_to([Index(1), Key(\"foo\")]));\n@@ -3311,7 +3311,7 @@ mod tests {\n         assert!(stack.get(0) == Index(1));\n         assert!(stack.get(1) == Key(\"foo\"));\n \n-        stack.push_key(~\"bar\");\n+        stack.push_key(\"bar\".to_owned());\n \n         assert!(stack.len() == 3);\n         assert!(stack.is_equal_to([Index(1), Key(\"foo\"), Key(\"bar\")]));\n@@ -3375,7 +3375,7 @@ mod tests {\n     }\n \n     fn big_json() -> ~str {\n-        let mut src = ~\"[\\n\";\n+        let mut src = \"[\\n\".to_owned();\n         for _ in range(0, 500) {\n             src = src + r#\"{ \"a\": true, \"b\": null, \"c\":3.1415, \"d\": \"Hello world\", \"e\": [1,2,3]},\"#;\n         }"}, {"sha": "bf12dd2d94ab119a1750cd3e38d987a58d9e2b8e", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -62,7 +62,7 @@\n //!     let mut flags = FlagA | FlagB;\n //!     flags.clear();\n //!     assert!(flags.is_empty());\n-//!     assert_eq!(format!(\"{}\", flags), ~\"hi!\");\n+//!     assert_eq!(format!(\"{}\", flags).as_slice(), \"hi!\");\n //! }\n //! ~~~\n //!"}, {"sha": "e8ca4037f57f10e12282504ad86c6450be04b16e", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -343,7 +343,7 @@ mod tests {\n \n         assert_eq!(hasher.hash(&'a'), 97);\n \n-        assert_eq!(hasher.hash(& &\"a\"), 97 + 0xFF);\n+        assert_eq!(hasher.hash(&(\"a\")), 97 + 0xFF);\n         assert_eq!(hasher.hash(& &[1u8, 2u8, 3u8]), 9);\n \n         unsafe {"}, {"sha": "f89010d3fc0759b819474fec04173fb29ec26de2", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -560,7 +560,7 @@ mod tests {\n             ($path:expr, $disp:ident, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    assert!(path.$disp().to_str() == ~$exp);\n+                    assert!(path.$disp().to_str().as_slice() == $exp);\n                 }\n             )\n         )"}, {"sha": "fc0137d00b7f9e42d1fafbde12709803a6b34572", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -637,7 +637,7 @@ fn test_repr() {\n     exact_test(&true, \"true\");\n     exact_test(&false, \"false\");\n     exact_test(&1.234, \"1.234f64\");\n-    exact_test(&(&\"hello\"), \"\\\"hello\\\"\");\n+    exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n     // FIXME What do I do about this one?\n     exact_test(&(\"he\\u10f3llo\".to_owned()), \"~\\\"he\\\\u10f3llo\\\"\");\n "}, {"sha": "0a60c56e57cb211277791d9bb241241ec428aec3", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -2031,12 +2031,12 @@ pub trait StrSlice<'a> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let s = ~\"Do you know the muffin man,\n-    /// The muffin man, the muffin man, ...\";\n+    /// let s = \"Do you know the muffin man,\n+    /// The muffin man, the muffin man, ...\".to_owned();\n     ///\n     /// assert_eq!(s.replace(\"muffin man\", \"little lamb\"),\n-    ///            ~\"Do you know the little lamb,\n-    /// The little lamb, the little lamb, ...\");\n+    ///            \"Do you know the little lamb,\n+    /// The little lamb, the little lamb, ...\".to_owned());\n     ///\n     /// // not found, so no change.\n     /// assert_eq!(s.replace(\"cookie monster\", \"little lamb\"), s);\n@@ -3606,11 +3606,11 @@ mod tests {\n \n     #[test]\n     fn test_total_ord() {\n-        \"1234\".cmp(& &\"123\") == Greater;\n-        \"123\".cmp(& &\"1234\") == Less;\n-        \"1234\".cmp(& &\"1234\") == Equal;\n-        \"12345555\".cmp(& &\"123456\") == Less;\n-        \"22\".cmp(& &\"1234\") == Greater;\n+        \"1234\".cmp(&(\"123\")) == Greater;\n+        \"123\".cmp(&(\"1234\")) == Less;\n+        \"1234\".cmp(&(\"1234\")) == Equal;\n+        \"12345555\".cmp(&(\"123456\")) == Less;\n+        \"22\".cmp(&(\"1234\")) == Greater;\n     }\n \n     #[test]\n@@ -4007,7 +4007,7 @@ mod tests {\n \n     #[test]\n     fn test_from_str() {\n-      let owned: Option<~str> = from_str(&\"string\");\n+      let owned: Option<~str> = from_str(\"string\");\n       assert_eq!(owned, Some(\"string\".to_owned()));\n     }\n "}, {"sha": "fa2f53fcf69a5587668b5604701eadb570e4ebe5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -242,7 +242,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// ```rust\n     /// let mut vec = vec!(\"hello\");\n-    /// vec.grow(2, & &\"world\");\n+    /// vec.grow(2, &(\"world\"));\n     /// assert_eq!(vec, vec!(\"hello\", \"world\", \"world\"));\n     /// ```\n     pub fn grow(&mut self, n: uint, value: &T) {\n@@ -267,8 +267,8 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// ```rust\n     /// let mut vec = vec!(\"a\", \"b\", \"c\");\n-    /// vec.grow_set(1, & &\"fill\", \"d\");\n-    /// vec.grow_set(4, & &\"fill\", \"e\");\n+    /// vec.grow_set(1, &(\"fill\"), \"d\");\n+    /// vec.grow_set(4, &(\"fill\"), \"e\");\n     /// assert_eq!(vec, vec!(\"a\", \"d\", \"c\", \"fill\", \"e\"));\n     /// ```\n     pub fn grow_set(&mut self, index: uint, initval: &T, value: T) {"}, {"sha": "99d9e6ce478dd534434c0679104f303555f2758e", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -185,7 +185,7 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n  * ```rust\n  * use url::encode;\n  *\n- * let url = encode(&\"https://example.com/Rust (programming language)\");\n+ * let url = encode(\"https://example.com/Rust (programming language)\");\n  * println!(\"{}\", url); // https://example.com/Rust%20(programming%20language)\n  * ```\n  */\n@@ -260,7 +260,7 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n  * ```rust\n  * use url::decode;\n  *\n- * let url = decode(&\"https://example.com/Rust%20(programming%20language)\");\n+ * let url = decode(\"https://example.com/Rust%20(programming%20language)\");\n  * println!(\"{}\", url); // https://example.com/Rust (programming language)\n  * ```\n  */"}, {"sha": "087e619f21399317500fe44c4db3e28b25464be4", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -30,7 +30,7 @@ impl Drop for S {\n }\n \n fn move_in_match() {\n-    match S {f:~\"foo\", g:~\"bar\"} {\n+    match S {f: \"foo\".to_owned(), g: \"bar\".to_owned()} {\n         S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n             f: _s,  //~ NOTE attempting to move value to here\n             g: _t   //~ NOTE and here"}, {"sha": "77c26d9e6de5c1d4a143460397c18c2706dbce39", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: &'static str = &\"foo\";\n+static a: &'static str = \"foo\";\n static b: *u8 = a as *u8; //~ ERROR non-scalar cast\n static c: *u8 = &a as *u8; //~ ERROR mismatched types\n "}, {"sha": "2c3e6c6f04e845fa26ead14b431589a7a0d1c8e3", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     (&[1]).test_imm();\n     (\"test\").test_imm();\n     (\"test\".to_owned()).test_imm();\n-    (&\"test\").test_imm();\n+    (\"test\").test_imm();\n \n     // FIXME: Other types of mutable vecs don't currently exist\n "}, {"sha": "3d6b6ba626d1114d48b752dd14125fa47e30c93c", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -10,25 +10,25 @@\n \n \n pub fn main() {\n-    let x = &\"hello\";\n-    let v = &\"hello\";\n-    let y : &str = &\"there\";\n+    let x = \"hello\";\n+    let v = \"hello\";\n+    let y : &str = \"there\";\n \n     println!(\"{}\", x);\n     println!(\"{}\", y);\n \n     assert_eq!(x[0], 'h' as u8);\n     assert_eq!(x[4], 'o' as u8);\n \n-    let z : &str = &\"thing\";\n+    let z : &str = \"thing\";\n     assert_eq!(v, x);\n     assert!(x != z);\n \n-    let a = &\"aaaa\";\n-    let b = &\"bbbb\";\n+    let a = \"aaaa\";\n+    let b = \"bbbb\";\n \n-    let c = &\"cccc\";\n-    let cc = &\"ccccc\";\n+    let c = \"cccc\";\n+    let cc = \"ccccc\";\n \n     println!(\"{}\", a);\n "}, {"sha": "faf3b090312d8ce1941457ea0d7c54e667711805", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -16,7 +16,7 @@ fn perform_hax<T: 'static>(x: ~T) -> ~hax: {\n }\n \n fn deadcode() {\n-    perform_hax(~~\"deadcode\");\n+    perform_hax(~\"deadcode\".to_owned());\n }\n \n pub fn main() {"}, {"sha": "af6dc66b95b58f6d10346b2fd2690c975fce76ec", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -16,7 +16,7 @@ fn perform_hax<T: 'static>(x: ~T) -> ~hax: {\n }\n \n fn deadcode() {\n-    perform_hax(~~\"deadcode\");\n+    perform_hax(~\"deadcode\".to_owned());\n }\n \n pub fn main() {"}, {"sha": "3bbd33378d0c51a23e0d99ecb0a9c174275deaac", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -44,15 +44,15 @@ fn g2(ref_1: &str, ref_2: &str) -> ~str {\n \n pub fn main() {\n     assert_eq!(f1(\"b\".to_owned()), \"found b\".to_owned());\n-    assert_eq!(f1(&\"c\"), \"not found\".to_owned());\n+    assert_eq!(f1(\"c\"), \"not found\".to_owned());\n     assert_eq!(f1(\"d\"), \"not found\".to_owned());\n     assert_eq!(f2(\"b\".to_owned()), \"found b\".to_owned());\n-    assert_eq!(f2(&\"c\"), \"not found (c)\".to_owned());\n+    assert_eq!(f2(\"c\"), \"not found (c)\".to_owned());\n     assert_eq!(f2(\"d\"), \"not found (d)\".to_owned());\n     assert_eq!(g1(\"b\".to_owned(), \"c\".to_owned()), \"found b,c\".to_owned());\n-    assert_eq!(g1(&\"c\", &\"d\"), \"not found\".to_owned());\n+    assert_eq!(g1(\"c\", \"d\"), \"not found\".to_owned());\n     assert_eq!(g1(\"d\", \"e\"), \"not found\".to_owned());\n     assert_eq!(g2(\"b\".to_owned(), \"c\".to_owned()), \"found b,c\".to_owned());\n-    assert_eq!(g2(&\"c\", &\"d\"), \"not found (c, d)\".to_owned());\n+    assert_eq!(g2(\"c\", \"d\"), \"not found (c, d)\".to_owned());\n     assert_eq!(g2(\"d\", \"e\"), \"not found (d, e)\".to_owned());\n }"}, {"sha": "060274f1bc7895c8fa7ee9b3e1252fe180d34fb8", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7852625b8671211125564cba69d982dd4ee5db24/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=7852625b8671211125564cba69d982dd4ee5db24", "patch": "@@ -22,8 +22,8 @@ macro_rules! check {\n             static S: $t = $e;\n             let v: $t = $e;\n             assert_eq!(S, v);\n-            assert_eq!(format!(\"{:?}\", v), ~$s);\n-            assert_eq!(format!(\"{:?}\", S), ~$s);\n+            assert_eq!(format!(\"{:?}\", v).as_slice(), $s);\n+            assert_eq!(format!(\"{:?}\", S).as_slice(), $s);\n         });*\n     }}\n }"}]}