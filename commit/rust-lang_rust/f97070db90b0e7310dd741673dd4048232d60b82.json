{"sha": "f97070db90b0e7310dd741673dd4048232d60b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzA3MGRiOTBiMGU3MzEwZGQ3NDE2NzNkZDQwNDgyMzJkNjBiODI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-10T11:18:55Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T15:24:01Z"}, "message": "Forbid lifetime elision in let position impl Trait\n\nThis is consistent with types.", "tree": {"sha": "3ef486eace8c95ae12765ba0c794a4480d367d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef486eace8c95ae12765ba0c794a4480d367d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97070db90b0e7310dd741673dd4048232d60b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97070db90b0e7310dd741673dd4048232d60b82", "html_url": "https://github.com/rust-lang/rust/commit/f97070db90b0e7310dd741673dd4048232d60b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97070db90b0e7310dd741673dd4048232d60b82/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4201fd273e242a9fecf78d04d5743fe4116e2f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/4201fd273e242a9fecf78d04d5743fe4116e2f59", "html_url": "https://github.com/rust-lang/rust/commit/4201fd273e242a9fecf78d04d5743fe4116e2f59"}], "stats": {"total": 147, "additions": 95, "deletions": 52}, "files": [{"sha": "39546c861bd087b29dd3f5d1d2fc55dfe645ff69", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -1619,15 +1619,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 visitor.visit_ty(ty);\n             }\n         }\n-        let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n         let ty = l.ty.as_ref().map(|t| {\n             self.lower_ty(\n                 t,\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n-                    ImplTraitContext::OpaqueTy(\n-                        Some(parent_def_id.to_def_id()),\n-                        hir::OpaqueTyOrigin::Misc,\n-                    )\n+                    ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Binding)\n                 } else {\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                 },"}, {"sha": "1190c90cd17ee028195de0382702614ff05186d7", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -2018,7 +2018,9 @@ pub enum OpaqueTyOrigin {\n     FnReturn,\n     /// `async fn`\n     AsyncFn,\n-    /// Impl trait in bindings, consts, statics, bounds.\n+    /// `let _: impl Trait = ...`\n+    Binding,\n+    /// Impl trait in type aliases, consts, statics, bounds.\n     Misc,\n }\n "}, {"sha": "72fe4355814eeb17bb07c44fd8530eacc259303d", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -258,6 +258,9 @@ enum Elide {\n     Exact(Region),\n     /// Less or more than one lifetime were found, error on unspecified.\n     Error(Vec<ElisionFailureInfo>),\n+    /// Forbid lifetime elision inside of a larger scope that does. For\n+    /// example, in let position impl trait.\n+    Forbid,\n }\n \n #[derive(Clone, Debug)]\n@@ -566,7 +569,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     // This arm is for `impl Trait` in the types of statics, constants and locals.\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn: None, .. }) => {\n                         intravisit::walk_ty(self, ty);\n-                        intravisit::walk_item(this, opaque_ty);\n+\n+                        // Elided lifetimes are not allowed in non-return\n+                        // position impl Trait\n+                        let scope = Scope::Elision { elide: Elide::Forbid, s: self.scope };\n+                        self.with(scope, |_, this| {\n+                            intravisit::walk_item(this, opaque_ty);\n+                        });\n+\n                         return;\n                     }\n                     // RPIT (return position impl trait)\n@@ -2332,6 +2342,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             }\n                             break Some(e);\n                         }\n+                        Elide::Forbid => break None,\n                     };\n                     for lifetime_ref in lifetime_refs {\n                         self.insert_lifetime(lifetime_ref, lifetime);"}, {"sha": "e1f0c579a3c3644484663cf7039313e3bfda6e08", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             // These opaque type inherit all lifetime parameters from their\n             // parent.\n-            hir::OpaqueTyOrigin::Misc => 0,\n+            hir::OpaqueTyOrigin::Binding | hir::OpaqueTyOrigin::Misc => 0,\n         };\n \n         let span = tcx.def_span(def_id);\n@@ -569,7 +569,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             hir::OpaqueTyOrigin::AsyncFn => return false,\n \n             // Otherwise, generate the label we'll use in the error message.\n-            hir::OpaqueTyOrigin::TypeAlias\n+            hir::OpaqueTyOrigin::Binding\n             | hir::OpaqueTyOrigin::FnReturn\n             | hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n         };"}, {"sha": "0ef561fdbbb295eb1c4a5d37ffd1d3711d6faf49", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -100,26 +100,17 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n+                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::Binding, .. }) => {\n+                    let_position_impl_trait_type(tcx, def_id.expect_local())\n+                }\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {\n                     find_opaque_ty_constraints(tcx, def_id.expect_local())\n                 }\n                 // Opaque types desugared from `impl Trait`.\n-                ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: Some(owner), origin, .. }) => {\n-                    let concrete_types = match origin {\n-                        OpaqueTyOrigin::FnReturn | OpaqueTyOrigin::AsyncFn => {\n-                            &tcx.mir_borrowck(owner.expect_local()).concrete_opaque_types\n-                        }\n-                        OpaqueTyOrigin::Misc => {\n-                            // We shouldn't leak borrowck results through impl trait in bindings.\n-                            // For example, we shouldn't be able to tell if `x` in\n-                            // `let x: impl Sized + 'a = &()` has type `&'static ()` or `&'a ()`.\n-                            &tcx.typeck_tables_of(owner.expect_local()).concrete_opaque_types\n-                        }\n-                        OpaqueTyOrigin::TypeAlias => {\n-                            span_bug!(item.span, \"Type alias impl trait shouldn't have an owner\")\n-                        }\n-                    };\n-                    let concrete_ty = concrete_types\n+                ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: Some(owner), .. }) => {\n+                    let concrete_ty = tcx\n+                        .mir_borrowck(owner.expect_local())\n+                        .concrete_opaque_types\n                         .get(&def_id)\n                         .map(|opaque| opaque.concrete_type)\n                         .unwrap_or_else(|| {\n@@ -148,13 +139,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             }\n                         });\n                     debug!(\"concrete_ty = {:?}\", concrete_ty);\n-                    if concrete_ty.has_erased_regions() {\n-                        // FIXME(impl_trait_in_bindings) Handle this case.\n-                        tcx.sess.span_fatal(\n-                            item.span,\n-                            \"lifetimes in impl Trait types in bindings are not currently supported\",\n-                        );\n-                    }\n                     concrete_ty\n                 }\n                 ItemKind::Trait(..)\n@@ -589,6 +573,50 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n+fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty<'_> {\n+    let scope = tcx.hir().get_defining_scope(tcx.hir().as_local_hir_id(opaque_ty_id));\n+    let scope_def_id = tcx.hir().local_def_id(scope);\n+\n+    let opaque_ty_def_id = opaque_ty_id.to_def_id();\n+\n+    let owner_tables = tcx.typeck_tables_of(scope_def_id);\n+    let concrete_ty = owner_tables\n+        .concrete_opaque_types\n+        .get(&opaque_ty_def_id)\n+        .map(|opaque| opaque.concrete_type)\n+        .unwrap_or_else(|| {\n+            tcx.sess.delay_span_bug(\n+                DUMMY_SP,\n+                &format!(\n+                    \"owner {:?} has no opaque type for {:?} in its tables\",\n+                    scope_def_id, opaque_ty_id\n+                ),\n+            );\n+            if let Some(ErrorReported) = owner_tables.tainted_by_errors {\n+                // Some error in the owner fn prevented us from populating the\n+                // `concrete_opaque_types` table.\n+                tcx.types.err\n+            } else {\n+                // We failed to resolve the opaque type or it resolves to\n+                // itself. Return the non-revealed type, which should result in\n+                // E0720.\n+                tcx.mk_opaque(\n+                    opaque_ty_def_id,\n+                    InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n+                )\n+            }\n+        });\n+    debug!(\"concrete_ty = {:?}\", concrete_ty);\n+    if concrete_ty.has_erased_regions() {\n+        // FIXME(impl_trait_in_bindings) Handle this case.\n+        tcx.sess.span_fatal(\n+            tcx.hir().span(tcx.hir().as_local_hir_id(opaque_ty_id)),\n+            \"lifetimes in impl Trait types in bindings are not currently supported\",\n+        );\n+    }\n+    concrete_ty\n+}\n+\n fn infer_placeholder_type(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,"}, {"sha": "2ef86f03d340c60892feeee1d5099ed85f4a0dfa", "filename": "src/test/ui/impl-trait/issue-60473.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -5,13 +5,11 @@\n \n struct A<'a>(&'a ());\n \n-trait Trait<T> {\n-}\n+trait Trait<T> {}\n \n-impl<T> Trait<T> for () {\n-}\n+impl<T> Trait<T> for () {}\n \n fn main() {\n-    let x: impl Trait<A> = (); // FIXME: The error doesn't seem correct.\n-    //~^ ERROR: opaque type expands to a recursive type\n+    let x: impl Trait<A> = ();\n+    //~^ ERROR: missing lifetime specifier\n }"}, {"sha": "367b5db5d2dceefe43b8a7ca83b44eb497cba621", "filename": "src/test/ui/impl-trait/issue-60473.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -1,11 +1,15 @@\n-error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/issue-60473.rs:15:12\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-60473.rs:13:23\n    |\n-LL |     let x: impl Trait<A> = (); // FIXME: The error doesn't seem correct.\n-   |            ^^^^^^^^^^^^^ expands to a recursive type\n+LL |     let x: impl Trait<A> = ();\n+   |                       ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn main<'a>() {\n+LL |     let x: impl Trait<A<'a>> = ();\n    |\n-   = note: type resolves to itself\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0720`.\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "efa67558bd7c17446cb3054042e076e05523aecb", "filename": "src/test/ui/impl-trait/issue-67166.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -4,8 +4,8 @@\n #![allow(incomplete_features)]\n \n pub fn run() {\n-    let _foo: Box<impl Copy + '_> = Box::new(()); // FIXME: The error doesn't much make sense.\n-    //~^ ERROR: opaque type expands to a recursive type\n+    let _foo: Box<impl Copy + '_> = Box::new(());\n+    //~^ ERROR: missing lifetime specifier\n }\n \n fn main() {}"}, {"sha": "14c78684e3e2fb48898b30e551dfaad751b20287", "filename": "src/test/ui/impl-trait/issue-67166.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f97070db90b0e7310dd741673dd4048232d60b82/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr?ref=f97070db90b0e7310dd741673dd4048232d60b82", "patch": "@@ -1,11 +1,15 @@\n-error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/issue-67166.rs:7:19\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-67166.rs:7:31\n    |\n-LL |     let _foo: Box<impl Copy + '_> = Box::new(()); // FIXME: The error doesn't much make sense.\n-   |                   ^^^^^^^^^^^^^^ expands to a recursive type\n+LL |     let _foo: Box<impl Copy + '_> = Box::new(());\n+   |                               ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | pub fn run<'a>() {\n+LL |     let _foo: Box<impl Copy + 'a> = Box::new(());\n    |\n-   = note: type resolves to itself\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0720`.\n+For more information about this error, try `rustc --explain E0106`."}]}