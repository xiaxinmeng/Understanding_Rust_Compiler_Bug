{"sha": "688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OGFiNWFmODE5OGY0ZGE0NWU5MGYyY2Y0YTJkMzdjZTk3ZDVlOGQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-27T15:25:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:26Z"}, "message": "Check functions predicates", "tree": {"sha": "71c280feac99efd01027a2126112df66770e306a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c280feac99efd01027a2126112df66770e306a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "html_url": "https://github.com/rust-lang/rust/commit/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "html_url": "https://github.com/rust-lang/rust/commit/5010496677ee5eb2bdfcbf104eaaa19130d0dc17"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "e722e583ad2a648fea0592ec7443d76d23702087", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "patch": "@@ -59,7 +59,10 @@ pub fn type_check<'a, 'gcx, 'tcx>(\n }\n \n fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n-    tcx.sess.diagnostic().span_bug(span, msg);\n+    // We sometimes see MIR failures (notably predicate failures) due to\n+    // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n+    // to avoid reporting bugs in those cases.\n+    tcx.sess.diagnostic().delay_span_bug(span, msg);\n }\n \n macro_rules! span_mirbug {\n@@ -171,7 +174,44 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         );\n \n         let expected_ty = match constant.literal {\n-            Literal::Value { value } => value.ty,\n+            Literal::Value { value } => {\n+                if let ConstVal::Function(def_id, ..) = value.val {\n+                    let tcx = self.tcx();\n+                    let type_checker = &mut self.cx;\n+\n+                    // FIXME -- For now, use the substitutions from\n+                    // `value.ty` rather than `value.val`. The\n+                    // renumberer will rewrite them to independent\n+                    // sets of regions; in principle, we ought to\n+                    // derive the type of the `value.val` from \"first\n+                    // principles\" and equate with value.ty, but as we\n+                    // are transitioning to the miri-based system, we\n+                    // don't have a handy function for that, so for\n+                    // now we just ignore `value.val` regions.\n+                    let substs = match value.ty.sty {\n+                        ty::TyFnDef(ty_def_id, substs) => {\n+                            assert_eq!(def_id, ty_def_id);\n+                            substs\n+                        }\n+                        _ => {\n+                            span_bug!(\n+                                self.last_span,\n+                                \"unexpected type for constant function: {:?}\",\n+                                value.ty\n+                            )\n+                        }\n+                    };\n+\n+                    let instantiated_predicates =\n+                        tcx.predicates_of(def_id).instantiate(tcx, substs);\n+                    let predicates =\n+                        type_checker.normalize(&instantiated_predicates.predicates, location);\n+                    type_checker.prove_predicates(&predicates, location);\n+                }\n+\n+                value.ty\n+            }\n+\n             Literal::Promoted { .. } => {\n                 // FIXME -- promoted MIR return types reference\n                 // various \"free regions\" (e.g., scopes and things)"}, {"sha": "a13360aeca7f505a475028705477d1b5b5e34a14", "filename": "src/test/compile-fail/nll/where_clauses_in_functions.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_functions.rs?ref=688ab5af8198f4da45e90f2cf4a2d37ce97d5e8d", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir -Z nll\n+\n+#![allow(dead_code)]\n+\n+fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32)\n+where\n+    'a: 'b,\n+{\n+    (x, y)\n+}\n+\n+fn bar<'a, 'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    foo(x, y)\n+    //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+    //~| WARNING not reporting region error due to -Znll\n+}\n+\n+fn main() {}"}]}