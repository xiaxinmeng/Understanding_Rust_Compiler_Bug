{"sha": "8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjhkOTRlYTFiNmMxOWI3ZTFkNDFlZjliMzNjY2I3Mzk1MWY2NTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-19T11:13:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-19T11:13:10Z"}, "message": "Auto merge of #49900 - pnkfelix:compare-mode-nll-followup-3, r=nikomatsakis\n\nAdd src/test/ui regression testing for NLL\n\nThis PR changes `x.py test` so that when you are running the `ui` test suite, it will also always run `compiletest` in the new `--compare-mode=nll`, which just double-checks that when running under the experimental NLL mode, the output matches the `<source-name>.nll.stderr` file, if present.\n\nIn order to reduce the chance of a developer revolt in response to this change, this PR also includes some changes to make the `--compare-mode=nll` more user-friendly:\n\n 1. It now generates nll-specific .stamp files, and uses them (so that repeated runs can reuse previously cached results).\n 2. Each line of terminal output distinguishes whether we are running under `--compare-mode=nll` by printing with the prefix `[ui (nll)]` instead of just the prefix `[ui]`.\n\nSubtask of rust-lang/rust#48879", "tree": {"sha": "ca79b860528005be4f468f665f1270c1474241b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca79b860528005be4f468f665f1270c1474241b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "html_url": "https://github.com/rust-lang/rust/commit/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2", "html_url": "https://github.com/rust-lang/rust/commit/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2"}, {"sha": "33bcb4ed16b01abeaa762c99e452da82c9c6275f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33bcb4ed16b01abeaa762c99e452da82c9c6275f", "html_url": "https://github.com/rust-lang/rust/commit/33bcb4ed16b01abeaa762c99e452da82c9c6275f"}], "stats": {"total": 595, "additions": 327, "deletions": 268}, "files": [{"sha": "ca18604e6d1f8b31686ccbb00b87217fcdec48e8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -538,6 +538,7 @@ impl Step for RustdocUi {\n             target: self.target,\n             mode: \"ui\",\n             suite: \"rustdoc-ui\",\n+            compare_mode: None,\n         })\n     }\n }\n@@ -590,19 +591,44 @@ macro_rules! default_test {\n     }\n }\n \n+macro_rules! default_test_with_compare_mode {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr,\n+                   compare_mode: $compare_mode:expr }) => {\n+        test_with_compare_mode!($name { path: $path, mode: $mode, suite: $suite, default: true,\n+                                        host: false, compare_mode: $compare_mode });\n+    }\n+}\n+\n macro_rules! host_test {\n     ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr }) => {\n         test!($name { path: $path, mode: $mode, suite: $suite, default: true, host: true });\n     }\n }\n \n macro_rules! test {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr, default: $default:expr,\n+                   host: $host:expr }) => {\n+        test_definitions!($name { path: $path, mode: $mode, suite: $suite, default: $default,\n+                                  host: $host, compare_mode: None });\n+    }\n+}\n+\n+macro_rules! test_with_compare_mode {\n+    ($name:ident { path: $path:expr, mode: $mode:expr, suite: $suite:expr, default: $default:expr,\n+                   host: $host:expr, compare_mode: $compare_mode:expr }) => {\n+        test_definitions!($name { path: $path, mode: $mode, suite: $suite, default: $default,\n+                                  host: $host, compare_mode: Some($compare_mode) });\n+    }\n+}\n+\n+macro_rules! test_definitions {\n     ($name:ident {\n         path: $path:expr,\n         mode: $mode:expr,\n         suite: $suite:expr,\n         default: $default:expr,\n-        host: $host:expr\n+        host: $host:expr,\n+        compare_mode: $compare_mode:expr\n     }) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n         pub struct $name {\n@@ -634,16 +660,18 @@ macro_rules! test {\n                     target: self.target,\n                     mode: $mode,\n                     suite: $suite,\n+                    compare_mode: $compare_mode,\n                 })\n             }\n         }\n     }\n }\n \n-default_test!(Ui {\n+default_test_with_compare_mode!(Ui {\n     path: \"src/test/ui\",\n     mode: \"ui\",\n-    suite: \"ui\"\n+    suite: \"ui\",\n+    compare_mode: \"nll\"\n });\n \n default_test!(RunPass {\n@@ -804,6 +832,7 @@ struct Compiletest {\n     target: Interned<String>,\n     mode: &'static str,\n     suite: &'static str,\n+    compare_mode: Option<&'static str>,\n }\n \n impl Step for Compiletest {\n@@ -823,6 +852,7 @@ impl Step for Compiletest {\n         let target = self.target;\n         let mode = self.mode;\n         let suite = self.suite;\n+        let compare_mode = self.compare_mode;\n \n         // Skip codegen tests if they aren't enabled in configuration.\n         if !builder.config.codegen_tests && suite == \"codegen\" {\n@@ -1044,6 +1074,15 @@ impl Step for Compiletest {\n                  suite, mode, &compiler.host, target));\n         let _time = util::timeit(&builder);\n         try_run(builder, &mut cmd);\n+\n+        if let Some(compare_mode) = compare_mode {\n+            cmd.arg(\"--compare-mode\").arg(compare_mode);\n+            let _folder = builder.fold_output(|| format!(\"test_{}_{}\", suite, compare_mode));\n+            builder.info(&format!(\"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n+                                  suite, mode, compare_mode, &compiler.host, target));\n+            let _time = util::timeit(&builder);\n+            try_run(builder, &mut cmd);\n+        }\n     }\n }\n "}, {"sha": "2e6689efee572358b3279373b6759a1fd89b9261", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1259,6 +1259,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n+    nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n+        \"when tracking region error causes, accept subminimal results for faster execution.\"),\n     disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n         \"disable user provided type assertion in NLL\"),\n     trans_time_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "d15d85792d99dc93964a96ffcbaed29eb05009e0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::{BasicBlock, Location, Mir};\n-use rustc::ty::RegionVid;\n+use rustc::ty::{self, RegionVid};\n use syntax::codemap::Span;\n \n use super::{Cause, CauseExt, TrackCauses};\n@@ -263,7 +263,17 @@ impl RegionValues {\n             if let Some(causes) = &mut self.causes {\n                 let cause = make_cause(causes);\n                 let old_cause = causes.get_mut(&(r, i)).unwrap();\n-                if cause < **old_cause {\n+                // #49998: compare using root cause alone to avoid\n+                // useless traffic from similar outlives chains.\n+\n+                let overwrite = if ty::tls::with(|tcx| {\n+                    tcx.sess.opts.debugging_opts.nll_subminimal_causes\n+                }) {\n+                    cause.root_cause() < old_cause.root_cause()\n+                } else {\n+                    cause < **old_cause\n+                };\n+                if overwrite {\n                     *old_cause = Rc::new(cause);\n                     return true;\n                 }"}, {"sha": "a21a6e36778c5ec4b9a739ae13db119f7c46979d", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.nll.stderr", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.nll.stderr?ref=5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2", "patch": "@@ -1,78 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:24:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 4);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n-   |                        ^^ - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:35:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut x));\n-   |                        --          - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:42:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:49:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n-   |                        ^^                                  - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:61:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "1aec71fee347b397665b502ffb44f1d9d6238eb6", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/issue-45983.rs:17:27\n    |\n LL |     give_any(|y| x = Some(y));\n@@ -16,7 +16,7 @@ error[E0594]: cannot assign to immutable item `x`\n LL |     give_any(|y| x = Some(y));\n    |                  ^^^^^^^^^^^ cannot mutate\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error[E0596]: cannot borrow immutable item `x` as mutable\n   --> $DIR/issue-45983.rs:17:14"}, {"sha": "84c6236eb0ae87c0e7c4f53cac0c8d45af014fd2", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/issue-7573.rs:27:31\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();"}, {"sha": "ee3970aa8fd8f09425b01ea1c46d043d462f2c94", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/regions-escape-bound-fn-2.rs:18:27\n    |\n LL |     with_int(|y| x = Some(y));"}, {"sha": "07a4ab1dbb1abc5f16f25fcc207c315af7fd5125", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/regions-escape-bound-fn.rs:18:22\n    |\n LL |     with_int(|y| x = Some(y));"}, {"sha": "14c255ef52778f249b5b46a470fad71beac3852e", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/regions-escape-unboxed-closure.rs:16:27\n    |\n LL |     with_int(&mut |y| x = Some(y));"}, {"sha": "bbae80e16abde58b1914acc0b9fea094c062561c", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,22 +1,22 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/expect-region-supply-region.rs:28:13\n    |\n LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n    |             ^^^^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/expect-region-supply-region.rs:38:13\n    |\n LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n    |             ^^^^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/expect-region-supply-region.rs:47:33\n    |\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/expect-region-supply-region.rs:52:13\n    |\n LL |         f = Some(x);"}, {"sha": "81f858f6bfcb007096c57418768bc0445c02971f", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,3 +1,9 @@\n+error[E0596]: cannot borrow immutable item `self` as mutable\n+  --> $DIR/issue-34126.rs:16:18\n+   |\n+LL |         self.run(&mut self); //~ ERROR cannot borrow\n+   |                  ^^^^^^^^^ cannot borrow as mutable\n+\n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:16:18\n    |\n@@ -8,6 +14,7 @@ LL |         self.run(&mut self); //~ ERROR cannot borrow\n    |         immutable borrow occurs here\n    |         borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0502`.\n+Some errors occurred: E0502, E0596.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "40b640b63cf32deee09ec1d4e3e8ac8b6f899fd9", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `f.v` as mutable\n LL |     f.v.push(\"cat\".to_string()); //~ ERROR cannot borrow\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `f`\n+   = note: the value which is causing this path not to be mutable is...: `f`\n \n error[E0384]: cannot assign twice to immutable variable `s.x`\n   --> $DIR/issue-35937.rs:26:5"}, {"sha": "8e4426779517c74782bc6e05eb38901e3138f18b", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*self.s` as mutable\n LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error: aborting due to previous error\n "}, {"sha": "6808222cc3241356a46583ebf4b159b772cd84d7", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*f.s` as mutable\n LL |     f.s.push('x'); //~ ERROR cannot borrow data mutably\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*f`\n+   = note: the value which is causing this path not to be mutable is...: `*f`\n \n error: aborting due to previous error\n "}, {"sha": "f5f5b675e7727b53d90096a75084975ed066da0b", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -4,87 +4,87 @@ error[E0596]: cannot borrow immutable item `z.x` as mutable\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `z`\n+   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:31:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:36:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:40:17\n    |\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*self`\n+   = note: the value which is causing this path not to be mutable is...: `*self`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:41:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `other.x` as mutable\n   --> $DIR/issue-39544.rs:45:17\n    |\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*other`\n+   = note: the value which is causing this path not to be mutable is...: `*other`\n \n error[E0596]: cannot borrow immutable item `z.x` as mutable\n   --> $DIR/issue-39544.rs:51:13\n    |\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `z`\n+   = note: the value which is causing this path not to be mutable is...: `z`\n \n error[E0596]: cannot borrow immutable item `w.x` as mutable\n   --> $DIR/issue-39544.rs:52:13\n    |\n LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*w`\n+   = note: the value which is causing this path not to be mutable is...: `*w`\n \n error[E0594]: cannot assign to immutable item `*x.0`\n   --> $DIR/issue-39544.rs:58:5"}, {"sha": "0525e16239d2cb606f8fa29442cb7dc30895bcd1", "filename": "src/test/ui/error-codes/E0389.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,10 +1,10 @@\n-error[E0594]: cannot assign to immutable item `fancy_ref.num`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/E0389.rs:18:5\n    |\n+LL |     let fancy_ref = &(&mut fancy);\n+   |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n LL |     fancy_ref.num = 6; //~ ERROR E0389\n-   |     ^^^^^^^^^^^^^^^^^ cannot mutate\n-   |\n-   = note: Value not mutable causing this error: `*fancy_ref`\n+   |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to previous error\n "}, {"sha": "5ae6afa7b17e274255daa5e811637a9c99fb7236", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/E0621-does-not-trigger-for-closures.rs:25:5\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495"}, {"sha": "51f8067b8ce5b8428fe7ce654113a275c24585c0", "filename": "src/test/ui/hygiene/fields-move.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -0,0 +1,46 @@\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:38:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:28:9\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+   |         ^^^^^^ value used here after move\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ----- value moved here\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                       ----------------- in this macro invocation\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `foo.x`\n+  --> $DIR/fields-move.rs:39:42\n+   |\n+LL |    $foo.x\n+   |    ------ value moved here\n+...\n+LL |         $foo.x //~ ERROR use of moved value: `foo.x`\n+   |         ------ value moved here\n+...\n+LL |     assert_two_copies(copy_modern!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ----- value moved here\n+LL |     assert_two_copies(copy_legacy!(foo), foo.x); //~ ERROR use of moved value: `foo.x`\n+   |                                          ^^^^^ value used here after move\n+   |\n+   = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "3a0a6f66d61c385f92b16ab6a46ee16a0da65f2a", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -0,0 +1,13 @@\n+error: compilation successful\n+  --> $DIR/fields-numeric-borrowck.rs:13:1\n+   |\n+LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | |     let mut s = S(0);\n+LL | |     let borrow1 = &mut s.0;\n+LL | |     let S { 0: ref mut borrow2 } = s;\n+LL | |     //~^ ERROR cannot borrow `s.0` as mutable more than once at a time\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "975684fbd41bbb7734fe53af27196d59aa979390", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct S(u8);\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut s = S(0);\n     let borrow1 = &mut s.0;\n     let S { 0: ref mut borrow2 } = s;"}, {"sha": "ec8c4ecf102469b032e0d44a36069474b4866de2", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/dyn-trait.rs:33:16\n    |\n LL |     static_val(x); //~ ERROR cannot infer"}, {"sha": "cd2ebc341ead136a8f265704f73999b99b8d0257", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,10 +1,10 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/mismatched.rs:14:42\n    |\n LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n    |                                          ^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/mismatched.rs:16:46\n    |\n LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch"}, {"sha": "886e3834d1dcaee2e30e5e00aec4cf7c0c1639e6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/mismatched_trait.rs:16:9\n    |\n LL |         y //~ ERROR explicit lifetime required"}, {"sha": "146385f3de2d82070add89283c4bcbf3c4d34611", "filename": "src/test/ui/issue-13058.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,10 +1,10 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/issue-13058.rs:24:21\n    |\n LL |     let cont_iter = cont.iter();\n    |                     ^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/issue-13058.rs:24:26\n    |\n LL |     let cont_iter = cont.iter();"}, {"sha": "8045993747934a09c8bad37c719df935f877fa3b", "filename": "src/test/ui/issue-36400.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n LL |     f(&mut *x); //~ ERROR cannot borrow immutable\n    |       ^^^^^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to previous error\n "}, {"sha": "cf108691a0e4f65a2034c7ca927a1a79450e00b4", "filename": "src/test/ui/issue-45697-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697-1.nll.stderr?ref=5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2", "patch": "@@ -1,34 +0,0 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697-1.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n-  --> $DIR/issue-45697-1.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n-...\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n-  --> $DIR/issue-45697-1.rs:30:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-...\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0503, E0506.\n-For more information about an error, try `rustc --explain E0503`."}, {"sha": "0108056bc7278265ae61aba0d7c536908bfcd6d8", "filename": "src/test/ui/issue-46471-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.nll.stderr?ref=5fe6b58dfc5ef9bb5dbfba9cf74aa9293a33e7b2", "patch": "@@ -1,28 +0,0 @@\n-error[E0597]: `z` does not live long enough (Ast)\n-  --> $DIR/issue-46471-1.rs:16:14\n-   |\n-LL |         &mut z\n-   |              ^ borrowed value does not live long enough\n-LL |     };\n-   |     - `z` dropped here while still borrowed\n-...\n-LL | }\n-   | - borrowed value needs to live until here\n-\n-error[E0597]: `z` does not live long enough (Mir)\n-  --> $DIR/issue-46471-1.rs:16:9\n-   |\n-LL |       let y = {\n-   |  _____________-\n-LL | |         let mut z = 0;\n-LL | |         &mut z\n-   | |         ^^^^^^ borrowed value does not live long enough\n-LL | |     };\n-   | |     -\n-   | |     |\n-   | |_____borrowed value only lives until here\n-   |       borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "d422a63bcad3957942af48d087fd65df878370ad", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n    |\n LL |         &*x //~ ERROR explicit lifetime"}, {"sha": "5451562cdfb4071406643684d5a83ebdc8d550ab", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n    |\n LL |                     other //~ ERROR explicit lifetime"}, {"sha": "e1dfeb0ac6adb555d9cf040928aad0c606a49323", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else-2.rs:12:16\n    |\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime"}, {"sha": "1e45914138de544ce03ea8678c4d16a005beec8f", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else-3.rs:12:27\n    |\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime"}, {"sha": "e264b3428c95bd220bf3414ce480c3de5c0551ac", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n    |\n LL |    if x > y { x } else { y } //~ ERROR explicit lifetime"}, {"sha": "6119f3c56053800959141dfe750c6616cc390df3", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n    |\n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime"}, {"sha": "71e9c34ac2b97b006a5f9ef420d83f1002bd2a21", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n    |\n LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch"}, {"sha": "5e49e4ec4a98b5c9e4f7c8e9299f4abb55e65d9f", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:12:27\n    |\n LL |     if x > y { x } else { y } //~ ERROR explicit lifetime"}, {"sha": "6c16d6a608ec8a2853f2e758808d086a5d32a94b", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n    |\n LL |     x //~ ERROR lifetime mismatch"}, {"sha": "6dc96ace4d0d31cafe9470196047fdf0f54c9893", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n    |\n LL |         if true { x } else { self } //~ ERROR lifetime mismatch"}, {"sha": "a51d9307d074d0bae99eea66e0dee9d2ee5e4dc4", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2a-push-one-existing-name-2.rs:16:12\n    |\n LL |     y.push(x); //~ ERROR explicit lifetime"}, {"sha": "c5f3510fa0ed26d3b22ed886e7180f1f26d355d8", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:12\n    |\n LL |     x.push(y); //~ ERROR explicit lifetime required"}, {"sha": "e50fd74faf4badfaf240a207689c607a9d693012", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2a-push-one-existing-name.rs:16:12\n    |\n LL |     x.push(y); //~ ERROR explicit lifetime"}, {"sha": "283192c6843927cb19dd1f26563d62cf03836540", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2b-push-no-existing-names.rs:16:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "2ca202b402cee0f666dbdb87fef7631b0bb2b1f5", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2c-push-inference-variable.rs:16:13\n    |\n LL |     let z = Ref { data: y.data };"}, {"sha": "712c25f8929d4fcb5a43ecbcf76ef2c2adabed3d", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2d-push-inference-variable-2.rs:17:13\n    |\n LL |     let b = Ref { data: y.data };"}, {"sha": "351966902a4fba657ef3ab0a48569e12f1d0810a", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex2e-push-inference-variable-3.rs:17:13\n    |\n LL |     let b = Ref { data: y.data };"}, {"sha": "871a0b109b4aa118e11de1a23ead2f9c8e61dd3c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-2.rs:12:9\n    |\n LL |     v = x; //~ ERROR lifetime mismatch"}, {"sha": "102981977e55756eaa324db92bd8a572402a002c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,10 +1,10 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-3.rs:12:13\n    |\n LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n    |             ^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-3.rs:12:15\n    |\n LL |     z.push((x,y)); //~ ERROR lifetime mismatch"}, {"sha": "191389b7706e1e8f93e18533d6157472af6249e1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:11\n    |\n LL |     x.b = y.b; //~ ERROR lifetime mismatch"}, {"sha": "159367cc9d2a6f98cceebb48c97c3ab4ccf5c59c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:11\n    |\n LL |     x.a = x.b; //~ ERROR lifetime mismatch"}, {"sha": "3bbcbdd6681fd7aa1a5b09a9f5ada3b00f17ce77", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:11\n    |\n LL |     x.a = x.b; //~ ERROR lifetime mismatch"}, {"sha": "9d1f6a3e36f1b53d40a2faa099ee164273c1a84e", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "5df93fd5547c7d306311893b81e38b927a757948", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "cd602cf950b18e3c76419e729225459e513eb360", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "52c90839c32af5d246964702923eabaf7a3a4481", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-latebound-regions.rs:12:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "9d6d68f518d72997542dbcb959647cb68c1cabf8", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:9\n    |\n LL |     y = x.b; //~ ERROR lifetime mismatch"}, {"sha": "e7fb67f117f88c5138563673e3700b83caf208b8", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:11\n    |\n LL |     y.b = x; //~ ERROR lifetime mismatch"}, {"sha": "af9e3a42664cf6e35e0b476969534bfdc797e3c0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:11\n    |\n LL |     y.b = x; //~ ERROR lifetime mismatch"}, {"sha": "5437beaab65117683f4f117089ce16ea00e6f491", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:11\n    |\n LL |     x.b = y; //~ ERROR lifetime mismatch"}, {"sha": "42e1d42a32ccd32fe78817243a9610943aebe750", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n    |\n LL |     x //~ ERROR lifetime mismatch"}, {"sha": "26b0488cfdc61cf054b369c4baa21fe8e199b0fc", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n    |\n LL |         if true { x } else { self } //~ ERROR lifetime mismatch"}, {"sha": "f58f33c9a9adbced2b9eca788f152104b8153b91", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:10\n    |\n LL |   y.push(z); //~ ERROR lifetime mismatch"}, {"sha": "4d54f6fe0375c75645f5438772219ea878854219", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-using-impl-items.rs:15:16\n    |\n LL |         x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "4bfb4ac2833c8c77c36b7b516530198bc8a80c68", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:10\n    |\n LL |   y.push(z); //~ ERROR lifetime mismatch"}, {"sha": "c25eedc770d486942e1d4ca131f32a88388a12d8", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,4 +1,4 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/ex3-both-anon-regions.rs:12:12\n    |\n LL |     x.push(y); //~ ERROR lifetime mismatch"}, {"sha": "b97bdeea409c6310e431d7139356b1cf6f07d246", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,20 +1,26 @@\n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:19:5\n    |\n+LL |     let Wrap(x) = &Wrap(3);\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n-   |     ^^^^^^^ cannot mutate\n+   |     ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:23:9\n    |\n+LL |     if let Some(x) = &Some(3) {\n+   |                 - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot mutate\n+   |         ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*x`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/enum.rs:29:9\n    |\n+LL |     while let Some(x) = &Some(3) {\n+   |                    - help: consider changing this to be a mutable reference: `&mut`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot mutate\n+   |         ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3ee4dc07bb8bbb05bb993fcdfe2ec3bcd1341aa4", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,20 +1,26 @@\n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:17:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:25:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n-error[E0594]: cannot assign to immutable item `*n`\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/explicit-mut.rs:33:13\n    |\n+LL |         Some(n) => {\n+   |              - help: consider changing this to be a mutable reference: `&mut`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot mutate\n+   |             ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "26e9ea4dc0bc86b286cf22f096acaa46dc4bd4cc", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -24,7 +24,7 @@ error[E0596]: cannot borrow immutable item `*f.f` as mutable\n LL |     f.f.call_mut(())\n    |     ^^^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `*f`\n+   = note: the value which is causing this path not to be mutable is...: `*f`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13"}, {"sha": "9b5e084bd375134372d1863b936b27a527bcc498", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -10,7 +10,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n    |\n-   = note: Value not mutable causing this error: `x`\n+   = note: the value which is causing this path not to be mutable is...: `x`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5de246cbb73413f78cd530aa30250ae2f567ba84", "filename": "src/test/ui/span/destructor-restrictions.nll.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `*a` does not live long enough\n+  --> $DIR/destructor-restrictions.rs:18:10\n+   |\n+LL |         *a.borrow() + 1\n+   |          ^---------\n+   |          |\n+   |          borrowed value does not live long enough\n+   |          borrow may end up in a temporary, created here\n+LL |     }; //~^ ERROR `*a` does not live long enough\n+   |     -- temporary later dropped here, potentially using the reference\n+   |     |\n+   |     borrowed value only lives until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "b7f8b85f46cee83f7027c80e5a3178695dc00765", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:118:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:121:24\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough\n@@ -11,7 +11,7 @@ LL | }\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:110:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:113:24\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                        ^^^ borrowed value does not live long enough\n@@ -23,7 +23,7 @@ LL | }\n    | borrow later used here, when `c1` is dropped\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:112:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:115:24\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                        ^^^ borrowed value does not live long enough"}, {"sha": "ece58d21ba932a2072d9b59ea8aafb0f466cac9d", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z nll-subminimal-causes\n+// (Work around rust-lang/rust#49998 by opting into nll-subminimal-causes.)\n+\n // Reject mixing cyclic structure and Drop when using Vec.\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)"}, {"sha": "a6bc8da6f7c0c661d8517db1c5af35fcba9a9398", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:110:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:113:25\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:112:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:115:25\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:114:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:117:25\n    |\n LL |     c2.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:116:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:119:25\n    |\n LL |     c2.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -43,7 +43,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:118:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:121:25\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                         ^^ borrowed value does not live long enough\n@@ -54,7 +54,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:120:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:123:25\n    |\n LL |     c3.v[1].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough"}, {"sha": "56f2d14390ecdb5ee60001ff3214dc6c67cb9301", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.nll.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -0,0 +1,30 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:20:5\n+   |\n+LL |     y.borrow().clone()\n+   |     ^---------\n+   |     |\n+   |     borrowed value does not live long enough\n+   |     borrow may end up in a temporary, created here\n+LL | }\n+   | -\n+   | |\n+   | borrowed value only lives until here\n+   | temporary later dropped here, potentially using the reference\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:27:9\n+   |\n+LL |         y.borrow().clone()\n+   |         ^---------\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         borrow may end up in a temporary, created here\n+LL |     };\n+   |     -- temporary later dropped here, potentially using the reference\n+   |     |\n+   |     borrowed value only lives until here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "063ac376b05ecc43f9e08ed87345336f6e4deeee", "filename": "src/test/ui/span/wf-method-late-bound-regions.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,14 +1,14 @@\n-error: compilation successful\n-  --> $DIR/wf-method-late-bound-regions.rs:25:1\n+error[E0597]: `pointer` does not live long enough\n+  --> $DIR/wf-method-late-bound-regions.rs:30:18\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let f = Foo(None);\n-LL | |     let f2 = f;\n-LL | |     let dangling = {\n-...  |\n-LL | |     println!(\"{}\", dangling);\n-LL | | }\n-   | |_^\n+LL |         f2.xmute(&pointer)\n+   |                  ^^^^^^^^ borrowed value does not live long enough\n+LL |     };\n+   |     - borrowed value only lives until here\n+LL |     //~^^ ERROR `pointer` does not live long enough\n+LL |     println!(\"{}\", dangling);\n+   |                    -------- borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d58c29d4a32d3bdfd307e4379b01302d6b1f7d85", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -11,7 +11,7 @@\n // A method's receiver must be well-formed, even if it has late-bound regions.\n // Because of this, a method's substs being well-formed does not imply that\n // the method's implied bounds are met.\n-#![feature(rustc_attrs)]\n+\n struct Foo<'b>(Option<&'b ()>);\n \n trait Bar<'b> {\n@@ -22,7 +22,7 @@ impl<'b> Bar<'b> for Foo<'b> {\n     fn xmute<'a>(&'a self, u: &'b u32) -> &'a u32 { u }\n }\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let f = Foo(None);\n     let f2 = f;\n     let dangling = {"}, {"sha": "10a03786d7b1fa2a3353b8bc6fc003ae95c11df9", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -1,22 +1,22 @@\n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/dyn-trait-underscore.rs:20:14\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/dyn-trait-underscore.rs:20:20\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |                    ^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/dyn-trait-underscore.rs:20:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^\n \n-warning: not reporting region error due to -Znll\n+warning: not reporting region error due to nll\n   --> $DIR/dyn-trait-underscore.rs:20:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime"}, {"sha": "cfe9a43707cf614cd7318e004ce30e94d3b5633c", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -33,6 +33,7 @@ shift\n \n while [[ \"$1\" != \"\" ]]; do\n     STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDERR_NLL_NAME=\"${1/%.rs/.nll.stderr}\"\n     STDOUT_NAME=\"${1/%.rs/.stdout}\"\n     shift\n     if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n@@ -45,4 +46,9 @@ while [[ \"$1\" != \"\" ]]; do\n         echo updating $MYDIR/$STDERR_NAME\n         cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n     fi\n+    if [ -f $BUILD_DIR/$STDERR_NLL_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NLL_NAME\n+        cp $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME\n+    fi\n done"}, {"sha": "365b47447f23a92477694417feeedca494a8bd6d", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -101,7 +101,7 @@ pub enum CompareMode {\n }\n \n impl CompareMode {\n-    fn to_str(&self) -> &'static str {\n+    pub(crate) fn to_str(&self) -> &'static str {\n         match *self {\n             CompareMode::Nll => \"nll\"\n         }"}, {"sha": "37f7af0abe8f56e32d72a00640d59bfd365ee01a", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -626,7 +626,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n \n     // Debugging emscripten code doesn't make sense today\n     let ignore = early_props.ignore\n-        || (!up_to_date(config, testpaths, &early_props) && config.compare_mode.is_none())\n+        || !up_to_date(config, testpaths, &early_props)\n         || (config.mode == DebugInfoGdb || config.mode == DebugInfoLldb)\n             && config.target.contains(\"emscripten\");\n \n@@ -642,10 +642,15 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n }\n \n fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n+    let mode_suffix = match config.compare_mode {\n+        Some(ref mode) => format!(\"-{}\", mode.to_str()),\n+        None => format!(\"\"),\n+    };\n     let stamp_name = format!(\n-        \"{}-{}.stamp\",\n+        \"{}-{}{}.stamp\",\n         testpaths.file.file_name().unwrap().to_str().unwrap(),\n-        config.stage_id\n+        config.stage_id,\n+        mode_suffix\n     );\n     config\n         .build_base\n@@ -728,7 +733,11 @@ pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName\n     let path = PathBuf::from(config.src_base.file_name().unwrap())\n         .join(&testpaths.relative_dir)\n         .join(&testpaths.file.file_name().unwrap());\n-    test::DynTestName(format!(\"[{}] {}\", config.mode, path.display()))\n+    let mode_suffix = match config.compare_mode {\n+        Some(ref mode) => format!(\" ({})\", mode.to_str()),\n+        None => format!(\"\"),\n+    };\n+    test::DynTestName(format!(\"[{}{}] {}\", config.mode, mode_suffix, path.display()))\n }\n \n pub fn make_test_closure(config: &Config, testpaths: &TestPaths) -> test::TestFn {"}, {"sha": "c16dbd0272a76830364ff3b7ac99e15da111d2d6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8a28d94ea1b6c19b7e1d41ef9b33ccb73951f654", "patch": "@@ -2811,7 +2811,7 @@ impl<'test> TestCx<'test> {\n         normalized\n     }\n \n-    fn load_expected_output(&self, kind: &str) -> String {\n+    fn expected_output_path(&self, kind: &str) -> PathBuf {\n         let mut path = expected_output_path(&self.testpaths,\n                                             self.revision,\n                                             &self.config.compare_mode,\n@@ -2822,6 +2822,11 @@ impl<'test> TestCx<'test> {\n             path = expected_output_path(&self.testpaths, self.revision, &None, kind);\n         }\n \n+        path\n+    }\n+\n+    fn load_expected_output(&self, kind: &str) -> String {\n+        let path = self.expected_output_path(kind);\n         if path.exists() {\n             match self.load_expected_output_from_path(&path) {\n                 Ok(x) => x,\n@@ -2875,7 +2880,8 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let output_file = self.output_base_name().with_extension(kind);\n+        let expected_output_path = self.expected_output_path(kind);\n+        let output_file = self.output_base_name().with_file_name(&expected_output_path);\n         match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => {}\n             Err(e) => self.fatal(&format!("}]}