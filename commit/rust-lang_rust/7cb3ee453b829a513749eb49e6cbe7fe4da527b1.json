{"sha": "7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYjNlZTQ1M2I4MjlhNTEzNzQ5ZWI0OWU2Y2JlN2ZlNGRhNTI3YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-24T04:16:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-24T04:16:12Z"}, "message": "Auto merge of #58304 - gnzlbg:simd_saturated, r=nagisa\n\nAdd generic simd saturated add/sub intrinsics\n\nr? @eddyb", "tree": {"sha": "e1cb90aab0ff7a37bce986740a0bf6fef4981f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1cb90aab0ff7a37bce986740a0bf6fef4981f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "html_url": "https://github.com/rust-lang/rust/commit/7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573049729ca7f4a4977e48467156d7fc8b13f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573049729ca7f4a4977e48467156d7fc8b13f62", "html_url": "https://github.com/rust-lang/rust/commit/f573049729ca7f4a4977e48467156d7fc8b13f62"}, {"sha": "f0783d5cb1b46cd29c3271661342532f4925ba04", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0783d5cb1b46cd29c3271661342532f4925ba04", "html_url": "https://github.com/rust-lang/rust/commit/f0783d5cb1b46cd29c3271661342532f4925ba04"}], "stats": {"total": 904, "additions": 895, "deletions": 9}, "files": [{"sha": "edeef23bdca91fca461c54a4892293d6bf330691", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -515,14 +515,24 @@ impl CodegenCx<'b, 'tcx> {\n         let t_f32 = self.type_f32();\n         let t_f64 = self.type_f64();\n \n-        let t_v2f32 = self.type_vector(t_f32, 2);\n-        let t_v4f32 = self.type_vector(t_f32, 4);\n-        let t_v8f32 = self.type_vector(t_f32, 8);\n-        let t_v16f32 = self.type_vector(t_f32, 16);\n-\n-        let t_v2f64 = self.type_vector(t_f64, 2);\n-        let t_v4f64 = self.type_vector(t_f64, 4);\n-        let t_v8f64 = self.type_vector(t_f64, 8);\n+        macro_rules! vector_types {\n+            ($id_out:ident: $elem_ty:ident, $len:expr) => {\n+                let $id_out = self.type_vector($elem_ty, $len);\n+            };\n+            ($($id_out:ident: $elem_ty:ident, $len:expr;)*) => {\n+                $(vector_types!($id_out: $elem_ty, $len);)*\n+            }\n+        }\n+        vector_types! {\n+            t_v2f32: t_f32, 2;\n+            t_v4f32: t_f32, 4;\n+            t_v8f32: t_f32, 8;\n+            t_v16f32: t_f32, 16;\n+\n+            t_v2f64: t_f64, 2;\n+            t_v4f64: t_f64, 4;\n+            t_v8f64: t_f64, 8;\n+        }\n \n         ifn!(\"llvm.memset.p0i8.i16\", fn(i8p, t_i8, t_i16, t_i32, i1) -> void);\n         ifn!(\"llvm.memset.p0i8.i32\", fn(i8p, t_i8, t_i32, t_i32, i1) -> void);"}, {"sha": "d12ee7649bda03993eb9b09ad91ac23b595634eb", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -1848,7 +1848,52 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         simd_xor: Uint, Int => xor;\n         simd_fmax: Float => maxnum;\n         simd_fmin: Float => minnum;\n+\n+    }\n+\n+    if name == \"simd_saturating_add\" || name == \"simd_saturating_sub\" {\n+        let lhs = args[0].immediate();\n+        let rhs = args[1].immediate();\n+        let is_add = name == \"simd_saturating_add\";\n+        let ptr_bits = bx.tcx().data_layout.pointer_size.bits() as _;\n+        let (signed, elem_width, elem_ty) = match in_elem.sty {\n+            ty::Int(i) =>\n+                (\n+                    true,\n+                    i.bit_width().unwrap_or(ptr_bits),\n+                    bx.cx.type_int_from_ty(i)\n+                ),\n+            ty::Uint(i) =>\n+                (\n+                    false,\n+                    i.bit_width().unwrap_or(ptr_bits),\n+                    bx.cx.type_uint_from_ty(i)\n+                ),\n+            _ => {\n+                return_error!(\n+                    \"expected element type `{}` of vector type `{}` \\\n+                     to be a signed or unsigned integer type\",\n+                    arg_tys[0].simd_type(tcx).sty, arg_tys[0]\n+                );\n+            }\n+        };\n+        let llvm_intrinsic = &format!(\n+            \"llvm.{}{}.sat.v{}i{}\",\n+            if signed { 's' } else { 'u' },\n+            if is_add { \"add\" } else { \"sub\" },\n+            in_len, elem_width\n+        );\n+        let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n+\n+        let f = bx.declare_cfn(\n+            &llvm_intrinsic,\n+            bx.type_func(&[vec_ty, vec_ty], vec_ty)\n+        );\n+        llvm::SetUnnamedAddr(f, false);\n+        let v = bx.call(f, &[lhs, rhs], None);\n+        return Ok(v);\n     }\n+\n     span_bug!(span, \"unknown SIMD intrinsic\");\n }\n "}, {"sha": "3b174b55f2ba02c0e0934a81b1658897896a05f8", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -410,7 +410,8 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_rem\" |\n         \"simd_div\" | \"simd_shl\" | \"simd_shr\" |\n         \"simd_and\" | \"simd_or\" | \"simd_xor\" |\n-        \"simd_fmin\" | \"simd_fmax\" | \"simd_fpow\" => {\n+        \"simd_fmin\" | \"simd_fmax\" | \"simd_fpow\" |\n+        \"simd_saturating_add\" | \"simd_saturating_sub\" => {\n             (1, vec![param(0), param(0)], param(0))\n         }\n         \"simd_fsqrt\" | \"simd_fsin\" | \"simd_fcos\" | \"simd_fexp\" | \"simd_fexp2\" |"}, {"sha": "acb993d51fb8c928aa9138d1cc3c14f8e4ac95f9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-abs.rs"}, {"sha": "58667af7e50edcb0dcd7eff217adcea710616ac7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-ceil.rs"}, {"sha": "affbe17d3341f22f870846c0caf3e8ac52300470", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-cos.rs"}, {"sha": "43472d9dece8ea98f278cb887f1f197262b3b61d", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-exp.rs"}, {"sha": "471d49b7841eceea455f324229930bdb2917ed12", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-exp2.rs"}, {"sha": "bd8ba8b6cd774a286cc0ea39e7c5274c0921b232", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-floor.rs"}, {"sha": "8ad9e9004c2cd77b578f399f5c3c3141ca613ae1", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-fma.rs"}, {"sha": "ecffca960dab4d4d2646cdaf9898a81e86d01c48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-fsqrt.rs"}, {"sha": "79e6ed54690bf9628eafd64dbc119d3861802222", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-log.rs"}, {"sha": "db92a94fca84b32c6cb59e783b11b7d1df470e89", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-log10.rs"}, {"sha": "90d9ec3cedd6f5a7d1ffb419721cc48bdb0a5e49", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-log2.rs"}, {"sha": "2761392e6a92357be53c3a39e4466d7a8136b4a0", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-minmax.rs"}, {"sha": "1dd2c2ccb83db98c6f70bb6c77efecf4bfbf6088", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-pow.rs"}, {"sha": "09f31bdd6bbdfa56de0fa80e88c061b91f0103b9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-powi.rs"}, {"sha": "dc87651c2aa1f058d81fcef013132b7ada2d0120", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-float-sin.rs"}, {"sha": "adee796d2475a19302082318c19a93dfef86bf48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "added", "additions": 685, "deletions": 0, "changes": 685, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -0,0 +1,685 @@\n+// compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+#![deny(unused)]\n+\n+// signed integer types\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x2(i8, i8);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x4(i8, i8, i8, i8);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x8(\n+    i8, i8, i8, i8, i8, i8, i8, i8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x16(\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x32(\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i8x64(\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+    i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i16x2(i16, i16);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i16x4(i16, i16, i16, i16);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i16x8(\n+    i16, i16, i16, i16, i16, i16, i16, i16,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i16x16(\n+    i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i16x32(\n+    i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16,\n+    i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i32x2(i32, i32);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i32x8(\n+    i32, i32, i32, i32, i32, i32, i32, i32,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i32x16(\n+    i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i64x2(i64, i64);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i64x4(i64, i64, i64, i64);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i64x8(\n+    i64, i64, i64, i64, i64, i64, i64, i64,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i128x2(i128, i128);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct i128x4(i128, i128, i128, i128);\n+\n+// unsigned integer types\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x2(u8, u8);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x4(u8, u8, u8, u8);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x8(\n+    u8, u8, u8, u8, u8, u8, u8, u8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x16(\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x32(\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u8x64(\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+    u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u16x2(u16, u16);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u16x4(u16, u16, u16, u16);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u16x8(\n+    u16, u16, u16, u16, u16, u16, u16, u16,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u16x16(\n+    u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u16x32(\n+    u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16,\n+    u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16, u16,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u32x2(u32, u32);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u32x4(u32, u32, u32, u32);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u32x8(\n+    u32, u32, u32, u32, u32, u32, u32, u32,\n+);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u32x16(\n+    u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32, u32,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u64x2(u64, u64);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u64x4(u64, u64, u64, u64);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u64x8(\n+    u64, u64, u64, u64, u64, u64, u64, u64,\n+);\n+\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u128x2(u128, u128);\n+#[repr(simd)] #[derive(Copy, Clone)] pub struct u128x4(u128, u128, u128, u128);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<T>(x: T, y: T) -> T;\n+    fn simd_saturating_sub<T>(x: T, y: T) -> T;\n+}\n+\n+// CHECK-LABEL: @sadd_i8x2\n+#[no_mangle]\n+pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i8x4\n+#[no_mangle]\n+pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i8x8\n+#[no_mangle]\n+pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i8x16\n+#[no_mangle]\n+pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i8x32\n+#[no_mangle]\n+pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i8x64\n+#[no_mangle]\n+pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i16x2\n+#[no_mangle]\n+pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i16x4\n+#[no_mangle]\n+pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i16x8\n+#[no_mangle]\n+pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i16x16\n+#[no_mangle]\n+pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i16x32\n+#[no_mangle]\n+pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i32x2\n+#[no_mangle]\n+pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i32x4\n+#[no_mangle]\n+pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i32x8\n+#[no_mangle]\n+pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i32x16\n+#[no_mangle]\n+pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i64x2\n+#[no_mangle]\n+pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i64x4\n+#[no_mangle]\n+pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i64x8\n+#[no_mangle]\n+pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i128x2\n+#[no_mangle]\n+pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @sadd_i128x4\n+#[no_mangle]\n+pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+\n+\n+// CHECK-LABEL: @uadd_u8x2\n+#[no_mangle]\n+pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u8x4\n+#[no_mangle]\n+pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u8x8\n+#[no_mangle]\n+pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u8x16\n+#[no_mangle]\n+pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u8x32\n+#[no_mangle]\n+pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u8x64\n+#[no_mangle]\n+pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u16x2\n+#[no_mangle]\n+pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u16x4\n+#[no_mangle]\n+pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u16x8\n+#[no_mangle]\n+pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u16x16\n+#[no_mangle]\n+pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u16x32\n+#[no_mangle]\n+pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u32x2\n+#[no_mangle]\n+pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u32x4\n+#[no_mangle]\n+pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u32x8\n+#[no_mangle]\n+pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u32x16\n+#[no_mangle]\n+pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u64x2\n+#[no_mangle]\n+pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u64x4\n+#[no_mangle]\n+pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u64x8\n+#[no_mangle]\n+pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u128x2\n+#[no_mangle]\n+pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+// CHECK-LABEL: @uadd_u128x4\n+#[no_mangle]\n+pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    simd_saturating_add(x, y)\n+}\n+\n+\n+\n+\n+\n+// CHECK-LABEL: @ssub_i8x2\n+#[no_mangle]\n+pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i8x4\n+#[no_mangle]\n+pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i8x8\n+#[no_mangle]\n+pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i8x16\n+#[no_mangle]\n+pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i8x32\n+#[no_mangle]\n+pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i8x64\n+#[no_mangle]\n+pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i16x2\n+#[no_mangle]\n+pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i16x4\n+#[no_mangle]\n+pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i16x8\n+#[no_mangle]\n+pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i16x16\n+#[no_mangle]\n+pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i16x32\n+#[no_mangle]\n+pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i32x2\n+#[no_mangle]\n+pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i32x4\n+#[no_mangle]\n+pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i32x8\n+#[no_mangle]\n+pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i32x16\n+#[no_mangle]\n+pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i64x2\n+#[no_mangle]\n+pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i64x4\n+#[no_mangle]\n+pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i64x8\n+#[no_mangle]\n+pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i128x2\n+#[no_mangle]\n+pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @ssub_i128x4\n+#[no_mangle]\n+pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+\n+\n+// CHECK-LABEL: @usub_u8x2\n+#[no_mangle]\n+pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u8x4\n+#[no_mangle]\n+pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u8x8\n+#[no_mangle]\n+pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u8x16\n+#[no_mangle]\n+pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u8x32\n+#[no_mangle]\n+pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u8x64\n+#[no_mangle]\n+pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u16x2\n+#[no_mangle]\n+pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u16x4\n+#[no_mangle]\n+pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u16x8\n+#[no_mangle]\n+pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u16x16\n+#[no_mangle]\n+pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u16x32\n+#[no_mangle]\n+pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u32x2\n+#[no_mangle]\n+pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u32x4\n+#[no_mangle]\n+pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u32x8\n+#[no_mangle]\n+pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u32x16\n+#[no_mangle]\n+pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u64x2\n+#[no_mangle]\n+pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u64x4\n+#[no_mangle]\n+pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u64x8\n+#[no_mangle]\n+pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u128x2\n+#[no_mangle]\n+pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}\n+\n+// CHECK-LABEL: @usub_u128x4\n+#[no_mangle]\n+pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    simd_saturating_sub(x, y)\n+}"}, {"sha": "cd8130f92314856320a11dbb181882a71ca856ea", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-generic-bitmask.rs"}, {"sha": "3389104219ddf7df27afbb77ab9a062c05148d5b", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-generic-gather.rs"}, {"sha": "dd0a9801bc5fa6b9b59e9093fea6b44df3fced0e", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-generic-scatter.rs"}, {"sha": "03bb2265526434c9fbd840cf0d4159d60b069e42", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-select.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "previous_filename": "src/test/codegen/simd-intrinsic-generic-select.rs"}, {"sha": "b2ddcf023ebcb90fab5de2431e9df1579be6347c", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -0,0 +1,92 @@\n+// run-pass\n+// ignore-emscripten\n+// min-llvm-version 8.0\n+\n+#![allow(non_camel_case_types)]\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct i32x4(pub i32, pub i32, pub i32, pub i32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<T>(x: T, y: T) -> T;\n+    fn simd_saturating_sub<T>(x: T, y: T) -> T;\n+}\n+\n+fn main() {\n+    // unsigned\n+    {\n+        const M: u32 = u32::max_value();\n+\n+        let a = u32x4(1, 2, 3, 4);\n+        let b = u32x4(2, 4, 6, 8);\n+        let m = u32x4(M, M, M, M);\n+        let m1 = u32x4(M - 1, M - 1, M - 1, M - 1);\n+        let z = u32x4(0, 0, 0, 0);\n+\n+        unsafe {\n+            assert_eq!(simd_saturating_add(z, z), z);\n+            assert_eq!(simd_saturating_add(z, a), a);\n+            assert_eq!(simd_saturating_add(b, z), b);\n+            assert_eq!(simd_saturating_add(a, a), b);\n+            assert_eq!(simd_saturating_add(a, m), m);\n+            assert_eq!(simd_saturating_add(m, b), m);\n+            assert_eq!(simd_saturating_add(m1, a), m);\n+\n+            assert_eq!(simd_saturating_sub(b, z), b);\n+            assert_eq!(simd_saturating_sub(b, a), a);\n+            assert_eq!(simd_saturating_sub(a, a), z);\n+            assert_eq!(simd_saturating_sub(a, b), z);\n+            assert_eq!(simd_saturating_sub(a, m1), z);\n+            assert_eq!(simd_saturating_sub(b, m1), z);\n+        }\n+    }\n+\n+    // signed\n+    {\n+        const MIN: i32 = i32::min_value();\n+        const MAX: i32 = i32::max_value();\n+\n+        let a = i32x4(1, 2, 3, 4);\n+        let b = i32x4(2, 4, 6, 8);\n+        let c = i32x4(-1, -2, -3, -4);\n+        let d = i32x4(-2, -4, -6, -8);\n+\n+        let max = i32x4(MAX, MAX, MAX, MAX);\n+        let max1 = i32x4(MAX - 1, MAX - 1, MAX - 1, MAX - 1);\n+        let min = i32x4(MIN, MIN, MIN, MIN);\n+        let min1 = i32x4(MIN + 1, MIN + 1, MIN + 1, MIN + 1);\n+\n+        let z = i32x4(0, 0, 0, 0);\n+\n+        unsafe {\n+            assert_eq!(simd_saturating_add(z, z), z);\n+            assert_eq!(simd_saturating_add(z, a), a);\n+            assert_eq!(simd_saturating_add(b, z), b);\n+            assert_eq!(simd_saturating_add(a, a), b);\n+            assert_eq!(simd_saturating_add(a, max), max);\n+            assert_eq!(simd_saturating_add(max, b), max);\n+            assert_eq!(simd_saturating_add(max1, a), max);\n+            assert_eq!(simd_saturating_add(min1, z), min1);\n+            assert_eq!(simd_saturating_add(min, z), min);\n+            assert_eq!(simd_saturating_add(min1, c), min);\n+            assert_eq!(simd_saturating_add(min, c), min);\n+            assert_eq!(simd_saturating_add(min1, d), min);\n+            assert_eq!(simd_saturating_add(min, d), min);\n+\n+            assert_eq!(simd_saturating_sub(b, z), b);\n+            assert_eq!(simd_saturating_sub(b, a), a);\n+            assert_eq!(simd_saturating_sub(a, a), z);\n+            assert_eq!(simd_saturating_sub(a, b), c);\n+            assert_eq!(simd_saturating_sub(z, max), min1);\n+            assert_eq!(simd_saturating_sub(min1, z), min1);\n+            assert_eq!(simd_saturating_sub(min1, a), min);\n+            assert_eq!(simd_saturating_sub(min1, b), min);\n+        }\n+    }\n+}"}, {"sha": "65cf31f2f1fa6f0da7c4fd77a241eea239fbbf9b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -0,0 +1,38 @@\n+// ignore-emscripten\n+// ignore-tidy-linelength\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct x4<T>(pub T, pub T, pub T, pub T);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<T>(x: T, y: T) -> T;\n+    fn simd_saturating_sub<T>(x: T, y: T) -> T;\n+}\n+\n+fn main() {\n+    let x = i32x4(0, 0, 0, 0);\n+    let y = x4(0_usize, 0, 0, 0);\n+    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n+\n+    unsafe {\n+        simd_saturating_add(x, x);\n+        simd_saturating_add(y, y);\n+        simd_saturating_sub(x, x);\n+        simd_saturating_sub(y, y);\n+\n+        simd_saturating_add(z, z);\n+        //~^ ERROR expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n+        simd_saturating_sub(z, z);\n+        //~^ ERROR expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n+    }\n+}"}, {"sha": "0e88540bcc8e509def586b61793f79569d419900", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cb3ee453b829a513749eb49e6cbe7fe4da527b1/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr?ref=7cb3ee453b829a513749eb49e6cbe7fe4da527b1", "patch": "@@ -0,0 +1,15 @@\n+error[E0511]: invalid monomorphization of `simd_saturating_add` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n+  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:33:9\n+   |\n+LL |         simd_saturating_add(z, z);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_saturating_sub` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n+  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:35:9\n+   |\n+LL |         simd_saturating_sub(z, z);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}]}