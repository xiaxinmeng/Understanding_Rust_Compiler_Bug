{"sha": "050c744c23a8e01407452bc64ca63f92554afee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGM3NDRjMjNhOGUwMTQwNzQ1MmJjNjRjYTYzZjkyNTU0YWZlZTI=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-09T10:23:38Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-09T10:23:38Z"}, "message": "Add uninit intrinsic", "tree": {"sha": "e5b8e8715fac93caf2c4b0034e3872a8a438ff86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b8e8715fac93caf2c4b0034e3872a8a438ff86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050c744c23a8e01407452bc64ca63f92554afee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050c744c23a8e01407452bc64ca63f92554afee2", "html_url": "https://github.com/rust-lang/rust/commit/050c744c23a8e01407452bc64ca63f92554afee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050c744c23a8e01407452bc64ca63f92554afee2/comments", "author": null, "committer": null, "parents": [{"sha": "fda176b07046c25c67af978c20c3d4eda2068079", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda176b07046c25c67af978c20c3d4eda2068079", "html_url": "https://github.com/rust-lang/rust/commit/fda176b07046c25c67af978c20c3d4eda2068079"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "cfd305f4b70c1a55abd823b010375edb2c7a935a", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=050c744c23a8e01407452bc64ca63f92554afee2", "patch": "@@ -44,6 +44,9 @@ pub extern \"rust-intrinsic\" {\n \n     pub fn init<T>() -> T;\n \n+    #[cfg(not(stage0))]\n+    pub unsafe fn uninit<T>() -> T;\n+\n     pub fn forget<T>(_: T) -> ();\n \n     pub fn needs_drop<T>() -> bool;"}, {"sha": "26654cf31f86143cdef7f1149da387715c154ffa", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=050c744c23a8e01407452bc64ca63f92554afee2", "patch": "@@ -715,6 +715,9 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 Store(bcx, C_null(lltp_ty), fcx.llretptr.get());\n             }\n         }\n+        ~\"uninit\" => {\n+            // Do nothing, this is effectively a no-op\n+        }\n         ~\"forget\" => {}\n         ~\"transmute\" => {\n             let (in_type, out_type) = (substs.tys[0], substs.tys[1]);"}, {"sha": "cbad7bcb3a6bed4698573484cc788a4ed2d05110", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=050c744c23a8e01407452bc64ca63f92554afee2", "patch": "@@ -118,7 +118,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         if abi.is_intrinsic() {\n             let flags = match *cx.ccx.sess.str_of(i.ident) {\n                 ~\"size_of\"  | ~\"pref_align_of\" | ~\"min_align_of\" |\n-                ~\"init\"     | ~\"transmute\"     | ~\"move_val\"     |\n+                ~\"uninit\"   | ~\"init\" | ~\"transmute\" | ~\"move_val\" |\n                 ~\"move_val_init\" => use_repr,\n \n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,"}, {"sha": "a6f2f0da234d40e29355311998393da5ca6fa736", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c744c23a8e01407452bc64ca63f92554afee2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=050c744c23a8e01407452bc64ca63f92554afee2", "patch": "@@ -3447,6 +3447,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n       ~\"size_of\" |\n       ~\"pref_align_of\" | ~\"min_align_of\" => (1u, ~[], ty::mk_uint()),\n       ~\"init\" => (1u, ~[], param(ccx, 0u)),\n+      ~\"uninit\" => (1u, ~[], param(ccx, 0u)),\n       ~\"forget\" => (1u, ~[arg(param(ccx, 0u))], ty::mk_nil()),\n       ~\"transmute\" => (2, ~[ arg(param(ccx, 0)) ], param(ccx, 1)),\n       ~\"move_val\" | ~\"move_val_init\" => {"}, {"sha": "a835c9531bf783443d94db1d078f44284f187bc7", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/050c744c23a8e01407452bc64ca63f92554afee2/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c744c23a8e01407452bc64ca63f92554afee2/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=050c744c23a8e01407452bc64ca63f92554afee2", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern \"rust-intrinsic\" {\n+        fn uninit<T>() -> T;\n+    }\n+}\n+pub fn main() {\n+    let _a : int = unsafe {rusti::uninit()};\n+}"}]}