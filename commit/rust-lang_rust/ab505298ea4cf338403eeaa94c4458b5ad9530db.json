{"sha": "ab505298ea4cf338403eeaa94c4458b5ad9530db", "node_id": "C_kwDOAAsO6NoAKGFiNTA1Mjk4ZWE0Y2YzMzg0MDNlZWFhOTRjNDQ1OGI1YWQ5NTMwZGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-10T14:01:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-10T14:01:45Z"}, "message": "Rollup merge of #105482 - wesleywiser:fix_debuginfo_ub, r=tmiasko\n\nFix invalid codegen during debuginfo lowering\n\nIn order for LLVM to correctly generate debuginfo for msvc, we sometimes need to spill arguments to the stack and perform some direct & indirect offsets into the value. Previously, this code always performed those actions, even when not required as LLVM would clean it up during optimization.\n\nHowever, when MIR inlining is enabled, this can cause problems as the operations occur prior to the spilled value being initialized. To solve this, we first calculate the necessary offsets using just the type which is side-effect free and does not alter the LLVM IR. Then, if we are in a situation which requires us to generate the LLVM IR (and this situation only occurs for arguments, not local variables) then we perform the same calculation again, this time generating the appropriate LLVM IR as we go.\n\nr? `@tmiasko` but feel free to reassign if you want \ud83d\ude42\n\nFixes #105386", "tree": {"sha": "01e3cb591184e40a8068f5ff4d9cfc34ab27e05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e3cb591184e40a8068f5ff4d9cfc34ab27e05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab505298ea4cf338403eeaa94c4458b5ad9530db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjlJFJCRBK7hj4Ov3rIwAATwAIADKyyowYZEwPS70i0CJfcUWk\n+f1+YZi3WLQFJkqf4+91hBqG5ZL/W7wCgHAuOtPaUtNgFh0QOiMtZ2YJm81WIkxP\njoJdts6JWFp0ntTFELiwCddUOdC2FdNE+rtSdhasEYosuxa5UsgrNy9/UurRsn+W\nIyLnmiDJIxeQU+73JEbX4wQT7hqwbHQ7vhYLFsJQmv0iVIuU7ekx0jJvam8SNIrU\nxGmEFaG4Z7tzLtN/urvQnpaS6rYeSUx7ELASxi+7QnIaBEExfbDK7+X+/3Rc6+P3\nWamRWEXxwFnTRuSQaS0mga3PbNbetJICT5qwBIdOrkx9j/Kn2c/YPlcsTAXxzzw=\n=yS98\n-----END PGP SIGNATURE-----\n", "payload": "tree 01e3cb591184e40a8068f5ff4d9cfc34ab27e05a\nparent 62160cba7b00e84e92e2e64dc8fa6ba906823585\nparent 7253057887b6de77e6847844311da517d2ada1eb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670680905 +0100\ncommitter GitHub <noreply@github.com> 1670680905 +0100\n\nRollup merge of #105482 - wesleywiser:fix_debuginfo_ub, r=tmiasko\n\nFix invalid codegen during debuginfo lowering\n\nIn order for LLVM to correctly generate debuginfo for msvc, we sometimes need to spill arguments to the stack and perform some direct & indirect offsets into the value. Previously, this code always performed those actions, even when not required as LLVM would clean it up during optimization.\n\nHowever, when MIR inlining is enabled, this can cause problems as the operations occur prior to the spilled value being initialized. To solve this, we first calculate the necessary offsets using just the type which is side-effect free and does not alter the LLVM IR. Then, if we are in a situation which requires us to generate the LLVM IR (and this situation only occurs for arguments, not local variables) then we perform the same calculation again, this time generating the appropriate LLVM IR as we go.\n\nr? `@tmiasko` but feel free to reassign if you want \ud83d\ude42\n\nFixes #105386\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab505298ea4cf338403eeaa94c4458b5ad9530db", "html_url": "https://github.com/rust-lang/rust/commit/ab505298ea4cf338403eeaa94c4458b5ad9530db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab505298ea4cf338403eeaa94c4458b5ad9530db/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62160cba7b00e84e92e2e64dc8fa6ba906823585", "url": "https://api.github.com/repos/rust-lang/rust/commits/62160cba7b00e84e92e2e64dc8fa6ba906823585", "html_url": "https://github.com/rust-lang/rust/commit/62160cba7b00e84e92e2e64dc8fa6ba906823585"}, {"sha": "7253057887b6de77e6847844311da517d2ada1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7253057887b6de77e6847844311da517d2ada1eb", "html_url": "https://github.com/rust-lang/rust/commit/7253057887b6de77e6847844311da517d2ada1eb"}], "stats": {"total": 178, "additions": 149, "deletions": 29}, "files": [{"sha": "b7982b633f57fa8b38b93983d078358152820d68", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 107, "deletions": 29, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/ab505298ea4cf338403eeaa94c4458b5ad9530db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab505298ea4cf338403eeaa94c4458b5ad9530db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=ab505298ea4cf338403eeaa94c4458b5ad9530db", "patch": "@@ -3,12 +3,12 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::Abi;\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Abi, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -76,6 +76,106 @@ impl<'tcx, S: Copy, L: Copy> DebugScope<S, L> {\n     }\n }\n \n+trait DebugInfoOffsetLocation<'tcx, Bx> {\n+    fn deref(&self, bx: &mut Bx) -> Self;\n+    fn layout(&self) -> TyAndLayout<'tcx>;\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self;\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n+}\n+\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for PlaceRef<'tcx, Bx::Value>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.load_operand(*self).deref(bx.cx())\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        PlaceRef::project_field(*self, bx, field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.project_downcast(bx, variant)\n+    }\n+}\n+\n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for TyAndLayout<'tcx>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.cx().layout_of(\n+            self.ty.builtin_deref(true).unwrap_or_else(|| bug!(\"cannot deref `{}`\", self.ty)).ty,\n+        )\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        *self\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        self.field(bx.cx(), field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.for_variant(bx.cx(), variant)\n+    }\n+}\n+\n+struct DebugInfoOffset<T> {\n+    /// Offset from the `base` used to calculate the debuginfo offset.\n+    direct_offset: Size,\n+    /// Each offset in this vector indicates one level of indirection from the base or previous\n+    /// indirect offset plus a dereference.\n+    indirect_offsets: Vec<Size>,\n+    /// The final location debuginfo should point to.\n+    result: T,\n+}\n+\n+fn calculate_debuginfo_offset<\n+    'a,\n+    'tcx,\n+    Bx: BuilderMethods<'a, 'tcx>,\n+    L: DebugInfoOffsetLocation<'tcx, Bx>,\n+>(\n+    bx: &mut Bx,\n+    local: mir::Local,\n+    var: &PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n+    base: L,\n+) -> DebugInfoOffset<L> {\n+    let mut direct_offset = Size::ZERO;\n+    // FIXME(eddyb) use smallvec here.\n+    let mut indirect_offsets = vec![];\n+    let mut place = base;\n+\n+    for elem in &var.projection[..] {\n+        match *elem {\n+            mir::ProjectionElem::Deref => {\n+                indirect_offsets.push(Size::ZERO);\n+                place = place.deref(bx);\n+            }\n+            mir::ProjectionElem::Field(field, _) => {\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                *offset += place.layout().fields.offset(field.index());\n+                place = place.project_field(bx, field);\n+            }\n+            mir::ProjectionElem::Downcast(_, variant) => {\n+                place = place.downcast(bx, variant);\n+            }\n+            _ => span_bug!(\n+                var.source_info.span,\n+                \"unsupported var debuginfo place `{:?}`\",\n+                mir::Place { local, projection: var.projection },\n+            ),\n+        }\n+    }\n+\n+    DebugInfoOffset { direct_offset, indirect_offsets, result: place }\n+}\n+\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         bx.set_span(source_info.span);\n@@ -262,33 +362,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let Some(dbg_var) = var.dbg_var else { continue };\n             let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n \n-            let mut direct_offset = Size::ZERO;\n-            // FIXME(eddyb) use smallvec here.\n-            let mut indirect_offsets = vec![];\n-            let mut place = base;\n-\n-            for elem in &var.projection[..] {\n-                match *elem {\n-                    mir::ProjectionElem::Deref => {\n-                        indirect_offsets.push(Size::ZERO);\n-                        place = bx.load_operand(place).deref(bx.cx());\n-                    }\n-                    mir::ProjectionElem::Field(field, _) => {\n-                        let i = field.index();\n-                        let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n-                        *offset += place.layout.fields.offset(i);\n-                        place = place.project_field(bx, i);\n-                    }\n-                    mir::ProjectionElem::Downcast(_, variant) => {\n-                        place = place.project_downcast(bx, variant);\n-                    }\n-                    _ => span_bug!(\n-                        var.source_info.span,\n-                        \"unsupported var debuginfo place `{:?}`\",\n-                        mir::Place { local, projection: var.projection },\n-                    ),\n-                }\n-            }\n+            let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n+                calculate_debuginfo_offset(bx, local, &var, base.layout);\n \n             // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n             // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n@@ -306,6 +381,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n \n             if should_create_individual_allocas {\n+                let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n+                    calculate_debuginfo_offset(bx, local, &var, base);\n+\n                 // Create a variable which will be a pointer to the actual value\n                 let ptr_ty = bx.tcx().mk_ty(ty::RawPtr(ty::TypeAndMut {\n                     mutbl: mir::Mutability::Mut,"}, {"sha": "d54ac9e33bce27c865b75cfe9ee4e859e43a2488", "filename": "src/test/codegen/issue-105386-ub-in-debuginfo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab505298ea4cf338403eeaa94c4458b5ad9530db/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab505298ea4cf338403eeaa94c4458b5ad9530db/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs?ref=ab505298ea4cf338403eeaa94c4458b5ad9530db", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: --crate-type=lib -O -Cdebuginfo=2 -Cno-prepopulate-passes\n+// min-llvm-version: 15.0 # this test uses opaque pointer notation\n+#![feature(stmt_expr_attributes)]\n+\n+pub struct S([usize; 8]);\n+\n+#[no_mangle]\n+pub fn outer_function(x: S, y: S) -> usize {\n+    (#[inline(always)]|| {\n+        let _z = x;\n+        y.0[0]\n+    })()\n+}\n+\n+// Check that we do not attempt to load from the spilled arg before it is assigned to\n+// when generating debuginfo.\n+// CHECK-LABEL: @outer_function\n+// CHECK: [[spill:%.*]] = alloca %\"[closure@{{.*.rs}}:9:23: 9:25]\"\n+// CHECK-NOT: [[ptr_tmp:%.*]] = getelementptr inbounds %\"[closure@{{.*.rs}}:9:23: 9:25]\", ptr [[spill]]\n+// CHECK-NOT: [[load:%.*]] = load ptr, ptr\n+// CHECK: call void @llvm.lifetime.start{{.*}}({{.*}}, ptr [[spill]])\n+// CHECK: call void @llvm.memcpy{{.*}}(ptr {{align .*}} [[spill]], ptr {{align .*}} %x"}, {"sha": "6c6eb5d4e86b760a5e337bf0e3e2faa22641098f", "filename": "src/test/ui/debuginfo/issue-105386-debuginfo-ub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab505298ea4cf338403eeaa94c4458b5ad9530db/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab505298ea4cf338403eeaa94c4458b5ad9530db/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs?ref=ab505298ea4cf338403eeaa94c4458b5ad9530db", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// compile-flags: --edition 2021 -Copt-level=3 -Cdebuginfo=2 -Zmir-opt-level=3\n+\n+fn main() {\n+    TranslatorI.visit_pre();\n+}\n+\n+impl TranslatorI {\n+    fn visit_pre(self) {\n+        Some(())\n+            .map(|_| self.flags())\n+            .unwrap_or_else(|| self.flags());\n+    }\n+}\n+\n+struct TranslatorI;\n+\n+impl TranslatorI {\n+    fn flags(&self) {}\n+}"}]}