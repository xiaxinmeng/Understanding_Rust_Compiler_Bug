{"sha": "625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNWU3OGI3MDAxYzZlMjBmMjk5MjhhNWRhOGM5ZDIxZTlhZWQ2YzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T15:20:57Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::{UintTy, IntTy} variants", "tree": {"sha": "6371a778cfab334f3acec92f20f115f7da6639f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6371a778cfab334f3acec92f20f115f7da6639f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "html_url": "https://github.com/rust-lang/rust/commit/625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905", "html_url": "https://github.com/rust-lang/rust/commit/ccf48bcd4054ecb4e205a18b1ac582ef3ac3a905"}], "stats": {"total": 811, "additions": 404, "deletions": 407}, "files": [{"sha": "5e3cfff086cc255814215c260eeb9c0f5c517abe", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -545,34 +545,34 @@ pub enum UintTy { U8, U16, U32, U64 }\n \n impl IntTy {\n     pub fn from(tcx: &ty::ctxt, t: ast::IntTy) -> IntTy {\n-        let t = if let ast::TyIs = t {\n+        let t = if let ast::IntTy::Is = t {\n             tcx.sess.target.int_type\n         } else {\n             t\n         };\n         match t {\n-            ast::TyIs => unreachable!(),\n-            ast::TyI8  => IntTy::I8,\n-            ast::TyI16 => IntTy::I16,\n-            ast::TyI32 => IntTy::I32,\n-            ast::TyI64 => IntTy::I64,\n+            ast::IntTy::Is => unreachable!(),\n+            ast::IntTy::I8  => IntTy::I8,\n+            ast::IntTy::I16 => IntTy::I16,\n+            ast::IntTy::I32 => IntTy::I32,\n+            ast::IntTy::I64 => IntTy::I64,\n         }\n     }\n }\n \n impl UintTy {\n     pub fn from(tcx: &ty::ctxt, t: ast::UintTy) -> UintTy {\n-        let t = if let ast::TyUs = t {\n+        let t = if let ast::UintTy::Us = t {\n             tcx.sess.target.uint_type\n         } else {\n             t\n         };\n         match t {\n-            ast::TyUs => unreachable!(),\n-            ast::TyU8  => UintTy::U8,\n-            ast::TyU16 => UintTy::U16,\n-            ast::TyU32 => UintTy::U32,\n-            ast::TyU64 => UintTy::U64,\n+            ast::UintTy::Us => unreachable!(),\n+            ast::UintTy::U8  => UintTy::U8,\n+            ast::UintTy::U16 => UintTy::U16,\n+            ast::UintTy::U32 => UintTy::U32,\n+            ast::UintTy::U64 => UintTy::U64,\n         }\n     }\n }\n@@ -1289,30 +1289,30 @@ fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n \n     // Issue #23890: If isize/usize, then dispatch to appropriate target representation type\n     match (&ty.sty, tcx.sess.target.int_type, tcx.sess.target.uint_type) {\n-        (&ty::TyInt(ast::TyIs), ast::TyI32, _) => return convert_val!(i32, Int, i64),\n-        (&ty::TyInt(ast::TyIs), ast::TyI64, _) => return convert_val!(i64, Int, i64),\n-        (&ty::TyInt(ast::TyIs), _, _) => panic!(\"unexpected target.int_type\"),\n+        (&ty::TyInt(ast::IntTy::Is), ast::IntTy::I32, _) => return convert_val!(i32, Int, i64),\n+        (&ty::TyInt(ast::IntTy::Is), ast::IntTy::I64, _) => return convert_val!(i64, Int, i64),\n+        (&ty::TyInt(ast::IntTy::Is), _, _) => panic!(\"unexpected target.int_type\"),\n \n-        (&ty::TyUint(ast::TyUs), _, ast::TyU32) => return convert_val!(u32, Uint, u64),\n-        (&ty::TyUint(ast::TyUs), _, ast::TyU64) => return convert_val!(u64, Uint, u64),\n-        (&ty::TyUint(ast::TyUs), _, _) => panic!(\"unexpected target.uint_type\"),\n+        (&ty::TyUint(ast::UintTy::Us), _, ast::UintTy::U32) => return convert_val!(u32, Uint, u64),\n+        (&ty::TyUint(ast::UintTy::Us), _, ast::UintTy::U64) => return convert_val!(u64, Uint, u64),\n+        (&ty::TyUint(ast::UintTy::Us), _, _) => panic!(\"unexpected target.uint_type\"),\n \n         _ => {}\n     }\n \n     match ty.sty {\n-        ty::TyInt(ast::TyIs) => unreachable!(),\n-        ty::TyUint(ast::TyUs) => unreachable!(),\n-\n-        ty::TyInt(ast::TyI8) => convert_val!(i8, Int, i64),\n-        ty::TyInt(ast::TyI16) => convert_val!(i16, Int, i64),\n-        ty::TyInt(ast::TyI32) => convert_val!(i32, Int, i64),\n-        ty::TyInt(ast::TyI64) => convert_val!(i64, Int, i64),\n-\n-        ty::TyUint(ast::TyU8) => convert_val!(u8, Uint, u64),\n-        ty::TyUint(ast::TyU16) => convert_val!(u16, Uint, u64),\n-        ty::TyUint(ast::TyU32) => convert_val!(u32, Uint, u64),\n-        ty::TyUint(ast::TyU64) => convert_val!(u64, Uint, u64),\n+        ty::TyInt(ast::IntTy::Is) => unreachable!(),\n+        ty::TyUint(ast::UintTy::Us) => unreachable!(),\n+\n+        ty::TyInt(ast::IntTy::I8) => convert_val!(i8, Int, i64),\n+        ty::TyInt(ast::IntTy::I16) => convert_val!(i16, Int, i64),\n+        ty::TyInt(ast::IntTy::I32) => convert_val!(i32, Int, i64),\n+        ty::TyInt(ast::IntTy::I64) => convert_val!(i64, Int, i64),\n+\n+        ty::TyUint(ast::UintTy::U8) => convert_val!(u8, Uint, u64),\n+        ty::TyUint(ast::UintTy::U16) => convert_val!(u16, Uint, u64),\n+        ty::TyUint(ast::UintTy::U32) => convert_val!(u32, Uint, u64),\n+        ty::TyUint(ast::UintTy::U64) => convert_val!(u64, Uint, u64),\n \n         ty::TyFloat(ast::FloatTy::F32) => convert_val!(f32, Float, f64),\n         ty::TyFloat(ast::FloatTy::F64) => convert_val!(f64, Float, f64),"}, {"sha": "3a42e8e9bfaa6931853ee8c04a9dd14adf6b67f9", "filename": "src/librustc/middle/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontents.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> ty::TyS<'tcx> {\n \n             let result = match ty.sty {\n                 // usize and isize are ffi-unsafe\n-                ty::TyUint(ast::TyUs) | ty::TyInt(ast::TyIs) => {\n+                ty::TyUint(ast::UintTy::Us) | ty::TyInt(ast::IntTy::Is) => {\n                     TC::None\n                 }\n "}, {"sha": "1d071cd604db48d9b95675a848ebe3083cac329c", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -192,16 +192,16 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: mk(TyBool),\n             char: mk(TyChar),\n             err: mk(TyError),\n-            isize: mk(TyInt(ast::TyIs)),\n-            i8: mk(TyInt(ast::TyI8)),\n-            i16: mk(TyInt(ast::TyI16)),\n-            i32: mk(TyInt(ast::TyI32)),\n-            i64: mk(TyInt(ast::TyI64)),\n-            usize: mk(TyUint(ast::TyUs)),\n-            u8: mk(TyUint(ast::TyU8)),\n-            u16: mk(TyUint(ast::TyU16)),\n-            u32: mk(TyUint(ast::TyU32)),\n-            u64: mk(TyUint(ast::TyU64)),\n+            isize: mk(TyInt(ast::IntTy::Is)),\n+            i8: mk(TyInt(ast::IntTy::I8)),\n+            i16: mk(TyInt(ast::IntTy::I16)),\n+            i32: mk(TyInt(ast::IntTy::I32)),\n+            i64: mk(TyInt(ast::IntTy::I64)),\n+            usize: mk(TyUint(ast::UintTy::Us)),\n+            u8: mk(TyUint(ast::UintTy::U8)),\n+            u16: mk(TyUint(ast::UintTy::U16)),\n+            u32: mk(TyUint(ast::UintTy::U32)),\n+            u64: mk(TyUint(ast::UintTy::U64)),\n             f32: mk(TyFloat(ast::FloatTy::F32)),\n             f64: mk(TyFloat(ast::FloatTy::F64)),\n         }\n@@ -840,21 +840,21 @@ impl<'tcx> ctxt<'tcx> {\n \n     pub fn mk_mach_int(&self, tm: ast::IntTy) -> Ty<'tcx> {\n         match tm {\n-            ast::TyIs   => self.types.isize,\n-            ast::TyI8   => self.types.i8,\n-            ast::TyI16  => self.types.i16,\n-            ast::TyI32  => self.types.i32,\n-            ast::TyI64  => self.types.i64,\n+            ast::IntTy::Is   => self.types.isize,\n+            ast::IntTy::I8   => self.types.i8,\n+            ast::IntTy::I16  => self.types.i16,\n+            ast::IntTy::I32  => self.types.i32,\n+            ast::IntTy::I64  => self.types.i64,\n         }\n     }\n \n     pub fn mk_mach_uint(&self, tm: ast::UintTy) -> Ty<'tcx> {\n         match tm {\n-            ast::TyUs   => self.types.usize,\n-            ast::TyU8   => self.types.u8,\n-            ast::TyU16  => self.types.u16,\n-            ast::TyU32  => self.types.u32,\n-            ast::TyU64  => self.types.u64,\n+            ast::UintTy::Us   => self.types.usize,\n+            ast::UintTy::U8   => self.types.u8,\n+            ast::UintTy::U16  => self.types.u16,\n+            ast::UintTy::U32  => self.types.u32,\n+            ast::UintTy::U64  => self.types.u64,\n         }\n     }\n "}, {"sha": "2a13c47895e0cbe678af5ee89fe9953de4d42614", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -977,7 +977,7 @@ impl<'tcx> TyS<'tcx> {\n     pub fn sequence_element_type(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => ty,\n-            TyStr => cx.mk_mach_uint(ast::TyU8),\n+            TyStr => cx.mk_mach_uint(ast::UintTy::U8),\n             _ => cx.sess.bug(&format!(\"sequence_element_type called on non-sequence value: {}\",\n                                       self)),\n         }\n@@ -1068,7 +1068,7 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn is_uint(&self) -> bool {\n         match self.sty {\n-            TyInfer(IntVar(_)) | TyUint(ast::TyUs) => true,\n+            TyInfer(IntVar(_)) | TyUint(ast::UintTy::Us) => true,\n             _ => false\n         }\n     }\n@@ -1114,7 +1114,7 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n-            TyInt(ast::TyIs) | TyUint(ast::TyUs) => false,\n+            TyInt(ast::IntTy::Is) | TyUint(ast::UintTy::Us) => false,\n             TyInt(..) | TyUint(..) | TyFloat(..) => true,\n             _ => false\n         }"}, {"sha": "0b5c0d147cb5731952f7798abdcb2732dff7dd0c", "filename": "src/librustc/middle/ty/util.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Futil.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -44,48 +44,48 @@ pub trait IntTypeExt {\n impl IntTypeExt for attr::IntType {\n     fn to_ty<'tcx>(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n-            SignedInt(ast::TyI8)      => cx.types.i8,\n-            SignedInt(ast::TyI16)     => cx.types.i16,\n-            SignedInt(ast::TyI32)     => cx.types.i32,\n-            SignedInt(ast::TyI64)     => cx.types.i64,\n-            SignedInt(ast::TyIs)   => cx.types.isize,\n-            UnsignedInt(ast::TyU8)    => cx.types.u8,\n-            UnsignedInt(ast::TyU16)   => cx.types.u16,\n-            UnsignedInt(ast::TyU32)   => cx.types.u32,\n-            UnsignedInt(ast::TyU64)   => cx.types.u64,\n-            UnsignedInt(ast::TyUs) => cx.types.usize,\n+            SignedInt(ast::IntTy::I8)      => cx.types.i8,\n+            SignedInt(ast::IntTy::I16)     => cx.types.i16,\n+            SignedInt(ast::IntTy::I32)     => cx.types.i32,\n+            SignedInt(ast::IntTy::I64)     => cx.types.i64,\n+            SignedInt(ast::IntTy::Is)   => cx.types.isize,\n+            UnsignedInt(ast::UintTy::U8)    => cx.types.u8,\n+            UnsignedInt(ast::UintTy::U16)   => cx.types.u16,\n+            UnsignedInt(ast::UintTy::U32)   => cx.types.u32,\n+            UnsignedInt(ast::UintTy::U64)   => cx.types.u64,\n+            UnsignedInt(ast::UintTy::Us) => cx.types.usize,\n         }\n     }\n \n     fn i64_to_disr(&self, val: i64) -> Option<Disr> {\n         match *self {\n-            SignedInt(ast::TyI8)    => val.to_i8()  .map(|v| v as Disr),\n-            SignedInt(ast::TyI16)   => val.to_i16() .map(|v| v as Disr),\n-            SignedInt(ast::TyI32)   => val.to_i32() .map(|v| v as Disr),\n-            SignedInt(ast::TyI64)   => val.to_i64() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU8)  => val.to_u8()  .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU16) => val.to_u16() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU32) => val.to_u32() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU64) => val.to_u64() .map(|v| v as Disr),\n-\n-            UnsignedInt(ast::TyUs) |\n-            SignedInt(ast::TyIs) => unreachable!(),\n+            SignedInt(ast::IntTy::I8)    => val.to_i8()  .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I16)   => val.to_i16() .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I32)   => val.to_i32() .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I64)   => val.to_i64() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U8)  => val.to_u8()  .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U16) => val.to_u16() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U32) => val.to_u32() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U64) => val.to_u64() .map(|v| v as Disr),\n+\n+            UnsignedInt(ast::UintTy::Us) |\n+            SignedInt(ast::IntTy::Is) => unreachable!(),\n         }\n     }\n \n     fn u64_to_disr(&self, val: u64) -> Option<Disr> {\n         match *self {\n-            SignedInt(ast::TyI8)    => val.to_i8()  .map(|v| v as Disr),\n-            SignedInt(ast::TyI16)   => val.to_i16() .map(|v| v as Disr),\n-            SignedInt(ast::TyI32)   => val.to_i32() .map(|v| v as Disr),\n-            SignedInt(ast::TyI64)   => val.to_i64() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU8)  => val.to_u8()  .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU16) => val.to_u16() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU32) => val.to_u32() .map(|v| v as Disr),\n-            UnsignedInt(ast::TyU64) => val.to_u64() .map(|v| v as Disr),\n-\n-            UnsignedInt(ast::TyUs) |\n-            SignedInt(ast::TyIs) => unreachable!(),\n+            SignedInt(ast::IntTy::I8)    => val.to_i8()  .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I16)   => val.to_i16() .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I32)   => val.to_i32() .map(|v| v as Disr),\n+            SignedInt(ast::IntTy::I64)   => val.to_i64() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U8)  => val.to_u8()  .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U16) => val.to_u16() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U32) => val.to_u32() .map(|v| v as Disr),\n+            UnsignedInt(ast::UintTy::U64) => val.to_u64() .map(|v| v as Disr),\n+\n+            UnsignedInt(ast::UintTy::Us) |\n+            SignedInt(ast::IntTy::Is) => unreachable!(),\n         }\n     }\n \n@@ -97,18 +97,18 @@ impl IntTypeExt for attr::IntType {\n             // SignedInt repr means we *want* to reinterpret the bits\n             // treating the highest bit of Disr as a sign-bit, so\n             // cast to i64 before range-checking.\n-            SignedInt(ast::TyI8)    => add1!((val as i64).to_i8()),\n-            SignedInt(ast::TyI16)   => add1!((val as i64).to_i16()),\n-            SignedInt(ast::TyI32)   => add1!((val as i64).to_i32()),\n-            SignedInt(ast::TyI64)   => add1!(Some(val as i64)),\n-\n-            UnsignedInt(ast::TyU8)  => add1!(val.to_u8()),\n-            UnsignedInt(ast::TyU16) => add1!(val.to_u16()),\n-            UnsignedInt(ast::TyU32) => add1!(val.to_u32()),\n-            UnsignedInt(ast::TyU64) => add1!(Some(val)),\n-\n-            UnsignedInt(ast::TyUs) |\n-            SignedInt(ast::TyIs) => unreachable!(),\n+            SignedInt(ast::IntTy::I8)    => add1!((val as i64).to_i8()),\n+            SignedInt(ast::IntTy::I16)   => add1!((val as i64).to_i16()),\n+            SignedInt(ast::IntTy::I32)   => add1!((val as i64).to_i32()),\n+            SignedInt(ast::IntTy::I64)   => add1!(Some(val as i64)),\n+\n+            UnsignedInt(ast::UintTy::U8)  => add1!(val.to_u8()),\n+            UnsignedInt(ast::UintTy::U16) => add1!(val.to_u16()),\n+            UnsignedInt(ast::UintTy::U32) => add1!(val.to_u32()),\n+            UnsignedInt(ast::UintTy::U64) => add1!(Some(val)),\n+\n+            UnsignedInt(ast::UintTy::Us) |\n+            SignedInt(ast::IntTy::Is) => unreachable!(),\n         }\n     }\n \n@@ -117,17 +117,17 @@ impl IntTypeExt for attr::IntType {\n     // full range from `i64::MIN` through `u64::MAX`.\n     fn disr_string(&self, val: Disr) -> String {\n         match *self {\n-            SignedInt(ast::TyI8)    => format!(\"{}\", val as i8 ),\n-            SignedInt(ast::TyI16)   => format!(\"{}\", val as i16),\n-            SignedInt(ast::TyI32)   => format!(\"{}\", val as i32),\n-            SignedInt(ast::TyI64)   => format!(\"{}\", val as i64),\n-            UnsignedInt(ast::TyU8)  => format!(\"{}\", val as u8 ),\n-            UnsignedInt(ast::TyU16) => format!(\"{}\", val as u16),\n-            UnsignedInt(ast::TyU32) => format!(\"{}\", val as u32),\n-            UnsignedInt(ast::TyU64) => format!(\"{}\", val as u64),\n-\n-            UnsignedInt(ast::TyUs) |\n-            SignedInt(ast::TyIs) => unreachable!(),\n+            SignedInt(ast::IntTy::I8)    => format!(\"{}\", val as i8 ),\n+            SignedInt(ast::IntTy::I16)   => format!(\"{}\", val as i16),\n+            SignedInt(ast::IntTy::I32)   => format!(\"{}\", val as i32),\n+            SignedInt(ast::IntTy::I64)   => format!(\"{}\", val as i64),\n+            UnsignedInt(ast::UintTy::U8)  => format!(\"{}\", val as u8 ),\n+            UnsignedInt(ast::UintTy::U16) => format!(\"{}\", val as u16),\n+            UnsignedInt(ast::UintTy::U32) => format!(\"{}\", val as u32),\n+            UnsignedInt(ast::UintTy::U64) => format!(\"{}\", val as u64),\n+\n+            UnsignedInt(ast::UintTy::Us) |\n+            SignedInt(ast::IntTy::Is) => unreachable!(),\n         }\n     }\n \n@@ -137,17 +137,17 @@ impl IntTypeExt for attr::IntType {\n         }\n         let val = val.unwrap_or(ty::INITIAL_DISCRIMINANT_VALUE);\n         match *self {\n-            SignedInt(ast::TyI8)    => add1!(val as i8 ),\n-            SignedInt(ast::TyI16)   => add1!(val as i16),\n-            SignedInt(ast::TyI32)   => add1!(val as i32),\n-            SignedInt(ast::TyI64)   => add1!(val as i64),\n-            UnsignedInt(ast::TyU8)  => add1!(val as u8 ),\n-            UnsignedInt(ast::TyU16) => add1!(val as u16),\n-            UnsignedInt(ast::TyU32) => add1!(val as u32),\n-            UnsignedInt(ast::TyU64) => add1!(val as u64),\n-\n-            UnsignedInt(ast::TyUs) |\n-            SignedInt(ast::TyIs) => unreachable!(),\n+            SignedInt(ast::IntTy::I8)    => add1!(val as i8 ),\n+            SignedInt(ast::IntTy::I16)   => add1!(val as i16),\n+            SignedInt(ast::IntTy::I32)   => add1!(val as i32),\n+            SignedInt(ast::IntTy::I64)   => add1!(val as i64),\n+            UnsignedInt(ast::UintTy::U8)  => add1!(val as u8 ),\n+            UnsignedInt(ast::UintTy::U16) => add1!(val as u16),\n+            UnsignedInt(ast::UintTy::U32) => add1!(val as u32),\n+            UnsignedInt(ast::UintTy::U64) => add1!(val as u64),\n+\n+            UnsignedInt(ast::UintTy::Us) |\n+            SignedInt(ast::IntTy::Is) => unreachable!(),\n         }\n     }\n }\n@@ -279,14 +279,14 @@ impl<'tcx> ty::ctxt<'tcx> {\n             //\n             // NB. Historically `fn enum_variants` generate i64 here, while\n             // rustc_typeck::check would generate isize.\n-            _ => SignedInt(ast::TyIs),\n+            _ => SignedInt(ast::IntTy::Is),\n         };\n \n         let repr_type_ty = repr_type.to_ty(self);\n         let repr_type = match repr_type {\n-            SignedInt(ast::TyIs) =>\n+            SignedInt(ast::IntTy::Is) =>\n                 SignedInt(self.sess.target.int_type),\n-            UnsignedInt(ast::TyUs) =>\n+            UnsignedInt(ast::UintTy::Us) =>\n                 UnsignedInt(self.sess.target.uint_type),\n             other => other\n         };"}, {"sha": "20860b5a1e6f99d74a007478d718671ae7fb17d6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -728,8 +728,8 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n     };\n \n     let (int_type, uint_type) = match &target.target_pointer_width[..] {\n-        \"32\" => (ast::TyI32, ast::TyU32),\n-        \"64\" => (ast::TyI64, ast::TyU64),\n+        \"32\" => (ast::IntTy::I32, ast::UintTy::U32),\n+        \"64\" => (ast::IntTy::I64, ast::UintTy::U64),\n         w    => panic!(sp.fatal(&format!(\"target specification was invalid: \\\n                                           unrecognized target-pointer-width {}\", w))),\n     };"}, {"sha": "bd5f237cbfb716345b0d1d91f335de999c9adc92", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -161,7 +161,7 @@ impl LateLintPass for TypeLimits {\n                         match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                let int_type = if let ast::TyIs = t {\n+                                let int_type = if let ast::IntTy::Is = t {\n                                     cx.sess().target.int_type\n                                 } else {\n                                     t\n@@ -182,7 +182,7 @@ impl LateLintPass for TypeLimits {\n                         };\n                     },\n                     ty::TyUint(t) => {\n-                        let uint_type = if let ast::TyUs = t {\n+                        let uint_type = if let ast::UintTy::Us = t {\n                             cx.sess().target.uint_type\n                         } else {\n                             t\n@@ -247,21 +247,21 @@ impl LateLintPass for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) {\n             match int_ty {\n-                ast::TyIs => (i64::MIN,        i64::MAX),\n-                ast::TyI8 =>    (i8::MIN  as i64, i8::MAX  as i64),\n-                ast::TyI16 =>   (i16::MIN as i64, i16::MAX as i64),\n-                ast::TyI32 =>   (i32::MIN as i64, i32::MAX as i64),\n-                ast::TyI64 =>   (i64::MIN,        i64::MAX)\n+                ast::IntTy::Is => (i64::MIN,        i64::MAX),\n+                ast::IntTy::I8 =>    (i8::MIN  as i64, i8::MAX  as i64),\n+                ast::IntTy::I16 =>   (i16::MIN as i64, i16::MAX as i64),\n+                ast::IntTy::I32 =>   (i32::MIN as i64, i32::MAX as i64),\n+                ast::IntTy::I64 =>   (i64::MIN,        i64::MAX)\n             }\n         }\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) {\n             match uint_ty {\n-                ast::TyUs => (u64::MIN,         u64::MAX),\n-                ast::TyU8 =>    (u8::MIN   as u64, u8::MAX   as u64),\n-                ast::TyU16 =>   (u16::MIN  as u64, u16::MAX  as u64),\n-                ast::TyU32 =>   (u32::MIN  as u64, u32::MAX  as u64),\n-                ast::TyU64 =>   (u64::MIN,         u64::MAX)\n+                ast::UintTy::Us => (u64::MIN,         u64::MAX),\n+                ast::UintTy::U8 =>    (u8::MIN   as u64, u8::MAX   as u64),\n+                ast::UintTy::U16 =>   (u16::MIN  as u64, u16::MAX  as u64),\n+                ast::UintTy::U32 =>   (u32::MIN  as u64, u32::MAX  as u64),\n+                ast::UintTy::U64 =>   (u64::MIN,         u64::MAX)\n             }\n         }\n \n@@ -274,21 +274,21 @@ impl LateLintPass for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyIs => int_ty_bits(target_int_ty, target_int_ty),\n-                ast::TyI8 => 8,\n-                ast::TyI16 => 16 as u64,\n-                ast::TyI32 => 32,\n-                ast::TyI64 => 64,\n+                ast::IntTy::Is => int_ty_bits(target_int_ty, target_int_ty),\n+                ast::IntTy::I8 => 8,\n+                ast::IntTy::I16 => 16 as u64,\n+                ast::IntTy::I32 => 32,\n+                ast::IntTy::I64 => 64,\n             }\n         }\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyUs => uint_ty_bits(target_uint_ty, target_uint_ty),\n-                ast::TyU8 => 8,\n-                ast::TyU16 => 16,\n-                ast::TyU32 => 32,\n-                ast::TyU64 => 64,\n+                ast::UintTy::Us => uint_ty_bits(target_uint_ty, target_uint_ty),\n+                ast::UintTy::U8 => 8,\n+                ast::UintTy::U16 => 16,\n+                ast::UintTy::U32 => 32,\n+                ast::UintTy::U64 => 64,\n             }\n         }\n "}, {"sha": "b41ff5977fef154fc76d482b8ff7b4f0862301d8", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -76,20 +76,20 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n         ty::TyChar => { write!(w, \"c\"); }\n         ty::TyInt(t) => {\n             match t {\n-                ast::TyIs => write!(w, \"is\"),\n-                ast::TyI8 => write!(w, \"MB\"),\n-                ast::TyI16 => write!(w, \"MW\"),\n-                ast::TyI32 => write!(w, \"ML\"),\n-                ast::TyI64 => write!(w, \"MD\")\n+                ast::IntTy::Is => write!(w, \"is\"),\n+                ast::IntTy::I8 => write!(w, \"MB\"),\n+                ast::IntTy::I16 => write!(w, \"MW\"),\n+                ast::IntTy::I32 => write!(w, \"ML\"),\n+                ast::IntTy::I64 => write!(w, \"MD\")\n             };\n         }\n         ty::TyUint(t) => {\n             match t {\n-                ast::TyUs => write!(w, \"us\"),\n-                ast::TyU8 => write!(w, \"Mb\"),\n-                ast::TyU16 => write!(w, \"Mw\"),\n-                ast::TyU32 => write!(w, \"Ml\"),\n-                ast::TyU64 => write!(w, \"Md\")\n+                ast::UintTy::Us => write!(w, \"us\"),\n+                ast::UintTy::U8 => write!(w, \"Mb\"),\n+                ast::UintTy::U16 => write!(w, \"Mw\"),\n+                ast::UintTy::U32 => write!(w, \"Ml\"),\n+                ast::UintTy::U64 => write!(w, \"Md\")\n             };\n         }\n         ty::TyFloat(t) => {"}, {"sha": "a3082cb698a8e25ded48297a424e7f4af9c19aee", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -61,8 +61,7 @@ use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n use syntax::ast::{self, FloatTy};\n-use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, TyIs, TyI8, TyI16, TyI32, TyI64};\n-use syntax::ast::{TyUs, TyU8, TyU16, TyU32, TyU64};\n+use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Pos};\n use syntax::errors::DiagnosticBuilder;\n@@ -1076,17 +1075,17 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\", TyChar);\n         table.intern(\"f32\", TyFloat(FloatTy::F32));\n         table.intern(\"f64\", TyFloat(FloatTy::F64));\n-        table.intern(\"isize\", TyInt(TyIs));\n-        table.intern(\"i8\", TyInt(TyI8));\n-        table.intern(\"i16\", TyInt(TyI16));\n-        table.intern(\"i32\", TyInt(TyI32));\n-        table.intern(\"i64\", TyInt(TyI64));\n+        table.intern(\"isize\", TyInt(IntTy::Is));\n+        table.intern(\"i8\", TyInt(IntTy::I8));\n+        table.intern(\"i16\", TyInt(IntTy::I16));\n+        table.intern(\"i32\", TyInt(IntTy::I32));\n+        table.intern(\"i64\", TyInt(IntTy::I64));\n         table.intern(\"str\", TyStr);\n-        table.intern(\"usize\", TyUint(TyUs));\n-        table.intern(\"u8\", TyUint(TyU8));\n-        table.intern(\"u16\", TyUint(TyU16));\n-        table.intern(\"u32\", TyUint(TyU32));\n-        table.intern(\"u64\", TyUint(TyU64));\n+        table.intern(\"usize\", TyUint(UintTy::Us));\n+        table.intern(\"u8\", TyUint(UintTy::U8));\n+        table.intern(\"u16\", TyUint(UintTy::U16));\n+        table.intern(\"u32\", TyUint(UintTy::U32));\n+        table.intern(\"u64\", TyUint(UintTy::U64));\n \n         table\n     }"}, {"sha": "28731aa950b52f3d6bcd1cf6bc4cc18ee1cab813", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -921,7 +921,7 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                 compare_str(cx, lhs_data, lhs_len, rhs_data, rhs_len, rhs_t, debug_loc)\n             }\n             ty::TyArray(ty, _) | ty::TySlice(ty) => match ty.sty {\n-                ty::TyUint(ast::TyU8) => {\n+                ty::TyUint(ast::UintTy::U8) => {\n                     // NOTE: cast &[u8] and &[u8; N] to &str and abuse the str_eq lang item,\n                     // which calls memcmp().\n                     let pat_len = val_ty(rhs).element_type().array_length();"}, {"sha": "ba227d6c38b357750cccaeaf08cfa70c1d21cf4a", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -403,11 +403,11 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let ity = if use_align {\n                 // Use the overall alignment\n                 match align {\n-                    1 => attr::UnsignedInt(ast::TyU8),\n-                    2 => attr::UnsignedInt(ast::TyU16),\n-                    4 => attr::UnsignedInt(ast::TyU32),\n+                    1 => attr::UnsignedInt(ast::UintTy::U8),\n+                    2 => attr::UnsignedInt(ast::UintTy::U16),\n+                    4 => attr::UnsignedInt(ast::UintTy::U32),\n                     8 if machine::llalign_of_min(cx, Type::i64(cx)) == 8 =>\n-                        attr::UnsignedInt(ast::TyU64),\n+                        attr::UnsignedInt(ast::UintTy::U64),\n                     _ => min_ity // use min_ity as a fallback\n                 }\n             } else {\n@@ -599,12 +599,12 @@ fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntTyp\n     // Lists of sizes to try.  u64 is always allowed as a fallback.\n     #[allow(non_upper_case_globals)]\n     const choose_shortest: &'static [IntType] = &[\n-        attr::UnsignedInt(ast::TyU8), attr::SignedInt(ast::TyI8),\n-        attr::UnsignedInt(ast::TyU16), attr::SignedInt(ast::TyI16),\n-        attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n+        attr::UnsignedInt(ast::UintTy::U8), attr::SignedInt(ast::IntTy::I8),\n+        attr::UnsignedInt(ast::UintTy::U16), attr::SignedInt(ast::IntTy::I16),\n+        attr::UnsignedInt(ast::UintTy::U32), attr::SignedInt(ast::IntTy::I32)];\n     #[allow(non_upper_case_globals)]\n     const at_least_32: &'static [IntType] = &[\n-        attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n+        attr::UnsignedInt(ast::UintTy::U32), attr::SignedInt(ast::IntTy::I32)];\n \n     let attempts;\n     match hint {\n@@ -638,7 +638,7 @@ fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntTyp\n             return ity;\n         }\n     }\n-    return attr::UnsignedInt(ast::TyU64);\n+    return attr::UnsignedInt(ast::UintTy::U64);\n }\n \n pub fn ll_inttype(cx: &CrateContext, ity: IntType) -> Type {"}, {"sha": "c2d962b032f01d0fe70d8a35878c7b84a14f862d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -816,12 +816,12 @@ pub fn llty_and_min_for_signed_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n         ty::TyInt(t) => {\n             let llty = Type::int_from_ty(cx.ccx(), t);\n             let min = match t {\n-                ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                ast::TyIs => i64::MIN as u64,\n-                ast::TyI8 => i8::MIN as u64,\n-                ast::TyI16 => i16::MIN as u64,\n-                ast::TyI32 => i32::MIN as u64,\n-                ast::TyI64 => i64::MIN as u64,\n+                ast::IntTy::Is if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                ast::IntTy::Is => i64::MIN as u64,\n+                ast::IntTy::I8 => i8::MIN as u64,\n+                ast::IntTy::I16 => i16::MIN as u64,\n+                ast::IntTy::I32 => i32::MIN as u64,\n+                ast::IntTy::I64 => i64::MIN as u64,\n             };\n             (llty, min)\n         }"}, {"sha": "8a4adf7414017e46981eaa15193dd907815698e8", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -1220,16 +1220,16 @@ pub fn push_unique_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyBool              => output.push_str(\"bool\"),\n         ty::TyChar              => output.push_str(\"char\"),\n         ty::TyStr               => output.push_str(\"str\"),\n-        ty::TyInt(ast::TyIs)    => output.push_str(\"isize\"),\n-        ty::TyInt(ast::TyI8)    => output.push_str(\"i8\"),\n-        ty::TyInt(ast::TyI16)   => output.push_str(\"i16\"),\n-        ty::TyInt(ast::TyI32)   => output.push_str(\"i32\"),\n-        ty::TyInt(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::TyUint(ast::TyUs)   => output.push_str(\"usize\"),\n-        ty::TyUint(ast::TyU8)   => output.push_str(\"u8\"),\n-        ty::TyUint(ast::TyU16)  => output.push_str(\"u16\"),\n-        ty::TyUint(ast::TyU32)  => output.push_str(\"u32\"),\n-        ty::TyUint(ast::TyU64)  => output.push_str(\"u64\"),\n+        ty::TyInt(ast::IntTy::Is)    => output.push_str(\"isize\"),\n+        ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n+        ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),\n+        ty::TyInt(ast::IntTy::I32)   => output.push_str(\"i32\"),\n+        ty::TyInt(ast::IntTy::I64)   => output.push_str(\"i64\"),\n+        ty::TyUint(ast::UintTy::Us)   => output.push_str(\"usize\"),\n+        ty::TyUint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n+        ty::TyUint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n+        ty::TyUint(ast::UintTy::U32)  => output.push_str(\"u32\"),\n+        ty::TyUint(ast::UintTy::U64)  => output.push_str(\"u64\"),\n         ty::TyFloat(ast::FloatTy::F32) => output.push_str(\"f32\"),\n         ty::TyFloat(ast::FloatTy::F64) => output.push_str(\"f64\"),\n         ty::TyStruct(adt_def, substs) |"}, {"sha": "329a291cd68db6118ad28f7371721c12e4d537f7", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -64,7 +64,7 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     let _icx = push_ctxt(\"trans_lit\");\n     debug!(\"const_lit: {:?}\", lit);\n     match lit.node {\n-        ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::TyU8), b as u64, false),\n+        ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::UintTy::U8), b as u64, false),\n         ast::LitChar(i) => C_integral(Type::char(cx), i as u64, false),\n         ast::LitInt(i, ast::SignedIntLit(t, _)) => {\n             C_integral(Type::int_from_ty(cx, t), i, true)"}, {"sha": "a09936e1220b1c04c1e1b96492aa90b895559cba", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -2370,14 +2370,14 @@ impl OverflowOpViaIntrinsic {\n         use middle::ty::{TyInt, TyUint};\n \n         let new_sty = match ty.sty {\n-            TyInt(TyIs) => match &tcx.sess.target.target.target_pointer_width[..] {\n-                \"32\" => TyInt(TyI32),\n-                \"64\" => TyInt(TyI64),\n+            TyInt(Is) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"32\" => TyInt(I32),\n+                \"64\" => TyInt(I64),\n                 _ => panic!(\"unsupported target word size\")\n             },\n-            TyUint(TyUs) => match &tcx.sess.target.target.target_pointer_width[..] {\n-                \"32\" => TyUint(TyU32),\n-                \"64\" => TyUint(TyU64),\n+            TyUint(Us) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"32\" => TyUint(U32),\n+                \"64\" => TyUint(U64),\n                 _ => panic!(\"unsupported target word size\")\n             },\n             ref t @ TyUint(_) | ref t @ TyInt(_) => t.clone(),\n@@ -2387,41 +2387,41 @@ impl OverflowOpViaIntrinsic {\n \n         match *self {\n             OverflowOpViaIntrinsic::Add => match new_sty {\n-                TyInt(TyI8) => \"llvm.sadd.with.overflow.i8\",\n-                TyInt(TyI16) => \"llvm.sadd.with.overflow.i16\",\n-                TyInt(TyI32) => \"llvm.sadd.with.overflow.i32\",\n-                TyInt(TyI64) => \"llvm.sadd.with.overflow.i64\",\n+                TyInt(I8) => \"llvm.sadd.with.overflow.i8\",\n+                TyInt(I16) => \"llvm.sadd.with.overflow.i16\",\n+                TyInt(I32) => \"llvm.sadd.with.overflow.i32\",\n+                TyInt(I64) => \"llvm.sadd.with.overflow.i64\",\n \n-                TyUint(TyU8) => \"llvm.uadd.with.overflow.i8\",\n-                TyUint(TyU16) => \"llvm.uadd.with.overflow.i16\",\n-                TyUint(TyU32) => \"llvm.uadd.with.overflow.i32\",\n-                TyUint(TyU64) => \"llvm.uadd.with.overflow.i64\",\n+                TyUint(U8) => \"llvm.uadd.with.overflow.i8\",\n+                TyUint(U16) => \"llvm.uadd.with.overflow.i16\",\n+                TyUint(U32) => \"llvm.uadd.with.overflow.i32\",\n+                TyUint(U64) => \"llvm.uadd.with.overflow.i64\",\n \n                 _ => unreachable!(),\n             },\n             OverflowOpViaIntrinsic::Sub => match new_sty {\n-                TyInt(TyI8) => \"llvm.ssub.with.overflow.i8\",\n-                TyInt(TyI16) => \"llvm.ssub.with.overflow.i16\",\n-                TyInt(TyI32) => \"llvm.ssub.with.overflow.i32\",\n-                TyInt(TyI64) => \"llvm.ssub.with.overflow.i64\",\n+                TyInt(I8) => \"llvm.ssub.with.overflow.i8\",\n+                TyInt(I16) => \"llvm.ssub.with.overflow.i16\",\n+                TyInt(I32) => \"llvm.ssub.with.overflow.i32\",\n+                TyInt(I64) => \"llvm.ssub.with.overflow.i64\",\n \n-                TyUint(TyU8) => \"llvm.usub.with.overflow.i8\",\n-                TyUint(TyU16) => \"llvm.usub.with.overflow.i16\",\n-                TyUint(TyU32) => \"llvm.usub.with.overflow.i32\",\n-                TyUint(TyU64) => \"llvm.usub.with.overflow.i64\",\n+                TyUint(U8) => \"llvm.usub.with.overflow.i8\",\n+                TyUint(U16) => \"llvm.usub.with.overflow.i16\",\n+                TyUint(U32) => \"llvm.usub.with.overflow.i32\",\n+                TyUint(U64) => \"llvm.usub.with.overflow.i64\",\n \n                 _ => unreachable!(),\n             },\n             OverflowOpViaIntrinsic::Mul => match new_sty {\n-                TyInt(TyI8) => \"llvm.smul.with.overflow.i8\",\n-                TyInt(TyI16) => \"llvm.smul.with.overflow.i16\",\n-                TyInt(TyI32) => \"llvm.smul.with.overflow.i32\",\n-                TyInt(TyI64) => \"llvm.smul.with.overflow.i64\",\n-\n-                TyUint(TyU8) => \"llvm.umul.with.overflow.i8\",\n-                TyUint(TyU16) => \"llvm.umul.with.overflow.i16\",\n-                TyUint(TyU32) => \"llvm.umul.with.overflow.i32\",\n-                TyUint(TyU64) => \"llvm.umul.with.overflow.i64\",\n+                TyInt(I8) => \"llvm.smul.with.overflow.i8\",\n+                TyInt(I16) => \"llvm.smul.with.overflow.i16\",\n+                TyInt(I32) => \"llvm.smul.with.overflow.i32\",\n+                TyInt(I64) => \"llvm.smul.with.overflow.i64\",\n+\n+                TyUint(U8) => \"llvm.umul.with.overflow.i8\",\n+                TyUint(U16) => \"llvm.umul.with.overflow.i16\",\n+                TyUint(U32) => \"llvm.umul.with.overflow.i32\",\n+                TyUint(U64) => \"llvm.umul.with.overflow.i64\",\n \n                 _ => unreachable!(),\n             },"}, {"sha": "018d4535d0cf15bec458b0949c2aebb343f77fe1", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -1664,30 +1664,30 @@ fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)\n     use rustc::middle::ty::{TyInt, TyUint};\n     match *sty {\n         TyInt(t) => Some((match t {\n-            ast::TyIs => {\n+            ast::IntTy::Is => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"32\" => 32,\n                     \"64\" => 64,\n                     tws => panic!(\"Unsupported target word size for isize: {}\", tws),\n                 }\n             },\n-            ast::TyI8 => 8,\n-            ast::TyI16 => 16,\n-            ast::TyI32 => 32,\n-            ast::TyI64 => 64,\n+            ast::IntTy::I8 => 8,\n+            ast::IntTy::I16 => 16,\n+            ast::IntTy::I32 => 32,\n+            ast::IntTy::I64 => 64,\n         }, true)),\n         TyUint(t) => Some((match t {\n-            ast::TyUs => {\n+            ast::UintTy::Us => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"32\" => 32,\n                     \"64\" => 64,\n                     tws => panic!(\"Unsupported target word size for usize: {}\", tws),\n                 }\n             },\n-            ast::TyU8 => 8,\n-            ast::TyU16 => 16,\n-            ast::TyU32 => 32,\n-            ast::TyU64 => 64,\n+            ast::UintTy::U8 => 8,\n+            ast::UintTy::U16 => 16,\n+            ast::UintTy::U32 => 32,\n+            ast::UintTy::U64 => 64,\n         }, false)),\n         _ => None,\n     }"}, {"sha": "ab43861618d16f521f45f45843a4245ab3c93146", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -644,7 +644,7 @@ pub fn get_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n fn opaque_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)\n                           -> &'tcx ty::BareFnTy<'tcx> {\n     let mut inputs = method_ty.sig.0.inputs.clone();\n-    inputs[0] = tcx.mk_mut_ptr(tcx.mk_mach_int(ast::TyI8));\n+    inputs[0] = tcx.mk_mut_ptr(tcx.mk_mach_int(ast::IntTy::I8));\n \n     tcx.mk_bare_fn(ty::BareFnTy {\n         unsafety: method_ty.unsafety,"}, {"sha": "17300f356c4349520d78b4406ca73466ab9cb057", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -127,21 +127,21 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::TyIs => ccx.int_type(),\n-            ast::TyI8 => Type::i8(ccx),\n-            ast::TyI16 => Type::i16(ccx),\n-            ast::TyI32 => Type::i32(ccx),\n-            ast::TyI64 => Type::i64(ccx)\n+            ast::IntTy::Is => ccx.int_type(),\n+            ast::IntTy::I8 => Type::i8(ccx),\n+            ast::IntTy::I16 => Type::i16(ccx),\n+            ast::IntTy::I32 => Type::i32(ccx),\n+            ast::IntTy::I64 => Type::i64(ccx)\n         }\n     }\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::TyUs => ccx.int_type(),\n-            ast::TyU8 => Type::i8(ccx),\n-            ast::TyU16 => Type::i16(ccx),\n-            ast::TyU32 => Type::i32(ccx),\n-            ast::TyU64 => Type::i64(ccx)\n+            ast::UintTy::Us => ccx.int_type(),\n+            ast::UintTy::U8 => Type::i8(ccx),\n+            ast::UintTy::U16 => Type::i16(ccx),\n+            ast::UintTy::U32 => Type::i32(ccx),\n+            ast::UintTy::U64 => Type::i64(ccx)\n         }\n     }\n "}, {"sha": "4b5a0b05512767a829a9fe03ebdf0f2f6f13c9e7", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -385,7 +385,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n                   let unsized_part = cx.tcx().struct_tail(ty);\n                   let info_ty = match unsized_part.sty {\n                       ty::TyStr | ty::TyArray(..) | ty::TySlice(_) => {\n-                          Type::uint_from_ty(cx, ast::TyUs)\n+                          Type::uint_from_ty(cx, ast::UintTy::Us)\n                       }\n                       ty::TyTrait(_) => Type::vtable_ptr(cx),\n                       _ => panic!(\"Unexpected type returned from \\"}, {"sha": "2ea0df280db216acd409130656059a103fd99502", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -248,7 +248,7 @@ impl<'tcx> CastCheck<'tcx> {\n             (_, Int(Bool)) => Err(CastError::CastToBool),\n \n             // * -> Char\n-            (Int(U(ast::TyU8)), Int(Char)) => Ok(CastKind::U8CharCast), // u8-char-cast\n+            (Int(U(ast::UintTy::U8)), Int(Char)) => Ok(CastKind::U8CharCast), // u8-char-cast\n             (_, Int(Char)) => Err(CastError::CastToChar),\n \n             // prim -> float,ptr"}, {"sha": "ba6fa9aed3d9aaa987f773f0155416f9cd4601e0", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -429,14 +429,14 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n         },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n         Integer(signed, bits, _llvm_width) => match (signed, bits, &t.sty) {\n-            (true,  8,  &ty::TyInt(ast::IntTy::TyI8)) |\n-            (false, 8,  &ty::TyUint(ast::UintTy::TyU8)) |\n-            (true,  16, &ty::TyInt(ast::IntTy::TyI16)) |\n-            (false, 16, &ty::TyUint(ast::UintTy::TyU16)) |\n-            (true,  32, &ty::TyInt(ast::IntTy::TyI32)) |\n-            (false, 32, &ty::TyUint(ast::UintTy::TyU32)) |\n-            (true,  64, &ty::TyInt(ast::IntTy::TyI64)) |\n-            (false, 64, &ty::TyUint(ast::UintTy::TyU64)) => {},\n+            (true,  8,  &ty::TyInt(ast::IntTy::I8)) |\n+            (false, 8,  &ty::TyUint(ast::UintTy::U8)) |\n+            (true,  16, &ty::TyInt(ast::IntTy::I16)) |\n+            (false, 16, &ty::TyUint(ast::UintTy::U16)) |\n+            (true,  32, &ty::TyInt(ast::IntTy::I32)) |\n+            (false, 32, &ty::TyUint(ast::UintTy::U32)) |\n+            (true,  64, &ty::TyInt(ast::IntTy::I64)) |\n+            (false, 64, &ty::TyUint(ast::UintTy::U64)) => {},\n             _ => simple_error(&format!(\"`{}`\", t),\n                               &format!(\"`{}{n}`\",\n                                        if signed {\"i\"} else {\"u\"},"}, {"sha": "3cf182a0d8ff6ba941c45e0acc440ba804c07b23", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -317,43 +317,43 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.mut_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::TyI8) => {\n+            ty::TyInt(ast::IntTy::I8) => {\n                 let lang_def_id = self.tcx().lang_items.i8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::TyI16) => {\n+            ty::TyInt(ast::IntTy::I16) => {\n                 let lang_def_id = self.tcx().lang_items.i16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::TyI32) => {\n+            ty::TyInt(ast::IntTy::I32) => {\n                 let lang_def_id = self.tcx().lang_items.i32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::TyI64) => {\n+            ty::TyInt(ast::IntTy::I64) => {\n                 let lang_def_id = self.tcx().lang_items.i64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::TyIs) => {\n+            ty::TyInt(ast::IntTy::Is) => {\n                 let lang_def_id = self.tcx().lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::TyU8) => {\n+            ty::TyUint(ast::UintTy::U8) => {\n                 let lang_def_id = self.tcx().lang_items.u8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::TyU16) => {\n+            ty::TyUint(ast::UintTy::U16) => {\n                 let lang_def_id = self.tcx().lang_items.u16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::TyU32) => {\n+            ty::TyUint(ast::UintTy::U32) => {\n                 let lang_def_id = self.tcx().lang_items.u32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::TyU64) => {\n+            ty::TyUint(ast::UintTy::U64) => {\n                 let lang_def_id = self.tcx().lang_items.u64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::TyUs) => {\n+            ty::TyUint(ast::UintTy::Us) => {\n                 let lang_def_id = self.tcx().lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "066805e54a129829c5342aba63d342987d860ca5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -2264,7 +2264,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // First, try built-in indexing.\n     match (adjusted_ty.builtin_index(), &index_ty.sty) {\n-        (Some(ty), &ty::TyUint(ast::TyUs)) | (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n+        (Some(ty), &ty::TyUint(ast::UintTy::Us)) | (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n             debug!(\"try_index_step: success, using built-in indexing\");\n             // If we had `[T; N]`, we should've caught it before unsizing to `[T]`.\n             assert!(!unsize);\n@@ -2563,14 +2563,14 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                  function, cast to c_double\", t)\n                     }, arg_ty, None);\n                 }\n-                ty::TyInt(ast::TyI8) | ty::TyInt(ast::TyI16) | ty::TyBool => {\n+                ty::TyInt(ast::IntTy::I8) | ty::TyInt(ast::IntTy::I16) | ty::TyBool => {\n                     fcx.type_error_message(arg.span, |t| {\n                         format!(\"can't pass {} to variadic \\\n                                  function, cast to c_int\",\n                                        t)\n                     }, arg_ty, None);\n                 }\n-                ty::TyUint(ast::TyU8) | ty::TyUint(ast::TyU16) => {\n+                ty::TyUint(ast::UintTy::U8) | ty::TyUint(ast::UintTy::U16) => {\n                     fcx.type_error_message(arg.span, |t| {\n                         format!(\"can't pass {} to variadic \\\n                                  function, cast to c_uint\",\n@@ -4167,20 +4167,20 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                      disr: ty::Disr) -> bool {\n         fn uint_in_range(ccx: &CrateCtxt, ty: ast::UintTy, disr: ty::Disr) -> bool {\n             match ty {\n-                ast::TyU8 => disr as u8 as Disr == disr,\n-                ast::TyU16 => disr as u16 as Disr == disr,\n-                ast::TyU32 => disr as u32 as Disr == disr,\n-                ast::TyU64 => disr as u64 as Disr == disr,\n-                ast::TyUs => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n+                ast::UintTy::U8 => disr as u8 as Disr == disr,\n+                ast::UintTy::U16 => disr as u16 as Disr == disr,\n+                ast::UintTy::U32 => disr as u32 as Disr == disr,\n+                ast::UintTy::U64 => disr as u64 as Disr == disr,\n+                ast::UintTy::Us => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n             }\n         }\n         fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool {\n             match ty {\n-                ast::TyI8 => disr as i8 as Disr == disr,\n-                ast::TyI16 => disr as i16 as Disr == disr,\n-                ast::TyI32 => disr as i32 as Disr == disr,\n-                ast::TyI64 => disr as i64 as Disr == disr,\n-                ast::TyIs => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n+                ast::IntTy::I8 => disr as i8 as Disr == disr,\n+                ast::IntTy::I16 => disr as i16 as Disr == disr,\n+                ast::IntTy::I32 => disr as i32 as Disr == disr,\n+                ast::IntTy::I64 => disr as i64 as Disr == disr,\n+                ast::IntTy::Is => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n             }\n         }\n         match ty {"}, {"sha": "9e966c283a0a5efddbd967849d290219a8f6043e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -121,70 +121,70 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"*mut T\",\n                                                   item.span);\n                     }\n-                    ty::TyInt(ast::TyI8) => {\n+                    ty::TyInt(ast::IntTy::I8) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.i8_impl(),\n                                                   \"i8\",\n                                                   \"i8\",\n                                                   item.span);\n                     }\n-                    ty::TyInt(ast::TyI16) => {\n+                    ty::TyInt(ast::IntTy::I16) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.i16_impl(),\n                                                   \"i16\",\n                                                   \"i16\",\n                                                   item.span);\n                     }\n-                    ty::TyInt(ast::TyI32) => {\n+                    ty::TyInt(ast::IntTy::I32) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.i32_impl(),\n                                                   \"i32\",\n                                                   \"i32\",\n                                                   item.span);\n                     }\n-                    ty::TyInt(ast::TyI64) => {\n+                    ty::TyInt(ast::IntTy::I64) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.i64_impl(),\n                                                   \"i64\",\n                                                   \"i64\",\n                                                   item.span);\n                     }\n-                    ty::TyInt(ast::TyIs) => {\n+                    ty::TyInt(ast::IntTy::Is) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.isize_impl(),\n                                                   \"isize\",\n                                                   \"isize\",\n                                                   item.span);\n                     }\n-                    ty::TyUint(ast::TyU8) => {\n+                    ty::TyUint(ast::UintTy::U8) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.u8_impl(),\n                                                   \"u8\",\n                                                   \"u8\",\n                                                   item.span);\n                     }\n-                    ty::TyUint(ast::TyU16) => {\n+                    ty::TyUint(ast::UintTy::U16) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.u16_impl(),\n                                                   \"u16\",\n                                                   \"u16\",\n                                                   item.span);\n                     }\n-                    ty::TyUint(ast::TyU32) => {\n+                    ty::TyUint(ast::UintTy::U32) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.u32_impl(),\n                                                   \"u32\",\n                                                   \"u32\",\n                                                   item.span);\n                     }\n-                    ty::TyUint(ast::TyU64) => {\n+                    ty::TyUint(ast::UintTy::U64) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.u64_impl(),\n                                                   \"u64\",\n                                                   \"u64\",\n                                                   item.span);\n                     }\n-                    ty::TyUint(ast::TyUs) => {\n+                    ty::TyUint(ast::UintTy::Us) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.usize_impl(),\n                                                   \"usize\","}, {"sha": "29722e5b538299ea01683cafa32df797c2065031", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -1640,16 +1640,16 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n         match self.sty {\n             ty::TyBool => Primitive(Bool),\n             ty::TyChar => Primitive(Char),\n-            ty::TyInt(ast::TyIs) => Primitive(Isize),\n-            ty::TyInt(ast::TyI8) => Primitive(I8),\n-            ty::TyInt(ast::TyI16) => Primitive(I16),\n-            ty::TyInt(ast::TyI32) => Primitive(I32),\n-            ty::TyInt(ast::TyI64) => Primitive(I64),\n-            ty::TyUint(ast::TyUs) => Primitive(Usize),\n-            ty::TyUint(ast::TyU8) => Primitive(U8),\n-            ty::TyUint(ast::TyU16) => Primitive(U16),\n-            ty::TyUint(ast::TyU32) => Primitive(U32),\n-            ty::TyUint(ast::TyU64) => Primitive(U64),\n+            ty::TyInt(ast::IntTy::Is) => Primitive(Isize),\n+            ty::TyInt(ast::IntTy::I8) => Primitive(I8),\n+            ty::TyInt(ast::IntTy::I16) => Primitive(I16),\n+            ty::TyInt(ast::IntTy::I32) => Primitive(I32),\n+            ty::TyInt(ast::IntTy::I64) => Primitive(I64),\n+            ty::TyUint(ast::UintTy::Us) => Primitive(Usize),\n+            ty::TyUint(ast::UintTy::U8) => Primitive(U8),\n+            ty::TyUint(ast::UintTy::U16) => Primitive(U16),\n+            ty::TyUint(ast::UintTy::U32) => Primitive(U32),\n+            ty::TyUint(ast::UintTy::U64) => Primitive(U64),\n             ty::TyFloat(ast::FloatTy::F32) => Primitive(F32),\n             ty::TyFloat(ast::FloatTy::F64) => Primitive(F64),\n             ty::TyStr => Primitive(Str),\n@@ -2619,16 +2619,16 @@ fn resolve_type(cx: &DocContext,\n             hir::TyStr => return Primitive(Str),\n             hir::TyBool => return Primitive(Bool),\n             hir::TyChar => return Primitive(Char),\n-            hir::TyInt(ast::TyIs) => return Primitive(Isize),\n-            hir::TyInt(ast::TyI8) => return Primitive(I8),\n-            hir::TyInt(ast::TyI16) => return Primitive(I16),\n-            hir::TyInt(ast::TyI32) => return Primitive(I32),\n-            hir::TyInt(ast::TyI64) => return Primitive(I64),\n-            hir::TyUint(ast::TyUs) => return Primitive(Usize),\n-            hir::TyUint(ast::TyU8) => return Primitive(U8),\n-            hir::TyUint(ast::TyU16) => return Primitive(U16),\n-            hir::TyUint(ast::TyU32) => return Primitive(U32),\n-            hir::TyUint(ast::TyU64) => return Primitive(U64),\n+            hir::TyInt(ast::IntTy::Is) => return Primitive(Isize),\n+            hir::TyInt(ast::IntTy::I8) => return Primitive(I8),\n+            hir::TyInt(ast::IntTy::I16) => return Primitive(I16),\n+            hir::TyInt(ast::IntTy::I32) => return Primitive(I32),\n+            hir::TyInt(ast::IntTy::I64) => return Primitive(I64),\n+            hir::TyUint(ast::UintTy::Us) => return Primitive(Usize),\n+            hir::TyUint(ast::UintTy::U8) => return Primitive(U8),\n+            hir::TyUint(ast::UintTy::U16) => return Primitive(U16),\n+            hir::TyUint(ast::UintTy::U32) => return Primitive(U32),\n+            hir::TyUint(ast::UintTy::U64) => return Primitive(U64),\n             hir::TyFloat(ast::FloatTy::F32) => return Primitive(F32),\n             hir::TyFloat(ast::FloatTy::F64) => return Primitive(F64),\n         },"}, {"sha": "dbc73f01bc2225fc7b83aaec0feb4af25c104de8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -11,7 +11,6 @@\n // The Rust abstract syntax tree.\n \n pub use self::ForeignItem_::*;\n-pub use self::IntTy::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n pub use self::Lit_::*;\n@@ -29,7 +28,6 @@ pub use self::StructFieldKind::*;\n pub use self::TraitItem_::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n-pub use self::UintTy::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n@@ -1393,11 +1391,11 @@ pub enum ImplItemKind {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n-    TyIs,\n-    TyI8,\n-    TyI16,\n-    TyI32,\n-    TyI64,\n+    Is,\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n }\n \n impl fmt::Debug for IntTy {\n@@ -1415,11 +1413,11 @@ impl fmt::Display for IntTy {\n impl IntTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            TyIs => \"isize\",\n-            TyI8 => \"i8\",\n-            TyI16 => \"i16\",\n-            TyI32 => \"i32\",\n-            TyI64 => \"i64\"\n+            IntTy::Is => \"isize\",\n+            IntTy::I8 => \"i8\",\n+            IntTy::I16 => \"i16\",\n+            IntTy::I32 => \"i32\",\n+            IntTy::I64 => \"i64\"\n         }\n     }\n \n@@ -1432,41 +1430,41 @@ impl IntTy {\n \n     pub fn ty_max(&self) -> u64 {\n         match *self {\n-            TyI8 => 0x80,\n-            TyI16 => 0x8000,\n-            TyIs | TyI32 => 0x80000000, // actually ni about TyIs\n-            TyI64 => 0x8000000000000000\n+            IntTy::I8 => 0x80,\n+            IntTy::I16 => 0x8000,\n+            IntTy::Is | IntTy::I32 => 0x80000000, // FIXME: actually ni about Is\n+            IntTy::I64 => 0x8000000000000000\n         }\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            TyIs => return None,\n-            TyI8 => 8,\n-            TyI16 => 16,\n-            TyI32 => 32,\n-            TyI64 => 64,\n+            IntTy::Is => return None,\n+            IntTy::I8 => 8,\n+            IntTy::I16 => 16,\n+            IntTy::I32 => 32,\n+            IntTy::I64 => 64,\n         })\n     }\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n-    TyUs,\n-    TyU8,\n-    TyU16,\n-    TyU32,\n-    TyU64,\n+    Us,\n+    U8,\n+    U16,\n+    U32,\n+    U64,\n }\n \n impl UintTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            TyUs => \"usize\",\n-            TyU8 => \"u8\",\n-            TyU16 => \"u16\",\n-            TyU32 => \"u32\",\n-            TyU64 => \"u64\"\n+            UintTy::Us => \"usize\",\n+            UintTy::U8 => \"u8\",\n+            UintTy::U16 => \"u16\",\n+            UintTy::U32 => \"u32\",\n+            UintTy::U64 => \"u64\"\n         }\n     }\n \n@@ -1476,20 +1474,20 @@ impl UintTy {\n \n     pub fn ty_max(&self) -> u64 {\n         match *self {\n-            TyU8 => 0xff,\n-            TyU16 => 0xffff,\n-            TyUs | TyU32 => 0xffffffff, // actually ni about TyUs\n-            TyU64 => 0xffffffffffffffff\n+            UintTy::U8 => 0xff,\n+            UintTy::U16 => 0xffff,\n+            UintTy::Us | UintTy::U32 => 0xffffffff, // FIXME: actually ni about Us\n+            UintTy::U64 => 0xffffffffffffffff\n         }\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            TyUs => return None,\n-            TyU8 => 8,\n-            TyU16 => 16,\n-            TyU32 => 32,\n-            TyU64 => 64,\n+            UintTy::Us => return None,\n+            UintTy::U8 => 8,\n+            UintTy::U16 => 16,\n+            UintTy::U32 => 32,\n+            UintTy::U64 => 64,\n         })\n     }\n }"}, {"sha": "64e6bcaa53c94d5e5f0e4ae875f8f153a7121c27", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -746,16 +746,16 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n \n fn int_type_of_word(s: &str) -> Option<IntType> {\n     match s {\n-        \"i8\" => Some(SignedInt(ast::TyI8)),\n-        \"u8\" => Some(UnsignedInt(ast::TyU8)),\n-        \"i16\" => Some(SignedInt(ast::TyI16)),\n-        \"u16\" => Some(UnsignedInt(ast::TyU16)),\n-        \"i32\" => Some(SignedInt(ast::TyI32)),\n-        \"u32\" => Some(UnsignedInt(ast::TyU32)),\n-        \"i64\" => Some(SignedInt(ast::TyI64)),\n-        \"u64\" => Some(UnsignedInt(ast::TyU64)),\n-        \"isize\" => Some(SignedInt(ast::TyIs)),\n-        \"usize\" => Some(UnsignedInt(ast::TyUs)),\n+        \"i8\" => Some(SignedInt(ast::IntTy::I8)),\n+        \"u8\" => Some(UnsignedInt(ast::UintTy::U8)),\n+        \"i16\" => Some(SignedInt(ast::IntTy::I16)),\n+        \"u16\" => Some(UnsignedInt(ast::UintTy::U16)),\n+        \"i32\" => Some(SignedInt(ast::IntTy::I32)),\n+        \"u32\" => Some(UnsignedInt(ast::UintTy::U32)),\n+        \"i64\" => Some(SignedInt(ast::IntTy::I64)),\n+        \"u64\" => Some(UnsignedInt(ast::UintTy::U64)),\n+        \"isize\" => Some(SignedInt(ast::IntTy::Is)),\n+        \"usize\" => Some(UnsignedInt(ast::UintTy::Us)),\n         _ => None\n     }\n }\n@@ -797,11 +797,11 @@ impl IntType {\n     }\n     fn is_ffi_safe(self) -> bool {\n         match self {\n-            SignedInt(ast::TyI8) | UnsignedInt(ast::TyU8) |\n-            SignedInt(ast::TyI16) | UnsignedInt(ast::TyU16) |\n-            SignedInt(ast::TyI32) | UnsignedInt(ast::TyU32) |\n-            SignedInt(ast::TyI64) | UnsignedInt(ast::TyU64) => true,\n-            SignedInt(ast::TyIs) | UnsignedInt(ast::TyUs) => false\n+            SignedInt(ast::IntTy::I8) | UnsignedInt(ast::UintTy::U8) |\n+            SignedInt(ast::IntTy::I16) | UnsignedInt(ast::UintTy::U16) |\n+            SignedInt(ast::IntTy::I32) | UnsignedInt(ast::UintTy::U32) |\n+            SignedInt(ast::IntTy::I64) | UnsignedInt(ast::UintTy::U64) => true,\n+            SignedInt(ast::IntTy::Is) | UnsignedInt(ast::UintTy::Us) => false\n         }\n     }\n }"}, {"sha": "1af29f2f93a6bfd7b67ee41a1671d6f0988bae4d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -680,17 +680,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::Lit(P(respan(sp, lit))))\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::UintTy::Us)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs,\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::IntTy::Is,\n                                                                   ast::Sign::new(i))))\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU32)))\n+        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::UintTy::U32)))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))\n+        self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::UintTy::U8)))\n     }\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitBool(value))"}, {"sha": "a9f480daa0eff619cbeb0251354dc69ef501a4d0", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -279,17 +279,17 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_tokens_int! { signed, isize, ast::TyIs }\n-    impl_to_tokens_int! { signed, i8,  ast::TyI8 }\n-    impl_to_tokens_int! { signed, i16, ast::TyI16 }\n-    impl_to_tokens_int! { signed, i32, ast::TyI32 }\n-    impl_to_tokens_int! { signed, i64, ast::TyI64 }\n-\n-    impl_to_tokens_int! { unsigned, usize, ast::TyUs }\n-    impl_to_tokens_int! { unsigned, u8,   ast::TyU8 }\n-    impl_to_tokens_int! { unsigned, u16,  ast::TyU16 }\n-    impl_to_tokens_int! { unsigned, u32,  ast::TyU32 }\n-    impl_to_tokens_int! { unsigned, u64,  ast::TyU64 }\n+    impl_to_tokens_int! { signed, isize, ast::IntTy::Is }\n+    impl_to_tokens_int! { signed, i8,  ast::IntTy::I8 }\n+    impl_to_tokens_int! { signed, i16, ast::IntTy::I16 }\n+    impl_to_tokens_int! { signed, i32, ast::IntTy::I32 }\n+    impl_to_tokens_int! { signed, i64, ast::IntTy::I64 }\n+\n+    impl_to_tokens_int! { unsigned, usize, ast::UintTy::Us }\n+    impl_to_tokens_int! { unsigned, u8,   ast::UintTy::U8 }\n+    impl_to_tokens_int! { unsigned, u16,  ast::UintTy::U16 }\n+    impl_to_tokens_int! { unsigned, u32,  ast::UintTy::U32 }\n+    impl_to_tokens_int! { unsigned, u64,  ast::UintTy::U64 }\n \n     pub trait ExtParseUtils {\n         fn parse_item(&self, s: String) -> P<ast::Item>;"}, {"sha": "2472da36d5287bdc999c0f534d1ba738cba0f9f2", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -618,16 +618,16 @@ pub fn integer_lit(s: &str,\n     if let Some(ref suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match &**suf {\n-            \"isize\" => ast::SignedIntLit(ast::TyIs, ast::Plus),\n-            \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n-            \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n-            \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n-            \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"usize\" => ast::UnsignedIntLit(ast::TyUs),\n-            \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n-            \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n-            \"u32\" => ast::UnsignedIntLit(ast::TyU32),\n-            \"u64\" => ast::UnsignedIntLit(ast::TyU64),\n+            \"isize\" => ast::SignedIntLit(ast::IntTy::Is, ast::Plus),\n+            \"i8\"  => ast::SignedIntLit(ast::IntTy::I8, ast::Plus),\n+            \"i16\" => ast::SignedIntLit(ast::IntTy::I16, ast::Plus),\n+            \"i32\" => ast::SignedIntLit(ast::IntTy::I32, ast::Plus),\n+            \"i64\" => ast::SignedIntLit(ast::IntTy::I64, ast::Plus),\n+            \"usize\" => ast::UnsignedIntLit(ast::UintTy::Us),\n+            \"u8\"  => ast::UnsignedIntLit(ast::UintTy::U8),\n+            \"u16\" => ast::UnsignedIntLit(ast::UintTy::U16),\n+            \"u32\" => ast::UnsignedIntLit(ast::UintTy::U32),\n+            \"u64\" => ast::UnsignedIntLit(ast::UintTy::U64),\n             _ => {\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines"}, {"sha": "99db01a915eefa68b8baa89993f29ea351f92e15", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -27,7 +27,7 @@ use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n-use ast::{Lit, Lit_};\n+use ast::{Lit, Lit_, UintTy};\n use ast::{LitBool, LitChar, LitByte, LitByteStr};\n use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n@@ -45,7 +45,7 @@ use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBounds, TyParen, TyPath, TyPtr};\n-use ast::{TyRptr, TyTup, TyU32, TyVec};\n+use ast::{TyRptr, TyTup, TyVec};\n use ast::TypeTraitItem;\n use ast::UnnamedField;\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n@@ -2017,7 +2017,7 @@ impl<'a> Parser<'a> {\n     pub fn mk_lit_u32(&mut self, i: u32, attrs: ThinAttributes) -> P<Expr> {\n         let span = &self.span;\n         let lv_lit = P(codemap::Spanned {\n-            node: LitInt(i as u64, ast::UnsignedIntLit(TyU32)),\n+            node: LitInt(i as u64, ast::UnsignedIntLit(UintTy::U32)),\n             span: *span\n         });\n "}, {"sha": "2054c0fc9bd73d2a6b09af76d2098576fac5b8d4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -3184,8 +3184,8 @@ mod tests {\n \n     #[test]\n     fn test_signed_int_to_string() {\n-        let pos_int = ast::LitInt(42, ast::SignedIntLit(ast::TyI32, ast::Plus));\n-        let neg_int = ast::LitInt((!42 + 1) as u64, ast::SignedIntLit(ast::TyI32, ast::Minus));\n+        let pos_int = ast::LitInt(42, ast::SignedIntLit(ast::IntTy::I32, ast::Plus));\n+        let neg_int = ast::LitInt((!42 + 1) as u64, ast::SignedIntLit(ast::IntTy::I32, ast::Minus));\n         assert_eq!(format!(\"-{}\", lit_to_string(&codemap::dummy_spanned(pos_int))),\n                    lit_to_string(&codemap::dummy_spanned(neg_int)));\n     }"}, {"sha": "950c2f48bac689b12506d92f4cb98874d76fbb08", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625e78b7001c6e20f29928a5da8c9d21e9aed6c5/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "patch": "@@ -748,17 +748,17 @@ fn find_repr_type_name(diagnostic: &Handler,\n                 attr::ReprAny | attr::ReprPacked | attr::ReprSimd => continue,\n                 attr::ReprExtern => \"i32\",\n \n-                attr::ReprInt(_, attr::SignedInt(ast::TyIs)) => \"isize\",\n-                attr::ReprInt(_, attr::SignedInt(ast::TyI8)) => \"i8\",\n-                attr::ReprInt(_, attr::SignedInt(ast::TyI16)) => \"i16\",\n-                attr::ReprInt(_, attr::SignedInt(ast::TyI32)) => \"i32\",\n-                attr::ReprInt(_, attr::SignedInt(ast::TyI64)) => \"i64\",\n-\n-                attr::ReprInt(_, attr::UnsignedInt(ast::TyUs)) => \"usize\",\n-                attr::ReprInt(_, attr::UnsignedInt(ast::TyU8)) => \"u8\",\n-                attr::ReprInt(_, attr::UnsignedInt(ast::TyU16)) => \"u16\",\n-                attr::ReprInt(_, attr::UnsignedInt(ast::TyU32)) => \"u32\",\n-                attr::ReprInt(_, attr::UnsignedInt(ast::TyU64)) => \"u64\",\n+                attr::ReprInt(_, attr::SignedInt(ast::IntTy::Is)) => \"isize\",\n+                attr::ReprInt(_, attr::SignedInt(ast::IntTy::I8)) => \"i8\",\n+                attr::ReprInt(_, attr::SignedInt(ast::IntTy::I16)) => \"i16\",\n+                attr::ReprInt(_, attr::SignedInt(ast::IntTy::I32)) => \"i32\",\n+                attr::ReprInt(_, attr::SignedInt(ast::IntTy::I64)) => \"i64\",\n+\n+                attr::ReprInt(_, attr::UnsignedInt(ast::UintTy::Us)) => \"usize\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::UintTy::U8)) => \"u8\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::UintTy::U16)) => \"u16\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::UintTy::U32)) => \"u32\",\n+                attr::ReprInt(_, attr::UnsignedInt(ast::UintTy::U64)) => \"u64\",\n             }\n         }\n     }"}]}