{"sha": "033b886f8c4f4b8de0b1f670f45a780e5679620b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzM2I4ODZmOGM0ZjRiOGRlMGIxZjY3MGY0NWE3ODBlNTY3OTYyMGI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-29T14:30:33Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-29T14:30:33Z"}, "message": "Rollup merge of #27313 - nagisa:illegal-to-invalid, r=pnkfelix\n\nImproves diagnostics in various locations, namely:\r\n\r\n* A few error messages that orignally were a mix of an error message and suggestion how to fix it have been split up into two messages: an error and help/hint.\r\n* Never report \u201cillegal\u201d. Fixes https://github.com/rust-lang/rust/issues/27288", "tree": {"sha": "a1c6b76397ed3a447af36b029722e357ae7c8e2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c6b76397ed3a447af36b029722e357ae7c8e2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033b886f8c4f4b8de0b1f670f45a780e5679620b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033b886f8c4f4b8de0b1f670f45a780e5679620b", "html_url": "https://github.com/rust-lang/rust/commit/033b886f8c4f4b8de0b1f670f45a780e5679620b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033b886f8c4f4b8de0b1f670f45a780e5679620b/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10387d6839752ac6a8cd937b5f3fbd6a94c58f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/10387d6839752ac6a8cd937b5f3fbd6a94c58f69", "html_url": "https://github.com/rust-lang/rust/commit/10387d6839752ac6a8cd937b5f3fbd6a94c58f69"}, {"sha": "cca0ea718d363acb85e075aee41223f4da009e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca0ea718d363acb85e075aee41223f4da009e82", "html_url": "https://github.com/rust-lang/rust/commit/cca0ea718d363acb85e075aee41223f4da009e82"}], "stats": {"total": 324, "additions": 183, "deletions": 141}, "files": [{"sha": "95b8161ac342979d4e84aa3aaf02563d79585d71", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -674,8 +674,7 @@ impl<'a> LifetimeContext<'a> {\n             for lifetime in lifetimes {\n                 if special_idents.iter().any(|&i| i.name == lifetime.lifetime.name) {\n                     span_err!(self.sess, lifetime.lifetime.span, E0262,\n-                        \"illegal lifetime parameter name: `{}`\",\n-                                lifetime.lifetime.name);\n+                        \"invalid lifetime parameter name: `{}`\", lifetime.lifetime.name);\n                 }\n             }\n "}, {"sha": "2dae1aca8351daf56fab345303fa42273e875074", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -2325,7 +2325,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n-                &format!(\"deref invoked on expr of illegal type {:?}\",\n+                &format!(\"deref invoked on expr of invalid type {:?}\",\n                         datum.ty));\n         }\n     };"}, {"sha": "883b972872f506d24b967f6fcb692edfc812d292", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -122,20 +122,21 @@ impl<'tcx> CastCheck<'tcx> {\n             CastError::NeedViaInt |\n             CastError::NeedViaUsize => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast; cast through {} first: `{}` as `{}`\",\n-                            match e {\n-                                CastError::NeedViaPtr => \"a raw pointer\",\n-                                CastError::NeedViaInt => \"an integer\",\n-                                CastError::NeedViaUsize => \"a usize\",\n-                                _ => unreachable!()\n-                            },\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n-                }, self.expr_ty, None)\n+                }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_help(self.span,\n+                    &format!(\"cast through {} first\", match e {\n+                        CastError::NeedViaPtr => \"a raw pointer\",\n+                        CastError::NeedViaInt => \"an integer\",\n+                        CastError::NeedViaUsize => \"a usize\",\n+                        _ => unreachable!()\n+                }));\n             }\n             CastError::CastToBool => {\n-                span_err!(fcx.tcx().sess, self.span, E0054,\n-                          \"cannot cast as `bool`, compare with zero instead\");\n+                span_err!(fcx.tcx().sess, self.span, E0054, \"cannot cast as `bool`\");\n+                fcx.ccx.tcx.sess.fileline_help(self.span, \"compare with zero instead\");\n             }\n             CastError::CastToChar => {\n                 fcx.type_error_message(self.span, |actual| {\n@@ -151,17 +152,18 @@ impl<'tcx> CastCheck<'tcx> {\n             }\n             CastError::IllegalCast => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n             }\n             CastError::DifferingKinds => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`; vtable kinds may not match\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_note(self.span, \"vtable kinds may not match\");\n             }\n         }\n     }\n@@ -285,7 +287,7 @@ impl<'tcx> CastCheck<'tcx> {\n             return Ok(CastKind::PtrPtrCast);\n         }\n \n-        // sized -> unsized? report illegal cast (don't complain about vtable kinds)\n+        // sized -> unsized? report invalid cast (don't complain about vtable kinds)\n         if fcx.type_is_known_to_be_sized(m_expr.ty, self.span) {\n             return Err(CastError::IllegalCast);\n         }"}, {"sha": "819f44372979613323413ddc33d46ae50ad67b3c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -3468,7 +3468,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let tcx = fcx.tcx();\n         if !tcx.expr_is_lval(&**lhs) {\n             span_err!(tcx.sess, expr.span, E0070,\n-                \"illegal left-hand side expression\");\n+                \"invalid left-hand side expression\");\n         }\n \n         let lhs_ty = fcx.expr_ty(&**lhs);\n@@ -4273,10 +4273,8 @@ pub fn check_representable(tcx: &ty::ctxt,\n     // caught by case 1.\n     match rty.is_representable(tcx, sp) {\n       ty::SelfRecursive => {\n-        span_err!(tcx.sess, sp, E0072,\n-            \"illegal recursive {} type; \\\n-             wrap the inner value in a box to make it representable\",\n-            designation);\n+        span_err!(tcx.sess, sp, E0072, \"invalid recursive {} type\", designation);\n+        tcx.sess.fileline_help(sp, \"wrap the inner value in a box to make it representable\");\n         return false\n       }\n       ty::Representable | ty::ContainsRecursive => (),"}, {"sha": "c6d13d3b0a5ca6326e4860b5c45257fcf945c53c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -57,7 +57,7 @@ pub fn check_binop_assign<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     let tcx = fcx.tcx();\n     if !tcx.expr_is_lval(lhs_expr) {\n-        span_err!(tcx.sess, lhs_expr.span, E0067, \"illegal left-hand side expression\");\n+        span_err!(tcx.sess, lhs_expr.span, E0067, \"invalid left-hand side expression\");\n     }\n \n     fcx.require_expr_have_sized_type(lhs_expr, traits::AssignmentLhsSized);"}, {"sha": "659f050ae0eb20f73a69557cc473c84543698088", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -778,7 +778,7 @@ the pointer the size of the type would need to be unbounded.\n Consider the following erroneous definition of a type for a list of bytes:\n \n ```\n-// error, illegal recursive struct type\n+// error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n     tail: Option<ListNode>,\n@@ -2362,7 +2362,7 @@ register_diagnostics! {\n     E0241,\n     E0242, // internal error looking up a definition\n     E0245, // not a trait\n-    E0246, // illegal recursive type\n+    E0246, // invalid recursive type\n     E0247, // found module name used as a type\n     E0248, // found value name used as a type\n     E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "019a8404dfb0df00c1624837b18172e6f83d24f2", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -694,7 +694,7 @@ impl<'a> StringReader<'a> {\n             accum_int *= 16;\n             accum_int += c.to_digit(16).unwrap_or_else(|| {\n                 self.err_span_char(self.last_pos, self.pos,\n-                              \"illegal character in numeric character escape\", c);\n+                              \"invalid character in numeric character escape\", c);\n \n                 valid = false;\n                 0\n@@ -714,7 +714,7 @@ impl<'a> StringReader<'a> {\n             Some(_) => valid,\n             None => {\n                 let last_bpos = self.last_pos;\n-                self.err_span_(start_bpos, last_bpos, \"illegal numeric character escape\");\n+                self.err_span_(start_bpos, last_bpos, \"invalid numeric character escape\");\n                 false\n             }\n         }\n@@ -846,7 +846,7 @@ impl<'a> StringReader<'a> {\n                                      \"unterminated unicode escape (needed a `}`)\");\n                 } else {\n                     self.err_span_char(self.last_pos, self.pos,\n-                                   \"illegal character in unicode escape\", c);\n+                                   \"invalid character in unicode escape\", c);\n                 }\n                 valid = false;\n                 0\n@@ -862,7 +862,7 @@ impl<'a> StringReader<'a> {\n         }\n \n         if valid && (char::from_u32(accum_int).is_none() || count == 0) {\n-            self.err_span_(start_bpos, self.last_pos, \"illegal unicode character escape\");\n+            self.err_span_(start_bpos, self.last_pos, \"invalid unicode character escape\");\n             valid = false;\n         }\n \n@@ -1138,8 +1138,8 @@ impl<'a> StringReader<'a> {\n                 let last_bpos = self.last_pos;\n                 let curr_char = self.curr.unwrap();\n                 self.fatal_span_char(start_bpos, last_bpos,\n-                                \"only `#` is allowed in raw string delimitation; \\\n-                                 found illegal character\",\n+                                \"found invalid character; \\\n+                                 only `#` is allowed in raw string delimitation\",\n                                 curr_char);\n             }\n             self.bump();\n@@ -1323,8 +1323,8 @@ impl<'a> StringReader<'a> {\n             let last_pos = self.last_pos;\n             let ch = self.curr.unwrap();\n             self.fatal_span_char(start_bpos, last_pos,\n-                            \"only `#` is allowed in raw string delimitation; \\\n-                             found illegal character\",\n+                            \"found invalid character; \\\n+                             only `#` is allowed in raw string delimitation\",\n                             ch);\n         }\n         self.bump();"}, {"sha": "c5a73601d895c93dd495755f765e56020dff8c43", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -446,11 +446,11 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n         Some(suf) => {\n             if suf.len() >= 2 && looks_like_width_suffix(&['f'], suf) {\n                 // if it looks like a width, lets try to be helpful.\n-                sd.span_err(sp, &*format!(\"illegal width `{}` for float literal, \\\n-                                          valid widths are 32 and 64\", &suf[1..]));\n+                sd.span_err(sp, &*format!(\"invalid width `{}` for float literal\", &suf[1..]));\n+                sd.fileline_help(sp, \"valid widths are 32 and 64\");\n             } else {\n-                sd.span_err(sp, &*format!(\"illegal suffix `{}` for float literal, \\\n-                                          valid suffixes are `f32` and `f64`\", suf));\n+                sd.span_err(sp, &*format!(\"invalid suffix `{}` for float literal\", suf));\n+                sd.fileline_help(sp, \"valid suffixes are `f32` and `f64`\");\n             }\n \n             ast::LitFloatUnsuffixed(data)\n@@ -619,11 +619,11 @@ pub fn integer_lit(s: &str,\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines\n                 if looks_like_width_suffix(&['i', 'u'], suf) {\n-                    sd.span_err(sp, &*format!(\"illegal width `{}` for integer literal; \\\n-                                              valid widths are 8, 16, 32 and 64\",\n+                    sd.span_err(sp, &*format!(\"invalid width `{}` for integer literal\",\n                                               &suf[1..]));\n+                    sd.fileline_help(sp, \"valid widths are 8, 16, 32 and 64\");\n                 } else {\n-                    sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n+                    sd.span_err(sp, &*format!(\"invalid suffix `{}` for numeric literal\", suf));\n                     sd.fileline_help(sp, \"the suffix must be one of the integral types \\\n                                       (`u32`, `isize`, etc)\");\n                 }"}, {"sha": "11611c9adb0bc57996f33213f51d919ac09873e4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -681,7 +681,7 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &*format!(\"{} with a suffix is illegal\", kind));\n+                self.span_err(sp, &*format!(\"{} with a suffix is invalid\", kind));\n             }\n         }\n     }\n@@ -5286,7 +5286,7 @@ impl<'a> Parser<'a> {\n                         let last_span = self.last_span;\n                         self.span_err(\n                             last_span,\n-                            &format!(\"illegal ABI: expected one of [{}], \\\n+                            &format!(\"invalid ABI: expected one of [{}], \\\n                                      found `{}`\",\n                                     abi::all_names().join(\", \"),\n                                     s));"}, {"sha": "c7d2f2c472f49e15bc94f39232a4145be2ada6ab", "filename": "src/test/compile-fail/bad-expr-lhs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-    1 = 2; //~ ERROR illegal left-hand side expression\n-    1 += 2; //~ ERROR illegal left-hand side expression\n-    (1, 2) = (3, 4); //~ ERROR illegal left-hand side expression\n+    1 = 2; //~ ERROR invalid left-hand side expression\n+    1 += 2; //~ ERROR invalid left-hand side expression\n+    (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n \n     let (a, b) = (1, 2);\n-    (a, b) = (3, 4); //~ ERROR illegal left-hand side expression\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n \n-    None = Some(3); //~ ERROR illegal left-hand side expression\n+    None = Some(3); //~ ERROR invalid left-hand side expression\n }"}, {"sha": "92cbbaa1cb442136c89fc8c2fac1d1c378568294", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -8,5 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot cast as `bool`, compare with zero instead\n-fn main() { let u = (5 as bool); }\n+fn main() {\n+    let u = (5 as bool);\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero instead\n+}"}, {"sha": "7fca4aece69b80871067b279f74d400e71c6d22b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -10,12 +10,16 @@\n \n fn illegal_cast<U:?Sized,V:?Sized>(u: *const U) -> *const V\n {\n-    u as *const V //~ ERROR vtable kinds\n+    u as *const V\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n fn illegal_cast_2<U:?Sized>(u: *const U) -> *const str\n {\n-    u as *const str //~ ERROR vtable kinds\n+    u as *const str\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n trait Foo { fn foo(&self) {} }\n@@ -41,32 +45,58 @@ fn main()\n     let _ = v as (u32,); //~ ERROR non-scalar\n     let _ = Some(&v) as *const u8; //~ ERROR non-scalar\n \n-    let _ = v as f32; //~ ERROR through a usize first\n-    let _ = main as f64; //~ ERROR through a usize first\n-    let _ = &v as usize; //~ ERROR through a raw pointer first\n-    let _ = f as *const u8; //~ ERROR through a usize first\n-    let _ = 3 as bool; //~ ERROR compare with zero\n-    let _ = E::A as bool; //~ ERROR compare with zero\n+    let _ = v as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = main as f64;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = &v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n+    let _ = f as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 3 as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n+    let _ = E::A as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n     let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n \n-    let _ = false as f32; //~ ERROR through an integer first\n-    let _ = E::A as f32; //~ ERROR through an integer first\n-    let _ = 'a' as f32; //~ ERROR through an integer first\n+    let _ = false as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = E::A as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = 'a' as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n \n-    let _ = false as *const u8; //~ ERROR through a usize first\n-    let _ = E::A as *const u8; //~ ERROR through a usize first\n-    let _ = 'a' as *const u8; //~ ERROR through a usize first\n+    let _ = false as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = E::A as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 'a' as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n \n-    let _ = 42usize as *const [u8]; //~ ERROR illegal cast\n-    let _ = v as *const [u8]; //~ ERROR illegal cast\n+    let _ = 42usize as *const [u8]; //~ ERROR casting\n+    let _ = v as *const [u8]; //~ ERROR casting\n     let _ = fat_v as *const Foo;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n-    let _ = foo as *const str; //~ ERROR illegal cast\n-    let _ = foo as *mut str; //~ ERROR illegal cast\n-    let _ = main as *mut str; //~ ERROR illegal cast\n-    let _ = &f as *mut f32; //~ ERROR illegal cast\n-    let _ = &f as *const f64; //~ ERROR illegal cast\n-    let _ = fat_v as usize; //~ ERROR through a raw pointer first\n+    let _ = foo as *const str; //~ ERROR casting\n+    let _ = foo as *mut str; //~ ERROR casting\n+    let _ = main as *mut str; //~ ERROR casting\n+    let _ = &f as *mut f32; //~ ERROR casting\n+    let _ = &f as *const f64; //~ ERROR casting\n+    let _ = fat_v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n@@ -76,6 +106,10 @@ fn main()\n     let _ = main.f as *const u32; //~ ERROR attempted access of field\n \n     let cf: *const Foo = &0;\n-    let _ = cf as *const [u8]; //~ ERROR vtable kinds\n-    let _ = cf as *const Bar; //~ ERROR vtable kinds\n+    let _ = cf as *const [u8];\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n+    let _ = cf as *const Bar;\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }"}, {"sha": "397804566b4aeef51bba9c20eb739d729678fe8d", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n static a: &'static str = \"foo\";\n-static b: *const u8 = a as *const u8; //~ ERROR illegal cast\n-static c: *const u8 = &a as *const u8; //~ ERROR illegal cast\n+static b: *const u8 = a as *const u8; //~ ERROR casting\n+static c: *const u8 = &a as *const u8; //~ ERROR casting\n \n fn main() {\n }"}, {"sha": "e6f473c8aacbb76e3965ca928de1f91f36e17f58", "filename": "src/test/compile-fail/enum-to-float-cast-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -21,8 +21,8 @@ enum F {\n }\n \n pub fn main() {\n-    let a = E::L0 as f32;  //~ ERROR illegal cast\n-    let c = F::H1 as f32;  //~ ERROR illegal cast\n+    let a = E::L0 as f32;  //~ ERROR casting\n+    let c = F::H1 as f32;  //~ ERROR casting\n     assert_eq!(a, -1.0f32);\n     assert_eq!(c, -1.0f32);\n }"}, {"sha": "b562ba0e41afd36bb75b2b14794c926c0f423997", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -20,8 +20,8 @@ enum F {\n     H1 = 0xFFFFFFFFFFFFFFFF\n }\n \n-static C0: f32 = E::L0 as f32; //~ ERROR illegal cast\n-static C1: f32 = F::H1 as f32; //~ ERROR illegal cast\n+static C0: f32 = E::L0 as f32; //~ ERROR casting\n+static C1: f32 = F::H1 as f32; //~ ERROR casting\n \n pub fn main() {\n     let b = C0;"}, {"sha": "3746f29ea55d62959acd6a3db5b88c9f4decf2df", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -17,14 +17,16 @@ fn main() {\n     let p = a as *const [i32];\n     let q = a.as_ptr();\n \n-    a as usize; //~ ERROR illegal cast\n+    a as usize; //~ ERROR casting\n     b as usize; //~ ERROR non-scalar cast\n-    p as usize; //~ ERROR illegal cast; cast through a raw pointer\n+    p as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP cast through a raw pointer\n \n     // #22955\n-    q as *const [i32]; //~ ERROR illegal cast\n+    q as *const [i32]; //~ ERROR casting\n \n     // #21397\n-    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR illegal cast\n-    let mut fail: *const str = 0 as *const str; //~ ERROR illegal cast\n+    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+    let mut fail: *const str = 0 as *const str; //~ ERROR casting\n }"}, {"sha": "7dbf75feda054df0431062e7da43ee49ff609017", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// error-pattern: illegal recursive enum type; wrap the inner value in a box\n+// error-pattern: invalid recursive enum type\n \n enum mlist { cons(isize, mlist), nil, }\n "}, {"sha": "311280bd497605f429b179754bc9b60586e7338d", "filename": "src/test/compile-fail/issue-13407.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -14,6 +14,6 @@ mod A {\n \n fn main() {\n     A::C = 1;\n-    //~^ ERROR: illegal left-hand side expression\n+    //~^ ERROR: invalid left-hand side expression\n     //~| ERROR: mismatched types\n }"}, {"sha": "74f0833e8d11c8d4f3cf51584b3dcb7d7cde1b2a", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -15,8 +15,8 @@ struct X {\n \n fn main() {\n     let x = X { a: [0] };\n-    let _f = &x.a as *mut u8; //~ ERROR illegal cast\n+    let _f = &x.a as *mut u8; //~ ERROR casting\n \n     let local: [u8; 1] = [0];\n-    let _v = &local as *mut u8; //~ ERROR illegal cast\n+    let _v = &local as *mut u8; //~ ERROR casting\n }"}, {"sha": "bd3f2835058700942b137a968c78ea7d1945cce0", "filename": "src/test/compile-fail/issue-17431-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo { foo: Option<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "4e1c0d6571d168567fddf88b66746bef322ddd63", "filename": "src/test/compile-fail/issue-17431-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct Baz { q: Option<Foo> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n struct Foo { q: Option<Baz> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "07c5f106456d121f781b3e7f540966ca286cb281", "filename": "src/test/compile-fail/issue-17431-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n struct Foo { foo: Mutex<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "74952d9ca2b38f39ab5c4afed213e080fc647106", "filename": "src/test/compile-fail/issue-17431-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,7 +11,7 @@\n use std::marker;\n \n struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl<T> Foo<T> { fn bar(&self) {} }\n "}, {"sha": "157b5ed434e9f23dad91c26f3959228bdbea3bc4", "filename": "src/test/compile-fail/issue-17431-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n struct Foo { foo: Bar<Foo> }\n struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn foo(&self) {} }\n "}, {"sha": "b2037378d3787532c7065ac5673c021b8e4ee4d4", "filename": "src/test/compile-fail/issue-17431-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n enum Foo { X(Mutex<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(self) {} }\n "}, {"sha": "9ad81e030aaf0eab8fe16065481a0fb36cb3f7b7", "filename": "src/test/compile-fail/issue-17431-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Foo { Voo(Option<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "c1d5827eb90ce005269ca114376bd72e1c12752c", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -14,5 +14,6 @@ enum Test {\n \n fn main() {\n     let _x = Test::Foo as *const isize;\n-    //~^ ERROR illegal cast; cast through a usize first: `Test` as `*const isize`\n+    //~^ ERROR casting `Test` as `*const isize` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "741707a47b6078dccec75bd3a191480fa328d7e1", "filename": "src/test/compile-fail/issue-21554.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,5 +11,7 @@\n struct Inches(i32);\n \n fn main() {\n-    Inches as f32; //~ ERROR illegal cast; cast through a usize first\n+    Inches as f32;\n+    //~^ ERROR casting\n+    //~^^ cast through a usize first\n }"}, {"sha": "37daf76c0b953c8534ab59b784a8971227e1c016", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -16,7 +16,7 @@ mod pingpong {\n     use send_packet;\n     pub type ping = send_packet<pong>;\n     pub struct pong(send_packet<ping>);\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n }\n \n fn main() {}"}, {"sha": "eb6842083263594a8561127d689079d957419cb6", "filename": "src/test/compile-fail/issue-3008-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -10,7 +10,7 @@\n \n enum foo { foo_(bar) }\n enum bar { bar_none, bar_some(bar) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n fn main() {\n }"}, {"sha": "f934e0771c2ab39c998829b7cc50be27e20a3087", "filename": "src/test/compile-fail/issue-3008-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -12,7 +12,7 @@\n \n enum foo { foo_(bar) }\n struct bar { x: bar }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n fn main() {\n }"}, {"sha": "f8756b83f23a642d52e82394a32a5ec5acac48f3", "filename": "src/test/compile-fail/issue-3008-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n enum E1 { V1(E2<E1>), }\n enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl E1 { fn foo(&self) {} }\n "}, {"sha": "66d8fb40cd120c94adf1eb04944d2ebb58175542", "filename": "src/test/compile-fail/issue-3779.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct S {\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n     element: Option<S>\n }\n "}, {"sha": "9a71dc980149c18e9458229affda4fcd44e8b687", "filename": "src/test/compile-fail/old-suffixes-are-really-forbidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let a = 1_is; //~ ERROR illegal suffix\n-    let b = 2_us; //~ ERROR illegal suffix\n+    let a = 1_is; //~ ERROR invalid suffix\n+    let b = 2_us; //~ ERROR invalid suffix\n }"}, {"sha": "33dcbdf74d2269fa63740a14d6229ae5fb7fbab6", "filename": "src/test/compile-fail/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: illegal recursive enum type\n+// error-pattern: invalid recursive enum type\n \n enum list<T> { cons(T, list<T>), nil }\n "}, {"sha": "69d63f3820c6c257a38da6a19e72fb4566e32e00", "filename": "src/test/compile-fail/regions-name-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `'static`\n+struct Foo<'static> { //~ ERROR invalid lifetime parameter name: `'static`\n     x: &'static isize\n }\n "}, {"sha": "3b08d900733c5e219ac4e3d038d25bd19b032270", "filename": "src/test/compile-fail/type-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal recursive struct type\n+// error-pattern:invalid recursive struct type\n struct t1 {\n     foo: isize,\n     foolish: t1"}, {"sha": "2277b1bad776dfb751a3e07fcda35059d452d01c", "filename": "src/test/compile-fail/typeck-cast-pointer-to-float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,5 +11,6 @@\n fn main() {\n     let x : i16 = 22;\n     ((&x) as *const i16) as f32;\n-    //~^ ERROR illegal cast; cast through a usize first: `*const i16` as `f32`\n+    //~^ ERROR casting `*const i16` as `f32` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "8b63dd51729b882ddaacece7df5d08d1252e6c83", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal cast\n+// error-pattern:casting\n \n #![feature(libc)]\n "}, {"sha": "26c59c440d47bdd432662010912f401aeb4352e1", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let mut x1 = X { y: [0, 0] };\n \n     // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR illegal cast\n+    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR casting\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}, {"sha": "a2ee2f6e88ca646f54f024f07bf6c24a8b6179b1", "filename": "src/test/parse-fail/bad-lit-suffixes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -12,28 +12,28 @@\n \n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n {}\n \n fn main() {\n-    \"\"suffix; //~ ERROR str literal with a suffix is illegal\n-    b\"\"suffix; //~ ERROR binary str literal with a suffix is illegal\n-    r#\"\"#suffix; //~ ERROR str literal with a suffix is illegal\n-    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is illegal\n-    'a'suffix; //~ ERROR char literal with a suffix is illegal\n-    b'a'suffix; //~ ERROR byte literal with a suffix is illegal\n+    \"\"suffix; //~ ERROR str literal with a suffix is invalid\n+    b\"\"suffix; //~ ERROR binary str literal with a suffix is invalid\n+    r#\"\"#suffix; //~ ERROR str literal with a suffix is invalid\n+    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is invalid\n+    'a'suffix; //~ ERROR char literal with a suffix is invalid\n+    b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n \n-    1234u1024; //~ ERROR illegal width `1024` for integer literal\n-    1234i1024; //~ ERROR illegal width `1024` for integer literal\n-    1234f1024; //~ ERROR illegal width `1024` for float literal\n-    1234.5f1024; //~ ERROR illegal width `1024` for float literal\n+    1234u1024; //~ ERROR invalid width `1024` for integer literal\n+    1234i1024; //~ ERROR invalid width `1024` for integer literal\n+    1234f1024; //~ ERROR invalid width `1024` for float literal\n+    1234.5f1024; //~ ERROR invalid width `1024` for float literal\n \n-    1234suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    0b101suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    1.0suffix; //~ ERROR illegal suffix `suffix` for float literal\n-    1.0e10suffix; //~ ERROR illegal suffix `suffix` for float literal\n+    1234suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    0b101suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    1.0suffix; //~ ERROR invalid suffix `suffix` for float literal\n+    1.0e10suffix; //~ ERROR invalid suffix `suffix` for float literal\n }"}, {"sha": "3321f2450c1885b6016eb7be3b1f479ef7c93f3e", "filename": "src/test/parse-fail/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -17,7 +17,7 @@ static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b'\\f';  //~ ERROR unknown byte escape\n-    b'\\x0Z';  //~ ERROR illegal character in numeric character escape: Z\n+    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: Z\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n     b'\u00e9';  //~ ERROR byte constant must be ASCII"}, {"sha": "22f123416f26e75d168e2de52b3fa0b3ff626dee", "filename": "src/test/parse-fail/byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -17,7 +17,7 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n-    b\"\\x0Z\";  //~ ERROR illegal character in numeric character escape: Z\n+    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: Z\n     b\"\u00e9\";  //~ ERROR byte constant must be ASCII\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "d2f78ef897b353da482e94178131040c5b77aaca", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -23,25 +23,25 @@ fn main() {\n     //~^ ERROR numeric character escape is too short\n \n     let _ = b'\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = '\\x5';\n     //~^ ERROR numeric character escape is too short\n \n     let _ = '\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = b\"\\u{a4a4} \\xf \\u\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR incorrect unicode escape sequence\n     //~^^^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = \"\\u{ffffff} \\xf \\u\";\n-    //~^ ERROR illegal unicode character escape\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^ ERROR invalid unicode character escape\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n     //~^^^^ ERROR incorrect unicode escape sequence\n }"}, {"sha": "e152a369290b71f6861f993f9f7ca07596c16c77", "filename": "src/test/parse-fail/issue-8537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-8537.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z parse-only\n \n pub extern\n-  \"invalid-ab_isize\" //~ ERROR illegal ABI\n+  \"invalid-ab_isize\" //~ ERROR invalid ABI\n fn foo() {}\n \n fn main() {}"}, {"sha": "d12bb63111b9efb287db4d87c045e830303d802b", "filename": "src/test/parse-fail/new-unicode-escapes-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n pub fn main() {\n-    let s = \"\\u{d805}\"; //~ ERROR illegal unicode character escape\n+    let s = \"\\u{d805}\"; //~ ERROR invalid unicode character escape\n }"}, {"sha": "fe125da1755bd6c52c4f0bd4ddf7a8977568671f", "filename": "src/test/parse-fail/new-unicode-escapes-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let s = \"\\u{lol}\";\n-     //~^ ERROR illegal character in unicode escape: l\n-     //~^^ ERROR illegal character in unicode escape: o\n-     //~^^^ ERROR illegal character in unicode escape: l\n+     //~^ ERROR invalid character in unicode escape: l\n+     //~^^ ERROR invalid character in unicode escape: o\n+     //~^^^ ERROR invalid character in unicode escape: l\n }"}, {"sha": "3fc5f8aae1876a80394db694213dbaea0e52c4f9", "filename": "src/test/parse-fail/raw-str-delim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b886f8c4f4b8de0b1f670f45a780e5679620b/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs?ref=033b886f8c4f4b8de0b1f670f45a780e5679620b", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n static s: &'static str =\n-    r#x\"#\"x# //~ ERROR only `#` is allowed in raw string delimitation; found illegal character\n+    r#x\"#\"x# //~ ERROR found invalid character; only `#` is allowed in raw string delimitation\n ;"}]}