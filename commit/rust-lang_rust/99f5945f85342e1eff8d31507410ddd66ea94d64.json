{"sha": "99f5945f85342e1eff8d31507410ddd66ea94d64", "node_id": "C_kwDOAAsO6NoAKDk5ZjU5NDVmODUzNDJlMWVmZjhkMzE1MDc0MTBkZGQ2NmVhOTRkNjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-28T20:52:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-04T21:06:12Z"}, "message": "Overhaul `MacArgs::Eq`.\n\nThe value in `MacArgs::Eq` is currently represented as a `Token`.\nBecause of `TokenKind::Interpolated`, `Token` can be either a token or\nan arbitrary AST fragment. In practice, a `MacArgs::Eq` starts out as a\nliteral or macro call AST fragment, and then is later lowered to a\nliteral token. But this is very non-obvious. `Token` is a much more\ngeneral type than what is needed.\n\nThis commit restricts things, by introducing a new type `MacArgsEqKind`\nthat is either an AST expression (pre-lowering) or an AST literal\n(post-lowering). The downside is that the code is a bit more verbose in\na few places. The benefit is that makes it much clearer what the\npossibilities are (though also shorter in some other places). Also, it\nremoves one use of `TokenKind::Interpolated`, taking us a step closer to\nremoving that variant, which will let us make `Token` impl `Copy` and\nremove many \"handle Interpolated\" code paths in the parser.\n\nThings to note:\n- Error messages have improved. Messages like this:\n  ```\n  unexpected token: `\"bug\" + \"found\"`\n  ```\n  now say \"unexpected expression\", which makes more sense. Although\n  arbitrary expressions can exist within tokens thanks to\n  `TokenKind::Interpolated`, that's not obvious to anyone who doesn't\n  know compiler internals.\n- In `parse_mac_args_common`, we no longer need to collect tokens for\n  the value expression.", "tree": {"sha": "6594fd89e3820be4bfa2b6d99ec0447c4fc1c1ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6594fd89e3820be4bfa2b6d99ec0447c4fc1c1ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f5945f85342e1eff8d31507410ddd66ea94d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f5945f85342e1eff8d31507410ddd66ea94d64", "html_url": "https://github.com/rust-lang/rust/commit/99f5945f85342e1eff8d31507410ddd66ea94d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f5945f85342e1eff8d31507410ddd66ea94d64/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5f67f9e8a560c66d1c4afea1750d21f1d093e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5f67f9e8a560c66d1c4afea1750d21f1d093e7", "html_url": "https://github.com/rust-lang/rust/commit/ae5f67f9e8a560c66d1c4afea1750d21f1d093e7"}], "stats": {"total": 262, "additions": 174, "deletions": 88}, "files": [{"sha": "bea0482bf7315002f5a812cc79037a2727cbbce5", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -23,7 +23,7 @@ pub use GenericArgs::*;\n pub use UnsafeSource::*;\n \n use crate::ptr::P;\n-use crate::token::{self, CommentKind, Delimiter, Token};\n+use crate::token::{self, CommentKind, Delimiter, Token, TokenKind};\n use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream, TokenTree};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -1526,7 +1526,7 @@ impl MacCall {\n }\n \n /// Arguments passed to an attribute or a function-like macro.\n-#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+#[derive(Clone, Encodable, Decodable, Debug)]\n pub enum MacArgs {\n     /// No arguments - `#[attr]`.\n     Empty,\n@@ -1536,11 +1536,20 @@ pub enum MacArgs {\n     Eq(\n         /// Span of the `=` token.\n         Span,\n-        /// \"value\" as a nonterminal token.\n-        Token,\n+        /// The \"value\".\n+        MacArgsEq,\n     ),\n }\n \n+// The RHS of a `MacArgs::Eq` starts out as an expression. Once macro expansion\n+// is completed, all cases end up either as a literal, which is the form used\n+// after lowering to HIR, or as an error.\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub enum MacArgsEq {\n+    Ast(P<Expr>),\n+    Hir(Lit),\n+}\n+\n impl MacArgs {\n     pub fn delim(&self) -> Option<Delimiter> {\n         match self {\n@@ -1553,7 +1562,10 @@ impl MacArgs {\n         match self {\n             MacArgs::Empty => None,\n             MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),\n-            MacArgs::Eq(eq_span, token) => Some(eq_span.to(token.span)),\n+            MacArgs::Eq(eq_span, MacArgsEq::Ast(expr)) => Some(eq_span.to(expr.span)),\n+            MacArgs::Eq(_, MacArgsEq::Hir(lit)) => {\n+                unreachable!(\"in literal form when getting span: {:?}\", lit);\n+            }\n         }\n     }\n \n@@ -1563,7 +1575,23 @@ impl MacArgs {\n         match self {\n             MacArgs::Empty => TokenStream::default(),\n             MacArgs::Delimited(.., tokens) => tokens.clone(),\n-            MacArgs::Eq(.., token) => TokenTree::Token(token.clone()).into(),\n+            MacArgs::Eq(_, MacArgsEq::Ast(expr)) => {\n+                // Currently only literals are allowed here. If more complex expression kinds are\n+                // allowed in the future, then `nt_to_tokenstream` should be used to extract the\n+                // token stream. This will require some cleverness, perhaps with a function\n+                // pointer, because `nt_to_tokenstream` is not directly usable from this crate.\n+                // It will also require changing the `parse_expr` call in `parse_mac_args_common`\n+                // to `parse_expr_force_collect`.\n+                if let ExprKind::Lit(lit) = &expr.kind {\n+                    let token = Token::new(TokenKind::Literal(lit.token), lit.span);\n+                    TokenTree::Token(token).into()\n+                } else {\n+                    unreachable!(\"couldn't extract literal when getting inner tokens: {:?}\", expr)\n+                }\n+            }\n+            MacArgs::Eq(_, MacArgsEq::Hir(lit)) => {\n+                unreachable!(\"in literal form when getting inner tokens: {:?}\", lit)\n+            }\n         }\n     }\n \n@@ -1574,6 +1602,30 @@ impl MacArgs {\n     }\n }\n \n+impl<CTX> HashStable<CTX> for MacArgs\n+where\n+    CTX: crate::HashStableContext,\n+{\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        mem::discriminant(self).hash_stable(ctx, hasher);\n+        match self {\n+            MacArgs::Empty => {}\n+            MacArgs::Delimited(dspan, delim, tokens) => {\n+                dspan.hash_stable(ctx, hasher);\n+                delim.hash_stable(ctx, hasher);\n+                tokens.hash_stable(ctx, hasher);\n+            }\n+            MacArgs::Eq(_eq_span, MacArgsEq::Ast(expr)) => {\n+                unreachable!(\"hash_stable {:?}\", expr);\n+            }\n+            MacArgs::Eq(eq_span, MacArgsEq::Hir(lit)) => {\n+                eq_span.hash_stable(ctx, hasher);\n+                lit.hash_stable(ctx, hasher);\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum MacDelimiter {\n     Parenthesis,"}, {"sha": "84654a9f737811f52ddb3a0b4e596cca91f11b4b", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -3,14 +3,16 @@\n use crate::ast;\n use crate::ast::{AttrId, AttrItem, AttrKind, AttrStyle, Attribute};\n use crate::ast::{Lit, LitKind};\n-use crate::ast::{MacArgs, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n+use crate::ast::{MacArgs, MacArgsEq, MacDelimiter, MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Path, PathSegment};\n+use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter, Token};\n use crate::tokenstream::{AttrAnnotatedTokenStream, AttrAnnotatedTokenTree};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree, TreeAndSpacing};\n use crate::tokenstream::{LazyTokenStream, TokenStream};\n use crate::util::comments;\n \n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -475,7 +477,16 @@ impl MetaItemKind {\n     pub fn mac_args(&self, span: Span) -> MacArgs {\n         match self {\n             MetaItemKind::Word => MacArgs::Empty,\n-            MetaItemKind::NameValue(lit) => MacArgs::Eq(span, lit.to_token()),\n+            MetaItemKind::NameValue(lit) => {\n+                let expr = P(ast::Expr {\n+                    id: ast::DUMMY_NODE_ID,\n+                    kind: ast::ExprKind::Lit(lit.clone()),\n+                    span: lit.span,\n+                    attrs: ThinVec::new(),\n+                    tokens: None,\n+                });\n+                MacArgs::Eq(span, MacArgsEq::Ast(expr))\n+            }\n             MetaItemKind::List(list) => {\n                 let mut tts = Vec::new();\n                 for (i, item) in list.iter().enumerate() {\n@@ -552,12 +563,16 @@ impl MetaItemKind {\n \n     fn from_mac_args(args: &MacArgs) -> Option<MetaItemKind> {\n         match args {\n+            MacArgs::Empty => Some(MetaItemKind::Word),\n             MacArgs::Delimited(_, MacDelimiter::Parenthesis, tokens) => {\n                 MetaItemKind::list_from_tokens(tokens.clone())\n             }\n             MacArgs::Delimited(..) => None,\n-            MacArgs::Eq(_, token) => Lit::from_token(token).ok().map(MetaItemKind::NameValue),\n-            MacArgs::Empty => Some(MetaItemKind::Word),\n+            MacArgs::Eq(_, MacArgsEq::Ast(expr)) => match &expr.kind {\n+                ast::ExprKind::Lit(lit) => Some(MetaItemKind::NameValue(lit.clone())),\n+                _ => None,\n+            },\n+            MacArgs::Eq(_, MacArgsEq::Hir(lit)) => Some(MetaItemKind::NameValue(lit.clone())),\n         }\n     }\n "}, {"sha": "333ffce774dc590585a23f8e0ae0633f89ab309c", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -370,17 +370,12 @@ pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n             visit_delim_span(dspan, vis);\n             visit_tts(tokens, vis);\n         }\n-        MacArgs::Eq(eq_span, token) => {\n+        MacArgs::Eq(eq_span, MacArgsEq::Ast(expr)) => {\n             vis.visit_span(eq_span);\n-            // The value in `#[key = VALUE]` must be visited as an expression for backward\n-            // compatibility, so that macros can be expanded in that position.\n-            match &mut token.kind {\n-                token::Interpolated(nt) => match Lrc::make_mut(nt) {\n-                    token::NtExpr(expr) => vis.visit_expr(expr),\n-                    t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                },\n-                t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-            }\n+            vis.visit_expr(expr);\n+        }\n+        MacArgs::Eq(_, MacArgsEq::Hir(lit)) => {\n+            unreachable!(\"in literal form when visiting mac args eq: {:?}\", lit)\n         }\n     }\n }"}, {"sha": "3a2d957194caf83cf7290f836c17993fa476c3a1", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -14,7 +14,6 @@\n //! those that are created by the expansion of a macro.\n \n use crate::ast::*;\n-use crate::token;\n \n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -937,14 +936,9 @@ pub fn walk_mac_args<'a, V: Visitor<'a>>(visitor: &mut V, args: &'a MacArgs) {\n     match args {\n         MacArgs::Empty => {}\n         MacArgs::Delimited(_dspan, _delim, _tokens) => {}\n-        // The value in `#[key = VALUE]` must be visited as an expression for backward\n-        // compatibility, so that macros can be expanded in that position.\n-        MacArgs::Eq(_eq_span, token) => match &token.kind {\n-            token::Interpolated(nt) => match &**nt {\n-                token::NtExpr(expr) => visitor.visit_expr(expr),\n-                t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-            },\n-            t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-        },\n+        MacArgs::Eq(_eq_span, MacArgsEq::Ast(expr)) => visitor.visit_expr(expr),\n+        MacArgs::Eq(_, MacArgsEq::Hir(lit)) => {\n+            unreachable!(\"in literal form when walking mac args eq: {:?}\", lit)\n+        }\n     }\n }"}, {"sha": "d6bbd23cdce7c296274909ac52aa92cfacada699", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -38,7 +38,6 @@\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n-use rustc_ast::token::{self, Token, TokenKind};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream};\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -874,23 +873,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )\n             }\n             // This is an inert key-value attribute - it will never be visible to macros\n-            // after it gets lowered to HIR. Therefore, we can synthesize tokens with fake\n-            // spans to handle nonterminals in `#[doc]` (e.g. `#[doc = $e]`).\n-            MacArgs::Eq(eq_span, ref token) => {\n-                // In valid code the value is always representable as a single literal token.\n-                // Otherwise, a dummy token suffices because the error is handled elsewhere.\n-                let token = if let token::Interpolated(nt) = &token.kind\n-                    && let token::NtExpr(expr) = &**nt\n-                {\n-                    if let ExprKind::Lit(Lit { token, span, .. }) = expr.kind {\n-                        Token::new(TokenKind::Literal(token), span)\n-                    } else {\n-                        Token::dummy()\n-                    }\n+            // after it gets lowered to HIR. Therefore, we can extract literals to handle\n+            // nonterminals in `#[doc]` (e.g. `#[doc = $e]`).\n+            MacArgs::Eq(eq_span, MacArgsEq::Ast(ref expr)) => {\n+                // In valid code the value always ends up as a single literal. Otherwise, a dummy\n+                // literal suffices because the error is handled elsewhere.\n+                let lit = if let ExprKind::Lit(lit) = &expr.kind {\n+                    lit.clone()\n                 } else {\n-                    unreachable!()\n+                    Lit {\n+                        token: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n+                        kind: LitKind::Err(kw::Empty),\n+                        span: DUMMY_SP,\n+                    }\n                 };\n-                MacArgs::Eq(eq_span, token)\n+                MacArgs::Eq(eq_span, MacArgsEq::Hir(lit))\n+            }\n+            MacArgs::Eq(_, MacArgsEq::Hir(ref lit)) => {\n+                unreachable!(\"in literal form when lowering mac args eq: {:?}\", lit)\n             }\n         }\n     }"}, {"sha": "e79f4f0a0950d858fa9a6e2c7cce78b883f3b0ca", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::util::comments::{gather_comments, Comment, CommentStyle};\n use rustc_ast::util::parser;\n use rustc_ast::{self as ast, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use rustc_ast::{attr, Term};\n-use rustc_ast::{GenericArg, MacArgs};\n+use rustc_ast::{GenericArg, MacArgs, MacArgsEq};\n use rustc_ast::{GenericBound, SelfKind, TraitBoundModifier};\n use rustc_ast::{InlineAsmOperand, InlineAsmRegOrRegClass};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n@@ -472,11 +472,18 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             MacArgs::Empty => {\n                 self.print_path(&item.path, false, 0);\n             }\n-            MacArgs::Eq(_, token) => {\n+            MacArgs::Eq(_, MacArgsEq::Ast(expr)) => {\n                 self.print_path(&item.path, false, 0);\n                 self.space();\n                 self.word_space(\"=\");\n-                let token_str = self.token_to_string_ext(token, true);\n+                let token_str = self.expr_to_string(expr);\n+                self.word(token_str);\n+            }\n+            MacArgs::Eq(_, MacArgsEq::Hir(lit)) => {\n+                self.print_path(&item.path, false, 0);\n+                self.space();\n+                self.word_space(\"=\");\n+                let token_str = self.literal_to_string(lit);\n                 self.word(token_str);\n             }\n         }\n@@ -818,6 +825,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         Self::to_string(|s| s.print_expr(e))\n     }\n \n+    fn literal_to_string(&self, lit: &ast::Lit) -> String {\n+        Self::to_string(|s| s.print_literal(lit))\n+    }\n+\n     fn tt_to_string(&self, tt: &TokenTree) -> String {\n         Self::to_string(|s| s.print_tt(tt, false))\n     }"}, {"sha": "c4a26359f51db26204dd3bb8ece52bb17cf365df", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -26,11 +26,10 @@ use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::AttrId;\n use rustc_ast::DUMMY_NODE_ID;\n use rustc_ast::{self as ast, AnonConst, AstLike, AttrStyle, AttrVec, Const, CrateSugar, Extern};\n-use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit, Unsafe};\n-use rustc_ast::{Visibility, VisibilityKind};\n+use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacArgsEq, MacDelimiter, Mutability, StrLit};\n+use rustc_ast::{Unsafe, Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n use rustc_errors::{\n     struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError, MultiSpan,\n@@ -1157,13 +1156,7 @@ impl<'a> Parser<'a> {\n             } else if !delimited_only {\n                 if self.eat(&token::Eq) {\n                     let eq_span = self.prev_token.span;\n-\n-                    // Collect tokens because they are used during lowering to HIR.\n-                    let expr = self.parse_expr_force_collect()?;\n-                    let span = expr.span;\n-\n-                    let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n-                    MacArgs::Eq(eq_span, Token::new(token_kind, span))\n+                    MacArgs::Eq(eq_span, MacArgsEq::Ast(self.parse_expr_force_collect()?))\n                 } else {\n                     MacArgs::Empty\n                 }"}, {"sha": "47477898b240e1c2c6133f50bcf9cc3ee151545b", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -2,8 +2,9 @@\n \n use crate::parse_in;\n \n-use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n-use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n+use rustc_ast::tokenstream::DelimSpan;\n+use rustc_ast::{self as ast, Attribute, MacArgs, MacArgsEq, MacDelimiter, MetaItem, MetaItemKind};\n+use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::{AttributeTemplate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n@@ -42,16 +43,40 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n         path: item.path.clone(),\n         kind: match &item.args {\n             MacArgs::Empty => MetaItemKind::Word,\n-            MacArgs::Eq(_, t) => {\n-                let t = TokenTree::Token(t.clone()).into();\n-                let v = parse_in(sess, t, \"name value\", |p| p.parse_unsuffixed_lit())?;\n-                MetaItemKind::NameValue(v)\n-            }\n             MacArgs::Delimited(dspan, delim, t) => {\n                 check_meta_bad_delim(sess, *dspan, *delim, \"wrong meta list delimiters\");\n                 let nmis = parse_in(sess, t.clone(), \"meta list\", |p| p.parse_meta_seq_top())?;\n                 MetaItemKind::List(nmis)\n             }\n+            MacArgs::Eq(_, MacArgsEq::Ast(expr)) => {\n+                if let ast::ExprKind::Lit(lit) = &expr.kind {\n+                    if !lit.kind.is_unsuffixed() {\n+                        let mut err = sess.span_diagnostic.struct_span_err(\n+                            lit.span,\n+                            \"suffixed literals are not allowed in attributes\",\n+                        );\n+                        err.help(\n+                            \"instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), \\\n+                            use an unsuffixed version (`1`, `1.0`, etc.)\",\n+                        );\n+                        return Err(err);\n+                    } else {\n+                        MetaItemKind::NameValue(lit.clone())\n+                    }\n+                } else {\n+                    // The non-error case can happen with e.g. `#[foo = 1+1]`. The error case can\n+                    // happen with e.g. `#[foo = include_str!(\"non-existent-file.rs\")]`; in that\n+                    // case we delay the error because an earlier error will have already been\n+                    // reported.\n+                    let msg = format!(\"unexpected expression: `{}`\", pprust::expr_to_string(expr));\n+                    let mut err = sess.span_diagnostic.struct_span_err(expr.span, msg);\n+                    if let ast::ExprKind::Err = expr.kind {\n+                        err.downgrade_to_delayed_bug();\n+                    }\n+                    return Err(err);\n+                }\n+            }\n+            MacArgs::Eq(_, MacArgsEq::Hir(lit)) => MetaItemKind::NameValue(lit.clone()),\n         },\n     })\n }"}, {"sha": "6f6e9b38e94245869caa66026c3552fb2ae9a2b2", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"variant\":\"Ast\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "5637ce596b3144f9126130135f57ef1e9ba82f8c", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"variant\":\"Ast\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "1411f61744d251cea925618de715e2b2f053201b", "filename": "src/test/ui/attributes/issue-90873.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,9 +1,9 @@\n #![u=||{static d=||1;}]\n-//~^ unexpected token\n+//~^ unexpected expression\n //~| cannot find attribute `u` in this scope\n //~| missing type for `static` item\n \n #![a={impl std::ops::Neg for i8 {}}]\n-//~^ ERROR unexpected token\n+//~^ ERROR unexpected expression\n //~| ERROR cannot find attribute `a` in this scope\n //~| ERROR `main` function not found in crate `issue_90873`"}, {"sha": "0852bb7ca8b928db11114910212bd64357bbeeb8", "filename": "src/test/ui/attributes/issue-90873.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,4 +1,4 @@\n-error: unexpected token: `||\n+error: unexpected expression: `||\n            {\n                static d: _ = || 1;\n            }`\n@@ -7,7 +7,7 @@ error: unexpected token: `||\n LL | #![u=||{static d=||1;}]\n    |      ^^^^^^^^^^^^^^^^^\n \n-error: unexpected token: `{\n+error: unexpected expression: `{\n            impl std::ops::Neg for i8 {}\n        }`\n   --> $DIR/issue-90873.rs:6:6"}, {"sha": "c1d68d8cda9e78a3173368bc542bab362293598e", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -7,8 +7,8 @@ macro_rules! bar {\n \n // FIXME?: `bar` here expands before `stringify` has a chance to expand.\n // `#[rustc_dummy = ...]` is validated and dropped during expansion of `bar`,\n-// the \"unexpected token\" errors comes from the validation.\n-#[rustc_dummy = stringify!(b)] //~ ERROR unexpected token: `stringify!(b)`\n+// the \"unexpected expression\" errors comes from the validation.\n+#[rustc_dummy = stringify!(b)] //~ ERROR unexpected expression: `stringify!(b)`\n bar!();\n \n fn main() {}"}, {"sha": "64ab892d997275e81df716c5ae590a9e398e8e2a", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,4 +1,4 @@\n-error: unexpected token: `stringify!(b)`\n+error: unexpected expression: `stringify!(b)`\n   --> $DIR/key-value-expansion-on-mac.rs:11:17\n    |\n LL | #[rustc_dummy = stringify!(b)]"}, {"sha": "83d601e5e3a79ccf358f4d909c8934f3cf9a3a15", "filename": "src/test/ui/attributes/key-value-expansion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -18,13 +18,13 @@ macro_rules! bug {\n \n // Any expressions containing macro call `X` that's more complex than `X` itself.\n // Parentheses will work.\n-bug!((column!())); //~ ERROR unexpected token: `(7u32)`\n+bug!((column!())); //~ ERROR unexpected expression: `(7u32)`\n \n // Original test case.\n \n macro_rules! bug {\n     () => {\n-        bug!(\"bug\" + stringify!(found)); //~ ERROR unexpected token: `\"bug\" + \"found\"`\n+        bug!(\"bug\" + stringify!(found)); //~ ERROR unexpected expression: `\"bug\" + \"found\"`\n     };\n     ($test:expr) => {\n         #[doc = $test]\n@@ -46,7 +46,7 @@ macro_rules! doc_comment {\n macro_rules! some_macro {\n     ($t1: ty) => {\n         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}\n-        //~^ ERROR unexpected token: `{\n+        //~^ ERROR unexpected expression: `{\n     };\n }\n "}, {"sha": "1b776322aaa647c24a32645894483ac651ac2a93", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,10 +1,10 @@\n-error: unexpected token: `(7u32)`\n+error: unexpected expression: `(7u32)`\n   --> $DIR/key-value-expansion.rs:21:6\n    |\n LL | bug!((column!()));\n    |      ^^^^^^^^^^^\n \n-error: unexpected token: `\"bug\" + \"found\"`\n+error: unexpected expression: `\"bug\" + \"found\"`\n   --> $DIR/key-value-expansion.rs:27:14\n    |\n LL |         bug!(\"bug\" + stringify!(found));\n@@ -15,7 +15,7 @@ LL | bug!();\n    |\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: unexpected token: `{\n+error: unexpected expression: `{\n                let res =\n                    ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n                            &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));"}, {"sha": "e5bcecce6ee8fb9bbf93ce6d5b384b5c270e2c72", "filename": "src/test/ui/consts/issue-90878-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,4 +1,4 @@\n- #![l=|x|[b;x ]] //~ ERROR unexpected token: `|x| [b; x]`\n+ #![l=|x|[b;x ]] //~ ERROR unexpected expression: `|x| [b; x]`\n //~^ ERROR cannot find attribute `l` in this scope\n \n // notice the space at the start,"}, {"sha": "71b8d21fb4dc27886c97c6819386b1ca2ed25781", "filename": "src/test/ui/consts/issue-90878-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -1,4 +1,4 @@\n-error: unexpected token: `|x| [b; x]`\n+error: unexpected expression: `|x| [b; x]`\n   --> $DIR/issue-90878-2.rs:1:7\n    |\n LL |  #![l=|x|[b;x ]]"}, {"sha": "0d84e723fc3dd54add196f27cc24ae4988b65ed0", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -10,7 +10,7 @@ macro_rules! check {\n check!(\"0\"); // OK\n check!(0); // OK\n check!(0u8); //~ ERROR suffixed literals are not allowed in attributes\n-check!(-0); //~ ERROR unexpected token: `-0`\n-check!(0 + 0); //~ ERROR unexpected token: `0 + 0`\n+check!(-0); //~ ERROR unexpected expression: `-0`\n+check!(0 + 0); //~ ERROR unexpected expression: `0 + 0`\n \n fn main() {}"}, {"sha": "c24d9f15388fc983af4cd9b517f413541956af34", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -6,13 +6,13 @@ LL | check!(0u8);\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n-error: unexpected token: `-0`\n+error: unexpected expression: `-0`\n   --> $DIR/malformed-interpolated.rs:13:8\n    |\n LL | check!(-0);\n    |        ^^\n \n-error: unexpected token: `0 + 0`\n+error: unexpected expression: `0 + 0`\n   --> $DIR/malformed-interpolated.rs:14:8\n    |\n LL | check!(0 + 0);"}, {"sha": "7919800483f522ff5bdb1434a6584fe31686543f", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f5945f85342e1eff8d31507410ddd66ea94d64/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=99f5945f85342e1eff8d31507410ddd66ea94d64", "patch": "@@ -688,7 +688,8 @@ pub fn eq_mac_args(l: &MacArgs, r: &MacArgs) -> bool {\n     match (l, r) {\n         (Empty, Empty) => true,\n         (Delimited(_, ld, lts), Delimited(_, rd, rts)) => ld == rd && lts.eq_unspanned(rts),\n-        (Eq(_, lt), Eq(_, rt)) => lt.kind == rt.kind,\n+        (Eq(_, MacArgsEq::Ast(le)), Eq(_, MacArgsEq::Ast(re))) => eq_expr(le, re),\n+        (Eq(_, MacArgsEq::Hir(ll)), Eq(_, MacArgsEq::Hir(rl))) => ll.kind == rl.kind,\n         _ => false,\n     }\n }"}]}