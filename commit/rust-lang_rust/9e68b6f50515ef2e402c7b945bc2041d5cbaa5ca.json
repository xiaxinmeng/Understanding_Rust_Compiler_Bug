{"sha": "9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "node_id": "C_kwDOAAsO6NoAKDllNjhiNmY1MDUxNWVmMmU0MDJjN2I5NDViYzIwNDFkNWNiYWE1Y2E", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-16T00:43:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-17T03:32:45Z"}, "message": "Simplify some impl source candidates", "tree": {"sha": "5a599b04f05343bba9e374400c2386e7c3cff483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a599b04f05343bba9e374400c2386e7c3cff483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "html_url": "https://github.com/rust-lang/rust/commit/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1704481bfa782409e77307149c59c87356b5a262", "url": "https://api.github.com/repos/rust-lang/rust/commits/1704481bfa782409e77307149c59c87356b5a262", "html_url": "https://github.com/rust-lang/rust/commit/1704481bfa782409e77307149c59c87356b5a262"}], "stats": {"total": 99, "additions": 18, "deletions": 81}, "files": [{"sha": "a2d23425f3bc254e94ab84f6a4e781c1d64b0ea7", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -172,7 +172,7 @@ impl Qualif for NeedsNonConstDrop {\n \n         if !matches!(\n             impl_src,\n-            ImplSource::ConstDestruct(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n+            ImplSource::Builtin(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n         ) {\n             // If our const destruct candidate is not ConstDestruct or implied by the param env,\n             // then it's bad"}, {"sha": "adc63aa6addd1fc2294d63d0db5a1a1926b7d7d8", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -646,12 +646,6 @@ pub enum ImplSource<'tcx, N> {\n     /// ImplSource identifying a particular impl.\n     UserDefined(ImplSourceUserDefinedData<'tcx, N>),\n \n-    /// ImplSource for auto trait implementations.\n-    /// This carries the information and nested obligations with regards\n-    /// to an auto implementation for a trait `Trait`. The nested obligations\n-    /// ensure the trait implementation holds for all the constituent types.\n-    AutoImpl(ImplSourceAutoImplData<N>),\n-\n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n     /// obligations incurred from normalizing the where-clause (if\n@@ -683,57 +677,48 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a trait alias.\n     TraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n-\n-    /// ImplSource for a `const Drop` implementation.\n-    ConstDestruct(ImplSourceConstDestructData<N>),\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n             ImplSource::UserDefined(i) => i.nested,\n             ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n-            ImplSource::AutoImpl(d) => d.nested,\n             ImplSource::Closure(c) => c.nested,\n             ImplSource::Generator(c) => c.nested,\n             ImplSource::Future(c) => c.nested,\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n-            ImplSource::ConstDestruct(i) => i.nested,\n         }\n     }\n \n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match self {\n             ImplSource::UserDefined(i) => &i.nested,\n             ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n-            ImplSource::AutoImpl(d) => &d.nested,\n             ImplSource::Closure(c) => &c.nested,\n             ImplSource::Generator(c) => &c.nested,\n             ImplSource::Future(c) => &c.nested,\n             ImplSource::Object(d) => &d.nested,\n             ImplSource::FnPointer(d) => &d.nested,\n             ImplSource::TraitAlias(d) => &d.nested,\n             ImplSource::TraitUpcasting(d) => &d.nested,\n-            ImplSource::ConstDestruct(i) => &i.nested,\n         }\n     }\n \n     pub fn borrow_nested_obligations_mut(&mut self) -> &mut [N] {\n         match self {\n             ImplSource::UserDefined(i) => &mut i.nested,\n             ImplSource::Param(n, _) | ImplSource::Builtin(n) => n,\n-            ImplSource::AutoImpl(d) => &mut d.nested,\n             ImplSource::Closure(c) => &mut c.nested,\n             ImplSource::Generator(c) => &mut c.nested,\n             ImplSource::Future(c) => &mut c.nested,\n             ImplSource::Object(d) => &mut d.nested,\n             ImplSource::FnPointer(d) => &mut d.nested,\n             ImplSource::TraitAlias(d) => &mut d.nested,\n             ImplSource::TraitUpcasting(d) => &mut d.nested,\n-            ImplSource::ConstDestruct(i) => &mut i.nested,\n         }\n     }\n \n@@ -754,10 +739,6 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                 vtable_base: o.vtable_base,\n                 nested: o.nested.into_iter().map(f).collect(),\n             }),\n-            ImplSource::AutoImpl(d) => ImplSource::AutoImpl(ImplSourceAutoImplData {\n-                trait_def_id: d.trait_def_id,\n-                nested: d.nested.into_iter().map(f).collect(),\n-            }),\n             ImplSource::Closure(c) => ImplSource::Closure(ImplSourceClosureData {\n                 closure_def_id: c.closure_def_id,\n                 substs: c.substs,\n@@ -788,11 +769,6 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: d.nested.into_iter().map(f).collect(),\n                 })\n             }\n-            ImplSource::ConstDestruct(i) => {\n-                ImplSource::ConstDestruct(ImplSourceConstDestructData {\n-                    nested: i.nested.into_iter().map(f).collect(),\n-                })\n-            }\n         }\n     }\n }\n@@ -845,13 +821,6 @@ pub struct ImplSourceClosureData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n-#[derive(TypeFoldable, TypeVisitable)]\n-pub struct ImplSourceAutoImplData<N> {\n-    pub trait_def_id: DefId,\n-    pub nested: Vec<N>,\n-}\n-\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitUpcastingData<N> {\n@@ -886,12 +855,6 @@ pub struct ImplSourceFnPointerData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n-#[derive(TypeFoldable, TypeVisitable)]\n-pub struct ImplSourceConstDestructData<N> {\n-    pub nested: Vec<N>,\n-}\n-\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {"}, {"sha": "9cc732acefa06e373372b92c63c42b6ad53eb019", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -9,8 +9,6 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n         match *self {\n             super::ImplSource::UserDefined(ref v) => write!(f, \"{:?}\", v),\n \n-            super::ImplSource::AutoImpl(ref t) => write!(f, \"{:?}\", t),\n-\n             super::ImplSource::Closure(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::Generator(ref d) => write!(f, \"{:?}\", d),\n@@ -30,8 +28,6 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n-\n-            super::ImplSource::ConstDestruct(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -86,16 +82,6 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<N> {\n     }\n }\n \n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceAutoImplData<N> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"ImplSourceAutoImplData(trait_def_id={:?}, nested={:?})\",\n-            self.trait_def_id, self.nested\n-        )\n-    }\n-}\n-\n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceObjectData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n@@ -121,9 +107,3 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitAliasData<'tcx,\n         )\n     }\n }\n-\n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceConstDestructData<N> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"ImplSourceConstDestructData(nested={:?})\", self.nested)\n-    }\n-}"}, {"sha": "f82885252b73dd86b3d86ab9cab1b7a23e83c0f7", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -1929,9 +1929,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // why we special case object types.\n                 false\n             }\n-            super::ImplSource::AutoImpl(..)\n-            | super::ImplSource::TraitUpcasting(_)\n-            | super::ImplSource::ConstDestruct(_) => {\n+            | super::ImplSource::TraitUpcasting(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -2001,11 +1999,9 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n         super::ImplSource::Builtin(data) => confirm_builtin_candidate(selcx, obligation, data),\n         super::ImplSource::Object(_)\n-        | super::ImplSource::AutoImpl(..)\n         | super::ImplSource::Param(..)\n         | super::ImplSource::TraitUpcasting(_)\n-        | super::ImplSource::TraitAlias(..)\n-        | super::ImplSource::ConstDestruct(_) => {\n+        | super::ImplSource::TraitAlias(..) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "ea451a3736e7dea85fbe62ddc3cfc6cb74a62948", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -27,11 +27,11 @@ use crate::traits::vtable::{\n };\n use crate::traits::{\n     BuiltinDerivedObligation, ImplDerivedObligation, ImplDerivedObligationCause, ImplSource,\n-    ImplSourceAutoImplData, ImplSourceClosureData, ImplSourceConstDestructData,\n-    ImplSourceFnPointerData, ImplSourceFutureData, ImplSourceGeneratorData, ImplSourceObjectData,\n-    ImplSourceTraitAliasData, ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized,\n-    Obligation, ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection,\n-    SelectionError, TraitNotObjectSafe, TraitObligation, Unimplemented,\n+    ImplSourceClosureData, ImplSourceFnPointerData, ImplSourceFutureData, ImplSourceGeneratorData,\n+    ImplSourceObjectData, ImplSourceTraitAliasData, ImplSourceTraitUpcastingData,\n+    ImplSourceUserDefinedData, Normalized, Obligation, ObligationCause,\n+    OutputTypeParameterMismatch, PredicateObligation, Selection, SelectionError,\n+    TraitNotObjectSafe, TraitObligation, Unimplemented,\n };\n \n use super::BuiltinImplConditions;\n@@ -71,7 +71,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             AutoImplCandidate => {\n                 let data = self.confirm_auto_impl_candidate(obligation);\n-                ImplSource::AutoImpl(data)\n+                ImplSource::Builtin(data)\n             }\n \n             ProjectionCandidate(idx, constness) => {\n@@ -128,7 +128,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ConstDestructCandidate(def_id) => {\n                 let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n-                ImplSource::ConstDestruct(data)\n+                ImplSource::Builtin(data)\n             }\n         };\n \n@@ -379,7 +379,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_auto_impl_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-    ) -> ImplSourceAutoImplData<PredicateObligation<'tcx>> {\n+    ) -> Vec<PredicateObligation<'tcx>> {\n         debug!(?obligation, \"confirm_auto_impl_candidate\");\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.self_ty());\n@@ -393,7 +393,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         trait_def_id: DefId,\n         nested: ty::Binder<'tcx, Vec<Ty<'tcx>>>,\n-    ) -> ImplSourceAutoImplData<PredicateObligation<'tcx>> {\n+    ) -> Vec<PredicateObligation<'tcx>> {\n         debug!(?nested, \"vtable_auto_impl\");\n         ensure_sufficient_stack(|| {\n             let cause = obligation.derived_cause(BuiltinDerivedObligation);\n@@ -423,7 +423,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             debug!(?obligations, \"vtable_auto_impl\");\n \n-            ImplSourceAutoImplData { trait_def_id, nested: obligations }\n+            obligations\n         })\n     }\n \n@@ -1222,10 +1222,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         impl_def_id: Option<DefId>,\n-    ) -> Result<ImplSourceConstDestructData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+    ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         // `~const Destruct` in a non-const environment is always trivially true, since our type is `Drop`\n         if !obligation.is_const() {\n-            return Ok(ImplSourceConstDestructData { nested: vec![] });\n+            return Ok(vec![]);\n         }\n \n         let drop_trait = self.tcx().require_lang_item(LangItem::Drop, None);\n@@ -1379,6 +1379,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n \n-        Ok(ImplSourceConstDestructData { nested })\n+        Ok(nested)\n     }\n }"}, {"sha": "81ad883903f3d1eaf6538d47f5d5455cc5d59bd9", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=9e68b6f50515ef2e402c7b945bc2041d5cbaa5ca", "patch": "@@ -312,11 +312,9 @@ fn resolve_associated_item<'tcx>(\n                 None\n             }\n         }\n-        traits::ImplSource::AutoImpl(..)\n-        | traits::ImplSource::Param(..)\n+        traits::ImplSource::Param(..)\n         | traits::ImplSource::TraitAlias(..)\n-        | traits::ImplSource::TraitUpcasting(_)\n-        | traits::ImplSource::ConstDestruct(_) => None,\n+        | traits::ImplSource::TraitUpcasting(_) => None,\n     })\n }\n "}]}