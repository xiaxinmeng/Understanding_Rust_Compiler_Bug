{"sha": "4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMTRkOThjOWYwNWNlOWQ2NTVjMDk2NmE2M2FiNjE3YThlYTk5ZTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-28T22:09:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-28T22:09:27Z"}, "message": "Merge pull request #549 from mcarton/ifs\n\nRemove and lint about useless braces in `else { if .. }`", "tree": {"sha": "aa3c7956aada6b966704720709ad093b5da158d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3c7956aada6b966704720709ad093b5da158d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "html_url": "https://github.com/rust-lang/rust/commit/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783b342bc144bfd1c8f85c3ec6b37570a334a03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/783b342bc144bfd1c8f85c3ec6b37570a334a03a", "html_url": "https://github.com/rust-lang/rust/commit/783b342bc144bfd1c8f85c3ec6b37570a334a03a"}, {"sha": "c2444c604388f96a6949bb39bcf3730c6ef78c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2444c604388f96a6949bb39bcf3730c6ef78c0f", "html_url": "https://github.com/rust-lang/rust/commit/c2444c604388f96a6949bb39bcf3730c6ef78c0f"}], "stats": {"total": 173, "additions": 106, "deletions": 67}, "files": [{"sha": "fbd6f4ebfe6b480c3e45089f85bc411cb4c67be6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -24,7 +24,7 @@ name\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                               | warn    | using `.chars().next()` to check if a string starts with a char\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                             | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                         | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to `else if`\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                 | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                         | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_not_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_not_eq)                       | warn    | deriving `Hash` but implementing `PartialEq` explicitly"}, {"sha": "b0d3c3d3f78b90e7d3c685caac067a1bc3be60f0", "filename": "src/bit_mask.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -148,11 +148,10 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                                mask_value,\n                                                cmp_value));\n                         }\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n+\n                 }\n                 BiBitOr => {\n                     if mask_value | cmp_value != cmp_value {\n@@ -177,10 +176,8 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                   &format!(\"incompatible bit mask: `_ & {}` will always be lower than `{}`\",\n                                            mask_value,\n                                            cmp_value));\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n                 }\n                 BiBitOr => {\n@@ -209,10 +206,8 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n                                   &format!(\"incompatible bit mask: `_ & {}` will never be higher than `{}`\",\n                                            mask_value,\n                                            cmp_value));\n-                    } else {\n-                        if mask_value == 0 {\n-                            span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n-                        }\n+                    } else if mask_value == 0 {\n+                        span_lint(cx, BAD_BIT_MASK, *span, \"&-masking with zero\");\n                     }\n                 }\n                 BiBitOr => {"}, {"sha": "fb1d7f696d16f9a275eb5482bc407d77a0e2820e", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -16,9 +16,11 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n \n-use utils::{in_macro, span_help_and_lint, snippet, snippet_block};\n+use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n \n-/// **What it does:** This lint checks for nested `if`-statements which can be collapsed by `&&`-combining their conditions. It is `Warn` by default.\n+/// **What it does:** This lint checks for nested `if`-statements which can be collapsed by\n+/// `&&`-combining their conditions and for `else { if .. } expressions that can be collapsed to\n+/// `else if ..`. It is `Warn` by default.\n ///\n /// **Why is this bad?** Each `if`-statement adds one level of nesting, which makes code look more complex than it really is.\n ///\n@@ -29,7 +31,8 @@ declare_lint! {\n     pub COLLAPSIBLE_IF,\n     Warn,\n     \"two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` \\\n-     can be written as `if x && y { foo() }`\"\n+     can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to \\\n+     `else if`\"\n }\n \n #[derive(Copy,Clone)]\n@@ -50,20 +53,44 @@ impl LateLintPass for CollapsibleIf {\n }\n \n fn check_if(cx: &LateContext, e: &Expr) {\n-    if let ExprIf(ref check, ref then, None) = e.node {\n-        if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n-               single_stmt_of_block(then) {\n-            if e.span.expn_id != sp.expn_id {\n-                return;\n+    if let ExprIf(ref check, ref then, ref else_) = e.node {\n+        match *else_ {\n+            Some(ref else_) => {\n+                if_let_chain! {[\n+                    let ExprBlock(ref block) = else_.node,\n+                    block.stmts.is_empty(),\n+                    block.rules == BlockCheckMode::DefaultBlock,\n+                    let Some(ref else_) = block.expr,\n+                    let ExprIf(_, _, _) = else_.node\n+                ], {\n+                    span_lint_and_then(cx,\n+                                       COLLAPSIBLE_IF,\n+                                       block.span,\n+                                       \"this `else { if .. }` block can be collapsed\", |db| {\n+                        db.span_suggestion(block.span, \"try\",\n+                                           format!(\"else {}\",\n+                                                   snippet_block(cx, else_.span, \"..\")));\n+                    });\n+                }}\n+            }\n+            None => {\n+                if let Some(&Expr{ node: ExprIf(ref check_inner, ref content, None), span: sp, ..}) =\n+                       single_stmt_of_block(then) {\n+                    if e.span.expn_id != sp.expn_id {\n+                        return;\n+                    }\n+                    span_lint_and_then(cx,\n+                                       COLLAPSIBLE_IF,\n+                                       e.span,\n+                                       \"this if statement can be collapsed\", |db| {\n+                        db.span_suggestion(e.span, \"try\",\n+                                           format!(\"if {} && {} {}\",\n+                                                   check_to_string(cx, check),\n+                                                   check_to_string(cx, check_inner),\n+                                                   snippet_block(cx, content.span, \"..\")));\n+                    });\n+                }\n             }\n-            span_help_and_lint(cx,\n-                               COLLAPSIBLE_IF,\n-                               e.span,\n-                               \"this if statement can be collapsed\",\n-                               &format!(\"try\\nif {} && {} {}\",\n-                                        check_to_string(cx, check),\n-                                        check_to_string(cx, check_inner),\n-                                        snippet_block(cx, content.span, \"..\")));\n         }\n     }\n }\n@@ -90,16 +117,14 @@ fn single_stmt_of_block(block: &Block) -> Option<&Expr> {\n         } else {\n             None\n         }\n-    } else {\n-        if block.stmts.is_empty() {\n-            if let Some(ref p) = block.expr {\n-                Some(p)\n-            } else {\n-                None\n-            }\n+    } else if block.stmts.is_empty() {\n+        if let Some(ref p) = block.expr {\n+            Some(p)\n         } else {\n             None\n         }\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "31094e5b6c6f3fa426a84a45d1efbfcc53b035d1", "filename": "src/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -536,12 +536,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                                                    Plus\n                                                })\n                                     .and_then(|ty| l64.checked_add(r64).map(|v| ConstantInt(v, ty)))\n+                            } else if ln {\n+                                add_neg_int(r64, rty, l64, lty)\n                             } else {\n-                                if ln {\n-                                    add_neg_int(r64, rty, l64, lty)\n-                                } else {\n-                                    add_neg_int(l64, lty, r64, rty)\n-                                }\n+                                add_neg_int(l64, lty, r64, rty)\n                             }\n                         }\n                         // TODO: float (would need bignum library?)"}, {"sha": "e72f2392054e720b2af9b41bcae28f5787688d53", "filename": "src/minmax.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -59,12 +59,10 @@ fn min_max<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(MinMax, Constant, &'\n \n             if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"min\"]) {\n                 fetch_const(args, Min)\n+            } else if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"max\"]) {\n+                fetch_const(args, Max)\n             } else {\n-                if match_def_path(cx, def_id, &[\"core\", \"cmp\", \"max\"]) {\n-                    fetch_const(args, Max)\n-                } else {\n-                    None\n-                }\n+                None\n             }\n         } else {\n             None"}, {"sha": "5bd392abb3c4804806cc1532747744e68aad2a40", "filename": "src/shadow.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -204,29 +204,28 @@ fn lint_shadow<T>(cx: &LateContext, name: Name, span: Span, lspan: Span, init: &\n                                         snippet(cx, lspan, \"_\"),\n                                         snippet(cx, expr.span, \"..\")));\n             note_orig(cx, db, SHADOW_SAME, prev_span);\n+        } else if contains_self(name, expr) {\n+            let db = span_note_and_lint(cx,\n+                                        SHADOW_REUSE,\n+                                        lspan,\n+                                        &format!(\"{} is shadowed by {} which reuses the original value\",\n+                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, expr.span, \"..\")),\n+                                                 expr.span,\n+                                                 \"initialization happens here\");\n+            note_orig(cx, db, SHADOW_REUSE, prev_span);\n         } else {\n-            if contains_self(name, expr) {\n-                let db = span_note_and_lint(cx,\n-                                            SHADOW_REUSE,\n-                                            lspan,\n-                                            &format!(\"{} is shadowed by {} which reuses the original value\",\n-                                                     snippet(cx, lspan, \"_\"),\n-                                                     snippet(cx, expr.span, \"..\")),\n-                                            expr.span,\n-                                            \"initialization happens here\");\n-                note_orig(cx, db, SHADOW_REUSE, prev_span);\n-            } else {\n-                let db = span_note_and_lint(cx,\n-                                            SHADOW_UNRELATED,\n-                                            lspan,\n-                                            &format!(\"{} is shadowed by {}\",\n-                                                     snippet(cx, lspan, \"_\"),\n-                                                     snippet(cx, expr.span, \"..\")),\n-                                            expr.span,\n-                                            \"initialization happens here\");\n-                note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n-            }\n+            let db = span_note_and_lint(cx,\n+                                        SHADOW_UNRELATED,\n+                                        lspan,\n+                                        &format!(\"{} is shadowed by {}\",\n+                                                 snippet(cx, lspan, \"_\"),\n+                                                 snippet(cx, expr.span, \"..\")),\n+                                                 expr.span,\n+                                                 \"initialization happens here\");\n+            note_orig(cx, db, SHADOW_UNRELATED, prev_span);\n         }\n+\n     } else {\n         let db = span_lint(cx,\n                            SHADOW_UNRELATED,"}, {"sha": "85eac28dc3870ecb3425020cabe40744ad9444b4", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c14d98c9f05ce9d655c0966a63ab617a8ea99e6/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=4c14d98c9f05ce9d655c0966a63ab617a8ea99e6", "patch": "@@ -17,6 +17,30 @@ fn main() {\n         }\n     }\n \n+    // Collaspe `else { if .. }` to `else if ..`\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else { //~ERROR: this `else { if .. }`\n+             //~| HELP try\n+             //~| SUGGESTION else if y == \"world\"\n+        if y == \"world\" {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else { //~ERROR this `else { if .. }`\n+             //~| HELP try\n+             //~| SUGGESTION else if y == \"world\"\n+        if y == \"world\" {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n     // Works because any if with an else statement cannot be collapsed.\n     if x == \"hello\" {\n         if y == \"world\" {"}]}