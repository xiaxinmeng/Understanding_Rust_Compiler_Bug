{"sha": "e29ecb70af4551d1fb73d5cbee776613adfbf507", "node_id": "C_kwDOAAsO6NoAKGUyOWVjYjcwYWY0NTUxZDFmYjczZDVjYmVlNzc2NjEzYWRmYmY1MDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-20T05:58:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-20T05:58:58Z"}, "message": "Rollup merge of #103276 - compiler-errors:default-on-uninit-ice, r=TaKO8Ki\n\nErase regions before checking for `Default` in uninitialized binding error\n\nFixes #103250", "tree": {"sha": "38b08e3cacb7cc8d1472a9218d911f6f60cd690f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b08e3cacb7cc8d1472a9218d911f6f60cd690f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29ecb70af4551d1fb73d5cbee776613adfbf507", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUOOiCRBK7hj4Ov3rIwAABCIIAK79e6yOw2qTF4Z+dqX/9PL6\nBA2/haBlBdlimiex3xMZ7hwGTsgHmROc7ItTrwvP3tibC8tST2xXYi35mG0JxYWu\n+Ulk13e5Alu82oJUjD1L3cQqFqpqrPZDFSY0LemjkFShsCePzlQfXvIUcE0AHbjv\nrnsOj/1yH5Jxs4rkU4IblxcMs/y9ddc3EtewMuLzH6Rr5SuGOz5t54kjuU6VESdl\noxbOlL/E7maFfn3wnwbVz05VozqKakqcBBh+I0KFlbfDIZmuPLnMaxwOTlpOtxkV\n2/3IK2n5nI5Wtleoovieb/oWP4K6pM8DWduc1S6rrFfz47lcSlj2k1P80u2JEQo=\n=Tdwo\n-----END PGP SIGNATURE-----\n", "payload": "tree 38b08e3cacb7cc8d1472a9218d911f6f60cd690f\nparent 1f210238a0d53e3537b6a209daa2f5db7046329f\nparent c5c9f748296854c522395d917bbfc819f74f3a8a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666245538 +0200\ncommitter GitHub <noreply@github.com> 1666245538 +0200\n\nRollup merge of #103276 - compiler-errors:default-on-uninit-ice, r=TaKO8Ki\n\nErase regions before checking for `Default` in uninitialized binding error\n\nFixes #103250\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29ecb70af4551d1fb73d5cbee776613adfbf507", "html_url": "https://github.com/rust-lang/rust/commit/e29ecb70af4551d1fb73d5cbee776613adfbf507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29ecb70af4551d1fb73d5cbee776613adfbf507/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f210238a0d53e3537b6a209daa2f5db7046329f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f210238a0d53e3537b6a209daa2f5db7046329f", "html_url": "https://github.com/rust-lang/rust/commit/1f210238a0d53e3537b6a209daa2f5db7046329f"}, {"sha": "c5c9f748296854c522395d917bbfc819f74f3a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c9f748296854c522395d917bbfc819f74f3a8a", "html_url": "https://github.com/rust-lang/rust/commit/c5c9f748296854c522395d917bbfc819f74f3a8a"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "583bc2e281da4a507f1e06231c08da6bf3cb0ada", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e29ecb70af4551d1fb73d5cbee776613adfbf507/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ecb70af4551d1fb73d5cbee776613adfbf507/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e29ecb70af4551d1fb73d5cbee776613adfbf507", "patch": "@@ -492,10 +492,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let Some(default_trait) = tcx.get_diagnostic_item(sym::Default) else {\n                 return false;\n             };\n+            // Regions are already solved, so we must use a fresh InferCtxt,\n+            // but the type has region variables, so erase those.\n             tcx.infer_ctxt()\n                 .build()\n-                .type_implements_trait(default_trait, ty, ty::List::empty(), param_env)\n-                .may_apply()\n+                .type_implements_trait(\n+                    default_trait,\n+                    tcx.erase_regions(ty),\n+                    ty::List::empty(),\n+                    param_env,\n+                )\n+                .must_apply_modulo_regions()\n         };\n \n         let assign_value = match ty.kind() {"}, {"sha": "46565f61ca9a4b01de90b15c719af21dedbe22a8", "filename": "src/test/ui/borrowck/issue-103250.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e29ecb70af4551d1fb73d5cbee776613adfbf507/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ecb70af4551d1fb73d5cbee776613adfbf507/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.rs?ref=e29ecb70af4551d1fb73d5cbee776613adfbf507", "patch": "@@ -0,0 +1,37 @@\n+// edition:2021\n+\n+type TranslateFn = Box<dyn Fn(String, String) -> String>;\n+\n+pub struct DeviceCluster {\n+    devices: Vec<Device>,\n+}\n+\n+impl DeviceCluster {\n+    pub async fn do_something(&mut self) -> Result<String, Box<dyn std::error::Error>> {\n+        let mut last_error: Box<dyn std::error::Error>;\n+\n+        for device in &mut self.devices {\n+            match device.do_something().await {\n+                Ok(info) => {\n+                    return Ok(info);\n+                }\n+                Err(e) => {}\n+            }\n+        }\n+\n+        Err(last_error)\n+        //~^ ERROR used binding `last_error` isn't initialized\n+    }\n+}\n+\n+pub struct Device {\n+    translate_fn: Option<TranslateFn>,\n+}\n+\n+impl Device {\n+    pub async fn do_something(&mut self) -> Result<String, Box<dyn std::error::Error>> {\n+        Ok(String::from(\"\"))\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a237835222f55bf9cbc63a1a217cc67131cc0a3", "filename": "src/test/ui/borrowck/issue-103250.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e29ecb70af4551d1fb73d5cbee776613adfbf507/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e29ecb70af4551d1fb73d5cbee776613adfbf507/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103250.stderr?ref=e29ecb70af4551d1fb73d5cbee776613adfbf507", "patch": "@@ -0,0 +1,17 @@\n+error[E0381]: used binding `last_error` isn't initialized\n+  --> $DIR/issue-103250.rs:22:13\n+   |\n+LL |         let mut last_error: Box<dyn std::error::Error>;\n+   |             -------------- binding declared here but left uninitialized\n+...\n+LL |         Err(last_error)\n+   |             ^^^^^^^^^^ `last_error` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let mut last_error: Box<dyn std::error::Error> = todo!();\n+   |                                                        +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}]}