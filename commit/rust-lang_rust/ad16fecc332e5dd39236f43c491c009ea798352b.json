{"sha": "ad16fecc332e5dd39236f43c491c009ea798352b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTZmZWNjMzMyZTVkZDM5MjM2ZjQzYzQ5MWMwMDllYTc5ODM1MmI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-11T00:11:10Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-11T19:02:50Z"}, "message": "treemap: inline the TreeSet wrappers", "tree": {"sha": "a4d962f713e73883f9245b11b6b239ebb0923419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d962f713e73883f9245b11b6b239ebb0923419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad16fecc332e5dd39236f43c491c009ea798352b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad16fecc332e5dd39236f43c491c009ea798352b", "html_url": "https://github.com/rust-lang/rust/commit/ad16fecc332e5dd39236f43c491c009ea798352b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad16fecc332e5dd39236f43c491c009ea798352b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c88366f83893364533421b3b21306c246c17f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c88366f83893364533421b3b21306c246c17f3", "html_url": "https://github.com/rust-lang/rust/commit/a5c88366f83893364533421b3b21306c246c17f3"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9cef77cfa764a28b4d1fbef0855aeb75715f5111", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad16fecc332e5dd39236f43c491c009ea798352b/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad16fecc332e5dd39236f43c491c009ea798352b/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=ad16fecc332e5dd39236f43c491c009ea798352b", "patch": "@@ -77,21 +77,13 @@ pure fn lt<K: Ord + TotalOrd, V>(a: &TreeMap<K, V>,\n \n impl<K: Ord + TotalOrd, V> Ord for TreeMap<K, V> {\n     #[inline(always)]\n-    pure fn lt(&self, other: &TreeMap<K, V>) -> bool {\n-        lt(self, other)\n-    }\n+    pure fn lt(&self, other: &TreeMap<K, V>) -> bool { lt(self, other) }\n     #[inline(always)]\n-    pure fn le(&self, other: &TreeMap<K, V>) -> bool {\n-        !lt(other, self)\n-    }\n+    pure fn le(&self, other: &TreeMap<K, V>) -> bool { !lt(other, self) }\n     #[inline(always)]\n-    pure fn ge(&self, other: &TreeMap<K, V>) -> bool {\n-        !lt(self, other)\n-    }\n+    pure fn ge(&self, other: &TreeMap<K, V>) -> bool { !lt(self, other) }\n     #[inline(always)]\n-    pure fn gt(&self, other: &TreeMap<K, V>) -> bool {\n-        lt(other, self)\n-    }\n+    pure fn gt(&self, other: &TreeMap<K, V>) -> bool { lt(other, self) }\n }\n \n impl<'self, K: TotalOrd, V> BaseIter<(&'self K, &'self V)> for TreeMap<K, V> {\n@@ -244,19 +236,24 @@ pub struct TreeSet<T> {\n \n impl<T: TotalOrd> BaseIter<T> for TreeSet<T> {\n     /// Visit all values in order\n+    #[inline(always)]\n     pure fn each(&self, f: &fn(&T) -> bool) { self.map.each_key(f) }\n+    #[inline(always)]\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n impl<T: TotalOrd> ReverseIter<T> for TreeSet<T> {\n     /// Visit all values in reverse order\n+    #[inline(always)]\n     pure fn each_reverse(&self, f: &fn(&T) -> bool) {\n         self.map.each_key_reverse(f)\n     }\n }\n \n impl<T: Eq + TotalOrd> Eq for TreeSet<T> {\n+    #[inline(always)]\n     pure fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n+    #[inline(always)]\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n@@ -273,29 +270,35 @@ impl<T: Ord + TotalOrd> Ord for TreeSet<T> {\n \n impl<T: TotalOrd> Container for TreeSet<T> {\n     /// Return the number of elements in the set\n+    #[inline(always)]\n     pure fn len(&self) -> uint { self.map.len() }\n \n     /// Return true if the set contains no elements\n+    #[inline(always)]\n     pure fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n impl<T: TotalOrd> Mutable for TreeSet<T> {\n     /// Clear the set, removing all values.\n+    #[inline(always)]\n     fn clear(&mut self) { self.map.clear() }\n }\n \n impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     /// Return true if the set contains a value\n+    #[inline(always)]\n     pure fn contains(&self, value: &T) -> bool {\n         self.map.contains_key(value)\n     }\n \n     /// Add a value to the set. Return true if the value was not already\n     /// present in the set.\n+    #[inline(always)]\n     fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n \n     /// Remove a value from the set. Return true if the value was\n     /// present in the set.\n+    #[inline(always)]\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n \n     /// Return true if the set has no elements in common with `other`.\n@@ -320,6 +323,7 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     }\n \n     /// Return true if the set is a subset of another\n+    #[inline(always)]\n     pure fn is_subset(&self, other: &TreeSet<T>) -> bool {\n         other.is_superset(self)\n     }\n@@ -488,10 +492,12 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n \n pub impl <T: TotalOrd> TreeSet<T> {\n     /// Create an empty TreeSet\n+    #[inline(always)]\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n+    #[inline(always)]\n     pure fn iter(&self) -> TreeSetIterator/&self<T> {\n         TreeSetIterator{iter: self.map.iter()}\n     }\n@@ -504,11 +510,13 @@ pub struct TreeSetIterator<T> {\n \n /// Advance the iterator to the next node (in order). If this iterator is\n /// finished, does nothing.\n+#[inline(always)]\n pub fn set_next<T>(iter: &mut TreeSetIterator/&r<T>) -> Option<&r/T> {\n     do map_next(&mut iter.iter).map |&(value, _)| { value }\n }\n \n /// Advance the iterator through the set\n+#[inline(always)]\n pub fn set_advance<T>(iter: &mut TreeSetIterator/&r<T>,\n                       f: &fn(&r/T) -> bool) {\n     do map_advance(&mut iter.iter) |(k, _)| { f(k) }"}]}