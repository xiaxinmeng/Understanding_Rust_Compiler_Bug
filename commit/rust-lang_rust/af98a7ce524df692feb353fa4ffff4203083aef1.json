{"sha": "af98a7ce524df692feb353fa4ffff4203083aef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOThhN2NlNTI0ZGY2OTJmZWIzNTNmYTRmZmZmNDIwMzA4M2FlZjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-10T14:30:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-16T10:20:05Z"}, "message": "round 3", "tree": {"sha": "6f63979f0c4022adf6e07183fb4e72df3647b2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f63979f0c4022adf6e07183fb4e72df3647b2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af98a7ce524df692feb353fa4ffff4203083aef1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXYn1VAAoJEFbW7qD8Z6xGB8gQAJCsjyMQV2KSNq4m3d69zJfO\niMkNQh2aeDksrzLKoC07XooqZDJELK+FQUK9KiJmVjWg9lerwN9pmhq5WAWBC556\nh21ap+Z1BSKpQDO3dXKbz94T2uxDbmgPrf9J846j1bHEEcmDf74+NEGVyppdgAgv\nBKYmcpJWIlhFMEnJRaIMJEZD3e7RNas+l0Dmj/eHXamJeQC0qkA0zgZyC3S25hZZ\n0Zd9z1jvsFIiQtSfw0p4utyu8PuK/Dt5bYy+lgha3udcrtQ54SChIDqR6J3nrpGJ\nHqXob+6Uc28FrD5QKP1uSI+32d5bPfbQEd3Vpe8o9bKfl9mM7XrBXUtoPxkBo01A\nkJI8i3P2ebT5f6IQgqu+yR6WdYJxswZlpKH+aLOzzmV8XDPXvCMz64wCPJwWwJ7M\n8tlUeFMDKyRIMF1bpaWDhMsLIUzukAo/crQaHfwb0n8rs2PJdgTF5osayZ1yNmbO\nv4tkwiQ876lyeY/pn0VQPiqwdOOgBAy9t/9tbdAdvqDolFa3nKibxd08v7/D7ano\nsdptgFsc8EDAYR9dyaXtbJ2NiuB6oAzXOvqqX7fzR59AZIMhtv1svjSAmTBmr3bL\nQCBCGY+HACmNkTwb4wnfLKi8AGDstgXX/Rmee17/m5KFPnXfJwGUb7WbM+bl6BLA\n/in1zieyTh8FpbmM2dR6\n=HZrm\n-----END PGP SIGNATURE-----", "payload": "tree 6f63979f0c4022adf6e07183fb4e72df3647b2e0\nparent a97640117178f97180f3f8646a74cac8dee6c21a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465569039 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466072405 +0200\n\nround 3"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af98a7ce524df692feb353fa4ffff4203083aef1", "html_url": "https://github.com/rust-lang/rust/commit/af98a7ce524df692feb353fa4ffff4203083aef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af98a7ce524df692feb353fa4ffff4203083aef1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97640117178f97180f3f8646a74cac8dee6c21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97640117178f97180f3f8646a74cac8dee6c21a", "html_url": "https://github.com/rust-lang/rust/commit/a97640117178f97180f3f8646a74cac8dee6c21a"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "8905870f1d823aaf95a8158568b45ef39de82327", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/af98a7ce524df692feb353fa4ffff4203083aef1/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af98a7ce524df692feb353fa4ffff4203083aef1/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=af98a7ce524df692feb353fa4ffff4203083aef1", "patch": "@@ -135,20 +135,18 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if item.vis == Visibility::Public {\n-            if !in_macro(cx, item.span) {\n-                if let Some(mod_camel) = self.modules.last() {\n-                    // constants don't have surrounding modules\n-                    if !mod_camel.is_empty() {\n-                        let matching = partial_match(mod_camel, &item_camel);\n-                        let rmatching = partial_rmatch(mod_camel, &item_camel);\n-                        let nchars = mod_camel.chars().count();\n-                        if matching == nchars {\n-                            span_lint(cx, ENUM_VARIANT_NAMES, item.span, &format!(\"Item name ({}) starts with its containing module's name ({})\", item_camel, mod_camel));\n-                        }\n-                        if rmatching == nchars {\n-                            span_lint(cx, ENUM_VARIANT_NAMES, item.span, &format!(\"Item name ({}) ends with its containing module's name ({})\", item_camel, mod_camel));\n-                        }\n+        if item.vis == Visibility::Public && !in_macro(cx, item.span) {\n+            if let Some(mod_camel) = self.modules.last() {\n+                // constants don't have surrounding modules\n+                if !mod_camel.is_empty() {\n+                    let matching = partial_match(mod_camel, &item_camel);\n+                    let rmatching = partial_rmatch(mod_camel, &item_camel);\n+                    let nchars = mod_camel.chars().count();\n+                    if matching == nchars {\n+                        span_lint(cx, ENUM_VARIANT_NAMES, item.span, &format!(\"Item name ({}) starts with its containing module's name ({})\", item_camel, mod_camel));\n+                    }\n+                    if rmatching == nchars {\n+                        span_lint(cx, ENUM_VARIANT_NAMES, item.span, &format!(\"Item name ({}) ends with its containing module's name ({})\", item_camel, mod_camel));\n                     }\n                 }\n             }"}]}