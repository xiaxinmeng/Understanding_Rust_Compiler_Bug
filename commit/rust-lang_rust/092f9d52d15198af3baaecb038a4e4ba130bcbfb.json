{"sha": "092f9d52d15198af3baaecb038a4e4ba130bcbfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmY5ZDUyZDE1MTk4YWYzYmFhZWNiMDM4YTRlNGJhMTMwYmNiZmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-15T14:14:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-15T14:14:53Z"}, "message": "hackily fix calling function pointers through a Fn static dispatch", "tree": {"sha": "ebc4b979929c161d1058b95699b497854978ad56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc4b979929c161d1058b95699b497854978ad56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092f9d52d15198af3baaecb038a4e4ba130bcbfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX2qzdAAoJEFbW7qD8Z6xGWSYP/1thp/Ubs7z/BbXTw62mLcOQ\ngX7JlFRtaI5ypQN/niQ5n+ZigSywuJag1zZmAwff9/0ncG1qfm+t8/kwOw6k1mQp\naNRJBjk3ZZeody9t8zhCO9Qdz51CG7ljaLlqwBDiSYHK0Cwbc0VB7kbsnlH+6iV/\npJGP++/KjJqMutDhZybumtjFwyzVvB7hKMMZtI14iQPTyQnwJNMWdODhiqZX4G4A\nK850Ok5+JzomB/lhrUWyJ/oVrAKXJTcgOQmHfumd+aSTsiW2X1gb94kU6efTvbTS\nECN4coBETHb0vh0i3tCloS/FYKxQV/1JvO5TXaJz62uSJD94aypcdIlFvrD7tAic\nFSRlMZpCRadgkW1f9co0Ot5NUC0tRgkAbDzyqgGjK+mouwiijfABY55Ej80s0GL7\nQKq3EQGFlX0bmIJWr0nKewdq9mtg61TqNY3DpfMepDYytBy+95n6UlUz1MqEByVb\nhkF9mkmJp/N5AqDmBz2c+M7+nCcsQWs72rh2mcVlL3pmEhMuChdF5lLb9vRcM8V1\nMq4MK4kyZixrQEY7ZcRGu4iM85Og74+un0TxKE1bKQ87U6mUvnPi8xKVZiS+1dFO\nCLa5HVsboexQveqUFGDxpBI7CGi/w6Lmi0BFXSODC/XABgXxiN5wG0tWRSJX/w6N\n7UB4cf0PDqHzZel1QZMy\n=CnvT\n-----END PGP SIGNATURE-----", "payload": "tree ebc4b979929c161d1058b95699b497854978ad56\nparent 0d2a403a518704258211889e76088341d845ed09\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473948893 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473948893 +0200\n\nhackily fix calling function pointers through a Fn static dispatch"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092f9d52d15198af3baaecb038a4e4ba130bcbfb", "html_url": "https://github.com/rust-lang/rust/commit/092f9d52d15198af3baaecb038a4e4ba130bcbfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092f9d52d15198af3baaecb038a4e4ba130bcbfb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2a403a518704258211889e76088341d845ed09", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2a403a518704258211889e76088341d845ed09", "html_url": "https://github.com/rust-lang/rust/commit/0d2a403a518704258211889e76088341d845ed09"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "f4c7097ea2539e0f1d48d450fc1ba23136e99675", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/092f9d52d15198af3baaecb038a4e4ba130bcbfb/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f9d52d15198af3baaecb038a4e4ba130bcbfb/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=092f9d52d15198af3baaecb038a4e4ba130bcbfb", "patch": "@@ -182,29 +182,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // Only trait methods can have a Self parameter.\n                 let (resolved_def_id, resolved_substs) =\n                     if let Some(trait_id) = self.tcx.trait_of_item(def_id) {\n-                        self.trait_method(trait_id, def_id, substs, arg_srcs.get_mut(0))?\n+                        self.trait_method(trait_id, def_id, substs, &mut arg_srcs)?\n                     } else {\n                         (def_id, substs)\n                     };\n \n-                if fn_ty.abi == Abi::RustCall && !args.is_empty() {\n-                    arg_srcs.pop();\n-                    let last_arg = args.last().unwrap();\n-                    let last = self.eval_operand(last_arg)?;\n-                    let last_ty = self.operand_ty(last_arg);\n-                    let last_layout = self.type_layout(last_ty);\n-                    match (&last_ty.sty, last_layout) {\n-                        (&ty::TyTuple(fields),\n-                         &Layout::Univariant { ref variant, .. }) => {\n-                            let offsets = iter::once(0)\n-                                .chain(variant.offset_after_field.iter()\n-                                    .map(|s| s.bytes()));\n-                            for (offset, ty) in offsets.zip(fields) {\n-                                let src = last.offset(offset as isize);\n-                                arg_srcs.push((src, ty));\n+                if fn_ty.abi == Abi::RustCall {\n+                    if let Some((last, last_ty)) = arg_srcs.pop() {\n+                        let last_layout = self.type_layout(last_ty);\n+                        match (&last_ty.sty, last_layout) {\n+                            (&ty::TyTuple(fields),\n+                             &Layout::Univariant { ref variant, .. }) => {\n+                                let offsets = iter::once(0)\n+                                    .chain(variant.offset_after_field.iter()\n+                                        .map(|s| s.bytes()));\n+                                for (offset, ty) in offsets.zip(fields) {\n+                                    let src = last.offset(offset as isize);\n+                                    arg_srcs.push((src, ty));\n+                                }\n                             }\n+                            ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n                         }\n-                        ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n                     }\n                 }\n \n@@ -509,7 +507,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         trait_id: DefId,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n-        first_arg: Option<&mut (Pointer, Ty<'tcx>)>,\n+        args: &mut Vec<(Pointer, Ty<'tcx>)>,\n     ) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>)> {\n         let trait_ref = ty::TraitRef::from_method(self.tcx, trait_id, substs);\n         let trait_ref = self.tcx.normalize_associated_type(&ty::Binder(trait_ref));\n@@ -528,23 +526,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             traits::VtableClosure(vtable_closure) =>\n                 Ok((vtable_closure.closure_def_id, vtable_closure.substs.func_substs)),\n \n-            traits::VtableFnPointer(_fn_ty) => {\n-                let _trait_closure_kind = self.tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n-                unimplemented!()\n-                // let llfn = trans_fn_pointer_shim(ccx, trait_closure_kind, fn_ty);\n-\n-                // let method_ty = def_ty(tcx, def_id, substs);\n-                // let fn_ptr_ty = match method_ty.sty {\n-                //     ty::TyFnDef(_, _, fty) => tcx.mk_ty(ty::TyFnPtr(fty)),\n-                //     _ => unreachable!(\"expected fn item type, found {}\",\n-                //                       method_ty)\n-                // };\n-                // Callee::ptr(immediate_rvalue(llfn, fn_ptr_ty))\n+            traits::VtableFnPointer(fn_ty) => {\n+                if let ty::TyFnDef(did, ref substs, _) = fn_ty.fn_ty.sty {\n+                    args.remove(0);\n+                    Ok((did, substs))\n+                } else {\n+                    bug!(\"VtableFnPointer did not contain a concrete function: {:?}\", fn_ty)\n+                }\n             }\n \n             traits::VtableObject(ref data) => {\n                 let idx = self.tcx.get_vtable_index_of_object_method(data, def_id);\n-                if let Some(&mut(first_arg, ref mut first_ty)) = first_arg {\n+                if let Some(&mut(first_arg, ref mut first_ty)) = args.get_mut(0) {\n                     let (_, vtable) = self.get_fat_ptr(first_arg);\n                     let vtable = self.memory.read_ptr(vtable)?;\n                     let idx = idx + 3;"}]}