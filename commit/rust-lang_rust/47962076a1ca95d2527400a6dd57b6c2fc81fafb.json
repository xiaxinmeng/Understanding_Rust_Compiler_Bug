{"sha": "47962076a1ca95d2527400a6dd57b6c2fc81fafb", "node_id": "C_kwDOAAsO6NoAKDQ3OTYyMDc2YTFjYTk1ZDI1Mjc0MDBhNmRkNTdiNmMyZmM4MWZhZmI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-09T12:36:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-09T12:36:33Z"}, "message": "Use cg_ssa for creating the dylib metadata file\n\nThe new api was introduced in rust-lang/rust#91604", "tree": {"sha": "75151f53841c5e0ed94c53f31e359013e61b8853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75151f53841c5e0ed94c53f31e359013e61b8853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47962076a1ca95d2527400a6dd57b6c2fc81fafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47962076a1ca95d2527400a6dd57b6c2fc81fafb", "html_url": "https://github.com/rust-lang/rust/commit/47962076a1ca95d2527400a6dd57b6c2fc81fafb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47962076a1ca95d2527400a6dd57b6c2fc81fafb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95cfeb4ddecea5a21d215a36ee41390bd9875bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/95cfeb4ddecea5a21d215a36ee41390bd9875bf2", "html_url": "https://github.com/rust-lang/rust/commit/95cfeb4ddecea5a21d215a36ee41390bd9875bf2"}], "stats": {"total": 81, "additions": 3, "deletions": 78}, "files": [{"sha": "607d76c150bf4c0c2f32ad088654ca6e0ecdcc59", "filename": "src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47962076a1ca95d2527400a6dd57b6c2fc81fafb/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47962076a1ca95d2527400a6dd57b6c2fc81fafb/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=47962076a1ca95d2527400a6dd57b6c2fc81fafb", "patch": "@@ -4,6 +4,7 @@\n use std::path::PathBuf;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_metadata::EncodedMetadata;\n@@ -278,7 +279,8 @@ pub(crate) fn run_aot(\n             let tmp_file =\n                 tcx.output_filenames(()).temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n-            let obj = crate::metadata::new_metadata_object(tcx, &metadata_cgu_name, &metadata);\n+            let symbol_name = rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx);\n+            let obj = create_compressed_metadata_file(tcx.sess, &metadata, &symbol_name);\n \n             if let Err(err) = std::fs::write(&tmp_file, obj) {\n                 tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));"}, {"sha": "fee2ea97a5761dc5458df4c58d45c98db6cad97b", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47962076a1ca95d2527400a6dd57b6c2fc81fafb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47962076a1ca95d2527400a6dd57b6c2fc81fafb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=47962076a1ca95d2527400a6dd57b6c2fc81fafb", "patch": "@@ -61,7 +61,6 @@ mod inline_asm;\n mod intrinsics;\n mod linkage;\n mod main_shim;\n-mod metadata;\n mod num;\n mod optimize;\n mod pointer;"}, {"sha": "1c8fd0b01d9d94ed346e67bf5ae734bb9d12b50b", "filename": "src/metadata.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/95cfeb4ddecea5a21d215a36ee41390bd9875bf2/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95cfeb4ddecea5a21d215a36ee41390bd9875bf2/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=95cfeb4ddecea5a21d215a36ee41390bd9875bf2", "patch": "@@ -1,76 +0,0 @@\n-//! Writing of the rustc metadata for dylibs\n-\n-use object::write::{Object, StandardSegment, Symbol, SymbolSection};\n-use object::{SectionKind, SymbolFlags, SymbolKind, SymbolScope};\n-\n-use rustc_metadata::EncodedMetadata;\n-use rustc_middle::ty::TyCtxt;\n-\n-// Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub(crate) fn new_metadata_object(\n-    tcx: TyCtxt<'_>,\n-    cgu_name: &str,\n-    metadata: &EncodedMetadata,\n-) -> Vec<u8> {\n-    use snap::write::FrameEncoder;\n-    use std::io::Write;\n-\n-    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n-    FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n-\n-    let triple = crate::target_triple(tcx.sess);\n-\n-    let binary_format = match triple.binary_format {\n-        target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n-        target_lexicon::BinaryFormat::Coff => object::BinaryFormat::Coff,\n-        target_lexicon::BinaryFormat::Macho => object::BinaryFormat::MachO,\n-        binary_format => tcx.sess.fatal(&format!(\"binary format {} is unsupported\", binary_format)),\n-    };\n-    let architecture = match triple.architecture {\n-        target_lexicon::Architecture::Aarch64(_) => object::Architecture::Aarch64,\n-        target_lexicon::Architecture::Arm(_) => object::Architecture::Arm,\n-        target_lexicon::Architecture::Avr => object::Architecture::Avr,\n-        target_lexicon::Architecture::Hexagon => object::Architecture::Hexagon,\n-        target_lexicon::Architecture::Mips32(_) => object::Architecture::Mips,\n-        target_lexicon::Architecture::Mips64(_) => object::Architecture::Mips64,\n-        target_lexicon::Architecture::Msp430 => object::Architecture::Msp430,\n-        target_lexicon::Architecture::Powerpc => object::Architecture::PowerPc,\n-        target_lexicon::Architecture::Powerpc64 => object::Architecture::PowerPc64,\n-        target_lexicon::Architecture::Powerpc64le => todo!(),\n-        target_lexicon::Architecture::Riscv32(_) => object::Architecture::Riscv32,\n-        target_lexicon::Architecture::Riscv64(_) => object::Architecture::Riscv64,\n-        target_lexicon::Architecture::S390x => object::Architecture::S390x,\n-        target_lexicon::Architecture::Sparc64 => object::Architecture::Sparc64,\n-        target_lexicon::Architecture::Sparcv9 => object::Architecture::Sparc64,\n-        target_lexicon::Architecture::X86_32(_) => object::Architecture::I386,\n-        target_lexicon::Architecture::X86_64 => object::Architecture::X86_64,\n-        architecture => {\n-            tcx.sess.fatal(&format!(\"target architecture {:?} is unsupported\", architecture,))\n-        }\n-    };\n-    let endian = match triple.endianness().unwrap() {\n-        target_lexicon::Endianness::Little => object::Endianness::Little,\n-        target_lexicon::Endianness::Big => object::Endianness::Big,\n-    };\n-\n-    let mut object = Object::new(binary_format, architecture, endian);\n-    object.add_file_symbol(cgu_name.as_bytes().to_vec());\n-\n-    let segment = object.segment_name(StandardSegment::Data).to_vec();\n-    let section_id = object.add_section(segment, b\".rustc\".to_vec(), SectionKind::Data);\n-    let offset = object.append_section_data(section_id, &compressed, 1);\n-    // For MachO and probably PE this is necessary to prevent the linker from throwing away the\n-    // .rustc section. For ELF this isn't necessary, but it also doesn't harm.\n-    object.add_symbol(Symbol {\n-        name: rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx).into_bytes(),\n-        value: offset,\n-        size: compressed.len() as u64,\n-        kind: SymbolKind::Data,\n-        scope: SymbolScope::Dynamic,\n-        weak: false,\n-        section: SymbolSection::Section(section_id),\n-        flags: SymbolFlags::None,\n-    });\n-\n-    object.write().unwrap()\n-}"}]}