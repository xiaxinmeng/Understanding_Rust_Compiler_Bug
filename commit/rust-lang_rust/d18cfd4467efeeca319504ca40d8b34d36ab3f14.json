{"sha": "d18cfd4467efeeca319504ca40d8b34d36ab3f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOGNmZDQ0NjdlZmVlY2EzMTk1MDRjYTQwZDhiMzRkMzZhYjNmMTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-01T23:47:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T23:47:38Z"}, "message": "Merge #9458\n\n9458: minor: Remove make::match_arm_with_guard r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3ac19b77188c066d76a5c21c0b9bda283fe713fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac19b77188c066d76a5c21c0b9bda283fe713fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18cfd4467efeeca319504ca40d8b34d36ab3f14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3lQaCRBK7hj4Ov3rIwAA8uEIAF2CJhUy3Q5S577G/7+ldbm/\noMyhSikQni56qyh0jsM58fgQil5K1d9WuqzIoZhRPZCv/CACSE2qOzf8Q1pNogok\nNu5/gToD3gduG+IKZeoElj2o7+fZ92igokEJhasrKpIP8pyy+9O3Rw40zbNNktXO\nZSqagsSfc0ZEsufKbTsh1EgJPdk+e/3bGtijAzDpwxuhwtw0d94kFFbeIBJmtBPM\nNHrTGDf7OdBcf6e0wfTRFAC/mMlKxcMLpgNGknF2J0Lg5NLaU+4pdE6Do6EKfLve\nw3tV8hI/so90xB9K6Rai1r1UfpCR/bd1sXAxP79QD4Zrp4bkeh7gTGgJOUMwi3c=\n=icNw\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ac19b77188c066d76a5c21c0b9bda283fe713fa\nparent bd4f83d9f17fb8b1fd940849c2eb3e64f2fbab17\nparent 071ac48b6cdb5e4dfdf797f5d14b3173b8e78005\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625183258 +0000\ncommitter GitHub <noreply@github.com> 1625183258 +0000\n\nMerge #9458\n\n9458: minor: Remove make::match_arm_with_guard r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18cfd4467efeeca319504ca40d8b34d36ab3f14", "html_url": "https://github.com/rust-lang/rust/commit/d18cfd4467efeeca319504ca40d8b34d36ab3f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18cfd4467efeeca319504ca40d8b34d36ab3f14/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4f83d9f17fb8b1fd940849c2eb3e64f2fbab17", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4f83d9f17fb8b1fd940849c2eb3e64f2fbab17", "html_url": "https://github.com/rust-lang/rust/commit/bd4f83d9f17fb8b1fd940849c2eb3e64f2fbab17"}, {"sha": "071ac48b6cdb5e4dfdf797f5d14b3173b8e78005", "url": "https://api.github.com/repos/rust-lang/rust/commits/071ac48b6cdb5e4dfdf797f5d14b3173b8e78005", "html_url": "https://github.com/rust-lang/rust/commit/071ac48b6cdb5e4dfdf797f5d14b3173b8e78005"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "174c2e295402332a60f37a559b3ed74e956e92e0", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -133,12 +133,13 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                                 let path = make::ext::ident_path(\"it\");\n                                 make::expr_path(path)\n                             };\n-                            make::match_arm(once(pat.into()), expr)\n+                            make::match_arm(once(pat.into()), None, expr)\n                         };\n \n                         let sad_arm = make::match_arm(\n                             // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n                             once(make::wildcard_pat().into()),\n+                            None,\n                             early_expression,\n                         );\n "}, {"sha": "97df906f829c53b0925ba3b75611bf3e7924f9ff", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -1089,12 +1089,12 @@ impl FlowHandler {\n                     let value_pat = make::ident_pat(make::name(some_name));\n                     let pat = make::tuple_struct_pat(path, iter::once(value_pat.into()));\n                     let value = make::expr_path(make::ext::ident_path(some_name));\n-                    make::match_arm(iter::once(pat.into()), value)\n+                    make::match_arm(iter::once(pat.into()), None, value)\n                 };\n                 let none_arm = {\n                     let path = make::ext::ident_path(\"None\");\n                     let pat = make::path_pat(path);\n-                    make::match_arm(iter::once(pat), none.make_result_handler(None))\n+                    make::match_arm(iter::once(pat), None, none.make_result_handler(None))\n                 };\n                 let arms = make::match_arm_list(vec![some_arm, none_arm]);\n                 make::expr_match(call_expr, arms)\n@@ -1108,14 +1108,18 @@ impl FlowHandler {\n                     let value_pat = make::ident_pat(make::name(ok_name));\n                     let pat = make::tuple_struct_pat(path, iter::once(value_pat.into()));\n                     let value = make::expr_path(make::ext::ident_path(ok_name));\n-                    make::match_arm(iter::once(pat.into()), value)\n+                    make::match_arm(iter::once(pat.into()), None, value)\n                 };\n                 let err_arm = {\n                     let path = make::ext::ident_path(\"Err\");\n                     let value_pat = make::ident_pat(make::name(err_name));\n                     let pat = make::tuple_struct_pat(path, iter::once(value_pat.into()));\n                     let value = make::expr_path(make::ext::ident_path(err_name));\n-                    make::match_arm(iter::once(pat.into()), err.make_result_handler(Some(value)))\n+                    make::match_arm(\n+                        iter::once(pat.into()),\n+                        None,\n+                        err.make_result_handler(Some(value)),\n+                    )\n                 };\n                 let arms = make::match_arm_list(vec![ok_arm, err_arm]);\n                 make::expr_match(call_expr, arms)"}, {"sha": "4f6d68e45a51929dd6b10d3ad600f39622dddd3b", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -129,7 +129,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         |builder| {\n             let new_match_arm_list = match_arm_list.clone_for_update();\n             let missing_arms = missing_pats\n-                .map(|pat| make::match_arm(iter::once(pat), make::ext::expr_todo()))\n+                .map(|pat| make::match_arm(iter::once(pat), None, make::ext::expr_todo()))\n                 .map(|it| it.clone_for_update());\n \n             let catch_all_arm = new_match_arm_list"}, {"sha": "4934bb418701d558dbc2c0f481557ea2495dffc6", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -64,10 +64,9 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 if scrutinee_to_be_expr.syntax().text() != expr.syntax().text() {\n                     // Only if all condition expressions are equal we can merge them into a match\n                     return None;\n-                } else {\n-                    pat_seen = true;\n-                    Either::Left(pat)\n                 }\n+                pat_seen = true;\n+                Either::Left(pat)\n             }\n             None => Either::Right(expr),\n         };\n@@ -105,10 +104,15 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                                 _ => None,\n                             }\n                             .unwrap_or_else(|| make::wildcard_pat().into());\n-                            make::match_arm(iter::once(pattern), unwrap_trivial_block(else_block))\n+                            make::match_arm(\n+                                iter::once(pattern),\n+                                None,\n+                                unwrap_trivial_block(else_block),\n+                            )\n                         }\n                         None => make::match_arm(\n                             iter::once(make::wildcard_pat().into()),\n+                            None,\n                             make::expr_unit().into(),\n                         ),\n                     }\n@@ -119,11 +123,11 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                         let body = body.reset_indent().indent(IndentLevel(1));\n                         match pat {\n                             Either::Left(pat) => {\n-                                make::match_arm(iter::once(pat), unwrap_trivial_block(body))\n+                                make::match_arm(iter::once(pat), None, unwrap_trivial_block(body))\n                             }\n-                            Either::Right(expr) => make::match_arm_with_guard(\n+                            Either::Right(expr) => make::match_arm(\n                                 iter::once(make::wildcard_pat().into()),\n-                                expr,\n+                                Some(expr),\n                                 unwrap_trivial_block(body),\n                             ),\n                         }"}, {"sha": "0e41aeb89d3fdc57b1114421bf0163e3deb3c99f", "filename": "crates/ide_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -56,10 +56,11 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n             let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n             let bind_path = make::ext::ident_path(\"it\");\n-            let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+            let ok_arm = make::match_arm(iter::once(ok_tuple), None, make::expr_path(bind_path));\n \n             let err_arm = make::match_arm(\n                 iter::once(make::wildcard_pat().into()),\n+                None,\n                 make::ext::expr_unreachable(),\n             );\n "}, {"sha": "ff31bf5cc738076a3011fc0eb628af036ae055b6", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -228,7 +228,7 @@ fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElemen\n #[test]\n fn test_increase_indent() {\n     let arm_list = {\n-        let arm = make::match_arm(iter::once(make::wildcard_pat().into()), make::expr_unit());\n+        let arm = make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit());\n         make::match_arm_list(vec![arm.clone(), arm])\n     };\n     assert_eq!("}, {"sha": "08b00e6069e7fd6dbf2ed7b37b892427c423d77c", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18cfd4467efeeca319504ca40d8b34d36ab3f14/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=d18cfd4467efeeca319504ca40d8b34d36ab3f14", "patch": "@@ -421,9 +421,16 @@ pub fn path_pat(path: ast::Path) -> ast::Pat {\n     }\n }\n \n-pub fn match_arm(pats: impl IntoIterator<Item = ast::Pat>, expr: ast::Expr) -> ast::MatchArm {\n+pub fn match_arm(\n+    pats: impl IntoIterator<Item = ast::Pat>,\n+    guard: Option<ast::Expr>,\n+    expr: ast::Expr,\n+) -> ast::MatchArm {\n     let pats_str = pats.into_iter().join(\" | \");\n-    return from_text(&format!(\"{} => {}\", pats_str, expr));\n+    return match guard {\n+        Some(guard) => from_text(&format!(\"{} if {} => {}\", pats_str, guard, expr)),\n+        None => from_text(&format!(\"{} => {}\", pats_str, expr)),\n+    };\n \n     fn from_text(text: &str) -> ast::MatchArm {\n         ast_from_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))"}]}