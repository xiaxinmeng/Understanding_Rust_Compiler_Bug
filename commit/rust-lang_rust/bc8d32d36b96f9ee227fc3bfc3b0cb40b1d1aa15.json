{"sha": "bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOGQzMmQzNmI5NmY5ZWUyMjdmYzNiZmMzYjBjYjQwYjFkMWFhMTU=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-09T06:28:56Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-09T06:28:56Z"}, "message": "fix unary minus on usize and unused variable errors in .fixed file", "tree": {"sha": "9d5b9ae3f4e5a67a917dce3dd6a3f946cde26e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5b9ae3f4e5a67a917dce3dd6a3f946cde26e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "html_url": "https://github.com/rust-lang/rust/commit/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84db238fa16891196ed8378f328479867cf1ea39", "url": "https://api.github.com/repos/rust-lang/rust/commits/84db238fa16891196ed8378f328479867cf1ea39", "html_url": "https://github.com/rust-lang/rust/commit/84db238fa16891196ed8378f328479867cf1ea39"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "4d3eba93bb3e597ef4d614ebd3f2ed1f84f0ccd0", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "patch": "@@ -15,54 +15,54 @@ fn main() {\n     // the casts, since the casts are the recommended fixes.\n \n     // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n-    let ptr_i32_transmute = unsafe {\n-        -1 as *const i32\n+    let _ptr_i32_transmute = unsafe {\n+        usize::MAX as *const i32\n     };\n-    let ptr_i32 = -1isize as *const i32;\n+    let ptr_i32 = usize::MAX as *const i32;\n \n     // e has type *T, U is *U_0, and either U_0: Sized ...\n-    let ptr_i8_transmute = unsafe {\n+    let _ptr_i8_transmute = unsafe {\n         ptr_i32 as *const i8\n     };\n-    let ptr_i8 = ptr_i32 as *const i8;\n+    let _ptr_i8 = ptr_i32 as *const i8;\n \n     let slice_ptr = &[0,1,2,3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let ptr_to_unsized_transmute = unsafe {\n+    let _ptr_to_unsized_transmute = unsafe {\n         slice_ptr as *const [u16]\n     };\n-    let ptr_to_unsized = slice_ptr as *const [u16];\n+    let _ptr_to_unsized = slice_ptr as *const [u16];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n \n     // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n-    let usize_from_int_ptr_transmute = unsafe {\n+    let _usize_from_int_ptr_transmute = unsafe {\n         ptr_i32 as usize\n     };\n-    let usize_from_int_ptr = ptr_i32 as usize;\n+    let _usize_from_int_ptr = ptr_i32 as usize;\n \n     let array_ref: &[i32; 4] = &[1,2,3,4];\n \n     // e has type &[T; n] and U is *const T; array-ptr-cast\n-    let array_ptr_transmute = unsafe {\n+    let _array_ptr_transmute = unsafe {\n         array_ref as *const [i32; 4]\n     };\n-    let array_ptr = array_ref as *const [i32; 4];\n+    let _array_ptr = array_ref as *const [i32; 4];\n \n     fn foo(_: usize) -> u8 { 42 }\n \n     // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n-    let usize_ptr_transmute = unsafe {\n+    let _usize_ptr_transmute = unsafe {\n         foo as *const usize\n     };\n-    let usize_ptr_transmute = foo as *const usize;\n+    let _usize_ptr_transmute = foo as *const usize;\n \n     // e is a function pointer type and U is an integer; fptr-addr-cast\n-    let usize_from_fn_ptr_transmute = unsafe {\n+    let _usize_from_fn_ptr_transmute = unsafe {\n         foo as usize\n     };\n-    let usize_from_fn_ptr = foo as *const usize;\n+    let _usize_from_fn_ptr = foo as *const usize;\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "87481210643320e89bd0701905d787548b468637", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "patch": "@@ -15,54 +15,54 @@ fn main() {\n     // the casts, since the casts are the recommended fixes.\n \n     // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n-    let ptr_i32_transmute = unsafe {\n-        transmute::<isize, *const i32>(-1)\n+    let _ptr_i32_transmute = unsafe {\n+        transmute::<usize, *const i32>(usize::MAX)\n     };\n-    let ptr_i32 = -1isize as *const i32;\n+    let ptr_i32 = usize::MAX as *const i32;\n \n     // e has type *T, U is *U_0, and either U_0: Sized ...\n-    let ptr_i8_transmute = unsafe {\n+    let _ptr_i8_transmute = unsafe {\n         transmute::<*const i32, *const i8>(ptr_i32)\n     };\n-    let ptr_i8 = ptr_i32 as *const i8;\n+    let _ptr_i8 = ptr_i32 as *const i8;\n \n     let slice_ptr = &[0,1,2,3] as *const [i32];\n \n     // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n-    let ptr_to_unsized_transmute = unsafe {\n+    let _ptr_to_unsized_transmute = unsafe {\n         transmute::<*const [i32], *const [u16]>(slice_ptr)\n     };\n-    let ptr_to_unsized = slice_ptr as *const [u16];\n+    let _ptr_to_unsized = slice_ptr as *const [u16];\n     // TODO: We could try testing vtable casts here too, but maybe\n     // we should wait until std::raw::TraitObject is stabilized?\n \n     // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n-    let usize_from_int_ptr_transmute = unsafe {\n+    let _usize_from_int_ptr_transmute = unsafe {\n         transmute::<*const i32, usize>(ptr_i32)\n     };\n-    let usize_from_int_ptr = ptr_i32 as usize;\n+    let _usize_from_int_ptr = ptr_i32 as usize;\n \n     let array_ref: &[i32; 4] = &[1,2,3,4];\n \n     // e has type &[T; n] and U is *const T; array-ptr-cast\n-    let array_ptr_transmute = unsafe {\n+    let _array_ptr_transmute = unsafe {\n         transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n     };\n-    let array_ptr = array_ref as *const [i32; 4];\n+    let _array_ptr = array_ref as *const [i32; 4];\n \n     fn foo(_: usize) -> u8 { 42 }\n \n     // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n-    let usize_ptr_transmute = unsafe {\n+    let _usize_ptr_transmute = unsafe {\n         transmute::<fn(usize) -> u8, *const usize>(foo)\n     };\n-    let usize_ptr_transmute = foo as *const usize;\n+    let _usize_ptr_transmute = foo as *const usize;\n \n     // e is a function pointer type and U is an integer; fptr-addr-cast\n-    let usize_from_fn_ptr_transmute = unsafe {\n+    let _usize_from_fn_ptr_transmute = unsafe {\n         transmute::<fn(usize) -> u8, usize>(foo)\n     };\n-    let usize_from_fn_ptr = foo as *const usize;\n+    let _usize_from_fn_ptr = foo as *const usize;\n }\n \n // If a ref-to-ptr cast of this form where the pointer type points to a type other"}, {"sha": "72fb8689d657a76cd29a7e5d6b6d4d54ab1e5a58", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=bc8d32d36b96f9ee227fc3bfc3b0cb40b1d1aa15", "patch": "@@ -1,8 +1,8 @@\n error: transmute from an integer to a pointer\n   --> $DIR/transmutes_expressible_as_ptr_casts.rs:19:9\n    |\n-LL |         transmute::<isize, *const i32>(-1)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-1 as *const i32`\n+LL |         transmute::<usize, *const i32>(usize::MAX)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `usize::MAX as *const i32`\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n "}]}