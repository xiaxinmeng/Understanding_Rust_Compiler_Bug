{"sha": "d782e35c30a9642afe4ea28614efc08025694b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODJlMzVjMzBhOTY0MmFmZTRlYTI4NjE0ZWZjMDgwMjU2OTRiMWI=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-09T23:04:37Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:58Z"}, "message": "Fix bug with defaults not being restored", "tree": {"sha": "807f14ffac6f6157784200bdac5265150ae93980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807f14ffac6f6157784200bdac5265150ae93980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d782e35c30a9642afe4ea28614efc08025694b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d782e35c30a9642afe4ea28614efc08025694b1b", "html_url": "https://github.com/rust-lang/rust/commit/d782e35c30a9642afe4ea28614efc08025694b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d782e35c30a9642afe4ea28614efc08025694b1b/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "html_url": "https://github.com/rust-lang/rust/commit/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "fa7cd143e3b21da93c32ec5215490bf976958d2f", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d782e35c30a9642afe4ea28614efc08025694b1b/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d782e35c30a9642afe4ea28614efc08025694b1b/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=d782e35c30a9642afe4ea28614efc08025694b1b", "patch": "@@ -47,9 +47,9 @@ pub struct Snapshot {\n     snapshot: sv::Snapshot\n }\n \n-enum UndoEntry {\n+enum UndoEntry<'tcx> {\n     // The type of the var was specified.\n-    SpecifyVar(ty::TyVid, Vec<Relation>),\n+    SpecifyVar(ty::TyVid, Vec<Relation>, Option<Default<'tcx>>),\n     Relate(ty::TyVid, ty::TyVid),\n }\n \n@@ -118,8 +118,8 @@ impl<'tcx> TypeVariableTable<'tcx> {\n             mem::replace(value_ptr, Known(ty))\n         };\n \n-        let relations = match old_value {\n-            Bounded { relations, .. } => relations,\n+        let (relations, default) = match old_value {\n+            Bounded { relations, default } => (relations, default),\n             Known(_) => panic!(\"Asked to instantiate variable that is \\\n                                already instantiated\")\n         };\n@@ -128,7 +128,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n             stack.push((ty, dir, vid));\n         }\n \n-        self.values.record(SpecifyVar(vid, relations));\n+        self.values.record(SpecifyVar(vid, relations, default));\n     }\n \n     pub fn new_var(&mut self,\n@@ -198,7 +198,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                     debug!(\"NewElem({}) new_elem_threshold={}\", index, new_elem_threshold);\n                 }\n \n-                sv::UndoLog::Other(SpecifyVar(vid, _)) => {\n+                sv::UndoLog::Other(SpecifyVar(vid, _, _)) => {\n                     if vid.index < new_elem_threshold {\n                         // quick check to see if this variable was\n                         // created since the snapshot started or not.\n@@ -229,12 +229,15 @@ impl<'tcx> TypeVariableTable<'tcx> {\n \n impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n     type Value = TypeVariableData<'tcx>;\n-    type Undo = UndoEntry;\n+    type Undo = UndoEntry<'tcx>;\n \n-    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry) {\n+    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry<'tcx>) {\n         match action {\n-            SpecifyVar(vid, relations) => {\n-                values[vid.index as usize].value = Bounded { relations: relations, default: None };\n+            SpecifyVar(vid, relations, default) => {\n+                values[vid.index as usize].value = Bounded {\n+                    relations: relations,\n+                    default: default\n+                };\n             }\n \n             Relate(a, b) => {"}]}