{"sha": "5c85cd9fee1ca177187b424a4328fa298c19a9aa", "node_id": "C_kwDOAAsO6NoAKDVjODVjZDlmZWUxY2ExNzcxODdiNDI0YTQzMjhmYTI5OGMxOWE5YWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-09T19:53:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-10T19:22:55Z"}, "message": "Directly construct Inherited.", "tree": {"sha": "6cb9e95e5fb7f1d5699f98355017ec49dc0470a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb9e95e5fb7f1d5699f98355017ec49dc0470a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c85cd9fee1ca177187b424a4328fa298c19a9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c85cd9fee1ca177187b424a4328fa298c19a9aa", "html_url": "https://github.com/rust-lang/rust/commit/5c85cd9fee1ca177187b424a4328fa298c19a9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c85cd9fee1ca177187b424a4328fa298c19a9aa/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27910cbcbdf76afb93e769ac66efa76271f964b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27910cbcbdf76afb93e769ac66efa76271f964b0", "html_url": "https://github.com/rust-lang/rust/commit/27910cbcbdf76afb93e769ac66efa76271f964b0"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "4c4c003ca469122825ba59a3500beed1a81aac25", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c85cd9fee1ca177187b424a4328fa298c19a9aa/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c85cd9fee1ca177187b424a4328fa298c19a9aa/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=5c85cd9fee1ca177187b424a4328fa298c19a9aa", "patch": "@@ -369,10 +369,10 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Item(item) => {\n                 if let ItemKind::Fn(_, _, body_id) = &item.kind\n                 && let output_ty = return_ty(cx, item.owner_id)\n-                && Inherited::build(cx.tcx, item.owner_id.def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.owner_id.def_id);\n-                    fn_ctxt.can_coerce(ty, output_ty)\n-                }) {\n+                && let inherited = Inherited::new(cx.tcx, item.owner_id.def_id)\n+                && let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, item.owner_id.def_id)\n+                && fn_ctxt.can_coerce(ty, output_ty)\n+                {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {\n                         return false;\n                     }"}, {"sha": "62efd13b8d909a072232c40757ccd6e9b91de0b4", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5c85cd9fee1ca177187b424a4328fa298c19a9aa/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c85cd9fee1ca177187b424a4328fa298c19a9aa/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=5c85cd9fee1ca177187b424a4328fa298c19a9aa", "patch": "@@ -33,38 +33,37 @@ pub(super) fn check_cast<'tcx>(\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n \n-    Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-        let fn_ctxt = FnCtxt::new(inherited, cx.param_env, local_def_id);\n+    let inherited = Inherited::new(cx.tcx, local_def_id);\n+    let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, local_def_id);\n \n-        // If we already have errors, we can't be sure we can pointer cast.\n+    // If we already have errors, we can't be sure we can pointer cast.\n+    assert!(\n+        !fn_ctxt.errors_reported_since_creation(),\n+        \"Newly created FnCtxt contained errors\"\n+    );\n+\n+    if let Ok(check) = cast::CastCheck::new(\n+        &fn_ctxt,\n+        e,\n+        from_ty,\n+        to_ty,\n+        // We won't show any error to the user, so we don't care what the span is here.\n+        DUMMY_SP,\n+        DUMMY_SP,\n+        hir::Constness::NotConst,\n+    ) {\n+        let res = check.do_check(&fn_ctxt);\n+\n+        // do_check's documentation says that it might return Ok and create\n+        // errors in the fcx instead of returning Err in some cases. Those cases\n+        // should be filtered out before getting here.\n         assert!(\n             !fn_ctxt.errors_reported_since_creation(),\n-            \"Newly created FnCtxt contained errors\"\n+            \"`fn_ctxt` contained errors after cast check!\"\n         );\n \n-        if let Ok(check) = cast::CastCheck::new(\n-            &fn_ctxt,\n-            e,\n-            from_ty,\n-            to_ty,\n-            // We won't show any error to the user, so we don't care what the span is here.\n-            DUMMY_SP,\n-            DUMMY_SP,\n-            hir::Constness::NotConst,\n-        ) {\n-            let res = check.do_check(&fn_ctxt);\n-\n-            // do_check's documentation says that it might return Ok and create\n-            // errors in the fcx instead of returning Err in some cases. Those cases\n-            // should be filtered out before getting here.\n-            assert!(\n-                !fn_ctxt.errors_reported_since_creation(),\n-                \"`fn_ctxt` contained errors after cast check!\"\n-            );\n-\n-            res.ok()\n-        } else {\n-            None\n-        }\n-    })\n+        res.ok()\n+    } else {\n+        None\n+    }\n }"}]}