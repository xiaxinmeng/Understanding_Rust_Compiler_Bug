{"sha": "ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDBmZTBmNWU4MDg1MDcwZjFiYjY3OGNiYTFlYTg1YTA5OTQyYjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:37:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:37:18Z"}, "message": "rollup merge of #20483: nagisa/rng-copy\n\n* Implement (derive) `Clone` for `ChaChaRng`, `Isaac*Rng`, `StdRng` and `ThreadRng`;\n* Derive `XorShiftRng` `Clone` implementation instead of implementing it explicitly.\n\n`OsRng` is the only Rng which does not implement `Clone` or `Copy` after this patch because of its dependence on `Reader`.\n\nr? @huonw I guess?", "tree": {"sha": "29b7ce86a3c8734e3d70b08694dc1a54033447fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b7ce86a3c8734e3d70b08694dc1a54033447fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "html_url": "https://github.com/rust-lang/rust/commit/ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d81baec8c02847526f5c440434b59b22ebeaa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d81baec8c02847526f5c440434b59b22ebeaa5", "html_url": "https://github.com/rust-lang/rust/commit/38d81baec8c02847526f5c440434b59b22ebeaa5"}, {"sha": "6ca1f0c6ea61760138c7e3cb4c14fa3be71c7414", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca1f0c6ea61760138c7e3cb4c14fa3be71c7414", "html_url": "https://github.com/rust-lang/rust/commit/6ca1f0c6ea61760138c7e3cb4c14fa3be71c7414"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "ce055a84d3f2aa1421de30acae4e61b7945a8132", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "patch": "@@ -12,7 +12,6 @@\n \n use core::prelude::*;\n use core::num::Int;\n-\n use {Rng, SeedableRng, Rand};\n \n const KEY_WORDS    : uint =  8; // 8 words for the 256-bit key\n@@ -28,8 +27,7 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n ///\n /// [1]: D. J. Bernstein, [*ChaCha, a variant of\n /// Salsa20*](http://cr.yp.to/chacha.html)\n-\n-#[derive(Copy)]\n+#[deriving(Copy, Clone)]\n pub struct ChaChaRng {\n     buffer:  [u32; STATE_WORDS], // Internal buffer of output\n     state:   [u32; STATE_WORDS], // Initial state\n@@ -283,5 +281,15 @@ mod test {\n                         0x11cfa18e, 0xd3c50049, 0x75c775f6, 0x434c6530,\n                         0x2c5bad8f, 0x898881dc, 0x5f1c86d9, 0xc1f8e7f4));\n     }\n+\n+    #[test]\n+    fn test_rng_clone() {\n+        let seed : &[_] = &[0u32, ..8];\n+        let mut rng: ChaChaRng = SeedableRng::from_seed(seed);\n+        let mut clone = rng.clone();\n+        for _ in range(0u, 16) {\n+            assert_eq!(rng.next_u64(), clone.next_u64());\n+        }\n+    }\n }\n "}, {"sha": "03b56963ba944e4229096bba33bdee12f39868b9", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "patch": "@@ -179,6 +179,13 @@ impl IsaacRng {\n     }\n }\n \n+// Cannot be derived because [u32; 256] does not implement Clone\n+impl Clone for IsaacRng {\n+    fn clone(&self) -> IsaacRng {\n+        *self\n+    }\n+}\n+\n impl Rng for IsaacRng {\n     #[inline]\n     fn next_u32(&mut self) -> u32 {\n@@ -415,6 +422,13 @@ impl Isaac64Rng {\n     }\n }\n \n+// Cannot be derived because [u32; 256] does not implement Clone\n+impl Clone for Isaac64Rng {\n+    fn clone(&self) -> Isaac64Rng {\n+        *self\n+    }\n+}\n+\n impl Rng for Isaac64Rng {\n     // FIXME #7771: having next_u32 like this should be unnecessary\n     #[inline]\n@@ -485,6 +499,7 @@ impl Rand for Isaac64Rng {\n     }\n }\n \n+\n #[cfg(test)]\n mod test {\n     use std::prelude::v1::*;\n@@ -594,4 +609,14 @@ mod test {\n                         596345674630742204, 9947027391921273664, 11788097613744130851,\n                         10391409374914919106));\n     }\n+\n+    #[test]\n+    fn test_rng_clone() {\n+        let seed: &[_] = &[1, 23, 456, 7890, 12345];\n+        let mut rng: Isaac64Rng = SeedableRng::from_seed(seed);\n+        let mut clone = rng.clone();\n+        for _ in range(0u, 16) {\n+            assert_eq!(rng.next_u64(), clone.next_u64());\n+        }\n+    }\n }"}, {"sha": "9f44b7438ae214fc3adc0c85b309eedf37b1fdbf", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "patch": "@@ -385,24 +385,14 @@ pub trait SeedableRng<Seed>: Rng {\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n #[allow(missing_copy_implementations)]\n+#[deriving(Clone)]\n pub struct XorShiftRng {\n     x: u32,\n     y: u32,\n     z: u32,\n     w: u32,\n }\n \n-impl Clone for XorShiftRng {\n-    fn clone(&self) -> XorShiftRng {\n-        XorShiftRng {\n-            x: self.x,\n-            y: self.y,\n-            z: self.z,\n-            w: self.w,\n-        }\n-    }\n-}\n-\n impl XorShiftRng {\n     /// Creates a new XorShiftRng instance which is not seeded.\n     ///\n@@ -507,6 +497,7 @@ pub struct Closed01<F>(pub F);\n #[cfg(not(test))]\n mod std {\n     pub use core::{option, fmt}; // panic!()\n+    pub use core::clone; // derive Clone\n     pub use core::kinds;\n }\n "}, {"sha": "cadaae5de5c206a4e0b60d0e7a0e23df70aa87ca", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40fe0f5e8085070f1bb678cba1ea85a09942b1/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=ca40fe0f5e8085070f1bb678cba1ea85a09942b1", "patch": "@@ -245,7 +245,7 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n-#[derive(Copy)]\n+#[deriving(Copy, Clone)]\n pub struct StdRng {\n     rng: IsaacWordRng,\n }\n@@ -322,6 +322,7 @@ static THREAD_RNG_RESEED_THRESHOLD: uint = 32_768;\n type ThreadRngInner = reseeding::ReseedingRng<StdRng, ThreadRngReseeder>;\n \n /// The thread-local RNG.\n+#[deriving(Clone)]\n pub struct ThreadRng {\n     rng: Rc<RefCell<ThreadRngInner>>,\n }"}]}