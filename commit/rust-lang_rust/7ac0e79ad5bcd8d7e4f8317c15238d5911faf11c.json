{"sha": "7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzBlNzlhZDViY2Q4ZDdlNGY4MzE3YzE1MjM4ZDU5MTFmYWYxMWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-24T15:17:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-01T07:58:03Z"}, "message": "stub Retag hook; fix tests for removal of -Zmir-emit-validate", "tree": {"sha": "bee7fa058aaac4ff79bd71e1dfe691aafcc4214a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee7fa058aaac4ff79bd71e1dfe691aafcc4214a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "html_url": "https://github.com/rust-lang/rust/commit/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba55ba2a9f9d906dc584e2c8dc6a97a8c137b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba55ba2a9f9d906dc584e2c8dc6a97a8c137b92", "html_url": "https://github.com/rust-lang/rust/commit/fba55ba2a9f9d906dc584e2c8dc6a97a8c137b92"}], "stats": {"total": 121, "additions": 77, "deletions": 44}, "files": [{"sha": "5d20078082f972e180075719915bc5ee337ee3e9", "filename": "src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -26,7 +26,7 @@ use syntax::attr;\n \n \n pub use rustc_mir::interpret::*;\n-pub use rustc_mir::interpret::{self, AllocMap}; // resolve ambiguity\n+pub use rustc_mir::interpret::{self, AllocMap, PlaceTy}; // resolve ambiguity\n \n mod fn_call;\n mod operator;\n@@ -521,4 +521,18 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n             Ok(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag))\n         }\n     }\n+\n+    #[inline(always)]\n+    fn retag(\n+        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        fn_entry: bool,\n+        place: PlaceTy<'tcx, Borrow>,\n+    ) -> EvalResult<'tcx> {\n+        if !ecx.tcx.sess.opts.debugging_opts.mir_emit_retag || !ecx.machine.validate {\n+            // No tracking, or no retagging. This is possible because a dependency of ours might be\n+            // called with different flags than we are,\n+            return Ok(())\n+        }\n+        ecx.retag(fn_entry, place)\n+    }\n }"}, {"sha": "22216345b65e750739606ac14d8889ed72e32472", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n \n use super::{\n     MemoryAccess, MemoryKind, MiriMemoryKind, RangeMap, EvalResult, AllocId,\n-    Pointer,\n+    Pointer, PlaceTy,\n };\n \n pub type Timestamp = u64;\n@@ -362,6 +362,12 @@ pub trait EvalContextExt<'tcx> {\n         id: AllocId,\n         kind: MemoryKind<MiriMemoryKind>,\n     ) -> Borrow;\n+\n+    fn retag(\n+        &mut self,\n+        fn_entry: bool,\n+        place: PlaceTy<'tcx, Borrow>\n+    ) -> EvalResult<'tcx>;\n }\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, 'tcx> {\n@@ -506,4 +512,13 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         alloc.extra.first_borrow(mut_borrow, size);\n         Borrow::Mut(mut_borrow)\n     }\n+\n+    fn retag(\n+        &mut self,\n+        _fn_entry: bool,\n+        _place: PlaceTy<'tcx, Borrow>\n+    ) -> EvalResult<'tcx> {\n+        // TODO do something\n+        Ok(())\n+    }\n }"}, {"sha": "a33bca1267595cb67538c8a7e6f9009c20ae0e9c", "filename": "tests/compile-fail-fullmir/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstack_free.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation changes why we fail\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n // error-pattern: tried to deallocate Stack memory but gave Machine(Rust) as the kind\n "}, {"sha": "7ee3bc62767fb4f2076ffecbb9a209f2a43bf71f", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let b = Box::new(42);"}, {"sha": "207af4ae2cefb45a9e719f997671af2b7e961bfe", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let g = unsafe {"}, {"sha": "295756ef0f56155c3e383888440d195c0b228412", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n #![feature(box_syntax)]\n "}, {"sha": "9d29316fe24fe6c8499ebc05ea04ad5a4b23ae21", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n use std::mem;\n "}, {"sha": "e80dc15efaec9e46d2f2ad632825f7092d5c6ee6", "filename": "tests/compile-fail/invalid_bool.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };", "previous_filename": "tests/compile-fail/invalid_bool2.rs"}, {"sha": "b67ed9ba520d2cfbc9d943d1446a0c6b81642bbe", "filename": "tests/compile-fail/invalid_char.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());", "previous_filename": "tests/compile-fail/invalid_char2.rs"}, {"sha": "bd5cb55b6c92b815cd42a5112cd8e347e95df7c4", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n // error-pattern: invalid enum discriminant\n ", "previous_filename": "tests/compile-fail/invalid_enum_discriminant2.rs"}, {"sha": "d7e6a8c09f64e14422881da7af65dddeaaeebe9e", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "169e861be0b1fb590b0d5f3356d05015d8131575", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "9c0165fed222a114dc50d7851dc153ea3e84c9a0", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "0d594f9bd4c3b14df93523dbc039ffb5fa74e7aa", "filename": "tests/compile-fail/panic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,3 @@\n-// FIXME: Something in panic handling fails validation with full-MIR\n-// compile-flags: -Zmir-emit-validate=0\n //error-pattern: the evaluated program panicked\n \n fn main() {"}, {"sha": "befe96f2b35d95d2b9a5d3705650a53c2480b6c5", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "c092cbfe5098594ea79af8b5da8019842b270410", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -0,0 +1,8 @@\n+static X: usize = 5;\n+\n+#[allow(mutable_transmutes)]\n+fn main() {\n+    let _x = unsafe {\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR mutable reference with frozen tag\n+    };\n+}"}, {"sha": "07a277a16f3aea1f79b5728d6f5cba218e1d37f1", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n static X: usize = 5;\n "}, {"sha": "73928f533cb708f9400ec1d7cf2192db03405d90", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n use std::mem::transmute;\n "}, {"sha": "280f34a5a0213b53fd61c75c5eb7c53dd4c84ea2", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n use std::mem::transmute;\n "}, {"sha": "85c76f6f41f6ee33c1c268af204c6894bf7977ce", "filename": "tests/compile-fail/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n static mut LEAK: usize = 0;\n "}, {"sha": "ede0486be4130c5e065cd303eb85c5611f5f8f9c", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     #[cfg(target_pointer_width=\"64\")]"}, {"sha": "e64594d3e7eda966f43d95f3c69df72619189898", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let x = &2u16;"}, {"sha": "1112f2f33c148f23eea25143e2c2bb5360881fcc", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let x = &2u16;"}, {"sha": "fca749ef9ccbdb37ffdee64749be4b187e818e3f", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,6 +1,3 @@\n-// This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };"}, {"sha": "426a51faf8a372a2c24a2afb5d4f7caf5f57c7b2", "filename": "tests/compile-fail/validity/execute_memory.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fvalidity%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fvalidity%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fexecute_memory.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -0,0 +1,8 @@\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let x = box 42;\n+    unsafe {\n+        let _f = std::mem::transmute::<Box<i32>, fn()>(x); //~ ERROR encountered a pointer, but expected a function pointer\n+    }\n+}"}, {"sha": "4989f4d3af7bdb7d432ea29263e06e84e73e1a84", "filename": "tests/compile-fail/validity/fn_ptr_offset.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -0,0 +1,10 @@\n+use std::mem;\n+\n+fn f() {}\n+\n+fn main() {\n+    let x : fn() = f;\n+    let y : *mut u8 = unsafe { mem::transmute(x) };\n+    let y = y.wrapping_offset(1);\n+    let _x : fn() = unsafe { mem::transmute(y) }; //~ ERROR encountered a potentially NULL pointer\n+}"}, {"sha": "98e3fde54e69e62415ea955c5c1354bcf40dc730", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -58,13 +58,11 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     if opt {\n         // Optimizing too aggressivley makes UB detection harder, but test at least\n         // the default value.\n+        // FIXME: Opt level 3 ICEs during stack trace generation.\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n-    } else {\n-        flags.push(\"-Zmir-opt-level=0\".to_owned());\n     }\n \n     let mut config = compiletest::Config::default().tempdir();\n@@ -102,11 +100,8 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n-    } else {\n-        flags.push(\"-Zmir-opt-level=0\".to_owned());\n     }\n \n     let mut config = compiletest::Config::default().tempdir();"}, {"sha": "73c33943a63ac65fa586292963f67df44e5da382", "filename": "tests/run-pass/move-undef-primval.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fmove-undef-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fmove-undef-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-undef-primval.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,6 +1,3 @@\n-// Moving around undef is not allowed by validation\n-// compile-flags: -Zmir-emit-validate=0\n-\n struct Foo {\n     _inner: i32,\n }"}, {"sha": "303e90742fc11d8186430611e00c272a8406c1c3", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zmir-emit-validate=0\n #![allow(dead_code)]\n #![feature(unsize, coerce_unsized)]\n "}, {"sha": "77f2902917a1c21e22be8376ce8c82a2e5950332", "filename": "tests/run-pass/recursive_static.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Frecursive_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Frecursive_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frecursive_static.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Disable validation until we figure out how to handle recursive statics.\n-// compile-flags: -Zmir-emit-validate=0\n-\n struct S(&'static S);\n static S1: S = S(&S2);\n static S2: S = S(&S1);"}, {"sha": "130eaa288ebefe433232a64bae3ebd33334fdd88", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: We handle uninitialized storage here, which currently makes validation fail.\n-// compile-flags: -Zmir-emit-validate=0\n-\n //ignore-windows: Uses POSIX APIs\n \n #![feature(libc)]"}, {"sha": "aa9d117d726f16a1b8a8c51bc4144ba07c136dc6", "filename": "tests/run-pass/slice-of-zero-size-elements.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fslice-of-zero-size-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c/tests%2Frun-pass%2Fslice-of-zero-size-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslice-of-zero-size-elements.rs?ref=7ac0e79ad5bcd8d7e4f8317c15238d5911faf11c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -C debug-assertions\n-\n use std::slice;\n \n fn foo<T>(v: &[T]) -> Option<&[T]> {"}]}