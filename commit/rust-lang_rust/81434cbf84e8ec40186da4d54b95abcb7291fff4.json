{"sha": "81434cbf84e8ec40186da4d54b95abcb7291fff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNDM0Y2JmODRlOGVjNDAxODZkYTRkNTRiOTVhYmNiNzI5MWZmZjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T03:37:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T03:37:00Z"}, "message": "Rollup merge of #58137 - ljedrz:cleanup_node_id_to_type, r=estebank\n\nCleanup: rename node_id_to_type(_opt)\n\nRenames `node_id_to_type(_opt)` to `hir_id_to_type(_opt)`; this makes it clear we are dealing with HIR nodes and their IDs here.\n\nIn addition, a drive-by commit removing `ty::item_path::hir_path_str` (as requested by @eddyb).", "tree": {"sha": "9d0950a235ce8cc73d44661d264a75f5933a34e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0950a235ce8cc73d44661d264a75f5933a34e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81434cbf84e8ec40186da4d54b95abcb7291fff4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcY5DcCRBK7hj4Ov3rIwAAdHIIACgejRYzYchxX2ckuuhhUI0U\nQFO/4ZnoR/DbqzsBorpDljUF2aSHTNciAcHJDlmB4UFXgJF3TTa/44oRXA+hc2yY\nZ0kwD1y4N1/Kk6OA3Hn3dr2MSyYPYzRyo2qleN65u3BIr+ZhCZefWqEYQJzNuT63\ngEZ1tE6DLvzMxAETvhN+Mt1ggl3f1smheF0Hm+/7eYa5Y7/UDJ6mzXYdBYwn+qMI\nTDeDTa9bP+X0+qo+kggZAuHd8Q/2wxLBSkelVB+td2fErvjtzf3s+epj/gpq4mZA\nIx6j0LZAFF3kM64v8YqqUbRJstrW5wNKZOFcZx6cnM7vTVadIufrO9X7lM63j7U=\n=VIDp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d0950a235ce8cc73d44661d264a75f5933a34e7\nparent 1c1d2e44c53b578b99d1ec34a1a6e69c5386fe4d\nparent eb669b3a83dc1c1195ade3bff7f237afdd569ba2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550029020 +0100\ncommitter GitHub <noreply@github.com> 1550029020 +0100\n\nRollup merge of #58137 - ljedrz:cleanup_node_id_to_type, r=estebank\n\nCleanup: rename node_id_to_type(_opt)\n\nRenames `node_id_to_type(_opt)` to `hir_id_to_type(_opt)`; this makes it clear we are dealing with HIR nodes and their IDs here.\n\nIn addition, a drive-by commit removing `ty::item_path::hir_path_str` (as requested by @eddyb).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81434cbf84e8ec40186da4d54b95abcb7291fff4", "html_url": "https://github.com/rust-lang/rust/commit/81434cbf84e8ec40186da4d54b95abcb7291fff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81434cbf84e8ec40186da4d54b95abcb7291fff4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1d2e44c53b578b99d1ec34a1a6e69c5386fe4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d2e44c53b578b99d1ec34a1a6e69c5386fe4d", "html_url": "https://github.com/rust-lang/rust/commit/1c1d2e44c53b578b99d1ec34a1a6e69c5386fe4d"}, {"sha": "eb669b3a83dc1c1195ade3bff7f237afdd569ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb669b3a83dc1c1195ade3bff7f237afdd569ba2", "html_url": "https://github.com/rust-lang/rust/commit/eb669b3a83dc1c1195ade3bff7f237afdd569ba2"}], "stats": {"total": 113, "additions": 52, "deletions": 61}, "files": [{"sha": "e63fa230b3eba977298a83f9ce23ca99c695ca27", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -16,9 +16,9 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n-    fn node_matches_type(&mut self, node_id: HirId) -> bool {\n+    fn node_matches_type(&mut self, hir_id: HirId) -> bool {\n         let ty_opt = self.infcx.in_progress_tables.and_then(|tables| {\n-            tables.borrow().node_id_to_type_opt(node_id)\n+            tables.borrow().node_type_opt(hir_id)\n         });\n         match ty_opt {\n             Some(ty) => {"}, {"sha": "6db1bc382afe9b4f00dcd1d43c08757ffa586f71", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             // May return None; sometimes the tables are not yet populated.\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n                             let arg_ty_span = hir.span(hir.hir_to_node_id(ty_hir_id));\n-                            let ty = tables.node_id_to_type_opt(arg.hir_id)?;\n+                            let ty = tables.node_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n                                 if *r == *anon_region {"}, {"sha": "569968bd6d4bf53db834b77ef3af97044d6cfb59", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, def: Def,\n                                   pats: &[source_map::Spanned<hir::FieldPat>]) {\n-        let variant = match self.tables.node_id_to_type(lhs.hir_id).sty {\n+        let variant = match self.tables.node_type(lhs.hir_id).sty {\n             ty::Adt(adt, _) => adt.variant_of_def(def),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n         };"}, {"sha": "ce20ca39533b13737d81f72b41d9413be89253b6", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n         };\n         if let Def::Fn(did) = def {\n             if self.def_id_is_transmute(did) {\n-                let typ = self.tables.node_id_to_type(expr.hir_id);\n+                let typ = self.tables.node_type(expr.hir_id);\n                 let sig = typ.fn_sig(self.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();"}, {"sha": "231dcc9bfd272af8d1db2709639b5ceb4e89529a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -174,7 +174,7 @@ pub enum Note {\n // which the value is stored.\n //\n // *WARNING* The field `cmt.type` is NOT necessarily the same as the\n-// result of `node_id_to_type(cmt.id)`.\n+// result of `node_type(cmt.id)`.\n //\n // (FIXME: rewrite the following comment given that `@x` managed\n // pointers have been obsolete for quite some time.)\n@@ -497,7 +497,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                    hir_id: hir::HirId)\n                    -> McResult<Ty<'tcx>> {\n         self.resolve_type_vars_or_error(hir_id,\n-                                        self.tables.node_id_to_type_opt(hir_id))\n+                                        self.tables.node_type_opt(hir_id))\n     }\n \n     pub fn expr_ty(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> {"}, {"sha": "5a19b959684ff8f15629b3e3a3342c6bf2603414", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -525,17 +525,14 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn node_id_to_type(&self, id: hir::HirId) -> Ty<'tcx> {\n-        self.node_id_to_type_opt(id).unwrap_or_else(||\n-            bug!(\"node_id_to_type: no type for node `{}`\",\n-                 tls::with(|tcx| {\n-                     let id = tcx.hir().hir_to_node_id(id);\n-                     tcx.hir().node_to_string(id)\n-                 }))\n+    pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n+        self.node_type_opt(id).unwrap_or_else(||\n+            bug!(\"node_type: no type for node `{}`\",\n+                 tls::with(|tcx| tcx.hir().hir_to_string(id)))\n         )\n     }\n \n-    pub fn node_id_to_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n+    pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_types.get(&id.local_id).cloned()\n     }\n@@ -560,11 +557,11 @@ impl<'tcx> TypeckTables<'tcx> {\n     // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n     // doesn't provide type parameter substitutions.\n     pub fn pat_ty(&self, pat: &hir::Pat) -> Ty<'tcx> {\n-        self.node_id_to_type(pat.hir_id)\n+        self.node_type(pat.hir_id)\n     }\n \n     pub fn pat_ty_opt(&self, pat: &hir::Pat) -> Option<Ty<'tcx>> {\n-        self.node_id_to_type_opt(pat.hir_id)\n+        self.node_type_opt(pat.hir_id)\n     }\n \n     // Returns the type of an expression as a monotype.\n@@ -578,11 +575,11 @@ impl<'tcx> TypeckTables<'tcx> {\n     // ask for the type of \"id\" in \"id(3)\", it will return \"fn(&isize) -> isize\"\n     // instead of \"fn(ty) -> T with T = isize\".\n     pub fn expr_ty(&self, expr: &hir::Expr) -> Ty<'tcx> {\n-        self.node_id_to_type(expr.hir_id)\n+        self.node_type(expr.hir_id)\n     }\n \n     pub fn expr_ty_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> {\n-        self.node_id_to_type_opt(expr.hir_id)\n+        self.node_type_opt(expr.hir_id)\n     }\n \n     pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {"}, {"sha": "26e2705a7a0346feeb955f066e8b5a6405541afd", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir;\n use crate::hir::map::DefPathData;\n use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n@@ -77,11 +76,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.item_path_str(self.hir().local_def_id(id))\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn hir_path_str(self, id: hir::HirId) -> String {\n-        self.item_path_str(self.hir().local_def_id_from_hir_id(id))\n-    }\n-\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(self, def_id: DefId) -> String {"}, {"sha": "cf6053b71b6a8a953cfd30666839d4b038492290", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n     fn decl_without_init(&mut self, id: ast::NodeId, _span: Span) {\n         let ty = self.bccx\n                      .tables\n-                     .node_id_to_type(self.bccx.tcx.hir().node_to_hir_id(id));\n+                     .node_type(self.bccx.tcx.hir().node_to_hir_id(id));\n         gather_moves::gather_decl(self.bccx, &self.move_data, id, ty);\n     }\n }"}, {"sha": "28e01bd9793fd9813201801c2bf5b2714326d7f9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n-        let ty = cx.tables.node_id_to_type(e.hir_id);\n+        let ty = cx.tables.node_type(e.hir_id);\n         self.check_heap_type(cx, e.span, ty);\n     }\n }\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 if !def_id_is_transmute(cx, did) {\n                     return None;\n                 }\n-                let sig = cx.tables.node_id_to_type(expr.hir_id).fn_sig(cx.tcx);\n+                let sig = cx.tables.node_type(expr.hir_id).fn_sig(cx.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();\n                 return Some((&from.sty, &to.sty));"}, {"sha": "34f8fc40597f17a9d8906a511c1ace6b0aa9d452", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 }\n             }\n             hir::ExprKind::Lit(ref lit) => {\n-                match cx.tables.node_id_to_type(e.hir_id).sty {\n+                match cx.tables.node_type(e.hir_id).sty {\n                     ty::Int(t) => {\n                         match lit.node {\n                             ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n@@ -257,7 +257,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             // Normalize the binop so that the literal is always on the RHS in\n             // the comparison\n             let norm_binop = if swap { rev_binop(binop) } else { binop };\n-            match cx.tables.node_id_to_type(expr.hir_id).sty {\n+            match cx.tables.node_type(expr.hir_id).sty {\n                 ty::Int(int_ty) => {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i128 = match lit.node {\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 repr_str, val, t, actually, t\n             ));\n             if let Some(sugg_ty) =\n-                get_type_suggestion(&cx.tables.node_id_to_type(expr.hir_id).sty, val, negative)\n+                get_type_suggestion(&cx.tables.node_type(expr.hir_id).sty, val, negative)\n             {\n                 if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n                     let (sans_suffix, _) = repr_str.split_at(pos);"}, {"sha": "40d3ee9cc0b11266db0d27565fa03a6e288d5771", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -1338,7 +1338,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tables = self.tcx.typeck_tables_of(def_id);\n         let node_id = self.tcx.hir().as_local_node_id(def_id).unwrap();\n         let hir_id = self.tcx.hir().node_to_hir_id(node_id);\n-        let kind = match tables.node_id_to_type(hir_id).sty {\n+        let kind = match tables.node_type(hir_id).sty {\n             ty::Generator(def_id, ..) => {\n                 let layout = self.tcx.generator_layout(def_id);\n                 let data = GeneratorData {"}, {"sha": "4d65862375a9605ee5cf293ec82ea60698858eb2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -1178,7 +1178,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let escapes_from = if tcx.is_closure(self.mir_def_id) {\n             let tables = tcx.typeck_tables_of(self.mir_def_id);\n             let mir_hir_id = tcx.hir().def_index_to_hir_id(self.mir_def_id.index);\n-            match tables.node_id_to_type(mir_hir_id).sty {\n+            match tables.node_type(mir_hir_id).sty {\n                 ty::Closure(..) => \"closure\",\n                 ty::Generator(..) => \"generator\",\n                 _ => bug!(\"Closure body doesn't have a closure or generator type\"),"}, {"sha": "a5bf158257700bd5883978b8e09135f2d95bfac2", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -482,7 +482,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                     tcx.type_of(closure_base_def_id)\n                 } else {\n                     let tables = tcx.typeck_tables_of(self.mir_def_id);\n-                    tables.node_id_to_type(self.mir_hir_id)\n+                    tables.node_type(self.mir_hir_id)\n                 };\n \n                 debug!(\"defining_ty (pre-replacement): {:?}\", defining_ty);"}, {"sha": "64ab491cbd5b0fe19a4dc23ea58a63b866259523", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -92,7 +92,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n                 }\n                 ty::Generator(..) => {\n-                    let gen_ty = tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n+                    let gen_ty = tcx.body_tables(body_id).node_type(fn_hir_id);\n                     Some(ArgInfo(gen_ty, None, None, None))\n                 }\n                 _ => None,\n@@ -263,7 +263,7 @@ fn liberated_closure_env_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                             body_id: hir::BodyId)\n                                             -> Ty<'tcx> {\n     let closure_expr_hir_id = tcx.hir().node_to_hir_id(closure_expr_id);\n-    let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_hir_id);\n+    let closure_ty = tcx.body_tables(body_id).node_type(closure_expr_hir_id);\n \n     let (closure_def_id, closure_substs) = match closure_ty.sty {\n         ty::Closure(closure_def_id, closure_substs) => (closure_def_id, closure_substs),"}, {"sha": "38c3e68a441f40436ece62022c1ab7387cae0dcf", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -115,7 +115,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    block: &'tcx hir::Block)\n                                    -> ExprRef<'tcx> {\n-    let block_ty = cx.tables().node_id_to_type(block.hir_id);\n+    let block_ty = cx.tables().node_type(block.hir_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(block.hir_id.local_id);\n     let expr = Expr {\n         ty: block_ty,"}, {"sha": "10d04a80d734152a2fdef5c98ce97cf8b4d1b6b5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -304,7 +304,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     }\n                 } else {\n                     ExprKind::Call {\n-                        ty: cx.tables().node_id_to_type(fun.hir_id),\n+                        ty: cx.tables().node_type(fun.hir_id),\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n                         from_hir_call: true,\n@@ -677,7 +677,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     let def = cx.tables().qpath_def(qpath, source.hir_id);\n                     cx\n                         .tables()\n-                        .node_id_to_type(source.hir_id)\n+                        .node_type(source.hir_id)\n                         .ty_adt_def()\n                         .and_then(|adt_def| {\n                         match def {\n@@ -919,7 +919,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n-                    cx.tables().node_id_to_type(expr.hir_id),\n+                    cx.tables().node_type(expr.hir_id),\n                 ))),\n                 user_ty,\n             }\n@@ -940,7 +940,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_provided_types = cx.tables.user_provided_types();\n             let user_provided_type = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n             debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n-            match cx.tables().node_id_to_type(expr.hir_id).sty {\n+            match cx.tables().node_type(expr.hir_id).sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::Adt(adt_def, substs) => {\n@@ -980,11 +980,11 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                    index,\n                    closure_expr_id);\n             let var_hir_id = cx.tcx.hir().node_to_hir_id(var_id);\n-            let var_ty = cx.tables().node_id_to_type(var_hir_id);\n+            let var_ty = cx.tables().node_type(var_hir_id);\n \n             // FIXME free regions in closures are not right\n             let closure_ty = cx.tables()\n-                               .node_id_to_type(cx.tcx.hir().node_to_hir_id(closure_expr_id));\n+                               .node_type(cx.tcx.hir().node_to_hir_id(closure_expr_id));\n \n             // FIXME we're just hard-coding the idea that the\n             // signature will be &self or &mut self and hence will\n@@ -1188,7 +1188,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n-    let var_ty = cx.tables().node_id_to_type(var_hir_id);\n+    let var_ty = cx.tables().node_type(var_hir_id);\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,"}, {"sha": "8c2ab6437f9a29d1a554eb368c5dea4a6f3a11af", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             // Then, if the match has no arms, check whether the scrutinee\n             // is uninhabited.\n-            let pat_ty = self.tables.node_id_to_type(scrut.hir_id);\n+            let pat_ty = self.tables.node_type(scrut.hir_id);\n             let module = self.tcx.hir().get_module_parent(scrut.id);\n             if inlined_arms.is_empty() {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 .flat_map(|arm| &arm.0)\n                 .map(|pat| smallvec![pat.0])\n                 .collect();\n-            let scrut_ty = self.tables.node_id_to_type(scrut.hir_id);\n+            let scrut_ty = self.tables.node_type(scrut.hir_id);\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix);\n         })\n     }\n@@ -507,7 +507,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor<'_, '_>,\n                 if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                     match bm {\n                         ty::BindByValue(..) => {\n-                            let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n+                            let pat_ty = cx.tables.node_type(p.hir_id);\n                             if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n                                 check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }"}, {"sha": "fc3af3295cc114edfcd0091aed4dc48fe78f69df", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n \n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat) -> Pattern<'tcx> {\n-        let mut ty = self.tables.node_id_to_type(pat.hir_id);\n+        let mut ty = self.tables.node_type(pat.hir_id);\n \n         let kind = match pat.node {\n             PatKind::Wild => PatternKind::Wild,\n@@ -541,7 +541,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Binding(_, id, _, ident, ref sub) => {\n-                let var_ty = self.tables.node_id_to_type(pat.hir_id);\n+                let var_ty = self.tables.node_type(pat.hir_id);\n                 if let ty::Error = var_ty.sty {\n                     // Avoid ICE\n                     return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n@@ -775,7 +775,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                   id: hir::HirId,\n                   span: Span)\n                   -> Pattern<'tcx> {\n-        let ty = self.tables.node_id_to_type(id);\n+        let ty = self.tables.node_type(id);\n         let def = self.tables.qpath_def(qpath, id);\n         let is_associated_const = match def {\n             Def::AssociatedConst(_) => true,"}, {"sha": "4618cd42686fa2e4ffb251e6185051d5a412fc84", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -16,7 +16,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         let user_provided_types = self.tables().user_provided_types();\n         let mut user_ty = *user_provided_types.get(hir_id)?;\n         debug!(\"user_subts_applied_to_ty_of_hir_id: user_ty={:?}\", user_ty);\n-        match &self.tables().node_id_to_type(hir_id).sty {\n+        match &self.tables().node_type(hir_id).sty {\n             ty::Adt(adt_def, ..) => {\n                 if let UserType::TypeOf(ref mut did, _) = &mut user_ty.value {\n                     *did = adt_def.did;"}, {"sha": "c00f38c7db6f3a1d0ea8ab211002233ebe6440e0", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn check_expr(&mut self, ex: &'tcx hir::Expr) -> Promotability {\n-        let node_ty = self.tables.node_id_to_type(ex.hir_id);\n+        let node_ty = self.tables.node_type(ex.hir_id);\n         let mut outer = check_expr_kind(self, ex, node_ty);\n         outer &= check_adjustments(self, ex);\n \n@@ -306,7 +306,7 @@ fn check_expr_kind<'a, 'tcx>(\n             if v.tables.is_method_call(e) {\n                 return NotPromotable;\n             }\n-            match v.tables.node_id_to_type(lhs.hir_id).sty {\n+            match v.tables.node_type(lhs.hir_id).sty {\n                 ty::RawPtr(_) | ty::FnPtr(..) => {\n                     assert!(op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne ||\n                             op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||"}, {"sha": "0681d0d80b8c9269c1f1c351974cb7425be51712", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -933,7 +933,7 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     // Take node-id of an expression or pattern and check its type for privacy.\n     fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {\n         self.span = span;\n-        if self.visit(self.tables.node_id_to_type(id)) || self.visit(self.tables.node_substs(id)) {\n+        if self.visit(self.tables.node_type(id)) || self.visit(self.tables.node_substs(id)) {\n             return true;\n         }\n         if let Some(adjustments) = self.tables.adjustments().get(id) {\n@@ -980,7 +980,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         self.span = hir_ty.span;\n         if self.in_body {\n             // Types in bodies.\n-            if self.visit(self.tables.node_id_to_type(hir_ty.hir_id)) {\n+            if self.visit(self.tables.node_type(hir_ty.hir_id)) {\n                 return;\n             }\n         } else {"}, {"sha": "187ebf0bc4304207bb32bfe4dde2c66c603e9f82", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -245,7 +245,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n             for (id, ident, ..) in collector.collected_idents {\n                 let hir_id = self.tcx.hir().node_to_hir_id(id);\n-                let typ = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+                let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                     Some(s) => s.to_string(),\n                     None => continue,\n                 };\n@@ -863,7 +863,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             PatKind::Struct(ref _path, ref fields, _) => {\n                 // FIXME do something with _path?\n                 let hir_id = self.tcx.hir().node_to_hir_id(p.id);\n-                let adt = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+                let adt = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                     Some(ty) => ty.ty_adt_def().unwrap(),\n                     None => {\n                         visit::walk_pat(self, p);\n@@ -910,7 +910,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     let hir_id = self.tcx.hir().node_to_hir_id(id);\n                     let typ = self.save_ctxt\n                         .tables\n-                        .node_id_to_type_opt(hir_id)\n+                        .node_type_opt(hir_id)\n                         .map(|t| t.to_string())\n                         .unwrap_or_default();\n                     value.push_str(\": \");\n@@ -979,7 +979,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 _ => String::new(),\n             };\n             let hir_id = self.tcx.hir().node_to_hir_id(id);\n-            let typ = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+            let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                 Some(typ) => {\n                     let typ = typ.to_string();\n                     if !value.is_empty() {"}, {"sha": "33e93b582e5401bc40a7c48918c85dae53c891a0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         node: hir::ExprKind::MethodCall(path, span, expr),\n                         ..\n                     })), 1) = (self.tcx.hir().find(parent), decl.inputs.len()) {\n-                        let self_ty = self.tables.borrow().node_id_to_type(expr[0].hir_id);\n+                        let self_ty = self.tables.borrow().node_type(expr[0].hir_id);\n                         let self_ty = format!(\"{:?}\", self_ty);\n                         let name = path.ident.as_str();\n                         let is_as_ref_able = ("}, {"sha": "4a2d526263c03cb5ae82952e588ca75e7cba2891", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81434cbf84e8ec40186da4d54b95abcb7291fff4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=81434cbf84e8ec40186da4d54b95abcb7291fff4", "patch": "@@ -1253,7 +1253,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n         }) => {\n             if gen.is_some() {\n                 let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                return tcx.typeck_tables_of(def_id).node_id_to_type(hir_id);\n+                return tcx.typeck_tables_of(def_id).node_type(hir_id);\n             }\n \n             let substs = ty::ClosureSubsts {"}]}