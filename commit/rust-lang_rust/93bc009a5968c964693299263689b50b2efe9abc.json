{"sha": "93bc009a5968c964693299263689b50b2efe9abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYmMwMDlhNTk2OGM5NjQ2OTMyOTkyNjM2ODliNTBiMmVmZTlhYmM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-04T08:02:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Remove the state", "tree": {"sha": "88661f1cf81dc71fd531ad7ca323a85b270053ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88661f1cf81dc71fd531ad7ca323a85b270053ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93bc009a5968c964693299263689b50b2efe9abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93bc009a5968c964693299263689b50b2efe9abc", "html_url": "https://github.com/rust-lang/rust/commit/93bc009a5968c964693299263689b50b2efe9abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93bc009a5968c964693299263689b50b2efe9abc/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "html_url": "https://github.com/rust-lang/rust/commit/74c3bbacc9b352057f2fc7ab69bd13e53022beb0"}], "stats": {"total": 144, "additions": 37, "deletions": 107}, "files": [{"sha": "2dadf7e5b927779d19266de9f663aea44f1f92ec", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -4,10 +4,10 @@ use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n use ide_db::helpers::{\n-    insert_use::{self, ImportScope, ImportScopePtr, MergeBehaviour},\n+    insert_use::{self, ImportScope, MergeBehaviour},\n     mod_path_to_ast,\n };\n-use syntax::{algo, SyntaxNode, TextRange};\n+use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -275,32 +275,8 @@ pub struct ImportEdit {\n     pub merge_behaviour: Option<MergeBehaviour>,\n }\n \n-#[derive(Debug, Clone)]\n-pub struct ImportEditPtr {\n-    pub import_path: ModPath,\n-    pub import_scope: ImportScopePtr,\n-    pub merge_behaviour: Option<MergeBehaviour>,\n-}\n-\n-impl ImportEditPtr {\n-    pub fn into_import_edit(self, root: &SyntaxNode) -> Option<ImportEdit> {\n-        Some(ImportEdit {\n-            import_path: self.import_path,\n-            import_scope: self.import_scope.into_scope(root)?,\n-            merge_behaviour: self.merge_behaviour,\n-        })\n-    }\n-}\n-\n impl ImportEdit {\n-    pub fn get_edit_ptr(&self) -> ImportEditPtr {\n-        ImportEditPtr {\n-            import_path: self.import_path.clone(),\n-            import_scope: self.import_scope.get_ptr(),\n-            merge_behaviour: self.merge_behaviour,\n-        }\n-    }\n-\n+    // TODO kb remove this at all now, since it's used only once?\n     /// Attempts to insert the import to the given scope, producing a text edit.\n     /// May return no edit in edge cases, such as scope already containing the import.\n     pub fn to_text_edit(&self) -> Option<TextEdit> {"}, {"sha": "c57203c808bbb75fcd5708047967e93368461e1c", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -18,10 +18,7 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n \n pub use crate::{\n     config::{CompletionConfig, CompletionResolveCapability},\n-    item::{\n-        CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, ImportEditPtr,\n-        InsertTextFormat,\n-    },\n+    item::{CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, InsertTextFormat},\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "9e38d650634e44f8e47f95aa5f0417c95dd59b68", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n };\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionResolveCapability,\n-    CompletionScore, ImportEdit, ImportEditPtr, InsertTextFormat,\n+    CompletionScore, ImportEdit, InsertTextFormat,\n };\n pub use ide_db::{\n     call_info::CallInfo,"}, {"sha": "040843990d0d93a21c43d4283ccce5541166f6ca", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, AstNode, PathSegmentKind, VisibilityOwner,\n     },\n-    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxNodePtr, SyntaxToken,\n+    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken,\n };\n use test_utils::mark;\n \n@@ -21,36 +21,6 @@ pub enum ImportScope {\n     Module(ast::ItemList),\n }\n \n-impl ImportScope {\n-    pub fn get_ptr(&self) -> ImportScopePtr {\n-        match self {\n-            ImportScope::File(file) => ImportScopePtr::File(SyntaxNodePtr::new(file.syntax())),\n-            ImportScope::Module(module) => {\n-                ImportScopePtr::Module(SyntaxNodePtr::new(module.syntax()))\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Clone)]\n-pub enum ImportScopePtr {\n-    File(SyntaxNodePtr),\n-    Module(SyntaxNodePtr),\n-}\n-\n-impl ImportScopePtr {\n-    pub fn into_scope(self, root: &SyntaxNode) -> Option<ImportScope> {\n-        Some(match self {\n-            ImportScopePtr::File(file_ptr) => {\n-                ImportScope::File(ast::SourceFile::cast(file_ptr.to_node(root))?)\n-            }\n-            ImportScopePtr::Module(module_ptr) => {\n-                ImportScope::File(ast::SourceFile::cast(module_ptr.to_node(root))?)\n-            }\n-        })\n-    }\n-}\n-\n impl ImportScope {\n     pub fn from(syntax: SyntaxNode) -> Option<Self> {\n         if let Some(module) = ast::Module::cast(syntax.clone()) {"}, {"sha": "a27495d0d80a3ba7fc5a6b185e4e615e5f379543", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Change, FileId, ImportEditPtr};\n+use ide::{Analysis, AnalysisHost, Change, FileId};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -69,7 +69,6 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n-    pub(crate) completion_resolve_data: Arc<FxHashMap<usize, ImportEditPtr>>,\n     pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -91,7 +90,6 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n-    pub(crate) completion_resolve_data: Arc<FxHashMap<usize, ImportEditPtr>>,\n }\n \n impl GlobalState {\n@@ -123,7 +121,6 @@ impl GlobalState {\n             config,\n             analysis_host,\n             diagnostics: Default::default(),\n-            completion_resolve_data: Arc::new(FxHashMap::default()),\n             mem_docs: FxHashMap::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n@@ -194,7 +191,6 @@ impl GlobalState {\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n             mem_docs: self.mem_docs.clone(),\n             semantic_tokens_cache: Arc::clone(&self.semantic_tokens_cache),\n-            completion_resolve_data: Arc::clone(&self.completion_resolve_data),\n         }\n     }\n "}, {"sha": "dacd4ec508143673778b37902c767a710dcb3d0d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -5,7 +5,6 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n-    sync::Arc,\n };\n \n use ide::{\n@@ -26,7 +25,6 @@ use lsp_types::{\n     SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n-use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use stdx::{format_to, split_once};\n@@ -539,11 +537,10 @@ pub(crate) fn handle_runnables(\n }\n \n pub(crate) fn handle_completion(\n-    global_state: &mut GlobalState,\n+    snap: GlobalStateSnapshot,\n     params: lsp_types::CompletionParams,\n ) -> Result<Option<lsp_types::CompletionResponse>> {\n     let _p = profile::span(\"handle_completion\");\n-    let snap = global_state.snapshot();\n     let text_document_url = params.text_document_position.text_document.uri.clone();\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n     let completion_triggered_after_single_colon = {\n@@ -574,7 +571,6 @@ pub(crate) fn handle_completion(\n     };\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n-    let mut completion_resolve_data = FxHashMap::default();\n \n     let items: Vec<CompletionItem> = items\n         .into_iter()\n@@ -584,16 +580,15 @@ pub(crate) fn handle_completion(\n                 to_proto::completion_item(&line_index, line_endings, item.clone());\n \n             if snap.config.completion.resolve_additional_edits_lazily() {\n+                // TODO kb add resolve data somehow here\n                 if let Some(import_edit) = item.import_to_add() {\n-                    completion_resolve_data.insert(item_index, import_edit.get_edit_ptr());\n-\n-                    let data = serde_json::to_value(&CompletionData {\n-                        document_url: text_document_url.clone(),\n-                        import_id: item_index,\n-                    })\n-                    .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n+                    //     let data = serde_json::to_value(&CompletionData {\n+                    //         document_url: text_document_url.clone(),\n+                    //         import_id: item_index,\n+                    //     })\n+                    //     .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n                     for new_item in &mut new_completion_items {\n-                        new_item.data = Some(data.clone());\n+                        // new_item.data = Some(data.clone());\n                     }\n                 }\n             }\n@@ -602,8 +597,6 @@ pub(crate) fn handle_completion(\n         })\n         .collect();\n \n-    global_state.completion_resolve_data = Arc::new(completion_resolve_data);\n-\n     let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n }\n@@ -624,33 +617,31 @@ pub(crate) fn handle_completion_resolve(\n         return Ok(original_completion);\n     }\n \n-    let (import_edit_ptr, document_url) = match original_completion\n+    let resolve_data = match original_completion\n         .data\n-        .as_ref()\n-        .map(|data| serde_json::from_value::<CompletionData>(data.clone()))\n+        .take()\n+        .map(|data| serde_json::from_value::<CompletionResolveData>(data))\n         .transpose()?\n-        .and_then(|data| {\n-            let import_edit_ptr = snap.completion_resolve_data.get(&data.import_id).cloned();\n-            Some((import_edit_ptr, data.document_url))\n-        }) {\n+    {\n         Some(data) => data,\n         None => return Ok(original_completion),\n     };\n \n-    let file_id = from_proto::file_id(&snap, &document_url)?;\n-    let root = snap.analysis.parse(file_id)?;\n-\n-    if let Some(import_to_add) =\n-        import_edit_ptr.and_then(|import_edit| import_edit.into_import_edit(root.syntax()))\n-    {\n-        // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n-        append_import_edits(\n-            &mut original_completion,\n-            &import_to_add,\n-            snap.analysis.file_line_index(file_id)?.as_ref(),\n-            snap.file_line_endings(file_id),\n-        );\n-    }\n+    // TODO kb get the resolve data and somehow reparse the whole ast again?\n+    // let file_id = from_proto::file_id(&snap, &document_url)?;\n+    // let root = snap.analysis.parse(file_id)?;\n+\n+    // if let Some(import_to_add) =\n+    //     import_edit_ptr.and_then(|import_edit| import_edit.into_import_edit(root.syntax()))\n+    // {\n+    //     // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n+    //     append_import_edits(\n+    //         &mut original_completion,\n+    //         &import_to_add,\n+    //         snap.analysis.file_line_index(file_id)?.as_ref(),\n+    //         snap.file_line_endings(file_id),\n+    //     );\n+    // }\n \n     Ok(original_completion)\n }\n@@ -1614,7 +1605,7 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n-struct CompletionData {\n+struct CompletionResolveData {\n     document_url: Url,\n     import_id: usize,\n }"}, {"sha": "95be2ebd397e81aace24ca7da9ef316e527f74f8", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93bc009a5968c964693299263689b50b2efe9abc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=93bc009a5968c964693299263689b50b2efe9abc", "patch": "@@ -436,8 +436,6 @@ impl GlobalState {\n                 handlers::handle_matching_brace(s.snapshot(), p)\n             })?\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n-            .on_sync::<lsp_types::request::Completion>(handlers::handle_completion)?\n-            .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_completion_resolve)\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)\n@@ -455,6 +453,8 @@ impl GlobalState {\n             .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n+            .on::<lsp_types::request::Completion>(handlers::handle_completion)\n+            .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_completion_resolve)\n             .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)\n             .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)\n             .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)"}]}