{"sha": "2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlY2E2NGRlNzFkMWM3YWI1OGE1ZjhjMzhkNDI0MTkzZjAxZTVkODk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-23T13:55:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-23T20:15:21Z"}, "message": "Make unreachable_code lint warn on diverging call arguments as well\n\nFixes #1889", "tree": {"sha": "89512028daff00812b99362313fb37624c4c8cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89512028daff00812b99362313fb37624c4c8cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "html_url": "https://github.com/rust-lang/rust/commit/2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eca64de71d1c7ab58a5f8c38d424193f01e5d89/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "html_url": "https://github.com/rust-lang/rust/commit/4891c00634f209bcc66d7f00bc507eb35a0fe6a8"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "bac85e4b7001e13d8cf90e5d34efa766739635d3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2eca64de71d1c7ab58a5f8c38d424193f01e5d89/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eca64de71d1c7ab58a5f8c38d424193f01e5d89/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "patch": "@@ -2490,6 +2490,8 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // of arguments when we typecheck the functions. This isn't really the\n     // right way to do this.\n     let xs = [false, true];\n+    let mut any_diverges = false; // has any of the arguments diverged?\n+    let mut warned = false; // have we already warned about unreachable code?\n     for check_blocks in &xs {\n         let check_blocks = *check_blocks;\n         debug!(\"check_blocks={}\", check_blocks);\n@@ -2512,6 +2514,16 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             supplied_arg_count\n         };\n         for (i, arg) in args.iter().take(t).enumerate() {\n+            if any_diverges && !warned {\n+                fcx.ccx\n+                    .tcx\n+                    .sess\n+                    .add_lint(lint::builtin::UNREACHABLE_CODE,\n+                              arg.id,\n+                              arg.span,\n+                              \"unreachable expression\".to_string());\n+                warned = true;\n+            }\n             let is_block = match arg.node {\n                 hir::ExprClosure(..) => true,\n                 _ => false\n@@ -2542,7 +2554,23 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     coerce_ty.map(|ty| demand::suptype(fcx, arg.span, formal_ty, ty));\n                 });\n             }\n+\n+            if let Some(&arg_ty) = fcx.inh.tables.borrow().node_types.get(&arg.id) {\n+                any_diverges = any_diverges || fcx.infcx().type_var_diverges(arg_ty);\n+            }\n+        }\n+        if any_diverges && !warned {\n+            let parent = fcx.ccx.tcx.map.get_parent_node(args[0].id);\n+            fcx.ccx\n+                .tcx\n+                .sess\n+                .add_lint(lint::builtin::UNREACHABLE_CODE,\n+                          parent,\n+                          sp,\n+                          \"unreachable call\".to_string());\n+            warned = true;\n         }\n+\n     }\n \n     // We also need to make sure we at least write the ty of the other"}, {"sha": "61c89e3a4b4a4c6f71d7073e1214080e31a6caff", "filename": "src/test/compile-fail/unreachable-in-call.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2eca64de71d1c7ab58a5f8c38d424193f01e5d89/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eca64de71d1c7ab58a5f8c38d424193f01e5d89/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-in-call.rs?ref=2eca64de71d1c7ab58a5f8c38d424193f01e5d89", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the unboxed closure sugar can be used with an arbitrary\n+// struct type and that it is equivalent to the same syntax using\n+// angle brackets. This test covers only simple types and in\n+// particular doesn't test bound regions.\n+\n+#![allow(dead_code)]\n+#![deny(unreachable_code)]\n+\n+fn diverge() -> ! { panic!() }\n+\n+fn get_u8() -> u8 {\n+    1\n+}\n+fn call(_: u8, _: u8) {\n+\n+}\n+fn diverge_first() {\n+    call(diverge(),\n+         get_u8()); //~ ERROR unreachable expression\n+}\n+fn diverge_second() {\n+    call( //~ ERROR unreachable call\n+        get_u8(),\n+        diverge());\n+}\n+\n+fn main() {}"}]}