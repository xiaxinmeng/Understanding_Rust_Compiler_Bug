{"sha": "2e2a4797a26b0effe15815b403be4ba752cc7a0b", "node_id": "C_kwDOAAsO6NoAKDJlMmE0Nzk3YTI2YjBlZmZlMTU4MTViNDAzYmU0YmE3NTJjYzdhMGI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T12:26:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T09:53:36Z"}, "message": "Don't emit empty notes", "tree": {"sha": "35c22373d4cf4554c3bf45f178be06598c929666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c22373d4cf4554c3bf45f178be06598c929666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2a4797a26b0effe15815b403be4ba752cc7a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2a4797a26b0effe15815b403be4ba752cc7a0b", "html_url": "https://github.com/rust-lang/rust/commit/2e2a4797a26b0effe15815b403be4ba752cc7a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2a4797a26b0effe15815b403be4ba752cc7a0b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063b1675b2ed27948a7821af639a28c1a669d868", "url": "https://api.github.com/repos/rust-lang/rust/commits/063b1675b2ed27948a7821af639a28c1a669d868", "html_url": "https://github.com/rust-lang/rust/commit/063b1675b2ed27948a7821af639a28c1a669d868"}], "stats": {"total": 66, "additions": 20, "deletions": 46}, "files": [{"sha": "268f17f86fe4d3d104ac04c93dc5d45e3f2d45dc", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -1431,25 +1431,27 @@ impl EmitterWriter {\n                         };\n                         for (i, annotation) in annotations.into_iter().enumerate() {\n                             if let Some(label) = &annotation.label {\n-                                let style = if annotation.is_primary {\n-                                    Style::LabelPrimary\n-                                } else {\n-                                    Style::LabelSecondary\n-                                };\n-                                if annotation_id == 0 {\n-                                    buffer.prepend(line_idx, \" |\", Style::LineNumber);\n-                                    for _ in 0..max_line_num_len {\n-                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                if !label.is_empty() {\n+                                    let style = if annotation.is_primary {\n+                                        Style::LabelPrimary\n+                                    } else {\n+                                        Style::LabelSecondary\n+                                    };\n+                                    if annotation_id == 0 {\n+                                        buffer.prepend(line_idx, \" |\", Style::LineNumber);\n+                                        for _ in 0..max_line_num_len {\n+                                            buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                        }\n+                                        line_idx += 1;\n+                                        buffer.append(line_idx + i, \" = note: \", style);\n+                                        for _ in 0..max_line_num_len {\n+                                            buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                        }\n+                                    } else {\n+                                        buffer.append(line_idx + i, \": \", style);\n                                     }\n-                                    line_idx += 1;\n-                                    buffer.append(line_idx + i, \" = note: \", style);\n-                                    for _ in 0..max_line_num_len {\n-                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n-                                    }\n-                                } else {\n-                                    buffer.append(line_idx + i, \": \", style);\n+                                    buffer.append(line_idx + i, label, style);\n                                 }\n-                                buffer.append(line_idx + i, label, style);\n                             }\n                         }\n                     }"}, {"sha": "7dd1396529bbe8805d2c7589aa7c70a02725672e", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -6,8 +6,6 @@ LL |     match x { }\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<i32>`"}, {"sha": "ef1bb60d149253b92b9e07f7280ddcde2bd390ca", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -8,8 +8,6 @@ LL |     let Some(y) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<i32>`\n help: you might want to use `if let` to ignore the variant that isn't matched"}, {"sha": "5afa25dcb72a1c0051af09e8498a43b3e2ea53fc", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -6,8 +6,6 @@ LL |     for Some(x) in xs {}\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<i32>`\n "}, {"sha": "b26383af72fcafe9e629d23b6c1af75904e4e6e5", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -8,8 +8,6 @@ LL |     let Ok(_x) = foo();\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, !>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/result.rs:LL:COL: not covered\n    = note: the matched value is of type `Result<u32, !>`\n help: you might want to use `if let` to ignore the variant that isn't matched"}, {"sha": "e0c88f81eac2b78a7d8f1a0407ebcf1a3ebf4a27", "filename": "src/test/ui/pattern/suggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fsuggest-adding-appropriate-missing-pattern-excluding-comments.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -6,8 +6,6 @@ LL |     match Some(1) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown"}, {"sha": "35e0661189fa1e54e083786fea6d87d9a9ee8cff", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -66,8 +66,6 @@ LL |     match None {\n    |\n note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<HiddenEnum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms"}, {"sha": "12113957d6340dbc0862060d0b2072ed0ba124d4", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -107,8 +107,6 @@ LL |     match Some(A) {\n    |\n note: `Option<Enum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n    = note: the matched value is of type `Option<Enum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |"}, {"sha": "e8cfb3e70168860aa1fd7cf2885566442eb60cc6", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -8,7 +8,7 @@ note: `Box<ElementKind>` defined here\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n $SRC_DIR/alloc/src/boxed.rs:LL:COL\n $SRC_DIR/alloc/src/boxed.rs:LL:COL\n-$SRC_DIR/alloc/src/boxed.rs:LL:COL: \n+$SRC_DIR/alloc/src/boxed.rs:LL:COL\n    = note: the matched value is of type `Box<ElementKind>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |"}, {"sha": "36fc889910092dc79837842e61d2f3d1e2e03585", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -19,8 +19,6 @@ LL |     match Some(Some(North)) {\n    |\n note: `Option<Option<Direction>>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n : not covered\n    = note: the matched value is of type `Option<Option<Direction>>`"}, {"sha": "9bb15ba8a428612938a180690883a5e9e491ade2", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -6,8 +6,6 @@ LL |     match private::DATA {\n    |\n note: `Option<Private>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<Private>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown"}, {"sha": "1256867a652e03b4287624f141c904c75ef47504", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -36,8 +36,6 @@ LL |     match Some(10) {\n    |\n note: `Option<i32>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/option.rs:LL:COL: not covered\n    = note: the matched value is of type `Option<i32>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown"}, {"sha": "429f0460e89e1664fdb010ed225683eef81645d3", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -8,8 +8,6 @@ LL |     let Ok(x) = res;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, &R<'_>>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/result.rs:LL:COL: not covered\n    = note: the matched value is of type `Result<u32, &R<'_>>`\n help: you might want to use `if let` to ignore the variant that isn't matched"}, {"sha": "c375fd62877f925900112f0fa290f18971b4fbd0", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e2a4797a26b0effe15815b403be4ba752cc7a0b/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=2e2a4797a26b0effe15815b403be4ba752cc7a0b", "patch": "@@ -6,8 +6,6 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, &Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/result.rs:LL:COL: not covered\n    = note: the matched value is of type `Result<u32, &Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n@@ -85,8 +83,6 @@ LL |     let _ = match x {\n    |\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/result.rs:LL:COL: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n@@ -105,8 +101,6 @@ LL |     let Ok(x) = x;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n note: `Result<u32, Void>` defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n-   |\n-   = note: \n $SRC_DIR/core/src/result.rs:LL:COL: not covered\n    = note: the matched value is of type `Result<u32, Void>`\n help: you might want to use `if let` to ignore the variant that isn't matched"}]}