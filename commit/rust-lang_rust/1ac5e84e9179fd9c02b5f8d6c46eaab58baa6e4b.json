{"sha": "1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzVlODRlOTE3OWZkOWMwMmI1ZjhkNmM0NmVhYWI1OGJhYTZlNGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-26T22:06:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-26T23:01:15Z"}, "message": "rustc: Get rustc compiling with LLVM 3.{3,4} again\n\nThe travis builds have been breaking recently because LLVM 3.5 upstream is\nchanging. This looks like it's likely to continue, so it would be more useful\nfor us if we could lock ourselves to a system LLVM version that is not changing.\n\nThis commit has the support to bring our C++ glue to LLVM back in line with what\nwas possible back in LLVM 3.{3,4}. I don't think we're going to be able to\nreasonably protect against regressions in the future, but this kind of code is a\ngood sign that we can continue to use the system LLVM for simple-ish things.\nCodegen for ARM won't work and it won't have some of the perf improvements we\nhave, but using the system LLVM should work well enough for development.", "tree": {"sha": "e2e247e9291994e3b8edf99732e278ec1e54bd2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e247e9291994e3b8edf99732e278ec1e54bd2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "html_url": "https://github.com/rust-lang/rust/commit/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86177dbbcf65be72c8d2a4c8bc2f5dc84f5ae65c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86177dbbcf65be72c8d2a4c8bc2f5dc84f5ae65c", "html_url": "https://github.com/rust-lang/rust/commit/86177dbbcf65be72c8d2a4c8bc2f5dc84f5ae65c"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "2be7c84ab03484f34c92f40cef5709af201379f3", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "patch": "@@ -166,7 +166,11 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n   PassManager *PM = unwrap<PassManager>(PMR);\n \n   std::string ErrorInfo;\n+#if LLVM_VERSION_MINOR >= 4\n   raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n+#else\n+  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+#endif\n   if (ErrorInfo != \"\") {\n     LLVMRustError = ErrorInfo.c_str();\n     return false;\n@@ -184,9 +188,21 @@ LLVMRustPrintModule(LLVMPassManagerRef PMR,\n                     const char* path) {\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n+\n+#if LLVM_VERSION_MINOR >= 4\n   raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_None);\n+#else\n+  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+#endif\n+\n   formatted_raw_ostream FOS(OS);\n+\n+#if LLVM_VERSION_MINOR >= 5\n   PM->add(createPrintModulePass(FOS));\n+#else\n+  PM->add(createPrintModulePass(&FOS));\n+#endif\n+\n   PM->run(*unwrap(M));\n }\n "}, {"sha": "d8fc5b15850e127cef3f7eff618876ed2e484200", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "patch": "@@ -91,10 +91,14 @@ extern \"C\" void LLVMRemoveReturnAttribute(LLVMValueRef Fn, LLVMAttribute PA) {\n                       AttributeSet::get(A->getContext(), AttributeSet::ReturnIndex,  B));\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddColdAttribute(LLVMValueRef Fn) {\n   Function *A = unwrap<Function>(Fn);\n   A->addAttribute(AttributeSet::FunctionIndex, Attribute::Cold);\n }\n+#else\n+extern \"C\" void LLVMAddColdAttribute(LLVMValueRef Fn) {}\n+#endif\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n@@ -156,7 +160,11 @@ DIT unwrapDI(LLVMValueRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = DEBUG_METADATA_VERSION;\n+#else\n+extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = 1;\n+#endif\n \n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n@@ -278,8 +286,12 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n         unwrapDI<DIType>(DerivedFrom),\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang,\n-        unwrapDI<DIType>(VTableHolder),\n-        UniqueId));\n+        unwrapDI<DIType>(VTableHolder)\n+#if LLVM_VERSION_MINOR >= 5\n+        ,UniqueId));\n+#else\n+        ));\n+#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n@@ -440,8 +452,12 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         AlignInBits,\n         Flags,\n         unwrapDI<DIArray>(Elements),\n-        RunTimeLang,\n-        UniqueId));\n+        RunTimeLang\n+#if LLVM_VERSION_MINOR >= 5\n+        ,UniqueId));\n+#else\n+        ));\n+#endif\n }\n \n extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n@@ -541,6 +557,7 @@ extern \"C\" char *LLVMValueToString(LLVMValueRef Value) {\n     return strdup(os.str().data());\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n@@ -559,6 +576,26 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     }\n     return true;\n }\n+#else\n+extern \"C\" bool\n+LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n+    Module *Dst = unwrap(dst);\n+    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n+    std::string Err;\n+    Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n+    if (!Src) {\n+        LLVMRustError = Err.c_str();\n+        delete buf;\n+        return false;\n+    }\n+\n+    if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n+        LLVMRustError = Err.c_str();\n+        return false;\n+    }\n+    return true;\n+}\n+#endif\n \n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n@@ -578,9 +615,14 @@ LLVMRustOpenArchive(char *path) {\n \n extern \"C\" const char*\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n-    for (Archive::child_iterator child = ar->child_begin(),\n-                                   end = ar->child_end();\n-         child != end; ++child) {\n+#if LLVM_VERSION_MINOR >= 5\n+    Archive::child_iterator child = ar->child_begin(),\n+                              end = ar->child_end();\n+#else\n+    Archive::child_iterator child = ar->begin_children(),\n+                              end = ar->end_children();\n+#endif\n+    for (; child != end; ++child) {\n         StringRef sect_name;\n         error_code err = child->getName(sect_name);\n         if (err) continue;\n@@ -598,8 +640,15 @@ LLVMRustDestroyArchive(Archive *ar) {\n     delete ar;\n }\n \n+#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void\n LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n     GlobalValue *V = unwrap<GlobalValue>(Value);\n     V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n }\n+#else\n+extern \"C\" void\n+LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n+    LLVMSetLinkage(Value, LLVMDLLExportLinkage);\n+}\n+#endif"}, {"sha": "f046587052a120f949d6d6e29dbfc06e5f811ccd", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=1ac5e84e9179fd9c02b5f8d6c46eaab58baa6e4b", "patch": "@@ -16,7 +16,6 @@\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\"\n-#include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/Analysis/Passes.h\"\n #include \"llvm/Analysis/Lint.h\"\n #include \"llvm/ADT/ArrayRef.h\"\n@@ -52,6 +51,12 @@\n #include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n \n+#if LLVM_VERSION_MINOR >= 5\n+#include \"llvm/IR/IRPrintingPasses.h\"\n+#else\n+#include \"llvm/Assembly/PrintModulePass.h\"\n+#endif\n+\n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()\n // to get around glibc issues. See the function for more information.\n #ifdef __linux__"}]}