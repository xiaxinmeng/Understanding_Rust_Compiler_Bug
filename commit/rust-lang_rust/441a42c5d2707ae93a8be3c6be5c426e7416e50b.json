{"sha": "441a42c5d2707ae93a8be3c6be5c426e7416e50b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MWE0MmM1ZDI3MDdhZTkzYThiZTNjNmJlNWM0MjZlNzQxNmU1MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T03:04:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T03:05:28Z"}, "message": "update shape code to handle iface instances", "tree": {"sha": "af52c689c2e2b3411039455805c5193ae1052561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af52c689c2e2b3411039455805c5193ae1052561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441a42c5d2707ae93a8be3c6be5c426e7416e50b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441a42c5d2707ae93a8be3c6be5c426e7416e50b", "html_url": "https://github.com/rust-lang/rust/commit/441a42c5d2707ae93a8be3c6be5c426e7416e50b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441a42c5d2707ae93a8be3c6be5c426e7416e50b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e334c6839566dfa7d173ce6a4f83d672d223114", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e334c6839566dfa7d173ce6a4f83d672d223114", "html_url": "https://github.com/rust-lang/rust/commit/0e334c6839566dfa7d173ce6a4f83d672d223114"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "a96c3739ca3f52712279c0c75a636f0fdaaa1fe7", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=441a42c5d2707ae93a8be3c6be5c426e7416e50b", "patch": "@@ -110,6 +110,11 @@ class irc : public shape::data<irc,shape::ptr> {\n         maybe_record_irc(ref_count_dp);\n     }\n \n+    void walk_iface() {\n+        // an iface is always a ptr to a ref-counted obj.\n+        shape::data<irc,shape::ptr>::walk_box_contents();\n+    }\n+\n     void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n                   const shape::type_param *params, const uint8_t *end_sp,\n                   bool live) {\n@@ -497,6 +502,10 @@ class sweep : public shape::data<sweep,shape::ptr> {\n         return;\n     }\n \n+    void walk_iface() {\n+        shape::data<sweep,shape::ptr>::walk_box_contents();\n+    }\n+\n     void walk_res(const shape::rust_fn *dtor, unsigned n_params,\n                   const shape::type_param *params, const uint8_t *end_sp,\n                   bool live) {"}, {"sha": "f9300cad443b7a3b06662135c955b4dc742e84a3", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=441a42c5d2707ae93a8be3c6be5c426e7416e50b", "patch": "@@ -260,6 +260,23 @@ struct rust_opaque_closure;\n //   no arguments (and hence the final void*) is harmless\n typedef void (*CDECL spawn_fn)(void*, rust_opaque_closure*, void *);\n \n+// corresponds to the layout of an iface value\n+//\n+// Note: eventually, we should inline the contents of opaque_iface_contents\n+// into opaque_iface in the LLVM code.  Otherwise, the alignment of\n+// opaque_iface_contents depends on the opaque data!\n+\n+struct opaque_iface_contents {\n+    const type_desc *td; // describes opaque_iface_contents\n+    const void *vtable;\n+    // (opaque data goes here)\n+};\n+\n+struct opaque_iface {\n+    intptr_t ref_count;\n+    opaque_iface_contents contents;\n+};\n+\n // corresponds to the layout of a fn(), fn@(), fn~() etc\n struct fn_env_pair {\n     spawn_fn f;"}, {"sha": "ca8cd2c88a54c24556bef50495157ab68bf3a9b2", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=441a42c5d2707ae93a8be3c6be5c426e7416e50b", "patch": "@@ -868,7 +868,12 @@ class data : public ctxt< data<T,U> > {\n         dp = next_dp;\n     }\n \n-    void walk_iface() { DATA_SIMPLE(void *, walk_iface()); }\n+    void walk_iface() {\n+        ALIGN_TO(alignof<void *>());\n+        U next_dp = dp + sizeof(void *) * 2;\n+        static_cast<T *>(this)->walk_iface();\n+        dp = next_dp;\n+    }\n \n     void walk_res(const rust_fn *dtor, unsigned n_params,\n                   const type_param *params, const uint8_t *end_sp) {\n@@ -999,17 +1004,11 @@ data<T,U>::walk_obj_contents(ptr &dp) {\n template<typename T,typename U>\n void\n data<T,U>::walk_iface_value(ptr &dp) {\n-    uint8_t *box_ptr = bump_dp<uint8_t *>(dp);\n+    opaque_iface *box_ptr = bump_dp<opaque_iface *>(dp);\n     if (!box_ptr) return;\n-    uint8_t *body_ptr = box_ptr + sizeof(void*);\n-    type_desc *valtydesc =\n-        *reinterpret_cast<type_desc **>(body_ptr);\n-    ptr value_dp(body_ptr + sizeof(void*) * 2);\n-    // FIXME The 5 is a hard-coded way to skip over a struct shape\n-    // header and the first two (number-typed) fields. This is too\n-    // fragile, but I didn't see a good way to properly encode it.\n-    T sub(*static_cast<T *>(this), valtydesc->shape + 5, NULL, NULL,\n-          value_dp);\n+    const type_desc *contents_td = box_ptr->contents.td;\n+    ptr contents_dp((uintptr_t)&box_ptr->contents);\n+    T sub(*static_cast<T *>(this), contents_td->shape, NULL, NULL, contents_dp);\n     sub.align = true;\n     sub.walk();\n }"}, {"sha": "05da479f86478a9f69ff5abfed9c2ccd0afd8b15", "filename": "src/test/run-pass/iface-cast.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441a42c5d2707ae93a8be3c6be5c426e7416e50b/src%2Ftest%2Frun-pass%2Fiface-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-cast.rs?ref=441a42c5d2707ae93a8be3c6be5c426e7416e50b", "patch": "@@ -0,0 +1,45 @@\n+// Test cyclic detector when using iface instances.\n+\n+tag Tree = TreeR;\n+type TreeR = @{\n+    mutable left: option<Tree>,\n+    mutable right: option<Tree>,\n+    val: to_str\n+};\n+\n+iface to_str {\n+    fn to_str() -> str;\n+}\n+\n+impl <T: to_str> of to_str for option<T> {\n+    fn to_str() -> str {\n+        alt self {\n+          none. { \"none\" }\n+          some(t) { \"some(\" + t.to_str() + \")\" }\n+        }\n+    }\n+}\n+\n+impl of to_str for int {\n+    fn to_str() -> str { int::str(self) }\n+}\n+\n+impl of to_str for Tree {\n+    fn to_str() -> str {\n+        #fmt[\"[%s, %s, %s]\",\n+             self.val.to_str(),\n+             self.left.to_str(),\n+             self.right.to_str()]\n+    }\n+}\n+\n+fn main() {\n+    let t1 = Tree(@{mutable left: none,\n+                    mutable right: none,\n+                    val: 1 as to_str });\n+    let t2 = Tree(@{mutable left: some(t1),\n+                    mutable right: some(t1),\n+                    val: 2 as to_str });\n+    assert t2.to_str() == \"[2, some([1, none, none]), some([1, none, none])]\";\n+    t1.left = some(t2); // create cycle\n+}"}]}