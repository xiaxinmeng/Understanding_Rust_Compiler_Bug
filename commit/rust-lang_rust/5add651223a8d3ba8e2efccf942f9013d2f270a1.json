{"sha": "5add651223a8d3ba8e2efccf942f9013d2f270a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGQ2NTEyMjNhOGQzYmE4ZTJlZmNjZjk0MmY5MDEzZDJmMjcwYTE=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-09T13:00:24Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-09T13:00:24Z"}, "message": "Remove lints_enabled function\n\nThis function was redundant with the is_allowed function. Now is_allowed\nis used everywhere lints_enabled was used before.", "tree": {"sha": "bfc393e5fa525cb73d1ab7295f6e9d60801f6853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc393e5fa525cb73d1ab7295f6e9d60801f6853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5add651223a8d3ba8e2efccf942f9013d2f270a1", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDoSKkACgkQHKDfKvWd\naKVc5Q//R8C8anv16hoKZ9IYzYlDF/8cia5josdT2gT8tfAvG3XIvFie5Ec6jT7L\nto7htw4U8no69q43J3YxQS0xxhYMswq2ag+hZC2pBYgx9xtZIaucIS7Xl9OlQ+yA\nG9wcZDBU5O3bmpA5ApT1sXOfnM3relFqLUxJE0K2EMwXvklwCGFYJc5DB9Hh/Voh\nRdB6pAAzb0rmgpU7K3hCqCo3wkLpE6XYby8ZsPHwE3EePwRW3v/EKl+fKxflPEBa\nCVVCCCpHxMpv2jaZD8x3aNQNh1laO/2ZzzTtB1o2LgyatdYFdBVmVQ+Tjn/cYHgo\n1OaZPShWxskE/05EaedEe0FxtaMi51QRgynlilu7q+gnwhYzs6djDWjDyeSezaWV\nZ/BnWaW8wd43PqdWcepgUD1SV+ZvcVchbc7cjMcVVmK+0QjJo4+kpLXN3y3id6ST\nTBf2AB7SkmrcPannuf4+OKEV+F2e37It5bQk+CEnd139x6JwoR7ZsEL70N7/ZOL6\nUE7S7x5i/mwdZH/HNYIRl6IKcPoDH5IV8ZRuV022kfyHz3gXmoDzOLsL52/Ag7Qt\nlenQ0nAqin2P5q4TaZibLMV6zW4Ay9me1UoxQADiDABJ3v0RBpv95Nx2Rh8SVy0M\nNXSbW2v3m+0f+8O4c3YggdUoxWD+5VrjHyBoSk4s+Cew2AWyWVw=\n=xxCE\n-----END PGP SIGNATURE-----", "payload": "tree bfc393e5fa525cb73d1ab7295f6e9d60801f6853\nparent 8da39e66accb19d655d8675fc523750dc7ddf207\nauthor flip1995 <philipp.krones@embecosm.com> 1625835624 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1625835624 +0200\n\nRemove lints_enabled function\n\nThis function was redundant with the is_allowed function. Now is_allowed\nis used everywhere lints_enabled was used before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5add651223a8d3ba8e2efccf942f9013d2f270a1", "html_url": "https://github.com/rust-lang/rust/commit/5add651223a8d3ba8e2efccf942f9013d2f270a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5add651223a8d3ba8e2efccf942f9013d2f270a1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da39e66accb19d655d8675fc523750dc7ddf207", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da39e66accb19d655d8675fc523750dc7ddf207", "html_url": "https://github.com/rust-lang/rust/commit/8da39e66accb19d655d8675fc523750dc7ddf207"}], "stats": {"total": 55, "additions": 17, "deletions": 38}, "files": [{"sha": "edb60bc9b7d28fa5eaceabcdcbba12fa8db6fe83", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -2,8 +2,7 @@\n \n use std::path::PathBuf;\n \n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::lints_enabled;\n+use clippy_utils::{diagnostics::span_lint, is_allowed};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -85,7 +84,7 @@ fn is_empty_vec(value: &[String]) -> bool {\n \n impl LateLintPass<'_> for CargoCommonMetadata {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !lints_enabled(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n+        if is_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "7a0edfca4c2a3f82423bdf672a5f0c5d1816bc7a", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n-    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_else_clause,\n-    lints_enabled, search_same, ContainsName, SpanlessEq, SpanlessHash,\n+    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_allowed,\n+    is_else_clause, search_same, ContainsName, SpanlessEq, SpanlessHash,\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n@@ -337,8 +337,8 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<\n             if block_expr_eq;\n             if l_stmts.len() == r_stmts.len();\n             if l_stmts.len() == current_start_eq;\n-            if lints_enabled(cx, &[IF_SAME_THEN_ELSE], win[0].hir_id);\n-            if lints_enabled(cx, &[IF_SAME_THEN_ELSE], win[1].hir_id);\n+            if !is_allowed(cx, IF_SAME_THEN_ELSE, win[0].hir_id);\n+            if !is_allowed(cx, IF_SAME_THEN_ELSE, win[1].hir_id);\n             then {\n                 span_lint_and_note(\n                     cx,"}, {"sha": "6a50c970909266ad604e2b4dc5996fc948efc15d", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -1,7 +1,7 @@\n //! lint on multiple versions of a crate being used\n \n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::lints_enabled;\n+use clippy_utils::is_allowed;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::{Crate, CRATE_HIR_ID};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -39,7 +39,7 @@ declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n impl LateLintPass<'_> for MultipleCrateVersions {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !lints_enabled(cx, &[MULTIPLE_CRATE_VERSIONS], CRATE_HIR_ID) {\n+        if is_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "cbaacddd80437ee814b77a230bb392a26c3038b4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use clippy_utils::{\n-    is_else_clause, is_expn_of, is_expr_path_def_path, lints_enabled, match_def_path, method_calls, path_to_res, paths,\n+    is_allowed, is_else_clause, is_expn_of, is_expr_path_def_path, match_def_path, method_calls, path_to_res, paths,\n     SpanlessEq,\n };\n use if_chain::if_chain;\n@@ -353,7 +353,7 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if !lints_enabled(cx, &[DEFAULT_LINT], item.hir_id()) {\n+        if is_allowed(cx, DEFAULT_LINT, item.hir_id()) {\n             return;\n         }\n \n@@ -411,7 +411,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, _: &'tcx Crate<'_>) {\n-        if !lints_enabled(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n+        if is_allowed(cx, LINT_WITHOUT_LINT_PASS, CRATE_HIR_ID) {\n             return;\n         }\n \n@@ -497,7 +497,7 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !lints_enabled(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n+        if is_allowed(cx, COMPILER_LINT_FUNCTIONS, expr.hir_id) {\n             return;\n         }\n \n@@ -526,7 +526,7 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !lints_enabled(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n+        if is_allowed(cx, OUTER_EXPN_EXPN_DATA, expr.hir_id) {\n             return;\n         }\n \n@@ -576,7 +576,7 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !lints_enabled(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n+        if is_allowed(cx, COLLAPSIBLE_SPAN_LINT_CALLS, expr.hir_id) {\n             return;\n         }\n \n@@ -757,7 +757,7 @@ declare_lint_pass!(MatchTypeOnDiagItem => [MATCH_TYPE_ON_DIAGNOSTIC_ITEM]);\n \n impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !lints_enabled(cx, &[MATCH_TYPE_ON_DIAGNOSTIC_ITEM], expr.hir_id) {\n+        if is_allowed(cx, MATCH_TYPE_ON_DIAGNOSTIC_ITEM, expr.hir_id) {\n             return;\n         }\n "}, {"sha": "df5127b00eeaa246cd10afbea3a526a247e92e82", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -1,5 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::lints_enabled;\n+use clippy_utils::{diagnostics::span_lint, is_allowed};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -31,7 +30,7 @@ declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n impl LateLintPass<'_> for WildcardDependencies {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n-        if !lints_enabled(cx, &[WILDCARD_DEPENDENCIES], CRATE_HIR_ID) {\n+        if is_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n             return;\n         }\n "}, {"sha": "121ca2da511d496d8488f633897333febd6cf283", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5add651223a8d3ba8e2efccf942f9013d2f270a1/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=5add651223a8d3ba8e2efccf942f9013d2f270a1", "patch": "@@ -1541,25 +1541,6 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n     }\n }\n \n-/// This function checks if any of the lints in the slice is enabled for the provided `HirId`.\n-/// A lint counts as enabled with any of the levels: `Level::Forbid` | `Level::Deny` | `Level::Warn`\n-///\n-/// ```ignore\n-/// #[deny(clippy::YOUR_AWESOME_LINT)]\n-/// println!(\"Hello, World!\"); // <- Clippy code: lints_enabled(cx, &[YOUR_AWESOME_LINT], id) == true\n-///\n-/// #[allow(clippy::YOUR_AWESOME_LINT)]\n-/// println!(\"See you soon!\"); // <- Clippy code: lints_enabled(cx, &[YOUR_AWESOME_LINT], id) == false\n-/// ```\n-pub fn lints_enabled(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n-    lints.iter().any(|lint| {\n-        matches!(\n-            cx.tcx.lint_level_at_node(lint, id),\n-            (Level::Forbid | Level::Deny | Level::Warn, _)\n-        )\n-    })\n-}\n-\n /// Returns Option<String> where String is a textual representation of the type encapsulated in the\n /// slice iff the given expression is a slice of primitives (as defined in the\n /// `is_recursively_primitive_type` function) and None otherwise."}]}