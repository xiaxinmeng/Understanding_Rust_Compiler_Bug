{"sha": "386300d4b0400aa0e9c8dfcca22a814599fa951e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NjMwMGQ0YjA0MDBhYTBlOWM4ZGZjY2EyMmE4MTQ1OTlmYTk1MWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-18T23:43:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` the `node_type_substs` table", "tree": {"sha": "d94b9b4cfffffdd3fb906ecf3bd34c960c321557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94b9b4cfffffdd3fb906ecf3bd34c960c321557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/386300d4b0400aa0e9c8dfcca22a814599fa951e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/386300d4b0400aa0e9c8dfcca22a814599fa951e", "html_url": "https://github.com/rust-lang/rust/commit/386300d4b0400aa0e9c8dfcca22a814599fa951e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/386300d4b0400aa0e9c8dfcca22a814599fa951e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fffbe7a8cdf2378a3c5617d1600cf2d31b7a357f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fffbe7a8cdf2378a3c5617d1600cf2d31b7a357f", "html_url": "https://github.com/rust-lang/rust/commit/fffbe7a8cdf2378a3c5617d1600cf2d31b7a357f"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "768d0e67893bc342c4dbcdde343a58e773c312b1", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=386300d4b0400aa0e9c8dfcca22a814599fa951e", "patch": "@@ -923,7 +923,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = tcx.node_type_substs.find(&id);\n+        let node_type_substs = tcx.node_type_substs.borrow();\n+        let r = node_type_substs.get().find(&id);\n         for tys in r.iter() {\n             ebml_w.tag(c::tag_table_node_type_subst, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1228,7 +1229,10 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     }\n                     c::tag_table_node_type_subst => {\n                         let tys = val_dsr.read_tys(xcx);\n-                        dcx.tcx.node_type_substs.insert(id, tys);\n+                        let mut node_type_substs = dcx.tcx\n+                                                      .node_type_substs\n+                                                      .borrow_mut();\n+                        node_type_substs.get().insert(id, tys);\n                     }\n                     c::tag_table_freevars => {\n                         let fv_info = @val_dsr.read_to_vec(|val_dsr| {"}, {"sha": "ba5d1dcd7fdb441786995baddec783200e3a1267", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=386300d4b0400aa0e9c8dfcca22a814599fa951e", "patch": "@@ -264,7 +264,8 @@ pub fn check_expr(cx: &mut Context, e: @Expr) {\n         None => e.id,\n     };\n     {\n-        let r = cx.tcx.node_type_substs.find(&type_parameter_id);\n+        let node_type_substs = cx.tcx.node_type_substs.borrow();\n+        let r = node_type_substs.get().find(&type_parameter_id);\n         for ts in r.iter() {\n             let type_param_defs = match e.node {\n               ExprPath(_) => {\n@@ -326,7 +327,8 @@ pub fn check_expr(cx: &mut Context, e: @Expr) {\n fn check_ty(cx: &mut Context, aty: &Ty) {\n     match aty.node {\n       ty_path(_, _, id) => {\n-          let r = cx.tcx.node_type_substs.find(&id);\n+          let node_type_substs = cx.tcx.node_type_substs.borrow();\n+          let r = node_type_substs.get().find(&id);\n           for ts in r.iter() {\n               let did = ast_util::def_id_of_def(cx.tcx.def_map.get_copy(&id));\n               let type_param_defs ="}, {"sha": "041fda79081b810eb47a8febe94412ba4e24d7f0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=386300d4b0400aa0e9c8dfcca22a814599fa951e", "patch": "@@ -284,7 +284,7 @@ struct ctxt_ {\n     // of this node.  This only applies to nodes that refer to entities\n     // parameterized by type parameters, such as generic fns, types, or\n     // other items.\n-    node_type_substs: @mut HashMap<NodeId, ~[t]>,\n+    node_type_substs: RefCell<HashMap<NodeId, ~[t]>>,\n \n     // Maps from a method to the method \"descriptor\"\n     methods: @mut HashMap<DefId, @Method>,\n@@ -985,7 +985,7 @@ pub fn mk_ctxt(s: session::Session,\n         def_map: dm,\n         region_maps: region_maps,\n         node_types: @mut HashMap::new(),\n-        node_type_substs: @mut HashMap::new(),\n+        node_type_substs: RefCell::new(HashMap::new()),\n         trait_refs: @mut HashMap::new(),\n         trait_defs: @mut HashMap::new(),\n         items: amap,\n@@ -2676,14 +2676,16 @@ pub fn node_id_to_type(cx: ctxt, id: ast::NodeId) -> t {\n \n // XXX(pcwalton): Makes a copy, bleh. Probably better to not do that.\n pub fn node_id_to_type_params(cx: ctxt, id: ast::NodeId) -> ~[t] {\n-    match cx.node_type_substs.find(&id) {\n+    let node_type_substs = cx.node_type_substs.borrow();\n+    match node_type_substs.get().find(&id) {\n       None => return ~[],\n       Some(ts) => return (*ts).clone(),\n     }\n }\n \n fn node_id_has_type_params(cx: ctxt, id: ast::NodeId) -> bool {\n-    cx.node_type_substs.contains_key(&id)\n+    let node_type_substs = cx.node_type_substs.borrow();\n+    node_type_substs.get().contains_key(&id)\n }\n \n pub fn fn_is_variadic(fty: t) -> bool {"}, {"sha": "0b2ee859feae3a5f1f69d67c670ac3167ce21b12", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=386300d4b0400aa0e9c8dfcca22a814599fa951e", "patch": "@@ -163,7 +163,7 @@ pub struct Inherited {\n \n     // Temporary tables:\n     node_types: @mut HashMap<ast::NodeId, ty::t>,\n-    node_type_substs: @mut HashMap<ast::NodeId, ty::substs>,\n+    node_type_substs: RefCell<HashMap<ast::NodeId, ty::substs>>,\n     adjustments: @mut HashMap<ast::NodeId, @ty::AutoAdjustment>,\n     method_map: method_map,\n     vtable_map: vtable_map,\n@@ -263,7 +263,7 @@ impl Inherited {\n             locals: @mut HashMap::new(),\n             param_env: param_env,\n             node_types: @mut HashMap::new(),\n-            node_type_substs: @mut HashMap::new(),\n+            node_type_substs: RefCell::new(HashMap::new()),\n             adjustments: @mut HashMap::new(),\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n@@ -1106,7 +1106,9 @@ impl FnCtxt {\n                    node_id,\n                    ty::substs_to_str(self.tcx(), &substs),\n                    self.tag());\n-            self.inh.node_type_substs.insert(node_id, substs);\n+\n+            let mut node_type_substs = self.inh.node_type_substs.borrow_mut();\n+            node_type_substs.get().insert(node_id, substs);\n         }\n     }\n \n@@ -1181,7 +1183,8 @@ impl FnCtxt {\n     }\n \n     pub fn node_ty_substs(&self, id: ast::NodeId) -> ty::substs {\n-        match self.inh.node_type_substs.find(&id) {\n+        let mut node_type_substs = self.inh.node_type_substs.borrow_mut();\n+        match node_type_substs.get().find(&id) {\n             Some(ts) => (*ts).clone(),\n             None => {\n                 self.tcx().sess.bug(\n@@ -1197,7 +1200,8 @@ impl FnCtxt {\n                               id: ast::NodeId,\n                               f: |&ty::substs| -> bool)\n                               -> bool {\n-        match self.inh.node_type_substs.find(&id) {\n+        let node_type_substs = self.inh.node_type_substs.borrow();\n+        match node_type_substs.get().find(&id) {\n             Some(s) => f(s),\n             None => true\n         }"}, {"sha": "c606e264865b17b316a5001e0f37bcbf65f740d5", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/386300d4b0400aa0e9c8dfcca22a814599fa951e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=386300d4b0400aa0e9c8dfcca22a814599fa951e", "patch": "@@ -248,7 +248,9 @@ pub fn write_substs_to_tcx(tcx: ty::ctxt,\n         debug!(\"write_substs_to_tcx({}, {:?})\", node_id,\n                substs.map(|t| ppaux::ty_to_str(tcx, *t)));\n         assert!(substs.iter().all(|t| !ty::type_needs_infer(*t)));\n-        tcx.node_type_substs.insert(node_id, substs);\n+\n+        let mut node_type_substs = tcx.node_type_substs.borrow_mut();\n+        node_type_substs.get().insert(node_id, substs);\n     }\n }\n pub fn write_tpt_to_tcx(tcx: ty::ctxt,"}]}