{"sha": "779ea2ea0a0aa70075d28d72dd96c1bc1e709300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWVhMmVhMGEwYWE3MDA3NWQyOGQ3MmRkOTZjMWJjMWU3MDkzMDA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-11T19:16:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-11T19:16:22Z"}, "message": "Properly preserve macro braces", "tree": {"sha": "23ae2d96ae3660fa318bf7692501c5cc1cd1abd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ae2d96ae3660fa318bf7692501c5cc1cd1abd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779ea2ea0a0aa70075d28d72dd96c1bc1e709300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779ea2ea0a0aa70075d28d72dd96c1bc1e709300", "html_url": "https://github.com/rust-lang/rust/commit/779ea2ea0a0aa70075d28d72dd96c1bc1e709300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779ea2ea0a0aa70075d28d72dd96c1bc1e709300/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab7543290573081484c99aa7ca4585bc4d45747", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab7543290573081484c99aa7ca4585bc4d45747", "html_url": "https://github.com/rust-lang/rust/commit/fab7543290573081484c99aa7ca4585bc4d45747"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "a8ab2aecc405b95f016c0687c0dbfa97d98b9b60", "filename": "crates/assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/779ea2ea0a0aa70075d28d72dd96c1bc1e709300/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779ea2ea0a0aa70075d28d72dd96c1bc1e709300/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=779ea2ea0a0aa70075d28d72dd96c1bc1e709300", "patch": "@@ -43,15 +43,18 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n fn adjusted_macro_contents(macro_call: &ast::MacroCall) -> Option<String> {\n     let contents = get_valid_macrocall_contents(&macro_call, \"dbg\")?;\n-    let is_leaf = macro_call.syntax().next_sibling().is_none();\n     let macro_text_with_brackets = macro_call.token_tree()?.syntax().text();\n-    let slice_index = if is_leaf || !needs_parentheses_around_macro_contents(contents) {\n-        TextRange::new(TextSize::of('('), macro_text_with_brackets.len() - TextSize::of(')'))\n+    let macro_text_in_brackets = macro_text_with_brackets.slice(TextRange::new(\n+        TextSize::of('('),\n+        macro_text_with_brackets.len() - TextSize::of(')'),\n+    ));\n+\n+    let is_leaf = macro_call.syntax().next_sibling().is_none();\n+    Some(if !is_leaf && needs_parentheses_around_macro_contents(contents) {\n+        format!(\"({})\", macro_text_in_brackets)\n     } else {\n-        // leave parenthesis around macro contents to preserve the semantics\n-        TextRange::up_to(macro_text_with_brackets.len())\n-    };\n-    Some(macro_text_with_brackets.slice(slice_index).to_string())\n+        macro_text_in_brackets.to_string()\n+    })\n }\n \n /// Verifies that the given macro_call actually matches the given name\n@@ -90,19 +93,10 @@ fn needs_parentheses_around_macro_contents(macro_contents: Vec<SyntaxElement>) -\n     if macro_contents.len() < 2 {\n         return false;\n     }\n-\n-    let mut macro_contents_kind_not_in_brackets = Vec::with_capacity(macro_contents.len());\n-\n-    let mut first_bracket_in_macro = None;\n     let mut unpaired_brackets_in_contents = Vec::new();\n     for element in macro_contents {\n         match element.kind() {\n-            T!['('] | T!['['] | T!['{'] => {\n-                if let None = first_bracket_in_macro {\n-                    first_bracket_in_macro = Some(element.clone())\n-                }\n-                unpaired_brackets_in_contents.push(element);\n-            }\n+            T!['('] | T!['['] | T!['{'] => unpaired_brackets_in_contents.push(element),\n             T![')'] => {\n                 if !matches!(unpaired_brackets_in_contents.pop(), Some(correct_bracket) if correct_bracket.kind() == T!['('])\n                 {\n@@ -121,19 +115,15 @@ fn needs_parentheses_around_macro_contents(macro_contents: Vec<SyntaxElement>) -\n                     return true;\n                 }\n             }\n-            other_kind => {\n-                if unpaired_brackets_in_contents.is_empty() {\n-                    macro_contents_kind_not_in_brackets.push(other_kind);\n+            symbol_kind => {\n+                let symbol_not_in_bracket = unpaired_brackets_in_contents.is_empty();\n+                if symbol_not_in_bracket && symbol_kind.is_punct() {\n+                    return true;\n                 }\n             }\n         }\n     }\n-\n     !unpaired_brackets_in_contents.is_empty()\n-        || matches!(first_bracket_in_macro, Some(bracket) if bracket.kind() != T!['('])\n-        || macro_contents_kind_not_in_brackets\n-            .into_iter()\n-            .any(|macro_contents_kind| macro_contents_kind.is_punct())\n }\n \n #[cfg(test)]\n@@ -244,6 +234,7 @@ fn main() {\n         );\n \n         check_assist(remove_dbg, r#\"let res = <|>dbg!(2 + 2) * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n+        check_assist(remove_dbg, r#\"let res = <|>dbg![2 + 2] * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n     }\n \n     #[test]"}]}