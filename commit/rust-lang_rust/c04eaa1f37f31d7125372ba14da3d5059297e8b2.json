{"sha": "c04eaa1f37f31d7125372ba14da3d5059297e8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNGVhYTFmMzdmMzFkNzEyNTM3MmJhMTRkYTNkNTA1OTI5N2U4YjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-17T18:45:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-17T18:45:29Z"}, "message": "Merge #8766\n\n8766: Extract function assist will add async if required r=Veykril a=JamieCunliffe\n\nThe extract function assist will check for an AWAIT_EXPR or AWAIT_KW in the body and if found, will add async to the generated function.\r\n\r\ncloses #8232\n\nCo-authored-by: Jamie Cunliffe <Jamie.Cunliffe@outlook.com>", "tree": {"sha": "01ee63eaae45c14e90b62bc341a38ce4176a7d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ee63eaae45c14e90b62bc341a38ce4176a7d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04eaa1f37f31d7125372ba14da3d5059297e8b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgornJCRBK7hj4Ov3rIwAATSAIACYZpwifUPJOsptDr+udxamy\n9UMMYfBcM42NL+k8xkeOsuVeX/72sUT182AAWGjSOtphtzI2SIZjgrTVT8jtJ68x\n4kglwJ8Ju0ZJWPA3LfNlAsSDAipYXFfxHvltAXjxIrvYLBXzj8gqF5xexwh+B44U\nS6+0kmXXrcDhgPKyPDmv5/M4ax4l3J3qxKc16r9TRoJCZkyKgcWbwAUGnA+uOuVs\nsx+vusqYw5hPlFR8wPuegigTdhCfASFvB8aOKZ6fdmrWCx5ksPYtrsZY5lbjfVaE\nJkvWbx6c8qeOT5EWPEUgLbw3x0xmtBJM8BG1eLOWKytwOWiu+XuUxq8kbVz1/MM=\n=3C9b\n-----END PGP SIGNATURE-----\n", "payload": "tree 01ee63eaae45c14e90b62bc341a38ce4176a7d1f\nparent 459b0332d3a4905fa9bc93c484538e74d191c80b\nparent 74f8fe77632b992e6b28e98b6027d4e8ffd29398\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621277129 +0000\ncommitter GitHub <noreply@github.com> 1621277129 +0000\n\nMerge #8766\n\n8766: Extract function assist will add async if required r=Veykril a=JamieCunliffe\n\nThe extract function assist will check for an AWAIT_EXPR or AWAIT_KW in the body and if found, will add async to the generated function.\r\n\r\ncloses #8232\n\nCo-authored-by: Jamie Cunliffe <Jamie.Cunliffe@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04eaa1f37f31d7125372ba14da3d5059297e8b2", "html_url": "https://github.com/rust-lang/rust/commit/c04eaa1f37f31d7125372ba14da3d5059297e8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04eaa1f37f31d7125372ba14da3d5059297e8b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459b0332d3a4905fa9bc93c484538e74d191c80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/459b0332d3a4905fa9bc93c484538e74d191c80b", "html_url": "https://github.com/rust-lang/rust/commit/459b0332d3a4905fa9bc93c484538e74d191c80b"}, {"sha": "74f8fe77632b992e6b28e98b6027d4e8ffd29398", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f8fe77632b992e6b28e98b6027d4e8ffd29398", "html_url": "https://github.com/rust-lang/rust/commit/74f8fe77632b992e6b28e98b6027d4e8ffd29398"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "a2dba915cea37c5609bd264492071fa64c61b20e", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c04eaa1f37f31d7125372ba14da3d5059297e8b2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04eaa1f37f31d7125372ba14da3d5059297e8b2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c04eaa1f37f31d7125372ba14da3d5059297e8b2", "patch": "@@ -642,6 +642,10 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n         .collect()\n }\n \n+fn body_contains_await(body: &FunctionBody) -> bool {\n+    body.descendants().any(|d| matches!(d.kind(), SyntaxKind::AWAIT_EXPR))\n+}\n+\n /// find `self` param, that was not defined inside `body`\n ///\n /// It should skip `self` params from impls inside `body`\n@@ -1123,9 +1127,10 @@ fn format_function(\n     let params = make_param_list(ctx, module, fun);\n     let ret_ty = make_ret_ty(ctx, module, fun);\n     let body = make_body(ctx, old_indent, new_indent, fun);\n+    let async_kw = if body_contains_await(&fun.body) { \"async \" } else { \"\" };\n     match ctx.config.snippet_cap {\n-        Some(_) => format_to!(fn_def, \"\\n\\n{}fn $0{}{}\", new_indent, fun.name, params),\n-        None => format_to!(fn_def, \"\\n\\n{}fn {}{}\", new_indent, fun.name, params),\n+        Some(_) => format_to!(fn_def, \"\\n\\n{}{}fn $0{}{}\", new_indent, async_kw, fun.name, params),\n+        None => format_to!(fn_def, \"\\n\\n{}{}fn {}{}\", new_indent, async_kw, fun.name, params),\n     }\n     if let Some(ret_ty) = ret_ty {\n         format_to!(fn_def, \" {}\", ret_ty);\n@@ -3565,4 +3570,60 @@ fn $0fun_name(n: i32) -> i32 {\n }\",\n         );\n     }\n+\n+    #[test]\n+    fn extract_with_await() {\n+        check_assist(\n+            extract_function,\n+            r#\"fn main() {\n+    $0some_function().await;$0\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    fun_name();\n+}\n+\n+async fn $0fun_name() {\n+    some_function().await;\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_with_await_in_args() {\n+        check_assist(\n+            extract_function,\n+            r#\"fn main() {\n+    $0function_call(\"a\", some_function().await);$0\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    fun_name();\n+}\n+\n+async fn $0fun_name() {\n+    function_call(\"a\", some_function().await);\n+}\n+\n+async fn some_function() {\n+\n+}\n+\"#,\n+        );\n+    }\n }"}]}