{"sha": "8cbaebbb49a875728f95d413d7352f77cc97d04c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYmFlYmJiNDlhODc1NzI4Zjk1ZDQxM2Q3MzUyZjc3Y2M5N2QwNGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T22:52:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T22:53:16Z"}, "message": "rustc: Get reference typedefs working", "tree": {"sha": "cc4edc7021f3f8697d1e466156446f7252dbae03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc4edc7021f3f8697d1e466156446f7252dbae03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cbaebbb49a875728f95d413d7352f77cc97d04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbaebbb49a875728f95d413d7352f77cc97d04c", "html_url": "https://github.com/rust-lang/rust/commit/8cbaebbb49a875728f95d413d7352f77cc97d04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cbaebbb49a875728f95d413d7352f77cc97d04c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b968c8e6cd362567bf0047a96d261691dfca43e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b968c8e6cd362567bf0047a96d261691dfca43e8", "html_url": "https://github.com/rust-lang/rust/commit/b968c8e6cd362567bf0047a96d261691dfca43e8"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "81e9eff4a9d861e67174b616d4244088ecdb7d2a", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -103,6 +103,7 @@ fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n         ty::re_block(nid) {\n             w.write_char('b'); w.write_int(nid); w.write_char('|');\n         }\n+        ty::re_inferred { w.write_char('?'); }\n     }\n }\n fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {"}, {"sha": "bacde1d029305672d7278246858a1fcfc4a77995", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -15,9 +15,10 @@ import std::map::hashmap;\n \n /* Represents the type of the most immediate parent node. */\n enum parent {\n-    pa_item(ast::node_id),\n+    pa_fn_item(ast::node_id),\n     pa_block(ast::node_id),\n     pa_nested_fn(ast::node_id),\n+    pa_item(ast::node_id),\n     pa_crate\n }\n \n@@ -66,6 +67,7 @@ fn region_to_scope(region_map: @region_map, region: ty::region)\n         ty::re_caller(def_id) { def_id.node }\n         ty::re_named(def_id) { region_map.region_name_to_fn.get(def_id) }\n         ty::re_block(node_id) { node_id }\n+        ty::re_inferred { fail \"unresolved region in region_to_scope\" }\n     };\n }\n \n@@ -90,10 +92,11 @@ fn get_inferred_region(cx: ctxt, sp: syntax::codemap::span) -> ty::region {\n     // TODO: What do we do if we're in an alt?\n \n     ret alt cx.parent {\n-        pa_item(item_id) | pa_nested_fn(item_id) {\n+        pa_fn_item(item_id) | pa_nested_fn(item_id) {\n             ty::re_caller({crate: ast::local_crate, node: item_id})\n         }\n         pa_block(block_id) { ty::re_block(block_id) }\n+        pa_item(_) { ty::re_inferred }\n         pa_crate { cx.sess.span_bug(sp, \"inferred region at crate level?!\"); }\n     }\n }\n@@ -121,10 +124,16 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n                             region = ty::re_named(def_id);\n \n                             alt cx.parent {\n-                                pa_item(fn_id) | pa_nested_fn(fn_id) {\n+                                pa_fn_item(fn_id) | pa_nested_fn(fn_id) {\n                                     let rf = cx.region_map.region_name_to_fn;\n                                     rf.insert(def_id, fn_id);\n                                 }\n+                                pa_item(_) {\n+                                    cx.sess.span_err(ty.span,\n+                                                     \"named region not \" +\n+                                                     \"allowed in this \" +\n+                                                     \"context\");\n+                                }\n                                 pa_block(_) {\n                                     cx.sess.span_err(ty.span,\n                                                      \"unknown region `\" +\n@@ -152,7 +161,10 @@ fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn record_parent(cx: ctxt, child_id: ast::node_id) {\n     alt cx.parent {\n-        pa_item(parent_id) | pa_block(parent_id) | pa_nested_fn(parent_id) {\n+        pa_fn_item(parent_id) |\n+        pa_item(parent_id) |\n+        pa_block(parent_id) |\n+        pa_nested_fn(parent_id) {\n             cx.region_map.parents.insert(child_id, parent_id);\n         }\n         pa_crate { /* no-op */ }\n@@ -231,8 +243,12 @@ fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n+    let parent = alt item.node {\n+        ast::item_fn(_, _, _)   { pa_fn_item(item.id) }\n+        _                       { pa_item(item.id)    }\n+    };\n     let new_cx: ctxt = {bindings: @list::nil,\n-                        parent: pa_item(item.id),\n+                        parent: parent,\n                         in_alt: false\n                         with cx};\n     visit::visit_item(item, new_cx, visitor);"}, {"sha": "702c844c0f2e9539bd82271aca56d98ac7577f24", "filename": "src/rustc/middle/regionck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregionck.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -49,6 +49,10 @@ fn check_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n                                                      \"escapes its block\");\n                             }\n                         }\n+                        ty::re_inferred {\n+                            cx.tcx.sess.span_bug(expr.span,\n+                                                 \"unresolved region\");\n+                        }\n                     }\n                 }\n                 _ { /* no-op */ }"}, {"sha": "06764a472ce4a46df6c117479c94f96f88de816c", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -35,7 +35,7 @@ export field;\n export field_idx;\n export get_field;\n export get_fields;\n-export fm_general;\n+export fm_general, fm_rptr;\n export get_element_type;\n export is_binopable;\n export is_pred_ty;\n@@ -88,7 +88,7 @@ export ty_uint, mk_uint, mk_mach_uint;\n export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n export ty_var, mk_var;\n export ty_self, mk_self;\n-export region, re_named, re_caller, re_block;\n+export region, re_named, re_caller, re_block, re_inferred;\n export get, type_has_params, type_has_vars, type_has_rptrs, type_id;\n export same_type;\n export ty_var_id;\n@@ -234,7 +234,8 @@ type fn_ty = {proto: ast::proto,\n enum region {\n     re_named(def_id),\n     re_caller(def_id),\n-    re_block(node_id)\n+    re_block(node_id),\n+    re_inferred         /* currently unresolved (for typedefs) */\n }\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -571,6 +572,7 @@ fn walk_ty(cx: ctxt, ty: t, f: fn(t)) {\n enum fold_mode {\n     fm_var(fn@(int) -> t),\n     fm_param(fn@(uint, def_id) -> t),\n+    fm_rptr(fn@(region) -> region),\n     fm_general(fn@(t) -> t),\n }\n \n@@ -581,6 +583,7 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n     alt fld {\n       fm_var(_) { if !tb.has_vars { ret ty; } }\n       fm_param(_) { if !tb.has_params { ret ty; } }\n+      fm_rptr(_) { if !tb.has_rptrs { ret ty; } }\n       fm_general(_) {/* no fast path */ }\n     }\n \n@@ -597,9 +600,6 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_ptr(tm) {\n         ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n       }\n-      ty_rptr(r, tm) {\n-        ty = mk_rptr(cx, r, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n-      }\n       ty_vec(tm) {\n         ty = mk_vec(cx, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n       }\n@@ -647,6 +647,11 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_param(id, did) {\n         alt fld { fm_param(folder) { ty = folder(id, did); } _ {} }\n       }\n+      ty_rptr(r, tm) {\n+        let region = alt fld { fm_rptr(folder) { folder(r) } _ { r } };\n+        ty = mk_rptr(cx, region,\n+                     {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n+      }\n       ty_constr(subty, cs) {\n           ty = mk_constr(cx, fold_ty(cx, fld, subty), cs);\n       }\n@@ -1161,6 +1166,7 @@ fn hash_type_structure(st: sty) -> uint {\n           re_named(_)   { 1u }\n           re_caller(_)  { 2u }\n           re_block(_)   { 3u }\n+          re_inferred   { 4u }\n         }\n     }\n     alt st {"}, {"sha": "dbd0baf5dfa5f9e0847a57e76c04318db21c59cf", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -247,10 +247,19 @@ enum mode { m_collect, m_check, m_check_tyvar(@fn_ctxt), }\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n-    fn getter(tcx: ty::ctxt, _use_site: ast::node_id, mode: mode,\n+    fn subst_inferred_regions(tcx: ty::ctxt, use_site: ast::node_id,\n+                              ty: ty::t) -> ty::t {\n+        ret ty::fold_ty(tcx, ty::fm_rptr({|r|\n+            if r == ty::re_inferred {\n+                tcx.region_map.ast_type_to_inferred_region.get(use_site)\n+            } else {\n+                r\n+            }\n+        }), ty);\n+    }\n+    fn getter(tcx: ty::ctxt, use_site: ast::node_id, mode: mode,\n               id: ast::def_id) -> ty::ty_param_bounds_and_ty {\n-        // FIXME (pcwalton): Doesn't work with region inference.\n-        alt mode {\n+        let tpt = alt mode {\n           m_check | m_check_tyvar(_) { ty::lookup_item_type(tcx, id) }\n           m_collect {\n             if id.crate != ast::local_crate { csearch::get_type(tcx, id) }\n@@ -268,7 +277,13 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                 }\n             }\n           }\n+        };\n+\n+        if ty::type_has_rptrs(tpt.ty) {\n+            ret {bounds: tpt.bounds,\n+                 ty: subst_inferred_regions(tcx, use_site, tpt.ty)};\n         }\n+        ret tpt;\n     }\n     fn ast_mt_to_mt(tcx: ty::ctxt, use_site: ast::node_id, mode: mode,\n                     mt: ast::mt) -> ty::mt {\n@@ -327,7 +342,11 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n           ast::ty_rptr(region, mt) {\n             let region = alt region.node {\n                 ast::re_inferred | ast::re_self {\n-                    tcx.region_map.ast_type_to_inferred_region.get(ast_ty.id)\n+                    let attir = tcx.region_map.ast_type_to_inferred_region;\n+                    alt attir.find(ast_ty.id) {\n+                        some(resolved_region) { resolved_region }\n+                        none { ty::re_inferred }\n+                    }\n                 }\n                 ast::re_named(_) {\n                     tcx.region_map.ast_type_to_region.get(region.id)"}, {"sha": "0541c0d9d15f4405ad893f8da3b2d6084a1392a9", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbaebbb49a875728f95d413d7352f77cc97d04c/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=8cbaebbb49a875728f95d413d7352f77cc97d04c", "patch": "@@ -73,6 +73,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n           re_named(_)   { \"<name>.\"   }     // TODO: include name\n           re_caller(_)  { \"<caller>.\" }\n           re_block(_)   { \"<block>.\"  }     // TODO: include line number\n+          re_inferred   { \"\"          }\n         }\n     }\n "}]}