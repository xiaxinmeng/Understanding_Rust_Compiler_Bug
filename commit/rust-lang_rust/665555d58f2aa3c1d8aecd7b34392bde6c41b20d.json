{"sha": "665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTU1NWQ1OGYyYWEzYzFkOGFlY2Q3YjM0MzkyYmRlNmM0MWIyMGQ=", "commit": {"author": {"name": "lpy", "email": "pylaurent1314@gmail.com", "date": "2014-02-12T15:39:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T15:45:34Z"}, "message": "return value/use extra::test::black_box in benchmarks", "tree": {"sha": "e119df824f7b13480de745508fff441e2add6c8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e119df824f7b13480de745508fff441e2add6c8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "html_url": "https://github.com/rust-lang/rust/commit/665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/comments", "author": {"login": "lpy", "id": 1453861, "node_id": "MDQ6VXNlcjE0NTM4NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1453861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpy", "html_url": "https://github.com/lpy", "followers_url": "https://api.github.com/users/lpy/followers", "following_url": "https://api.github.com/users/lpy/following{/other_user}", "gists_url": "https://api.github.com/users/lpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpy/subscriptions", "organizations_url": "https://api.github.com/users/lpy/orgs", "repos_url": "https://api.github.com/users/lpy/repos", "events_url": "https://api.github.com/users/lpy/events{/privacy}", "received_events_url": "https://api.github.com/users/lpy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18477ac68a3daf8260be17be368f59a65c3b7527", "url": "https://api.github.com/repos/rust-lang/rust/commits/18477ac68a3daf8260be17be368f59a65c3b7527", "html_url": "https://github.com/rust-lang/rust/commit/18477ac68a3daf8260be17be368f59a65c3b7527"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "bee9ec6240b1665b53c155c5c31c6a7bda43cb3e", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -1561,6 +1561,7 @@ mod tests {\n         let mut bitv = 0 as uint;\n         b.iter(|| {\n             bitv |= (1 << ((r.next_u32() as uint) % uint::BITS));\n+            &bitv\n         })\n     }\n \n@@ -1570,6 +1571,7 @@ mod tests {\n         let mut bitv = SmallBitv::new(uint::BITS);\n         b.iter(|| {\n             bitv.set((r.next_u32() as uint) % uint::BITS, true);\n+            &bitv\n         })\n     }\n \n@@ -1579,6 +1581,7 @@ mod tests {\n         let mut bitv = BigBitv::new(~[0]);\n         b.iter(|| {\n             bitv.set((r.next_u32() as uint) % uint::BITS, true);\n+            &bitv\n         })\n     }\n \n@@ -1590,6 +1593,7 @@ mod tests {\n         let mut bitv = BigBitv::new(storage);\n         b.iter(|| {\n             bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n+            &bitv\n         })\n     }\n \n@@ -1599,6 +1603,7 @@ mod tests {\n         let mut bitv = Bitv::new(BENCH_BITS, false);\n         b.iter(|| {\n             bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n+            &bitv\n         })\n     }\n \n@@ -1608,6 +1613,7 @@ mod tests {\n         let mut bitv = Bitv::new(uint::BITS, false);\n         b.iter(|| {\n             bitv.set((r.next_u32() as uint) % uint::BITS, true);\n+            &bitv\n         })\n     }\n \n@@ -1617,6 +1623,7 @@ mod tests {\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n             bitv.insert((r.next_u32() as uint) % uint::BITS);\n+            &bitv\n         })\n     }\n \n@@ -1626,6 +1633,7 @@ mod tests {\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n             bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n+            &bitv\n         })\n     }\n "}, {"sha": "14c6bc5ce281abd87ca3440e4a8d4ab4ace7cdb5", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -115,8 +115,9 @@ pub mod bench {\n         // measure\n         let mut i = 0;\n         bh.iter(|| {\n-            map.find(&i);\n+            let x = map.find(&i);\n             i = (i + 1) % n;\n+            x\n         })\n      }\n }"}, {"sha": "fbed53ee30d6ec18ff18ecd5a7ba46dc30d423ea", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -565,14 +565,14 @@ mod test {\n     #[bench]\n     fn bench_buffered_reader(bh: &mut Harness) {\n         bh.iter(|| {\n-            BufferedReader::new(NullStream);\n+            BufferedReader::new(NullStream)\n         });\n     }\n \n     #[bench]\n     fn bench_buffered_writer(bh: &mut Harness) {\n         bh.iter(|| {\n-            BufferedWriter::new(NullStream);\n+            BufferedWriter::new(NullStream)\n         });\n     }\n "}, {"sha": "ee05d6a704bedbc063efce390296ea8626cc5b2c", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -292,15 +292,15 @@ mod bench {\n         let s = Struct { field: 10 };\n         let t = &s as &Trait;\n         bh.iter(|| {\n-            t.method();\n+            t.method()\n         });\n     }\n \n     #[bench]\n     fn trait_static_method_call(bh: &mut BenchHarness) {\n         let s = Struct { field: 10 };\n         bh.iter(|| {\n-            s.method();\n+            s.method()\n         });\n     }\n \n@@ -310,21 +310,21 @@ mod bench {\n     fn match_option_some(bh: &mut BenchHarness) {\n         let x = Some(10);\n         bh.iter(|| {\n-            let _q = match x {\n+            match x {\n                 Some(y) => y,\n                 None => 11\n-            };\n+            }\n         });\n     }\n \n     #[bench]\n     fn match_vec_pattern(bh: &mut BenchHarness) {\n         let x = [1,2,3,4,5,6];\n         bh.iter(|| {\n-            let _q = match x {\n+            match x {\n                 [1,2,3,..] => 10,\n                 _ => 11\n-            };\n+            }\n         });\n     }\n }"}, {"sha": "ab279fd3102d219fabee23846d12165d20a618ec", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -112,14 +112,14 @@ mod bench {\n     #[bench]\n     fn alloc_owned_small(bh: &mut BenchHarness) {\n         bh.iter(|| {\n-            ~10;\n+            ~10\n         })\n     }\n \n     #[bench]\n     fn alloc_owned_big(bh: &mut BenchHarness) {\n         bh.iter(|| {\n-            ~[10, ..1000];\n+            ~[10, ..1000]\n         })\n     }\n }"}, {"sha": "063182ff0e1d9fa1e7dfc69735a9d69720a40cb1", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -4357,7 +4357,7 @@ mod bench {\n \n         assert_eq!(100, s.len());\n         bh.iter(|| {\n-            let _ = is_utf8(s);\n+            is_utf8(s)\n         });\n     }\n \n@@ -4366,7 +4366,7 @@ mod bench {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n         bh.iter(|| {\n-            let _ = is_utf8(s);\n+            is_utf8(s)\n         });\n     }\n \n@@ -4409,7 +4409,7 @@ mod bench {\n     #[bench]\n     fn bench_with_capacity(bh: &mut BenchHarness) {\n         bh.iter(|| {\n-            let _ = with_capacity(100);\n+            with_capacity(100)\n         });\n     }\n "}, {"sha": "cfe2ad5a08af439be66c523ef57d28b831388b2c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665555d58f2aa3c1d8aecd7b34392bde6c41b20d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "patch": "@@ -4428,22 +4428,23 @@ mod bench {\n         let mut vec: ~[uint] = ~[0u];\n         bh.iter(|| {\n             vec.push(0);\n+            &vec\n         })\n     }\n \n     #[bench]\n     fn starts_with_same_vector(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n         bh.iter(|| {\n-            vec.starts_with(vec);\n+            vec.starts_with(vec)\n         })\n     }\n \n     #[bench]\n     fn starts_with_single_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = ~[0u];\n         bh.iter(|| {\n-            vec.starts_with(vec);\n+            vec.starts_with(vec)\n         })\n     }\n \n@@ -4453,23 +4454,23 @@ mod bench {\n         let mut match_vec: ~[uint] = vec::from_fn(99, |i| i);\n         match_vec.push(0);\n         bh.iter(|| {\n-            vec.starts_with(match_vec);\n+            vec.starts_with(match_vec)\n         })\n     }\n \n     #[bench]\n     fn ends_with_same_vector(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n         bh.iter(|| {\n-            vec.ends_with(vec);\n+            vec.ends_with(vec)\n         })\n     }\n \n     #[bench]\n     fn ends_with_single_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = ~[0u];\n         bh.iter(|| {\n-            vec.ends_with(vec);\n+            vec.ends_with(vec)\n         })\n     }\n \n@@ -4479,15 +4480,15 @@ mod bench {\n         let mut match_vec: ~[uint] = vec::from_fn(100, |i| i);\n         match_vec[0] = 200;\n         bh.iter(|| {\n-            vec.starts_with(match_vec);\n+            vec.starts_with(match_vec)\n         })\n     }\n \n     #[bench]\n     fn contains_last_element(bh: &mut BenchHarness) {\n         let vec: ~[uint] = vec::from_fn(100, |i| i);\n         bh.iter(|| {\n-                vec.contains(&99u);\n+            vec.contains(&99u)\n         })\n     }\n \n@@ -4507,13 +4508,14 @@ mod bench {\n                 ptr::set_memory(vp, 0, 1024);\n                 v.set_len(1024);\n             }\n+            v\n         });\n     }\n \n     #[bench]\n     fn zero_1kb_fixed_repeat(bh: &mut BenchHarness) {\n         bh.iter(|| {\n-            let _v: ~[u8] = ~[0u8, ..1024];\n+            ~[0u8, ..1024]\n         });\n     }\n \n@@ -4542,6 +4544,7 @@ mod bench {\n             for x in v.mut_iter() {\n                 *x = 0;\n             }\n+            v\n         });\n     }\n "}]}