{"sha": "a18e7d6656e02216067aa752ce69ee37b5103f08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGU3ZDY2NTZlMDIyMTYwNjdhYTc1MmNlNjllZTM3YjUxMDNmMDg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-16T17:48:28Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "librustc: minor cleanup", "tree": {"sha": "385035241fe8b5d5e5331b21f676e558de710fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385035241fe8b5d5e5331b21f676e558de710fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18e7d6656e02216067aa752ce69ee37b5103f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18e7d6656e02216067aa752ce69ee37b5103f08", "html_url": "https://github.com/rust-lang/rust/commit/a18e7d6656e02216067aa752ce69ee37b5103f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18e7d6656e02216067aa752ce69ee37b5103f08/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53951afe48ff96d5bcbd196401b6d61c5548f1af", "url": "https://api.github.com/repos/rust-lang/rust/commits/53951afe48ff96d5bcbd196401b6d61c5548f1af", "html_url": "https://github.com/rust-lang/rust/commit/53951afe48ff96d5bcbd196401b6d61c5548f1af"}], "stats": {"total": 117, "additions": 56, "deletions": 61}, "files": [{"sha": "9a2744972c0399931ff8d6f6d2bfb94638ff467a", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=a18e7d6656e02216067aa752ce69ee37b5103f08", "patch": "@@ -168,39 +168,40 @@ fn visit_item(e: @mut Env, i: @ast::item) {\n         let link_args = attr::find_attrs_by_name(i.attrs, \"link_args\");\n \n         match fm.sort {\n-          ast::named => {\n-            let foreign_name =\n-               match attr::first_attr_value_str_by_name(i.attrs,\n-                                                        ~\"link_name\") {\n-                 Some(ref nn) => {\n-                   if **nn == ~\"\" {\n-                      e.diag.span_fatal(\n-                          i.span,\n-                          ~\"empty #[link_name] not allowed; use #[nolink].\");\n-                   }\n-                   (/*bad*/copy *nn)\n-                 }\n-                None => @/*bad*/copy *e.intr.get(i.ident)\n-            };\n-            if attr::find_attrs_by_name(i.attrs, ~\"nolink\").is_empty() {\n-                already_added =\n-                    !cstore::add_used_library(cstore,\n-                                              /*bad*/ copy *foreign_name);\n-            }\n-            if !link_args.is_empty() && already_added {\n-                e.diag.span_fatal(i.span, ~\"library '\" + *foreign_name +\n-                           ~\"' already added: can't specify link_args.\");\n+            ast::named => {\n+                let foreign_name =\n+                    match attr::first_attr_value_str_by_name(i.attrs,\n+                                                            ~\"link_name\") {\n+                        Some(ref nn) => {\n+                            if **nn == ~\"\" {\n+                                e.diag.span_fatal(\n+                                    i.span,\n+                                    ~\"empty #[link_name] not allowed; use \" +\n+                                    ~\"#[nolink].\");\n+                            }\n+                            /*bad*/copy *nn\n+                        }\n+                        None => @/*bad*/copy *e.intr.get(i.ident)\n+                    };\n+                if attr::find_attrs_by_name(i.attrs, ~\"nolink\").is_empty() {\n+                    already_added =\n+                        !cstore::add_used_library(cstore,\n+                                /*bad*/ copy *foreign_name);\n+                }\n+                if !link_args.is_empty() && already_added {\n+                    e.diag.span_fatal(i.span, ~\"library '\" + *foreign_name +\n+                               ~\"' already added: can't specify link_args.\");\n+                }\n             }\n-          }\n-          ast::anonymous => { /* do nothing */ }\n+            ast::anonymous => { /* do nothing */ }\n         }\n \n         for link_args.each |a| {\n             match attr::get_meta_item_value_str(attr::attr_meta(*a)) {\n-              Some(ref linkarg) => {\n-                cstore::add_used_link_args(cstore, /*bad*/copy **linkarg);\n-              }\n-              None => {/* fallthrough */ }\n+                Some(ref linkarg) => {\n+                    cstore::add_used_link_args(cstore, /*bad*/copy **linkarg);\n+                }\n+                None => { /* fallthrough */ }\n             }\n         }\n       }\n@@ -276,8 +277,8 @@ fn resolve_crate(e: @mut Env,\n         let cname =\n             match attr::last_meta_item_value_str_by_name(load_ctxt.metas,\n                                                          ~\"name\") {\n-              option::Some(ref v) => (/*bad*/copy *v),\n-              option::None => @/*bad*/copy *e.intr.get(ident)\n+                Some(ref v) => /*bad*/copy *v,\n+                None => @/*bad*/copy *e.intr.get(ident),\n             };\n         let cmeta = @{name: /*bad*/copy *cname, data: cdata,\n                       cnum_map: cnum_map, cnum: cnum};"}, {"sha": "2f52397e394f523e22a35769f7eb3f43c09c1b47", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=a18e7d6656e02216067aa752ce69ee37b5103f08", "patch": "@@ -70,12 +70,12 @@ pub fn get_crate_data(cstore: @mut CStore, cnum: ast::crate_num)\n \n pub fn get_crate_hash(cstore: @mut CStore, cnum: ast::crate_num) -> ~str {\n     let cdata = get_crate_data(cstore, cnum);\n-    return decoder::get_crate_hash(cdata.data);\n+    decoder::get_crate_hash(cdata.data)\n }\n \n pub fn get_crate_vers(cstore: @mut CStore, cnum: ast::crate_num) -> ~str {\n     let cdata = get_crate_data(cstore, cnum);\n-    return decoder::get_crate_vers(cdata.data);\n+    decoder::get_crate_vers(cdata.data)\n }\n \n pub fn set_crate_data(cstore: @mut CStore,\n@@ -110,21 +110,21 @@ pub fn get_used_crate_files(cstore: @mut CStore) -> ~[Path] {\n pub fn add_used_library(cstore: @mut CStore, +lib: ~str) -> bool {\n     assert lib != ~\"\";\n \n-    if vec::contains(cstore.used_libraries, &lib) { return false; }\n+    if cstore.used_libraries.contains(&lib) { return false; }\n     cstore.used_libraries.push(lib);\n-    return true;\n+    true\n }\n \n pub fn get_used_libraries(cstore: @mut CStore) -> ~[~str] {\n-    return /*bad*/copy cstore.used_libraries;\n+    /*bad*/copy cstore.used_libraries\n }\n \n pub fn add_used_link_args(cstore: @mut CStore, args: &str) {\n-    cstore.used_link_args.push_all(str::split_char(args, ' '));\n+    cstore.used_link_args.push_all(args.split_char(' '));\n }\n \n pub fn get_used_link_args(cstore: @mut CStore) -> ~[~str] {\n-    return /*bad*/copy cstore.used_link_args;\n+    /*bad*/copy cstore.used_link_args\n }\n \n pub fn add_extern_mod_stmt_cnum(cstore: @mut CStore,\n@@ -155,21 +155,14 @@ pub fn get_dep_hashes(cstore: @mut CStore) -> ~[~str] {\n         result.push({name: /*bad*/copy cdata.name, hash: hash});\n     }\n \n-    pure fn lteq(a: &crate_hash, b: &crate_hash) -> bool {\n-        a.name <= b.name\n-    }\n+    let sorted = std::sort::merge_sort(result, |a, b| a.name <= b.name);\n \n-    let sorted = std::sort::merge_sort(result, lteq);\n     debug!(\"sorted:\");\n     for sorted.each |x| {\n         debug!(\"  hash[%s]: %s\", x.name, x.hash);\n     }\n \n-    fn mapper(ch: &crate_hash) -> ~str {\n-        return /*bad*/copy ch.hash;\n-    }\n-\n-    return vec::map(sorted, mapper);\n+    sorted.map(|ch| /*bad*/copy ch.hash)\n }\n \n // Local Variables:"}, {"sha": "8f79b49203c07898280b43391d4645d4736fd51a", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a18e7d6656e02216067aa752ce69ee37b5103f08", "patch": "@@ -1066,16 +1066,17 @@ fn list_crate_deps(intr: @ident_interner, data: @~[u8], out: io::Writer) {\n pub fn get_crate_hash(data: @~[u8]) -> ~str {\n     let cratedoc = reader::Doc(data);\n     let hashdoc = reader::get_doc(cratedoc, tag_crate_hash);\n-    return str::from_bytes(reader::doc_data(hashdoc));\n+    str::from_bytes(reader::doc_data(hashdoc))\n }\n \n pub fn get_crate_vers(data: @~[u8]) -> ~str {\n     let attrs = decoder::get_crate_attributes(data);\n-    return match attr::last_meta_item_value_str_by_name(\n-        attr::find_linkage_metas(attrs), ~\"vers\") {\n-      Some(ref ver) => (/*bad*/copy **ver),\n-      None => ~\"0.0\"\n-    };\n+    let linkage_attrs = attr::find_linkage_metas(attrs);\n+\n+    match attr::last_meta_item_value_str_by_name(linkage_attrs, ~\"vers\") {\n+        Some(ref ver) => /*bad*/copy **ver,\n+        None => ~\"0.0\"\n+    }\n }\n \n fn iter_crate_items(intr: @ident_interner, cdata: cmd,"}, {"sha": "644d7254fefdb81d3c76b61481c74256ed3efebc", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=a18e7d6656e02216067aa752ce69ee37b5103f08", "patch": "@@ -145,15 +145,15 @@ fn find_library_crate_aux(cx: ctxt,\n pub fn crate_name_from_metas(+metas: ~[@ast::meta_item]) -> ~str {\n     let name_items = attr::find_meta_items_by_name(metas, ~\"name\");\n     match vec::last_opt(name_items) {\n-      Some(i) => {\n-        match attr::get_meta_item_value_str(i) {\n-          Some(ref n) => /*bad*/copy **n,\n-          // FIXME (#2406): Probably want a warning here since the user\n-          // is using the wrong type of meta item.\n-          _ => fail!()\n+        Some(i) => {\n+            match attr::get_meta_item_value_str(i) {\n+                Some(ref n) => /*bad*/copy **n,\n+                // FIXME (#2406): Probably want a warning here since the user\n+                // is using the wrong type of meta item.\n+                _ => fail!()\n+            }\n         }\n-      }\n-      None => fail!(~\"expected to find the crate name\")\n+        None => fail!(~\"expected to find the crate name\")\n     }\n }\n "}, {"sha": "91fd1dff809fd69f4f151d9b3833aa14950421f1", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18e7d6656e02216067aa752ce69ee37b5103f08/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=a18e7d6656e02216067aa752ce69ee37b5103f08", "patch": "@@ -50,7 +50,7 @@ fn abi_info(arch: session::arch) -> cabi::ABIInfo {\n pub fn link_name(ccx: @crate_ctxt, i: @ast::foreign_item) -> ~str {\n     match attr::first_attr_value_str_by_name(i.attrs, ~\"link_name\") {\n         None => ccx.sess.str_of(i.ident),\n-        option::Some(ref ln) => (/*bad*/copy **ln)\n+        Some(ref ln) => /*bad*/copy **ln,\n     }\n }\n "}]}