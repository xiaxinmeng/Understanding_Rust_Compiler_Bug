{"sha": "398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OGNkMThiZmViYTVkMmMxNDNiNGI0ZTcyMmExNmVjOWEyZGUyZTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T21:43:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T21:43:48Z"}, "message": "core: Replace Durable with 'static", "tree": {"sha": "e9c4d9aa219c9f1f6a82247c56bc07e3269319e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c4d9aa219c9f1f6a82247c56bc07e3269319e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "html_url": "https://github.com/rust-lang/rust/commit/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcc3a6c5742b5436d0c7f8be4bfb79f7eacd760", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcc3a6c5742b5436d0c7f8be4bfb79f7eacd760", "html_url": "https://github.com/rust-lang/rust/commit/6bcc3a6c5742b5436d0c7f8be4bfb79f7eacd760"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "d4b02a0ad9bbfde11a442e8c13305a66c9d0fcd2", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "patch": "@@ -49,7 +49,7 @@ pub type LocalDataKey<'self,T> = &'self fn(v: @T);\n  * Remove a task-local data value from the table, returning the\n  * reference that was originally created to insert it.\n  */\n-pub unsafe fn local_data_pop<T:Durable>(\n+pub unsafe fn local_data_pop<T: 'static>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_pop(Handle::new(), key)\n@@ -58,7 +58,7 @@ pub unsafe fn local_data_pop<T:Durable>(\n  * Retrieve a task-local data value. It will also be kept alive in the\n  * table until explicitly removed.\n  */\n-pub unsafe fn local_data_get<T:Durable>(\n+pub unsafe fn local_data_get<T: 'static>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get(Handle::new(), key)\n@@ -67,7 +67,7 @@ pub unsafe fn local_data_get<T:Durable>(\n  * Store a value in task-local data. If this key already has a value,\n  * that value is overwritten (and its destructor is run).\n  */\n-pub unsafe fn local_data_set<T:Durable>(\n+pub unsafe fn local_data_set<T: 'static>(\n     key: LocalDataKey<T>, data: @T) {\n \n     local_set(Handle::new(), key, data)\n@@ -76,7 +76,7 @@ pub unsafe fn local_data_set<T:Durable>(\n  * Modify a task-local data value. If the function returns 'None', the\n  * data is removed (and its reference dropped).\n  */\n-pub unsafe fn local_data_modify<T:Durable>(\n+pub unsafe fn local_data_modify<T: 'static>(\n     key: LocalDataKey<T>,\n     modify_fn: &fn(Option<@T>) -> Option<@T>) {\n "}, {"sha": "7240e0ca0a5ff382dc60db08b0717b356ce7a210", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=398cd18bfeba5d2c143b4b4e722a16ec9a2de2e8", "patch": "@@ -44,7 +44,7 @@ impl Handle {\n }\n \n pub trait LocalData { }\n-impl<T:Durable> LocalData for @T { }\n+impl<T: 'static> LocalData for @T { }\n \n impl Eq for @LocalData {\n     fn eq(&self, other: &@LocalData) -> bool {\n@@ -131,15 +131,15 @@ unsafe fn get_newsched_local_map(local: *mut LocalStorage) -> TaskLocalMap {\n     }\n }\n \n-unsafe fn key_to_key_value<T:Durable>(key: LocalDataKey<T>) -> *libc::c_void {\n+unsafe fn key_to_key_value<T: 'static>(key: LocalDataKey<T>) -> *libc::c_void {\n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n     let pair: (*libc::c_void, *libc::c_void) = cast::transmute_copy(&key);\n     pair.first()\n }\n \n // If returning Some(..), returns with @T with the map's reference. Careful!\n-unsafe fn local_data_lookup<T:Durable>(\n+unsafe fn local_data_lookup<T: 'static>(\n     map: TaskLocalMap, key: LocalDataKey<T>)\n     -> Option<(uint, *libc::c_void)> {\n \n@@ -157,7 +157,7 @@ unsafe fn local_data_lookup<T:Durable>(\n     }\n }\n \n-unsafe fn local_get_helper<T:Durable>(\n+unsafe fn local_get_helper<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>,\n     do_pop: bool) -> Option<@T> {\n \n@@ -179,21 +179,21 @@ unsafe fn local_get_helper<T:Durable>(\n }\n \n \n-pub unsafe fn local_pop<T:Durable>(\n+pub unsafe fn local_pop<T: 'static>(\n     handle: Handle,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(handle, key, true)\n }\n \n-pub unsafe fn local_get<T:Durable>(\n+pub unsafe fn local_get<T: 'static>(\n     handle: Handle,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(handle, key, false)\n }\n \n-pub unsafe fn local_set<T:Durable>(\n+pub unsafe fn local_set<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>, data: @T) {\n \n     let map = get_local_map(handle);\n@@ -225,7 +225,7 @@ pub unsafe fn local_set<T:Durable>(\n     }\n }\n \n-pub unsafe fn local_modify<T:Durable>(\n+pub unsafe fn local_modify<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>,\n     modify_fn: &fn(Option<@T>) -> Option<@T>) {\n "}]}