{"sha": "099e09476577aca9c7365d99e69ccde29aec9940", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWUwOTQ3NjU3N2FjYTljNzM2NWQ5OWU2OWNjZGUyOWFlYzk5NDA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-15T23:29:13Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-15T23:29:13Z"}, "message": "Produce PIC code and use -S in the Makefile.", "tree": {"sha": "6c4acb78cecbf8793816bba56b14d464ec43b3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4acb78cecbf8793816bba56b14d464ec43b3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099e09476577aca9c7365d99e69ccde29aec9940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099e09476577aca9c7365d99e69ccde29aec9940", "html_url": "https://github.com/rust-lang/rust/commit/099e09476577aca9c7365d99e69ccde29aec9940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099e09476577aca9c7365d99e69ccde29aec9940/comments", "author": null, "committer": null, "parents": [{"sha": "cc6a9c88766c3822522d48145d9f5778a21147a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6a9c88766c3822522d48145d9f5778a21147a6", "html_url": "https://github.com/rust-lang/rust/commit/cc6a9c88766c3822522d48145d9f5778a21147a6"}], "stats": {"total": 71, "additions": 25, "deletions": 46}, "files": [{"sha": "fbd102c2ce9713254114b9bd35dd9e1c2a57cf1b", "filename": "Makefile.in", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/099e09476577aca9c7365d99e69ccde29aec9940/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/099e09476577aca9c7365d99e69ccde29aec9940/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=099e09476577aca9c7365d99e69ccde29aec9940", "patch": "@@ -149,8 +149,6 @@ CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n \n-CFG_LLC_CFLAGS := -march=x86 -relocation-model=pic\n-\n ifdef CFG_GCC\n   CFG_INFO := $(info cfg: using gcc)\n   CFG_GCC_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n@@ -465,27 +463,27 @@ boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage0/std.bc: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n+stage0/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -shared -o $@ $<\n+\t$(STAGE0) -S -shared -o $@ $<\n \n stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage0 -Lrt -lrustrt\n \n-stage1/std.bc: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n+stage1/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -shared -o $@ $<\n+\t$(STAGE1) -S -shared -o $@ $<\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage1 -Lrt -lrustrt\n \n-stage2/std.bc: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+stage2/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -shared -o $@ $<\n+\t$(STAGE2) -S -shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n@@ -511,20 +509,20 @@ stage2/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \n \n \n-stage0/glue.bc: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n+stage0/glue.s: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -o $@ -glue\n+\t$(STAGE0) -S -o $@ -glue\n \n-stage1/glue.bc: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n+stage1/glue.s: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -o $@ -glue\n+\t$(STAGE1) -S -o $@ -glue\n \n-stage2/glue.bc: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n+stage2/glue.s: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -o $@ -glue\n+\t$(STAGE2) -S -o $@ -glue\n \n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n@@ -536,26 +534,14 @@ stage0/%.o: stage0/%.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n-stage0/%.s: stage0/%.bc\n-\t@$(call E, compile [llvm]: $@)\n-\t$(Q)$(CFG_LLVM_BINDIR)/llc $(CFG_LLC_CFLAGS) -o $@ $<\n-\n stage1/%.o: stage1/%.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n-stage1/%.s: stage1/%.bc\n-\t@$(call E, compile [llvm]: $@)\n-\t$(Q)$(CFG_LLVM_BINDIR)/llc $(CFG_LLC_CFLAGS) -o $@ $<\n-\n stage2/%.o: stage2/%.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n-stage2/%.s: stage2/%.bc\n-\t@$(call E, compile [llvm]: $@)\n-\t$(Q)$(CFG_LLVM_BINDIR)/llc $(CFG_LLC_CFLAGS) -o $@ $<\n-\n \n \n ######################################################################\n@@ -803,44 +789,36 @@ compile-check: tidy \\\n \t@$(call E, compile [boot]: $@)\n \t$(BOOT) -o $@ $<\n \n-%.stage0.bc: %.rc $(SREQ0)\n+%.stage0.s: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -o $@ $<\n+\t$(STAGE0) -S -o $@ $<\n \n-%.stage0.bc: %.rs $(SREQ0)\n+%.stage0.s: %.rs $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -o $@ $<\n+\t$(STAGE0) -S -o $@ $<\n \n-%.stage1.bc: %.rc $(SREQ1)\n+%.stage1.s: %.rc $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -o $@ $<\n+\t$(STAGE1) -S -o $@ $<\n \n-%.stage1.bc: %.rs $(SREQ1)\n+%.stage1.s: %.rs $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -o $@ $<\n+\t$(STAGE1) -S -o $@ $<\n \n-%.stage2.bc: %.rc $(SREQ2)\n+%.stage2.s: %.rc $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -o $@ $<\n+\t$(STAGE2) -S -o $@ $<\n \n-%.stage2.bc: %.rs $(SREQ2)\n+%.stage2.s: %.rs $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -o $@ $<\n+\t$(STAGE2) -S -o $@ $<\n \n \n \n %.o: %.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n-%.ll: %.bc\n-\t@$(call E, dis [llvm]: $@)\n-\t$(Q)$(CFG_LLVM_BINDIR)/llvm-dis -o $@ $<\n-\n-%.s: %.bc\n-\t@$(call E, compile [llvm]: $@)\n-\t$(Q)$(CFG_LLVM_BINDIR)/llc $(CFG_LLC_CFLAGS) -o $@ $<\n-\n # Cancel the implicit .out rule in GNU make.\n %.out: %\n "}, {"sha": "b2dcd06555bc49a2ac14593c5b16f1194b451c99", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099e09476577aca9c7365d99e69ccde29aec9940/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/099e09476577aca9c7365d99e69ccde29aec9940/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=099e09476577aca9c7365d99e69ccde29aec9940", "patch": "@@ -46,6 +46,7 @@ extern \"C\" void LLVMRustWriteAssembly(LLVMPassManagerRef PMR, LLVMModuleRef M,\n                                       const char *triple, const char *path) {\n   InitializeAllTargets();\n   InitializeAllAsmPrinters();\n+  TargetMachine::setRelocationModel(Reloc::PIC_);\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);\n   std::string FeaturesStr;"}]}