{"sha": "9d786ea221b27fbdf7c7f7beea0290db448e0611", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzg2ZWEyMjFiMjdmYmRmN2M3ZjdiZWVhMDI5MGRiNDQ4ZTA2MTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-09T12:37:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-09T12:37:49Z"}, "message": "Merge #2198\n\n2198: Unfork struct and union ids r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "312ae071afe742011c1e396d63123729e31f9815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312ae071afe742011c1e396d63123729e31f9815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d786ea221b27fbdf7c7f7beea0290db448e0611", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxrMdCRBK7hj4Ov3rIwAAdHIIACToVVKsrZzrJw8gpTGtdkIr\ns5DgH0RU4XubUE1hHA8EINqigDSFkmOkNhEXqWopyHJorg81YbJkFvH/FDdgWSqn\nYCmI2IAk5qnkKxth2ct/TiMZuOLToDigAN/9m1BuXxDfr7PLeayccmIxoSGWNBvn\nvInnVqu7D+wkZLlc2T8Q9ps2O+P9Nk9yi6r0esdfBFrtjmSoG3gN91ho2EMJQTp5\nx21oFaP20nvmGQuTEAhSpz8ajC8Cn67//iZeQrn3OxgOEoX2fA+ritS/sCJY5MK2\nMIJPAFKm1r9P6JRQ+2Dh5A/30r5Rti/hYvF3EiXF/tv/8M0ZGZ97NAAZVUT/NHg=\n=DTk6\n-----END PGP SIGNATURE-----\n", "payload": "tree 312ae071afe742011c1e396d63123729e31f9815\nparent defc7ad772123a449f7cc384dd46d88c3a45fb53\nparent 6294fd5ec9c6946bdd91f1274956c573f9f2a136\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573303069 +0000\ncommitter GitHub <noreply@github.com> 1573303069 +0000\n\nMerge #2198\n\n2198: Unfork struct and union ids r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d786ea221b27fbdf7c7f7beea0290db448e0611", "html_url": "https://github.com/rust-lang/rust/commit/9d786ea221b27fbdf7c7f7beea0290db448e0611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d786ea221b27fbdf7c7f7beea0290db448e0611/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "defc7ad772123a449f7cc384dd46d88c3a45fb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/defc7ad772123a449f7cc384dd46d88c3a45fb53", "html_url": "https://github.com/rust-lang/rust/commit/defc7ad772123a449f7cc384dd46d88c3a45fb53"}, {"sha": "6294fd5ec9c6946bdd91f1274956c573f9f2a136", "url": "https://api.github.com/repos/rust-lang/rust/commits/6294fd5ec9c6946bdd91f1274956c573f9f2a136", "html_url": "https://github.com/rust-lang/rust/commit/6294fd5ec9c6946bdd91f1274956c573f9f2a136"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "945f236c22e7ac2a5ed1f472e2c3468564a44628", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -12,7 +12,7 @@ use crate::{\n \n impl Struct {\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self.id).variant_data.clone()\n+        db.struct_data(self.id.into()).variant_data.clone()\n     }\n }\n "}, {"sha": "e5bfad3ca8142c2decfad15147c0b10cc593981f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -288,19 +288,19 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.0.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n         Some(self.module(db).krate())\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.struct_data(self.id).name.clone()\n+        db.struct_data(self.id.into()).name.clone()\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        db.struct_data(self.id)\n+        db.struct_data(self.id.into())\n             .variant_data\n             .fields()\n             .into_iter()\n@@ -310,7 +310,7 @@ impl Struct {\n     }\n \n     pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        db.struct_data(self.id)\n+        db.struct_data(self.id.into())\n             .variant_data\n             .fields()\n             .into_iter()\n@@ -346,11 +346,11 @@ pub struct Union {\n \n impl Union {\n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.union_data(self.id).name.clone()\n+        db.struct_data(self.id.into()).name.clone()\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.0.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {"}, {"sha": "247ae3e55d17037d8d82bb3b74ad0c68a4f71bd2", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -78,13 +78,13 @@ impl HasSource for StructField {\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n-        self.id.source(db)\n+        self.id.0.source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::StructDef;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n-        self.id.source(db)\n+        self.id.0.source(db)\n     }\n }\n impl HasSource for Enum {"}, {"sha": "5a1eade2cc08b58e7d7720d4e36446055a0d9d4d", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -67,10 +67,7 @@ impl ExprScopes {\n         &self.scopes[scope].entries\n     }\n \n-    pub(crate) fn scope_chain<'a>(\n-        &'a self,\n-        scope: Option<ScopeId>,\n-    ) -> impl Iterator<Item = ScopeId> + 'a {\n+    pub(crate) fn scope_chain(&self, scope: Option<ScopeId>) -> impl Iterator<Item = ScopeId> + '_ {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n "}, {"sha": "c95d2cdd05d4c96f84d0557708b803e29f2499ae", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use hir_def::{StructId, StructOrUnionId, UnionId};\n use hir_expand::name::AsName;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n@@ -15,18 +16,19 @@ pub trait FromSource: Sized {\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self>;\n }\n \n+// FIXIME: these two impls are wrong, `ast::StructDef` might produce either a struct or a union\n impl FromSource for Struct {\n     type Ast = ast::StructDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Struct { id })\n+        let id: StructOrUnionId = from_source(db, src)?;\n+        Some(Struct { id: StructId(id) })\n     }\n }\n impl FromSource for Union {\n     type Ast = ast::StructDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Union { id })\n+        let id: StructOrUnionId = from_source(db, src)?;\n+        Some(Union { id: UnionId(id) })\n     }\n }\n impl FromSource for Enum {"}, {"sha": "1fed5025eb80c21f26c5f246124801bda6fd9fc9", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -665,7 +665,7 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n }\n \n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n-    let struct_data = db.struct_data(def.id);\n+    let struct_data = db.struct_data(def.id.into());\n     let fields = match struct_data.variant_data.fields() {\n         Some(fields) => fields,\n         None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n@@ -681,7 +681,7 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n \n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n-    let struct_data = db.struct_data(def.id);\n+    let struct_data = db.struct_data(def.id.into());\n     if struct_data.variant_data.fields().is_none() {\n         return type_for_adt(db, def); // Unit struct\n     }"}, {"sha": "a29c4d41e5fd0ddda57555078421b37fa2a8790f", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     db::DefDatabase2, type_ref::TypeRef, AstItemDef, EnumId, LocalEnumVariantId,\n-    LocalStructFieldId, StructId, UnionId,\n+    LocalStructFieldId, StructOrUnionId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -49,15 +49,11 @@ pub struct StructFieldData {\n }\n \n impl StructData {\n-    pub(crate) fn struct_data_query(db: &impl DefDatabase2, struct_: StructId) -> Arc<StructData> {\n-        let src = struct_.source(db);\n-        let name = src.ast.name().map(|n| n.as_name());\n-        let variant_data = VariantData::new(src.ast.kind());\n-        let variant_data = Arc::new(variant_data);\n-        Arc::new(StructData { name, variant_data })\n-    }\n-    pub(crate) fn union_data_query(db: &impl DefDatabase2, struct_: UnionId) -> Arc<StructData> {\n-        let src = struct_.source(db);\n+    pub(crate) fn struct_data_query(\n+        db: &impl DefDatabase2,\n+        id: StructOrUnionId,\n+    ) -> Arc<StructData> {\n+        let src = id.source(db);\n         let name = src.ast.name().map(|n| n.as_name());\n         let variant_data = VariantData::new(src.ast.kind());\n         let variant_data = Arc::new(variant_data);"}, {"sha": "29cf71a594c5ce070660840a1c439954ee7b06bf", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -11,17 +11,16 @@ use crate::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    EnumId, StructId, UnionId,\n+    EnumId, StructOrUnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: crate::ItemLoc<ast::FnDef>) -> crate::FunctionId;\n     #[salsa::interned]\n-    fn intern_struct(&self, loc: crate::ItemLoc<ast::StructDef>) -> crate::StructId;\n-    #[salsa::interned]\n-    fn intern_union(&self, loc: crate::ItemLoc<ast::StructDef>) -> crate::UnionId;\n+    fn intern_struct_or_union(&self, loc: crate::ItemLoc<ast::StructDef>)\n+        -> crate::StructOrUnionId;\n     #[salsa::interned]\n     fn intern_enum(&self, loc: crate::ItemLoc<ast::EnumDef>) -> crate::EnumId;\n     #[salsa::interned]\n@@ -49,10 +48,7 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n     fn crate_def_map(&self, krate: CrateId) -> Arc<CrateDefMap>;\n \n     #[salsa::invoke(StructData::struct_data_query)]\n-    fn struct_data(&self, s: StructId) -> Arc<StructData>;\n-\n-    #[salsa::invoke(StructData::union_data_query)]\n-    fn union_data(&self, s: UnionId) -> Arc<StructData>;\n+    fn struct_data(&self, id: StructOrUnionId) -> Arc<StructData>;\n \n     #[salsa::invoke(EnumData::enum_data_query)]\n     fn enum_data(&self, e: EnumId) -> Arc<EnumData>;"}, {"sha": "239317efe3bd1f159c0c2eed45f89342ef611bc3", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -205,26 +205,30 @@ impl AstItemDef<ast::FnDef> for FunctionId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructId(salsa::InternId);\n-impl_intern_key!(StructId);\n-impl AstItemDef<ast::StructDef> for StructId {\n+pub struct StructOrUnionId(salsa::InternId);\n+impl_intern_key!(StructOrUnionId);\n+impl AstItemDef<ast::StructDef> for StructOrUnionId {\n     fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_struct(loc)\n+        db.intern_struct_or_union(loc)\n     }\n     fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_struct(self)\n+        db.lookup_intern_struct_or_union(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct UnionId(salsa::InternId);\n-impl_intern_key!(UnionId);\n-impl AstItemDef<ast::StructDef> for UnionId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_union(loc)\n+pub struct StructId(pub StructOrUnionId);\n+impl From<StructId> for StructOrUnionId {\n+    fn from(id: StructId) -> StructOrUnionId {\n+        id.0\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_union(self)\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct UnionId(pub StructOrUnionId);\n+impl From<UnionId> for StructOrUnionId {\n+    fn from(id: UnionId) -> StructOrUnionId {\n+        id.0\n     }\n }\n "}, {"sha": "7e60839614f008e46a35b34da4607ccbd153faaa", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d786ea221b27fbdf7c7f7beea0290db448e0611/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9d786ea221b27fbdf7c7f7beea0290db448e0611", "patch": "@@ -19,7 +19,8 @@ use crate::{\n     },\n     path::{Path, PathKind},\n     AdtId, AstId, AstItemDef, ConstId, CrateModuleId, EnumId, EnumVariantId, FunctionId,\n-    LocationCtx, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, UnionId,\n+    LocationCtx, ModuleDefId, ModuleId, StaticId, StructId, StructOrUnionId, TraitId, TypeAliasId,\n+    UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase2, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -664,12 +665,14 @@ where\n                 PerNs::values(FunctionId::from_ast_id(ctx, ast_id).into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let s = StructId::from_ast_id(ctx, ast_id).into();\n+                let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n+                let s = StructId(id).into();\n                 PerNs::both(s, s)\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let s = UnionId::from_ast_id(ctx, ast_id).into();\n-                PerNs::both(s, s)\n+                let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n+                let u = UnionId(id).into();\n+                PerNs::both(u, u)\n             }\n             raw::DefKind::Enum(ast_id) => PerNs::types(EnumId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::Const(ast_id) => PerNs::values(ConstId::from_ast_id(ctx, ast_id).into()),"}]}