{"sha": "4ba83cbfca43631edd0ae721a504f8cc1827547c", "node_id": "C_kwDOAAsO6NoAKDRiYTgzY2JmY2E0MzYzMWVkZDBhZTcyMWE1MDRmOGNjMTgyNzU0N2M", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-14T11:51:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-14T11:51:47Z"}, "message": "Merge pull request #1220 from bjorn3/dont_print_on_trap\n\nReplace a lot of print+trap with plain trap", "tree": {"sha": "4383f5df7149b962a22cb2e76b2f8d9aa84f64d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4383f5df7149b962a22cb2e76b2f8d9aa84f64d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba83cbfca43631edd0ae721a504f8cc1827547c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLyxTCRBK7hj4Ov3rIwAADw0IAEL/6ImaIYaGzS24HCOe+tGF\nOSmqwibEGBEu1MPAp0EU3/2FpWyJ0cV9kI/xX5Lid1DGW9GcxVoXOvNQILm4nAiX\ns8q4Tp+RZnRABVpn6dPKXOum/msURxM1gTJEVqYaRPVFaiogbQjIeVJQw/Bt4+MB\nRbHBd+PtU/2EuxqlSr/OxVolGlhC5C6pbM3soPRlndrw3AIllgeBxu1bmB74uVpF\nTlrVPBrPJSWKEZj+ZndL0v7sTIBS6onLiNB2kz4g9N5x1NFreupJVlTLwnleUK43\n09vjRWmZ3WYGIE4Dk94qk29HjPYkG+l2YjT9/OSzUcAspw7yNQDxMwxXOrv1uG0=\n=g3nU\n-----END PGP SIGNATURE-----\n", "payload": "tree 4383f5df7149b962a22cb2e76b2f8d9aa84f64d8\nparent 90f8aefe7142d23a64ae95b5ae5a292a6e0519db\nparent d8e7501584b49c772b0603b61a14a7f468f0f4de\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1647258707 +0100\ncommitter GitHub <noreply@github.com> 1647258707 +0100\n\nMerge pull request #1220 from bjorn3/dont_print_on_trap\n\nReplace a lot of print+trap with plain trap"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba83cbfca43631edd0ae721a504f8cc1827547c", "html_url": "https://github.com/rust-lang/rust/commit/4ba83cbfca43631edd0ae721a504f8cc1827547c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba83cbfca43631edd0ae721a504f8cc1827547c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f8aefe7142d23a64ae95b5ae5a292a6e0519db", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f8aefe7142d23a64ae95b5ae5a292a6e0519db", "html_url": "https://github.com/rust-lang/rust/commit/90f8aefe7142d23a64ae95b5ae5a292a6e0519db"}, {"sha": "d8e7501584b49c772b0603b61a14a7f468f0f4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e7501584b49c772b0603b61a14a7f468f0f4de", "html_url": "https://github.com/rust-lang/rust/commit/d8e7501584b49c772b0603b61a14a7f468f0f4de"}], "stats": {"total": 60, "additions": 16, "deletions": 44}, "files": [{"sha": "ef56fb191bff5aabbbb884150ea83421b560c5b3", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -507,7 +507,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         let ret_block = fx.get_block(dest);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n-        trap_unreachable(fx, \"[corruption] Diverging function returned\");\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n     }\n }\n "}, {"sha": "0a0d17a69c593e2adc64f2ed18a9be3c66b54bf5", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -90,7 +90,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     } else if arg_uninhabited {\n         fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n         fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n-        crate::trap::trap_unreachable(&mut fx, \"function has uninhabited argument\");\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n     } else {\n         tcx.sess.time(\"codegen clif ir\", || {\n             tcx.sess\n@@ -424,18 +424,16 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         fx.bcx.ins().jump(destination_block, &[]);\n                     }\n                     None => {\n-                        crate::trap::trap_unreachable(\n-                            fx,\n-                            \"[corruption] Returned from noreturn inline asm\",\n-                        );\n+                        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n                     }\n                 }\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n-                trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");\n+                // FIXME implement unwinding\n+                fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n             }\n             TerminatorKind::Unreachable => {\n-                trap_unreachable(fx, \"[corruption] Hit unreachable code.\");\n+                fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n             }\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdge { .. }\n@@ -925,5 +923,5 @@ pub(crate) fn codegen_panic_inner<'tcx>(\n         args,\n     );\n \n-    crate::trap::trap_unreachable(fx, \"panic lang item returned\");\n+    fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }"}, {"sha": "6b2893fdaeb29c53ce09550a27fed4c2c31fb520", "filename": "src/discriminant.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -68,11 +68,10 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let layout = value.layout();\n \n     if layout.abi == Abi::Uninhabited {\n-        return trap_unreachable_ret_value(\n-            fx,\n-            dest_layout,\n-            \"[panic] Tried to get discriminant for uninhabited type.\",\n-        );\n+        let true_ = fx.bcx.ins().iconst(types::I32, 1);\n+        fx.bcx.ins().trapnz(true_, TrapCode::UnreachableCodeReached);\n+        // Return a dummy value\n+        return CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout);\n     }\n \n     let (tag_scalar, tag_field, tag_encoding) = match &layout.variants {"}, {"sha": "0e4f7ee907a5146bb8347a2d65f2564657af264c", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -126,12 +126,9 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n     }\n \n-    if let Some((_, dest)) = destination {\n-        let ret_block = fx.get_block(dest);\n-        fx.bcx.ins().jump(ret_block, &[]);\n-    } else {\n-        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n-    }\n+    let dest = destination.expect(\"all llvm intrinsics used by stdlib should return\").1;\n+    let ret_block = fx.get_block(dest);\n+    fx.bcx.ins().jump(ret_block, &[]);\n }\n \n // llvm.x86.avx2.vperm2i128"}, {"sha": "eeda0dd6f7040b94cdce4d903cea7c70a24cc253", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -229,7 +229,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             // Insert non returning intrinsics here\n             match intrinsic {\n                 sym::abort => {\n-                    trap_abort(fx, \"Called intrinsic::abort.\");\n+                    fx.bcx.ins().trap(TrapCode::User(0));\n                 }\n                 sym::transmute => {\n                     crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", span);\n@@ -1119,6 +1119,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         let ret_block = fx.get_block(dest);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n-        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n     }\n }"}, {"sha": "878b9390e1318c6c650cf56fb0ed6a3b1c132682", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -105,7 +105,6 @@ mod prelude {\n     pub(crate) use crate::common::*;\n     pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n-    pub(crate) use crate::trap::*;\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n }\n "}, {"sha": "923269c4de9ab8993fcf5e564f0a0a7f2f11dea4", "filename": "src/trap.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba83cbfca43631edd0ae721a504f8cc1827547c/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=4ba83cbfca43631edd0ae721a504f8cc1827547c", "patch": "@@ -25,12 +25,6 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }\n \n-/// Trap code: user1\n-pub(crate) fn trap_abort(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<str>) {\n-    codegen_print(fx, msg.as_ref());\n-    fx.bcx.ins().trap(TrapCode::User(1));\n-}\n-\n /// Use this for example when a function call should never return. This will fill the current block,\n /// so you can **not** add instructions to it afterwards.\n ///\n@@ -39,21 +33,6 @@ pub(crate) fn trap_unreachable(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<\n     codegen_print(fx, msg.as_ref());\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n-\n-/// Like `trap_unreachable` but returns a fake value of the specified type.\n-///\n-/// Trap code: user65535\n-pub(crate) fn trap_unreachable_ret_value<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    dest_layout: TyAndLayout<'tcx>,\n-    msg: impl AsRef<str>,\n-) -> CValue<'tcx> {\n-    codegen_print(fx, msg.as_ref());\n-    let true_ = fx.bcx.ins().iconst(types::I32, 1);\n-    fx.bcx.ins().trapnz(true_, TrapCode::UnreachableCodeReached);\n-    CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout)\n-}\n-\n /// Use this when something is unimplemented, but `libcore` or `libstd` requires it to codegen.\n /// Unlike `trap_unreachable` this will not fill the current block, so you **must** add instructions\n /// to it afterwards."}]}