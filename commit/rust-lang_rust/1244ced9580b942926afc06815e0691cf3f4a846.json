{"sha": "1244ced9580b942926afc06815e0691cf3f4a846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDRjZWQ5NTgwYjk0MjkyNmFmYzA2ODE1ZTA2OTFjZjNmNGE4NDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-02-27T13:33:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-02-27T13:51:22Z"}, "message": "Remove \"important traits\" feature", "tree": {"sha": "47931045578dbbe4f1ca67e682e6c1926cd229d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47931045578dbbe4f1ca67e682e6c1926cd229d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1244ced9580b942926afc06815e0691cf3f4a846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1244ced9580b942926afc06815e0691cf3f4a846", "html_url": "https://github.com/rust-lang/rust/commit/1244ced9580b942926afc06815e0691cf3f4a846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1244ced9580b942926afc06815e0691cf3f4a846/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "html_url": "https://github.com/rust-lang/rust/commit/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650"}], "stats": {"total": 398, "additions": 7, "deletions": 391}, "files": [{"sha": "cf0280b6ff48ced10f5eb2dd68b92baf28082454", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -138,27 +138,6 @@ Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n [unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n [issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n \n-### Adding your trait to the \"Important Traits\" dialog\n-\n-Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to a given type when\n-implemented on it. These traits are intended to be the primary interface for their types, and are\n-often the only thing available to be documented on their types. For this reason, Rustdoc will track\n-when a given type implements one of these traits and call special attention to it when a function\n-returns one of these types. This is the \"Important Traits\" dialog, visible as a circle-i button next\n-to the function, which, when clicked, shows the dialog.\n-\n-In the standard library, the traits that qualify for inclusion are `Iterator`, `io::Read`, and\n-`io::Write`. However, rather than being implemented as a hard-coded list, these traits have a\n-special marker attribute on them: `#[doc(spotlight)]`. This means that you could apply this\n-attribute to your own trait to include it in the \"Important Traits\" dialog in documentation.\n-\n-The `#[doc(spotlight)]` attribute currently requires the `#![feature(doc_spotlight)]` feature gate.\n-For more information, see [its chapter in the Unstable Book][unstable-spotlight] and [its tracking\n-issue][issue-spotlight].\n-\n-[unstable-spotlight]: ../unstable-book/language-features/doc-spotlight.html\n-[issue-spotlight]: https://github.com/rust-lang/rust/issues/45040\n-\n ### Exclude certain dependencies from documentation\n \n The standard library uses several dependencies which, in turn, use several types and traits from the"}, {"sha": "8117755fef1c8741f45648c178c98d37f4e3928d", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "patch": "@@ -1,30 +0,0 @@\n-# `doc_spotlight`\n-\n-The tracking issue for this feature is: [#45040]\n-\n-The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n-to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n-attribute to a trait definition will make rustdoc print extra information for functions which return\n-a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n-`io::Write` traits in the standard library.\n-\n-You can do this on your own traits, like this:\n-\n-```\n-#![feature(doc_spotlight)]\n-\n-#[doc(spotlight)]\n-pub trait MyTrait {}\n-\n-pub struct MyStruct;\n-impl MyTrait for MyStruct {}\n-\n-/// The docs for this function will have an extra line about `MyStruct` implementing `MyTrait`,\n-/// without having to write that yourself!\n-pub fn my_fn() -> MyStruct { MyStruct }\n-```\n-\n-This feature was originally implemented in PR [#45039].\n-\n-[#45040]: https://github.com/rust-lang/rust/issues/45040\n-[#45039]: https://github.com/rust-lang/rust/pull/45039"}, {"sha": "1ca3b66580cd165dcf6963be5fac91c960b27c2c", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -363,9 +363,6 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n-    /// Allows `#[doc(spotlight)]`.\n-    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n-\n     /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n "}, {"sha": "33ee6ffef0ebd2c59cf3bfbdd99fa80bf4649a32", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -198,15 +198,13 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n-    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         auto: auto_trait,\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n-        is_spotlight,\n         is_auto,\n     }\n }"}, {"sha": "e1406e163766048b03ff185f95aa95d618d2f842", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -1013,7 +1013,6 @@ impl Clean<FnRetTy> for hir::FnRetTy<'_> {\n impl Clean<Item> for doctree::Trait<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let attrs = self.attrs.clean(cx);\n-        let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n@@ -1028,7 +1027,6 @@ impl Clean<Item> for doctree::Trait<'_> {\n                 items: self.items.iter().map(|ti| ti.clean(cx)).collect(),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n-                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }"}, {"sha": "ac868afbb6f1c6e041c51bdf0e4cd01831161b07", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -952,7 +952,6 @@ pub struct Trait {\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n-    pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n "}, {"sha": "e60ff37fd279aa9725c27cc43232b1d086a6c5c0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -63,22 +63,10 @@ impl Buffer {\n         Buffer { for_html: false, buffer: String::new() }\n     }\n \n-    crate fn is_empty(&self) -> bool {\n-        self.buffer.is_empty()\n-    }\n-\n     crate fn into_inner(self) -> String {\n         self.buffer\n     }\n \n-    crate fn insert_str(&mut self, idx: usize, s: &str) {\n-        self.buffer.insert_str(idx, s);\n-    }\n-\n-    crate fn push_str(&mut self, s: &str) {\n-        self.buffer.push_str(s);\n-    }\n-\n     // Intended for consumption by write! and writeln! (std::fmt) but without\n     // the fmt::Result return type imposed by fmt::Write (and avoiding the trait\n     // import)."}, {"sha": "8e2d593c730ee7598e05dfe27a6fddc8f945c67f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 81, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -2324,7 +2324,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         f.generics.print()\n     )\n     .len();\n-    write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it));\n+    write!(w, \"<pre class='rust fn'>\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n@@ -2527,13 +2527,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(\n-            w,\n-            \"<h3 id='{id}' class='method'>{extra}<code id='{ns_id}'>\",\n-            extra = render_spotlight_traits(m),\n-            id = id,\n-            ns_id = ns_id\n-        );\n+        write!(w, \"<h3 id='{id}' class='method'><code id='{ns_id}'>\", id = id, ns_id = ns_id);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -3519,76 +3513,6 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n-fn render_spotlight_traits(item: &clean::Item) -> String {\n-    match item.inner {\n-        clean::FunctionItem(clean::Function { ref decl, .. })\n-        | clean::TyMethodItem(clean::TyMethod { ref decl, .. })\n-        | clean::MethodItem(clean::Method { ref decl, .. })\n-        | clean::ForeignFunctionItem(clean::Function { ref decl, .. }) => spotlight_decl(decl),\n-        _ => String::new(),\n-    }\n-}\n-\n-fn spotlight_decl(decl: &clean::FnDecl) -> String {\n-    let mut out = Buffer::html();\n-    let mut trait_ = String::new();\n-\n-    if let Some(did) = decl.output.def_id() {\n-        let c = cache();\n-        if let Some(impls) = c.impls.get(&did) {\n-            for i in impls {\n-                let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n-                    if out.is_empty() {\n-                        out.push_str(&format!(\n-                            \"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n-                                      <code class=\\\"content\\\">\",\n-                            impl_.for_.print()\n-                        ));\n-                        trait_.push_str(&impl_.for_.print().to_string());\n-                    }\n-\n-                    //use the \"where\" class here to make it small\n-                    out.push_str(&format!(\n-                        \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n-                        impl_.print()\n-                    ));\n-                    let t_did = impl_.trait_.def_id().unwrap();\n-                    for it in &impl_.items {\n-                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n-                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n-                            assoc_type(\n-                                &mut out,\n-                                it,\n-                                &[],\n-                                Some(&tydef.type_),\n-                                AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n-                                \"\",\n-                            );\n-                            out.push_str(\";</span>\");\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    if !out.is_empty() {\n-        out.insert_str(\n-            0,\n-            &format!(\n-                \"<div class=\\\"important-traits\\\"><div class='tooltip'>\u24d8\\\n-                                    <span class='tooltiptext'>Important traits for {}</span></div>\\\n-                                    <div class=\\\"content hidden\\\">\",\n-                trait_\n-            ),\n-        );\n-        out.push_str(\"</code></div></div>\");\n-    }\n-\n-    out.into_inner()\n-}\n-\n fn render_impl(\n     w: &mut Buffer,\n     cx: &Context,\n@@ -3695,14 +3619,13 @@ fn render_impl(\n                 (true, \" hidden\")\n             };\n         match item.inner {\n-            clean::MethodItem(clean::Method { ref decl, .. })\n-            | clean::TyMethodItem(clean::TyMethod { ref decl, .. }) => {\n+            clean::MethodItem(clean::Method { .. })\n+            | clean::TyMethodItem(clean::TyMethod { .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                     let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                     write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                    write!(w, \"{}\", spotlight_decl(decl));\n                     write!(w, \"<code id='{}'>\", ns_id);\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");"}, {"sha": "a799aed698578916b67881f8986aea99dbe0d40e", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -341,7 +341,6 @@ function getSearchElement() {\n     function handleEscape(ev) {\n         var help = getHelpElement();\n         var search = getSearchElement();\n-        hideModal();\n         if (hasClass(help, \"hidden\") === false) {\n             displayHelp(false, ev, help);\n         } else if (hasClass(search, \"hidden\") === false) {\n@@ -373,7 +372,6 @@ function getSearchElement() {\n             case \"s\":\n             case \"S\":\n                 displayHelp(false, ev);\n-                hideModal();\n                 ev.preventDefault();\n                 focusSearchBar();\n                 break;\n@@ -386,7 +384,6 @@ function getSearchElement() {\n \n             case \"?\":\n                 if (ev.shiftKey) {\n-                    hideModal();\n                     displayHelp(true, ev);\n                 }\n                 break;\n@@ -2504,31 +2501,6 @@ function getSearchElement() {\n         lineNumbersFunc(e);\n     });\n \n-    function showModal(content) {\n-        var modal = document.createElement(\"div\");\n-        modal.id = \"important\";\n-        addClass(modal, \"modal\");\n-        modal.innerHTML = \"<div class=\\\"modal-content\\\"><div class=\\\"close\\\" id=\\\"modal-close\\\">\u2715\" +\n-                          \"</div><div class=\\\"whiter\\\"></div><span class=\\\"docblock\\\">\" + content +\n-                          \"</span></div>\";\n-        document.getElementsByTagName(\"body\")[0].appendChild(modal);\n-        document.getElementById(\"modal-close\").onclick = hideModal;\n-        modal.onclick = hideModal;\n-    }\n-\n-    function hideModal() {\n-        var modal = document.getElementById(\"important\");\n-        if (modal) {\n-            modal.parentNode.removeChild(modal);\n-        }\n-    }\n-\n-    onEachLazy(document.getElementsByClassName(\"important-traits\"), function(e) {\n-        e.onclick = function() {\n-            showModal(e.lastElementChild.innerHTML);\n-        };\n-    });\n-\n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n         if (nb === 0 || nb === 1 || nb === 2) {"}, {"sha": "f05db6c218524c15b4af697b1166110bf794570c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 93, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -143,12 +143,9 @@ code, pre, a.test-arrow {\n \tborder-radius: 3px;\n \tpadding: 0 0.1em;\n }\n-.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n+.docblock pre code, .docblock-short pre code {\n \tpadding: 0;\n }\n-.docblock code.spotlight :last-child {\n-\tpadding-bottom: 0.6em;\n-}\n pre {\n \tpadding: 14px;\n }\n@@ -503,7 +500,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div:not(.important-traits) {\n+.content .methods > div {\n \tmargin-left: 40px;\n \tmargin-bottom: 15px;\n }\n@@ -1072,7 +1069,7 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tborder-style: solid;\n }\n \n-.important-traits .tooltip .tooltiptext {\n+.tooltip .tooltiptext {\n \tborder: 1px solid;\n }\n \n@@ -1117,17 +1114,6 @@ pre.rust {\n \tfont-size: 16px;\n }\n \n-.important-traits {\n-\tcursor: pointer;\n-\tz-index: 2;\n-}\n-\n-h4 > .important-traits {\n-\tposition: absolute;\n-\tleft: -44px;\n-\ttop: 2px;\n-}\n-\n #all-types {\n \ttext-align: center;\n \tborder: 1px solid;\n@@ -1354,12 +1340,6 @@ h4 > .important-traits {\n \t\tz-index: 1;\n \t}\n \n-\th4 > .important-traits {\n-\t\tposition: absolute;\n-\t\tleft: -22px;\n-\t\ttop: 24px;\n-\t}\n-\n \t#titles > div > div.count {\n \t\tfloat: left;\n \t\twidth: 100%;\n@@ -1462,82 +1442,12 @@ h4 > .important-traits {\n \t}\n }\n \n-.modal {\n-\tposition: fixed;\n-\twidth: 100vw;\n-\theight: 100vh;\n-\tz-index: 10000;\n-\ttop: 0;\n-\tleft: 0;\n-}\n-\n-.modal-content {\n-\tdisplay: block;\n-\tmax-width: 60%;\n-\tmin-width: 200px;\n-\tpadding: 8px;\n-\ttop: 40%;\n-\tposition: absolute;\n-\tleft: 50%;\n-\ttransform: translate(-50%, -40%);\n-\tborder: 1px solid;\n-\tborder-radius: 4px;\n-\tborder-top-right-radius: 0;\n-}\n-\n-.modal-content > .docblock {\n-\tmargin: 0;\n-}\n-\n h3.important {\n \tmargin: 0;\n \tmargin-bottom: 13px;\n \tfont-size: 19px;\n }\n \n-.modal-content > .docblock > code.content {\n-\tmargin: 0;\n-\tpadding: 0;\n-\tfont-size: 20px;\n-}\n-\n-.modal-content > .close {\n-\tposition: absolute;\n-\tfont-weight: 900;\n-\tright: -25px;\n-\ttop: -1px;\n-\tfont-size: 18px;\n-\twidth: 25px;\n-\tpadding-right: 2px;\n-\tborder-top-right-radius: 5px;\n-\tborder-bottom-right-radius: 5px;\n-\ttext-align: center;\n-\tborder: 1px solid;\n-\tborder-right: 0;\n-\tcursor: pointer;\n-}\n-\n-.modal-content > .whiter {\n-\theight: 25px;\n-\tposition: absolute;\n-\twidth: 3px;\n-\tright: -2px;\n-\ttop: 0px;\n-}\n-\n-#main > div.important-traits {\n-\tposition: absolute;\n-\tleft: -24px;\n-\tmargin-top: 16px;\n-}\n-\n-.content > .methods > .method > div.important-traits {\n-\tposition: absolute;\n-\tfont-weight: 400;\n-\tleft: -42px;\n-\tmargin-top: 2px;\n-}\n-\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;"}, {"sha": "e7041d54c6bfdb10badc616d423b9bef08d9a1cb", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -298,12 +298,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n-.important-traits .tooltip .tooltiptext {\n-\tbackground-color: white;\n-\tcolor: black;\n-\tborder-color: black;\n-}\n-\n #titles > div:not(.selected) {\n \tbackground-color: #252525;\n \tborder-top-color: #252525;\n@@ -317,33 +311,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n-.modal {\n-\tbackground-color: rgba(0,0,0,0.3);\n-}\n-\n-.modal-content {\n-\tbackground-color: #272727;\n-\tborder-color: #999;\n-}\n-\n-.modal-content > .close {\n-\tbackground-color: #272727;\n-\tborder-color: #999;\n-}\n-\n-.modal-content > .close:hover {\n-\tbackground-color: #ff1f1f;\n-\tcolor: white;\n-}\n-\n-.modal-content > .whiter {\n-\tbackground-color: #272727;\n-}\n-\n-.modal-content > .close:hover + .whiter {\n-\tbackground-color: #ff1f1f;\n-}\n-\n @media (max-width: 700px) {\n \t.sidebar-menu {\n \t\tbackground-color: #505050;"}, {"sha": "a1efef6701fd1c97b0214b9e7deeabe6f8acaab9", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1244ced9580b942926afc06815e0691cf3f4a846/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=1244ced9580b942926afc06815e0691cf3f4a846", "patch": "@@ -292,12 +292,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tborder-color: transparent black transparent transparent;\n }\n \n-.important-traits .tooltip .tooltiptext {\n-\tbackground-color: white;\n-\tcolor: black;\n-\tborder-color: black;\n-}\n-\n #titles > div:not(.selected) {\n \tbackground-color: #e6e6e6;\n \tborder-top-color: #e6e6e6;\n@@ -311,33 +305,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n-.modal {\n-\tbackground-color: rgba(0,0,0,0.3);\n-}\n-\n-.modal-content {\n-\tbackground-color: #eee;\n-\tborder-color: #999;\n-}\n-\n-.modal-content > .close {\n-\tbackground-color: #eee;\n-\tborder-color: #999;\n-}\n-\n-.modal-content > .close:hover {\n-\tbackground-color: #ff1f1f;\n-\tcolor: white;\n-}\n-\n-.modal-content > .whiter {\n-\tbackground-color: #eee;\n-}\n-\n-.modal-content > .close:hover + .whiter {\n-\tbackground-color: #ff1f1f;\n-}\n-\n @media (max-width: 700px) {\n \t.sidebar-menu {\n \t\tbackground-color: #F1F1F1;"}, {"sha": "ddd46c3c2155f8b74a55aa30144381499c3498d3", "filename": "src/test/rustdoc/doc-spotlight.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs?ref=01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "patch": "@@ -1,36 +0,0 @@\n-#![feature(doc_spotlight)]\n-\n-pub struct Wrapper<T> {\n-    inner: T,\n-}\n-\n-impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n-\n-#[doc(spotlight)]\n-pub trait SomeTrait {\n-    // @has doc_spotlight/trait.SomeTrait.html\n-    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n-    fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n-        Wrapper {\n-            inner: self,\n-        }\n-    }\n-}\n-\n-pub struct SomeStruct;\n-impl SomeTrait for SomeStruct {}\n-\n-impl SomeStruct {\n-    // @has doc_spotlight/struct.SomeStruct.html\n-    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n-    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n-    pub fn new() -> SomeStruct {\n-        SomeStruct\n-    }\n-}\n-\n-// @has doc_spotlight/fn.bare_fn.html\n-// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n-pub fn bare_fn() -> SomeStruct {\n-    SomeStruct\n-}"}, {"sha": "452b45b34456bbb37771e3bbe31eefc1602cfa39", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.rs?ref=01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "patch": "@@ -1,4 +0,0 @@\n-#[doc(spotlight)] //~ ERROR: `#[doc(spotlight)]` is experimental\n-trait SomeTrait {}\n-\n-fn main() {}"}, {"sha": "010d74054a4120fa3b687afc2e8e9f21a0405164", "filename": "src/test/ui/feature-gates/feature-gate-doc_spotlight.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_spotlight.stderr?ref=01a8b5f26e536a3bcd9449f62fd0b9b68ef3d650", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `#[doc(spotlight)]` is experimental\n-  --> $DIR/feature-gate-doc_spotlight.rs:1:1\n-   |\n-LL | #[doc(spotlight)]\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #45040 <https://github.com/rust-lang/rust/issues/45040> for more information\n-   = help: add `#![feature(doc_spotlight)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}