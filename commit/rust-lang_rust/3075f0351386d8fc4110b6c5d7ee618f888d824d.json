{"sha": "3075f0351386d8fc4110b6c5d7ee618f888d824d", "node_id": "C_kwDOAAsO6NoAKDMwNzVmMDM1MTM4NmQ4ZmM0MTEwYjZjNWQ3ZWU2MThmODg4ZDgyNGQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-25T16:10:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T10:12:28Z"}, "message": "Resolve lifetimes using the regular logic for RPIT.", "tree": {"sha": "6e92b08b59c85e5f18a49683bd92c0cda7630845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e92b08b59c85e5f18a49683bd92c0cda7630845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3075f0351386d8fc4110b6c5d7ee618f888d824d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3075f0351386d8fc4110b6c5d7ee618f888d824d", "html_url": "https://github.com/rust-lang/rust/commit/3075f0351386d8fc4110b6c5d7ee618f888d824d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3075f0351386d8fc4110b6c5d7ee618f888d824d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c10e4cb0835f34b2ac85188f0ad44fab14446b", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c10e4cb0835f34b2ac85188f0ad44fab14446b", "html_url": "https://github.com/rust-lang/rust/commit/44c10e4cb0835f34b2ac85188f0ad44fab14446b"}], "stats": {"total": 300, "additions": 238, "deletions": 62}, "files": [{"sha": "895f32114dc293be22ca95bfcd07e068eded1b63", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -452,7 +452,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_item(this, item)\n                 });\n             }\n-            hir::ItemKind::OpaqueTy(hir::OpaqueTy { .. }) => {\n+            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::TyAlias, ..\n+            }) => {\n                 // Opaque types are visited when we visit the\n                 // `TyKind::OpaqueDef`, so that they have the lifetimes from\n                 // their parent opaque_ty in scope.\n@@ -478,6 +480,37 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     });\n                 }\n             }\n+            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                origin: hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_),\n+                generics,\n+                ..\n+            }) => {\n+                // We want to start our early-bound indices at the end of the parent scope,\n+                // not including any parent `impl Trait`s.\n+                let mut lifetimes = FxIndexMap::default();\n+                debug!(?generics.params);\n+                for param in generics.params {\n+                    match param.kind {\n+                        GenericParamKind::Lifetime { .. } => {\n+                            let (def_id, reg) = Region::early(self.tcx.hir(), &param);\n+                            lifetimes.insert(def_id, reg);\n+                        }\n+                        GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {}\n+                    }\n+                }\n+\n+                let scope = Scope::Binder {\n+                    hir_id: item.hir_id(),\n+                    lifetimes,\n+                    s: self.scope,\n+                    scope_type: BinderScopeType::Normal,\n+                    where_bound_origin: None,\n+                };\n+                self.with(scope, |this| {\n+                    let scope = Scope::TraitRefBoundary { s: this.scope };\n+                    this.with(scope, |this| intravisit::walk_item(this, item))\n+                });\n+            }\n             hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)\n             | hir::ItemKind::Struct(_, ref generics)\n@@ -604,7 +637,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 //                 ^                  ^ this gets resolved in the scope of\n                 //                                      the opaque_ty generics\n                 let opaque_ty = self.tcx.hir().item(item_id);\n-                let (generics, bounds) = match opaque_ty.kind {\n+                match opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                         origin: hir::OpaqueTyOrigin::TyAlias,\n                         ..\n@@ -625,10 +658,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                         origin: hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..),\n-                        ref generics,\n-                        bounds,\n                         ..\n-                    }) => (generics, bounds),\n+                    }) => {}\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 };\n \n@@ -681,38 +712,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                     }\n                 }\n-\n-                // We want to start our early-bound indices at the end of the parent scope,\n-                // not including any parent `impl Trait`s.\n-                let mut lifetimes = FxIndexMap::default();\n-                debug!(?generics.params);\n-                for param in generics.params {\n-                    match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            let (def_id, reg) = Region::early(self.tcx.hir(), &param);\n-                            lifetimes.insert(def_id, reg);\n-                        }\n-                        GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {}\n-                    }\n-                }\n-                self.record_late_bound_vars(ty.hir_id, vec![]);\n-\n-                let scope = Scope::Binder {\n-                    hir_id: ty.hir_id,\n-                    lifetimes,\n-                    s: self.scope,\n-                    scope_type: BinderScopeType::Normal,\n-                    where_bound_origin: None,\n-                };\n-                self.with(scope, |this| {\n-                    let scope = Scope::TraitRefBoundary { s: this.scope };\n-                    this.with(scope, |this| {\n-                        this.visit_generics(generics);\n-                        for bound in bounds {\n-                            this.visit_param_bound(bound);\n-                        }\n-                    })\n-                });\n             }\n             _ => intravisit::walk_ty(self, ty),\n         }"}, {"sha": "06c3d9ad434e4a443f3139a42be0de01cb352104", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -4,16 +4,19 @@ use std::fmt::Debug;\n fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn d() -> impl Fn() -> (impl Debug + '_) {"}, {"sha": "b6857a6c4c51d34ff1a008e4c772a9415fcee582", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.stderr", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-fn-hrtb-bounds.rs:19:38\n+  --> $DIR/impl-fn-hrtb-bounds.rs:22:38\n    |\n LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n    |                                      ^^ expected named lifetime parameter\n@@ -22,30 +22,57 @@ note: lifetime declared here\n LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n    |                   ^\n \n+error: lifetime may not live long enough\n+  --> $DIR/impl-fn-hrtb-bounds.rs:6:9\n+   |\n+LL |     |x| x\n+   |      -- ^ returning this value requires that `'1` must outlive `'2`\n+   |      ||\n+   |      |return type of closure is impl Debug + '2\n+   |      has type `&'1 u8`\n+\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:9:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:10:52\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:9:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:10:20\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                    ^^\n \n+error: lifetime may not live long enough\n+  --> $DIR/impl-fn-hrtb-bounds.rs:12:9\n+   |\n+LL |     |x| x\n+   |      -- ^ returning this value requires that `'1` must outlive `'2`\n+   |      ||\n+   |      |return type of closure is impl Debug + '2\n+   |      has type `&'1 u8`\n+\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:14:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:16:52\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:14:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:16:20\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                    ^^\n \n-error: aborting due to 4 previous errors\n+error: lifetime may not live long enough\n+  --> $DIR/impl-fn-hrtb-bounds.rs:18:9\n+   |\n+LL |     |x| x\n+   |      -- ^ returning this value requires that `'1` must outlive `'2`\n+   |      ||\n+   |      |return type of closure is impl Debug + '2\n+   |      has type `&'1 u8`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}, {"sha": "a4a1f1dcee1200a935d096b2256dba4dabd7db15", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -3,8 +3,9 @@ use std::fmt::Debug;\n \n fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n     //~^ ERROR ambiguous `+` in a type\n-    //~^^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+    //~| ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     |x| x\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn b() -> impl Fn() -> impl Debug + Send {"}, {"sha": "e18e89700b4e9f8b8a6bdc0c1f43cb3576fe6f7e", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -5,7 +5,7 @@ LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                           ^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + '_)`\n \n error: ambiguous `+` in a type\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:10:24\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:11:24\n    |\n LL | fn b() -> impl Fn() -> impl Debug + Send {\n    |                        ^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + Send)`\n@@ -22,5 +22,14 @@ note: lifetime declared here\n LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                   ^\n \n-error: aborting due to 3 previous errors\n+error: lifetime may not live long enough\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:7:9\n+   |\n+LL |     |x| x\n+   |      -- ^ returning this value requires that `'1` must outlive `'2`\n+   |      ||\n+   |      |return type of closure is impl Debug + '2\n+   |      has type `&'1 u8`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "6dc8935c77708eec3ad2cb115281dff2ab8eeac8", "filename": "src/test/ui/impl-trait/issues/issue-67830.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -21,6 +21,8 @@ struct A;\n fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     Wrap(|a| Some(a).into_iter())\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n }\n \n fn main() {}"}, {"sha": "cbc7cd54201392a3c1dcefe88b89264ab4a27193", "filename": "src/test/ui/impl-trait/issues/issue-67830.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -10,5 +10,23 @@ note: lifetime declared here\n LL | fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n    |                       ^^\n \n-error: aborting due to previous error\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-67830.rs:23:5\n+   |\n+LL |     Wrap(|a| Some(a).into_iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-67830.rs:23:5\n+   |\n+LL |     Wrap(|a| Some(a).into_iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "f4354d1b2aef0cd187d68e5b11cdf1f62aea9942", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -18,11 +18,16 @@ fn make_impl() -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {}\n fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     &()\n+    //~^ ERROR implementation of `Hrtb` is not general enough\n+    //~| ERROR implementation of `Hrtb` is not general enough\n }\n \n fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n     //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n     x\n+    //~^ ERROR implementation of `Hrtb` is not general enough\n+    //~| ERROR implementation of `Hrtb` is not general enough\n+    //~| ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "99c91d16a6475f1a9748aed0e185829c9c0391e0", "filename": "src/test/ui/impl-trait/issues/issue-88236-2.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-88236-2.stderr?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -22,17 +22,71 @@ note: lifetime declared here\n LL | fn make_weird_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                               ^^\n \n+error: implementation of `Hrtb` is not general enough\n+  --> $DIR/issue-88236-2.rs:20:5\n+   |\n+LL |     &()\n+   |     ^^^ implementation of `Hrtb` is not general enough\n+   |\n+   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n+   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n+\n+error: implementation of `Hrtb` is not general enough\n+  --> $DIR/issue-88236-2.rs:20:5\n+   |\n+LL |     &()\n+   |     ^^^ implementation of `Hrtb` is not general enough\n+   |\n+   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n+   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n+\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/issue-88236-2.rs:23:78\n+  --> $DIR/issue-88236-2.rs:25:78\n    |\n LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                                                              ^^\n    |\n note: lifetime declared here\n-  --> $DIR/issue-88236-2.rs:23:45\n+  --> $DIR/issue-88236-2.rs:25:45\n    |\n LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n    |                                             ^^\n \n-error: aborting due to 3 previous errors\n+error: lifetime may not live long enough\n+  --> $DIR/issue-88236-2.rs:27:5\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> {\n+   |                  -- lifetime `'b` defined here\n+LL |\n+LL |     x\n+   |     ^ returning this value requires that `'b` must outlive `'static`\n+   |\n+help: to declare that `impl for<'a> Hrtb<'a, Assoc = impl Send + 'static>` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a> + 'b {\n+   |                                                                                  ++++\n+help: to declare that `impl Send + 'a` captures data from argument `x`, you can add an explicit `'b` lifetime bound\n+   |\n+LL | fn make_bad_impl<'b>(x: &'b ()) -> impl for<'a> Hrtb<'a, Assoc = impl Send + 'a + 'b> {\n+   |                                                                                 ++++\n+\n+error: implementation of `Hrtb` is not general enough\n+  --> $DIR/issue-88236-2.rs:27:5\n+   |\n+LL |     x\n+   |     ^ implementation of `Hrtb` is not general enough\n+   |\n+   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n+   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n+\n+error: implementation of `Hrtb` is not general enough\n+  --> $DIR/issue-88236-2.rs:27:5\n+   |\n+LL |     x\n+   |     ^ implementation of `Hrtb` is not general enough\n+   |\n+   = note: `Hrtb<'0>` would have to be implemented for the type `&()`, for any lifetime `'0`...\n+   = note: ...but `Hrtb<'1>` is actually implemented for the type `&'1 ()`, for some specific lifetime `'1`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "377658b95c987aa9bcce988e3b40067338d24445", "filename": "src/test/ui/impl-trait/nested-rpit-hrtb.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.rs?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -31,34 +31,40 @@ fn one_hrtb_trait_param() -> impl for<'a> Foo<'a, Assoc = impl Qux<'a>> {}\n \n fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+//~| ERROR implementation of `Bar` is not general enough\n \n fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n //~^ ERROR higher kinded lifetime bounds on nested opaque types are not supported yet\n+//~| ERROR the trait bound `&(): Qux<'static>` is not satisfied\n \n-// This should pass.\n+// This should resolve.\n fn one_hrtb_mention_fn_trait_param<'b>() -> impl for<'a> Foo<'a, Assoc = impl Qux<'b>> {}\n \n-// This should pass.\n+// This should resolve.\n fn one_hrtb_mention_fn_outlives<'b>() -> impl for<'a> Foo<'a, Assoc = impl Sized + 'b> {}\n \n-// This should pass.\n+// This should resolve.\n fn one_hrtb_mention_fn_trait_param_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Qux<'b>> {}\n+//~^ ERROR the trait bound `&(): Qux<'b>` is not satisfied\n \n-// This should pass.\n+// This should resolve.\n fn one_hrtb_mention_fn_outlives_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'b> {}\n+//~^ ERROR implementation of `Bar` is not general enough\n \n-// This should pass.\n+// This should resolve.\n fn two_htrb_trait_param() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Qux<'b>> {}\n \n // `'b` is not in scope for the outlives bound.\n fn two_htrb_outlives() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Sized + 'b> {}\n //~^ ERROR use of undeclared lifetime name `'b` [E0261]\n \n-// This should pass.\n+// This should resolve.\n fn two_htrb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Qux<'b>> {}\n+//~^ ERROR the trait bound `for<'b> &(): Qux<'b>` is not satisfied\n \n // `'b` is not in scope for the outlives bound.\n fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n //~^ ERROR use of undeclared lifetime name `'b` [E0261]\n+//~| ERROR implementation of `Bar` is not general enough\n \n fn main() {}"}, {"sha": "fb2a74453574ce44c990ebc611cb0db3aea68146", "filename": "src/test/ui/impl-trait/nested-rpit-hrtb.stderr", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3075f0351386d8fc4110b6c5d7ee618f888d824d/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-rpit-hrtb.stderr?ref=3075f0351386d8fc4110b6c5d7ee618f888d824d", "patch": "@@ -1,5 +1,5 @@\n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/nested-rpit-hrtb.rs:54:77\n+  --> $DIR/nested-rpit-hrtb.rs:58:77\n    |\n LL | fn two_htrb_outlives() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Sized + 'b> {}\n    |                                                                             ^^ undeclared lifetime\n@@ -15,7 +15,7 @@ LL | fn two_htrb_outlives<'b>() -> impl for<'a> Foo<'a, Assoc = impl for<'b> Siz\n    |                     ++++\n \n error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/nested-rpit-hrtb.rs:61:82\n+  --> $DIR/nested-rpit-hrtb.rs:66:82\n    |\n LL | fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n    |                                                                                  ^^ undeclared lifetime\n@@ -65,18 +65,70 @@ note: lifetime declared here\n LL | fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n    |                                         ^^\n \n+error: implementation of `Bar` is not general enough\n+  --> $DIR/nested-rpit-hrtb.rs:32:78\n+   |\n+LL | fn one_hrtb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'a> {}\n+   |                                                                              ^^ implementation of `Bar` is not general enough\n+   |\n+   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n+\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/nested-rpit-hrtb.rs:35:73\n+  --> $DIR/nested-rpit-hrtb.rs:36:73\n    |\n LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n    |                                                                         ^^\n    |\n note: lifetime declared here\n-  --> $DIR/nested-rpit-hrtb.rs:35:44\n+  --> $DIR/nested-rpit-hrtb.rs:36:44\n    |\n LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n    |                                            ^^\n \n-error: aborting due to 6 previous errors\n+error[E0277]: the trait bound `&(): Qux<'static>` is not satisfied\n+  --> $DIR/nested-rpit-hrtb.rs:36:64\n+   |\n+LL | fn one_hrtb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl Qux<'a>> {}\n+   |                                                                ^^^^^^^^^^^^ the trait `Qux<'static>` is not implemented for `&()`\n+   |\n+   = help: the trait `Qux<'_>` is implemented for `()`\n+\n+error[E0277]: the trait bound `&(): Qux<'b>` is not satisfied\n+  --> $DIR/nested-rpit-hrtb.rs:47:79\n+   |\n+LL | fn one_hrtb_mention_fn_trait_param_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Qux<'b>> {}\n+   |                                                                               ^^^^^^^^^^^^ the trait `Qux<'b>` is not implemented for `&()`\n+   |\n+   = help: the trait `Qux<'_>` is implemented for `()`\n+\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/nested-rpit-hrtb.rs:51:93\n+   |\n+LL | fn one_hrtb_mention_fn_outlives_uses<'b>() -> impl for<'a> Bar<'a, Assoc = impl Sized + 'b> {}\n+   |                                                                                             ^^ implementation of `Bar` is not general enough\n+   |\n+   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n+\n+error[E0277]: the trait bound `for<'b> &(): Qux<'b>` is not satisfied\n+  --> $DIR/nested-rpit-hrtb.rs:62:64\n+   |\n+LL | fn two_htrb_trait_param_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Qux<'b>> {}\n+   |                                                                ^^^^^^^^^^^^^^^^^^^^ the trait `for<'b> Qux<'b>` is not implemented for `&()`\n+   |\n+   = help: the trait `Qux<'_>` is implemented for `()`\n+\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/nested-rpit-hrtb.rs:66:86\n+   |\n+LL | fn two_htrb_outlives_uses() -> impl for<'a> Bar<'a, Assoc = impl for<'b> Sized + 'b> {}\n+   |                                                                                      ^^ implementation of `Bar` is not general enough\n+   |\n+   = note: `()` must implement `Bar<'0>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<'1>`, for some specific lifetime `'1`\n+\n+error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+Some errors have detailed explanations: E0261, E0277.\n+For more information about an error, try `rustc --explain E0261`."}]}