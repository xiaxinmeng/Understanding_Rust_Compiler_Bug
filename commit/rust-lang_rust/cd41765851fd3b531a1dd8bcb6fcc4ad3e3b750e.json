{"sha": "cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDE3NjU4NTFmZDNiNTMxYTFkZDhiY2I2ZmNjNGFkM2UzYjc1MGU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T14:55:04Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-08T14:55:04Z"}, "message": "codegen_llvm: improve allocations", "tree": {"sha": "d184002e3e4f2c79578d4e52deb4233ba96d3d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d184002e3e4f2c79578d4e52deb4233ba96d3d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "html_url": "https://github.com/rust-lang/rust/commit/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f47737b503d6af656ed48eea2a03ba35547b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f47737b503d6af656ed48eea2a03ba35547b61", "html_url": "https://github.com/rust-lang/rust/commit/61f47737b503d6af656ed48eea2a03ba35547b61"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "7c237407c8f54b219a903b0e360392f18ff87761", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "patch": "@@ -33,7 +33,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind\n     let void = llvm::LLVMVoidTypeInContext(llcx);\n \n     for method in ALLOCATOR_METHODS {\n-        let mut args = Vec::new();\n+        let mut args = Vec::with_capacity(method.inputs.len());\n         for ty in method.inputs.iter() {\n             match *ty {\n                 AllocatorTy::Layout => {"}, {"sha": "89fe69110410b7685d89559866ef5c0d3a60896b", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "patch": "@@ -280,12 +280,14 @@ pub fn provide_extern(providers: &mut Providers) {\n         // `NativeLibrary` internally contains information about\n         // `#[link(wasm_import_module = \"...\")]` for example.\n         let native_libs = tcx.native_libraries(cnum);\n-        let mut def_id_to_native_lib = FxHashMap();\n-        for lib in native_libs.iter() {\n+\n+        let def_id_to_native_lib = native_libs.iter().filter_map(|lib|\n             if let Some(id) = lib.foreign_module {\n-                def_id_to_native_lib.insert(id, lib);\n+                Some((id, lib))\n+            } else {\n+                None\n             }\n-        }\n+        ).collect::<FxHashMap<_, _>>();\n \n         let mut ret = FxHashMap();\n         for lib in tcx.foreign_modules(cnum).iter() {\n@@ -296,10 +298,10 @@ pub fn provide_extern(providers: &mut Providers) {\n                 Some(s) => s,\n                 None => continue,\n             };\n-            for id in lib.foreign_items.iter() {\n+            ret.extend(lib.foreign_items.iter().map(|id| {\n                 assert_eq!(id.krate, cnum);\n-                ret.insert(*id, module.to_string());\n-            }\n+                (*id, module.to_string())\n+            }));\n         }\n \n         Lrc::new(ret)"}, {"sha": "a86865bdec4d81243df4cd29309b546fe452e45b", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "patch": "@@ -1122,7 +1122,15 @@ impl CrateInfo {\n             info.load_wasm_imports(tcx, LOCAL_CRATE);\n         }\n \n-        for &cnum in tcx.crates().iter() {\n+        let crates = tcx.crates();\n+\n+        let n_crates = crates.len();\n+        info.native_libraries.reserve(n_crates);\n+        info.crate_name.reserve(n_crates);\n+        info.used_crate_source.reserve(n_crates);\n+        info.missing_lang_items.reserve(n_crates);\n+\n+        for &cnum in crates.iter() {\n             info.native_libraries.insert(cnum, tcx.native_libraries(cnum));\n             info.crate_name.insert(cnum, tcx.crate_name(cnum).to_string());\n             info.used_crate_source.insert(cnum, tcx.used_crate_source(cnum));\n@@ -1164,11 +1172,12 @@ impl CrateInfo {\n     }\n \n     fn load_wasm_imports(&mut self, tcx: TyCtxt, cnum: CrateNum) {\n-        for (&id, module) in tcx.wasm_import_module_map(cnum).iter() {\n+        self.wasm_imports.extend(tcx.wasm_import_module_map(cnum).iter().map(|(&id, module)| {\n             let instance = Instance::mono(tcx, id);\n             let import_name = tcx.symbol_name(instance);\n-            self.wasm_imports.insert(import_name.to_string(), module.clone());\n-        }\n+\n+            (import_name.to_string(), module.clone())\n+        }));\n     }\n }\n "}, {"sha": "8456cf2f4805912400e12160e8fc41183139ca33", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=cd41765851fd3b531a1dd8bcb6fcc4ad3e3b750e", "patch": "@@ -52,8 +52,9 @@ fn require_inited() {\n }\n \n unsafe fn configure_llvm(sess: &Session) {\n-    let mut llvm_c_strs = Vec::new();\n-    let mut llvm_args = Vec::new();\n+    let n_args = sess.opts.cg.llvm_args.len();\n+    let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n+    let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n     {\n         let mut add = |arg: &str| {"}]}