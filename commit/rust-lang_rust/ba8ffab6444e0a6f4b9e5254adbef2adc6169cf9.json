{"sha": "ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGZmYWI2NDQ0ZTBhNmY0YjllNTI1NGFkYmVmMmFkYzYxNjljZjk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-05-03T12:50:35Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-05-03T12:55:08Z"}, "message": "Omit name hints for enum names similar to parameter names", "tree": {"sha": "9a39cda35485110e115039b29a44bc333066a4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a39cda35485110e115039b29a44bc333066a4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9", "html_url": "https://github.com/rust-lang/rust/commit/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb820f460f00ab20b9b8d952c600755ecadee2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb820f460f00ab20b9b8d952c600755ecadee2c", "html_url": "https://github.com/rust-lang/rust/commit/8eb820f460f00ab20b9b8d952c600755ecadee2c"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "7463064286f9a5d76a599a4e478deb8d83f4c4b1", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=ba8ffab6444e0a6f4b9e5254adbef2adc6169cf9", "patch": "@@ -144,7 +144,7 @@ fn get_param_name_hints(\n         .iter()\n         .skip(n_params_to_skip)\n         .zip(args)\n-        .filter(|(param, arg)| should_show_param_name_hint(&fn_signature, param, &arg))\n+        .filter(|(param, arg)| should_show_param_name_hint(sema, &fn_signature, param, &arg))\n         .map(|(param_name, arg)| InlayHint {\n             range: arg.syntax().text_range(),\n             kind: InlayKind::ParameterHint,\n@@ -231,14 +231,15 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n }\n \n fn should_show_param_name_hint(\n+    sema: &Semantics<RootDatabase>,\n     fn_signature: &FunctionSignature,\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n+    let param_name = param_name.trim_start_matches('_');\n     if param_name.is_empty()\n-        || is_argument_similar_to_param_name(argument, param_name)\n-        || Some(param_name.trim_start_matches('_'))\n-            == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n+        || Some(param_name) == fn_signature.name.as_ref().map(|s| s.trim_start_matches('_'))\n+        || is_argument_similar_to_param_name(sema, argument, param_name)\n     {\n         return false;\n     }\n@@ -254,15 +255,47 @@ fn should_show_param_name_hint(\n     parameters_len != 1 || !is_obvious_param(param_name)\n }\n \n-fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n-    let argument_string = if let Some(repr) = get_string_representation(argument) {\n-        repr\n+fn is_argument_similar_to_param_name(\n+    sema: &Semantics<RootDatabase>,\n+    argument: &ast::Expr,\n+    param_name: &str,\n+) -> bool {\n+    if is_enum_name_similar_to_param_name(sema, argument, param_name) {\n+        return true;\n     } else {\n-        return false;\n-    };\n-    let param_name = param_name.trim_start_matches('_');\n-    let argument_string = argument_string.trim_start_matches('_');\n-    argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n+        let argument_string = if let Some(repr) = get_string_representation(argument) {\n+            repr\n+        } else {\n+            return false;\n+        };\n+        let argument_string = argument_string.trim_start_matches('_');\n+        argument_string.starts_with(param_name) || argument_string.ends_with(param_name)\n+    }\n+}\n+\n+fn is_enum_name_similar_to_param_name(\n+    sema: &Semantics<RootDatabase>,\n+    argument: &ast::Expr,\n+    param_name: &str,\n+) -> bool {\n+    match sema.type_of_expr(argument).and_then(|t| t.as_adt()) {\n+        Some(Adt::Enum(e)) => &camel_case_to_snake_case(e.name(sema.db).to_string()) == param_name,\n+        _ => false,\n+    }\n+}\n+\n+fn camel_case_to_snake_case(s: String) -> String {\n+    let mut buf = String::with_capacity(s.len());\n+    let mut prev = false;\n+    for c in s.chars() {\n+        if c.is_ascii_uppercase() && prev {\n+            buf.push('_')\n+        }\n+        prev = true;\n+\n+        buf.push(c.to_ascii_lowercase());\n+    }\n+    buf\n }\n \n fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n@@ -1109,10 +1142,15 @@ struct Param {}\n fn different_order(param: &Param) {}\n fn different_order_mut(param: &mut Param) {}\n fn has_underscore(_param: bool) {}\n+fn enum_matches_param_name(completion_kind: CompletionKind) {}\n \n fn twiddle(twiddle: bool) {}\n fn doo(_doo: bool) {}\n \n+enum CompletionKind {\n+    Keyword,\n+}\n+\n fn main() {\n     let container: TestVarContainer = TestVarContainer { test_var: 42 };\n     let test: Test = Test {};\n@@ -1138,6 +1176,8 @@ fn main() {\n     let param: bool = true;\n     has_underscore(param);\n \n+    enum_matches_param_name(CompletionKind::Keyword);\n+\n     let a: f64 = 7.0;\n     let b: f64 = 4.0;\n     let _: f64 = a.div_euclid(b);"}]}