{"sha": "0817fc6c6cd880c51318d476de9ecb43327e12b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTdmYzZjNmNkODgwYzUxMzE4ZDQ3NmRlOWVjYjQzMzI3ZTEyYjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-21T23:44:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "Support deprecation checking for macros", "tree": {"sha": "49ba7e3b8a4e84caab0cc58015851ead69543502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ba7e3b8a4e84caab0cc58015851ead69543502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0817fc6c6cd880c51318d476de9ecb43327e12b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0817fc6c6cd880c51318d476de9ecb43327e12b1", "html_url": "https://github.com/rust-lang/rust/commit/0817fc6c6cd880c51318d476de9ecb43327e12b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0817fc6c6cd880c51318d476de9ecb43327e12b1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ee97e896125b38dba199c763e5e35c5107a735", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ee97e896125b38dba199c763e5e35c5107a735", "html_url": "https://github.com/rust-lang/rust/commit/d9ee97e896125b38dba199c763e5e35c5107a735"}], "stats": {"total": 282, "additions": 203, "deletions": 79}, "files": [{"sha": "dd879ec6aff34f773016aad1c3de6fe2a449ca56", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -5,10 +5,12 @@\n //! lints are all available in `rustc_lint::builtin`.\n \n use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::middle::stability;\n use crate::session::Session;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n use syntax::source_map::Span;\n+use syntax::symbol::Symbol;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -461,6 +463,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedImports(String, Vec<(Span, String)>),\n     NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n+    DeprecatedMacro(Option<Symbol>, Span),\n }\n \n pub(crate) fn add_elided_lifetime_in_path_suggestion(\n@@ -586,6 +589,8 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n+            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) =>\n+                stability::deprecation_suggestion(db, suggestion, span),\n         }\n     }\n }"}, {"sha": "5ab762ab225f97a38b6d54430c64b9b4d6b135eb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 85, "deletions": 63, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -4,19 +4,21 @@\n pub use self::StabilityLevel::*;\n \n use crate::lint::{self, Lint, in_derive_expansion};\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::hir::{self, Item, Generics, StructField, Variant, HirId};\n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::ty::query::Providers;\n use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n+use errors::DiagnosticBuilder;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, MultiSpan};\n-use syntax::ast::Attribute;\n+use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use syntax::attr::{self, Stability, Deprecation};\n+use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n@@ -531,6 +533,79 @@ pub fn deprecation_in_effect(since: &str) -> bool {\n     }\n }\n \n+pub fn deprecation_suggestion(\n+    diag: &mut DiagnosticBuilder<'_>, suggestion: Option<Symbol>, span: Span\n+) {\n+    if let Some(suggestion) = suggestion {\n+        diag.span_suggestion(\n+            span,\n+            \"replace the use of the deprecated item\",\n+            suggestion.to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n+fn deprecation_message_common(message: String, reason: Option<Symbol>) -> String {\n+    match reason {\n+        Some(reason) => format!(\"{}: {}\", message, reason),\n+        None => message,\n+    }\n+}\n+\n+pub fn deprecation_message(depr: &Deprecation, path: &str) -> (String, &'static Lint) {\n+    let message = format!(\"use of deprecated item '{}'\", path);\n+    (deprecation_message_common(message, depr.note), lint::builtin::DEPRECATED)\n+}\n+\n+pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String, &'static Lint) {\n+    let (message, lint) = if deprecation_in_effect(&depr.since.as_str()) {\n+        (format!(\"use of deprecated item '{}'\", path), lint::builtin::DEPRECATED)\n+    } else {\n+        (format!(\"use of item '{}' that will be deprecated in future version {}\", path, depr.since),\n+         lint::builtin::DEPRECATED_IN_FUTURE)\n+    };\n+    (deprecation_message_common(message, Some(depr.reason)), lint)\n+}\n+\n+pub fn early_report_deprecation(\n+    sess: &Session,\n+    message: &str,\n+    suggestion: Option<Symbol>,\n+    lint: &'static Lint,\n+    span: Span,\n+) {\n+    if in_derive_expansion(span) {\n+        return;\n+    }\n+\n+    let diag = BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span);\n+    sess.buffer_lint_with_diagnostic(lint, CRATE_NODE_ID, span, message, diag);\n+}\n+\n+fn late_report_deprecation(\n+    tcx: TyCtxt<'_>,\n+    message: &str,\n+    suggestion: Option<Symbol>,\n+    lint: &'static Lint,\n+    span: Span,\n+    def_id: DefId,\n+    hir_id: HirId,\n+) {\n+    if in_derive_expansion(span) {\n+        return;\n+    }\n+\n+    let mut diag = tcx.struct_span_lint_hir(lint, hir_id, span, message);\n+    if let hir::Node::Expr(_) = tcx.hir().get(hir_id) {\n+        deprecation_suggestion(&mut diag, suggestion, span);\n+    }\n+    diag.emit();\n+    if hir_id == hir::DUMMY_HIR_ID {\n+        span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n+    }\n+}\n+\n struct Checker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n@@ -593,38 +668,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n     /// `id`.\n     pub fn eval_stability(self, def_id: DefId, id: Option<HirId>, span: Span) -> EvalResult {\n-        let lint_deprecated = |def_id: DefId,\n-                               id: HirId,\n-                               note: Option<Symbol>,\n-                               suggestion: Option<Symbol>,\n-                               message: &str,\n-                               lint: &'static Lint| {\n-            if in_derive_expansion(span) {\n-                return;\n-            }\n-            let msg = if let Some(note) = note {\n-                format!(\"{}: {}\", message, note)\n-            } else {\n-                format!(\"{}\", message)\n-            };\n-\n-            let mut diag = self.struct_span_lint_hir(lint, id, span, &msg);\n-            if let Some(suggestion) = suggestion {\n-                if let hir::Node::Expr(_) = self.hir().get(id) {\n-                    diag.span_suggestion(\n-                        span,\n-                        \"replace the use of the deprecated item\",\n-                        suggestion.to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-            diag.emit();\n-            if id == hir::DUMMY_HIR_ID {\n-                span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n-            }\n-        };\n-\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n@@ -634,14 +677,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                                .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n \n                 if !skip {\n-                    let path = self.def_path_str(def_id);\n-                    let message = format!(\"use of deprecated item '{}'\", path);\n-                    lint_deprecated(def_id,\n-                                    id,\n-                                    depr_entry.attr.note,\n-                                    None,\n-                                    &message,\n-                                    lint::builtin::DEPRECATED);\n+                    let (message, lint) =\n+                        deprecation_message(&depr_entry.attr, &self.def_path_str(def_id));\n+                    late_report_deprecation(self, &message, None, lint, span, def_id, id);\n                 }\n             };\n         }\n@@ -661,27 +699,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id {\n             if let Some(stability) = stability {\n                 if let Some(depr) = &stability.rustc_depr {\n-                    let path = self.def_path_str(def_id);\n-                    if deprecation_in_effect(&depr.since.as_str()) {\n-                        let message = format!(\"use of deprecated item '{}'\", path);\n-                        lint_deprecated(def_id,\n-                                        id,\n-                                        Some(depr.reason),\n-                                        depr.suggestion,\n-                                        &message,\n-                                        lint::builtin::DEPRECATED);\n-                    } else {\n-                        let message = format!(\"use of item '{}' \\\n-                                                that will be deprecated in future version {}\",\n-                                                path,\n-                                                depr.since);\n-                        lint_deprecated(def_id,\n-                                        id,\n-                                        Some(depr.reason),\n-                                        depr.suggestion,\n-                                        &message,\n-                                        lint::builtin::DEPRECATED_IN_FUTURE);\n-                    }\n+                    let (message, lint) =\n+                        rustc_deprecation_message(depr, &self.def_path_str(def_id));\n+                    late_report_deprecation(\n+                        self, &message, depr.suggestion, lint, span, def_id, id\n+                    );\n                 }\n             }\n         }"}, {"sha": "c65208b8ed2079a1c8a88aa6614592f541e21994", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -231,21 +231,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let span = invoc.span();\n+        let path = fast_print_path(path);\n         let format = match kind {\n-            MacroKind::Derive => format!(\"derive({})\", fast_print_path(path)),\n-            _ => fast_print_path(path),\n+            MacroKind::Derive => format!(\"derive({})\", path),\n+            _ => path.clone(),\n         };\n         invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, &format));\n \n-        if let Some(stability) = ext.stability {\n-            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n-                let (feature, features) = (stability.feature, self.session.features_untracked());\n-                if !span.allows_unstable(feature) &&\n-                   features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n-                    stability::report_unstable(self.session, feature, reason, issue, span);\n-                }\n-            }\n-        }\n+        self.check_stability_and_deprecation(&ext, &path, span);\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n@@ -1017,6 +1010,28 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &str, span: Span) {\n+        if let Some(stability) = &ext.stability {\n+            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n+                let (feature, features) = (stability.feature, self.session.features_untracked());\n+                if !span.allows_unstable(feature) &&\n+                   features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n+                    stability::report_unstable(self.session, feature, reason, issue, span);\n+                }\n+            }\n+            if let Some(depr) = &stability.rustc_depr {\n+                let (message, lint) = stability::rustc_deprecation_message(depr, path);\n+                stability::early_report_deprecation(\n+                    self.session, &message, depr.suggestion, lint, span\n+                );\n+            }\n+        }\n+        if let Some(depr) = &ext.deprecation {\n+            let (message, lint) = stability::deprecation_message(depr, path);\n+            stability::early_report_deprecation(self.session, &message, None, lint, span);\n+        }\n+    }\n+\n     fn prohibit_imported_non_macro_attrs(&self, binding: Option<&'a NameBinding<'a>>,\n                                          res: Option<Res>, span: Span) {\n         if let Some(Res::NonMacroAttr(kind)) = res {"}, {"sha": "15c0b6ca5aa81248b7d149e78d7ee701565b37db", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -1,5 +1,5 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n-use crate::attr::{HasAttrs, Stability};\n+use crate::attr::{HasAttrs, Stability, Deprecation};\n use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n@@ -616,8 +616,10 @@ pub struct SyntaxExtension {\n     pub allow_internal_unsafe: bool,\n     /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`) for this macro.\n     pub local_inner_macros: bool,\n-    /// The macro's stability and deprecation info.\n+    /// The macro's stability info.\n     pub stability: Option<Stability>,\n+    /// The macro's deprecation info.\n+    pub deprecation: Option<Deprecation>,\n     /// Names of helper attributes registered by this macro.\n     pub helper_attrs: Vec<Symbol>,\n     /// Edition of the crate in which this macro is defined.\n@@ -663,6 +665,7 @@ impl SyntaxExtension {\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             stability: None,\n+            deprecation: None,\n             helper_attrs: Vec::new(),\n             edition,\n             kind,"}, {"sha": "665c794422d49cc51433835a3d163d47fba09135", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -437,6 +437,7 @@ pub fn compile(\n         allow_internal_unsafe: attr::contains_name(&def.attrs, sym::allow_internal_unsafe),\n         local_inner_macros,\n         stability: attr::find_stability(&sess, &def.attrs, def.span),\n+        deprecation: attr::find_deprecation(&sess, &def.attrs, def.span),\n         helper_attrs: Vec::new(),\n         edition,\n     }"}, {"sha": "657a7252a36ded1ebfd4c5c319e83a846515eedf", "filename": "src/test/ui/macros/auxiliary/deprecated-macros.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdeprecated-macros.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -0,0 +1,3 @@\n+#[deprecated(since = \"1.0.0\", note = \"deprecation note\")]\n+#[macro_export]\n+macro_rules! deprecated_macro{ () => () }"}, {"sha": "e928dc705d71fec8772b04fca343e47de1480cff", "filename": "src/test/ui/macros/auxiliary/unstable-macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -1,6 +1,16 @@\n+#![feature(decl_macro)]\n #![feature(staged_api)]\n #![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]\n macro_rules! unstable_macro{ () => () }\n+\n+#[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"deprecation reason\")]\n+#[macro_export]\n+macro_rules! deprecated_macro{ () => () }\n+\n+// FIXME: Cannot use a `pub` macro 2.0 in a staged API crate due to reachability issues.\n+// #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+// pub macro unstable_macro_modern() {}"}, {"sha": "ae3827604faf05cf580f80897ed0030a88e78194", "filename": "src/test/ui/macros/macro-deprecation.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+// aux-build:deprecated-macros.rs\n+\n+#[macro_use] extern crate deprecated_macros;\n+\n+#[deprecated(since = \"1.0.0\", note = \"local deprecation note\")]\n+#[macro_export]\n+macro_rules! local_deprecated{ () => () }\n+\n+fn main() {\n+    local_deprecated!(); //~ WARN use of deprecated item 'local_deprecated': local deprecation note\n+    deprecated_macro!(); //~ WARN use of deprecated item 'deprecated_macro': deprecation note\n+}"}, {"sha": "e5f4df5223752e5f80364c3f5aa840ea70b67ddb", "filename": "src/test/ui/macros/macro-deprecation.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -0,0 +1,14 @@\n+warning: use of deprecated item 'local_deprecated': local deprecation note\n+  --> $DIR/macro-deprecation.rs:11:5\n+   |\n+LL |     local_deprecated!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'deprecated_macro': deprecation note\n+  --> $DIR/macro-deprecation.rs:12:5\n+   |\n+LL |     deprecated_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "ab927e419b4c3cfd5e36da4fca41978ec157a0a2", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -1,12 +1,28 @@\n // aux-build:unstable-macros.rs\n \n+#![feature(decl_macro)]\n #![feature(staged_api)]\n #[macro_use] extern crate unstable_macros;\n \n #[unstable(feature = \"local_unstable\", issue = \"0\")]\n macro_rules! local_unstable { () => () }\n \n+#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+macro local_unstable_modern() {}\n+\n+#[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"local deprecation reason\")]\n+#[macro_export]\n+macro_rules! local_deprecated{ () => () }\n+\n fn main() {\n     local_unstable!(); //~ ERROR use of unstable library feature 'local_unstable'\n+    local_unstable_modern!(); //~ ERROR use of unstable library feature 'local_unstable'\n     unstable_macro!(); //~ ERROR use of unstable library feature 'unstable_macros'\n+    // unstable_macro_modern!(); // ERROR use of unstable library feature 'unstable_macros'\n+\n+    deprecated_macro!();\n+    //~^ WARN use of deprecated item 'deprecated_macro': deprecation reason\n+    local_deprecated!();\n+    //~^ WARN use of deprecated item 'local_deprecated': local deprecation reason\n }"}, {"sha": "88edadc3811bc7f9cc6fedead6df97b3ae71bc5f", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0817fc6c6cd880c51318d476de9ecb43327e12b1/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=0817fc6c6cd880c51318d476de9ecb43327e12b1", "patch": "@@ -1,19 +1,41 @@\n error[E0658]: use of unstable library feature 'local_unstable'\n-  --> $DIR/macro-stability.rs:10:5\n+  --> $DIR/macro-stability.rs:19:5\n    |\n LL |     local_unstable!();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(local_unstable)] to the crate attributes to enable\n \n+error[E0658]: use of unstable library feature 'local_unstable'\n+  --> $DIR/macro-stability.rs:20:5\n+   |\n+LL |     local_unstable_modern!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(local_unstable)] to the crate attributes to enable\n+\n error[E0658]: use of unstable library feature 'unstable_macros'\n-  --> $DIR/macro-stability.rs:11:5\n+  --> $DIR/macro-stability.rs:21:5\n    |\n LL |     unstable_macro!();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unstable_macros)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+warning: use of deprecated item 'deprecated_macro': deprecation reason\n+  --> $DIR/macro-stability.rs:24:5\n+   |\n+LL |     deprecated_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'local_deprecated': local deprecation reason\n+  --> $DIR/macro-stability.rs:26:5\n+   |\n+LL |     local_deprecated!();\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}