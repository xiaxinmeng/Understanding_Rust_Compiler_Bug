{"sha": "9d77cb95e164addcf924f65b0c80465c5cebe776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzdjYjk1ZTE2NGFkZGNmOTI0ZjY1YjBjODA0NjVjNWNlYmU3NzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-27T14:55:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Merge stack_{addr,load}_insts_users", "tree": {"sha": "1979d57b6fe71c17ea7d632897b2246d84d22190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1979d57b6fe71c17ea7d632897b2246d84d22190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d77cb95e164addcf924f65b0c80465c5cebe776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d77cb95e164addcf924f65b0c80465c5cebe776", "html_url": "https://github.com/rust-lang/rust/commit/9d77cb95e164addcf924f65b0c80465c5cebe776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d77cb95e164addcf924f65b0c80465c5cebe776/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5047856f00ebdd1accec01e629d23164a1557645", "url": "https://api.github.com/repos/rust-lang/rust/commits/5047856f00ebdd1accec01e629d23164a1557645", "html_url": "https://github.com/rust-lang/rust/commit/5047856f00ebdd1accec01e629d23164a1557645"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "314561cb7d7e98f54c989356429b0e4786e3e395", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9d77cb95e164addcf924f65b0c80465c5cebe776/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d77cb95e164addcf924f65b0c80465c5cebe776/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=9d77cb95e164addcf924f65b0c80465c5cebe776", "patch": "@@ -31,10 +31,9 @@ pub(super) fn optimize_function(\n \n     // Record all stack_addr, stack_load and stack_store instructions. Also record all stack_addr\n     // and stack_load insts whose result is used.\n+    let mut stack_addr_load_insts_users = BTreeMap::<Inst, HashSet<Inst>>::new();\n     let mut stack_addr_insts = BTreeSet::new();\n-    let mut stack_addr_insts_users = BTreeMap::<Inst, HashSet<Inst>>::new();\n     let mut stack_load_insts = BTreeSet::new();\n-    let mut stack_load_insts_users = BTreeMap::<Inst, HashSet<Inst>>::new();\n     let mut stack_store_insts = BTreeSet::new();\n \n     let mut cursor = FuncCursor::new(func);\n@@ -69,11 +68,8 @@ pub(super) fn optimize_function(\n             for &arg in cursor.func.dfg.inst_args(inst) {\n                 if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n                     match cursor.func.dfg[arg_origin].opcode() {\n-                        Opcode::StackAddr => {\n-                            stack_addr_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n-                        }\n-                        Opcode::StackLoad => {\n-                            stack_load_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n+                        Opcode::StackAddr | Opcode::StackLoad => {\n+                            stack_addr_load_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n                         }\n                         _ => {}\n                     }\n@@ -83,37 +79,34 @@ pub(super) fn optimize_function(\n     }\n \n     println!(\n-        \"{}:\\nstack_addr: {:?} ({:?} used)\\nstack_load: {:?} ({:?} used)\\nstack_store: {:?}\",\n+        \"{}:\\nstack_addr/stack_load users: {:?}\\nstack_addr: {:?}\\nstack_load: {:?}\\nstack_store: {:?}\",\n         name,\n+        stack_addr_load_insts_users,\n         stack_addr_insts,\n-        stack_addr_insts_users,\n         stack_load_insts,\n-        stack_load_insts_users,\n         stack_store_insts,\n     );\n \n-    for inst in stack_addr_insts_users.keys() {\n-        assert!(stack_addr_insts.contains(inst));\n+    for inst in stack_addr_load_insts_users.keys() {\n+        assert!(stack_addr_insts.contains(inst) || stack_load_insts.contains(inst));\n     }\n \n     // Replace all unused stack_addr instructions with nop.\n     // FIXME remove clone\n     for &inst in stack_addr_insts.clone().iter() {\n-        if stack_addr_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+        if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+            println!(\"Removing unused stack_addr {}\", inst);\n             func.dfg.detach_results(inst);\n             func.dfg.replace(inst).nop();\n             stack_addr_insts.remove(&inst);\n         }\n     }\n \n-    for inst in stack_load_insts_users.keys() {\n-        assert!(stack_load_insts.contains(inst));\n-    }\n-\n     // Replace all unused stack_load instructions with nop.\n     // FIXME remove clone\n     for &inst in stack_load_insts.clone().iter() {\n-        if !stack_addr_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+        if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n+            println!(\"Removing unused stack_load {}\", inst);\n             func.dfg.detach_results(inst);\n             func.dfg.replace(inst).nop();\n             stack_load_insts.remove(&inst);"}]}