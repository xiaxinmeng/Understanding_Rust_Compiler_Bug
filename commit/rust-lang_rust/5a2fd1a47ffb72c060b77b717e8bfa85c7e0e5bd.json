{"sha": "5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "node_id": "C_kwDOAAsO6NoAKDVhMmZkMWE0N2ZmYjcyYzA2MGI3N2I3MTdlOGJmYTg1YzdlMGU1YmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-24T22:53:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T01:09:35Z"}, "message": "Improve comments about attributes and meta items.\n\nI have found the distinction confusing.", "tree": {"sha": "587dab53e54e9263165a69b62ef0446261973a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587dab53e54e9263165a69b62ef0446261973a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "html_url": "https://github.com/rust-lang/rust/commit/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae38c71e2838f1ac282803ddde47f21f4ca76e", "html_url": "https://github.com/rust-lang/rust/commit/c9ae38c71e2838f1ac282803ddde47f21f4ca76e"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "9d23bb5c1596accc7368e5078e99675a7e85fe74", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5a2fd1a47ffb72c060b77b717e8bfa85c7e0e5bd", "patch": "@@ -479,20 +479,24 @@ pub struct Crate {\n     pub is_placeholder: bool,\n }\n \n-/// Possible values inside of compile-time attribute lists.\n+/// Values inside meta item lists.\n ///\n-/// E.g., the '..' in `#[name(..)]`.\n+/// E.g., each of `Clone`, `Copy` in `#[derive(Clone, Copy)]`.\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum NestedMetaItem {\n     /// A full MetaItem, for recursive meta items.\n     MetaItem(MetaItem),\n+\n     /// A literal.\n     ///\n     /// E.g., `\"foo\"`, `64`, `true`.\n     Lit(MetaItemLit),\n }\n \n-/// A spanned compile-time attribute item.\n+/// A semantic representation of a meta item. A meta item is a slightly\n+/// restricted form of an attribute -- it can only contain expressions in\n+/// certain leaf positions, rather than arbitrary token streams -- that is used\n+/// for most built-in attributes.\n ///\n /// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = \"foo\"]`.\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n@@ -502,22 +506,22 @@ pub struct MetaItem {\n     pub span: Span,\n }\n \n-/// A compile-time attribute item.\n-///\n-/// E.g., `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`.\n+/// The meta item kind, containing the data after the initial path.\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum MetaItemKind {\n     /// Word meta item.\n     ///\n-    /// E.g., `test` as in `#[test]`.\n+    /// E.g., `#[test]`, which lacks any arguments after `test`.\n     Word,\n+\n     /// List meta item.\n     ///\n-    /// E.g., `derive(..)` as in `#[derive(..)]`.\n+    /// E.g., `#[derive(..)]`, where the field represents the `..`.\n     List(Vec<NestedMetaItem>),\n+\n     /// Name value meta item.\n     ///\n-    /// E.g., `feature = \"foo\"` as in `#[feature = \"foo\"]`.\n+    /// E.g., `#[feature = \"foo\"]`, where the field represents the `\"foo\"`.\n     NameValue(MetaItemLit),\n }\n \n@@ -2580,7 +2584,7 @@ pub struct AttrItem {\n /// A list of attributes.\n pub type AttrVec = ThinVec<Attribute>;\n \n-/// Metadata associated with an item.\n+/// A syntax-level representation of an attribute.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Attribute {\n     pub kind: AttrKind,"}]}