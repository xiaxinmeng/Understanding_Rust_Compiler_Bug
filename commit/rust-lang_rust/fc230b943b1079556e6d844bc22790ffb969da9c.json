{"sha": "fc230b943b1079556e6d844bc22790ffb969da9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjMwYjk0M2IxMDc5NTU2ZTZkODQ0YmMyMjc5MGZmYjk2OWRhOWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T16:59:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T16:59:31Z"}, "message": "Simplify Sysroot", "tree": {"sha": "52b5e578093db49ed1822f3b4b23d94fc963337c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b5e578093db49ed1822f3b4b23d94fc963337c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc230b943b1079556e6d844bc22790ffb969da9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc230b943b1079556e6d844bc22790ffb969da9c", "html_url": "https://github.com/rust-lang/rust/commit/fc230b943b1079556e6d844bc22790ffb969da9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc230b943b1079556e6d844bc22790ffb969da9c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516fe293a8146044b6398b8da0b4da43874a2cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/516fe293a8146044b6398b8da0b4da43874a2cf9", "html_url": "https://github.com/rust-lang/rust/commit/516fe293a8146044b6398b8da0b4da43874a2cf9"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "b500a74fb650817f21383ad42f248a52cbdb1652", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc230b943b1079556e6d844bc22790ffb969da9c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc230b943b1079556e6d844bc22790ffb969da9c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=fc230b943b1079556e6d844bc22790ffb969da9c", "patch": "@@ -143,7 +143,7 @@ impl ProjectWorkspace {\n                     roots.push(PackageRoot::new(root, member));\n                 }\n                 for krate in sysroot.crates() {\n-                    roots.push(PackageRoot::new(krate.root_dir(&sysroot).to_path_buf(), false))\n+                    roots.push(PackageRoot::new(sysroot[krate].root_dir().to_path_buf(), false))\n                 }\n                 roots\n             }\n@@ -260,7 +260,7 @@ impl ProjectWorkspace {\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n                 let mut sysroot_crates = FxHashMap::default();\n                 for krate in sysroot.crates() {\n-                    if let Some(file_id) = load(krate.root(&sysroot)) {\n+                    if let Some(file_id) = load(&sysroot[krate].root) {\n                         // Crates from sysroot have `cfg(test)` disabled\n                         let cfg_options = {\n                             let mut opts = default_cfg_options.clone();\n@@ -274,7 +274,7 @@ impl ProjectWorkspace {\n                             file_id,\n                             Edition::Edition2018,\n                             Some(\n-                                CrateName::new(krate.name(&sysroot))\n+                                CrateName::new(&sysroot[krate].name)\n                                     .expect(\"Sysroot crate names should not contain dashes\"),\n                             ),\n                             cfg_options,\n@@ -285,8 +285,8 @@ impl ProjectWorkspace {\n                     }\n                 }\n                 for from in sysroot.crates() {\n-                    for to in from.deps(&sysroot) {\n-                        let name = to.name(&sysroot);\n+                    for &to in sysroot[from].deps.iter() {\n+                        let name = &sysroot[to].name;\n                         if let (Some(&from), Some(&to)) =\n                             (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                         {"}, {"sha": "4ac4fa14db7f2cab0b41bcd73638195b7de3c39a", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc230b943b1079556e6d844bc22790ffb969da9c/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc230b943b1079556e6d844bc22790ffb969da9c/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=fc230b943b1079556e6d844bc22790ffb969da9c", "patch": "@@ -2,7 +2,7 @@\n \n use anyhow::{bail, Context, Result};\n use std::{\n-    env,\n+    env, ops,\n     path::{Path, PathBuf},\n     process::{Command, Output},\n };\n@@ -19,10 +19,17 @@ pub struct SysrootCrate(RawId);\n impl_arena_id!(SysrootCrate);\n \n #[derive(Debug, Clone)]\n-struct SysrootCrateData {\n-    name: String,\n-    root: PathBuf,\n-    deps: Vec<SysrootCrate>,\n+pub struct SysrootCrateData {\n+    pub name: String,\n+    pub root: PathBuf,\n+    pub deps: Vec<SysrootCrate>,\n+}\n+\n+impl ops::Index<SysrootCrate> for Sysroot {\n+    type Output = SysrootCrateData;\n+    fn index(&self, index: SysrootCrate) -> &SysrootCrateData {\n+        &self.crates[index]\n+    }\n }\n \n impl Sysroot {\n@@ -129,18 +136,9 @@ fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n     Ok(src_path)\n }\n \n-impl SysrootCrate {\n-    pub fn name(self, sysroot: &Sysroot) -> &str {\n-        &sysroot.crates[self].name\n-    }\n-    pub fn root(self, sysroot: &Sysroot) -> &Path {\n-        sysroot.crates[self].root.as_path()\n-    }\n-    pub fn root_dir(self, sysroot: &Sysroot) -> &Path {\n-        self.root(sysroot).parent().unwrap()\n-    }\n-    pub fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n-        sysroot.crates[self].deps.iter().copied()\n+impl SysrootCrateData {\n+    pub fn root_dir(&self) -> &Path {\n+        self.root.parent().unwrap()\n     }\n }\n "}]}