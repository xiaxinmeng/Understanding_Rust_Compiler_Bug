{"sha": "64ca0f63bfd513fa40d1973077972079ead51ef2", "node_id": "C_kwDOAAsO6NoAKDY0Y2EwZjYzYmZkNTEzZmE0MGQxOTczMDc3OTcyMDc5ZWFkNTFlZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-10T07:17:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T07:17:52Z"}, "message": "Merge #10504\n\n10504: Remove needless clone r=lnicola a=k-nasa\n\n## Why\r\n\r\nDelete clones for efficiency\r\n\r\n## What\r\n\r\n- I erased unnecessary clones\r\n\n\nCo-authored-by: k-nasa <htilcs1115@gmail.com>", "tree": {"sha": "cd578b440709a08ed08287c90f4971b185942f2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd578b440709a08ed08287c90f4971b185942f2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ca0f63bfd513fa40d1973077972079ead51ef2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYpOgCRBK7hj4Ov3rIwAAI5cIAEYjvzmy5DvjSkqI0MwPzltJ\n7P3GEOs1FCjsaqzg4MGWiWG92pFdKslp5Xsg8S/bwWQJldP5nAg1fV4Z6DFqCl/1\nSDYIdN4627i19pA0qdYLEXpP6S4jXqOKmvqAlkRwiX30bqrmK6161TT4VwPr+bJN\nWvpp9Afc3rzZp9Nvd715UW/iB11clkk+m4YDO99U1Mv2UAHdtYb8h8p/eUexB/0+\naZ3WsmFpr1AibbhgQYfX4tUjArv2YJuPPkqWwlohpEPSPDVV1fi779PYGI+JVnrP\niYXIPTaCaQGNWe3k5I0K4EmAHedBovfg6JV9q1NKRkGRlgJQ9NzGxikwM+mbHEs=\n=zSZx\n-----END PGP SIGNATURE-----\n", "payload": "tree cd578b440709a08ed08287c90f4971b185942f2e\nparent ce86534e1cb22685e83c3f91ea89025edbfcbc98\nparent 9dd823a0e1f54bedd7dd5a12e5ae45f59f6755e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633850272 +0000\ncommitter GitHub <noreply@github.com> 1633850272 +0000\n\nMerge #10504\n\n10504: Remove needless clone r=lnicola a=k-nasa\n\n## Why\r\n\r\nDelete clones for efficiency\r\n\r\n## What\r\n\r\n- I erased unnecessary clones\r\n\n\nCo-authored-by: k-nasa <htilcs1115@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ca0f63bfd513fa40d1973077972079ead51ef2", "html_url": "https://github.com/rust-lang/rust/commit/64ca0f63bfd513fa40d1973077972079ead51ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ca0f63bfd513fa40d1973077972079ead51ef2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce86534e1cb22685e83c3f91ea89025edbfcbc98", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce86534e1cb22685e83c3f91ea89025edbfcbc98", "html_url": "https://github.com/rust-lang/rust/commit/ce86534e1cb22685e83c3f91ea89025edbfcbc98"}, {"sha": "9dd823a0e1f54bedd7dd5a12e5ae45f59f6755e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd823a0e1f54bedd7dd5a12e5ae45f59f6755e3", "html_url": "https://github.com/rust-lang/rust/commit/9dd823a0e1f54bedd7dd5a12e5ae45f59f6755e3"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "98eafa9000c44c1db0a0c5bbe701bb7487c1fbd7", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -392,7 +392,7 @@ impl HasChildSource<LocalTypeParamId> for GenericDefId {\n \n         // For traits the first type index is `Self`, we need to add it before the other params.\n         if let GenericDefId::TraitId(id) = *self {\n-            let trait_ref = id.lookup(db).source(db).value.clone();\n+            let trait_ref = id.lookup(db).source(db).value;\n             let idx = idx_iter.next().unwrap();\n             params.insert(idx, Either::Right(trait_ref))\n         }"}, {"sha": "9a879715e7b8bdf7f49ffa59d6a05661d7adefc5", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -254,7 +254,7 @@ impl DocCommentToken {\n         let original_start = doc_token.text_range().start();\n         let relative_comment_offset = offset - original_start - prefix_len;\n \n-        sema.descend_into_macros_many(doc_token.clone()).into_iter().find_map(|t| {\n+        sema.descend_into_macros_many(doc_token).into_iter().find_map(|t| {\n             let (node, descended_prefix_len) = match_ast! {\n                 match t {\n                     ast::Comment(comment) => (t.parent()?, TextSize::try_from(comment.prefix().len()).ok()?),"}, {"sha": "718c31f9bc8d1849769fb71686c4330b867dc0dc", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn goto_definition(\n         .into_iter()\n         .filter_map(|token| {\n             let parent = token.parent()?;\n-            if let Some(tt) = ast::TokenTree::cast(parent.clone()) {\n+            if let Some(tt) = ast::TokenTree::cast(parent) {\n                 if let x @ Some(_) =\n                     try_lookup_include_path(&sema, tt, token.clone(), position.file_id)\n                 {\n@@ -77,7 +77,7 @@ fn try_lookup_include_path(\n     token: SyntaxToken,\n     file_id: FileId,\n ) -> Option<Vec<NavigationTarget>> {\n-    let token = ast::String::cast(token.clone())?;\n+    let token = ast::String::cast(token)?;\n     let path = token.value()?.into_owned();\n     let macro_call = tt.syntax().parent().and_then(ast::MacroCall::cast)?;\n     let name = macro_call.path()?.segment()?.name_ref()?;"}, {"sha": "401fb78f9869d30093d660f0b10fa11df6b1ddd9", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -169,7 +169,7 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n     let expr = ast::Expr::cast(node.clone())?;\n     // A node got selected fully\n     if node.text_range() == selection_range {\n-        return FunctionBody::from_expr(expr.clone());\n+        return FunctionBody::from_expr(expr);\n     }\n \n     node.ancestors().find_map(ast::Expr::cast).and_then(FunctionBody::from_expr)"}, {"sha": "95768713cf56f8a8428509a624040c3247cc1157", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -53,7 +53,7 @@ impl<'a> EnumRender<'a> {\n             }\n             None => (\n                 hir::ModPath::from_segments(hir::PathKind::Plain, iter::once(name.clone())),\n-                hir::ModPath::from_segments(hir::PathKind::Plain, iter::once(name.clone())),\n+                hir::ModPath::from_segments(hir::PathKind::Plain, iter::once(name)),\n             ),\n         };\n "}, {"sha": "d5b847151560df9b8db205a32bb47e4456f13215", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -58,7 +58,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     let mut locals = FxHashMap::default();\n     ctx.sema.scope(field_list_parent.syntax()).process_all_names(&mut |name, def| {\n         if let hir::ScopeDef::Local(local) = def {\n-            locals.insert(name.clone(), local);\n+            locals.insert(name, local);\n         }\n     });\n     let missing_fields = ctx.sema.record_literal_missing_fields(&field_list_parent);"}, {"sha": "baa13c99db32b948173a970ec38ff1010c636d27", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -100,7 +100,7 @@ impl LsifManager<'_> {\n         let doc_id = self.get_file_id(file_id);\n         let line_index = self.db.line_index(file_id);\n         let line_index = LineIndex {\n-            index: line_index.clone(),\n+            index: line_index,\n             encoding: OffsetEncoding::Utf16,\n             endings: LineEndings::Unix,\n         };\n@@ -191,7 +191,7 @@ impl LsifManager<'_> {\n         let text = self.analysis.file_text(file_id).unwrap();\n         let line_index = self.db.line_index(file_id);\n         let line_index = LineIndex {\n-            index: line_index.clone(),\n+            index: line_index,\n             encoding: OffsetEncoding::Utf16,\n             endings: LineEndings::Unix,\n         };"}, {"sha": "28b4f5bc02e260c466607c6113c7ef404e718b35", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0f63bfd513fa40d1973077972079ead51ef2/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=64ca0f63bfd513fa40d1973077972079ead51ef2", "patch": "@@ -336,7 +336,7 @@ impl AstNode for CallableExpr {\n     {\n         if let Some(it) = ast::CallExpr::cast(syntax.clone()) {\n             Some(Self::Call(it))\n-        } else if let Some(it) = ast::MethodCallExpr::cast(syntax.clone()) {\n+        } else if let Some(it) = ast::MethodCallExpr::cast(syntax) {\n             Some(Self::MethodCall(it))\n         } else {\n             None"}]}