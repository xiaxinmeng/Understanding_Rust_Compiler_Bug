{"sha": "f8751436ffce35cd1b7291b03b394166b77ff0da", "node_id": "C_kwDOAAsO6NoAKGY4NzUxNDM2ZmZjZTM1Y2QxYjcyOTFiMDNiMzk0MTY2Yjc3ZmYwZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T21:13:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T21:13:27Z"}, "message": "Auto merge of #89683 - GuillaumeGomez:rollup-q2mjd9m, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86506 (Don't normalize xform_ret_ty during method candidate assembly )\n - #89538 (Make rustdoc not highlight `->` and `=>` as operators)\n - #89649 (clippy::complexity fixes)\n - #89668 (Cfg hide more conditions for core and alloc)\n - #89669 (Remove special-casing of never primitive in rustdoc-json-types)\n - #89672 (Remove unwrap_or! macro)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "98ab538db2333c69214393e6b1ca36c74fac6f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ab538db2333c69214393e6b1ca36c74fac6f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8751436ffce35cd1b7291b03b394166b77ff0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8751436ffce35cd1b7291b03b394166b77ff0da", "html_url": "https://github.com/rust-lang/rust/commit/f8751436ffce35cd1b7291b03b394166b77ff0da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8751436ffce35cd1b7291b03b394166b77ff0da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bb4fec68cb592e23077896baea072919721573", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bb4fec68cb592e23077896baea072919721573", "html_url": "https://github.com/rust-lang/rust/commit/54bb4fec68cb592e23077896baea072919721573"}, {"sha": "cda07c740cc98088dd383229dcc45e972c39b0fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda07c740cc98088dd383229dcc45e972c39b0fb", "html_url": "https://github.com/rust-lang/rust/commit/cda07c740cc98088dd383229dcc45e972c39b0fb"}], "stats": {"total": 250, "additions": 166, "deletions": 84}, "files": [{"sha": "e3c610585d978e32c8ef8071aa0ffda993431310", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -20,16 +20,6 @@\n #[macro_use]\n extern crate rustc_macros;\n \n-#[macro_export]\n-macro_rules! unwrap_or {\n-    ($opt:expr, $default:expr) => {\n-        match $opt {\n-            Some(x) => x,\n-            None => $default,\n-        }\n-    };\n-}\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "a5a4de81f12f68aaeef6a361df30705fb53365f4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -1345,8 +1345,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         generics\n                             .params\n                             .iter()\n-                            .find(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n-                            .is_some()\n+                            .any(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n                     }\n                     // Either the `bounded_ty` is not a plain type parameter, or\n                     // it's not found in the generic type parameters list."}, {"sha": "7db8d4520d406def6cad28a596f682e62fb70f0d", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n                 let bb_data = &self.body[bb];\n                 debug_assert!(hi == bb_data.statements.len());\n                 for &succ_bb in bb_data.terminator().successors() {\n-                    if self.visited.insert(succ_bb) == false {\n+                    if !self.visited.insert(succ_bb) {\n                         if succ_bb == location.block && first_lo > 0 {\n                             // `succ_bb` has been seen before. If it wasn't\n                             // fully processed, add its first part to `stack`"}, {"sha": "246d2e3208cf232d59c8cf715b96e1208f196523", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -972,8 +972,7 @@ fn suggest_ampmut<'tcx>(\n     if let Some(assignment_rhs_span) = opt_assignment_rhs_span {\n         if let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span) {\n             let is_mutbl = |ty: &str| -> bool {\n-                if ty.starts_with(\"mut\") {\n-                    let rest = &ty[3..];\n+                if let Some(rest) = ty.strip_prefix(\"mut\") {\n                     match rest.chars().next() {\n                         // e.g. `&mut x`\n                         Some(c) if c.is_whitespace() => true,"}, {"sha": "cd78c016caa4f3482612efd4f1c215285e5d48f2", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -594,7 +594,7 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n                     ty: ty.clone(),\n-                    kw_span: kw_span.clone(),\n+                    kw_span: *kw_span,\n \n                     // We can't have default values inside impl block\n                     default: None,"}, {"sha": "0efe5a56436b5727aa16be01da4fcac05e65946c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -130,8 +130,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n-        err.span_label(impl_sp, &format!(\"found\"));\n-        err.span_label(trait_sp, &format!(\"expected\"));\n+        err.span_label(impl_sp, \"found\");\n+        err.span_label(trait_sp, \"expected\");\n \n         err.emit();\n     }"}, {"sha": "b6d66eb12d08314e19aa0e65fee5e343a18aa408", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -1,7 +1,6 @@\n use crate::context::{CheckLintNameResult, LintStore};\n use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n-use rustc_ast::unwrap_or;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n@@ -233,7 +232,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                 Some(lvl) => lvl,\n             };\n \n-            let mut metas = unwrap_or!(attr.meta_item_list(), continue);\n+            let mut metas = match attr.meta_item_list() {\n+                Some(x) => x,\n+                None => continue,\n+            };\n \n             if metas.is_empty() {\n                 // FIXME (#55112): issue unused-attributes lint for `#[level()]`"}, {"sha": "f2ad72f97eca77a9a22937a6b4f2e6602ef33106", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -230,8 +230,7 @@ fn check_panic_str<'tcx>(\n         Err(_) => (None, None),\n     };\n \n-    let mut fmt_parser =\n-        Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n+    let mut fmt_parser = Parser::new(fmt, style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n     if n_arguments > 0 && fmt_parser.errors.is_empty() {"}, {"sha": "2431b819a3f30e25d3507cd84c735703a2205771", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -363,7 +363,7 @@ impl Collector<'tcx> {\n                 .collect::<Vec<_>>();\n             if existing.is_empty() {\n                 // Add if not found\n-                let new_name = passed_lib.new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+                let new_name: Option<&str> = passed_lib.new_name.as_deref();\n                 let lib = NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n                     kind: passed_lib.kind,"}, {"sha": "0bdf70b3ec4888fd6b9e92161a9a57f30fa9eb91", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -986,7 +986,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let niche = if def.repr.hide_niche() {\n                                 None\n                             } else {\n-                                Niche::from_scalar(dl, Size::ZERO, scalar.clone())\n+                                Niche::from_scalar(dl, Size::ZERO, *scalar)\n                             };\n                             if let Some(niche) = niche {\n                                 match st.largest_niche {\n@@ -2273,7 +2273,7 @@ where\n         ) -> TyMaybeWithLayout<'tcx> {\n             let tcx = cx.tcx();\n             let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {\n-                let layout = Layout::scalar(cx, tag.clone());\n+                let layout = Layout::scalar(cx, tag);\n                 TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }\n             };\n "}, {"sha": "9a86d465f98ca7a277d691a3ea5e0b2cb08bde1a", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Call {\n                         func: exchange_malloc,\n                         args: vec![Operand::Move(size), Operand::Move(align)],\n-                        destination: Some((Place::from(storage), success)),\n+                        destination: Some((storage, success)),\n                         cleanup: None,\n                         from_hir_call: false,\n                         fn_span: expr_span,\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n \n                 // Transmute `*mut u8` to the box (thus far, uninitialized):\n-                let box_ = Rvalue::ShallowInitBox(Operand::Move(Place::from(storage)), value.ty);\n+                let box_ = Rvalue::ShallowInitBox(Operand::Move(storage), value.ty);\n                 this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:"}, {"sha": "9e961f7ba5dd00e7a03ac1f3461a94e62925d1d1", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -1068,9 +1068,7 @@ impl<'tcx> SplitWildcard<'tcx> {\n                     Missing {\n                         nonexhaustive_enum_missing_real_variants: self\n                             .iter_missing(pcx)\n-                            .filter(|c| !c.is_non_exhaustive())\n-                            .next()\n-                            .is_some(),\n+                            .any(|c| !c.is_non_exhaustive()),\n                     }\n                 } else {\n                     Missing { nonexhaustive_enum_missing_real_variants: false }"}, {"sha": "f191911a6c7c1d797485aa76b1c862b58daf308d", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n             }\n \n             // check that the value being matched on is the same. The\n-            if this_bb_discr_info.targets_with_values.iter().find(|x| x.0 == value).is_none() {\n+            if !this_bb_discr_info.targets_with_values.iter().any(|x| x.0 == value) {\n                 trace!(\"NO: values being matched on are not the same\");\n                 return None;\n             }"}, {"sha": "76f0e83c8c3d5c8a63c6f65c9d01d8323ac48117", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -111,8 +111,7 @@ impl<'a, 'tcx> Patcher<'a, 'tcx> {\n                         Operand::Copy(place) | Operand::Move(place) => {\n                             // create new local\n                             let ty = operand.ty(self.local_decls, self.tcx);\n-                            let local_decl =\n-                                LocalDecl::with_source_info(ty, statement.source_info.clone());\n+                            let local_decl = LocalDecl::with_source_info(ty, statement.source_info);\n                             let local = self.local_decls.push(local_decl);\n                             // make it live\n                             let mut make_live_statement = statement.clone();"}, {"sha": "e5fbddda74427a8e0d60b8d0c4a5681854e01bb0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -1767,8 +1767,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_macro_export(&self, hir_id: HirId, attr: &Attribute, target: Target) {\n         if target != Target::MacroDef {\n             self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                lint.build(&format!(\"`#[macro_export]` only has an effect on macro definitions\"))\n-                    .emit();\n+                lint.build(\"`#[macro_export]` only has an effect on macro definitions\").emit();\n             });\n         }\n     }"}, {"sha": "515b2c3fd27909d0d72bdb4c838591a0d0d1593a", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -9,7 +9,6 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use rustc_ast::unwrap_or;\n use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -349,10 +348,10 @@ impl<'a> Resolver<'a> {\n             if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {\n                 continue;\n             }\n-            let module = unwrap_or!(\n-                single_import.imported_module.get(),\n-                return Err((Undetermined, Weak::No))\n-            );\n+            let module = match single_import.imported_module.get() {\n+                Some(x) => x,\n+                None => return Err((Undetermined, Weak::No)),\n+            };\n             let ident = match single_import.kind {\n                 ImportKind::Single { source, .. } => source,\n                 _ => unreachable!(),"}, {"sha": "1193d10d6a7d730e8631ecfa1c8bbb826baee67d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -278,14 +278,14 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n                 self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_expr(self, expr)\n                 }\n             }\n \n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n                 self.is_poly |= pat.ty.definitely_has_param_types_or_consts(self.tcx);\n-                if self.is_poly == false {\n+                if !self.is_poly {\n                     visit::walk_pat(self, pat);\n                 }\n             }\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n         visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n         debug!(\"AbstractConstBuilder: is_poly={}\", is_poly_vis.is_poly);\n-        if is_poly_vis.is_poly == false {\n+        if !is_poly_vis.is_poly {\n             return Ok(None);\n         }\n "}, {"sha": "e24f699adf6b398d9ec8ee263fa037f6a532752f", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -892,7 +892,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n                 ty::BoundRegionKind::BrNamed(def_id, _name) => {\n-                    if self.named_parameters.iter().find(|d| **d == def_id).is_none() {\n+                    if !self.named_parameters.iter().any(|d| *d == def_id) {\n                         self.named_parameters.push(def_id);\n                     }\n                 }"}, {"sha": "51bbcbebcdc0b30dbbb1b2ac2e3baccfc488b4b3", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let obligation = Obligation::new(\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n-                            predicate.clone(),\n+                            *predicate,\n                         );\n                         let result = self.infcx.evaluate_obligation(&obligation);\n                         self.tcx"}, {"sha": "6eeb28e32f1e996b99432b3b2016d8e9881d0c25", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -753,17 +753,27 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n             let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n \n+            debug!(\"impl_ty: {:?}\", impl_ty);\n+\n             // Determine the receiver type that the method itself expects.\n-            let xform_tys = self.xform_self_ty(&item, impl_ty, impl_substs);\n+            let (xform_self_ty, xform_ret_ty) = self.xform_self_ty(&item, impl_ty, impl_substs);\n+            debug!(\"xform_self_ty: {:?}, xform_ret_ty: {:?}\", xform_self_ty, xform_ret_ty);\n \n             // We can't use normalize_associated_types_in as it will pollute the\n             // fcx's fulfillment context after this probe is over.\n+            // Note: we only normalize `xform_self_ty` here since the normalization\n+            // of the return type can lead to inference results that prohibit\n+            // valid canidates from being found, see issue #85671\n+            // FIXME Postponing the normalization of the return type likely only hides a deeper bug,\n+            // which might be caused by the `param_env` itself. The clauses of the `param_env`\n+            // maybe shouldn't include `Param`s, but rather fresh variables or be canonicalized,\n+            // see isssue #89650\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n             let selcx = &mut traits::SelectionContext::new(self.fcx);\n-            let traits::Normalized { value: (xform_self_ty, xform_ret_ty), obligations } =\n-                traits::normalize(selcx, self.param_env, cause, xform_tys);\n+            let traits::Normalized { value: xform_self_ty, obligations } =\n+                traits::normalize(selcx, self.param_env, cause, xform_self_ty);\n             debug!(\n-                \"assemble_inherent_impl_probe: xform_self_ty = {:?}/{:?}\",\n+                \"assemble_inherent_impl_probe after normalization: xform_self_ty = {:?}/{:?}\",\n                 xform_self_ty, xform_ret_ty\n             );\n \n@@ -1420,6 +1430,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             };\n \n             let mut result = ProbeResult::Match;\n+            let mut xform_ret_ty = probe.xform_ret_ty;\n+            debug!(?xform_ret_ty);\n+\n             let selcx = &mut traits::SelectionContext::new(self);\n             let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n@@ -1428,7 +1441,17 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // match as well (or at least may match, sometimes we\n             // don't have enough information to fully evaluate).\n             match probe.kind {\n-                InherentImplCandidate(substs, ref ref_obligations) => {\n+                InherentImplCandidate(ref substs, ref ref_obligations) => {\n+                    // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n+                    // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n+                    // for why this is necessary\n+                    let traits::Normalized {\n+                        value: normalized_xform_ret_ty,\n+                        obligations: normalization_obligations,\n+                    } = traits::normalize(selcx, self.param_env, cause.clone(), probe.xform_ret_ty);\n+                    xform_ret_ty = normalized_xform_ret_ty;\n+                    debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n+\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_def_id = probe.item.container.id();\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n@@ -1442,7 +1465,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())\n-                        .chain(ref_obligations.iter().cloned());\n+                        .chain(ref_obligations.iter().cloned())\n+                        .chain(normalization_obligations.into_iter());\n+\n                     // Evaluate those obligations to see if they might possibly hold.\n                     for o in candidate_obligations {\n                         let o = self.resolve_vars_if_possible(o);\n@@ -1527,9 +1552,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             if let ProbeResult::Match = result {\n-                if let (Some(return_ty), Some(xform_ret_ty)) =\n-                    (self.return_type, probe.xform_ret_ty)\n-                {\n+                if let (Some(return_ty), Some(xform_ret_ty)) = (self.return_type, xform_ret_ty) {\n                     let xform_ret_ty = self.resolve_vars_if_possible(xform_ret_ty);\n                     debug!(\n                         \"comparing return_ty {:?} with xform ret ty {:?}\",\n@@ -1669,6 +1692,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self.static_candidates.push(source);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn xform_self_ty(\n         &self,\n         item: &ty::AssocItem,\n@@ -1683,9 +1707,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn xform_method_sig(&self, method: DefId, substs: SubstsRef<'tcx>) -> ty::FnSig<'tcx> {\n         let fn_sig = self.tcx.fn_sig(method);\n-        debug!(\"xform_self_ty(fn_sig={:?}, substs={:?})\", fn_sig, substs);\n+        debug!(?fn_sig);\n \n         assert!(!substs.has_escaping_bound_vars());\n "}, {"sha": "79443010fbb3d78bdc14388feb44cb4e38ed2440", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -413,7 +413,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Match(ref discr, arms, _) => {\n-                self.link_match(discr, &arms[..]);\n+                self.link_match(discr, arms);\n \n                 intravisit::walk_expr(self, expr);\n             }"}, {"sha": "dd04f782f940a805c2a3e16d2b88e6130fbcb03c", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -69,7 +69,12 @@\n )]\n #![cfg_attr(\n     not(bootstrap),\n-    doc(cfg_hide(not(test), not(any(test, bootstrap)), target_has_atomic = \"ptr\"))\n+    doc(cfg_hide(\n+        not(test),\n+        not(any(test, bootstrap)),\n+        any(not(feature = \"miri-test-libstd\"), test, doctest),\n+        target_has_atomic = \"ptr\"\n+    ))\n )]\n #![no_std]\n #![needs_allocator]"}, {"sha": "e10d01b58b017396c5630bff8db8abc00eb25b6f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -64,6 +64,7 @@\n     not(bootstrap),\n     doc(cfg_hide(\n         not(test),\n+        any(not(feature = \"miri-test-libstd\"), test, doctest),\n         target_pointer_width = \"16\",\n         target_pointer_width = \"32\",\n         target_pointer_width = \"64\","}, {"sha": "8ed69962875a62b6c05b0ee7ad3e3a6e4fd95b9a", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -435,15 +435,34 @@ impl<'a> Classifier<'a> {\n                 _ => Class::RefKeyWord,\n             },\n \n-            // Operators.\n+            // These can either be operators, or arrows.\n+            TokenKind::Eq => match lookahead {\n+                Some(TokenKind::Eq) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"==\", class: Some(Class::Op) });\n+                    return;\n+                }\n+                Some(TokenKind::Gt) => {\n+                    self.next();\n+                    sink(Highlight::Token { text: \"=>\", class: None });\n+                    return;\n+                }\n+                _ => Class::Op,\n+            },\n+            TokenKind::Minus if lookahead == Some(TokenKind::Gt) => {\n+                self.next();\n+                sink(Highlight::Token { text: \"->\", class: None });\n+                return;\n+            }\n+\n+            // Other operators.\n             TokenKind::Minus\n             | TokenKind::Plus\n             | TokenKind::Or\n             | TokenKind::Slash\n             | TokenKind::Caret\n             | TokenKind::Percent\n             | TokenKind::Bang\n-            | TokenKind::Eq\n             | TokenKind::Lt\n             | TokenKind::Gt => Class::Op,\n "}, {"sha": "22e650af7e22b1a977928c540adadda782a27c92", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -13,7 +13,7 @@\n <span class=\"kw\">use</span> <span class=\"ident\">std::path</span>::{<span class=\"ident\">Path</span>, <span class=\"ident\">PathBuf</span>};\n \n <span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n-<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n+<span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n     <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*</span><span class=\"kw\">const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n     <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n@@ -27,11 +27,11 @@\n     <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> <span class=\"op\">=</span> <span class=\"ident\">String::new</span>();\n \n     <span class=\"kw\">match</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">s</span> {\n-        <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> <span class=\"op\">=</span><span class=\"op\">&gt;</span> {}\n+        <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> =&gt; {}\n     }\n }\n \n <span class=\"macro\">macro_rules!</span> <span class=\"ident\">bar</span> {\n-    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) <span class=\"op\">=</span><span class=\"op\">&gt;</span> {};\n+    (<span class=\"macro-nonterminal\">$</span><span class=\"macro-nonterminal\">foo</span>:<span class=\"ident\">tt</span>) =&gt; {};\n }\n </code></pre>"}, {"sha": "fbfdc6767337ccbff158e57265a3409ca53dc847", "filename": "src/librustdoc/html/highlight/fixtures/sample.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -3,7 +3,7 @@\n use std::path::{Path, PathBuf};\n \n #[cfg(target_os = \"linux\")]\n-fn main() {\n+fn main() -> () {\n     let foo = true && false || true;\n     let _: *const () = 0;\n     let _ = &foo;"}, {"sha": "661453521d1cc2a2baa95aaf4d7c1bb5ca923fd1", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -418,7 +418,6 @@ impl FromWithTcx<clean::Type> for Type {\n                 }\n             }\n             Generic(s) => Type::Generic(s.to_string()),\n-            Primitive(clean::PrimitiveType::Never) => Type::Never,\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),"}, {"sha": "637e5f2288d624ebdf9eacc72ec8b981285b3329", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -207,7 +207,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         debug!(\"Done with crate\");\n \n         for primitive in Rc::clone(&self.cache).primitive_locations.values() {\n-            self.get_impls(primitive.clone());\n+            self.get_impls(*primitive);\n         }\n \n         let mut index = (*self.index).clone().into_inner();\n@@ -255,7 +255,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 8,\n+            format_version: 9,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "7c418697c1c1c8851c72adedfbfc02a60133048e", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -388,8 +388,6 @@ pub enum Type {\n     },\n     /// `impl TraitA + TraitB + ...`\n     ImplTrait(Vec<GenericBound>),\n-    /// `!`\n-    Never,\n     /// `_`\n     Infer,\n     /// `*mut u32`, `*u8`, etc."}, {"sha": "fd04f04da066a0a161e688f5c2a610bc17adaa82", "filename": "src/test/rustdoc-json/primitives.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Frustdoc-json%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -0,0 +1,22 @@\n+#![feature(never_type)]\n+\n+// @has primitives.json \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n+pub type PrimNever = !;\n+\n+// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n+pub type PrimStr = str;\n+\n+// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n+pub type PrimBool = bool;\n+\n+// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n+pub type PrimChar = char;\n+\n+// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n+// @has - \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n+pub type PrimU8 = u8;"}, {"sha": "efc3b21e6da99952af08845e512d4d689c828595", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -6,37 +6,31 @@\n // @has 'foo/macro.todo.html'\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n-// Note: count = 2 * ('=' + '>') + '+' = 2 * (1 + 1) + 1 = 5\n-// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 5\n+// Note: the only op is the `+`\n+// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 1\n \n-// @has - '{ ()'\n-// @has - '//span[@class=\"op\"]' '='\n-// @has - '//span[@class=\"op\"]' '>'\n-// @has - '{ ... };'\n-\n-// @has - '($('\n+// @has - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n // @has - '),'\n // @has - '//span[@class=\"op\"]' '+'\n-// @has - ')'\n+// @has - ') =&gt; { ... }; }'\n pub use std::todo;\n \n mod mod1 {\n     // @has 'foo/macro.macro1.html'\n     // @has - 'macro_rules!'\n     // @has - 'macro1'\n-    // @has - '{ ()'\n-    // @has - '($('\n+    // @has - '{ () =&gt; { ... }; ($('\n     // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n     // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n     // @has - ':'\n     // @has - 'expr'\n     // @has - '),'\n     // @has - '+'\n-    // @has - ')'\n+    // @has - ') =&gt; { ... }; }'\n     #[macro_export]\n     macro_rules! macro1 {\n         () => {};"}, {"sha": "ce8173169b1b3aa2f25510f9b06824d299442e78", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Some(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "e4e9705b07db5e59cf61369e83427b85590f279c", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Some(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "a3b9ac6775805243dd4a23147146762d6907fac9", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -6,7 +6,6 @@ LL |     let _result = &Ok(42).as_deref();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n-           `<{integer} as Deref>::Target = _`\n \n error: aborting due to previous error\n "}, {"sha": "98a7091dd0583c8a0f27efae8e7ecac5483e59e8", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -6,7 +6,7 @@ LL |     let _result = &mut Ok(42).as_deref_mut();\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n-           `<{integer} as Deref>::Target = _`\n+           `{integer}: Deref`\n \n error: aborting due to previous error\n "}, {"sha": "337ec307ef3261ea57afc3c4f45dee857cee263a", "filename": "src/test/ui/resolve/issue-85671.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8751436ffce35cd1b7291b03b394166b77ff0da/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85671.rs?ref=f8751436ffce35cd1b7291b03b394166b77ff0da", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+// Some trait with a function that returns a slice:\n+pub trait AsSlice {\n+    type Element;\n+    fn as_slice(&self) -> &[Self::Element];\n+}\n+\n+// Some type\n+pub struct A<Cont>(Cont);\n+\n+// Here we say that if A wraps a slice, then it implements AsSlice\n+impl<'a, Element> AsSlice for A<&'a [Element]> {\n+    type Element = Element;\n+    fn as_slice(&self) -> &[Self::Element] {\n+        self.0\n+    }\n+}\n+\n+impl<Cont> A<Cont> {\n+    // We want this function to work\n+    pub fn failing<Coef>(&self)\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        self.as_ref_a().as_ref_a();\n+    }\n+\n+    pub fn as_ref_a<Coef>(&self) -> A<&[<Self as AsSlice>::Element]>\n+    where\n+        Self: AsSlice<Element = Coef>,\n+    {\n+        A(self.as_slice())\n+    }\n+}\n+\n+fn main() {}"}]}