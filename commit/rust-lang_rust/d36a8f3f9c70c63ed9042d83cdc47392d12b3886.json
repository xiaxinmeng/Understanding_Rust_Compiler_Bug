{"sha": "d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmE4ZjNmOWM3MGM2M2VkOTA0MmQ4M2NkYzQ3MzkyZDEyYjM4ODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-11T17:12:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:10Z"}, "message": "collections: Move push/pop to MutableSeq\n\nImplement for Vec, DList, RingBuf. Add MutableSeq to the prelude.\n\nSince the collections traits are in the prelude most consumers of\nthese methods will continue to work without change.\n\n[breaking-change]", "tree": {"sha": "821721bb8fc6e81e4301cc76ba2ddf450d011b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821721bb8fc6e81e4301cc76ba2ddf450d011b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "html_url": "https://github.com/rust-lang/rust/commit/d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "url": "https://api.github.com/repos/rust-lang/rust/commits/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621", "html_url": "https://github.com/rust-lang/rust/commit/c080d26d328d6e8bbf4b159b5c5f3cd55c86f621"}], "stats": {"total": 228, "additions": 142, "deletions": 86}, "files": [{"sha": "27174de8e7416ae7c277ad99fdd3388492241655", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -268,6 +268,7 @@ impl<T: Share + Send> Drop for Weak<T> {\n #[allow(experimental)]\n mod tests {\n     use std::clone::Clone;\n+    use std::collections::MutableSeq;\n     use std::comm::channel;\n     use std::mem::drop;\n     use std::ops::Drop;"}, {"sha": "e7190a810e47f1ab525dde3ca4421b5c4d1a9ad6", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -72,7 +72,7 @@ use core::slice;\n use core::uint;\n use std::hash;\n \n-use {Collection, Mutable, Set, MutableSet};\n+use {Collection, Mutable, Set, MutableSet, MutableSeq};\n use vec::Vec;\n \n "}, {"sha": "096b0c7f5172c50cf6252bb2a4d0750226a62c1a", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -24,7 +24,7 @@ use alloc::boxed::Box;\n use core::fmt;\n use core::fmt::Show;\n \n-use Collection;\n+use {Collection, MutableSeq};\n use vec::Vec;\n \n #[allow(missing_doc)]"}, {"sha": "24df95e77c4806bae25f3b71da014715af6f89f3", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -30,7 +30,7 @@ use core::iter;\n use core::mem;\n use core::ptr;\n \n-use {Collection, Mutable, Deque};\n+use {Collection, Mutable, Deque, MutableSeq};\n \n /// A doubly-linked list.\n pub struct DList<T> {\n@@ -265,6 +265,11 @@ impl<T> Deque<T> for DList<T> {\n     }\n }\n \n+impl<T> MutableSeq<T> for DList<T> {\n+    fn push(&mut self, elt: T) { self.push_back(elt) }\n+    fn pop(&mut self) -> Option<T> { self.pop_back() }\n+}\n+\n impl<T> Default for DList<T> {\n     #[inline]\n     fn default() -> DList<T> { DList::new() }\n@@ -719,7 +724,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use Deque;\n+    use {Deque, MutableSeq};\n     use super::{DList, Node, ListInsertion};\n     use vec::Vec;\n "}, {"sha": "485dc8c5959b74f3d5dae4650bd8451e8398fbcb", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -281,6 +281,8 @@ mod tests {\n     use super::super::{Hash, Writer};\n     use super::{SipState, hash, hash_with_keys};\n \n+    use MutableSeq;\n+\n     // Hash just the bytes of the slice, without length prefix\n     struct Bytes<'a>(&'a [u8]);\n "}, {"sha": "2b1d8b140ae5840cb2a15969a0deed4057cba8dd", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -325,6 +325,11 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n     fn remove(&mut self, value: &T) -> bool;\n }\n \n+pub trait MutableSeq<T>: Mutable {\n+    fn push(&mut self, t: T);\n+    fn pop(&mut self) -> Option<T>;\n+}\n+\n /// A double-ended sequence that allows querying, insertion and deletion at both\n /// ends.\n ///\n@@ -384,7 +389,7 @@ pub trait MutableSet<T>: Set<T> + Mutable {\n ///     println!(\"{}\", (f, b));\n /// }\n /// ```\n-pub trait Deque<T> : Mutable {\n+pub trait Deque<T> : MutableSeq<T> {\n     /// Provide a reference to the front element, or `None` if the sequence is\n     /// empty.\n     ///\n@@ -535,4 +540,8 @@ mod std {\n     pub use core::clone;    // deriving(Clone)\n     pub use core::cmp;      // deriving(Eq, Ord, etc.)\n     pub use hash;           // deriving(Hash)\n+\n+    pub mod collections {\n+        pub use MutableSeq;\n+    }\n }"}, {"sha": "0e4b46cfc56fbfae5bffebef959d8092f21b1426", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -11,8 +11,26 @@\n #![macro_escape]\n \n /// Create a `std::vec::Vec` containing the arguments.\n+#[cfg(not(test))]\n macro_rules! vec(\n     ($($e:expr),*) => ({\n+        #[allow(unused_imports)]\n+        use std::collections::MutableSeq;\n+\n+        // leading _ to allow empty construction without a warning.\n+        let mut _temp = ::vec::Vec::new();\n+        $(_temp.push($e);)*\n+        _temp\n+    });\n+    ($($e:expr),+,) => (vec!($($e),+))\n+)\n+\n+#[cfg(test)]\n+macro_rules! vec(\n+    ($($e:expr),*) => ({\n+        #[allow(unused_imports)]\n+        use MutableSeq;\n+\n         // leading _ to allow empty construction without a warning.\n         let mut _temp = ::vec::Vec::new();\n         $(_temp.push($e);)*"}, {"sha": "6e1a3ec1cb6c81d68ff4b7465fe0070fbed29f03", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -154,7 +154,7 @@ use core::default::Default;\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use slice;\n use vec::Vec;\n \n@@ -388,6 +388,7 @@ mod tests {\n \n     use priority_queue::PriorityQueue;\n     use vec::Vec;\n+    use MutableSeq;\n \n     #[test]\n     fn test_iterator() {"}, {"sha": "05dda93039861aa0910c72380676b9dd27d39951", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -20,7 +20,7 @@ use core::default::Default;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n \n-use {Deque, Collection, Mutable};\n+use {Deque, Collection, Mutable, MutableSeq};\n use vec::Vec;\n \n static INITIAL_CAPACITY: uint = 8u; // 2^3\n@@ -114,6 +114,11 @@ impl<T> Deque<T> for RingBuf<T> {\n     }\n }\n \n+impl<T> MutableSeq<T> for RingBuf<T> {\n+    fn push(&mut self, t: T) { self.push_back(t) }\n+    fn pop(&mut self) -> Option<T> { self.pop_back() }\n+}\n+\n impl<T> Default for RingBuf<T> {\n     #[inline]\n     fn default() -> RingBuf<T> { RingBuf::new() }"}, {"sha": "64062dc0ccbf8abc2e4f62adbaf5c7ca923727ab", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -107,7 +107,7 @@ use core::mem;\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};\n \n-use Collection;\n+use {Collection, MutableSeq};\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n@@ -731,7 +731,7 @@ mod tests {\n     use std::rt;\n     use slice::*;\n \n-    use Mutable;\n+    use {Mutable, MutableSeq};\n     use vec::Vec;\n \n     fn square(n: uint) -> uint { n * n }\n@@ -2133,6 +2133,7 @@ mod bench {\n     use test::Bencher;\n \n     use vec::Vec;\n+    use MutableSeq;\n \n     #[bench]\n     fn iterator(b: &mut Bencher) {"}, {"sha": "653f6bae26c2bbc6a1a63c6dea23ddf136162d34", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -77,7 +77,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::mem;\n \n-use Collection;\n+use {Collection, MutableSeq};\n use hash;\n use string::String;\n use unicode;"}, {"sha": "10cc446abcdafb3b3d43485c9a43f4f494425843", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -20,7 +20,7 @@ use core::mem;\n use core::ptr;\n use core::raw::Slice;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use hash;\n use str;\n use str::{CharRange, StrAllocating, MaybeOwned, Owned, Slice};"}, {"sha": "124209ba52e2a01bda21aaa69c1d570e483d6d26", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -40,7 +40,7 @@ use core::mem::{replace, swap};\n use core::ptr;\n use std::hash::{Writer, Hash};\n \n-use {Collection, Mutable, Set, MutableSet, MutableMap, Map};\n+use {Collection, Mutable, Set, MutableSet, MutableMap, Map, MutableSeq};\n use vec::Vec;\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -1127,7 +1127,7 @@ mod test_treemap {\n     use std::rand::Rng;\n     use std::rand;\n \n-    use {Map, MutableMap, Mutable};\n+    use {Map, MutableMap, Mutable, MutableSeq};\n     use super::{TreeMap, TreeNode};\n \n     #[test]"}, {"sha": "2338b5ff7e97af221c1cb78fd0ce99aab685221a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 67, "deletions": 62, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -23,7 +23,7 @@ use core::num;\n use core::ptr;\n use core::uint;\n \n-use {Collection, Mutable};\n+use {Collection, Mutable, MutableSeq};\n use slice::{MutableOrdVector, MutableVectorAllocating, CloneableVector};\n use slice::{Items, MutItems};\n \n@@ -666,67 +666,6 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it, or `None` if it is\n-    /// empty.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1i, 2, 3];\n-    /// assert_eq!(vec.pop(), Some(3));\n-    /// assert_eq!(vec, vec![1, 2]);\n-    /// ```\n-    #[inline]\n-    pub fn pop(&mut self) -> Option<T> {\n-        if self.len == 0 {\n-            None\n-        } else {\n-            unsafe {\n-                self.len -= 1;\n-                Some(ptr::read(self.as_slice().unsafe_ref(self.len())))\n-            }\n-        }\n-    }\n-\n-    /// Append an element to a vector.\n-    ///\n-    /// # Failure\n-    ///\n-    /// Fails if the number of elements in the vector overflows a `uint`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1i, 2];\n-    /// vec.push(3);\n-    /// assert_eq!(vec, vec![1, 2, 3]);\n-    /// ```\n-    #[inline]\n-    pub fn push(&mut self, value: T) {\n-        if mem::size_of::<T>() == 0 {\n-            // zero-size types consume no memory, so we can't rely on the address space running out\n-            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n-            unsafe { mem::forget(value); }\n-            return\n-        }\n-        if self.len == self.cap {\n-            let old_size = self.cap * mem::size_of::<T>();\n-            let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n-            if old_size > size { fail!(\"capacity overflow\") }\n-            unsafe {\n-                self.ptr = alloc_or_realloc(self.ptr, size,\n-                                            self.cap * mem::size_of::<T>());\n-            }\n-            self.cap = max(self.cap, 2) * 2;\n-        }\n-\n-        unsafe {\n-            let end = (self.ptr as *const T).offset(self.len as int) as *mut T;\n-            ptr::write(&mut *end, value);\n-            self.len += 1;\n-        }\n-    }\n-\n     /// Appends one element to the vector provided. The vector itself is then\n     /// returned for use again.\n     ///\n@@ -1615,6 +1554,70 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n     }\n }\n \n+impl<T> MutableSeq<T> for Vec<T> {\n+    /// Append an element to a vector.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the number of elements in the vector overflows a `uint`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2);\n+    /// vec.push(3);\n+    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// ```\n+    #[inline]\n+    fn push(&mut self, value: T) {\n+        if mem::size_of::<T>() == 0 {\n+            // zero-size types consume no memory, so we can't rely on the address space running out\n+            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n+            unsafe { mem::forget(value); }\n+            return\n+        }\n+        if self.len == self.cap {\n+            let old_size = self.cap * mem::size_of::<T>();\n+            let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n+            if old_size > size { fail!(\"capacity overflow\") }\n+            unsafe {\n+                self.ptr = alloc_or_realloc(self.ptr, size,\n+                                            self.cap * mem::size_of::<T>());\n+            }\n+            self.cap = max(self.cap, 2) * 2;\n+        }\n+\n+        unsafe {\n+            let end = (self.ptr as *const T).offset(self.len as int) as *mut T;\n+            ptr::write(&mut *end, value);\n+            self.len += 1;\n+        }\n+    }\n+\n+    /// Remove the last element from a vector and return it, or `None` if it is\n+    /// empty.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2, 3);\n+    /// assert_eq!(vec.pop(), Some(3));\n+    /// assert_eq!(vec, vec!(1, 2));\n+    /// ```\n+    #[inline]\n+    fn pop(&mut self) -> Option<T> {\n+        if self.len == 0 {\n+            None\n+        } else {\n+            unsafe {\n+                self.len -= 1;\n+                Some(ptr::read(self.as_slice().unsafe_ref(self.len())))\n+            }\n+        }\n+    }\n+\n+}\n+\n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n     allocation: *mut T, // the block of memory allocated for the vector\n@@ -1704,6 +1707,8 @@ mod tests {\n     use test::Bencher;\n     use super::{unzip, raw, Vec};\n \n+    use MutableSeq;\n+\n     #[test]\n     fn test_small_vec_struct() {\n         assert!(size_of::<Vec<u8>>() == size_of::<uint>() * 3);"}, {"sha": "c9188e81975c614f9bcd93f384012d9841b03299", "filename": "src/librustrt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibrustrt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibrustrt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fat_exit_imp.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -15,6 +15,7 @@\n use core::prelude::*;\n \n use alloc::boxed::Box;\n+use collections::MutableSeq;\n use collections::vec::Vec;\n use core::atomics;\n use core::mem;"}, {"sha": "b7366f440d0348ace6c011cd5aa81b359b384cc8", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -41,6 +41,7 @@ assert_eq!(*key_vector.get().unwrap(), vec![4]);\n use core::prelude::*;\n \n use alloc::boxed::Box;\n+use collections::MutableSeq;\n use collections::vec::Vec;\n use core::kinds::marker;\n use core::mem;"}, {"sha": "d98d490a84b2741edf740cfac18235c007dd5ba8", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -15,7 +15,7 @@\n #![experimental]\n \n pub use core_collections::{Collection, Mutable, Map, MutableMap};\n-pub use core_collections::{Set, MutableSet, Deque};\n+pub use core_collections::{Set, MutableSet, Deque, MutableSeq};\n pub use core_collections::{Bitv, BitvSet, BTree, DList, EnumSet};\n pub use core_collections::{PriorityQueue, RingBuf, SmallIntMap};\n pub use core_collections::{TreeMap, TreeSet, TrieMap, TrieSet};"}, {"sha": "5980245fa79a24e53f445b0192e920a67b8b01bf", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -20,6 +20,7 @@ A simple wrapper over the platform's dynamic library facilities\n #![allow(missing_doc)]\n \n use clone::Clone;\n+use collections::MutableSeq;\n use c_str::ToCStr;\n use iter::Iterator;\n use mem;"}, {"sha": "5215aec5dfbfa6e314bd481a22169e3f978cea25", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -15,7 +15,7 @@\n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately\n \n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use iter::Iterator;\n use option::{Option, Some, None};\n use result::{Ok, Err};"}, {"sha": "c7dec49a76d1fe0f2b82568300b81ab11488a1dc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -53,7 +53,7 @@ fs::unlink(&path);\n \n use c_str::ToCStr;\n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use io::standard_error;\n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};"}, {"sha": "c126866e7159ae67f1d33f84af6bbd25923912df", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -20,6 +20,7 @@ definitions for a number of signals.\n */\n \n use clone::Clone;\n+use collections::MutableSeq;\n use comm::{Sender, Receiver, channel};\n use io;\n use iter::Iterator;"}, {"sha": "125c3fdf5d90c02b0f2dfc6614d0bb33c5038c7f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -288,4 +288,6 @@ mod std {\n     #[cfg(test)] pub use os = realstd::os;\n     // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n     #[cfg(test)] pub use slice;\n+\n+    pub use collections; // vec!() uses MutableSeq\n }"}, {"sha": "6de6b9d680f7556b39d4cbcc6d8ea6edb645e3b7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -315,6 +315,9 @@ macro_rules! try(\n #[macro_export]\n macro_rules! vec(\n     ($($e:expr),*) => ({\n+        #[allow(unused_imports)]\n+        use std::collections::MutableSeq;\n+\n         // leading _ to allow empty construction without a warning.\n         let mut _temp = ::std::vec::Vec::new();\n         $(_temp.push($e);)*"}, {"sha": "c8528e752e89a114ebca84ad381bcedf3fddb89b", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -14,7 +14,7 @@\n \n use char;\n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "f71f1d22d009d0f95e07d1d15f7c4576c542a6ac", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -32,7 +32,7 @@\n #![allow(non_snake_case_functions)]\n \n use clone::Clone;\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use fmt;\n use io::{IoResult, IoError};\n use iter::Iterator;"}, {"sha": "0c93f8e6de979cde2a8cee3e15a80982e83c48e7", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -65,7 +65,7 @@ println!(\"path exists: {}\", path.exists());\n \n #![experimental]\n \n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use c_str::CString;\n use clone::Clone;\n use fmt;"}, {"sha": "877ca2c7e013fa03135f6878ed7a0d8b108b05c3", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -13,7 +13,7 @@\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "d9b802b38fdeb4840e7e31351f5bc5c551868b60", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -16,7 +16,7 @@ use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use collections::Collection;\n+use collections::{Collection, MutableSeq};\n use from_str::FromStr;\n use hash;\n use io::Writer;"}, {"sha": "0ce7497cf300e7ef3776cb2603ef963fa59e57ed", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -63,7 +63,7 @@\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n-#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap};\n+#[doc(no_inline)] pub use collections::{Collection, Mutable, Map, MutableMap, MutableSeq};\n #[doc(no_inline)] pub use collections::{Set, MutableSet};\n #[doc(no_inline)] pub use iter::{FromIterator, Extendable, ExactSize};\n #[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};"}, {"sha": "c541cc02774e0d3f5d4e503cc23970b992757156", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -55,7 +55,7 @@ use core::prelude::*;\n use alloc::arc::Arc;\n use alloc::heap::{allocate, deallocate};\n use alloc::boxed::Box;\n-use collections::Vec;\n+use collections::{Vec, MutableSeq};\n use core::kinds::marker;\n use core::mem::{forget, min_align_of, size_of, transmute};\n use core::ptr;"}, {"sha": "1bdf24ea7dd5166ad7d0ab006a1b4e228d73f837", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36a8f3f9c70c63ed9042d83cdc47392d12b3886/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=d36a8f3f9c70c63ed9042d83cdc47392d12b3886", "patch": "@@ -22,7 +22,7 @@ use core::finally::Finally;\n use core::kinds::marker;\n use core::mem;\n use core::ty::Unsafe;\n-use collections::Vec;\n+use collections::{Vec, MutableSeq};\n \n use mutex;\n use comm::{Receiver, Sender, channel};"}]}