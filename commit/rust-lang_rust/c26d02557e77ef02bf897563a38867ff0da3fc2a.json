{"sha": "c26d02557e77ef02bf897563a38867ff0da3fc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNmQwMjU1N2U3N2VmMDJiZjg5NzU2M2EzODg2N2ZmMGRhM2ZjMmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-09T21:37:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-09T21:37:48Z"}, "message": "Switch 'cont' to 'again' everywhere. Close #2229.", "tree": {"sha": "4f37e678d3b138386b7b9549081f266a12259d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f37e678d3b138386b7b9549081f266a12259d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26d02557e77ef02bf897563a38867ff0da3fc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26d02557e77ef02bf897563a38867ff0da3fc2a", "html_url": "https://github.com/rust-lang/rust/commit/c26d02557e77ef02bf897563a38867ff0da3fc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26d02557e77ef02bf897563a38867ff0da3fc2a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9afc8be04b7fb2927fa33d41f8618ca7fb9285bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9afc8be04b7fb2927fa33d41f8618ca7fb9285bb", "html_url": "https://github.com/rust-lang/rust/commit/9afc8be04b7fb2927fa33d41f8618ca7fb9285bb"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "e69945c97b97f011fff779c52a241cd8f22b70f6", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -785,7 +785,7 @@ fn install_source(c: cargo, path: str) {\n \n     for cratefiles.each |cf| {\n         alt load_crate(cf) {\n-            none { cont; }\n+            none { again; }\n             some(crate) {\n               for crate.deps.each |query| {\n                     // FIXME (#1356): handle cyclic dependencies\n@@ -975,7 +975,7 @@ fn cmd_uninstall(c: cargo) {\n                     }\n                     ret;\n                 }\n-                none { cont; }\n+                none { again; }\n             }\n         }\n \n@@ -993,7 +993,7 @@ fn cmd_uninstall(c: cargo) {\n                     }\n                     ret;\n                 }\n-                none { cont; }\n+                none { again; }\n             }\n         }\n         for os::list_dir(bin).each |file| {\n@@ -1007,7 +1007,7 @@ fn cmd_uninstall(c: cargo) {\n                     }\n                     ret;\n                 }\n-                none { cont; }\n+                none { again; }\n             }\n         }\n "}, {"sha": "d7d1e147d0b4c16bb466dbf01b2606a72570e84c", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -548,18 +548,18 @@ fn check_variants(files: ~[str], cx: context) {\n         if cx.mode == tm_converge && file_might_not_converge(file) {\n             #error(\"Skipping convergence test based on\\\n                     file_might_not_converge\");\n-            cont;\n+            again;\n         }\n \n         let s = @result::get(io::read_whole_file_str(file));\n         if contains(*s, \"#\") {\n-            cont; // Macros are confusing\n+            again; // Macros are confusing\n         }\n         if cx.mode == tm_converge && content_might_not_converge(*s) {\n-            cont;\n+            again;\n         }\n         if cx.mode == tm_run && content_is_dangerous_to_compile(*s) {\n-            cont;\n+            again;\n         }\n \n         log(error, \"check_variants: \" + file);"}, {"sha": "f9666a1f22e3815bae6bd56d9b9997c12d02ceda", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -53,7 +53,7 @@ impl reader_util for reader {\n                 assert (w > 0u);\n                 if w == 1u {\n                     vec::push(chars,  b0 as char );\n-                    cont;\n+                    again;\n                 }\n                 // can't satisfy this char with the existing data\n                 if end > vec::len(buf) {"}, {"sha": "4dc5116b509780488824bcbf7beb60417c98123a", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -1184,7 +1184,7 @@ mod node {\n                     let next_char = get_next_char_in_leaf(it);\n                     alt(next_char) {\n                       option::none {\n-                        cont;\n+                        again;\n                       }\n                       option::some(_) {\n                         ret next_char;"}, {"sha": "c9355f05e38f8b4c9708fa338e8eb5498d29537c", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -767,7 +767,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n         for clauses.each |c| {\n             alt use_selectors_to_bind(c.params, arg) {\n               some(bindings) { ret transcribe(cx, bindings, c.body); }\n-              none { cont; }\n+              none { again; }\n             }\n         }\n         cx.span_fatal(sp, \"no clauses match macro invocation\");"}, {"sha": "d351d492fb089594b981459e35ba7479b8659759", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -56,7 +56,7 @@ fn strip_doc_comment_decoration(comment: str) -> str {\n         let mut i = max.get_default(uint::max_value);\n         for lines.each |line| {\n             if line.trim().is_empty() {\n-                cont;\n+                again;\n             }\n             for line.each_chari |j, c| {\n                 if j >= i {"}, {"sha": "600aa9f4c42a47466cb58ca72e28f003b6312720", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -310,7 +310,7 @@ fn scan_digits(rdr: string_reader, radix: uint) -> str {\n     let mut rslt = \"\";\n     loop {\n         let c = rdr.curr;\n-        if c == '_' { bump(rdr); cont; }\n+        if c == '_' { bump(rdr); again; }\n         alt char::to_digit(c, radix) {\n           some(d) {\n             str::push_char(rslt, c);"}, {"sha": "6a1665918874d7abf24061be0ead3c2bba1ab5b1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -1140,7 +1140,7 @@ class parser {\n                   }\n                   _ { self.unexpected(); }\n                 }\n-                cont;\n+                again;\n             }\n             if self.expr_is_complete(e) { break; }\n             alt copy self.token {"}, {"sha": "0d399bd6303e4e83a08ce76c29095d5d19c400bf", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -597,7 +597,7 @@ fn link_binary(sess: session,\n     for cstore::get_used_crate_files(cstore).each |cratepath| {\n         if str::ends_with(cratepath, \".rlib\") {\n             vec::push(cc_args, cratepath);\n-            cont;\n+            again;\n         }\n         let cratepath = cratepath;\n         let dir = path::dirname(cratepath);"}, {"sha": "f68995db14b80db8a67a9e9dfa1a5e4973c13d4f", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -140,7 +140,7 @@ fn encode_class_item_paths(ebml_w: ebml::writer,\n      items: ~[@class_member], path: ~[ident], &index: ~[entry<str>]) {\n     for items.each |it| {\n      alt ast_util::class_member_visibility(it) {\n-          private { cont; }\n+          private { again; }\n           public {\n               let (id, ident) = alt it.node {\n                  instance_var(v, _, _, vid, _) { (vid, v) }\n@@ -158,7 +158,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                             &index: ~[entry<str>]) {\n     for module.items.each |it| {\n         if !reachable(ecx, it.id) ||\n-           !ast_util::is_exported(it.ident, module) { cont; }\n+           !ast_util::is_exported(it.ident, module) { again; }\n         if !ast_util::is_item_impl(it) {\n             add_to_index(ebml_w, path, index, it.ident);\n         }"}, {"sha": "4b80e934416ed3bd850b1a9fa2bf4fc4dd612019", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -247,7 +247,7 @@ impl methods for check_loan_ctxt {\n         for self.walk_loans(par_scope_id) |old_loan| {\n             for (*new_loanss).each |new_loans| {\n                 for (*new_loans).each |new_loan| {\n-                    if old_loan.lp != new_loan.lp { cont; }\n+                    if old_loan.lp != new_loan.lp { again; }\n                     alt (old_loan.mutbl, new_loan.mutbl) {\n                       (m_const, _) | (_, m_const) |\n                       (m_mutbl, m_mutbl) | (m_imm, m_imm) {"}, {"sha": "b4709820276738e9f1619c3df98239936553a967", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -176,7 +176,7 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             let id = ast_util::def_id_of_def(fv.def).node;\n \n             // skip over free variables that appear in the cap clause\n-            if captured_vars.contains(id) { cont; }\n+            if captured_vars.contains(id) { again; }\n \n             // if this is the last use of the variable, then it will be\n             // a move and not a copy"}, {"sha": "d1198d86b985175d411369ccd565f669acfa3dad", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -2129,7 +2129,7 @@ fn check_exports(e: @env) {\n                 let id = alt check glob.path.node {\n                   ast::view_path_glob(_, node_id) { node_id }\n                 };\n-                if ! glob_is_re_exported.contains_key(id) { cont; }\n+                if ! glob_is_re_exported.contains_key(id) { again; }\n                 do iter_mod(*e, glob.def,\n                             glob.path.span, outside) |ident, def| {\n                     vec::push(_mod.globbed_exports, ident);"}, {"sha": "1f6e0f6e12785d5808c2c4f1266d66394e44b70f", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -1329,7 +1329,7 @@ class Resolver {\n \n         for (*impls_in_module).each |implementation| {\n             if def_ids.contains_key(implementation.did) {\n-                cont;\n+                again;\n             }\n             def_ids.insert(implementation.did, ());\n \n@@ -1821,7 +1821,7 @@ class Resolver {\n             if !self.name_is_exported(containing_module, atom) {\n                 #debug(\"(resolving glob import) name '%s' is unexported\",\n                        *(*self.atom_table).atom_to_str(atom));\n-                cont;\n+                again;\n             }\n \n             #debug(\"(resolving glob import) writing module resolution \\\n@@ -1898,7 +1898,7 @@ class Resolver {\n             if !self.name_is_exported(containing_module, atom) {\n                 #debug(\"(resolving glob import) name '%s' is unexported\",\n                        *(*self.atom_table).atom_to_str(atom));\n-                cont;\n+                again;\n             }\n \n             let mut dest_import_resolution;\n@@ -2512,7 +2512,7 @@ class Resolver {\n                 // to fail.\n \n                 if namespace == ImplNS {\n-                    cont;\n+                    again;\n                 }\n \n                 alt self.resolve_definition_of_name_in_module(module,"}, {"sha": "e987f0f3f13be6e760d901ff014e10d6b9d81ae3", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -5441,7 +5441,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         let mut reexports = ~[];\n         for cx.exp_map.each |exp_id, defs| {\n             for defs.each |def| {\n-                if !def.reexp { cont; }\n+                if !def.reexp { again; }\n                 let path = alt check cx.tcx.items.get(exp_id) {\n                   ast_map::node_export(_, path) {\n                     ast_map::path_to_str(*path)"}, {"sha": "3da69f9b778de1bee26f6df24e90ed99c1609fc6", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -301,7 +301,7 @@ fn llreg_ty(cls: ~[x86_64_reg_class]) -> TypeRef {\n                                                   vec_len as c_uint);\n                 vec::push(tys, vec_ty);\n                 i += vec_len;\n-                cont;\n+                again;\n             }\n             sse_fs_class {\n                 vec::push(tys, T_f32());"}, {"sha": "f1a79fad49b6b28dfefaf8280b7ef9969d6aff52", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -170,7 +170,7 @@ class lookup {\n         for vec::each(*bounds) |bound| {\n             let (iid, bound_substs) = alt bound {\n               ty::bound_copy | ty::bound_send | ty::bound_const {\n-                cont; /* ok */\n+                again; /* ok */\n               }\n               ty::bound_trait(bound_t) {\n                 alt check ty::get(bound_t).struct {\n@@ -215,7 +215,7 @@ class lookup {\n \n         let ms = *ty::trait_methods(self.tcx(), did);\n         for ms.eachi |i, m| {\n-            if m.ident != self.m_name { cont; }\n+            if m.ident != self.m_name { again; }\n \n             let m_fty = ty::mk_fn(self.tcx(), m.fty);\n \n@@ -251,7 +251,7 @@ class lookup {\n         let ms = *ty::trait_methods(self.tcx(), did);\n \n         for ms.each |m| {\n-            if m.ident != self.m_name { cont; }\n+            if m.ident != self.m_name { again; }\n \n             if m.vis == ast::private && !self.include_private {\n                 self.tcx().sess.span_fatal("}, {"sha": "42d2529415f144fd14b76da83323d54733663fa9", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -119,12 +119,12 @@ fn lookup_vtable(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n                 // find the trait that im implements (if any)\n                 let of_ty = alt ty::impl_trait(tcx, im.did) {\n                   some(of_ty) { of_ty }\n-                  _ { cont; }\n+                  _ { again; }\n                 };\n \n                 // it must have the same id as the expected one\n                 alt ty::get(of_ty).struct {\n-                  ty::ty_trait(id, _) if id != trait_id { cont; }\n+                  ty::ty_trait(id, _) if id != trait_id { again; }\n                   _ { /* ok */ }\n                 }\n \n@@ -134,7 +134,7 @@ fn lookup_vtable(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n                     impl_self_ty(fcx, im.did);\n                 let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n                 alt fcx.mk_subty(ty, for_ty) {\n-                  result::err(_) { cont; }\n+                  result::err(_) { again; }\n                   result::ok(()) { }\n                 }\n "}, {"sha": "8351d6a31463c1aeab1fbd0c2527d9f99d42e993", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -184,7 +184,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n \n             let mut reexportdocs = ~[];\n             for defs.each |def| {\n-                if !def.reexp { cont; }\n+                if !def.reexp { again; }\n                 alt def_map.find(def.id) {\n                   some(itemtag) {\n                     reexportdocs += ~[(*name, itemtag)];"}, {"sha": "d686f8bcd917a19547b0e804c99aadc10a43e175", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -207,7 +207,7 @@ fn main(args: ~[str]) {\n    while !rdr.eof() {\n       let line: str = rdr.read_line();\n \n-      if str::len(line) == 0u { cont; }\n+      if str::len(line) == 0u { again; }\n \n       alt (line[0], proc_mode) {\n "}, {"sha": "c32ebcc0b45d0607937b6e4566b6f1232fc5ce2e", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -155,7 +155,7 @@ fn main(args: ~[str]) {\n    while !rdr.eof() {\n       let line: str = rdr.read_line();\n \n-      if str::len(line) == 0u { cont; }\n+      if str::len(line) == 0u { again; }\n \n       alt (line[0], proc_mode) {\n "}, {"sha": "2dcb9d6f6785fd456733d75fc6ecf9635ba9c90e", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -10,14 +10,14 @@ fn main() {\n         if x == 3 { break; } assert (x <= 3);\n     }\n     i = 0;\n-    while i < 10 { i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); }\n+    while i < 10 { i += 1; if i % 2 == 0 { again; } assert (i % 2 != 0); }\n     i = 0;\n     loop { \n-        i += 1; if i % 2 == 0 { cont; } assert (i % 2 != 0); \n+        i += 1; if i % 2 == 0 { again; } assert (i % 2 != 0); \n         if i >= 10 { break; }\n     }\n     for vec::each(~[1, 2, 3, 4, 5, 6]) |x| {\n-        if x % 2 == 0 { cont; }\n+        if x % 2 == 0 { again; }\n         assert (x % 2 != 0);\n     }\n }"}, {"sha": "800e42a750b8b62d5d3c532194a8cfe59b78ff07", "filename": "src/test/run-pass/class-impl-parameterized-iface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -55,10 +55,10 @@ class cat : map<int, bool> {\n     }\n   }\n   fn each_key(&&f: fn(&&int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } cont;};\n+    for self.each |k, _v| { if !f(k) { break; } again;};\n   }\n   fn each_value(&&f: fn(&&bool) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } cont;};\n+    for self.each |_k, v| { if !f(v) { break; } again;};\n   }\n }\n "}, {"sha": "687efb5ead5fe0b57a28ec6951c0845c7a6c88b9", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -77,10 +77,10 @@ class cat<T: copy> : map<int, T> {\n   }\n \n   fn each_key(&&f: fn(&&int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } cont;};\n+    for self.each |k, _v| { if !f(k) { break; } again;};\n   }\n   fn each_value(&&f: fn(&&T) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } cont;};\n+    for self.each |_k, v| { if !f(v) { break; } again;};\n   }\n }\n "}, {"sha": "2fa706e5777f55201bfe958a8df596288563e573", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        cont;\n+        again;\n     }\n     is_even = true;\n   }\n@@ -30,7 +30,7 @@ fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        cont;\n+        again;\n     }\n     is_even = true;\n   }"}, {"sha": "c94f0640180fb3292d33e9a094df5bd260f3e713", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -40,7 +40,7 @@ fn main() {\n     for vec::all(~[1, 2, 3, 4, 5, 6, 7]) |e| {\n         last = e;\n         if e == 5 { break; }\n-        if e % 2 == 1 { cont; }\n+        if e % 2 == 1 { again; }\n         assert e % 2 == 0;\n     };\n     assert last == 5;"}, {"sha": "3064583b7529902b54d92a4ea927dd6f0d4150f3", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -6,7 +6,7 @@ use std;\n \n fn test_break() { loop { let x: @int = break; } }\n \n-fn test_cont() { let mut i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n+fn test_cont() { let mut i = 0; while i < 1 { i += 1; let x: @int = again; } }\n \n fn test_ret() { let x: @int = ret; }\n "}, {"sha": "be3ec48c8a64ee3d8ef07dfc42a4d88f89301b18", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26d02557e77ef02bf897563a38867ff0da3fc2a/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=c26d02557e77ef02bf897563a38867ff0da3fc2a", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         assert (i > 0);\n         log(debug, i);\n         i -= 1;\n-        cont;\n+        again;\n     }\n }"}]}