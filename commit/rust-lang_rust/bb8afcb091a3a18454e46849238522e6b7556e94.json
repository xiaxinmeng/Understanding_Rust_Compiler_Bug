{"sha": "bb8afcb091a3a18454e46849238522e6b7556e94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOGFmY2IwOTFhM2ExODQ1NGU0Njg0OTIzODUyMmU2Yjc1NTZlOTQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-07T08:30:32Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-09T07:37:21Z"}, "message": "Avoid rewriting the last argument whenever possible", "tree": {"sha": "e9b8555cd4b1d51808abf02c607ac7fa63b7bf3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b8555cd4b1d51808abf02c607ac7fa63b7bf3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8afcb091a3a18454e46849238522e6b7556e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8afcb091a3a18454e46849238522e6b7556e94", "html_url": "https://github.com/rust-lang/rust/commit/bb8afcb091a3a18454e46849238522e6b7556e94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8afcb091a3a18454e46849238522e6b7556e94/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be38606c7790c4ae92e4f9a368ede8dfcb2feec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be38606c7790c4ae92e4f9a368ede8dfcb2feec5", "html_url": "https://github.com/rust-lang/rust/commit/be38606c7790c4ae92e4f9a368ede8dfcb2feec5"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "0fe6294d9aba5645739fdfff06b85251cb35679d", "filename": "src/expr.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb8afcb091a3a18454e46849238522e6b7556e94/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8afcb091a3a18454e46849238522e6b7556e94/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bb8afcb091a3a18454e46849238522e6b7556e94", "patch": "@@ -2244,30 +2244,22 @@ where\n \n     // Replace the last item with its first line to see if it fits with\n     // first arguments.\n-    let (orig_last, placeholder) = if overflow_last {\n+    let placeholder = if overflow_last {\n         let mut context = context.clone();\n         if let Some(expr) = args[args.len() - 1].to_expr() {\n             match expr.node {\n                 ast::ExprKind::MethodCall(..) => context.force_one_line_chain = true,\n                 _ => (),\n             }\n         }\n-        last_arg_shape(&context, &item_vec, shape, args_max_width).map_or(\n-            (None, None),\n-            |arg_shape| {\n-                rewrite_last_arg_with_overflow(\n-                    &context,\n-                    args,\n-                    &mut item_vec[args.len() - 1],\n-                    arg_shape,\n-                )\n-            },\n-        )\n+        last_arg_shape(&context, &item_vec, shape, args_max_width).and_then(|arg_shape| {\n+            rewrite_last_arg_with_overflow(&context, args, &mut item_vec[args.len() - 1], arg_shape)\n+        })\n     } else {\n-        (None, None)\n+        None\n     };\n \n-    let tactic = definitive_tactic(\n+    let mut tactic = definitive_tactic(\n         &*item_vec,\n         ListTactic::LimitedHorizontalVertical(args_max_width),\n         Separator::Comma,\n@@ -2280,10 +2272,17 @@ where\n         (true, DefinitiveListTactic::Horizontal, placeholder @ Some(..)) => {\n             item_vec[args.len() - 1].item = placeholder;\n         }\n-        (true, _, _) => {\n-            item_vec[args.len() - 1].item = orig_last;\n+        _ if args.len() >= 1 => {\n+            item_vec[args.len() - 1].item = args.last()\n+                .and_then(|last_arg| last_arg.rewrite(context, shape));\n+            tactic = definitive_tactic(\n+                &*item_vec,\n+                ListTactic::LimitedHorizontalVertical(args_max_width),\n+                Separator::Comma,\n+                one_line_width,\n+            );\n         }\n-        (false, _, _) => {}\n+        _ => (),\n     }\n \n     tactic\n@@ -2358,7 +2357,7 @@ fn rewrite_last_arg_with_overflow<'a, T>(\n     args: &[&T],\n     last_item: &mut ListItem,\n     shape: Shape,\n-) -> (Option<String>, Option<String>)\n+) -> Option<String>\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n@@ -2389,14 +2388,13 @@ where\n     } else {\n         last_arg.rewrite(context, shape)\n     };\n-    let orig_last = last_item.item.clone();\n \n     if let Some(rewrite) = rewrite {\n         let rewrite_first_line = Some(rewrite[..first_line_width(&rewrite)].to_owned());\n         last_item.item = rewrite_first_line;\n-        (orig_last, Some(rewrite))\n+        Some(rewrite)\n     } else {\n-        (orig_last, None)\n+        None\n     }\n }\n "}]}