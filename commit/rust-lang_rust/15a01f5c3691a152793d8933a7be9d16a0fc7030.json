{"sha": "15a01f5c3691a152793d8933a7be9d16a0fc7030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTAxZjVjMzY5MWExNTI3OTNkODkzM2E3YmU5ZDE2YTBmYzcwMzA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T01:58:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T01:58:32Z"}, "message": "Add basic front-end support for expr_put.", "tree": {"sha": "ef18ede583e4aae92360e5e2dc033f6c9ffc865f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef18ede583e4aae92360e5e2dc033f6c9ffc865f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a01f5c3691a152793d8933a7be9d16a0fc7030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a01f5c3691a152793d8933a7be9d16a0fc7030", "html_url": "https://github.com/rust-lang/rust/commit/15a01f5c3691a152793d8933a7be9d16a0fc7030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a01f5c3691a152793d8933a7be9d16a0fc7030/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f33abdeba156523d6db1752bbff75dc4088724", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f33abdeba156523d6db1752bbff75dc4088724", "html_url": "https://github.com/rust-lang/rust/commit/f1f33abdeba156523d6db1752bbff75dc4088724"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "cb2df2a5a3e6520d2c564dd2eec023b16f978f8b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -162,6 +162,7 @@ tag expr_ {\n     expr_ext(vec[@expr], option.t[@expr], ann);\n     expr_fail;\n     expr_ret(option.t[@expr]);\n+    expr_put(option.t[@expr]);\n     expr_be(@expr);\n     expr_log(@expr);\n     expr_check_expr(@expr);"}, {"sha": "a779d0133cd11159240767a63defe6e14aadf424", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -638,6 +638,20 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n             }\n         }\n \n+        case (token.PUT) {\n+            p.bump();\n+            alt (p.peek()) {\n+                case (token.SEMI) {\n+                    ex = ast.expr_put(none[@ast.expr]);\n+                }\n+                case (_) {\n+                    auto e = parse_expr(p);\n+                    hi = e.span;\n+                    ex = ast.expr_put(some[@ast.expr](e));\n+                }\n+            }\n+        }\n+\n         case (token.BE) {\n             p.bump();\n             auto e = parse_expr(p);\n@@ -1420,6 +1434,7 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_path(_,_,_))     { ret true; }\n                 case (ast.expr_fail)            { ret true; }\n                 case (ast.expr_ret(_))          { ret true; }\n+                case (ast.expr_put(_))          { ret true; }\n                 case (ast.expr_be(_))           { ret true; }\n                 case (ast.expr_log(_))          { ret true; }\n                 case (ast.expr_check_expr(_))   { ret true; }"}, {"sha": "4d3c2e2d149664bcc714a4023a22407acc9bfbad", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -154,6 +154,9 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          &option.t[@expr] rv) -> @expr)           fold_expr_ret,\n \n+     (fn(&ENV e, &span sp,\n+         &option.t[@expr] rv) -> @expr)           fold_expr_put,\n+\n      (fn(&ENV e, &span sp,\n          @expr e) -> @expr)                       fold_expr_be,\n \n@@ -640,6 +643,17 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_ret(env_, e.span, oee);\n         }\n \n+        case (ast.expr_put(?oe)) {\n+            auto oee = none[@expr];\n+            alt (oe) {\n+                case (some[@expr](?x)) {\n+                    oee = some(fold_expr(env_, fld, x));\n+                }\n+                case (_) { /* fall through */  }\n+            }\n+            ret fld.fold_expr_put(env_, e.span, oee);\n+        }\n+\n         case (ast.expr_be(?x)) {\n             auto ee = fold_expr(env_, fld, x);\n             ret fld.fold_expr_be(env_, e.span, ee);\n@@ -1130,6 +1144,11 @@ fn identity_fold_expr_ret[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.expr_ret(rv));\n }\n \n+fn identity_fold_expr_put[ENV](&ENV env, &span sp,\n+                               &option.t[@expr] rv) -> @expr {\n+    ret @respan(sp, ast.expr_put(rv));\n+}\n+\n fn identity_fold_expr_be[ENV](&ENV env, &span sp, @expr x) -> @expr {\n     ret @respan(sp, ast.expr_be(x));\n }\n@@ -1396,6 +1415,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_path   = bind identity_fold_expr_path[ENV](_,_,_,_,_),\n          fold_expr_fail   = bind identity_fold_expr_fail[ENV](_,_),\n          fold_expr_ret    = bind identity_fold_expr_ret[ENV](_,_,_),\n+         fold_expr_put    = bind identity_fold_expr_put[ENV](_,_,_),\n          fold_expr_be     = bind identity_fold_expr_be[ENV](_,_,_),\n          fold_expr_log    = bind identity_fold_expr_log[ENV](_,_,_),\n          fold_expr_check_expr"}, {"sha": "c8f21dff51370a59bbaa5d0b46b28279501db746", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -3122,6 +3122,10 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_ret(cx, e);\n         }\n \n+        case (ast.expr_ret(?e)) {\n+            ret trans_put(cx, e);\n+        }\n+\n         case (ast.expr_be(?e)) {\n             ret trans_be(cx, e);\n         }\n@@ -3199,6 +3203,11 @@ fn trans_fail(@block_ctxt cx, common.span sp, str fail_str) -> result {\n     ret trans_upcall(cx, \"upcall_fail\", args);\n }\n \n+fn trans_put(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n+    cx.fcx.ccx.sess.unimpl(\"put expr\");\n+    fail;\n+}\n+\n fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n     auto bcx = cx;\n     auto val = C_nil();"}, {"sha": "f9b2bd9d0000debac5c45aa019122b023761f7d2", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -691,6 +691,7 @@ fn expr_ty(@ast.expr expr) -> @t {\n         case (ast.expr_log(_))                { ret plain_ty(ty_nil); }\n         case (ast.expr_check_expr(_))         { ret plain_ty(ty_nil); }\n         case (ast.expr_ret(_))                { ret plain_ty(ty_nil); }\n+        case (ast.expr_put(_))                { ret plain_ty(ty_nil); }\n         case (ast.expr_be(_))                 { ret plain_ty(ty_nil); }\n     }\n     fail;"}, {"sha": "5109adb2a435d6de66e57964f6ab34dea4f176c3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a01f5c3691a152793d8933a7be9d16a0fc7030/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=15a01f5c3691a152793d8933a7be9d16a0fc7030", "patch": "@@ -1040,6 +1040,7 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         case (ast.expr_fail) { e_1 = e.node; }\n         case (ast.expr_log(_)) { e_1 = e.node; }\n         case (ast.expr_ret(_)) { e_1 = e.node; }\n+        case (ast.expr_put(_)) { e_1 = e.node; }\n         case (ast.expr_be(_)) { e_1 = e.node; }\n         case (ast.expr_check_expr(_)) { e_1 = e.node; }\n     }\n@@ -1317,6 +1318,27 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             }\n         }\n \n+        case (ast.expr_put(?expr_opt)) {\n+            alt (expr_opt) {\n+                case (none[@ast.expr]) {\n+                    auto nil = plain_ty(ty.ty_nil);\n+                    if (!are_compatible(fcx, fcx.ret_ty, nil)) {\n+                        fcx.ccx.sess.err(\"put; in function \"\n+                                         + \"putting non-nil\");\n+                    }\n+\n+                    ret expr;\n+                }\n+\n+                case (some[@ast.expr](?e)) {\n+                    auto expr_0 = check_expr(fcx, e);\n+                    auto expr_1 = demand_expr(fcx, fcx.ret_ty, expr_0);\n+                    ret @fold.respan[ast.expr_](expr.span,\n+                                                ast.expr_put(some(expr_1)));\n+                }\n+            }\n+        }\n+\n         case (ast.expr_be(?e)) {\n             /* FIXME: prove instead of check */\n             check ast.is_call_expr(e);"}]}