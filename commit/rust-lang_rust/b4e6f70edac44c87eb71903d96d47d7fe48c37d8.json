{"sha": "b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZTZmNzBlZGFjNDRjODdlYjcxOTAzZDk2ZDQ3ZDdmZTQ4YzM3ZDg=", "commit": {"author": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2017-02-04T10:51:10Z"}, "committer": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2017-02-04T10:51:10Z"}, "message": "[llvm] Use 32-bits for alignment\n\nLLVM 4.0 changes this. This change is fine to make for LLVM 3.9 as we\nwon't have alignments greater than 2^32-1.", "tree": {"sha": "222e99ffb5bd2e2f3fa2ab9491eea1c6ba66389f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222e99ffb5bd2e2f3fa2ab9491eea1c6ba66389f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "html_url": "https://github.com/rust-lang/rust/commit/b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/comments", "author": null, "committer": null, "parents": [{"sha": "0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "html_url": "https://github.com/rust-lang/rust/commit/0648517faf1e2cf37c8b6770cbd0180a816ed9a0"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "a5eae96f133eaf9bd025d8eae8d3d6478a9bcfa7", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "patch": "@@ -1363,14 +1363,14 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n                                             Name: *const c_char,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Encoding: c_uint)\n                                             -> DIBasicType;\n \n     pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n                                               PointeeTy: DIType,\n                                               SizeInBits: u64,\n-                                              AlignInBits: u64,\n+                                              AlignInBits: u32,\n                                               Name: *const c_char)\n                                               -> DIDerivedType;\n \n@@ -1380,7 +1380,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNumber: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Flags: DIFlags,\n                                              DerivedFrom: DIType,\n                                              Elements: DIArray,\n@@ -1395,7 +1395,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNo: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              OffsetInBits: u64,\n                                              Flags: DIFlags,\n                                              Ty: DIType)\n@@ -1423,7 +1423,7 @@ extern \"C\" {\n                                                  isLocalToUnit: bool,\n                                                  Val: ValueRef,\n                                                  Decl: DIDescriptor,\n-                                                 AlignInBits: u64)\n+                                                 AlignInBits: u32)\n                                                  -> DIGlobalVariable;\n \n     pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n@@ -1436,19 +1436,19 @@ extern \"C\" {\n                                            AlwaysPreserve: bool,\n                                            Flags: DIFlags,\n                                            ArgNo: c_uint,\n-                                           AlignInBits: u64)\n+                                           AlignInBits: u32)\n                                            -> DIVariable;\n \n     pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,\n                                             Size: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Ty: DIType,\n                                             Subscripts: DIArray)\n                                             -> DIType;\n \n     pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,\n                                              Size: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Ty: DIType,\n                                              Subscripts: DIArray)\n                                              -> DIType;\n@@ -1483,7 +1483,7 @@ extern \"C\" {\n                                                   File: DIFile,\n                                                   LineNumber: c_uint,\n                                                   SizeInBits: u64,\n-                                                  AlignInBits: u64,\n+                                                  AlignInBits: u32,\n                                                   Elements: DIArray,\n                                                   ClassType: DIType)\n                                                   -> DIType;\n@@ -1494,7 +1494,7 @@ extern \"C\" {\n                                             File: DIFile,\n                                             LineNumber: c_uint,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Flags: DIFlags,\n                                             Elements: DIArray,\n                                             RunTimeLang: c_uint,"}, {"sha": "69a2e67366c13529ab71fc9b7384a08dfb9a0c3e", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "patch": "@@ -299,7 +299,7 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         llvm::LLVMRustDIBuilderCreateArrayType(\n             DIB(cx),\n             bytes_to_bits(array_size_in_bytes),\n-            bytes_to_bits(element_type_align),\n+            bytes_to_bits(element_type_align) as u32,\n             element_type_metadata,\n             subscripts)\n     };\n@@ -730,7 +730,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             DIB(cx),\n             name.as_ptr(),\n             bytes_to_bits(size),\n-            bytes_to_bits(align),\n+            bytes_to_bits(align) as u32,\n             encoding)\n     };\n \n@@ -750,7 +750,7 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             DIB(cx),\n             pointee_type_metadata,\n             bytes_to_bits(pointer_size),\n-            bytes_to_bits(pointer_align),\n+            bytes_to_bits(pointer_align) as u32,\n             name.as_ptr())\n     };\n     return ptr_metadata;\n@@ -1504,7 +1504,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         file_metadata,\n                         UNKNOWN_LINE_NUMBER,\n                         bytes_to_bits(discriminant_size),\n-                        bytes_to_bits(discriminant_align),\n+                        bytes_to_bits(discriminant_align) as u32,\n                         create_DIArray(DIB(cx), &enumerators_metadata),\n                         discriminant_base_type_metadata)\n                 };\n@@ -1546,7 +1546,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         file_metadata,\n         UNKNOWN_LINE_NUMBER,\n         bytes_to_bits(enum_type_size),\n-        bytes_to_bits(enum_type_align),\n+        bytes_to_bits(enum_type_align) as u32,\n         DIFlags::FlagZero,\n         ptr::null_mut(),\n         0, // RuntimeLang\n@@ -1648,7 +1648,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n                     bytes_to_bits(member_size),\n-                    bytes_to_bits(member_align),\n+                    bytes_to_bits(member_align) as u32,\n                     bytes_to_bits(member_offset),\n                     member_description.flags,\n                     member_description.type_metadata)\n@@ -1691,7 +1691,7 @@ fn create_struct_stub(cx: &CrateContext,\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(struct_size),\n-            bytes_to_bits(struct_align),\n+            bytes_to_bits(struct_align) as u32,\n             DIFlags::FlagZero,\n             ptr::null_mut(),\n             empty_array,\n@@ -1728,7 +1728,7 @@ fn create_union_stub(cx: &CrateContext,\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             bytes_to_bits(union_size),\n-            bytes_to_bits(union_align),\n+            bytes_to_bits(union_align) as u32,\n             DIFlags::FlagZero,\n             empty_array,\n             0, // RuntimeLang\n@@ -1783,7 +1783,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n                                                     is_local_to_unit,\n                                                     global,\n                                                     ptr::null_mut(),\n-                                                    global_align as u64,\n+                                                    global_align as u32,\n         );\n     }\n }"}, {"sha": "6765cf03776392dd1137e64473e59ea24bae83ea", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "patch": "@@ -464,7 +464,7 @@ pub fn declare_local<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n                     DIFlags::FlagZero,\n                     argument_index,\n-                    align as u64,\n+                    align as u32,\n                 )\n             };\n             source_loc::set_debug_location(bcx,"}, {"sha": "56f18ec5a0dbd244e8e8905eeb29676a56a698f4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b4e6f70edac44c87eb71903d96d47d7fe48c37d8/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b4e6f70edac44c87eb71903d96d47d7fe48c37d8", "patch": "@@ -513,7 +513,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n-                                 uint64_t SizeInBits, uint64_t AlignInBits,\n+                                 uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n   return wrap(Builder->createBasicType(Name, SizeInBits,\n #if LLVM_VERSION_LE(3, 9)\n@@ -524,15 +524,15 @@ LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef PointeeTy,\n-    uint64_t SizeInBits, uint64_t AlignInBits, const char *Name) {\n+    uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n                                          SizeInBits, AlignInBits, Name));\n }\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef DerivedFrom, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, LLVMRustMetadataRef VTableHolder,\n     const char *UniqueId) {\n@@ -546,7 +546,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n-    uint64_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef Ty) {\n   return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n                                         unwrapDI<DIFile>(File), LineNo,\n@@ -573,7 +573,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n     const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n-    LLVMRustMetadataRef Decl = nullptr, uint64_t AlignInBits = 0) {\n+    LLVMRustMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   Constant *InitVal = cast<Constant>(unwrap(V));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -608,7 +608,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMRustMetadataRef Scope,\n     const char *Name, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n-    unsigned ArgNo, uint64_t AlignInBits) {\n+    unsigned ArgNo, uint32_t AlignInBits) {\n #if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n     return wrap(Builder->createAutoVariable(\n@@ -633,7 +633,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                 uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                 uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                  LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createArrayType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -642,7 +642,7 @@ LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateVectorType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                  uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                  uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                   LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createVectorType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -683,7 +683,7 @@ LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustMetadataRef Elements,\n     LLVMRustMetadataRef ClassTy) {\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n@@ -694,7 +694,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, const char *UniqueId) {\n   return wrap(Builder->createUnionType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,"}]}