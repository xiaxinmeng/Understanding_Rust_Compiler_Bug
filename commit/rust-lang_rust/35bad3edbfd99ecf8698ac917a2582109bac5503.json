{"sha": "35bad3edbfd99ecf8698ac917a2582109bac5503", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YmFkM2VkYmZkOTllY2Y4Njk4YWM5MTdhMjU4MjEwOWJhYzU1MDM=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-23T22:38:38Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-25T21:48:44Z"}, "message": "Address review comment", "tree": {"sha": "1678e52a7fad44e89ce2ff462f1fd8ea1e47a4f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1678e52a7fad44e89ce2ff462f1fd8ea1e47a4f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35bad3edbfd99ecf8698ac917a2582109bac5503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35bad3edbfd99ecf8698ac917a2582109bac5503", "html_url": "https://github.com/rust-lang/rust/commit/35bad3edbfd99ecf8698ac917a2582109bac5503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35bad3edbfd99ecf8698ac917a2582109bac5503/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601c284e1e551b618cd2dbb2cc8b9a602d20e887", "url": "https://api.github.com/repos/rust-lang/rust/commits/601c284e1e551b618cd2dbb2cc8b9a602d20e887", "html_url": "https://github.com/rust-lang/rust/commit/601c284e1e551b618cd2dbb2cc8b9a602d20e887"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "9945d4f4282597901b1f84cf2c09d9ef0c2982a3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/namespace.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -8,7 +8,6 @@ use crate::llvm;\n use crate::llvm::debuginfo::DIScope;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathData;\n-use rustc_span::symbol::Symbol;\n \n pub fn mangled_name_of_instance<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n@@ -28,11 +27,18 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n         .parent\n         .map(|parent| item_namespace(cx, DefId { krate: def_id.krate, index: parent }));\n \n+    let crate_name_as_str;\n+    let name_to_string;\n     let namespace_name = match def_key.disambiguated_data.data {\n-        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate),\n-        data => Symbol::intern(&data.to_string()),\n+        DefPathData::CrateRoot => {\n+            crate_name_as_str = cx.tcx.crate_name(def_id.krate).as_str();\n+            &*crate_name_as_str\n+        }\n+        data => {\n+            name_to_string = data.to_string();\n+            &*name_to_string\n+        }\n     };\n-    let namespace_name = namespace_name.as_str();\n \n     let scope = unsafe {\n         llvm::LLVMRustDIBuilderCreateNameSpace("}, {"sha": "74c91f8a859be9f799faa43841cd46fca0e6cd51", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -162,10 +162,10 @@ impl DisambiguatedDefPathData {\n                 if Ident::with_dummy_span(name).is_raw_guess() {\n                     writer.write_str(\"r#\")?;\n                 }\n-                if self.disambiguator == 0 || !verbose {\n-                    writer.write_str(&name.as_str())\n-                } else {\n+                if verbose && self.disambiguator != 0 {\n                     write!(writer, \"{}#{}\", name, self.disambiguator)\n+                } else {\n+                    writer.write_str(&name.as_str())\n                 }\n             }\n             DefPathDataName::Anon { namespace } => {\n@@ -224,7 +224,7 @@ impl DefPath {\n     /// Returns a string representation of the `DefPath` without\n     /// the crate-prefix. This method is useful if you don't have\n     /// a `TyCtxt` available.\n-    pub fn to_string_no_crate(&self) -> String {\n+    pub fn to_string_no_crate_verbose(&self) -> String {\n         let mut s = String::with_capacity(self.data.len() * 16);\n \n         for component in &self.data {\n@@ -466,6 +466,7 @@ impl fmt::Display for DefPathData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.name() {\n             DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n+            // FIXME(#70334): this will generate legacy {{closure}}, {{impl}}, etc\n             DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n         }\n     }"}, {"sha": "d6869ab88751a52fbef06b1ca1cbaf68d2a5de17", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         if cfg!(debug_assertions) {\n             if hir_id.owner != self.current_dep_node_owner {\n                 let node_str = match self.definitions.opt_hir_id_to_local_def_id(hir_id) {\n-                    Some(def_id) => self.definitions.def_path(def_id).to_string_no_crate(),\n+                    Some(def_id) => self.definitions.def_path(def_id).to_string_no_crate_verbose(),\n                     None => format!(\"{:?}\", node),\n                 };\n \n@@ -254,9 +254,11 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n-                    self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n+                    self.definitions\n+                        .def_path(self.current_dep_node_owner)\n+                        .to_string_no_crate_verbose(),\n                     self.current_dep_node_owner,\n-                    self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n+                    self.definitions.def_path(hir_id.owner).to_string_no_crate_verbose(),\n                     hir_id.owner,\n                 )\n             }"}, {"sha": "22c3fd37be14d0d07620e8d19754b68a70e56258", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -1272,7 +1272,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             // Don't print the whole crate disambiguator. That's just\n             // annoying in debug output.\n             &(crate_disambiguator.to_fingerprint().to_hex())[..4],\n-            self.def_path(def_id).to_string_no_crate()\n+            self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }\n "}, {"sha": "4e8db3194bdff623109ae4e0bfa3b7902d7229cb", "filename": "compiler/rustc_middle/src/ty/query/profiling_support.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -7,7 +7,6 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX,\n use rustc_hir::definitions::DefPathData;\n use rustc_query_system::query::QueryCache;\n use rustc_query_system::query::QueryState;\n-use rustc_span::symbol::Symbol;\n use std::fmt::Debug;\n use std::io::Write;\n \n@@ -56,18 +55,22 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n         };\n \n         let dis_buffer = &mut [0u8; 16];\n+        let crate_name;\n+        let other_name;\n         let name;\n         let dis;\n         let end_index;\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                name = self.tcx.original_crate_name(def_id.krate);\n+                crate_name = self.tcx.original_crate_name(def_id.krate).as_str();\n+                name = &*crate_name;\n                 dis = \"\";\n                 end_index = 3;\n             }\n             other => {\n-                name = Symbol::intern(&other.to_string());\n+                other_name = other.to_string();\n+                name = other_name.as_str();\n                 if def_key.disambiguated_data.disambiguator == 0 {\n                     dis = \"\";\n                     end_index = 3;\n@@ -81,7 +84,6 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n             }\n         }\n \n-        let name = &*name.as_str();\n         let components = [\n             StringComponent::Ref(parent_string_id),\n             StringComponent::Value(\"::\"),"}, {"sha": "24695f5cdfa0496f6dbbce7c8277eaeec2138335", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bad3edbfd99ecf8698ac917a2582109bac5503/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=35bad3edbfd99ecf8698ac917a2582109bac5503", "patch": "@@ -112,14 +112,14 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                 missing_items.push(format!(\n                     \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map.def_path(owner).to_string_no_crate()\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose()\n                 ));\n             }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n                 Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n-                    self.hir_map.def_path(owner).to_string_no_crate(),\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose(),\n                     max,\n                     missing_items,\n                     self.hir_ids_seen\n@@ -148,8 +148,8 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n                 format!(\n                     \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n                     self.hir_map.node_to_string(hir_id),\n-                    self.hir_map.def_path(hir_id.owner).to_string_no_crate(),\n-                    self.hir_map.def_path(owner).to_string_no_crate()\n+                    self.hir_map.def_path(hir_id.owner).to_string_no_crate_verbose(),\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose()\n                 )\n             });\n         }"}]}