{"sha": "62bd19fff20ced94d1d94cb644819270a2d4bf30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmQxOWZmZjIwY2VkOTRkMWQ5NGNiNjQ0ODE5MjcwYTJkNGJmMzA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:49Z"}, "message": "rollup merge of #24929: tamird/unstub-some-tests\n\nr? @alexcrichton", "tree": {"sha": "a5dc8740c3f9e3f7c5eaff8215b01a5c238423a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5dc8740c3f9e3f7c5eaff8215b01a5c238423a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bd19fff20ced94d1d94cb644819270a2d4bf30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bd19fff20ced94d1d94cb644819270a2d4bf30", "html_url": "https://github.com/rust-lang/rust/commit/62bd19fff20ced94d1d94cb644819270a2d4bf30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bd19fff20ced94d1d94cb644819270a2d4bf30/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b1312f53f54ce7686ea0c4dc3b91894336e523", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b1312f53f54ce7686ea0c4dc3b91894336e523", "html_url": "https://github.com/rust-lang/rust/commit/b9b1312f53f54ce7686ea0c4dc3b91894336e523"}, {"sha": "f7947bc9364459b281e6b5c601ae2bcb148839f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7947bc9364459b281e6b5c601ae2bcb148839f2", "html_url": "https://github.com/rust-lang/rust/commit/f7947bc9364459b281e6b5c601ae2bcb148839f2"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "66945ad251f1ed3dc9a68912aa699a0e2e44dcbe", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/62bd19fff20ced94d1d94cb644819270a2d4bf30/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bd19fff20ced94d1d94cb644819270a2d4bf30/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=62bd19fff20ced94d1d94cb644819270a2d4bf30", "patch": "@@ -219,7 +219,6 @@ fn test_ord() {\n     assert!(big > None);\n }\n \n-/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Option<Vec<isize>> = (0..0).map(|_| Some(0)).collect();\n@@ -241,28 +240,26 @@ fn test_collect() {\n \n     assert!(v == None);\n }\n-*/\n+\n \n #[test]\n fn test_cloned() {\n-    let val1 = 1u32;\n-    let mut val2 = 2u32;\n-    let val1_ref = &val1;\n+    let val = 1u32;\n+    let val_ref = &val;\n     let opt_none: Option<&'static u32> = None;\n-    let opt_ref = Some(&val1);\n-    let opt_ref_ref = Some(&val1_ref);\n-    let opt_mut_ref = Some(&mut val2);\n+    let opt_ref = Some(&val);\n+    let opt_ref_ref = Some(&val_ref);\n \n     // None works\n     assert_eq!(opt_none.clone(), None);\n     assert_eq!(opt_none.cloned(), None);\n \n     // Immutable ref works\n-    assert_eq!(opt_ref.clone(), Some(&val1));\n+    assert_eq!(opt_ref.clone(), Some(&val));\n     assert_eq!(opt_ref.cloned(), Some(1u32));\n \n     // Double Immutable ref works\n-    assert_eq!(opt_ref_ref.clone(), Some(&val1_ref));\n-    assert_eq!(opt_ref_ref.clone().cloned(), Some(&val1));\n+    assert_eq!(opt_ref_ref.clone(), Some(&val_ref));\n+    assert_eq!(opt_ref_ref.clone().cloned(), Some(&val));\n     assert_eq!(opt_ref_ref.cloned().cloned(), Some(1u32));\n }"}, {"sha": "3fdb102875332f7aa4b26db6993abfb9ab5c6151", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62bd19fff20ced94d1d94cb644819270a2d4bf30/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bd19fff20ced94d1d94cb644819270a2d4bf30/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=62bd19fff20ced94d1d94cb644819270a2d4bf30", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn op1() -> Result<isize, &'static str> { Ok(666) }\n-pub fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n+fn op1() -> Result<isize, &'static str> { Ok(666) }\n+fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n \n #[test]\n-pub fn test_and() {\n+fn test_and() {\n     assert_eq!(op1().and(Ok(667)).unwrap(), 667);\n     assert_eq!(op1().and(Err::<i32, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n@@ -23,7 +23,7 @@ pub fn test_and() {\n }\n \n #[test]\n-pub fn test_and_then() {\n+fn test_and_then() {\n     assert_eq!(op1().and_then(|i| Ok::<isize, &'static str>(i + 1)).unwrap(), 667);\n     assert_eq!(op1().and_then(|_| Err::<isize, &'static str>(\"bad\")).unwrap_err(),\n                \"bad\");\n@@ -35,7 +35,7 @@ pub fn test_and_then() {\n }\n \n #[test]\n-pub fn test_or() {\n+fn test_or() {\n     assert_eq!(op1().or(Ok::<_, &'static str>(667)).unwrap(), 666);\n     assert_eq!(op1().or(Err(\"bad\")).unwrap(), 666);\n \n@@ -44,7 +44,7 @@ pub fn test_or() {\n }\n \n #[test]\n-pub fn test_or_else() {\n+fn test_or_else() {\n     assert_eq!(op1().or_else(|_| Ok::<isize, &'static str>(667)).unwrap(), 666);\n     assert_eq!(op1().or_else(|e| Err::<isize, &'static str>(e)).unwrap(), 666);\n \n@@ -54,18 +54,17 @@ pub fn test_or_else() {\n }\n \n #[test]\n-pub fn test_impl_map() {\n+fn test_impl_map() {\n     assert!(Ok::<isize, isize>(1).map(|x| x + 1) == Ok(2));\n     assert!(Err::<isize, isize>(1).map(|x| x + 1) == Err(1));\n }\n \n #[test]\n-pub fn test_impl_map_err() {\n+fn test_impl_map_err() {\n     assert!(Ok::<isize, isize>(1).map_err(|x| x + 1) == Ok(1));\n     assert!(Err::<isize, isize>(1).map_err(|x| x + 1) == Err(2));\n }\n \n-/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Result<Vec<isize>, ()> = (0..0).map(|_| Ok::<isize, ()>(0)).collect();\n@@ -86,10 +85,9 @@ fn test_collect() {\n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));\n }\n-*/\n \n #[test]\n-pub fn test_fmt_default() {\n+fn test_fmt_default() {\n     let ok: Result<isize, &'static str> = Ok(100);\n     let err: Result<isize, &'static str> = Err(\"Err\");\n \n@@ -100,7 +98,7 @@ pub fn test_fmt_default() {\n }\n \n #[test]\n-pub fn test_unwrap_or() {\n+fn test_unwrap_or() {\n     let ok: Result<isize, &'static str> = Ok(100);\n     let ok_err: Result<isize, &'static str> = Err(\"Err\");\n \n@@ -109,7 +107,7 @@ pub fn test_unwrap_or() {\n }\n \n #[test]\n-pub fn test_unwrap_or_else() {\n+fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n             50"}]}