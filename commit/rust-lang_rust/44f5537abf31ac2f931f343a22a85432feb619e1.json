{"sha": "44f5537abf31ac2f931f343a22a85432feb619e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjU1MzdhYmYzMWFjMmY5MzFmMzQzYTIyYTg1NDMyZmViNjE5ZTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-17T16:28:11Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T14:40:53Z"}, "message": "libsyntax: add explicit modes where required to copy strs/vecs", "tree": {"sha": "488ce3c3952cb98b37e0808b01cc7d4067969286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/488ce3c3952cb98b37e0808b01cc7d4067969286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f5537abf31ac2f931f343a22a85432feb619e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f5537abf31ac2f931f343a22a85432feb619e1", "html_url": "https://github.com/rust-lang/rust/commit/44f5537abf31ac2f931f343a22a85432feb619e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f5537abf31ac2f931f343a22a85432feb619e1/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9e110eab9c30428e99995a0adbec82857e3a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9e110eab9c30428e99995a0adbec82857e3a1a", "html_url": "https://github.com/rust-lang/rust/commit/5b9e110eab9c30428e99995a0adbec82857e3a1a"}], "stats": {"total": 182, "additions": 106, "deletions": 76}, "files": [{"sha": "01b890fdeeb9b4cd9bcf39abf96990c604c382c0", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -209,7 +209,7 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n \n pub fn contains_name(metas: &[@ast::meta_item], name: &str) -> bool {\n     let matches = find_meta_items_by_name(metas, name);\n-    return vec::len(matches) > 0u;\n+    matches.len() > 0u\n }\n \n pub fn attrs_contains_name(attrs: &[ast::attribute], name: &str) -> bool {\n@@ -227,14 +227,14 @@ pub fn first_attr_value_str_by_name(attrs: ~[ast::attribute], name: &str)\n     }\n }\n \n-fn last_meta_item_by_name(items: ~[@ast::meta_item], name: &str)\n+fn last_meta_item_by_name(items: &[@ast::meta_item], name: &str)\n     -> Option<@ast::meta_item> {\n \n     let items = attr::find_meta_items_by_name(items, name);\n     vec::last_opt(items)\n }\n \n-pub fn last_meta_item_value_str_by_name(items: ~[@ast::meta_item], name: &str)\n+pub fn last_meta_item_value_str_by_name(items: &[@ast::meta_item], name: &str)\n                                      -> Option<@~str> {\n \n     match last_meta_item_by_name(items, name) {"}, {"sha": "27e76a8ce7a3b64462b24c25925d298c9f53d826", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -120,7 +120,7 @@ pub fn expand_auto_encode(\n     fn filter_attrs(item: @ast::item) -> @ast::item {\n         @ast::item {\n             attrs: item.attrs.filtered(|a| !is_auto_encode(a)),\n-            .. *item\n+            .. copy *item\n         }\n     }\n \n@@ -175,7 +175,7 @@ pub fn expand_auto_decode(\n     fn filter_attrs(item: @ast::item) -> @ast::item {\n         @ast::item {\n             attrs: item.attrs.filtered(|a| !is_auto_decode(a)),\n-            .. *item\n+            .. copy *item\n         }\n     }\n \n@@ -237,7 +237,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn expr(span: span, node: ast::expr_) -> @ast::expr {\n+    fn expr(span: span, +node: ast::expr_) -> @ast::expr {\n         @ast::expr {\n             id: self.next_id(),\n             callee_id: self.next_id(),\n@@ -246,7 +246,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path(span: span, strs: ~[ast::ident]) -> @ast::path {\n+    fn path(span: span, +strs: ~[ast::ident]) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: false,\n@@ -256,7 +256,7 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path_global(span: span, strs: ~[ast::ident]) -> @ast::path {\n+    fn path_global(span: span, +strs: ~[ast::ident]) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: true,\n@@ -266,8 +266,11 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path_tps(span: span, strs: ~[ast::ident],\n-                tps: ~[@ast::Ty]) -> @ast::path {\n+    fn path_tps(\n+        span: span,\n+        +strs: ~[ast::ident],\n+        +tps: ~[@ast::Ty]\n+    ) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: false,\n@@ -277,8 +280,11 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn path_tps_global(span: span, strs: ~[ast::ident],\n-                       tps: ~[@ast::Ty]) -> @ast::path {\n+    fn path_tps_global(\n+        span: span,\n+        +strs: ~[ast::ident],\n+        +tps: ~[@ast::Ty]\n+    ) -> @ast::path {\n         @ast::path {\n             span: span,\n             global: true,\n@@ -288,8 +294,11 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn ty_path(span: span, strs: ~[ast::ident],\n-               tps: ~[@ast::Ty]) -> @ast::Ty {\n+    fn ty_path(\n+        span: span,\n+        +strs: ~[ast::ident],\n+        +tps: ~[@ast::Ty]\n+    ) -> @ast::Ty {\n         @ast::Ty {\n             id: self.next_id(),\n             node: ast::ty_path(\n@@ -335,13 +344,13 @@ priv impl ext_ctxt {\n                                 span: span}))\n     }\n \n-    fn lambda(blk: ast::blk) -> @ast::expr {\n+    fn lambda(+blk: ast::blk) -> @ast::expr {\n         let ext_cx = self;\n         let blk_e = self.expr(blk.span, ast::expr_block(blk));\n         quote_expr!( || $blk_e )\n     }\n \n-    fn blk(span: span, stmts: ~[@ast::stmt]) -> ast::blk {\n+    fn blk(span: span, +stmts: ~[@ast::stmt]) -> ast::blk {\n         codemap::spanned {\n             node: ast::blk_ {\n                 view_items: ~[],\n@@ -367,15 +376,15 @@ priv impl ext_ctxt {\n         }\n     }\n \n-    fn expr_path(span: span, strs: ~[ast::ident]) -> @ast::expr {\n+    fn expr_path(span: span, +strs: ~[ast::ident]) -> @ast::expr {\n         self.expr(span, ast::expr_path(self.path(span, strs)))\n     }\n \n-    fn expr_path_global(span: span, strs: ~[ast::ident]) -> @ast::expr {\n+    fn expr_path_global(span: span, +strs: ~[ast::ident]) -> @ast::expr {\n         self.expr(span, ast::expr_path(self.path_global(span, strs)))\n     }\n \n-    fn expr_var(span: span, var: ~str) -> @ast::expr {\n+    fn expr_var(span: span, +var: ~str) -> @ast::expr {\n         self.expr_path(span, ~[self.ident_of(var)])\n     }\n \n@@ -390,7 +399,7 @@ priv impl ext_ctxt {\n     fn expr_call(\n         span: span,\n         expr: @ast::expr,\n-        args: ~[@ast::expr]\n+        +args: ~[@ast::expr]\n     ) -> @ast::expr {\n         self.expr(span, ast::expr_call(expr, args, ast::NoSugar))\n     }\n@@ -399,7 +408,7 @@ priv impl ext_ctxt {\n         self.lambda(self.expr_blk(expr))\n     }\n \n-    fn lambda_stmts(span: span, stmts: ~[@ast::stmt]) -> @ast::expr {\n+    fn lambda_stmts(span: span, +stmts: ~[@ast::stmt]) -> @ast::expr {\n         self.lambda(self.blk(span, stmts))\n     }\n }\n@@ -545,7 +554,7 @@ fn mk_deser_impl(\n fn mk_ser_method(\n     cx: ext_ctxt,\n     span: span,\n-    ser_body: ast::blk\n+    +ser_body: ast::blk\n ) -> @ast::method {\n     let ty_s = @ast::Ty {\n         id: cx.next_id(),\n@@ -609,7 +618,7 @@ fn mk_deser_method(\n     cx: ext_ctxt,\n     span: span,\n     ty: @ast::Ty,\n-    deser_body: ast::blk\n+    +deser_body: ast::blk\n ) -> @ast::method {\n     let ty_d = @ast::Ty {\n         id: cx.next_id(),\n@@ -947,7 +956,7 @@ fn mk_enum_ser_body(\n     cx: ext_ctxt,\n     span: span,\n     name: ast::ident,\n-    variants: ~[ast::variant]\n+    +variants: ~[ast::variant]\n ) -> @ast::expr {\n     let arms = do variants.mapi |v_idx, variant| {\n         match variant.node.kind {"}, {"sha": "ed167a8e2a754c0e637dc75d7a49821933462af3", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -33,15 +33,15 @@ mod syntax {\n     pub use parse;\n }\n \n-pub fn path(ids: ~[ident], span: span) -> @ast::path {\n+pub fn path(+ids: ~[ident], span: span) -> @ast::path {\n     @ast::path { span: span,\n                  global: false,\n                  idents: ids,\n                  rp: None,\n                  types: ~[] }\n }\n \n-pub fn path_global(ids: ~[ident], span: span) -> @ast::path {\n+pub fn path_global(+ids: ~[ident], span: span) -> @ast::path {\n     @ast::path { span: span,\n                  global: true,\n                  idents: ids,\n@@ -50,19 +50,23 @@ pub fn path_global(ids: ~[ident], span: span) -> @ast::path {\n }\n \n pub trait append_types {\n-    fn add_ty(ty: @ast::Ty) -> @ast::path;\n-    fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path;\n+    fn add_ty(&self, ty: @ast::Ty) -> @ast::path;\n+    fn add_tys(&self, +tys: ~[@ast::Ty]) -> @ast::path;\n }\n \n pub impl append_types for @ast::path {\n-    fn add_ty(ty: @ast::Ty) -> @ast::path {\n-        @ast::path { types: vec::append_one(self.types, ty),\n-                     .. *self}\n+    fn add_ty(&self, ty: @ast::Ty) -> @ast::path {\n+        @ast::path {\n+            types: vec::append_one(copy self.types, ty),\n+            .. **self\n+        }\n     }\n \n-    fn add_tys(+tys: ~[@ast::Ty]) -> @ast::path {\n-        @ast::path { types: vec::append(self.types, tys),\n-                     .. *self}\n+    fn add_tys(&self, +tys: ~[@ast::Ty]) -> @ast::path {\n+        @ast::path {\n+            types: vec::append(copy self.types, tys),\n+            .. **self\n+        }\n     }\n }\n \n@@ -73,24 +77,28 @@ pub trait ext_ctxt_ast_builder {\n     fn expr_block(&self, e: @ast::expr) -> ast::blk;\n     fn fn_decl(&self, +inputs: ~[ast::arg], output: @ast::Ty) -> ast::fn_decl;\n     fn item(&self, name: ident, span: span, +node: ast::item_) -> @ast::item;\n-    fn item_fn_poly(&self, name: ident,\n-                    +inputs: ~[ast::arg],\n-                    output: @ast::Ty,\n-                    +ty_params: ~[ast::ty_param],\n-                    +body: ast::blk) -> @ast::item;\n-    fn item_fn(&self, name: ident,\n-               +inputs: ~[ast::arg],\n-               output: @ast::Ty,\n-               +body: ast::blk) -> @ast::item;\n-    fn item_enum_poly(&self, name: ident,\n-                      span: span,\n-                      +enum_definition: ast::enum_def,\n-                      +ty_params: ~[ast::ty_param]) -> @ast::item;\n+    fn item_fn_poly(&self,\n+        name: ident,\n+        +inputs: ~[ast::arg],\n+        output: @ast::Ty,\n+        +ty_params: ~[ast::ty_param],\n+        +body: ast::blk) -> @ast::item;\n+    fn item_fn(&self,\n+        name: ident,\n+        +inputs: ~[ast::arg],\n+        output: @ast::Ty,\n+        +body: ast::blk) -> @ast::item;\n+    fn item_enum_poly(&self,\n+        name: ident,\n+        span: span,\n+        +enum_definition: ast::enum_def,\n+        +ty_params: ~[ast::ty_param]) -> @ast::item;\n     fn item_enum(&self, name: ident, span: span,\n                  +enum_definition: ast::enum_def) -> @ast::item;\n-    fn item_struct_poly(&self, name: ident, span: span,\n-                        struct_def: ast::struct_def,\n-                        ty_params: ~[ast::ty_param]) -> @ast::item;\n+    fn item_struct_poly(&self,\n+        name: ident, span: span,\n+        struct_def: ast::struct_def,\n+        +ty_params: ~[ast::ty_param]) -> @ast::item;\n     fn item_struct(&self, name: ident, span: span,\n                    struct_def: ast::struct_def) -> @ast::item;\n     fn struct_expr(&self, path: @ast::path,\n@@ -105,14 +113,14 @@ pub trait ext_ctxt_ast_builder {\n                     ty: @ast::Ty,\n                     +params: ~[ast::ty_param]) -> @ast::item;\n     fn item_ty(&self, name: ident, span: span, ty: @ast::Ty) -> @ast::item;\n-    fn ty_vars(&self, +ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n-    fn ty_vars_global(&self, +ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n+    fn ty_vars(&self, ty_params: &[ast::ty_param]) -> ~[@ast::Ty];\n+    fn ty_vars_global(&self, ty_params: &[ast::ty_param]) -> ~[@ast::Ty];\n     fn ty_field_imm(&self, name: ident, ty: @ast::Ty) -> ast::ty_field;\n     fn field_imm(&self, name: ident, e: @ast::expr) -> ast::field;\n     fn block(&self, +stmts: ~[@ast::stmt], e: @ast::expr) -> ast::blk;\n     fn stmt_let(&self, ident: ident, e: @ast::expr) -> @ast::stmt;\n     fn stmt_expr(&self, e: @ast::expr) -> @ast::stmt;\n-    fn block_expr(&self, b: ast::blk) -> @ast::expr;\n+    fn block_expr(&self, +b: ast::blk) -> @ast::expr;\n     fn ty_option(&self, ty: @ast::Ty) -> @ast::Ty;\n     fn ty_infer(&self) -> @ast::Ty;\n     fn ty_nil_ast_builder(&self) -> @ast::Ty;\n@@ -128,7 +136,7 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         ], dummy_sp()).add_ty(ty))\n     }\n \n-    fn block_expr(&self, b: ast::blk) -> @ast::expr {\n+    fn block_expr(&self, +b: ast::blk) -> @ast::expr {\n         @expr {\n             id: self.next_id(),\n             callee_id: self.next_id(),\n@@ -282,7 +290,7 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n \n     fn item_struct_poly(&self, name: ident, span: span,\n                         struct_def: ast::struct_def,\n-                        ty_params: ~[ast::ty_param]) -> @ast::item {\n+                        +ty_params: ~[ast::ty_param]) -> @ast::item {\n         self.item(name, span, ast::item_struct(@struct_def, ty_params))\n     }\n \n@@ -386,12 +394,12 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         self.item_ty_poly(name, span, ty, ~[])\n     }\n \n-    fn ty_vars(&self, +ty_params: ~[ast::ty_param]) -> ~[@ast::Ty] {\n+    fn ty_vars(&self, +ty_params: &[ast::ty_param]) -> ~[@ast::Ty] {\n         ty_params.map(|p| self.ty_path_ast_builder(\n             path(~[p.ident], dummy_sp())))\n     }\n \n-    fn ty_vars_global(&self, +ty_params: ~[ast::ty_param]) -> ~[@ast::Ty] {\n+    fn ty_vars_global(&self, ty_params: &[ast::ty_param]) -> ~[@ast::Ty] {\n         ty_params.map(|p| self.ty_path_ast_builder(\n             path(~[p.ident], dummy_sp())))\n     }"}, {"sha": "16de2a20668cf3f45ef2715f059d579ea6894771", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -58,8 +58,7 @@ pub impl gen_send for message {\n             let next = this.proto.get_state(next_state.state);\n             assert next_state.tys.len() == next.ty_params.len();\n             let arg_names = tys.mapi(|i, _ty| cx.ident_of(~\"x_\"+i.to_str()));\n-\n-            let args_ast = (arg_names, *tys).map(|n, t| cx.arg(*n, *t));\n+            let args_ast = vec::map2(arg_names, *tys, |n, t| cx.arg(*n, *t));\n \n             let pipe_ty = cx.ty_path_ast_builder(\n                 path(~[this.data_name()], span)\n@@ -137,7 +136,7 @@ pub impl gen_send for message {\n                 debug!(\"pipec: no next state\");\n                 let arg_names = tys.mapi(|i, _ty| (~\"x_\" + i.to_str()));\n \n-                let args_ast = do (arg_names, *tys).map |n, t| {\n+                let args_ast = do vec::map2(arg_names, *tys) |n, t| {\n                     cx.arg(cx.ident_of(*n), *t)\n                 };\n "}, {"sha": "831b1b79ff86c4f81f8f9bfad1f39bc9726b35d6", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -120,11 +120,11 @@ pub impl state_ {\n \n pub type protocol = @mut protocol_;\n \n-pub fn protocol(name: ~str, +span: span) -> protocol {\n+pub fn protocol(+name: ~str, +span: span) -> protocol {\n     @mut protocol_(name, span)\n }\n \n-pub fn protocol_(name: ~str, span: span) -> protocol_ {\n+pub fn protocol_(+name: ~str, span: span) -> protocol_ {\n     protocol_ {\n         name: name,\n         span: span,\n@@ -174,7 +174,7 @@ pub impl protocol_ {\n }\n \n pub impl protocol {\n-    fn add_state_poly(&self, name: ~str, ident: ast::ident, dir: direction,\n+    fn add_state_poly(&self, +name: ~str, ident: ast::ident, dir: direction,\n                       +ty_params: ~[ast::ty_param]) -> state {\n         let messages = @mut ~[];\n "}, {"sha": "f1b1602d0a6455a2c658b312f4f76bf53550c1f9", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f5537abf31ac2f931f343a22a85432feb619e1/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=44f5537abf31ac2f931f343a22a85432feb619e1", "patch": "@@ -23,19 +23,33 @@ use core::str;\n use core::vec;\n \n fn topmost_expn_info(expn_info: @codemap::ExpnInfo) -> @codemap::ExpnInfo {\n-    let ExpandedFrom(CallInfo { call_site, _ }) = *expn_info;\n-    match call_site.expn_info {\n-        Some(next_expn_info) => {\n-            let ExpandedFrom(CallInfo {\n-                callee: NameAndSpan {name, _},\n-                _\n-            }) = *next_expn_info;\n-            // Don't recurse into file using \"include!\"\n-            if name == ~\"include\" { return expn_info; }\n-\n-            topmost_expn_info(next_expn_info)\n-        },\n-        None => expn_info\n+    // FIXME(#3874): this would be better written as:\n+    // let @ExpandedFrom(CallInfo {\n+    //     call_site: ref call_site,\n+    //     _\n+    //  }) = expn_info;\n+    match *expn_info {\n+        ExpandedFrom(CallInfo { call_site: ref call_site, _}) => {\n+            match call_site.expn_info {\n+                Some(next_expn_info) => {\n+                    // Don't recurse into file using \"include!\"\n+                    match *next_expn_info {\n+                        ExpandedFrom(\n+                            CallInfo { callee: NameAndSpan {\n+                                name: ref name,\n+                                _\n+                            },\n+                            _\n+                        }) => {\n+                            if *name == ~\"include\" { return expn_info; }\n+                        }\n+                    }\n+\n+                    topmost_expn_info(next_expn_info)\n+                },\n+                None => expn_info\n+            }\n+        }\n     }\n }\n "}]}