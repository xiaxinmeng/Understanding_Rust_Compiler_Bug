{"sha": "5c630a61c658cb7d861a60da6951ee06619337b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjMwYTYxYzY1OGNiN2Q4NjFhNjBkYTY5NTFlZTA2NjE5MzM3YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T10:46:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-25T10:46:06Z"}, "message": "Auto merge of #27981 - dotdash:gepi, r=brson", "tree": {"sha": "998cb6cd7264a9e20dc0dce29b1b2fc2d0e60926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998cb6cd7264a9e20dc0dce29b1b2fc2d0e60926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c630a61c658cb7d861a60da6951ee06619337b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c630a61c658cb7d861a60da6951ee06619337b2", "html_url": "https://github.com/rust-lang/rust/commit/5c630a61c658cb7d861a60da6951ee06619337b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c630a61c658cb7d861a60da6951ee06619337b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ef44a9e6110d7e59aca590ce7cf16d6d601d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ef44a9e6110d7e59aca590ce7cf16d6d601d54", "html_url": "https://github.com/rust-lang/rust/commit/28ef44a9e6110d7e59aca590ce7cf16d6d601d54"}, {"sha": "5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9c250fe41c4b3639a1a21654a19b8264ba39cc", "html_url": "https://github.com/rust-lang/rust/commit/5d9c250fe41c4b3639a1a21654a19b8264ba39cc"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "def9fdbb5219ad532289744f8dbe7723246f1022", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -188,7 +188,6 @@ pub use self::TransBindingMode::*;\n use self::Opt::*;\n use self::FailureHandler::*;\n \n-use back::abi;\n use llvm::{ValueRef, BasicBlockRef};\n use middle::check_match::StaticInliner;\n use middle::check_match;\n@@ -731,9 +730,8 @@ fn bind_subslice_pat(bcx: Block,\n     let slice_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic),\n                                          bcx.tcx().mk_slice(unit_ty));\n     let scratch = rvalue_scratch_datum(bcx, slice_ty, \"\");\n-    Store(bcx, slice_begin,\n-          GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n-    Store(bcx, slice_len, GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n+    Store(bcx, slice_begin, expr::get_dataptr(bcx, scratch.val));\n+    Store(bcx, slice_len, expr::get_meta(bcx, scratch.val));\n     scratch.val\n }\n \n@@ -887,9 +885,9 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                            &format!(\"comparison of `{}`\", rhs_t),\n                            StrEqFnLangItem);\n         let lhs_data = Load(cx, expr::get_dataptr(cx, lhs));\n-        let lhs_len = Load(cx, expr::get_len(cx, lhs));\n+        let lhs_len = Load(cx, expr::get_meta(cx, lhs));\n         let rhs_data = Load(cx, expr::get_dataptr(cx, rhs));\n-        let rhs_len = Load(cx, expr::get_len(cx, rhs));\n+        let rhs_len = Load(cx, expr::get_meta(cx, rhs));\n         callee::trans_lang_call(cx, did, &[lhs_data, lhs_len, rhs_data, rhs_len], None, debug_loc)\n     }\n \n@@ -910,15 +908,15 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                     let ty_str_slice = cx.tcx().mk_static_str();\n \n                     let rhs_str = alloc_ty(cx, ty_str_slice, \"rhs_str\");\n-                    Store(cx, GEPi(cx, rhs, &[0, 0]), expr::get_dataptr(cx, rhs_str));\n-                    Store(cx, C_uint(cx.ccx(), pat_len), expr::get_len(cx, rhs_str));\n+                    Store(cx, expr::get_dataptr(cx, rhs), expr::get_dataptr(cx, rhs_str));\n+                    Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, rhs_str));\n \n                     let lhs_str;\n                     if val_ty(lhs) == val_ty(rhs) {\n                         // Both the discriminant and the pattern are thin pointers\n                         lhs_str = alloc_ty(cx, ty_str_slice, \"lhs_str\");\n-                        Store(cx, GEPi(cx, lhs, &[0, 0]), expr::get_dataptr(cx, lhs_str));\n-                        Store(cx, C_uint(cx.ccx(), pat_len), expr::get_len(cx, lhs_str));\n+                        Store(cx, expr::get_dataptr(cx, lhs), expr::get_dataptr(cx, lhs_str));\n+                        Store(cx, C_uint(cx.ccx(), pat_len), expr::get_meta(cx, lhs_str));\n                     }\n                     else {\n                         // The discriminant is a fat pointer\n@@ -1197,9 +1195,9 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n                 let scratch = alloca_no_lifetime(bcx, llty, \"__struct_field_fat_ptr\");\n                 let data = adt::trans_field_ptr(bcx, &*repr, struct_val, 0, arg_count);\n-                let len = Load(bcx, expr::get_len(bcx, val.val));\n+                let len = Load(bcx, expr::get_meta(bcx, val.val));\n                 Store(bcx, data, expr::get_dataptr(bcx, scratch));\n-                Store(bcx, len, expr::get_len(bcx, scratch));\n+                Store(bcx, len, expr::get_meta(bcx, scratch));\n                 field_vals.push(scratch);\n             }\n             _ => {}"}, {"sha": "46211e6bd01ae0d4e40fda8f51130f115a8a56ad", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -892,7 +892,7 @@ pub fn trans_get_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n     let val = match *r {\n         CEnum(ity, min, max) => load_discr(bcx, ity, scrutinee, min, max),\n         General(ity, ref cases, _) => {\n-            let ptr = GEPi(bcx, scrutinee, &[0, 0]);\n+            let ptr = StructGEP(bcx, scrutinee, 0);\n             load_discr(bcx, ity, ptr, 0, (cases.len() - 1) as Disr)\n         }\n         Univariant(..) => C_u8(bcx.ccx(), 0),\n@@ -986,13 +986,13 @@ pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n                 Store(bcx, C_u8(bcx.ccx(), DTOR_NEEDED), ptr);\n             }\n             Store(bcx, C_integral(ll_inttype(bcx.ccx(), ity), discr as u64, true),\n-                  GEPi(bcx, val, &[0, 0]));\n+                  StructGEP(bcx, val, 0));\n         }\n         Univariant(ref st, dtor) => {\n             assert_eq!(discr, 0);\n             if dtor_active(dtor) {\n                 Store(bcx, C_u8(bcx.ccx(), DTOR_NEEDED),\n-                    GEPi(bcx, val, &[0, st.fields.len() - 1]));\n+                      StructGEP(bcx, val, st.fields.len() - 1));\n             }\n         }\n         RawNullablePointer { nndiscr, nnty, ..} => {\n@@ -1091,7 +1091,7 @@ pub fn struct_field_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, st: &Struct<'tcx>, v\n         val\n     };\n \n-    GEPi(bcx, val, &[0, ix])\n+    StructGEP(bcx, val, ix)\n }\n \n pub fn fold_variants<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n@@ -1162,7 +1162,7 @@ pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let ptr_ty = bcx.tcx().mk_imm_ptr(tcx.dtor_type());\n     match *r {\n         Univariant(ref st, dtor) if dtor_active(dtor) => {\n-            let flag_ptr = GEPi(bcx, val, &[0, st.fields.len() - 1]);\n+            let flag_ptr = StructGEP(bcx, val, st.fields.len() - 1);\n             datum::immediate_rvalue_bcx(bcx, flag_ptr, ptr_ty).to_expr_datumblock()\n         }\n         General(_, _, dtor) if dtor_active(dtor) => {"}, {"sha": "7cbb7862c61a439b5059ef64bc8c8bf7d375959d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -403,8 +403,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n     let (data_ptr, info) = if common::type_is_sized(cx.tcx(), t) {\n         (av, None)\n     } else {\n-        let data = GEPi(cx, av, &[0, abi::FAT_PTR_ADDR]);\n-        let info = GEPi(cx, av, &[0, abi::FAT_PTR_EXTRA]);\n+        let data = expr::get_dataptr(cx, av);\n+        let info = expr::get_meta(cx, av);\n         (Load(cx, data), Some(Load(cx, info)))\n     };\n \n@@ -420,8 +420,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n                   llfld_a\n               } else {\n                   let scratch = datum::rvalue_scratch_datum(cx, field_ty, \"__fat_ptr_iter\");\n-                  Store(cx, llfld_a, GEPi(cx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n-                  Store(cx, info.unwrap(), GEPi(cx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n+                  Store(cx, llfld_a, expr::get_dataptr(cx, scratch.val));\n+                  Store(cx, info.unwrap(), expr::get_meta(cx, scratch.val));\n                   scratch.val\n               };\n               cx = f(cx, val, field_ty);\n@@ -835,7 +835,7 @@ pub fn store_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, dst: ValueRef, t\n \n     if common::type_is_fat_ptr(cx.tcx(), t) {\n         Store(cx, ExtractValue(cx, v, abi::FAT_PTR_ADDR), expr::get_dataptr(cx, dst));\n-        Store(cx, ExtractValue(cx, v, abi::FAT_PTR_EXTRA), expr::get_len(cx, dst));\n+        Store(cx, ExtractValue(cx, v, abi::FAT_PTR_EXTRA), expr::get_meta(cx, dst));\n     } else {\n         let store = Store(cx, from_arg_ty(cx, v, t), to_arg_ty_ptr(cx, dst, t));\n         unsafe {\n@@ -1402,7 +1402,7 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                         arg_scope_id, (data, extra),\n                                                         |(data, extra), bcx, dst| {\n                     Store(bcx, data, expr::get_dataptr(bcx, dst));\n-                    Store(bcx, extra, expr::get_len(bcx, dst));\n+                    Store(bcx, extra, expr::get_meta(bcx, dst));\n                     bcx\n                 }))\n             } else {\n@@ -1428,12 +1428,12 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n                                                                llval| {\n                         for (j, &tupled_arg_ty) in\n                                     tupled_arg_tys.iter().enumerate() {\n-                            let lldest = GEPi(bcx, llval, &[0, j]);\n+                            let lldest = StructGEP(bcx, llval, j);\n                             if common::type_is_fat_ptr(bcx.tcx(), tupled_arg_ty) {\n                                 let data = get_param(bcx.fcx.llfn, idx);\n                                 let extra = get_param(bcx.fcx.llfn, idx + 1);\n                                 Store(bcx, data, expr::get_dataptr(bcx, lldest));\n-                                Store(bcx, extra, expr::get_len(bcx, lldest));\n+                                Store(bcx, extra, expr::get_meta(bcx, lldest));\n                                 idx += 2;\n                             } else {\n                                 let datum = datum::Datum::new(\n@@ -1835,7 +1835,7 @@ fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx\n                                                  i);\n             if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n                 Store(bcx, get_param(fcx.llfn, llarg_idx), expr::get_dataptr(bcx, lldestptr));\n-                Store(bcx, get_param(fcx.llfn, llarg_idx + 1), expr::get_len(bcx, lldestptr));\n+                Store(bcx, get_param(fcx.llfn, llarg_idx + 1), expr::get_meta(bcx, lldestptr));\n                 llarg_idx += 2;\n             } else {\n                 let arg = get_param(fcx.llfn, llarg_idx);"}, {"sha": "efbe542a5e5316dd97046f5a291c1d7756b1c437", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -1129,7 +1129,7 @@ pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     if common::type_is_fat_ptr(bcx.tcx(), formal_arg_ty) {\n         llargs.push(Load(bcx, expr::get_dataptr(bcx, val)));\n-        llargs.push(Load(bcx, expr::get_len(bcx, val)));\n+        llargs.push(Load(bcx, expr::get_meta(bcx, val)));\n     } else {\n         llargs.push(val);\n     }"}, {"sha": "d4acb80d25ebf3687f53b6e103d074ebdbe377d4", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -70,7 +70,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let upvar_id = ty::UpvarId { var_id: freevar.def.local_node_id(),\n                                      closure_expr_id: closure_id.node };\n         let upvar_capture = bcx.tcx().upvar_capture(upvar_id).unwrap();\n-        let mut upvar_ptr = GEPi(bcx, llenv, &[0, i]);\n+        let mut upvar_ptr = StructGEP(bcx, llenv, i);\n         let captured_by_ref = match upvar_capture {\n             ty::UpvarCapture::ByValue => false,\n             ty::UpvarCapture::ByRef(..) => {"}, {"sha": "efccba91650caf958b1b77108dc204309da003a8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -282,17 +282,17 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     return DatumBlock::new(bcx, datum);\n }\n \n-pub fn get_len(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_EXTRA])\n+pub fn get_meta(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n+    StructGEP(bcx, fat_ptr, abi::FAT_PTR_EXTRA)\n }\n \n pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_ADDR])\n+    StructGEP(bcx, fat_ptr, abi::FAT_PTR_ADDR)\n }\n \n pub fn copy_fat_ptr(bcx: Block, src_ptr: ValueRef, dst_ptr: ValueRef) {\n     Store(bcx, Load(bcx, get_dataptr(bcx, src_ptr)), get_dataptr(bcx, dst_ptr));\n-    Store(bcx, Load(bcx, get_len(bcx, src_ptr)), get_len(bcx, dst_ptr));\n+    Store(bcx, Load(bcx, get_meta(bcx, src_ptr)), get_meta(bcx, dst_ptr));\n }\n \n /// Retrieve the information we are losing (making dynamic) in an unsizing\n@@ -454,7 +454,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // load out the original data pointer so we can repackage\n                 // it.\n                 (Load(bcx, get_dataptr(bcx, source.val)),\n-                Some(Load(bcx, get_len(bcx, source.val))))\n+                Some(Load(bcx, get_meta(bcx, source.val))))\n             } else {\n                 let val = if source.kind.is_by_ref() {\n                     load_ty(bcx, source.val, source.ty)\n@@ -473,7 +473,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let base = PointerCast(bcx, base, ptr_ty);\n \n             Store(bcx, base, get_dataptr(bcx, target.val));\n-            Store(bcx, info, get_len(bcx, target.val));\n+            Store(bcx, info, get_meta(bcx, target.val));\n         }\n \n         // This can be extended to enums and tuples in the future.\n@@ -729,8 +729,8 @@ fn trans_field<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     } else {\n         let scratch = rvalue_scratch_datum(bcx, d.ty, \"\");\n         Store(bcx, d.val, get_dataptr(bcx, scratch.val));\n-        let info = Load(bcx, get_len(bcx, base_datum.val));\n-        Store(bcx, info, get_len(bcx, scratch.val));\n+        let info = Load(bcx, get_meta(bcx, base_datum.val));\n+        Store(bcx, info, get_meta(bcx, scratch.val));\n \n         // Always generate an lvalue datum, because this pointer doesn't own\n         // the data and cleanup is scheduled elsewhere."}, {"sha": "b1c85ce54b73fff86a5944386c400f598500c044", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -302,7 +302,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              \"__arg\");\n             if type_is_fat_ptr(ccx.tcx(), passed_arg_tys[i]) {\n                 Store(bcx, llargs_rust[i + offset], expr::get_dataptr(bcx, scratch));\n-                Store(bcx, llargs_rust[i + offset + 1], expr::get_len(bcx, scratch));\n+                Store(bcx, llargs_rust[i + offset + 1], expr::get_meta(bcx, scratch));\n                 offset += 1;\n             } else {\n                 base::store_ty(bcx, llarg_rust, scratch, passed_arg_tys[i]);\n@@ -821,10 +821,10 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                    i, ccx.tn().val_to_string(llrust_arg));\n             if type_is_fat_ptr(ccx.tcx(), rust_ty) {\n                 let next_llrust_ty = rust_param_tys.next().expect(\"Not enough parameter types!\");\n-                llrust_args.push(builder.load(builder.bitcast(builder.gepi(\n-                                llrust_arg, &[0, abi::FAT_PTR_ADDR]), llrust_ty.ptr_to())));\n-                llrust_args.push(builder.load(builder.bitcast(builder.gepi(\n-                                llrust_arg, &[0, abi::FAT_PTR_EXTRA]), next_llrust_ty.ptr_to())));\n+                llrust_args.push(builder.load(builder.bitcast(builder.struct_gep(\n+                                llrust_arg, abi::FAT_PTR_ADDR), llrust_ty.ptr_to())));\n+                llrust_args.push(builder.load(builder.bitcast(builder.struct_gep(\n+                                llrust_arg, abi::FAT_PTR_EXTRA), next_llrust_ty.ptr_to())));\n             } else {\n                 llrust_args.push(llrust_arg);\n             }"}, {"sha": "93b637ecb4f657c0940e6772f8f7cc2a163f8cac", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -13,7 +13,6 @@\n // Code relating to drop glue.\n \n \n-use back::abi;\n use back::link::*;\n use llvm;\n use llvm::{ValueRef, get_param};\n@@ -390,7 +389,7 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let (_, bcx) = if type_is_sized(bcx.tcx(), t) {\n         invoke(bcx, dtor_addr, &[v0], dtor_ty, DebugLoc::None)\n     } else {\n-        let args = [Load(bcx, expr::get_dataptr(bcx, v0)), Load(bcx, expr::get_len(bcx, v0))];\n+        let args = [Load(bcx, expr::get_dataptr(bcx, v0)), Load(bcx, expr::get_meta(bcx, v0))];\n         invoke(bcx, dtor_addr, &args, dtor_ty, DebugLoc::None)\n     };\n \n@@ -525,14 +524,14 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // a safe-guard, assert TyBox not used with TyContents.\n             assert!(!skip_dtor);\n             if !type_is_sized(bcx.tcx(), content_ty) {\n-                let llval = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n+                let llval = expr::get_dataptr(bcx, v0);\n                 let llbox = Load(bcx, llval);\n                 let llbox_as_usize = PtrToInt(bcx, llbox, Type::int(bcx.ccx()));\n                 let drop_flag_not_dropped_already =\n                     ICmp(bcx, llvm::IntNE, llbox_as_usize, dropped_pattern, DebugLoc::None);\n                 with_cond(bcx, drop_flag_not_dropped_already, |bcx| {\n                     let bcx = drop_ty(bcx, v0, content_ty, DebugLoc::None);\n-                    let info = GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]);\n+                    let info = expr::get_meta(bcx, v0);\n                     let info = Load(bcx, info);\n                     let (llsize, llalign) = size_and_align_of_dst(bcx, content_ty, info);\n \n@@ -591,8 +590,8 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // versus without calling Drop::drop. Assert caller is\n             // okay with always calling the Drop impl, if any.\n             assert!(!skip_dtor);\n-            let data_ptr = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n-            let vtable_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]));\n+            let data_ptr = expr::get_dataptr(bcx, v0);\n+            let vtable_ptr = Load(bcx, expr::get_meta(bcx, v0));\n             let dtor = Load(bcx, vtable_ptr);\n             Call(bcx,\n                  dtor,"}, {"sha": "8b4b810214d2f86ebb3686840f6c87183d2516e2", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -449,7 +449,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             } else {\n                 let scratch = rvalue_scratch_datum(bcx, tp_ty, \"tmp\");\n                 Store(bcx, llargs[0], expr::get_dataptr(bcx, scratch.val));\n-                Store(bcx, llargs[1], expr::get_len(bcx, scratch.val));\n+                Store(bcx, llargs[1], expr::get_meta(bcx, scratch.val));\n                 fcx.schedule_lifetime_end(cleanup::CustomScope(cleanup_scope), scratch.val);\n                 scratch.val\n             };"}, {"sha": "6c72570fda86498712f9b536a65ddc59771f9b9e", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use arena::TypedArena;\n-use back::abi;\n use back::link;\n use llvm::{ValueRef, get_params};\n use middle::def_id::DefId;\n@@ -446,8 +445,8 @@ fn trans_trait_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         self_datum.val\n     };\n \n-    let llself = Load(bcx, GEPi(bcx, llval, &[0, abi::FAT_PTR_ADDR]));\n-    let llvtable = Load(bcx, GEPi(bcx, llval, &[0, abi::FAT_PTR_EXTRA]));\n+    let llself = Load(bcx, expr::get_dataptr(bcx, llval));\n+    let llvtable = Load(bcx, expr::get_meta(bcx, llval));\n     trans_trait_callee_from_llval(bcx, opaque_fn_ty, vtable_index, llself, llvtable)\n }\n "}, {"sha": "f3a3268bebbd535d3578345993fe32aaa453bd01", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c630a61c658cb7d861a60da6951ee06619337b2/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=5c630a61c658cb7d861a60da6951ee06619337b2", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_camel_case_types)]\n \n-use back::abi;\n use llvm;\n use llvm::ValueRef;\n use trans::base::*;\n@@ -67,7 +66,7 @@ pub fn trans_fixed_vstore<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         SaveIn(lldest) => {\n             // lldest will have type *[T x N], but we want the type *T,\n             // so use GEP to convert:\n-            let lldest = GEPi(bcx, lldest, &[0, 0]);\n+            let lldest = StructGEP(bcx, lldest, 0);\n             write_content(bcx, &vt, expr, expr, SaveIn(lldest))\n         }\n     };\n@@ -123,7 +122,7 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         // llfixed has type *[T x N], but we want the type *T,\n         // so use GEP to convert\n         bcx = write_content(bcx, &vt, slice_expr, content_expr,\n-                            SaveIn(GEPi(bcx, llfixed, &[0, 0])));\n+                            SaveIn(StructGEP(bcx, llfixed, 0)));\n     };\n \n     immediate_rvalue_bcx(bcx, llfixed, vec_ty).to_expr_datumblock()\n@@ -147,8 +146,8 @@ pub fn trans_lit_str<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let llbytes = C_uint(bcx.ccx(), bytes);\n             let llcstr = C_cstr(bcx.ccx(), str_lit, false);\n             let llcstr = consts::ptrcast(llcstr, Type::i8p(bcx.ccx()));\n-            Store(bcx, llcstr, GEPi(bcx, lldest, &[0, abi::FAT_PTR_ADDR]));\n-            Store(bcx, llbytes, GEPi(bcx, lldest, &[0, abi::FAT_PTR_EXTRA]));\n+            Store(bcx, llcstr, expr::get_dataptr(bcx, lldest));\n+            Store(bcx, llbytes, expr::get_meta(bcx, lldest));\n             bcx\n         }\n     }\n@@ -310,7 +309,7 @@ pub fn get_base_and_len<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ty::TyArray(_, n) => get_fixed_base_and_len(bcx, llval, n),\n         ty::TySlice(_) | ty::TyStr => {\n             let base = Load(bcx, expr::get_dataptr(bcx, llval));\n-            let len = Load(bcx, expr::get_len(bcx, llval));\n+            let len = Load(bcx, expr::get_meta(bcx, llval));\n             (base, len)\n         }\n "}]}