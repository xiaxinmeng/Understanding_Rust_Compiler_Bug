{"sha": "1fd2f1687c6483fd3386f838c30332215c3f32b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZDJmMTY4N2M2NDgzZmQzMzg2ZjgzOGMzMDMzMjIxNWMzZjMyYjI=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-02-25T15:44:04Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-02-25T15:44:04Z"}, "message": "Have all methods of Filter and FilterMap use internal iteration", "tree": {"sha": "ac23621c3c7a79af917ad3ced8d32b567be9fb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac23621c3c7a79af917ad3ced8d32b567be9fb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fd2f1687c6483fd3386f838c30332215c3f32b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd2f1687c6483fd3386f838c30332215c3f32b2", "html_url": "https://github.com/rust-lang/rust/commit/1fd2f1687c6483fd3386f838c30332215c3f32b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fd2f1687c6483fd3386f838c30332215c3f32b2/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31eb0e2d3c0bfd2e0f5b662d82971c1a203708be", "url": "https://api.github.com/repos/rust-lang/rust/commits/31eb0e2d3c0bfd2e0f5b662d82971c1a203708be", "html_url": "https://github.com/rust-lang/rust/commit/31eb0e2d3c0bfd2e0f5b662d82971c1a203708be"}], "stats": {"total": 37, "additions": 7, "deletions": 30}, "files": [{"sha": "d4ad22c16bbfa697458af3c5d2e7882be0588bc8", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1fd2f1687c6483fd3386f838c30332215c3f32b2/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd2f1687c6483fd3386f838c30332215c3f32b2/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=1fd2f1687c6483fd3386f838c30332215c3f32b2", "patch": "@@ -681,12 +681,7 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        for x in &mut self.iter {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -707,12 +702,9 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n     // Using the branchless version will also simplify the LLVM byte code, thus\n     // leaving more budget for LLVM optimizations.\n     #[inline]\n-    fn count(mut self) -> usize {\n-        let mut count = 0;\n-        for x in &mut self.iter {\n-            count += (self.predicate)(&x) as usize;\n-        }\n-        count\n+    fn count(self) -> usize {\n+        let mut predicate = self.predicate;\n+        self.iter.map(|x| predicate(&x) as usize).sum()\n     }\n \n     #[inline]\n@@ -746,12 +738,7 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<I::Item> {\n-        for x in self.iter.by_ref().rev() {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]\n@@ -820,12 +807,7 @@ impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -863,12 +845,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref().rev() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]"}]}