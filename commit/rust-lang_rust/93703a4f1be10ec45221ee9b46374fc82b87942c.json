{"sha": "93703a4f1be10ec45221ee9b46374fc82b87942c", "node_id": "C_kwDOAAsO6NoAKDkzNzAzYTRmMWJlMTBlYzQ1MjIxZWU5YjQ2Mzc0ZmM4MmI4Nzk0MmM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-27T09:49:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-27T09:49:43Z"}, "message": "Merge pull request #1283 from bjorn3/update_cranelift\n\nUpdate to Cranelift 0.88.1", "tree": {"sha": "f516a9af3b07a15170616ca8f87bc80748561a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f516a9af3b07a15170616ca8f87bc80748561a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93703a4f1be10ec45221ee9b46374fc82b87942c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMsc3CRBK7hj4Ov3rIwAAZXAIAEIKsBOm8rrJoK5T4OL2CMU8\nKSyCTwSoGentXS9vgEqY4adUkZW18YSiLWtlW97IxHkBOPMy11MAOZMI+duGxRnr\nvgWN/T1OXIPmoVKDNgbbRHG/A/t61SxxdgJQ91LghBiRIMFJvlaBE0ryfAiQ6eHm\nsmBqcdTNWI7xgS5eQCyfhqW7s3GleFlXo/IiP+iCmO4bit7jmUg3skLBoIgqszY7\nTjn9HRh256E5+DQVWxgfEkc6HRXXEyd7I8ZK5txK+FZ3T+o/HQDJQU6zycuCBneT\n0+P3VinPWYJSfLRIc/1WrN2DdDfWi3zog6U9jwMRYSwjvTNrf9Ep5PGPVmOsTwU=\n=B2Ag\n-----END PGP SIGNATURE-----\n", "payload": "tree f516a9af3b07a15170616ca8f87bc80748561a28\nparent 7dccb51fe367a21af01ce9095d4e06082dfba56d\nparent fb71d8abea5d2e512dd0bd3d9b3694d1421172cb\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1664272183 +0200\ncommitter GitHub <noreply@github.com> 1664272183 +0200\n\nMerge pull request #1283 from bjorn3/update_cranelift\n\nUpdate to Cranelift 0.88.1"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93703a4f1be10ec45221ee9b46374fc82b87942c", "html_url": "https://github.com/rust-lang/rust/commit/93703a4f1be10ec45221ee9b46374fc82b87942c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93703a4f1be10ec45221ee9b46374fc82b87942c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dccb51fe367a21af01ce9095d4e06082dfba56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dccb51fe367a21af01ce9095d4e06082dfba56d", "html_url": "https://github.com/rust-lang/rust/commit/7dccb51fe367a21af01ce9095d4e06082dfba56d"}, {"sha": "fb71d8abea5d2e512dd0bd3d9b3694d1421172cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb71d8abea5d2e512dd0bd3d9b3694d1421172cb", "html_url": "https://github.com/rust-lang/rust/commit/fb71d8abea5d2e512dd0bd3d9b3694d1421172cb"}], "stats": {"total": 123, "additions": 63, "deletions": 60}, "files": [{"sha": "3fa9d56cd01a381549991ed9fca4940e2b925d08", "filename": "Cargo.lock", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -24,6 +24,12 @@ name = \"ar\"\n version = \"0.8.0\"\n source = \"git+https://github.com/bjorn3/rust-ar.git?branch=do_not_remove_cg_clif_ranlib#de9ab0e56bf3a208381d342aa5b60f9ff2891648\"\n \n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n+\n [[package]]\n name = \"autocfg\"\n version = \"1.1.0\"\n@@ -36,6 +42,12 @@ version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"bumpalo\"\n+version = \"3.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c1ad822118d20d2c234f427000d5acc36eabe1e29a348c89b63dd60b13f28e5d\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.4.3\"\n@@ -50,19 +62,21 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93945adbccc8d731503d3038814a51e8317497c9e205411820348132fa01a358\"\n+checksum = \"44409ccf2d0f663920cab563d2b79fcd6b2e9a2bcc6e929fef76c8f82ad6c17a\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2b482acc9d0d0d1ad3288a90a8150ee648be3dce8dc8c8669ff026f72debdc31\"\n+checksum = \"98de2018ad96eb97f621f7d6b900a0cc661aec8d02ea4a50e56ecb48e5a2fcaf\"\n dependencies = [\n+ \"arrayvec\",\n+ \"bumpalo\",\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n  \"cranelift-codegen-shared\",\n@@ -77,30 +91,30 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f9ec188d71e663192ef9048f204e410a7283b609942efc9fcc77da6d496edbb8\"\n+checksum = \"5287ce36e6c4758fbaf298bd1a8697ad97a4f2375a3d1b61142ea538db4877e5\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ad794b1b1c2c7bd9f7b76cfe0f084eaf7753e55d56191c3f7d89e8fa4978b99\"\n+checksum = \"2855c24219e2f08827f3f4ffb2da92e134ae8d8ecc185b11ec8f9878cf5f588e\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"342da0d5056f4119d3c311c4aab2460ceb6ee6e127bb395b76dd2279a09ea7a5\"\n+checksum = \"0b65673279d75d34bf11af9660ae2dbd1c22e6d28f163f5c72f4e1dc56d56103\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dfff792f775b07d4d9cfe9f1c767ce755c6cbadda1bbd6db18a1c75ff9f7376a\"\n+checksum = \"3ed2b3d7a4751163f6c4a349205ab1b7d9c00eecf19dcea48592ef1f7688eefc\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -110,15 +124,15 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-isle\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d51089478849f2ac8ef60a8a2d5346c8d4abfec0e45ac5b24530ef9f9499e1e\"\n+checksum = \"3be64cecea9d90105fc6a2ba2d003e98c867c1d6c4c86cc878f97ad9fb916293\"\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"095936e41720f86004b4c57ce88e6a13af28646bb3a6fb4afbebd5ae90c50029\"\n+checksum = \"f98ed42a70a0c9c388e34ec9477f57fc7300f541b1e5136a0e2ea02b1fac6015\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -134,19 +148,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"704a1aea4723d97eafe0fb7af110f6f6868b1ac95f5380bbc9adb2a3b8cf97e8\"\n+checksum = \"d658ac7f156708bfccb647216cc8b9387469f50d352ba4ad80150541e4ae2d49\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"885debe62f2078638d6585f54c9f05f5c2008f22ce5a2a9100ada785fc065dbd\"\n+checksum = \"c4a03a6ac1b063e416ca4b93f6247978c991475e8271465340caa6f92f3c16a4\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -155,9 +169,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.87.0\"\n+version = \"0.88.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aac1310cf1081ae8eca916c92cd163b977c77cab6e831fa812273c26ff921816\"\n+checksum = \"eef0b4119b645b870a43a036d76c0ada3a076b1f82e8b8487659304c8b09049b\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\","}, {"sha": "09cf5b4a1edd8482ef98d33c5aeb295600947b6a", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -8,12 +8,12 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.87.0\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = \"0.87.0\"\n-cranelift-module = \"0.87.0\"\n-cranelift-native = \"0.87.0\"\n-cranelift-jit = { version = \"0.87.0\", optional = true }\n-cranelift-object = \"0.87.0\"\n+cranelift-codegen = { version = \"0.88.1\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = \"0.88.1\"\n+cranelift-module = \"0.88.1\"\n+cranelift-native = \"0.88.1\"\n+cranelift-jit = { version = \"0.88.1\", optional = true }\n+cranelift-object = \"0.88.1\"\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }"}, {"sha": "039100696331b638f7fc52afb60b9a6c6d05c8b8", "filename": "example/issue-91827-extern-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/example%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/example%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-91827-extern-types.rs?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -5,7 +5,6 @@\n // Test that we can handle unsized types with an extern type tail part.\n // Regression test for issue #91827.\n \n-#![feature(const_ptr_offset_from)]\n #![feature(extern_types)]\n \n use std::ptr::addr_of;"}, {"sha": "a6bcade8eb857575ea663d264f2df31c3109f3c4", "filename": "patches/0001-abi-cafe-Disable-failing-tests.patch", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/patches%2F0001-abi-cafe-Disable-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/patches%2F0001-abi-cafe-Disable-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-abi-cafe-Disable-failing-tests.patch?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -11,7 +11,7 @@ diff --git a/src/report.rs b/src/report.rs\n index 7346f5e..8347762 100644\n --- a/src/report.rs\n +++ b/src/report.rs\n-@@ -45,6 +45,20 @@ pub fn get_test_rules(test: &TestKey, caller: &dyn AbiImpl, callee: &dyn AbiImpl\n+@@ -45,6 +45,13 @@ pub fn get_test_rules(test: &TestKey, caller: &dyn AbiImpl, callee: &dyn AbiImpl\n      //\n      // THIS AREA RESERVED FOR VENDORS TO APPLY PATCHES\n \n@@ -21,13 +21,6 @@ index 7346f5e..8347762 100644\n +        result.run = Link;\n +        result.check = Pass(Link);\n +    }\n-+\n-+    // structs is broken in the current release of cranelift for aarch64.\n-+    // It has been fixed for cranelift 0.88: https://github.com/bytecodealliance/wasmtime/pull/4634\n-+    if cfg!(target_arch = \"aarch64\") && test.test_name == \"structs\" {\n-+        result.run = Link;\n-+        result.check = Pass(Link);\n-+    }\n +\n      // END OF VENDOR RESERVED AREA\n      //"}, {"sha": "491525993fd1e7c60ae6330d5811291fa360d53f", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -6,6 +6,8 @@ use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n \n+use cranelift_codegen::ir::UserFuncName;\n+\n use crate::constant::ConstantCx;\n use crate::debuginfo::FunctionDebugContext;\n use crate::prelude::*;\n@@ -64,7 +66,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut func = cached_func;\n     func.clear();\n-    func.name = ExternalName::user(0, func_id.as_u32());\n+    func.name = UserFuncName::user(0, func_id.as_u32());\n     func.signature = sig;\n     func.collect_debug_info();\n "}, {"sha": "629d79d501240217d17ac3a6294ff338ed29300c", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -96,8 +96,8 @@ mod prelude {\n     pub(crate) use cranelift_codegen::ir::function::Function;\n     pub(crate) use cranelift_codegen::ir::types;\n     pub(crate) use cranelift_codegen::ir::{\n-        AbiParam, Block, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc,\n-        StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value,\n+        AbiParam, Block, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot,\n+        StackSlotData, StackSlotKind, TrapCode, Type, Value,\n     };\n     pub(crate) use cranelift_codegen::isa::{self, CallConv};\n     pub(crate) use cranelift_codegen::Context;\n@@ -251,7 +251,6 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n \n     let mut flags_builder = settings::builder();\n     flags_builder.enable(\"is_pic\").unwrap();\n-    flags_builder.set(\"enable_probestack\", \"false\").unwrap(); // __cranelift_probestack is not provided\n     let enable_verifier = if backend_config.enable_verifier { \"true\" } else { \"false\" };\n     flags_builder.set(\"enable_verifier\", enable_verifier).unwrap();\n     flags_builder.set(\"regalloc_checker\", enable_verifier).unwrap();\n@@ -279,6 +278,15 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n         }\n     }\n \n+    if target_triple.architecture == target_lexicon::Architecture::X86_64 {\n+        // Windows depends on stack probes to grow the committed part of the stack\n+        flags_builder.enable(\"enable_probestack\").unwrap();\n+        flags_builder.set(\"probestack_strategy\", \"inline\").unwrap();\n+    } else {\n+        // __cranelift_probestack is not provided and inline stack probes are only supported on x86_64\n+        flags_builder.set(\"enable_probestack\", \"false\").unwrap();\n+    }\n+\n     let flags = settings::Flags::new(flags_builder);\n \n     let isa_builder = match sess.opts.cg.target_cpu.as_deref() {"}, {"sha": "ecbab408ded972889b6cbca8840daee8c2e837f4", "filename": "src/num.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93703a4f1be10ec45221ee9b46374fc82b87942c/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=93703a4f1be10ec45221ee9b46374fc82b87942c", "patch": "@@ -150,18 +150,12 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::BitXor => b.bxor(lhs, rhs),\n         BinOp::BitAnd => b.band(lhs, rhs),\n         BinOp::BitOr => b.bor(lhs, rhs),\n-        BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            fx.bcx.ins().ishl(lhs, actual_shift)\n-        }\n+        BinOp::Shl => b.ishl(lhs, rhs),\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n             if signed {\n-                fx.bcx.ins().sshr(lhs, actual_shift)\n+                b.sshr(lhs, rhs)\n             } else {\n-                fx.bcx.ins().ushr(lhs, actual_shift)\n+                b.ushr(lhs, rhs)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -279,22 +273,15 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = fx.bcx.ins().ishl(lhs, masked_shift);\n+            let val = fx.bcx.ins().ishl(lhs, rhs);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n-            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, masked_shift)\n-            } else {\n-                fx.bcx.ins().sshr(lhs, masked_shift)\n-            };\n+            let val =\n+                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);"}]}