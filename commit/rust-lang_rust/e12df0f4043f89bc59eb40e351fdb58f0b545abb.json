{"sha": "e12df0f4043f89bc59eb40e351fdb58f0b545abb", "node_id": "C_kwDOAAsO6NoAKGUxMmRmMGY0MDQzZjg5YmM1OWViNDBlMzUxZmRiNThmMGI1NDVhYmI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T23:31:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T23:42:32Z"}, "message": "also forward --manifest-path to 'cargo metadata'", "tree": {"sha": "a3861fec5fd196cff1f8adfe30eb9eb13c530ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3861fec5fd196cff1f8adfe30eb9eb13c530ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12df0f4043f89bc59eb40e351fdb58f0b545abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12df0f4043f89bc59eb40e351fdb58f0b545abb", "html_url": "https://github.com/rust-lang/rust/commit/e12df0f4043f89bc59eb40e351fdb58f0b545abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12df0f4043f89bc59eb40e351fdb58f0b545abb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0cd09814bac7aff3259ff543bef5397743cd572", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0cd09814bac7aff3259ff543bef5397743cd572", "html_url": "https://github.com/rust-lang/rust/commit/f0cd09814bac7aff3259ff543bef5397743cd572"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "376b191192f483691aef2f5faff022c259db6e41", "filename": "cargo-miri/src/phases.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e12df0f4043f89bc59eb40e351fdb58f0b545abb/cargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12df0f4043f89bc59eb40e351fdb58f0b545abb/cargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fphases.rs?ref=e12df0f4043f89bc59eb40e351fdb58f0b545abb", "patch": "@@ -117,6 +117,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     cmd.arg(cargo_cmd);\n \n     // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n+    // (We want to *change* the target-dir value, so we must not forward it.)\n     let mut target_dir = None;\n     for arg in ArgSplitFlagValue::new(&mut args, \"--target-dir\") {\n         match arg {"}, {"sha": "729794ed9930c5bd75f9b8c94e4dae12b85ef01d", "filename": "cargo-miri/src/util.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e12df0f4043f89bc59eb40e351fdb58f0b545abb/cargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12df0f4043f89bc59eb40e351fdb58f0b545abb/cargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Futil.rs?ref=e12df0f4043f89bc59eb40e351fdb58f0b545abb", "patch": "@@ -287,29 +287,33 @@ pub fn write_to_file(filename: &Path, content: &str) {\n     fs::rename(temp_filename, filename).unwrap();\n }\n \n-pub fn get_cargo_metadata() -> Metadata {\n-    // The `build.target-dir` config can be passed by `--config` flags, so forward them to\n-    // `cargo metadata`.\n-    let mut additional_options = Vec::new();\n+// Computes the extra flags that need to be passed to cargo to make it behave like the current\n+// cargo invocation.\n+fn cargo_extra_flags() -> Vec<String> {\n+    let mut flags = Vec::new();\n     // `-Zunstable-options` is required by `--config`.\n-    additional_options.push(\"-Zunstable-options\".to_string());\n+    flags.push(\"-Zunstable-options\".to_string());\n \n+    // Forward `--config` flags.\n     let config_flag = \"--config\";\n-    for arg in ArgSplitFlagValue::new(\n-        env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n-        config_flag,\n-    )\n-    // Only look at `Ok`\n-    .flatten()\n-    {\n-        additional_options.push(config_flag.to_string());\n-        additional_options.push(arg);\n+    for arg in ArgFlagValueIter::new(config_flag) {\n+        flags.push(config_flag.to_string());\n+        flags.push(arg);\n+    }\n+\n+    // Forward `--manifest-path`.\n+    let manifest_flag = \"--manifest-path\";\n+    if let Some(manifest) = get_arg_flag_value(manifest_flag) {\n+        flags.push(manifest_flag.to_string());\n+        flags.push(manifest);\n     }\n \n-    let metadata =\n-        MetadataCommand::new().no_deps().other_options(additional_options).exec().unwrap();\n+    flags\n+}\n \n-    metadata\n+pub fn get_cargo_metadata() -> Metadata {\n+    // This will honor the `CARGO` env var the same way our `cargo()` does.\n+    MetadataCommand::new().no_deps().other_options(cargo_extra_flags()).exec().unwrap()\n }\n \n /// Pulls all the crates in this workspace from the cargo metadata."}]}