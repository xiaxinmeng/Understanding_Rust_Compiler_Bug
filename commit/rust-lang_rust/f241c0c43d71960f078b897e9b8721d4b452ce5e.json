{"sha": "f241c0c43d71960f078b897e9b8721d4b452ce5e", "node_id": "C_kwDOAAsO6NoAKGYyNDFjMGM0M2Q3MTk2MGYwNzhiODk3ZTliODcyMWQ0YjQ1MmNlNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T07:09:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T07:09:06Z"}, "message": "Auto merge of #100708 - matthiaskrgr:rollup-vl0olnj, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #97962 (Make must_not_suspend lint see through references when drop tracking is enabled)\n - #99966 (avoid assertion failures in try_to_scalar_int)\n - #100637 (Improving Fuchsia rustc support documentation)\n - #100643 (Point at a type parameter shadowing another type)\n - #100651 (Migrations for rustc_expand transcribe.rs)\n - #100669 (Attribute cleanups)\n - #100670 (Fix documentation of rustc_parse::parser::Parser::parse_stmt_without_recovery)\n - #100674 (Migrate lint reports in typeck::check_unused to LintDiagnostic)\n - #100688 (`ty::Error` does not match other types for region constraints)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4d165827226b99caaaa6e2f17ac22fc83ec9ef44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d165827226b99caaaa6e2f17ac22fc83ec9ef44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f241c0c43d71960f078b897e9b8721d4b452ce5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f241c0c43d71960f078b897e9b8721d4b452ce5e", "html_url": "https://github.com/rust-lang/rust/commit/f241c0c43d71960f078b897e9b8721d4b452ce5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f241c0c43d71960f078b897e9b8721d4b452ce5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "html_url": "https://github.com/rust-lang/rust/commit/9c20b2a8cc7588decb6de25ac6a7912dcef24d65"}, {"sha": "c7a494258846bd249a8440869ff0f6578e3b6080", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a494258846bd249a8440869ff0f6578e3b6080", "html_url": "https://github.com/rust-lang/rust/commit/c7a494258846bd249a8440869ff0f6578e3b6080"}], "stats": {"total": 416, "additions": 314, "deletions": 102}, "files": [{"sha": "77e0b6c55a80e5a03ee4afa671ed641c7a82f858", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_copy(\n ) {\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(marker::Copy),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "ee4c5aea1a3528001aaa1c93dd163134211fe751", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -71,7 +71,6 @@ pub fn expand_deriving_clone(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(clone::Clone),\n         additional_bounds: bounds,\n         generics: Bounds::empty(),"}, {"sha": "f99ee8cb2d53c1b5b7a9167ed125a1108c1753f6", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -23,7 +23,6 @@ pub fn expand_deriving_eq(\n     let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "8aa16dfeb0f1f3e56dd4ba935e3c6a8997cb1b71", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -18,7 +18,6 @@ pub fn expand_deriving_ord(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "73be9362e4eb47eea4eedeb56ee3104c137df76a", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -98,7 +98,6 @@ pub fn expand_deriving_partial_eq(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "137c779f81b842ae83a6ed9316395e80d4d1db63", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -36,7 +36,6 @@ pub fn expand_deriving_partial_ord(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: vec![],\n         path: path_std!(cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: Bounds::empty(),"}, {"sha": "f82175af4f6f22f549689c27e586b82ab64bc5b9", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -19,7 +19,6 @@ pub fn expand_deriving_debug(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "47da0862b52fcd0306d060b91daeaa9f54f19686", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -22,7 +22,6 @@ pub fn expand_deriving_rustc_decodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "a431832080c0c1353eabf39d290b47c37332e43e", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_default(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new(vec![kw::Default, sym::Default]),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "d43c66a5fa644c373c499616aa64b3ccadc8673e", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -106,7 +106,6 @@ pub fn expand_deriving_rustc_encodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "9882f7958aaa5a2e2b9d80e2a5f9dbb8ee0063b7", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -184,8 +184,6 @@ pub struct TraitDef<'a> {\n     /// The span for the current #[derive(Foo)] header.\n     pub span: Span,\n \n-    pub attributes: Vec<ast::Attribute>,\n-\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n@@ -605,7 +603,7 @@ impl<'a> TraitDef<'a> {\n                         param.bounds.iter().cloned()\n                     ).collect();\n \n-                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, vec![], bounds, None)\n+                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n             }\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n@@ -718,15 +716,13 @@ impl<'a> TraitDef<'a> {\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n+        let attrs = vec![attr];\n         let opt_trait_ref = Some(trait_ref);\n \n-        let mut a = vec![attr];\n-        a.extend(self.attributes.iter().cloned());\n-\n         cx.item(\n             self.span,\n             Ident::empty(),\n-            a,\n+            attrs,\n             ast::ItemKind::Impl(Box::new(ast::Impl {\n                 unsafety: ast::Unsafe::No,\n                 polarity: ast::ImplPolarity::Positive,"}, {"sha": "36e2e29308694741deece6a0106b538a29ddc8b3", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -146,7 +146,6 @@ fn mk_ty_param(\n     cx: &ExtCtxt<'_>,\n     span: Span,\n     name: Symbol,\n-    attrs: &[ast::Attribute],\n     bounds: &[Path],\n     self_ident: Ident,\n     self_generics: &Generics,\n@@ -158,7 +157,7 @@ fn mk_ty_param(\n             cx.trait_bound(path)\n         })\n         .collect();\n-    cx.typaram(span, Ident::new(name, span), attrs.to_owned(), bounds, None)\n+    cx.typaram(span, Ident::new(name, span), bounds, None)\n }\n \n /// Bounds on type parameters.\n@@ -183,7 +182,7 @@ impl Bounds {\n             .iter()\n             .map(|t| {\n                 let (name, ref bounds) = *t;\n-                mk_ty_param(cx, span, name, &[], &bounds, self_ty, self_generics)\n+                mk_ty_param(cx, span, name, &bounds, self_ty, self_generics)\n             })\n             .collect();\n "}, {"sha": "9aa170bec14d8bd8e736972fcec6d365e94f451c", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -21,7 +21,6 @@ pub fn expand_deriving_hash(\n     let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "ee76a4f45005d1c5ed71db9903ce3d5e541b14f3", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -3,3 +3,20 @@ expand_explain_doc_comment_outer =\n \n expand_explain_doc_comment_inner =\n     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n+\n+expand_expr_repeat_no_syntax_vars = \n+    attempted to repeat an expression containing no syntax variables matched as repeating at this depth\n+\n+expand_must_repeat_once = \n+    this must repeat at least once\n+\n+expand_count_repetition_misplaced =\n+    `count` can not be placed inside the inner-most repetition\n+\n+expand_meta_var_expr_unrecognized_var =\n+    variable `{$key}` is not recognized in meta-variable expression\n+\n+expand_var_still_repeating =\n+    variable '{$ident}' is still repeating at this depth\n+\n+expand_meta_var_dif_seq_matchers = {$msg}\n\\ No newline at end of file"}, {"sha": "0014da17c88e53692c5ad5ddeb95848d201212fa", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -123,3 +123,11 @@ typeck_manual_implementation =\n     .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n typeck_substs_on_overridden_impl = could not resolve substs on overridden impl\n+\n+typeck_unused_extern_crate =\n+    unused extern crate\n+    .suggestion = remove it\n+\n+typeck_extern_crate_not_idiomatic =\n+    `extern crate` is not idiomatic in the new edition\n+    .suggestion = convert it to a `{$msg_code}`"}, {"sha": "356f9dfdb3b2e79223109779322ac398108523eb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -8,7 +8,7 @@ use rustc_error_messages::FluentValue;\n use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_span::{edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n@@ -87,6 +87,7 @@ into_diagnostic_arg_using_display!(\n     hir::Target,\n     Edition,\n     Ident,\n+    MacroRulesNormalizedIdent,\n );\n \n impl IntoDiagnosticArg for bool {"}, {"sha": "0440bca53b232c3ab0be43a664db9326cb36679a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -107,14 +107,13 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         ident: Ident,\n-        attrs: Vec<ast::Attribute>,\n         bounds: ast::GenericBounds,\n         default: Option<P<ast::Ty>>,\n     ) -> ast::GenericParam {\n         ast::GenericParam {\n             ident: ident.with_span_pos(span),\n             id: ast::DUMMY_NODE_ID,\n-            attrs: attrs.into(),\n+            attrs: AttrVec::new(),\n             bounds,\n             kind: ast::GenericParamKind::Type { default },\n             is_placeholder: false,"}, {"sha": "0d7e137c7dd0ce5ad099fa107ddd9efe9aa79673", "filename": "compiler/rustc_expand/src/errors.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,48 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::symbol::MacroRulesNormalizedIdent;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::expr_repeat_no_syntax_vars)]\n+pub(crate) struct NoSyntaxVarsExprRepeat {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::must_repeat_once)]\n+pub(crate) struct MustRepeatOnce {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::count_repetition_misplaced)]\n+pub(crate) struct CountRepetitionMisplaced {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::meta_var_expr_unrecognized_var)]\n+pub(crate) struct MetaVarExprUnrecognizedVar {\n+    #[primary_span]\n+    pub span: Span,\n+    pub key: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::var_still_repeating)]\n+pub(crate) struct VarStillRepeating {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::meta_var_dif_seq_matchers)]\n+pub(crate) struct MetaVarsDifSeqMatchers {\n+    #[primary_span]\n+    pub span: Span,\n+    pub msg: String,\n+}"}, {"sha": "e1dde1672c1905daa3677cbbd9d600ff32503fc9", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -25,6 +25,7 @@ pub mod base;\n pub mod build;\n #[macro_use]\n pub mod config;\n+pub mod errors;\n pub mod expand;\n pub mod module;\n pub mod proc_macro;"}, {"sha": "bec6d1a2df7d873301f1d9ebe3568fb8143f574e", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -1,4 +1,8 @@\n use crate::base::ExtCtxt;\n+use crate::errors::{\n+    CountRepetitionMisplaced, MetaVarExprUnrecognizedVar, MetaVarsDifSeqMatchers, MustRepeatOnce,\n+    NoSyntaxVarsExprRepeat, VarStillRepeating,\n+};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, MatchedTokenTree, NamedMatch};\n use crate::mbe::{self, MetaVarExpr};\n use rustc_ast::mut_visit::{self, MutVisitor};\n@@ -165,19 +169,15 @@ pub(super) fn transcribe<'a>(\n             seq @ mbe::TokenTree::Sequence(_, delimited) => {\n                 match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n-                        return Err(cx.struct_span_err(\n-                            seq.span(), /* blame macro writer */\n-                            \"attempted to repeat an expression containing no syntax variables \\\n-                             matched as repeating at this depth\",\n-                        ));\n+                        return Err(cx.create_err(NoSyntaxVarsExprRepeat { span: seq.span() }));\n                     }\n \n                     LockstepIterSize::Contradiction(msg) => {\n                         // FIXME: this really ought to be caught at macro definition time... It\n                         // happens when two meta-variables are used in the same repetition in a\n                         // sequence, but they come from different sequence matchers and repeat\n                         // different amounts.\n-                        return Err(cx.struct_span_err(seq.span(), &msg));\n+                        return Err(cx.create_err(MetaVarsDifSeqMatchers { span: seq.span(), msg }));\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -193,10 +193,7 @@ pub(super) fn transcribe<'a>(\n                                 // FIXME: this really ought to be caught at macro definition\n                                 // time... It happens when the Kleene operator in the matcher and\n                                 // the body for the same meta-variable do not match.\n-                                return Err(cx.struct_span_err(\n-                                    sp.entire(),\n-                                    \"this must repeat at least once\",\n-                                ));\n+                                return Err(cx.create_err(MustRepeatOnce { span: sp.entire() }));\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repetitions so far). `len`\n@@ -239,10 +236,7 @@ pub(super) fn transcribe<'a>(\n                         }\n                         MatchedSeq(..) => {\n                             // We were unable to descend far enough. This is an error.\n-                            return Err(cx.struct_span_err(\n-                                sp, /* blame the macro writer */\n-                                &format!(\"variable '{}' is still repeating at this depth\", ident),\n-                            ));\n+                            return Err(cx.create_err(VarStillRepeating { span: sp, ident }));\n                         }\n                     }\n                 } else {\n@@ -448,10 +442,7 @@ fn count_repetitions<'a>(\n         match matched {\n             MatchedTokenTree(_) | MatchedNonterminal(_) => {\n                 if declared_lhs_depth == 0 {\n-                    return Err(cx.struct_span_err(\n-                        sp.entire(),\n-                        \"`count` can not be placed inside the inner-most repetition\",\n-                    ));\n+                    return Err(cx.create_err(CountRepetitionMisplaced { span: sp.entire() }));\n                 }\n                 match depth_opt {\n                     None => Ok(1),\n@@ -499,12 +490,7 @@ where\n {\n     let span = ident.span;\n     let key = MacroRulesNormalizedIdent::new(ident);\n-    interp.get(&key).ok_or_else(|| {\n-        cx.struct_span_err(\n-            span,\n-            &format!(\"variable `{}` is not recognized in meta-variable expression\", key),\n-        )\n-    })\n+    interp.get(&key).ok_or_else(|| cx.create_err(MetaVarExprUnrecognizedVar { span, key }))\n }\n \n /// Used by meta-variable expressions when an user input is out of the actual declared bounds. For"}, {"sha": "be03c8b5bae98a507cec3b8581bd874cea47338c", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -174,7 +174,14 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn tys(&mut self, pattern: Ty<'tcx>, value: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        if pattern == value { Ok(pattern) } else { relate::super_relate_tys(self, pattern, value) }\n+        if let ty::Error(_) = pattern.kind() {\n+            // Unlike normal `TypeRelation` rules, `ty::Error` does not equal any type.\n+            self.no_match()\n+        } else if pattern == value {\n+            Ok(pattern)\n+        } else {\n+            relate::super_relate_tys(self, pattern, value)\n+        }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "a1c111ae372a80d495bf49b4c0d9995c8a143418", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> ConstValue<'tcx> {\n     }\n \n     pub fn try_to_scalar_int(&self) -> Option<ScalarInt> {\n-        Some(self.try_to_scalar()?.assert_int())\n+        self.try_to_scalar()?.try_to_int().ok()\n     }\n \n     pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n@@ -368,6 +368,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n     }\n \n     #[inline(always)]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn assert_int(self) -> ScalarInt {\n         self.try_to_int().unwrap()\n     }\n@@ -389,6 +390,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n     }\n \n     #[inline(always)]\n+    #[cfg_attr(debug_assertions, track_caller)] // only in debug builds due to perf (see #98980)\n     pub fn assert_bits(self, target_size: Size) -> u128 {\n         self.to_bits(target_size).unwrap()\n     }"}, {"sha": "cac39f8f25fb824de5e96458fdcf004745a46a34", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -34,7 +34,7 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n-    /// If `force_capture` is true, forces collection of tokens regardless of whether\n+    /// If `force_collect` is [`ForceCollect::Yes`], forces collection of tokens regardless of whether\n     /// or not we have attributes\n     pub(crate) fn parse_stmt_without_recovery(\n         &mut self,"}, {"sha": "4175527da470c5298104336c28e2707f96b3d28e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -161,6 +161,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             msg: String,\n             fallback_label: String,\n             span: Span,\n+            span_label: Option<(Span, &'a str)>,\n             could_be_expr: bool,\n             suggestion: Option<(Span, &'a str, String)>,\n         }\n@@ -172,6 +173,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 msg: format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n                 fallback_label: format!(\"not a {expected}\"),\n                 span,\n+                span_label: match res {\n+                    Res::Def(kind, def_id) if kind == DefKind::TyParam => {\n+                        self.def_span(def_id).map(|span| (span, \"found this type pararmeter\"))\n+                    }\n+                    _ => None,\n+                },\n                 could_be_expr: match res {\n                     Res::Def(DefKind::Fn, _) => {\n                         // Verify whether this is a fn call or an Fn used as a type.\n@@ -251,6 +258,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     format!(\"not found in {mod_str}\")\n                 },\n                 span: item_span,\n+                span_label: None,\n                 could_be_expr: false,\n                 suggestion,\n             }\n@@ -262,6 +270,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n \n+        if let Some((span, label)) = base_error.span_label {\n+            err.span_label(span, label);\n+        }\n+\n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);\n         }"}, {"sha": "85a0d4e44990602e6a6bcdb7172bf0057d0f685f", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n }\n \n #[derive(Default)]\n-pub struct SuspendCheckData<'a, 'tcx> {\n+struct SuspendCheckData<'a, 'tcx> {\n     expr: Option<&'tcx Expr<'tcx>>,\n     source_span: Span,\n     yield_span: Span,\n@@ -472,7 +472,7 @@ pub struct SuspendCheckData<'a, 'tcx> {\n //\n // Note that this technique was chosen over things like a `Suspend` marker trait\n // as it is simpler and has precedent in the compiler\n-pub fn check_must_not_suspend_ty<'tcx>(\n+fn check_must_not_suspend_ty<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n     hir_id: HirId,\n@@ -489,6 +489,8 @@ pub fn check_must_not_suspend_ty<'tcx>(\n \n     let plural_suffix = pluralize!(data.plural_len);\n \n+    debug!(\"Checking must_not_suspend for {}\", ty);\n+\n     match *ty.kind() {\n         ty::Adt(..) if ty.is_box() => {\n             let boxed_ty = ty.boxed_ty();\n@@ -580,6 +582,12 @@ pub fn check_must_not_suspend_ty<'tcx>(\n                 },\n             )\n         }\n+        // If drop tracking is enabled, we want to look through references, since the referrent\n+        // may not be considered live across the await point.\n+        ty::Ref(_region, ty, _mutability) if fcx.sess().opts.unstable_opts.drop_tracking => {\n+            let descr_pre = &format!(\"{}reference{} to \", data.descr_pre, plural_suffix);\n+            check_must_not_suspend_ty(fcx, ty, hir_id, SuspendCheckData { descr_pre, ..data })\n+        }\n         _ => false,\n     }\n }"}, {"sha": "1d23ed9292180263f7be92f54688ad83f178f3e1", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -1,5 +1,5 @@\n+use crate::errors::{ExternCrateNotIdiomatic, UnusedExternCrate};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -108,25 +108,16 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         // We do this in any edition.\n         if extern_crate.warn_if_unused {\n             if let Some(&span) = unused_extern_crates.get(&def_id) {\n+                // Removal suggestion span needs to include attributes (Issue #54400)\n                 let id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                tcx.struct_span_lint_hir(lint, id, span, |lint| {\n-                    // Removal suggestion span needs to include attributes (Issue #54400)\n-                    let span_with_attrs = tcx\n-                        .hir()\n-                        .attrs(id)\n-                        .iter()\n-                        .map(|attr| attr.span)\n-                        .fold(span, |acc, attr_span| acc.to(attr_span));\n-\n-                    lint.build(\"unused extern crate\")\n-                        .span_suggestion_short(\n-                            span_with_attrs,\n-                            \"remove it\",\n-                            \"\",\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n+                let span_with_attrs = tcx\n+                    .hir()\n+                    .attrs(id)\n+                    .iter()\n+                    .map(|attr| attr.span)\n+                    .fold(span, |acc, attr_span| acc.to(attr_span));\n+\n+                tcx.emit_spanned_lint(lint, id, span, UnusedExternCrate { span: span_with_attrs });\n                 continue;\n             }\n         }\n@@ -158,23 +149,23 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         if !tcx.hir().attrs(id).is_empty() {\n             continue;\n         }\n-        tcx.struct_span_lint_hir(lint, id, extern_crate.span, |lint| {\n-            // Otherwise, we can convert it into a `use` of some kind.\n-            let base_replacement = match extern_crate.orig_name {\n-                Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n-                None => format!(\"use {};\", item.ident.name),\n-            };\n-            let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n-            let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n-            lint.build(\"`extern crate` is not idiomatic in the new edition\")\n-                .span_suggestion_short(\n-                    extern_crate.span,\n-                    &format!(\"convert it to a `{}`\", add_vis(\"use\".to_string())),\n-                    add_vis(base_replacement),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-        })\n+\n+        let base_replacement = match extern_crate.orig_name {\n+            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.ident.name),\n+            None => format!(\"use {};\", item.ident.name),\n+        };\n+        let vis = tcx.sess.source_map().span_to_snippet(item.vis_span).unwrap_or_default();\n+        let add_vis = |to| if vis.is_empty() { to } else { format!(\"{} {}\", vis, to) };\n+        tcx.emit_spanned_lint(\n+            lint,\n+            id,\n+            extern_crate.span,\n+            ExternCrateNotIdiomatic {\n+                span: extern_crate.span,\n+                msg_code: add_vis(\"use\".to_string()),\n+                suggestion_code: add_vis(base_replacement),\n+            },\n+        );\n     }\n }\n "}, {"sha": "76599721e586f77d60b4a513ecfd4d2940c79444", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -1,6 +1,6 @@\n //! Errors emitted by typeck.\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -324,3 +324,19 @@ pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[lint(typeck::unused_extern_crate)]\n+pub struct UnusedExternCrate {\n+    #[suggestion(applicability = \"machine-applicable\", code = \"\")]\n+    pub span: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[lint(typeck::extern_crate_not_idiomatic)]\n+pub struct ExternCrateNotIdiomatic {\n+    #[suggestion_short(applicability = \"machine-applicable\", code = \"{suggestion_code}\")]\n+    pub span: Span,\n+    pub msg_code: String,\n+    pub suggestion_code: String,\n+}"}, {"sha": "8b204949a6eefe367aa10362a2e4622114067649", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -121,7 +121,10 @@ following files inside:\n \n **`package/meta/package`**\n ```json\n-{\"name\":\"hello_fuchsia\",\"version\":0}\n+{\n+  \"name\": \"hello_fuchsia\",\n+  \"version\": \"0\"\n+}\n ```\n \n The `package` file describes our package's name and version number. Every\n@@ -232,10 +235,17 @@ ${SDK_PATH}/tools/${ARCH}/ffx product-bundle get workstation_eng.qemu-${ARCH}\n ${SDK_PATH}/tools/${ARCH}/ffx emu start workstation_eng.qemu-${ARCH} --headless\n ```\n \n-Then, once the emulator has been started:\n+Once the emulator is running, start a package repository server to serve our\n+package to the emulator:\n \n ```sh\n-${SDK_PATH}/tools/${ARCH}/ffx target repository register\n+${SDK_PATH}/tools/${ARCH}/ffx repository server start\n+```\n+\n+Once the repository server is up and running, register our repository:\n+\n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx target repository register --repository hello-fuchsia\n ```\n \n And watch the logs from the emulator in a separate terminal:\n@@ -253,6 +263,10 @@ ${SDK_PATH}/tools/${ARCH}/ffx component run fuchsia-pkg://hello-fuchsia/hello_fu\n On reruns of the component, the `--recreate` argument may also need to be\n passed.\n \n+```sh\n+${SDK_PATH}/tools/${ARCH}/ffx component run --recreate fuchsia-pkg://hello-fuchsia/hello_fuchsia#meta/hello_fuchsia.cm\n+```\n+\n ## Testing\n \n ### Running unit tests"}, {"sha": "2a38713d43b8a082e025f6a4dc5938a99b354918", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -820,8 +820,6 @@ pub(crate) trait AttributesExt {\n \n     fn inner_docs(&self) -> bool;\n \n-    fn other_attrs(&self) -> Vec<ast::Attribute>;\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>>;\n }\n \n@@ -848,10 +846,6 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == AttrStyle::Inner)\n     }\n \n-    fn other_attrs(&self) -> Vec<ast::Attribute> {\n-        self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n-    }\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>> {\n         let sess = tcx.sess;\n         let doc_cfg_active = tcx.features().doc_cfg;"}, {"sha": "5ad457d547a69bdd3c3427bda54bcaa7091bd182", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -2,7 +2,9 @@ error[E0423]: expected value, found type parameter `T`\n   --> $DIR/issue-69654.rs:5:25\n    |\n LL | impl<T> Bar<T> for [u8; T] {}\n-   |                         ^ not a value\n+   |      -                  ^ not a value\n+   |      |\n+   |      found this type pararmeter\n \n error[E0599]: the function or associated item `foo` exists for struct `Foo<_>`, but its trait bounds were not satisfied\n   --> $DIR/issue-69654.rs:17:10"}, {"sha": "ad11f72a31d37735c9131e087a3b424353e46b63", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -1,6 +1,8 @@\n error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n+LL | fn f<T>() {\n+   |      - found this type pararmeter\n LL |     let t = T { i: 0 };\n    |             ^ not a struct, variant or union type\n "}, {"sha": "1bc4a381257532b8ec646c42df6041bd2a693d05", "filename": "src/test/ui/lint/must_not_suspend/ref-drop-tracking.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+// compile-flags: -Zdrop-tracking\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+struct Bar {\n+    u: Umm,\n+}\n+\n+async fn other() {}\n+\n+impl Bar {\n+    async fn uhoh(&mut self) {\n+        let guard = &mut self.u; //~ ERROR `Umm` held across\n+\n+        other().await;\n+\n+        *guard = Umm {\n+            i: 2\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "c49d27128537155c497ece58431a6814fcea9bdc", "filename": "src/test/ui/lint/must_not_suspend/ref-drop-tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,27 @@\n+error: reference to `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref-drop-tracking.rs:19:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+LL |\n+LL |         other().await;\n+   |                ------ the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ref-drop-tracking.rs:4:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/ref-drop-tracking.rs:19:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/ref-drop-tracking.rs:19:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "29d89718b5867b4213aa2f708e21a14761006903", "filename": "src/test/ui/regions/outlives-with-missing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,16 @@\n+trait HandlerFamily {\n+    type Target;\n+}\n+\n+struct HandlerWrapper<H: HandlerFamily>(H);\n+\n+impl<H: HandlerFamily> HandlerWrapper<H> {\n+    pub fn set_handler(&self, handler: &H::Target)\n+    where\n+        T: Send + Sync + 'static,\n+        //~^ ERROR cannot find type `T` in this scope\n+    {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e204c918724fea5db1f7aceae3e3828b2ff4e01e", "filename": "src/test/ui/regions/outlives-with-missing.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Foutlives-with-missing.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,12 @@\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/outlives-with-missing.rs:10:9\n+   |\n+LL | impl<H: HandlerFamily> HandlerWrapper<H> {\n+   |      - similarly named type parameter `H` defined here\n+...\n+LL |         T: Send + Sync + 'static,\n+   |         ^ help: a type parameter with a similar name exists: `H`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "bd496875e80b948711613fd4661f344028e45700", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,21 @@\n+trait Foo<T> {\n+    fn foo(&self, name: T) -> usize;\n+}\n+\n+struct Bar {\n+    baz: Baz,\n+}\n+\n+struct Baz {\n+    num: usize,\n+}\n+\n+impl<Baz> Foo<Baz> for Bar {\n+    fn foo(&self, _name: Baz) -> usize {\n+        match self.baz {\n+            Baz { num } => num, //~ ERROR expected struct, variant or union type, found type parameter `Baz`\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d9c404e94acb4dfd2e6486c32460f1ca0f604560", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -0,0 +1,12 @@\n+error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n+  --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n+   |\n+LL | impl<Baz> Foo<Baz> for Bar {\n+   |      --- found this type pararmeter\n+...\n+LL |             Baz { num } => num,\n+   |             ^^^ not a struct, variant or union type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0574`."}, {"sha": "ea9c4c82c361068f0b91a7c6900cf1434e2f4ef5", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -2,7 +2,9 @@ error[E0404]: expected trait, found type parameter `Add`\n   --> $DIR/issue-35987.rs:5:21\n    |\n LL | impl<T: Clone, Add> Add for Foo<T> {\n-   |                     ^^^ not a trait\n+   |                ---  ^^^ not a trait\n+   |                |\n+   |                found this type pararmeter\n    |\n help: consider importing this trait instead\n    |"}, {"sha": "764893daa12ad88affa9438271f46ceacc5e3561", "filename": "src/tools/rust-analyzer/bench_data/glorious_old_parser", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftools%2Frust-analyzer%2Fbench_data%2Fglorious_old_parser", "raw_url": "https://github.com/rust-lang/rust/raw/f241c0c43d71960f078b897e9b8721d4b452ce5e/src%2Ftools%2Frust-analyzer%2Fbench_data%2Fglorious_old_parser", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fbench_data%2Fglorious_old_parser?ref=f241c0c43d71960f078b897e9b8721d4b452ce5e", "patch": "@@ -1988,7 +1988,7 @@ impl<'a> Parser<'a> {\n                     err.span_suggestion(\n                         span,\n                         \"declare the type after the parameter binding\",\n-                        String::from(\"<identifier>: <type>\"),\n+                        \"<identifier>: <type>\",\n                         Applicability::HasPlaceholders,\n                     );\n                 } else if require_name && is_trait_item {"}]}