{"sha": "9af17757be1cc3f672928ecf06c40a662c5ec26d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjE3NzU3YmUxY2MzZjY3MjkyOGVjZjA2YzQwYTY2MmM1ZWMyNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-02T15:32:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-02T15:32:08Z"}, "message": "Auto merge of #63692 - iluuu1994:issue-49660, r=sfackler\n\nTest that Wrapping arithmetic ops are implemented for all int types\n\nCloses #49660", "tree": {"sha": "a0dbcad9168bec30ce63a9c17bc70f502e680448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0dbcad9168bec30ce63a9c17bc70f502e680448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af17757be1cc3f672928ecf06c40a662c5ec26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af17757be1cc3f672928ecf06c40a662c5ec26d", "html_url": "https://github.com/rust-lang/rust/commit/9af17757be1cc3f672928ecf06c40a662c5ec26d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af17757be1cc3f672928ecf06c40a662c5ec26d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdaf594bab31eec75fb6d582cd33e5a5b43de7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaf594bab31eec75fb6d582cd33e5a5b43de7f4", "html_url": "https://github.com/rust-lang/rust/commit/fdaf594bab31eec75fb6d582cd33e5a5b43de7f4"}, {"sha": "55800ce899d63dd80ad0c99e5617fc275b5e6644", "url": "https://api.github.com/repos/rust-lang/rust/commits/55800ce899d63dd80ad0c99e5617fc275b5e6644", "html_url": "https://github.com/rust-lang/rust/commit/55800ce899d63dd80ad0c99e5617fc275b5e6644"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "59a10ae99bb6aa5bff9c66a5ebe3b2520a22a807", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af17757be1cc3f672928ecf06c40a662c5ec26d/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af17757be1cc3f672928ecf06c40a662c5ec26d/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=9af17757be1cc3f672928ecf06c40a662c5ec26d", "patch": "@@ -18,6 +18,8 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n+        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n@@ -41,6 +43,8 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n+        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {\n@@ -64,6 +68,8 @@ macro_rules! sh_impl_unsigned {\n                 Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n+        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for Wrapping<$t> {\n@@ -83,6 +89,8 @@ macro_rules! sh_impl_unsigned {\n                 Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n+        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+                #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for Wrapping<$t> {"}, {"sha": "f0bc479ee0ff28d2478b75fec605a5fb377452b0", "filename": "src/test/ui/wrapping-int-combinations.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9af17757be1cc3f672928ecf06c40a662c5ec26d/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af17757be1cc3f672928ecf06c40a662c5ec26d/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrapping-int-combinations.rs?ref=9af17757be1cc3f672928ecf06c40a662c5ec26d", "patch": "@@ -0,0 +1,77 @@\n+// run-pass\n+\n+use std::num::Wrapping;\n+\n+macro_rules! wrapping_operation {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        assert_eq!($result, $lhs $op $rhs);\n+        assert_eq!($result, &$lhs $op $rhs);\n+        assert_eq!($result, $lhs $op &$rhs);\n+        assert_eq!($result, &$lhs $op &$rhs);\n+    };\n+    ($result:expr, $op:tt $expr:expr) => {\n+        assert_eq!($result, $op $expr);\n+        assert_eq!($result, $op &$expr);\n+    };\n+}\n+\n+macro_rules! wrapping_assignment {\n+    ($result:expr, $lhs:ident $op:tt $rhs:expr) => {\n+        let mut lhs1 = $lhs;\n+        lhs1 $op $rhs;\n+        assert_eq!($result, lhs1);\n+\n+        let mut lhs2 = $lhs;\n+        lhs2 $op &$rhs;\n+        assert_eq!($result, lhs2);\n+    };\n+}\n+\n+macro_rules! wrapping_test {\n+    ($type:ty, $min:expr, $max:expr) => {\n+        let zero: Wrapping<$type> = Wrapping(0);\n+        let one: Wrapping<$type> = Wrapping(1);\n+        let min: Wrapping<$type> = Wrapping($min);\n+        let max: Wrapping<$type> = Wrapping($max);\n+\n+        wrapping_operation!(min, max + one);\n+        wrapping_assignment!(min, max += one);\n+        wrapping_operation!(max, min - one);\n+        wrapping_assignment!(max, min -= one);\n+        wrapping_operation!(max, max * one);\n+        wrapping_assignment!(max, max *= one);\n+        wrapping_operation!(max, max / one);\n+        wrapping_assignment!(max, max /= one);\n+        wrapping_operation!(zero, max % one);\n+        wrapping_assignment!(zero, max %= one);\n+        wrapping_operation!(zero, zero & max);\n+        wrapping_assignment!(zero, zero &= max);\n+        wrapping_operation!(max, zero | max);\n+        wrapping_assignment!(max, zero |= max);\n+        wrapping_operation!(zero, max ^ max);\n+        wrapping_assignment!(zero, max ^= max);\n+        wrapping_operation!(zero, zero << 1usize);\n+        wrapping_assignment!(zero, zero <<= 1usize);\n+        wrapping_operation!(zero, zero >> 1usize);\n+        wrapping_assignment!(zero, zero >>= 1usize);\n+        wrapping_operation!(zero, -zero);\n+        wrapping_operation!(max, !min);\n+    };\n+}\n+\n+fn main() {\n+    wrapping_test!(i8, std::i8::MIN, std::i8::MAX);\n+    wrapping_test!(i16, std::i16::MIN, std::i16::MAX);\n+    wrapping_test!(i32, std::i32::MIN, std::i32::MAX);\n+    wrapping_test!(i64, std::i64::MIN, std::i64::MAX);\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    wrapping_test!(i128, std::i128::MIN, std::i128::MAX);\n+    wrapping_test!(isize, std::isize::MIN, std::isize::MAX);\n+    wrapping_test!(u8, std::u8::MIN, std::u8::MAX);\n+    wrapping_test!(u16, std::u16::MIN, std::u16::MAX);\n+    wrapping_test!(u32, std::u32::MIN, std::u32::MAX);\n+    wrapping_test!(u64, std::u64::MIN, std::u64::MAX);\n+    #[cfg(not(target_os = \"emscripten\"))]\n+    wrapping_test!(u128, std::u128::MIN, std::u128::MAX);\n+    wrapping_test!(usize, std::usize::MIN, std::usize::MAX);\n+}"}]}