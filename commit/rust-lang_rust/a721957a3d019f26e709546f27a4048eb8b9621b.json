{"sha": "a721957a3d019f26e709546f27a4048eb8b9621b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MjE5NTdhM2QwMTlmMjZlNzA5NTQ2ZjI3YTQwNDhlYjhiOTYyMWI=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-02T01:08:04Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-04-02T01:08:04Z"}, "message": "Don't introduce a block if a block exists", "tree": {"sha": "30d0c164395b93d0dfdcc972afbad46823544f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d0c164395b93d0dfdcc972afbad46823544f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a721957a3d019f26e709546f27a4048eb8b9621b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a721957a3d019f26e709546f27a4048eb8b9621b", "html_url": "https://github.com/rust-lang/rust/commit/a721957a3d019f26e709546f27a4048eb8b9621b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a721957a3d019f26e709546f27a4048eb8b9621b/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da863487072bf94273862e7eb48bcc392c900234", "url": "https://api.github.com/repos/rust-lang/rust/commits/da863487072bf94273862e7eb48bcc392c900234", "html_url": "https://github.com/rust-lang/rust/commit/da863487072bf94273862e7eb48bcc392c900234"}], "stats": {"total": 252, "additions": 189, "deletions": 63}, "files": [{"sha": "bbe843f468b03d035aec3a5ce893ebc559ef04a7", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -495,10 +495,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n                     let (sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {\n-                            Ok(s) => (\n-                                format!(\"{{ {}; {} }}\", migration_string, s),\n-                                Applicability::MachineApplicable,\n-                            ),\n+                            Ok(s) => {\n+                                let trimmed = s.trim_start();\n+\n+                                // If the closure contains a block then replace the opening brace\n+                                // with \"{ let _ = (..); \"\n+                                let sugg = if let Some('{') = trimmed.chars().next() {\n+                                    format!(\"{{ {}; {}\", migration_string, &trimmed[1..])\n+                                } else {\n+                                    format!(\"{{ {}; {} }}\", migration_string, s)\n+                                };\n+                                (sugg, Applicability::MachineApplicable)\n+                            }\n                             Err(_) => (migration_string.clone(), Applicability::HasPlaceholders),\n                         };\n "}, {"sha": "0f4c7dcb0df1c1429a68eab66de920390f566a84", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -12,14 +12,14 @@ fn test1_all_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1, &t2); {\n+    let c = || { let _ = (&t, &t1, &t2); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -31,13 +31,13 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (String::new(), String::new());\n     let t2 = (String::new(), String::new());\n \n-    let c = || { let _ = (&t, &t1); {\n+    let c = || { let _ = (&t, &t1); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n-    } };\n+    };\n \n     c();\n }\n@@ -47,12 +47,12 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n-    } };\n+    };\n \n     c();\n }\n@@ -65,12 +65,12 @@ fn test4_only_non_copy_types_need_migration() {\n     // `t1` is Copy because all of its elements are Copy\n     let t1 = (0i32, 0i32);\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -83,12 +83,12 @@ fn test5_only_drop_types_need_migration() {\n     // `s` doesn't implement Drop or any elements within it, and doesn't need migration\n     let s = S(0i32, 0i32);\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -98,11 +98,11 @@ fn test5_only_drop_types_need_migration() {\n fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n-    let c = move || { let _ = (&t1, &t); {\n+    let c = move || { let _ = (&t1, &t); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n-    } };\n+    };\n \n     c();\n }\n@@ -113,11 +113,11 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n-    } };\n+    };\n \n     c();\n }"}, {"sha": "253a906a0ec46e9918d090da910602d9368da1a5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -18,7 +18,7 @@ LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: `let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1, &t2); {\n+LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n LL | \n@@ -41,7 +41,7 @@ LL | |     };\n    |\n help: `let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1); {\n+LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n LL |         let _t = t.0;\n@@ -63,12 +63,12 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n LL |         println!(\"{}\", t1.1);\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -85,12 +85,12 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -107,12 +107,12 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n LL |         let _s = s.0;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -128,11 +128,11 @@ LL | |     };\n    |\n help: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n    |\n-LL |     let c = move || { let _ = (&t1, &t); {\n+LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n LL |         println!(\"{} {}\", t1.1, t.1);\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -148,11 +148,11 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     } };\n+LL |     };\n    |\n \n error: aborting due to 7 previous errors"}, {"sha": "f17fab8e81f6da4e45668803f661eeab06f3d2c9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![deny(disjoint_capture_drop_reorder)]\n+//~^ NOTE: the lint level is defined here\n+\n+// Test the two possible cases for automated migartion using rustfix\n+// - Closure contains a block i.e.  `|| { .. };`\n+// - Closure contains just an expr `|| ..;`\n+\n+#[derive(Debug)]\n+struct Foo(i32);\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"{:?} dropped\", self.0);\n+    }\n+}\n+\n+fn closure_contains_block() {\n+    let t = (Foo(0), Foo(0));\n+    let c = || { let _ = &t; \n+        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~| HELP: `let _ = &t` causes `t` to be fully captured\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+fn closure_doesnt_contain_block() {\n+    let t = (Foo(0), Foo(0));\n+    let c = || { let _ = &t; t.0 };\n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+\n+    c();\n+}\n+\n+fn main() {\n+    closure_contains_block();\n+    closure_doesnt_contain_block();\n+}"}, {"sha": "33aff10c520aca14b735e7d27e384c733cecfdfd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![deny(disjoint_capture_drop_reorder)]\n+//~^ NOTE: the lint level is defined here\n+\n+// Test the two possible cases for automated migartion using rustfix\n+// - Closure contains a block i.e.  `|| { .. };`\n+// - Closure contains just an expr `|| ..;`\n+\n+#[derive(Debug)]\n+struct Foo(i32);\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"{:?} dropped\", self.0);\n+    }\n+}\n+\n+fn closure_contains_block() {\n+    let t = (Foo(0), Foo(0));\n+    let c = || {\n+        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~| HELP: `let _ = &t` causes `t` to be fully captured\n+        let _t = t.0;\n+    };\n+\n+    c();\n+}\n+\n+fn closure_doesnt_contain_block() {\n+    let t = (Foo(0), Foo(0));\n+    let c = || t.0;\n+    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~| HELP: `let _ = &t` causes `t` to be fully captured\n+\n+    c();\n+}\n+\n+fn main() {\n+    closure_contains_block();\n+    closure_doesnt_contain_block();\n+}"}, {"sha": "611fbc4fff347faf8df6264edf26e4f7f9fdc6a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -0,0 +1,38 @@\n+error: drop order affected for closure because of `capture_disjoint_fields`\n+  --> $DIR/migrations_rustfix.rs:19:13\n+   |\n+LL |       let c = || {\n+   |  _____________^\n+LL | |\n+LL | |\n+LL | |         let _t = t.0;\n+LL | |     };\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/migrations_rustfix.rs:2:9\n+   |\n+LL | #![deny(disjoint_capture_drop_reorder)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: `let _ = &t` causes `t` to be fully captured\n+   |\n+LL |     let c = || { let _ = &t; \n+LL |\n+LL |\n+LL |         let _t = t.0;\n+LL |     };\n+   |\n+\n+error: drop order affected for closure because of `capture_disjoint_fields`\n+  --> $DIR/migrations_rustfix.rs:30:13\n+   |\n+LL |     let c = || t.0;\n+   |             ^^^^^^\n+   |\n+help: `let _ = &t` causes `t` to be fully captured\n+   |\n+LL |     let c = || { let _ = &t; t.0 };\n+   |                ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "06932c1ae64ad248ab7222862c9233ff914132d7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -16,12 +16,12 @@ struct ConstainsDropField(Foo, Foo);\n fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n-    } };\n+    };\n \n     c();\n }\n@@ -39,13 +39,13 @@ struct U(T, T);\n fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n-    let c = || { let _ = &u; {\n+    let c = || { let _ = &u; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &u` causes `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;\n-    } };\n+    };\n \n     c();\n }"}, {"sha": "fcfd08d61e0e4a2d469bb44596f9df059e26c9d0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -17,12 +17,12 @@ LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n LL |         let _t = &t.1;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -40,7 +40,7 @@ LL | |     };\n    |\n help: `let _ = &u` causes `u` to be fully captured\n    |\n-LL |     let c = || { let _ = &u; {\n+LL |     let c = || { let _ = &u; \n LL |\n LL |\n LL |         let _x = u.0.0;"}, {"sha": "b44624be5f99151c0443c502099e24fce92196b2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -22,13 +22,13 @@ fn test1_all_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1, &t2); {\n+    let c = || { let _ = (&t, &t1, &t2); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP:` let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -40,13 +40,13 @@ fn test2_only_precise_paths_need_migration() {\n     let t1 = (Foo(0), Foo(0));\n     let t2 = (Foo(0), Foo(0));\n \n-    let c = || { let _ = (&t, &t1); {\n+    let c = || { let _ = (&t, &t1); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP:` let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n-    } };\n+    };\n \n     c();\n }\n@@ -56,12 +56,12 @@ fn test2_only_precise_paths_need_migration() {\n fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n-    } };\n+    };\n \n     c();\n }\n@@ -73,11 +73,11 @@ fn test3_only_by_value_need_migration() {\n fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -88,11 +88,11 @@ fn test4_type_contains_drop_need_migration() {\n fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.0;\n-    } };\n+    };\n \n     c();\n }\n@@ -101,11 +101,11 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n-    let c = || { let _ = &t; {\n+    let c = || { let _ = &t; \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = &t` causes `t` to be fully captured\n         let _t = t.1;\n-    } };\n+    };\n \n     c();\n }\n@@ -116,11 +116,11 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n-    let c = move || { let _ = (&t1, &t); {\n+    let c = move || { let _ = (&t1, &t); \n     //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n     //~| HELP: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n-    } };\n+    };\n \n     c();\n }"}, {"sha": "2ca2baa9cbc0726beebe67e649c27bfcbe6fbd19", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a721957a3d019f26e709546f27a4048eb8b9621b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=a721957a3d019f26e709546f27a4048eb8b9621b", "patch": "@@ -18,7 +18,7 @@ LL | #![deny(disjoint_capture_drop_reorder)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: `let _ = (&t, &t1, &t2)` causes `t`, `t1`, `t2` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1, &t2); {\n+LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n LL |         let _t = t.0;\n@@ -41,7 +41,7 @@ LL | |     };\n    |\n help: `let _ = (&t, &t1)` causes `t`, `t1` to be fully captured\n    |\n-LL |     let c = || { let _ = (&t, &t1); {\n+LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n LL |         let _t = t.0;\n@@ -63,12 +63,12 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n LL |         println!(\"{:?}\", t1.1);\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -84,11 +84,11 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -104,11 +104,11 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.0;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -124,11 +124,11 @@ LL | |     };\n    |\n help: `let _ = &t` causes `t` to be fully captured\n    |\n-LL |     let c = || { let _ = &t; {\n+LL |     let c = || { let _ = &t; \n LL |\n LL |\n LL |         let _t = t.1;\n-LL |     } };\n+LL |     };\n    |\n \n error: drop order affected for closure because of `capture_disjoint_fields`\n@@ -144,11 +144,11 @@ LL | |     };\n    |\n help: `let _ = (&t1, &t)` causes `t1`, `t` to be fully captured\n    |\n-LL |     let c = move || { let _ = (&t1, &t); {\n+LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n-LL |     } };\n+LL |     };\n    |\n \n error: aborting due to 7 previous errors"}]}