{"sha": "36775ef0d056b374b8e2b89f7399200e09d4daca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Nzc1ZWYwZDA1NmIzNzRiOGUyYjg5ZjczOTkyMDBlMDlkNGRhY2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-30T11:59:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T11:59:29Z"}, "message": "Merge #4219\n\n4219: Avoid `rustup` invocation for non-rustup rust installation r=matklad a=oxalica\n\nFix #4218 and #3243.\r\n\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>", "tree": {"sha": "3789d3d22ca96cb99ff8b61436726bad29c33dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3789d3d22ca96cb99ff8b61436726bad29c33dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36775ef0d056b374b8e2b89f7399200e09d4daca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqr2hCRBK7hj4Ov3rIwAAdHIIAEZXwB+353IKOqcjcCcFQeot\nIu/azEpznD0HGvyjHbQ3hitSkLWVhv8y0lbvWxGlU7l6l5jjHTdRPRsOQ1jNbJu+\nvNTXNc3Ifk22oxVrjYwvOlyReF4NWWy31V7A9LccOrAIgbszk5B7RIIoAYHhF+W9\nn7D5swaF7aDzITZfiJn+pSmtK1kykxsYJ8ChwlotM6bd3KWnXi5yv3O5kDUw6lel\nNLBYrdgJTbzuqq7EkWdGlThU8yllurxc1ReU1RWZYHOr7dGMySkx98PMf9gshSsz\nqTZZ6Tfcq2wfO5sigCx/1CAsE7Puc0k0tZm6fKiW1GAnniL3wadVyP4O9Rn5K6U=\n=bXQ4\n-----END PGP SIGNATURE-----\n", "payload": "tree 3789d3d22ca96cb99ff8b61436726bad29c33dd9\nparent fdaddb98b57cbdd99eca5a28154b29e775851211\nparent a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588247969 +0000\ncommitter GitHub <noreply@github.com> 1588247969 +0000\n\nMerge #4219\n\n4219: Avoid `rustup` invocation for non-rustup rust installation r=matklad a=oxalica\n\nFix #4218 and #3243.\r\n\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36775ef0d056b374b8e2b89f7399200e09d4daca", "html_url": "https://github.com/rust-lang/rust/commit/36775ef0d056b374b8e2b89f7399200e09d4daca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36775ef0d056b374b8e2b89f7399200e09d4daca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdaddb98b57cbdd99eca5a28154b29e775851211", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaddb98b57cbdd99eca5a28154b29e775851211", "html_url": "https://github.com/rust-lang/rust/commit/fdaddb98b57cbdd99eca5a28154b29e775851211"}, {"sha": "a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a", "html_url": "https://github.com/rust-lang/rust/commit/a1e84516e8c39a0dd65b1cbcb557de63c1d4b90a"}], "stats": {"total": 100, "additions": 67, "deletions": 33}, "files": [{"sha": "bf4d85dcb08d4c5e64cf2d1371b3fb723034d345", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 67, "deletions": 33, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/36775ef0d056b374b8e2b89f7399200e09d4daca/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36775ef0d056b374b8e2b89f7399200e09d4daca/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=36775ef0d056b374b8e2b89f7399200e09d4daca", "patch": "@@ -10,7 +10,6 @@ pub mod pre_commit;\n pub mod codegen;\n mod ast_src;\n \n-use anyhow::Context;\n use std::{\n     env,\n     io::Write,\n@@ -24,9 +23,9 @@ use crate::{\n     not_bash::{date_iso, fs2, pushd, rm_rf, run},\n };\n \n-pub use anyhow::Result;\n+pub use anyhow::{bail, Context as _, Result};\n \n-const TOOLCHAIN: &str = \"stable\";\n+const RUSTFMT_TOOLCHAIN: &str = \"stable\";\n \n pub fn project_root() -> PathBuf {\n     Path::new(\n@@ -57,15 +56,25 @@ pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     let _dir = pushd(project_root());\n     ensure_rustfmt()?;\n \n-    let check = if mode == Mode::Verify { \"--check\" } else { \"\" };\n-    run!(\"rustup run {} -- cargo fmt -- {}\", TOOLCHAIN, check)?;\n-    Ok(())\n+    if Command::new(\"cargo\")\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .args(&[\"fmt\", \"--\"])\n+        .args(if mode == Mode::Verify { &[\"--check\"][..] } else { &[] })\n+        .stderr(Stdio::inherit())\n+        .status()?\n+        .success()\n+    {\n+        Ok(())\n+    } else {\n+        bail!(\"Rustfmt failed\");\n+    }\n }\n \n fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     ensure_rustfmt()?;\n-    let mut rustfmt = Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"rustfmt\", \"--config-path\"])\n+    let mut rustfmt = Command::new(\"rustfmt\")\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .args(&[\"--config-path\"])\n         .arg(project_root().join(\"rustfmt.toml\"))\n         .args(&[\"--config\", \"fn_single_line=true\"])\n         .stdin(Stdio::piped())\n@@ -79,29 +88,42 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n }\n \n fn ensure_rustfmt() -> Result<()> {\n-    match Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"fmt\", \"--version\"])\n+    match Command::new(\"rustfmt\")\n+        .args(&[\"--version\"])\n+        .env(\"RUSTUP_TOOLCHAIN\", RUSTFMT_TOOLCHAIN)\n+        .stdout(Stdio::piped())\n         .stderr(Stdio::null())\n-        .stdout(Stdio::null())\n-        .status()\n+        .spawn()\n+        .and_then(|child| child.wait_with_output())\n     {\n-        Ok(status) if status.success() => return Ok(()),\n-        _ => (),\n-    };\n-    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n-    run!(\"rustup component add rustfmt --toolchain {}\", TOOLCHAIN)?;\n-    Ok(())\n+        Ok(output)\n+            if output.status.success()\n+                && std::str::from_utf8(&output.stdout)?.contains(RUSTFMT_TOOLCHAIN) =>\n+        {\n+            Ok(())\n+        }\n+        _ => {\n+            bail!(\n+                \"Failed to run rustfmt from toolchain '{0}'. \\\n+                Please run `rustup component add rustfmt --toolchain {0}` to install it.\",\n+                RUSTFMT_TOOLCHAIN,\n+            );\n+        }\n+    }\n }\n \n pub fn run_clippy() -> Result<()> {\n-    match Command::new(\"rustup\")\n-        .args(&[\"run\", TOOLCHAIN, \"--\", \"cargo\", \"clippy\", \"--version\"])\n+    match Command::new(\"cargo\")\n+        .args(&[\"clippy\", \"--version\"])\n         .stderr(Stdio::null())\n         .stdout(Stdio::null())\n         .status()\n     {\n         Ok(status) if status.success() => (),\n-        _ => install_clippy().context(\"install clippy\")?,\n+        _ => bail!(\n+            \"Failed run cargo clippy. \\\n+            Please run `rustup component add clippy` to install it.\",\n+        ),\n     };\n \n     let allowed_lints = [\n@@ -110,17 +132,7 @@ pub fn run_clippy() -> Result<()> {\n         \"clippy::nonminimal_bool\",\n         \"clippy::redundant_pattern_matching\",\n     ];\n-    run!(\n-        \"rustup run {} -- cargo clippy --all-features --all-targets -- -A {}\",\n-        TOOLCHAIN,\n-        allowed_lints.join(\" -A \")\n-    )?;\n-    Ok(())\n-}\n-\n-fn install_clippy() -> Result<()> {\n-    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n-    run!(\"rustup component add clippy --toolchain {}\", TOOLCHAIN)?;\n+    run!(\"cargo clippy --all-features --all-targets -- -A {}\", allowed_lints.join(\" -A \"))?;\n     Ok(())\n }\n \n@@ -130,7 +142,29 @@ pub fn run_fuzzer() -> Result<()> {\n         run!(\"cargo install cargo-fuzz\")?;\n     };\n \n-    run!(\"rustup run nightly -- cargo fuzz run parser\")?;\n+    // Expecting nightly rustc\n+    match Command::new(\"rustc\")\n+        .args(&[\"--version\"])\n+        .env(\"RUSTUP_TOOLCHAIN\", \"nightly\")\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::null())\n+        .spawn()\n+        .and_then(|child| child.wait_with_output())\n+    {\n+        Ok(output)\n+            if output.status.success()\n+                && std::str::from_utf8(&output.stdout)?.contains(\"nightly\") => {}\n+        _ => bail!(\"fuzz tests require nightly rustc\"),\n+    }\n+\n+    let status = Command::new(\"cargo\")\n+        .env(\"RUSTUP_TOOLCHAIN\", \"nightly\")\n+        .args(&[\"fuzz\", \"run\", \"parser\"])\n+        .stderr(Stdio::inherit())\n+        .status()?;\n+    if !status.success() {\n+        bail!(\"{}\", status);\n+    }\n     Ok(())\n }\n "}]}