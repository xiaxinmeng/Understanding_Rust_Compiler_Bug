{"sha": "4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOThmNjQxNDIwY2VhYzdjNmNhOTAzZmVlOTNlYTljZTAwYTQ2ZDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-26T13:06:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-26T13:06:21Z"}, "message": "Merge remote-tracking branch 'origin/master' into rustup", "tree": {"sha": "636b7975532236d951f3385b7ce28cdf9cb7d4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636b7975532236d951f3385b7ce28cdf9cb7d4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "html_url": "https://github.com/rust-lang/rust/commit/4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34b9c7b70f52b10becbee7606c10afd13712f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34b9c7b70f52b10becbee7606c10afd13712f95", "html_url": "https://github.com/rust-lang/rust/commit/a34b9c7b70f52b10becbee7606c10afd13712f95"}, {"sha": "09a3f7265e453e2f0327e16ee997d92657b7291c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a3f7265e453e2f0327e16ee997d92657b7291c", "html_url": "https://github.com/rust-lang/rust/commit/09a3f7265e453e2f0327e16ee997d92657b7291c"}], "stats": {"total": 112, "additions": 79, "deletions": 33}, "files": [{"sha": "095af11627fac47e7647f2b5cd4b5a2f70a46a59", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -18,9 +18,8 @@ before_script:\n   if [ \"$TRAVIS_EVENT_TYPE\" = cron ]; then\n     RUST_TOOLCHAIN=nightly\n   else\n-    RUST_TOOLCHAIN=$(cat rust-toolchain)\n+    RUST_TOOLCHAIN=$(cat rust-version)\n   fi\n-- rm rust-toolchain\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n - export PATH=$HOME/.cargo/bin:$PATH"}, {"sha": "0e88c8138a5163ea88dab77bae1b1c0a6f90aec9", "filename": "README.md", "status": "modified", "additions": 72, "deletions": 25, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -7,18 +7,28 @@ undergraduate research course at the [University of Saskatchewan][usask].\n \n ## Building Miri\n \n-I recommend that you install [rustup][rustup] to obtain Rust.  Miri comes with a\n-`rust-toolchain` file so rustup will automatically pick a suitable nightly\n-version.  Then all you have to do is:\n+I recommend that you install [rustup][rustup] to obtain Rust. Then all you have\n+to do is:\n \n ```sh\n-cargo build\n+cargo +nightly build\n ```\n \n+This uses the very latest Rust version.  If you experience any problem, refer to\n+the `rust-version` file which contains a particular Rust nightly version that\n+has been tested against the version of miri you are using.  Make sure to use\n+that particular `nightly-YYYY-MM-DD` whenever the instructions just say\n+`nightly`.\n+\n+To avoid repeating the nightly version all the time, you can use\n+`rustup override set nightly` (or `rustup override set nightly-YYYY-MM-DD`),\n+which means `nightly` Rust will automatically be used whenever you are working\n+in this directory.\n+\n ## Running Miri\n \n ```sh\n-cargo run tests/run-pass/vecs.rs # Or whatever test you like.\n+cargo +nightly run tests/run-pass/vecs.rs # Or whatever test you like.\n ```\n \n ## Running Miri with full libstd\n@@ -28,40 +38,77 @@ Miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n-rustup component add rust-src\n-cargo install xargo\n-xargo/build.sh\n+rustup component add --toolchain nightly rust-src\n+cargo +nightly install xargo\n+rustup run nightly xargo/build.sh\n ```\n \n Now you can run Miri against the libstd compiled by xargo:\n \n ```sh\n-MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n+MIRI_SYSROOT=~/.xargo/HOST cargo +nightly run tests/run-pass-fullmir/hashmap.rs\n ```\n \n-Notice that you will have to re-run the last step of the preparations above when\n-your toolchain changes (e.g., when you update the nightly).\n-\n-You can also set `-Zmiri-start-fn` to make Miri start evaluation with the\n-`start_fn` lang item, instead of starting at the `main` function.\n+Notice that you will have to re-run the last step of the preparations above\n+(`xargo/build.sh`) when your toolchain changes (e.g., when you update the\n+nightly).\n \n ## Running Miri on your own project('s test suite)\n \n-Install Miri as a cargo subcommand with `cargo install --all-features`, and install\n-a full libstd as described above.\n+Install Miri as a cargo subcommand with `cargo install +nightly --all-features\n+--path .`.  Be aware that if you used `rustup override set` to fix a particular\n+Rust version for the miri directory, that will *not* apply to your own project\n+directory!  You have to use a consistent Rust version for building miri and your\n+project for this to work, so remember to either always specify the nightly\n+version manually, overriding it in your project directory as well, or use\n+`rustup default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally\n+make `nightly` the default toolchain.\n \n-Then, inside your own project, use `MIRI_SYSROOT=~/.xargo/HOST cargo +nightly\n-miri` to run your project, if it is a bin project, or run\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test` to run all tests in your\n-project through Miri.\n+We assume that you have prepared a MIR-enabled libstd as described above.  Now\n+compile your project and its dependencies against that libstd:\n \n-## Miri `-Z` flags\n+1. Run `cargo clean` to eliminate any cached dependencies that were built against\n+the non-MIR `libstd`.\n+2. To run all tests in your project through, Miri, use\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test`.\n+3. If you have a binary project, you can run it through Miri using\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri`.\n+\n+### Common Problems\n+\n+When using the above instructions, you may encounter a number of confusing compiler\n+errors.\n+\n+#### \"constant evaluation error: no mir for `<function>`\"\n \n-Miri adds some extra `-Z` flags to control its behavior:\n+You may have forgotten to set `MIRI_SYSROOT` when calling `cargo miri`, and\n+your program called into `std` or `core`. Be sure to set `MIRI_SYSROOT=~/.xargo/HOST`.\n+\n+#### \"found possibly newer version of crate `std` which `<dependency>` depends on\"\n+\n+Your build directory may contain artifacts from an earlier build that did/did not\n+have `MIRI_SYSROOT` set. Run `cargo clean` before switching from non-Miri to Miri\n+builds and vice-versa.\n+\n+#### \"found crate `std` compiled by an incompatible version of rustc\"\n+\n+You may be running `cargo miri` with a different compiler version than the one\n+used to build the MIR-enabled `std`. Be sure to consistently use the same toolchain,\n+which should be the toolchain specified in the `rust-version` file.\n+\n+## Miri `-Z` flags\n \n-* `-Zmiri-start-fn`: This makes interpretation start with `lang_start` (defined\n-  in libstd) instead of starting with `main`.  Requires full MIR!\n-* `-Zmiri-disable-validation` disables enforcing the validity invariant.\n+Several `-Z` flags are relevant for miri:\n+\n+* `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n+  overrides the default to be `0`; be advised that using any higher level can\n+  make miri miss bugs in your program because they got optimized away.\n+* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n+  functions.  This is needed so that miri can execute such functions, so miri\n+  sets this flag per default.\n+* `-Zmiri-disable-validation` is a custom `-Z` flag added by miri.  It disables\n+  enforcing the validity invariant, which is enforced by default.  This is\n+  mostly useful for debugging; it means miri will miss bugs in your program.\n \n ## Development and Debugging\n "}, {"sha": "cf578120c9ddf5937f1cd90db3362743c97b80dc", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -16,7 +16,7 @@ branches:\n install:\n     # install Rust\n     - set PATH=C:\\Program Files\\Git\\mingw64\\bin;C:\\msys64\\mingw%MSYS2_BITS%\\bin;%PATH%\n-    - set /p RUST_TOOLCHAIN=<rust-toolchain\n+    - set /p RUST_TOOLCHAIN=<rust-version\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n     - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_TOOLCHAIN%\n     - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%"}, {"sha": "cc0787f877e6f8f180f944ad750a0d5f7ece4ff7", "filename": "rust-version", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "previous_filename": "rust-toolchain"}, {"sha": "a65329a1e7bb2a71036d579e4752028b34eb49fa", "filename": "src/fn_call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n \n             \"free\" => {\n                 let ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation, no tag\n-                if !ptr.is_null() {\n+                if !ptr.is_null_ptr(&self) {\n                     self.memory_mut().deallocate(\n                         ptr.to_ptr()?.with_default_tag(),\n                         None,\n@@ -355,7 +355,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                 let mut success = None;\n                 {\n                     let name_ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n-                    if !name_ptr.is_null() {\n+                    if !name_ptr.is_null_ptr(&self) {\n                         let name = self.memory().read_c_str(name_ptr.to_ptr()?\n                             .with_default_tag())?.to_owned();\n                         if !name.is_empty() && !name.contains(&b'=') {\n@@ -379,7 +379,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for super::MiriEvalCo\n                     let name_ptr = self.read_scalar(args[0])?.not_undef()?.erase_tag(); // raw ptr operation\n                     let value_ptr = self.read_scalar(args[1])?.to_ptr()?.erase_tag(); // raw ptr operation\n                     let value = self.memory().read_c_str(value_ptr.with_default_tag())?;\n-                    if !name_ptr.is_null() {\n+                    if !name_ptr.is_null_ptr(&self) {\n                         let name = self.memory().read_c_str(name_ptr.to_ptr()?.with_default_tag())?;\n                         if !name.is_empty() && !name.contains(&b'=') {\n                             new = Some((name.to_owned(), value.to_owned()));"}, {"sha": "ee8df3e25ec13d7b620153aec594ff361a4e36a4", "filename": "src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let a = self.read_value(args[0])?;\n                 let b = self.read_value(args[1])?;\n                 // check x % y != 0\n-                if !self.binary_op_val(mir::BinOp::Rem, a, b)?.0.is_null() {\n+                if self.binary_op_val(mir::BinOp::Rem, a, b)?.0.to_bytes()? != 0 {\n                     return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n                 }\n                 self.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;"}, {"sha": "b315e27c45d0a11a40b36c4244237d819436d541", "filename": "src/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a98f641420ceac7c6ca903fee93ea9ce00a46d6/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=4a98f641420ceac7c6ca903fee93ea9ce00a46d6", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> TlsData<'tcx> {\n         for (&key, &mut TlsEntry { ref mut data, dtor }) in\n             thread_local.range_mut((start, Unbounded))\n         {\n-            if !data.is_null() {\n+            if !data.is_null_ptr(cx) {\n                 if let Some(dtor) = dtor {\n                     let ret = Some((dtor, *data, key));\n                     *data = Scalar::ptr_null(cx);"}]}