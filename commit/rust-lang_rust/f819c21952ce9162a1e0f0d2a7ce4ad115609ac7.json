{"sha": "f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTljMjE5NTJjZTkxNjJhMWUwZjBkMmE3Y2U0YWQxMTU2MDlhYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T09:16:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T09:16:48Z"}, "message": "auto merge of #13207 : cmr/rust/attrib-reference, r=kballard", "tree": {"sha": "8ad55c4a31832113a2309664c466aeaf98e4aefd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad55c4a31832113a2309664c466aeaf98e4aefd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "html_url": "https://github.com/rust-lang/rust/commit/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540c2a2a27846044b176f3ef82f5add2d703e10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/540c2a2a27846044b176f3ef82f5add2d703e10c", "html_url": "https://github.com/rust-lang/rust/commit/540c2a2a27846044b176f3ef82f5add2d703e10c"}, {"sha": "b727bb7febf8662ce4b45e46985ff192490cbbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b727bb7febf8662ce4b45e46985ff192490cbbb5", "html_url": "https://github.com/rust-lang/rust/commit/b727bb7febf8662ce4b45e46985ff192490cbbb5"}], "stats": {"total": 299, "additions": 197, "deletions": 102}, "files": [{"sha": "f73b40a3ff47e396edd99216c87f64ce2125ef70", "filename": "src/doc/rust.md", "status": "modified", "additions": 194, "deletions": 100, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "patch": "@@ -610,20 +610,20 @@ and may optionally begin with any number of `attributes` that apply to the conta\n Attributes on the anonymous crate module define important metadata that influences\n the behavior of the compiler.\n \n-~~~~\n-// Package ID\n-#[ crate_id = \"projx#2.5\" ];\n+~~~~ {.rust}\n+// Crate ID\n+#![crate_id = \"projx#2.5\"]\n \n // Additional metadata attributes\n-#[ desc = \"Project X\" ];\n-#[ license = \"BSD\" ];\n-#[ comment = \"This is a comment on Project X.\" ];\n+#![desc = \"Project X\"]\n+#![license = \"BSD\"]\n+#![comment = \"This is a comment on Project X.\"]\n \n // Specify the output type\n-#[ crate_type = \"lib\" ];\n+#![crate_type = \"lib\"]\n \n // Turn on a warning\n-#[ warn(non_camel_case_types) ];\n+#![warn(non_camel_case_types)]\n ~~~~\n \n A crate that contains a `main` function can be compiled to an executable.\n@@ -792,7 +792,7 @@ extern crate std; // equivalent to: extern crate std = \"std\";\n \n extern crate ruststd = \"std\"; // linking to 'std' under another name\n \n-extern crate foo = \"some/where/rust-foo#foo:1.0\"; // a full package ID for external tools\n+extern crate foo = \"some/where/rust-foo#foo:1.0\"; // a full crate ID for external tools\n ~~~~\n \n ##### Use declarations\n@@ -875,7 +875,7 @@ and `extern crate` declarations.\n An example of what will and will not work for `use` items:\n \n ~~~~\n-# #[allow(unused_imports)];\n+# #![allow(unused_imports)]\n use foo::native::start;  // good: foo is at the root of the crate\n use foo::baz::foobaz;    // good: foo is at the root of the crate\n \n@@ -1505,11 +1505,9 @@ specified name.\n extern { }\n ~~~~\n \n-The type of a function\n-declared in an extern block\n-is `extern \"abi\" fn(A1, ..., An) -> R`,\n-where `A1...An` are the declared types of its arguments\n-and `R` is the decalred return type.\n+The type of a function declared in an extern block is `extern \"abi\" fn(A1,\n+..., An) -> R`, where `A1...An` are the declared types of its arguments and\n+`R` is the declared return type.\n \n ## Visibility and Privacy\n \n@@ -1680,77 +1678,139 @@ import public items from their destination, not private items.\n ## Attributes\n \n ~~~~ {.notrust .ebnf .gram}\n-attribute : '#' '[' attr_list ']' ;\n+attribute : '#' '!' ? '[' attr_list ']' ;\n attr_list : attr [ ',' attr_list ]* ;\n attr : ident [ '=' literal\n              | '(' attr_list ')' ] ? ;\n ~~~~\n \n Static entities in Rust -- crates, modules and items -- may have _attributes_\n-applied to them. ^[Attributes in Rust are modeled on Attributes in ECMA-335,\n-C#]\n-An attribute is a general, free-form metadatum that is interpreted according to name, convention, and language and compiler version.\n-Attributes may appear as any of\n+applied to them. Attributes in Rust are modeled on Attributes in ECMA-335,\n+with the syntax coming from ECMA-334 (C#). An attribute is a general,\n+free-form metadatum that is interpreted according to name, convention, and\n+language and compiler version. Attributes may appear as any of:\n \n * A single identifier, the attribute name\n-* An identifier followed by the equals sign '=' and a literal, providing a key/value pair\n+* An identifier followed by the equals sign '=' and a literal, providing a\n+  key/value pair\n * An identifier followed by a parenthesized list of sub-attribute arguments\n \n-Attributes terminated by a semi-colon apply to the entity that the attribute is declared\n-within. Attributes that are not terminated by a semi-colon apply to the next entity.\n+Attributes with a bang (\"!\") after the hash (\"#\") apply to the item that the\n+attribute is declared within. Attributes that do not have a bang after the\n+hash apply to the item that follows the attribute.\n \n An example of attributes:\n \n-~~~~ {.ignore}\n+~~~~ {.rust}\n // General metadata applied to the enclosing module or crate.\n-#[license = \"BSD\"];\n+#![license = \"BSD\"]\n \n // A function marked as a unit test\n #[test]\n fn test_foo() {\n-  ...\n+  /* ... */\n }\n \n // A conditionally-compiled module\n #[cfg(target_os=\"linux\")]\n mod bar {\n-  ...\n+  /* ... */\n }\n \n // A lint attribute used to suppress a warning/error\n #[allow(non_camel_case_types)]\n-pub type int8_t = i8;\n-~~~~\n-\n-> **Note:** In future versions of Rust, user-provided extensions to the compiler\n-> will be able to interpret attributes.  When this facility is provided, the\n-> compiler will distinguish between language-reserved and user-available\n-> attributes.\n-\n-At present, only the Rust compiler interprets attributes, so all attribute names\n-are effectively reserved. Some significant attributes include:\n-\n-* The `doc` attribute, for documenting code in-place.\n-* The `cfg` attribute, for conditional-compilation by build-configuration (see\n-  [Conditional compilation](#conditional-compilation)).\n-* The `crate_id` attribute, for describing the package ID of a crate.\n-* The `lang` attribute, for custom definitions of traits and functions that are\n-  known to the Rust compiler (see [Language items](#language-items)).\n-* The `link` attribute, for describing linkage metadata for a extern blocks.\n-* The `test` attribute, for marking functions as unit tests.\n-* The `allow`, `warn`, `forbid`, and `deny` attributes, for\n-  controlling lint checks (see [Lint check attributes](#lint-check-attributes)).\n-* The `deriving` attribute, for automatically generating implementations of\n-  certain traits.\n-* The `inline` attribute, for expanding functions at caller location (see\n-  [Inline attributes](#inline-attributes)).\n-* The `static_assert` attribute, for asserting that a static bool is true at\n-  compiletime.\n-* The `thread_local` attribute, for defining a `static mut` as a thread-local.\n-  Note that this is only a low-level building block, and is not local to a\n-  *task*, nor does it provide safety.\n-\n-Other attributes may be added or removed during development of the language.\n+type int8_t = i8;\n+~~~~\n+\n+> **Note:** At some point in the future, the compiler will distinguish between\n+> language-reserved and user-available attributes. Until then, there is\n+> effectively no difference between an attribute handled by a loadable syntax\n+> extension and the compiler.\n+\n+### Crate-only attributes\n+\n+- `crate_id` - specify the this crate's crate ID.\n+- `crate_type` - see [linkage](#linkage).\n+- `feature` - see [compiler features](#compiler-features).\n+- `no_main` - disable emitting the `main` symbol. Useful when some other\n+  object being linked to defines `main`.\n+- `no_start` - disable linking to the `native` crate, which specifies the\n+  \"start\" language item.\n+- `no_std` - disable linking to the `std` crate.\n+\n+### Module-only attributes\n+\n+- `macro_escape` - macros defined in this module will be visible in the\n+  module's parent, after this module has been included.\n+- `no_implicit_prelude` - disable injecting `use std::prelude::*` in this\n+  module.\n+- `path` - specifies the file to load the module from. `#[path=\"foo.rs\"] mod\n+  bar;` is equivalent to `mod bar { /* contents of foo.rs */ }`. The path is\n+  taken relative to the directory that the current module is in.\n+\n+### Function-only attributes\n+\n+- `macro_registrar` - when using loadable syntax extensions, mark this\n+  function as the registration point for the current crate's syntax\n+  extensions.\n+- `main` - indicates that this function should be passed to the entry point,\n+  rather than the function in the crate root named `main`.\n+- `start` - indicates that this function should be used as the entry point,\n+  overriding the \"start\" language item.  See the \"start\" [language\n+  item](#language-items) for more details.\n+\n+### Static-only attributes\n+\n+- `address_insignificant` - references to this static may alias with\n+  references to other statics, potentially of unrelated type.\n+- `thread_local` - on a `static mut`, this signals that the value of this\n+  static may change depending on the current thread. The exact consequences of\n+  this are implementation-defined.\n+\n+### FFI attributes\n+\n+On an `extern` block, the following attributes are interpreted:\n+\n+- `link_args` - specify arguments to the linker, rather than just the library\n+  name and type. This is feature gated and the exact behavior is\n+  implementation-defined (due to variety of linker invocation syntax).\n+- `link` - indicate that a native library should be linked to for the\n+  declarations in this block to be linked correctly. See [external\n+  blocks](#external-blocks)\n+\n+On declarations inside an `extern` block, the following attributes are\n+interpreted:\n+\n+- `link_name` - the name of the symbol that this function or static should be\n+  imported as.\n+- `linkage` - on a static, this specifies the [linkage\n+  type](http://llvm.org/docs/LangRef.html#linkage-types).\n+\n+### Miscellaneous attributes\n+\n+- `link_section` - on statics and functions, this specifies the section of the\n+  object file that this item's contents will be placed into.\n+- `macro_export` - export a macro for cross-crate usage.\n+- `no_mangle` - on any item, do not apply the standard name mangling. Set the\n+  symbol for this item to its identifier.\n+- `packed` - on structs or enums, eliminate any padding that would be used to\n+  align fields.\n+- `repr` - on C-like enums, this sets the underlying type used for\n+  representation. Useful for FFI. Takes one argument, which is the primitive\n+  type this enum should be represented for, or `C`, which specifies that it\n+  should be the default `enum` size of the C ABI for that platform. Note that\n+  enum representation in C is undefined, and this may be incorrect when the C\n+  code is compiled with certain flags.\n+- `simd` - on certain tuple structs, derive the arithmetic operators, which\n+  lower to the target's SIMD instructions, if any.\n+- `static_assert` - on statics whose type is `bool`, terminates compilation\n+  with an error if it is not initialized to `true`.\n+- `unsafe_destructor` - allow implementations of the \"drop\" language item\n+  where the type it is implemented for does not implement the \"send\" language\n+  item.\n+- `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n+  destructors from being run twice. Destructors might be run multiple times on\n+  the same object with this attribute.\n \n ### Conditional compilation\n \n@@ -1792,9 +1852,7 @@ one of `foo` and `bar` to be defined (this resembles in the disjunctive normal\n form). Additionally, one can reverse a condition by enclosing it in a\n `not(...)`, like e. g. `#[cfg(not(target_os = \"win32\"))]`.\n \n-To pass a configuration option which triggers a `#[cfg(identifier)]` one can use\n-`rustc --cfg identifier`. In addition to that, the following configurations are\n-pre-defined by the compiler:\n+The following configurations must be defined by the implementation:\n \n  * `target_arch = \"...\"`. Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n    `\"mips\"`, or `\"arm\"`.\n@@ -1806,8 +1864,8 @@ pre-defined by the compiler:\n  * `target_os = \"...\"`. Operating system of the target, examples include\n    `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"` or `\"freebsd\"`.\n  * `target_word_size = \"...\"`. Target word size in bits. This is set to `\"32\"`\n-   for 32-bit CPU targets, and likewise set to `\"64\"` for 64-bit CPU targets.\n- * `test`. Only set in test builds (`rustc --test`).\n+   for targets with 32-bit pointers, and likewise set to `\"64\"` for 64-bit\n+   pointers.\n  * `unix`. See `target_family`.\n  * `windows`. See `target_family`.\n \n@@ -1823,8 +1881,8 @@ For any lint check `C`:\n  * `deny(C)` signals an error after encountering a violation of `C`,\n  * `allow(C)` overrides the check for `C` so that violations will go\n     unreported,\n- * `forbid(C)` is the same as `deny(C)`, but also forbids uses of\n-   `allow(C)` within the entity.\n+ * `forbid(C)` is the same as `deny(C)`, but also forbids changing the lint\n+    level afterwards.\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.\n@@ -1882,11 +1940,11 @@ mod m3 {\n \n ### Language items\n \n-Some primitive Rust operations are defined in Rust code,\n-rather than being implemented directly in C or assembly language.\n-The definitions of these operations have to be easy for the compiler to find.\n-The `lang` attribute makes it possible to declare these operations.\n-For example, the `str` module in the Rust standard library defines the string equality function:\n+Some primitive Rust operations are defined in Rust code, rather than being\n+implemented directly in C or assembly language.  The definitions of these\n+operations have to be easy for the compiler to find.  The `lang` attribute\n+makes it possible to declare these operations.  For example, the `str` module\n+in the Rust standard library defines the string equality function:\n \n ~~~~ {.ignore}\n #[lang=\"str_eq\"]\n@@ -1901,16 +1959,23 @@ when generating calls to the string equality function.\n \n A complete list of the built-in language items follows:\n \n-#### Traits\n+#### Built-in Traits\n \n-`const`\n-  : Cannot be mutated.\n-`owned`\n-  : Are uniquely owned.\n-`durable`\n-  : Contain references.\n+`send`\n+  : Able to be sent across task boundaries.\n+`sized`\n+  : Has a size known at compile time.\n+`copy`\n+  : Types that do not move ownership when used by-value.\n+`share`\n+  : Able to be safely shared between tasks when aliased.\n `drop`\n-  : Have finalizers.\n+  : Have destructors.\n+\n+#### Operators\n+\n+These language items are traits:\n+\n `add`\n   : Elements can be added (for example, integers and floats).\n `sub`\n@@ -1941,17 +2006,54 @@ A complete list of the built-in language items follows:\n   : Elements can be compared for equality.\n `ord`\n   : Elements have a partial ordering.\n+`deref`\n+  : `*` can be applied, yielding a reference to another type\n+`deref_mut`\n+  : `*` can be applied, yielding a mutable reference to another type\n+\n \n-#### Operations\n+These are functions:\n \n `str_eq`\n-  : Compare two strings for equality.\n+  : Compare two strings (`&str`) for equality.\n `uniq_str_eq`\n-  : Compare two owned strings for equality.\n-`annihilate`\n-  : Destroy a box before freeing it.\n-`log_type`\n-  : Generically print a string representation of any type.\n+  : Compare two owned strings (`~str`) for equality.\n+`strdup_uniq`\n+  : Return a new unique string\n+    containing a copy of the contents of a unique string.\n+\n+#### Types\n+\n+`unsafe`\n+  : A type whose contents can be mutated through an immutable reference\n+`type_id`\n+  : The type returned by the `type_id` intrinsic.\n+\n+#### Marker types\n+\n+These types help drive the compiler's analysis\n+\n+`covariant_type`\n+  : The type parameter should be considered covariant\n+`contravariant_type`\n+  : The type parameter should be considered contravariant\n+`invariant_type`\n+  : The type parameter should be considered invariant\n+`covariant_lifetime`\n+  : The lifetime parameter should be considered covariant\n+`contravariant_lifetime`\n+  : The lifetime parameter should be considered contravariant\n+`invariant_lifetime`\n+  : The lifetime parameter should be considered invariant\n+`no_send_bound`\n+  : This type does not implement \"send\", even if eligible\n+`no_copy_bound`\n+  : This type does not implement \"copy\", even if eligible\n+`no_share_bound`\n+  : This type does not implement \"share\", even if eligible\n+`managed_bound`\n+  : This type implements \"managed\"\n+\n `fail_`\n   : Abort the program with an error.\n `fail_bounds_check`\n@@ -1964,15 +2066,6 @@ A complete list of the built-in language items follows:\n   : Allocate memory on the managed heap.\n `free`\n   : Free memory that was allocated on the managed heap.\n-`borrow_as_imm`\n-  : Create an immutable reference to a mutable value.\n-`return_to_mut`\n-  : Release a reference created with `return_to_mut`\n-`check_not_borrowed`\n-  : Fail if a value has existing references to it.\n-`strdup_uniq`\n-  : Return a new unique string\n-    containing a copy of the contents of a unique string.\n \n > **Note:** This list is likely to become out of date. We should auto-generate it\n > from `librustc/middle/lang_items.rs`.\n@@ -2040,6 +2133,7 @@ Supported traits for `deriving` are:\n * `Show`, to format a value using the `{}` formatter.\n \n ### Stability\n+\n One can indicate the stability of an API using the following attributes:\n \n * `deprecated`: This item should no longer be used, e.g. it has been\n@@ -2066,7 +2160,7 @@ be unstable for the purposes of the lint. One can give an optional\n string that will be displayed when the lint flags the use of an item.\n \n ~~~~ {.ignore}\n-#[warn(unstable)];\n+#![warn(unstable)]\n \n #[deprecated=\"replaced by `best`\"]\n fn bad() {\n@@ -2102,18 +2196,18 @@ necessarily ready for every-day use. These features are often of \"prototype\n quality\" or \"almost production ready\", but may not be stable enough to be\n considered a full-fleged language feature.\n \n-For this reason, rust recognizes a special crate-level attribute of the form:\n+For this reason, Rust recognizes a special crate-level attribute of the form:\n \n ~~~~ {.ignore}\n-#[feature(feature1, feature2, feature3)]\n+#![feature(feature1, feature2, feature3)]\n ~~~~\n \n This directive informs the compiler that the feature list: `feature1`,\n `feature2`, and `feature3` should all be enabled. This is only recognized at a\n crate-level, not at a module-level. Without this directive, all features are\n considered off, and using the features will result in a compiler error.\n \n-The currently implemented features of the compiler are:\n+The currently implemented features of the reference compiler are:\n \n * `macro_rules` - The definition of new macros. This does not encompass\n                   macro-invocation, that is always enabled by default, this only\n@@ -3884,7 +3978,7 @@ Rust provides several macros to log information. Here's a simple Rust program\n that demonstrates all four of them:\n \n ~~~~\n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n \n fn main() {"}, {"sha": "26bdf7d7fba6741840fd745db698366014c6de28", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "patch": "@@ -122,7 +122,7 @@\n                        ;; but the \"else\" or \"{\" should align with the beginning\n                        ;; of the expression it's in.)\n                        (looking-at \"\\\\<else\\\\>\\\\|{\")\n-                       \n+\n                        (save-excursion\n                          (rust-rewind-irrelevant)\n                          ;; Point is now at the end of the previous ine"}, {"sha": "7ffa35b94e49118d37f090d86f21a406ba292526", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "patch": "@@ -282,7 +282,7 @@\n     </context>\n \n     <context id=\"attribute\" style-ref=\"attribute\" class=\"attribute\">\n-      <start extended=\"true\">\\#\\[</start>\n+      <start extended=\"true\">\\#!?\\[</start>\n       <end>\\]</end>\n       <include>\n         <context ref=\"def:in-comment\"/>"}, {"sha": "7fc44ebad2955ed5143f18e9e5ec0dea3841a23d", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/f819c21952ce9162a1e0f0d2a7ce4ad115609ac7/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=f819c21952ce9162a1e0f0d2a7ce4ad115609ac7", "patch": "@@ -202,6 +202,7 @@\n \t\t\t<RegExpr String=\"[0-9][0-9_]*\\.[0-9_]*([eE][+-]?[0-9_]+)?(f32|f64|f)?\" attribute=\"Number\" context=\"#stay\"/>\n \t\t\t<RegExpr String=\"[0-9][0-9_]*&rustIntSuf;\" attribute=\"Number\" context=\"#stay\"/>\n \t\t\t<Detect2Chars char=\"#\" char1=\"[\" attribute=\"Attribute\" context=\"Attribute\" beginRegion=\"Attribute\"/>\n+\t\t\t<Detect2Chars char=\"#\" char1=\"!\" char2=\"[\" attribute=\"Attribute\" context=\"Attribute\" beginRegion=\"Attribute\"/>\n \t\t\t<RegExpr String=\"&rustIdent;::\" attribute=\"Scope\"/>\n \t\t\t<RegExpr String=\"&rustIdent;!\" attribute=\"Macro\"/>\n \t\t\t<RegExpr String=\"&apos;&rustIdent;(?!&apos;)\" attribute=\"Lifetime\"/>"}]}