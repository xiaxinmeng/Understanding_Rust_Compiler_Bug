{"sha": "04aa3f7e9b81748c239440b7f78d94971b6bf95e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWEzZjdlOWI4MTc0OGMyMzk0NDBiN2Y3OGQ5NDk3MWI2YmY5NWU=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-07-09T05:51:16Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-07-09T09:24:23Z"}, "message": "`default_numeric_fallback`: Add more tests for floating literal", "tree": {"sha": "5e7bcc3c31a79aa0cd27201ba1e115a114381b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7bcc3c31a79aa0cd27201ba1e115a114381b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04aa3f7e9b81748c239440b7f78d94971b6bf95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04aa3f7e9b81748c239440b7f78d94971b6bf95e", "html_url": "https://github.com/rust-lang/rust/commit/04aa3f7e9b81748c239440b7f78d94971b6bf95e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04aa3f7e9b81748c239440b7f78d94971b6bf95e/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc5abef6219f15929ffb6ff8ddedd998f013c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc5abef6219f15929ffb6ff8ddedd998f013c63", "html_url": "https://github.com/rust-lang/rust/commit/3bc5abef6219f15929ffb6ff8ddedd998f013c63"}], "stats": {"total": 415, "additions": 349, "deletions": 66}, "files": [{"sha": "fff6f95950d96cf0884c0a31d3a43d31e343f14c", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=04aa3f7e9b81748c239440b7f78d94971b6bf95e", "patch": "@@ -0,0 +1,174 @@\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::default_numeric_fallback)]\n+#![allow(unused)]\n+#![allow(clippy::never_loop)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::branches_sharing_code)]\n+#![allow(clippy::branches_sharing_code)]\n+#![allow(clippy::match_single_binding)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+mod basic_expr {\n+    fn test() {\n+        // Should lint unsuffixed literals typed `f64`.\n+        let x = 0.12;\n+        let x = [1., 2., 3.];\n+        let x = if true { (1., 2.) } else { (3., 4.) };\n+        let x = match 1. {\n+            _ => 1.,\n+        };\n+\n+        // Should NOT lint suffixed literals.\n+        let x = 0.12_f64;\n+\n+        // Should NOT lint literals in init expr if `Local` has a type annotation.\n+        let x: f64 = 0.1;\n+        let x: [f64; 3] = [1., 2., 3.];\n+        let x: (f64, f64) = if true { (1., 2.) } else { (3., 4.) };\n+        let x: _ = 1.;\n+    }\n+}\n+\n+mod nested_local {\n+    fn test() {\n+        let x: _ = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1.;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1.\n+        };\n+\n+        let x: _ = if true {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1.;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1.\n+        } else {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1.;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            2.\n+        };\n+    }\n+}\n+\n+mod function_def {\n+    fn ret_f64() -> f64 {\n+        // Even though the output type is specified,\n+        // this unsuffixed literal is linted to reduce heuristics and keep codebase simple.\n+        1.\n+    }\n+\n+    fn test() {\n+        // Should lint this because return type is inferred to `f64` and NOT bound to a concrete\n+        // type.\n+        let f = || -> _ { 1. };\n+\n+        // Even though the output type is specified,\n+        // this unsuffixed literal is linted to reduce heuristics and keep codebase simple.\n+        let f = || -> f64 { 1. };\n+    }\n+}\n+\n+mod function_calls {\n+    fn concrete_arg(f: f64) {}\n+\n+    fn generic_arg<T>(t: T) {}\n+\n+    fn test() {\n+        // Should NOT lint this because the argument type is bound to a concrete type.\n+        concrete_arg(1.);\n+\n+        // Should lint this because the argument type is inferred to `f64` and NOT bound to a concrete type.\n+        generic_arg(1.);\n+\n+        // Should lint this because the argument type is inferred to `f64` and NOT bound to a concrete type.\n+        let x: _ = generic_arg(1.);\n+    }\n+}\n+\n+mod struct_ctor {\n+    struct ConcreteStruct {\n+        x: f64,\n+    }\n+\n+    struct GenericStruct<T> {\n+        x: T,\n+    }\n+\n+    fn test() {\n+        // Should NOT lint this because the field type is bound to a concrete type.\n+        ConcreteStruct { x: 1. };\n+\n+        // Should lint this because the field type is inferred to `f64` and NOT bound to a concrete type.\n+        GenericStruct { x: 1. };\n+\n+        // Should lint this because the field type is inferred to `f64` and NOT bound to a concrete type.\n+        let _ = GenericStruct { x: 1. };\n+    }\n+}\n+\n+mod enum_ctor {\n+    enum ConcreteEnum {\n+        X(f64),\n+    }\n+\n+    enum GenericEnum<T> {\n+        X(T),\n+    }\n+\n+    fn test() {\n+        // Should NOT lint this because the field type is bound to a concrete type.\n+        ConcreteEnum::X(1.);\n+\n+        // Should lint this because the field type is inferred to `f64` and NOT bound to a concrete type.\n+        GenericEnum::X(1.);\n+    }\n+}\n+\n+mod method_calls {\n+    struct StructForMethodCallTest {}\n+\n+    impl StructForMethodCallTest {\n+        fn concrete_arg(&self, f: f64) {}\n+\n+        fn generic_arg<T>(&self, t: T) {}\n+    }\n+\n+    fn test() {\n+        let s = StructForMethodCallTest {};\n+\n+        // Should NOT lint this because the argument type is bound to a concrete type.\n+        s.concrete_arg(1.);\n+\n+        // Should lint this because the argument type is bound to a concrete type.\n+        s.generic_arg(1.);\n+    }\n+}\n+\n+mod in_macro {\n+    macro_rules! internal_macro {\n+        () => {\n+            let x = 22.;\n+        };\n+    }\n+\n+    // Should lint in internal macro.\n+    fn internal() {\n+        internal_macro!();\n+    }\n+\n+    // Should NOT lint in external macro.\n+    fn external() {\n+        default_numeric_fallback!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "aed44843d8908ecab35328756c28bc4fe7347513", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=04aa3f7e9b81748c239440b7f78d94971b6bf95e", "patch": "@@ -0,0 +1,147 @@\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:18:17\n+   |\n+LL |         let x = 0.12;\n+   |                 ^^^^ help: consider adding suffix: `0.12_f64`\n+   |\n+   = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:19:18\n+   |\n+LL |         let x = [1., 2., 3.];\n+   |                  ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:19:22\n+   |\n+LL |         let x = [1., 2., 3.];\n+   |                      ^^ help: consider adding suffix: `2._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:19:26\n+   |\n+LL |         let x = [1., 2., 3.];\n+   |                          ^^ help: consider adding suffix: `3._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:20:28\n+   |\n+LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n+   |                            ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:20:32\n+   |\n+LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n+   |                                ^^ help: consider adding suffix: `2._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:20:46\n+   |\n+LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n+   |                                              ^^ help: consider adding suffix: `3._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:20:50\n+   |\n+LL |         let x = if true { (1., 2.) } else { (3., 4.) };\n+   |                                                  ^^ help: consider adding suffix: `4._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:21:23\n+   |\n+LL |         let x = match 1. {\n+   |                       ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:22:18\n+   |\n+LL |             _ => 1.,\n+   |                  ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:40:21\n+   |\n+LL |             let y = 1.;\n+   |                     ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:48:21\n+   |\n+LL |             let y = 1.;\n+   |                     ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:54:21\n+   |\n+LL |             let y = 1.;\n+   |                     ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:66:9\n+   |\n+LL |         1.\n+   |         ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:72:27\n+   |\n+LL |         let f = || -> _ { 1. };\n+   |                           ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:76:29\n+   |\n+LL |         let f = || -> f64 { 1. };\n+   |                             ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:90:21\n+   |\n+LL |         generic_arg(1.);\n+   |                     ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:93:32\n+   |\n+LL |         let x: _ = generic_arg(1.);\n+   |                                ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:111:28\n+   |\n+LL |         GenericStruct { x: 1. };\n+   |                            ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:114:36\n+   |\n+LL |         let _ = GenericStruct { x: 1. };\n+   |                                    ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:132:24\n+   |\n+LL |         GenericEnum::X(1.);\n+   |                        ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:152:23\n+   |\n+LL |         s.generic_arg(1.);\n+   |                       ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:159:21\n+   |\n+LL |             let x = 22.;\n+   |                     ^^^ help: consider adding suffix: `22._f64`\n+...\n+LL |         internal_macro!();\n+   |         ------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "e84c70c344cbfb8788c73dd31ff45fabaf8dd1da", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "renamed", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=04aa3f7e9b81748c239440b7f78d94971b6bf95e", "patch": "@@ -21,15 +21,10 @@ mod basic_expr {\n             _ => 2,\n         };\n \n-        // Should lint unsuffixed literals typed `f64`.\n-        let x = 0.12;\n-\n         // Should NOT lint suffixed literals.\n         let x = 22_i32;\n-        let x = 0.12_f64;\n \n         // Should NOT lint literals in init expr if `Local` has a type annotation.\n-        let x: f64 = 0.1;\n         let x: [i32; 3] = [1, 2, 3];\n         let x: (i32, i32) = if true { (1, 2) } else { (3, 4) };\n         let x: _ = 1;\n@@ -81,25 +76,17 @@ mod function_def {\n }\n \n mod function_calls {\n-    fn concrete_arg_i32(x: i32) {}\n-\n-    fn concrete_arg_f64(f: f64) {}\n+    fn concrete_arg(x: i32) {}\n \n     fn generic_arg<T>(t: T) {}\n \n     fn test() {\n         // Should NOT lint this because the argument type is bound to a concrete type.\n-        concrete_arg_i32(1);\n-\n-        // Should NOT lint this because the argument type is bound to a concrete type.\n-        concrete_arg_f64(1.);\n+        concrete_arg(1);\n \n         // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n         generic_arg(1);\n \n-        // Should lint this because the argument type is inferred to `f32` and NOT bound to a concrete type.\n-        generic_arg(1.0);\n-\n         // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n         let x: _ = generic_arg(1);\n     }\n@@ -129,7 +116,6 @@ mod struct_ctor {\n mod enum_ctor {\n     enum ConcreteEnum {\n         X(i32),\n-        Y(f64),\n     }\n \n     enum GenericEnum<T> {\n@@ -140,14 +126,8 @@ mod enum_ctor {\n         // Should NOT lint this because the field type is bound to a concrete type.\n         ConcreteEnum::X(1);\n \n-        // Should NOT lint this because the field type is bound to a concrete type.\n-        ConcreteEnum::Y(1.);\n-\n         // Should lint this because the field type is inferred to `i32` and NOT bound to a concrete type.\n         GenericEnum::X(1);\n-\n-        // Should lint this because the field type is inferred to `f64` and NOT bound to a concrete type.\n-        GenericEnum::X(1.);\n     }\n }\n ", "previous_filename": "tests/ui/default_numeric_fallback.rs"}, {"sha": "9b8f232366d8d1ef9e4929caee5eb24b970a6057", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "renamed", "additions": 26, "deletions": 44, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04aa3f7e9b81748c239440b7f78d94971b6bf95e/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=04aa3f7e9b81748c239440b7f78d94971b6bf95e", "patch": "@@ -1,169 +1,151 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:16:17\n+  --> $DIR/default_numeric_fallback_i32.rs:16:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:17:18\n+  --> $DIR/default_numeric_fallback_i32.rs:17:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:17:21\n+  --> $DIR/default_numeric_fallback_i32.rs:17:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:17:24\n+  --> $DIR/default_numeric_fallback_i32.rs:17:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:18:28\n+  --> $DIR/default_numeric_fallback_i32.rs:18:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:18:31\n+  --> $DIR/default_numeric_fallback_i32.rs:18:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:18:44\n+  --> $DIR/default_numeric_fallback_i32.rs:18:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:18:47\n+  --> $DIR/default_numeric_fallback_i32.rs:18:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:19:23\n+  --> $DIR/default_numeric_fallback_i32.rs:19:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:20:13\n+  --> $DIR/default_numeric_fallback_i32.rs:20:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:20:18\n+  --> $DIR/default_numeric_fallback_i32.rs:20:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:21:18\n+  --> $DIR/default_numeric_fallback_i32.rs:21:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:25:17\n-   |\n-LL |         let x = 0.12;\n-   |                 ^^^^ help: consider adding suffix: `0.12_f64`\n-\n-error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:43:21\n+  --> $DIR/default_numeric_fallback_i32.rs:38:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:51:21\n+  --> $DIR/default_numeric_fallback_i32.rs:46:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:57:21\n+  --> $DIR/default_numeric_fallback_i32.rs:52:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:69:9\n+  --> $DIR/default_numeric_fallback_i32.rs:64:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:75:27\n+  --> $DIR/default_numeric_fallback_i32.rs:70:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:79:29\n+  --> $DIR/default_numeric_fallback_i32.rs:74:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:98:21\n+  --> $DIR/default_numeric_fallback_i32.rs:88:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:101:21\n-   |\n-LL |         generic_arg(1.0);\n-   |                     ^^^ help: consider adding suffix: `1.0_f64`\n-\n-error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:104:32\n+  --> $DIR/default_numeric_fallback_i32.rs:91:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:122:28\n+  --> $DIR/default_numeric_fallback_i32.rs:109:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:125:36\n+  --> $DIR/default_numeric_fallback_i32.rs:112:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:147:24\n+  --> $DIR/default_numeric_fallback_i32.rs:130:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:150:24\n-   |\n-LL |         GenericEnum::X(1.);\n-   |                        ^^ help: consider adding suffix: `1._f64`\n-\n-error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:170:23\n+  --> $DIR/default_numeric_fallback_i32.rs:150:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:177:21\n+  --> $DIR/default_numeric_fallback_i32.rs:157:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`\n@@ -173,5 +155,5 @@ LL |         internal_macro!();\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 25 previous errors\n ", "previous_filename": "tests/ui/default_numeric_fallback.stderr"}]}