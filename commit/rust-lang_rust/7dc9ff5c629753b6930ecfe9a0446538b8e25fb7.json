{"sha": "7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzlmZjVjNjI5NzUzYjY5MzBlY2ZlOWEwNDQ2NTM4YjhlMjVmYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T17:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-16T17:52:52Z"}, "message": "Auto merge of #85290 - Amanieu:asm_const_int, r=nagisa\n\nRemove support for floating-point constants in asm!\n\nFloating-point constants aren't very useful anyways and this simplifies\nthe code since the type check can now be done in typeck.\n\ncc `@rust-lang/wg-inline-asm`\n\nr? `@nagisa`", "tree": {"sha": "497b34e49454d1f24eb481c8b546061d6a47d747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497b34e49454d1f24eb481c8b546061d6a47d747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "html_url": "https://github.com/rust-lang/rust/commit/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d", "html_url": "https://github.com/rust-lang/rust/commit/f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d"}, {"sha": "1605e0ec4e21d563703f4504740fa90b16089c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/1605e0ec4e21d563703f4504740fa90b16089c20", "html_url": "https://github.com/rust-lang/rust/commit/1605e0ec4e21d563703f4504740fa90b16089c20"}], "stats": {"total": 161, "additions": 70, "deletions": 91}, "files": [{"sha": "1fa60612d26a35e3f1a8b908b12a18da7d7bc813", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -219,8 +219,6 @@ pub fn asm_const_to_str<'tcx>(\n             ty::IntTy::I128 => (value as i128).to_string(),\n             ty::IntTy::Isize => unreachable!(),\n         },\n-        ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n-        ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n         _ => span_bug!(sp, \"asm const has bad type {}\", ty_and_layout.ty),\n     }\n }"}, {"sha": "012d97ef106c742ac53aa7452398d7645f5763b2", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -347,7 +347,7 @@ impl ExprVisitor<'tcx> {\n     }\n \n     fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, (op, op_sp)) in asm.operands.iter().enumerate() {\n+        for (idx, (op, _)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n@@ -372,19 +372,7 @@ impl ExprVisitor<'tcx> {\n                         );\n                     }\n                 }\n-                hir::InlineAsmOperand::Const { ref anon_const } => {\n-                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n-                    match value.ty.kind() {\n-                        ty::Int(_) | ty::Uint(_) | ty::Float(_) => {}\n-                        _ => {\n-                            let msg =\n-                                \"asm `const` arguments must be integer or floating-point values\";\n-                            self.tcx.sess.span_err(*op_sp, msg);\n-                        }\n-                    }\n-                }\n-                hir::InlineAsmOperand::Sym { .. } => {}\n+                hir::InlineAsmOperand::Const { .. } | hir::InlineAsmOperand::Sym { .. } => {}\n             }\n         }\n     }\n@@ -405,33 +393,6 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n         ExprVisitor { tcx: self.tcx, param_env, typeck_results }.visit_body(body);\n         self.visit_body(body);\n     }\n-\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        if let hir::ItemKind::GlobalAsm(asm) = item.kind {\n-            for (op, op_sp) in asm.operands {\n-                match *op {\n-                    hir::InlineAsmOperand::Const { ref anon_const } => {\n-                        let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                        let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n-                        match value.ty.kind() {\n-                            ty::Int(_) | ty::Uint(_) | ty::Float(_) => {}\n-                            _ => {\n-                                let msg = \"asm `const` arguments must be integer or floating-point values\";\n-                                self.tcx.sess.span_err(*op_sp, msg);\n-                            }\n-                        }\n-                    }\n-                    hir::InlineAsmOperand::In { .. }\n-                    | hir::InlineAsmOperand::Out { .. }\n-                    | hir::InlineAsmOperand::InOut { .. }\n-                    | hir::InlineAsmOperand::SplitInOut { .. }\n-                    | hir::InlineAsmOperand::Sym { .. } => unreachable!(),\n-                }\n-            }\n-        }\n-\n-        intravisit::walk_item(self, item);\n-    }\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {"}, {"sha": "62db535f835fed20e081b78d3b3ea8255961a2be", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -554,10 +554,8 @@ fn typeck_with_fallback<'tcx>(\n                                 _ => false,\n                             }) =>\n                         {\n-                            fcx.next_ty_var(TypeVariableOrigin {\n-                                kind: TypeVariableOriginKind::MiscVariable,\n-                                span,\n-                            })\n+                            // Inline assembly constants must be integers.\n+                            fcx.next_int_var()\n                         }\n                         _ => fallback(),\n                     },"}, {"sha": "5503b3b4b32fbb22247ee97a5be8b788fc07f66c", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -509,7 +509,7 @@ Several types of operands are supported:\n   - Identical to `inout` except that the register allocator can reuse a register allocated to an `in` (this can happen if the compiler knows the `in` has the same initial value as the `inlateout`).\n   - You should only write to the register after all inputs are read, otherwise you may clobber an input.\n * `const <expr>`\n-  - `<expr>` must be an integer or floating-point constant expression.\n+  - `<expr>` must be an integer constant expression.\n   - The value of the expression is formatted as a string and substituted directly into the asm template string.\n * `sym <path>`\n   - `<path>` must refer to a `fn` or `static`."}, {"sha": "5e38fb70a4adfd7240d7506e9ab238d13d52f7ff", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm)]\n+#![feature(asm, global_asm)]\n \n fn main() {\n     unsafe {\n@@ -39,5 +39,25 @@ fn main() {\n         asm!(\"{}\", const const_bar(0));\n         asm!(\"{}\", const const_bar(x));\n         //~^ ERROR attempt to use a non-constant value in a constant\n+\n+        // Const operands must be integers and must be constants.\n+\n+        asm!(\"{}\", const 0);\n+        asm!(\"{}\", const 0i32);\n+        asm!(\"{}\", const 0i128);\n+        asm!(\"{}\", const 0f32);\n+        //~^ ERROR mismatched types\n+        asm!(\"{}\", const 0 as *mut u8);\n+        //~^ ERROR mismatched types\n     }\n }\n+\n+// Const operands must be integers and must be constants.\n+\n+global_asm!(\"{}\", const 0);\n+global_asm!(\"{}\", const 0i32);\n+global_asm!(\"{}\", const 0i128);\n+global_asm!(\"{}\", const 0f32);\n+//~^ ERROR mismatched types\n+global_asm!(\"{}\", const 0 as *mut u8);\n+//~^ ERROR mismatched types"}, {"sha": "ad981d93d514e8e3d1d1985a837055fe4e403593", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -64,7 +64,37 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n-error: aborting due to 8 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:48:26\n+   |\n+LL |         asm!(\"{}\", const 0f32);\n+   |                          ^^^^ expected integer, found `f32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:50:26\n+   |\n+LL |         asm!(\"{}\", const 0 as *mut u8);\n+   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n+   |\n+   = note:     expected type `{integer}`\n+           found raw pointer `*mut u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:60:25\n+   |\n+LL | global_asm!(\"{}\", const 0f32);\n+   |                         ^^^^ expected integer, found `f32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:62:25\n+   |\n+LL | global_asm!(\"{}\", const 0 as *mut u8);\n+   |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n+   |\n+   = note:     expected type `{integer}`\n+           found raw pointer `*mut u8`\n+\n+error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0277, E0435.\n+Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "c70a8802814f7a7553562a668101dd1ff208f9dd", "filename": "src/test/ui/asm/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm, global_asm, repr_simd, never_type)]\n+#![feature(asm, repr_simd, never_type)]\n \n #[repr(simd)]\n struct SimdNonCopy(f32, f32, f32, f32);\n@@ -26,14 +26,6 @@ fn main() {\n         asm!(\"{}\", inout(reg) v[0]);\n         //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n-        // Const operands must be integer or floats, and must be constants.\n-\n-        asm!(\"{}\", const 0);\n-        asm!(\"{}\", const 0i32);\n-        asm!(\"{}\", const 0f32);\n-        asm!(\"{}\", const 0 as *mut u8);\n-        //~^ ERROR asm `const` arguments must be integer or floating-point values\n-\n         // This currently causes an ICE: https://github.com/rust-lang/rust/issues/81857\n         // asm!(\"{}\", const &0);\n         // ERROR asm `const` arguments must be integer or floating-point values\n@@ -90,11 +82,3 @@ fn main() {\n         asm!(\"{}\", in(reg) u);\n     }\n }\n-\n-// Const operands must be integer or floats, and must be constants.\n-\n-global_asm!(\"{}\", const 0);\n-global_asm!(\"{}\", const 0i32);\n-global_asm!(\"{}\", const 0f32);\n-global_asm!(\"{}\", const 0 as *mut u8);\n-//~^ ERROR asm `const` arguments must be integer or floating-point values"}, {"sha": "1354a9dd849b392abd69649bc159eda4532dcd87", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc9ff5c629753b6930ecfe9a0446538b8e25fb7/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=7dc9ff5c629753b6930ecfe9a0446538b8e25fb7", "patch": "@@ -1,27 +1,21 @@\n-error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:34:20\n-   |\n-LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:54:32\n+  --> $DIR/type-check-2.rs:46:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:66:28: 66:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:66:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:58:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:68:28\n+  --> $DIR/type-check-2.rs:60:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -30,51 +24,45 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:70:28\n+  --> $DIR/type-check-2.rs:62:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:72:28\n+  --> $DIR/type-check-2.rs:64:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:80:31\n+  --> $DIR/type-check-2.rs:72:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:83:31\n+  --> $DIR/type-check-2.rs:75:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:99:19\n-   |\n-LL | global_asm!(\"{}\", const 0 as *mut u8);\n-   |                   ^^^^^^^^^^^^^^^^^^\n-\n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:47:24\n+  --> $DIR/type-check-2.rs:39:24\n    |\n LL |         asm!(\"{}\", sym C);\n    |                        ^\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:49:24\n+  --> $DIR/type-check-2.rs:41:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^\n@@ -109,7 +97,7 @@ LL |         let v: Vec<u64> = vec![0, 1, 2];\n LL |         asm!(\"{}\", inout(reg) v[0]);\n    |                               ^ cannot borrow as mutable\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}]}