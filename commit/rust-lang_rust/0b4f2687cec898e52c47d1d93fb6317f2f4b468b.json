{"sha": "0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNGYyNjg3Y2VjODk4ZTUyYzQ3ZDFkOTNmYjYzMTdmMmY0YjQ2OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T13:15:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T13:15:58Z"}, "message": "auto merge of #5470 : sanxiyn/rust/remove-oldmap-2, r=sanxiyn\n\nReferencing #4986.", "tree": {"sha": "a1d2fb954d7c46316056b67dbd3006e6e7d340fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d2fb954d7c46316056b67dbd3006e6e7d340fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "html_url": "https://github.com/rust-lang/rust/commit/0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa2b9980fabff3227d5e5915d1180a0f6922d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa2b9980fabff3227d5e5915d1180a0f6922d37", "html_url": "https://github.com/rust-lang/rust/commit/1fa2b9980fabff3227d5e5915d1180a0f6922d37"}, {"sha": "e2b9cddbbb369fd4aee8714468195d4efc2f86aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b9cddbbb369fd4aee8714468195d4efc2f86aa", "html_url": "https://github.com/rust-lang/rust/commit/e2b9cddbbb369fd4aee8714468195d4efc2f86aa"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "b983fa316d30412f0bde125b03623a4aa93a71c8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "patch": "@@ -21,6 +21,7 @@ use metadata::{creader, cstore, filesearch};\n use metadata;\n use middle::{trans, freevars, kind, ty, typeck, lint, astencode};\n use middle;\n+use util::common::time;\n use util::ppaux;\n \n use core::int;\n@@ -32,7 +33,6 @@ use core::vec;\n use std::getopts::groups::{optopt, optmulti, optflag, optflagopt, getopts};\n use std::getopts::{opt_present};\n use std::getopts;\n-use std;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap;\n@@ -161,16 +161,6 @@ pub fn parse_input(sess: Session, +cfg: ast::crate_cfg, input: input)\n     }\n }\n \n-pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n-    if !do_it { return thunk(); }\n-    let start = std::time::precise_time_s();\n-    let rv = thunk();\n-    let end = std::time::precise_time_s();\n-    io::stdout().write_str(fmt!(\"time: %3.3f s\\t%s\\n\",\n-                                end - start, what));\n-    rv\n-}\n-\n #[deriving_eq]\n pub enum compile_upto {\n     cu_parse,\n@@ -251,11 +241,9 @@ pub fn compile_rest(sess: Session, cfg: ast::crate_cfg,\n         let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n                                 region_map, rp_set, lang_items, crate);\n \n-        let (method_map, vtable_map) =\n-            time(time_passes, ~\"typechecking\", ||\n-                 typeck::check_crate(ty_cx,\n-                                     trait_map,\n-                                     crate));\n+        // passes are timed inside typeck\n+        let (method_map, vtable_map) = typeck::check_crate(\n+            ty_cx, trait_map, crate);\n \n         // These next two const passes can probably be merged\n         time(time_passes, ~\"const marking\", ||"}, {"sha": "2a705a8feb8b8af855fee9d67f975c48ef3b810e", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "patch": "@@ -28,7 +28,7 @@ use core::result::{Result, Ok, Err};\n use core::result;\n use core::uint;\n use core::vec;\n-use std::oldmap::HashMap;\n+use core::hashmap::linear::LinearSet;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n@@ -234,14 +234,14 @@ pub fn lookup_vtable(vcx: &VtableContext,\n         _ => {\n             let mut found = ~[];\n \n-            let mut impls_seen = HashMap();\n+            let mut impls_seen = LinearSet::new();\n \n             match vcx.ccx.coherence_info.extension_methods.find(&trait_id) {\n                 None => {\n                     // Nothing found. Continue.\n                 }\n                 Some(implementations) => {\n-                    let implementations: &mut ~[@Impl] = implementations;\n+                    let implementations: &mut ~[@Impl] = *implementations;\n                     // implementations is the list of all impls in scope for\n                     // trait_ty. (Usually, there's just one.)\n                     for uint::range(0, implementations.len()) |i| {\n@@ -250,10 +250,10 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                         // im is one specific impl of trait_ty.\n \n                         // First, ensure we haven't processed this impl yet.\n-                        if impls_seen.contains_key(&im.did) {\n+                        if impls_seen.contains(&im.did) {\n                             loop;\n                         }\n-                        impls_seen.insert(im.did, ());\n+                        impls_seen.insert(im.did);\n \n                         // ty::impl_traits gives us the list of all\n                         // traits that im implements. Again, usually"}, {"sha": "824ac594e74a8fb264483c83e4fe8e95dc3020f7", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "patch": "@@ -56,7 +56,7 @@ use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n use core::result::Ok;\n-use core::hashmap::linear::LinearSet;\n+use core::hashmap::linear::{LinearMap, LinearSet};\n use core::uint;\n use std::oldmap::HashMap;\n \n@@ -142,18 +142,17 @@ pub fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n pub struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_methods: HashMap<def_id,@mut ~[@Impl]>,\n+    inherent_methods: @mut LinearMap<def_id, @mut ~[@Impl]>,\n \n     // Contains implementations of methods associated with a trait. For these,\n     // the associated trait must be imported at the call site.\n-    extension_methods: HashMap<def_id,@mut ~[@Impl]>,\n-\n+    extension_methods: @mut LinearMap<def_id, @mut ~[@Impl]>,\n }\n \n pub fn CoherenceInfo() -> CoherenceInfo {\n     CoherenceInfo {\n-        inherent_methods: HashMap(),\n-        extension_methods: HashMap(),\n+        inherent_methods: @mut LinearMap::new(),\n+        extension_methods: @mut LinearMap::new(),\n     }\n }\n \n@@ -380,7 +379,7 @@ pub impl CoherenceChecker {\n                     .insert(base_def_id, implementation_list);\n             }\n             Some(existing_implementation_list) => {\n-                implementation_list = existing_implementation_list;\n+                implementation_list = *existing_implementation_list;\n             }\n         }\n \n@@ -397,7 +396,7 @@ pub impl CoherenceChecker {\n                     .insert(trait_id, implementation_list);\n             }\n             Some(existing_implementation_list) => {\n-                implementation_list = existing_implementation_list;\n+                implementation_list = *existing_implementation_list;\n             }\n         }\n \n@@ -472,7 +471,7 @@ pub impl CoherenceChecker {\n \n         match extension_methods.find(&trait_def_id) {\n             Some(impls) => {\n-                let impls: &mut ~[@Impl] = impls;\n+                let impls: &mut ~[@Impl] = *impls;\n                 for uint::range(0, impls.len()) |i| {\n                     f(impls[i]);\n                 }"}, {"sha": "1787c733ed54b804ca7128913d20e89080b0d28b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "patch": "@@ -53,6 +53,7 @@ use core::prelude::*;\n use middle::resolve;\n use middle::ty::{ty_param_substs_and_ty, vstore_uniq};\n use middle::ty;\n+use util::common::time;\n use util::ppaux;\n \n use core::result;\n@@ -329,17 +330,24 @@ pub fn check_crate(tcx: ty::ctxt,\n                    trait_map: resolve::TraitMap,\n                    crate: @ast::crate)\n                 -> (method_map, vtable_map) {\n+    let time_passes = tcx.sess.time_passes();\n     let ccx = @mut CrateCtxt {\n         trait_map: trait_map,\n         method_map: oldmap::HashMap(),\n         vtable_map: oldmap::HashMap(),\n         coherence_info: @coherence::CoherenceInfo(),\n         tcx: tcx\n     };\n-    collect::collect_item_types(ccx, crate);\n-    coherence::check_coherence(ccx, crate);\n \n-    check::check_item_types(ccx, crate);\n+    time(time_passes, ~\"type collecting\", ||\n+        collect::collect_item_types(ccx, crate));\n+\n+    time(time_passes, ~\"method resolution\", ||\n+        coherence::check_coherence(ccx, crate));\n+\n+    time(time_passes, ~\"type checking\", ||\n+        check::check_item_types(ccx, crate));\n+\n     check_for_main_fn(ccx);\n     tcx.sess.abort_if_errors();\n     (ccx.method_map, ccx.vtable_map)"}, {"sha": "1cd3982c7e84be8437dff8ef8247a80362866fd9", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4f2687cec898e52c47d1d93fb6317f2f4b468b/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=0b4f2687cec898e52c47d1d93fb6317f2f4b468b", "patch": "@@ -16,6 +16,16 @@ use syntax::visit;\n \n use core::str;\n use std::oldmap::HashMap;\n+use std;\n+\n+pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n+    if !do_it { return thunk(); }\n+    let start = std::time::precise_time_s();\n+    let rv = thunk();\n+    let end = std::time::precise_time_s();\n+    io::println(fmt!(\"time: %3.3f s\\t%s\", end - start, what));\n+    rv\n+}\n \n pub fn indent<R>(op: &fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`"}]}