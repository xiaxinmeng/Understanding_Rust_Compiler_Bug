{"sha": "7b3e960d9465d6ea4bc051336456ad285779b8f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2U5NjBkOTQ2NWQ2ZWE0YmMwNTEzMzY0NTZhZDI4NTc3OWI4ZjU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-19T11:26:53Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-19T11:26:53Z"}, "message": "Reduce TokenMap size", "tree": {"sha": "cdedef9efe798bce9e997bf96863c862cd2afb93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdedef9efe798bce9e997bf96863c862cd2afb93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3e960d9465d6ea4bc051336456ad285779b8f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3e960d9465d6ea4bc051336456ad285779b8f5", "html_url": "https://github.com/rust-lang/rust/commit/7b3e960d9465d6ea4bc051336456ad285779b8f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3e960d9465d6ea4bc051336456ad285779b8f5/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8935106b395edf3a923b1be6f039a115a9f67144", "url": "https://api.github.com/repos/rust-lang/rust/commits/8935106b395edf3a923b1be6f039a115a9f67144", "html_url": "https://github.com/rust-lang/rust/commit/8935106b395edf3a923b1be6f039a115a9f67144"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "51002e7b87d02e69862d106681b98ce6c9719b21", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b3e960d9465d6ea4bc051336456ad285779b8f5/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3e960d9465d6ea4bc051336456ad285779b8f5/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=7b3e960d9465d6ea4bc051336456ad285779b8f5", "patch": "@@ -16,16 +16,18 @@ use crate::ExpandError;\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum TokenTextRange {\n     Token(TextRange),\n-    Delimiter(TextRange, TextRange),\n+    Delimiter(TextRange),\n }\n \n impl TokenTextRange {\n     pub fn by_kind(self, kind: SyntaxKind) -> Option<TextRange> {\n         match self {\n             TokenTextRange::Token(it) => Some(it),\n-            TokenTextRange::Delimiter(open, close) => match kind {\n-                T!['{'] | T!['('] | T!['['] => Some(open),\n-                T!['}'] | T![')'] | T![']'] => Some(close),\n+            TokenTextRange::Delimiter(it) => match kind {\n+                T!['{'] | T!['('] | T!['['] => Some(TextRange::at(it.start(), 1.into())),\n+                T!['}'] | T![')'] | T![']'] => {\n+                    Some(TextRange::at(it.end() - TextSize::of('}'), 1.into()))\n+                }\n                 _ => None,\n             },\n         }\n@@ -114,8 +116,10 @@ impl TokenMap {\n     pub fn token_by_range(&self, relative_range: TextRange) -> Option<tt::TokenId> {\n         let &(token_id, _) = self.entries.iter().find(|(_, range)| match range {\n             TokenTextRange::Token(it) => *it == relative_range,\n-            TokenTextRange::Delimiter(open, close) => {\n-                *open == relative_range || *close == relative_range\n+            TokenTextRange::Delimiter(it) => {\n+                let open = TextRange::at(it.start(), 1.into());\n+                let close = TextRange::at(it.end() - TextSize::of('}'), 1.into());\n+                open == relative_range || close == relative_range\n             }\n         })?;\n         Some(token_id)\n@@ -137,15 +141,17 @@ impl TokenMap {\n         close_relative_range: TextRange,\n     ) -> usize {\n         let res = self.entries.len();\n-        self.entries\n-            .push((token_id, TokenTextRange::Delimiter(open_relative_range, close_relative_range)));\n+        let cover = open_relative_range.cover(close_relative_range);\n+\n+        self.entries.push((token_id, TokenTextRange::Delimiter(cover)));\n         res\n     }\n \n     fn update_close_delim(&mut self, idx: usize, close_relative_range: TextRange) {\n         let (_, token_text_range) = &mut self.entries[idx];\n-        if let TokenTextRange::Delimiter(dim, _) = token_text_range {\n-            *token_text_range = TokenTextRange::Delimiter(*dim, close_relative_range);\n+        if let TokenTextRange::Delimiter(dim) = token_text_range {\n+            let cover = dim.cover(close_relative_range);\n+            *token_text_range = TokenTextRange::Delimiter(cover);\n         }\n     }\n "}]}