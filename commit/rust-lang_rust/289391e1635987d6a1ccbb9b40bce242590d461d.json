{"sha": "289391e1635987d6a1ccbb9b40bce242590d461d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTM5MWUxNjM1OTg3ZDZhMWNjYmI5YjQwYmNlMjQyNTkwZDQ2MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T17:59:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "use MFile", "tree": {"sha": "2567207cde92e5ef77a2378ef6726eaa548a0dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2567207cde92e5ef77a2378ef6726eaa548a0dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/289391e1635987d6a1ccbb9b40bce242590d461d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/289391e1635987d6a1ccbb9b40bce242590d461d", "html_url": "https://github.com/rust-lang/rust/commit/289391e1635987d6a1ccbb9b40bce242590d461d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/289391e1635987d6a1ccbb9b40bce242590d461d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4161466918baedaeef995040888471a65ca997a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4161466918baedaeef995040888471a65ca997a4", "html_url": "https://github.com/rust-lang/rust/commit/4161466918baedaeef995040888471a65ca997a4"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "1da3fc1c19961bdacbc0eb62a5a44f8970f074b5", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n-use ra_syntax::SyntaxNode;\n+use ra_syntax::{SyntaxNode, SourceFileNode};\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, FileId, Cancelable};\n \n use crate::{\n-    DefLoc, DefId, Name,\n+    DefLoc, DefId, Name, MFileId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n@@ -21,6 +21,10 @@ pub trait HirDatabase: SyntaxDatabase\n     + AsRef<LocationIntener<DefLoc, DefId>>\n     + AsRef<LocationIntener<MacroCallLoc, MacroCallId>>\n {\n+    fn m_source_file(mfile_id: MFileId) -> SourceFileNode {\n+        type MSourceFileQuery;\n+        use fn crate::query_definitions::m_source_file;\n+    }\n     fn expand_macro_invocation(invoc: MacroCallId) -> Option<Arc<MacroExpansion>> {\n         type ExpandMacroCallQuery;\n         use fn crate::macros::expand_macro_invocation;\n@@ -56,7 +60,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn crate::ty::type_for_field;\n     }\n \n-    fn file_items(file_id: FileId) -> Arc<SourceFileItems> {\n+    fn file_items(mfile_id: MFileId) -> Arc<SourceFileItems> {\n         type SourceFileItemsQuery;\n         use fn query_definitions::file_items;\n     }"}, {"sha": "1219b9fbab1f463663bb7c3b26b670883ee02eea", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -57,11 +57,18 @@ pub use self::function::FnSignatureInfo;\n \n /// An `MFileId` is like a `FileId`, but it can also refer to code generated by\n /// macros.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum MFileId {\n     File(FileId),\n     Macro(MacroCallId),\n }\n \n+impl From<FileId> for MFileId {\n+    fn from(file_id: FileId) -> MFileId {\n+        MFileId::File(file_id)\n+    }\n+}\n+\n /// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n /// in a specific module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -163,22 +170,22 @@ pub(crate) type SourceFileItemId = Id<SyntaxNode>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct SourceItemId {\n-    file_id: FileId,\n+    mfile_id: MFileId,\n     /// None for the whole file.\n     item_id: Option<SourceFileItemId>,\n }\n \n /// Maps item's `SyntaxNode`s to `SourceFileItemId` and back.\n #[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n-    file_id: FileId,\n+    mfile_id: MFileId,\n     arena: Arena<SyntaxNode>,\n }\n \n impl SourceFileItems {\n-    fn new(file_id: FileId, source_file: SourceFile) -> SourceFileItems {\n+    fn new(mfile_id: MFileId, source_file: SourceFile) -> SourceFileItems {\n         let mut res = SourceFileItems {\n-            file_id,\n+            mfile_id,\n             arena: Arena::default(),\n         };\n         res.init(source_file);\n@@ -198,11 +205,11 @@ impl SourceFileItems {\n     fn alloc(&mut self, item: SyntaxNode) -> SourceFileItemId {\n         self.arena.alloc(item)\n     }\n-    pub fn id_of(&self, file_id: FileId, item: SyntaxNodeRef) -> SourceFileItemId {\n+    pub fn id_of(&self, mfile_id: MFileId, item: SyntaxNodeRef) -> SourceFileItemId {\n         assert_eq!(\n-            self.file_id, file_id,\n+            self.mfile_id, mfile_id,\n             \"SourceFileItems: wrong file, expected {:?}, got {:?}\",\n-            self.file_id, file_id\n+            self.mfile_id, mfile_id\n         );\n         self.id_of_unchecked(item)\n     }"}, {"sha": "1f141dbac1f40ccf1f7d430cd1d54830d1ebe3a0", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -147,7 +147,9 @@ pub struct MacroExpansion {\n }\n \n impl MacroExpansion {\n-    pub fn file(&self) -> SourceFileNode {\n+    //FIXME: does not really make sense, macro expansion is not neccessary a\n+    //whole file.\n+    pub(crate) fn file(&self) -> SourceFileNode {\n         SourceFileNode::parse(&self.text)\n     }\n "}, {"sha": "dde036f2c5f1b27f81f03efe0b84ad43c0d70875", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -15,6 +15,7 @@ use relative_path::RelativePathBuf;\n use crate::{\n     Def, DefKind, DefLoc, DefId,\n     Name, Path, PathKind, HirDatabase, SourceItemId, SourceFileItemId, Crate,\n+    MFileId,\n     arena::{Arena, Id},\n };\n \n@@ -292,7 +293,10 @@ pub struct ModuleData {\n impl ModuleSource {\n     // precondition: item_id **must** point to module\n     fn new(file_id: FileId, item_id: Option<SourceFileItemId>) -> ModuleSource {\n-        let source_item_id = SourceItemId { file_id, item_id };\n+        let source_item_id = SourceItemId {\n+            mfile_id: file_id.into(),\n+            item_id,\n+        };\n         ModuleSource(source_item_id)\n     }\n \n@@ -306,13 +310,16 @@ impl ModuleSource {\n         m: ast::Module,\n     ) -> ModuleSource {\n         assert!(!m.has_semi());\n-        let file_items = db.file_items(file_id);\n-        let item_id = file_items.id_of(file_id, m.syntax());\n+        let file_items = db.file_items(file_id.into());\n+        let item_id = file_items.id_of(file_id.into(), m.syntax());\n         ModuleSource::new(file_id, Some(item_id))\n     }\n \n     pub fn file_id(self) -> FileId {\n-        self.0.file_id\n+        match self.0.mfile_id {\n+            MFileId::File(file_id) => file_id,\n+            MFileId::Macro(_) => unreachable!(),\n+        }\n     }\n \n     pub(crate) fn resolve(self, db: &impl HirDatabase) -> ModuleSourceNode {"}, {"sha": "94ada73d70f65f99f01da08ad28d1b4b2e7eab43", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -98,7 +98,7 @@ pub struct NamedImport {\n impl NamedImport {\n     pub fn range(&self, db: &impl HirDatabase, file_id: FileId) -> TextRange {\n         let source_item_id = SourceItemId {\n-            file_id,\n+            mfile_id: file_id.into(),\n             item_id: Some(self.file_item_id),\n         };\n         let syntax = db.file_item(source_item_id);\n@@ -360,7 +360,7 @@ where\n                     source_root_id: self.source_root,\n                     module_id,\n                     source_item_id: SourceItemId {\n-                        file_id,\n+                        mfile_id: file_id.into(),\n                         item_id: Some(item.id),\n                     },\n                 };\n@@ -376,7 +376,7 @@ where\n                     source_root_id: self.source_root,\n                     module_id,\n                     source_item_id: SourceItemId {\n-                        file_id,\n+                        mfile_id: file_id.into(),\n                         item_id: Some(item.id),\n                     },\n                 };"}, {"sha": "0c07f1444ef703c7000e7594d3a34c7063609e3a", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -5,13 +5,13 @@ use std::{\n \n use rustc_hash::FxHashMap;\n use ra_syntax::{\n-    AstNode, SyntaxNode,\n+    AstNode, SyntaxNode, SourceFileNode,\n     ast::{self, NameOwner, ModuleItemOwner}\n };\n use ra_db::{SourceRootId, FileId, Cancelable,};\n \n use crate::{\n-    SourceFileItems, SourceItemId, DefKind, Function, DefId, Name, AsName,\n+    SourceFileItems, SourceItemId, DefKind, Function, DefId, Name, AsName, MFileId,\n     db::HirDatabase,\n     function::FnScopes,\n     module::{\n@@ -47,17 +47,29 @@ pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<\n     Ok(Arc::new(EnumData::new(enum_def.borrowed())))\n }\n \n-pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {\n-    let source_file = db.source_file(file_id);\n+pub(super) fn m_source_file(db: &impl HirDatabase, mfile_id: MFileId) -> SourceFileNode {\n+    match mfile_id {\n+        MFileId::File(file_id) => db.source_file(file_id),\n+        MFileId::Macro(m) => {\n+            if let Some(exp) = db.expand_macro_invocation(m) {\n+                return exp.file();\n+            }\n+            SourceFileNode::parse(\"\")\n+        }\n+    }\n+}\n+\n+pub(super) fn file_items(db: &impl HirDatabase, mfile_id: MFileId) -> Arc<SourceFileItems> {\n+    let source_file = db.m_source_file(mfile_id);\n     let source_file = source_file.borrowed();\n-    let res = SourceFileItems::new(file_id, source_file);\n+    let res = SourceFileItems::new(mfile_id, source_file);\n     Arc::new(res)\n }\n \n pub(super) fn file_item(db: &impl HirDatabase, source_item_id: SourceItemId) -> SyntaxNode {\n     match source_item_id.item_id {\n-        Some(id) => db.file_items(source_item_id.file_id)[id].clone(),\n-        None => db.source_file(source_item_id.file_id).syntax().owned(),\n+        Some(id) => db.file_items(source_item_id.mfile_id)[id].clone(),\n+        None => db.m_source_file(source_item_id.mfile_id).syntax().owned(),\n     }\n }\n \n@@ -116,7 +128,7 @@ pub(super) fn input_module_items(\n ) -> Cancelable<Arc<InputModuleItems>> {\n     let module_tree = db.module_tree(source_root)?;\n     let source = module_id.source(&module_tree);\n-    let file_items = db.file_items(source.file_id());\n+    let file_items = db.file_items(source.file_id().into());\n     let res = match source.resolve(db) {\n         ModuleSourceNode::SourceFile(it) => {\n             let items = it.borrowed().items();"}, {"sha": "4a99dff84f706a867c154ea0f636d92492271a79", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289391e1635987d6a1ccbb9b40bce242590d461d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=289391e1635987d6a1ccbb9b40bce242590d461d", "patch": "@@ -102,11 +102,11 @@ pub fn function_from_module(\n     module: &Module,\n     fn_def: ast::FnDef,\n ) -> Function {\n-    let file_id = module.source().file_id();\n-    let file_items = db.file_items(file_id);\n-    let item_id = file_items.id_of(file_id, fn_def.syntax());\n+    let mfile_id = module.source().file_id().into();\n+    let file_items = db.file_items(mfile_id);\n+    let item_id = file_items.id_of(mfile_id, fn_def.syntax());\n     let source_item_id = SourceItemId {\n-        file_id,\n+        mfile_id,\n         item_id: Some(item_id),\n     };\n     let def_loc = DefLoc {"}]}