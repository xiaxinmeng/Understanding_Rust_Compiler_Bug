{"sha": "7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYWRjNzhlYmI0M2IwZWI5YjZjY2YzMTRlMjliZGQyMzcxNzU0MmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-15T15:11:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-15T15:11:36Z"}, "message": "Merge #6242\n\n6242: Diagnost shorthand in patterns r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a8ed4d8e9ff783b8a0ed6a2355580716851dd211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ed4d8e9ff783b8a0ed6a2355580716851dd211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiGapCRBK7hj4Ov3rIwAAdHIIAJa8jEM36HHLXh0W0fsgacao\nzlsnOilNHILVbJ30YlxJTu+GdHmvgT+MgEcB3pr5OCGMyQffZb5TElCu77RkKicf\nuCzhgLjHpuirWpuoP6ht//nJS4wUXpSmVdlw1kFuLZSOjfISWQzsblDMy0yqv3LA\nC8wCHPWyFMjkkyiaIgSvAaujW+4nINmKpwnKbam8ty3EWgpVwo6ZI1tPdgL4nxF+\nKXv/v1OCYNHKvI9QoEO+CoJ2RAVIZzqWzno2HWeUrsqaJV9E4UtQHyzQp12Vk0qs\nwAtEdophysCFZTYeLF7MYduu9XkJDMtDMihgfSZDC7hGJ/xS2ZmfxulRzCbeK8Q=\n=kqDv\n-----END PGP SIGNATURE-----\n", "payload": "tree a8ed4d8e9ff783b8a0ed6a2355580716851dd211\nparent 8090799aa2f2a83746780ebdd7837e0e280c2d2c\nparent 3086fb2ef4064ab7daa8194a8d57c742849ca900\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602774696 +0000\ncommitter GitHub <noreply@github.com> 1602774696 +0000\n\nMerge #6242\n\n6242: Diagnost shorthand in patterns r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "html_url": "https://github.com/rust-lang/rust/commit/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8090799aa2f2a83746780ebdd7837e0e280c2d2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8090799aa2f2a83746780ebdd7837e0e280c2d2c", "html_url": "https://github.com/rust-lang/rust/commit/8090799aa2f2a83746780ebdd7837e0e280c2d2c"}, {"sha": "3086fb2ef4064ab7daa8194a8d57c742849ca900", "url": "https://api.github.com/repos/rust-lang/rust/commits/3086fb2ef4064ab7daa8194a8d57c742849ca900", "html_url": "https://github.com/rust-lang/rust/commit/3086fb2ef4064ab7daa8194a8d57c742849ca900"}], "stats": {"total": 301, "additions": 210, "deletions": 91}, "files": [{"sha": "1e5ea4617b79baeffd7f95dec978f8009a404987", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 91, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "patch": "@@ -5,6 +5,7 @@\n //! original files. So we need to map the ranges.\n \n mod fixes;\n+mod field_shorthand;\n \n use std::cell::RefCell;\n \n@@ -80,7 +81,7 @@ pub(crate) fn diagnostics(\n \n     for node in parse.tree().syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, &node);\n-        check_struct_shorthand_initialization(&mut res, file_id, &node);\n+        field_shorthand::check(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n     let sink_builder = DiagnosticSinkBuilder::new()\n@@ -188,42 +189,6 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n     None\n }\n \n-fn check_struct_shorthand_initialization(\n-    acc: &mut Vec<Diagnostic>,\n-    file_id: FileId,\n-    node: &SyntaxNode,\n-) -> Option<()> {\n-    let record_lit = ast::RecordExpr::cast(node.clone())?;\n-    let record_field_list = record_lit.record_expr_field_list()?;\n-    for record_field in record_field_list.fields() {\n-        if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {\n-            let field_name = name_ref.syntax().text().to_string();\n-            let field_expr = expr.syntax().text().to_string();\n-            let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n-            if field_name == field_expr && !field_name_is_tup_index {\n-                let mut edit_builder = TextEdit::builder();\n-                edit_builder.delete(record_field.syntax().text_range());\n-                edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n-                let edit = edit_builder.finish();\n-\n-                let field_range = record_field.syntax().text_range();\n-                acc.push(Diagnostic {\n-                    // name: None,\n-                    range: field_range,\n-                    message: \"Shorthand struct initialization\".to_string(),\n-                    severity: Severity::WeakWarning,\n-                    fix: Some(Fix::new(\n-                        \"Use struct shorthand initialization\",\n-                        SourceFileEdit { file_id, edit }.into(),\n-                        field_range,\n-                    )),\n-                });\n-            }\n-        }\n-    }\n-    Some(())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -237,7 +202,7 @@ mod tests {\n     ///  * a diagnostic is produced\n     ///  * this diagnostic fix trigger range touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n-    fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n+    pub(super) fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = fixture::position(ra_fixture_before);\n@@ -319,7 +284,7 @@ mod tests {\n \n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n-    fn check_no_diagnostics(ra_fixture: &str) {\n+    pub(crate) fn check_no_diagnostics(ra_fixture: &str) {\n         let (analysis, files) = fixture::files(ra_fixture);\n         let diagnostics = files\n             .into_iter()\n@@ -719,58 +684,6 @@ mod a {\n         );\n     }\n \n-    #[test]\n-    fn test_check_struct_shorthand_initialization() {\n-        check_no_diagnostics(\n-            r#\"\n-struct A { a: &'static str }\n-fn main() { A { a: \"hello\" } }\n-\"#,\n-        );\n-        check_no_diagnostics(\n-            r#\"\n-struct A(usize);\n-fn main() { A { 0: 0 } }\n-\"#,\n-        );\n-\n-        check_fix(\n-            r#\"\n-struct A { a: &'static str }\n-fn main() {\n-    let a = \"haha\";\n-    A { a<|>: a }\n-}\n-\"#,\n-            r#\"\n-struct A { a: &'static str }\n-fn main() {\n-    let a = \"haha\";\n-    A { a }\n-}\n-\"#,\n-        );\n-\n-        check_fix(\n-            r#\"\n-struct A { a: &'static str, b: &'static str }\n-fn main() {\n-    let a = \"haha\";\n-    let b = \"bb\";\n-    A { a<|>: a, b }\n-}\n-\"#,\n-            r#\"\n-struct A { a: &'static str, b: &'static str }\n-fn main() {\n-    let a = \"haha\";\n-    let b = \"bb\";\n-    A { a, b }\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn test_add_field_from_usage() {\n         check_fix("}, {"sha": "2c4acd783d1dfe3e5195c245f3c3c425ee8c55f9", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "patch": "@@ -0,0 +1,206 @@\n+//! Suggests shortening `Foo { field: field }` to `Foo { field }` in both\n+//! expressions and patterns.\n+\n+use base_db::FileId;\n+use ide_db::source_change::SourceFileEdit;\n+use syntax::{ast, match_ast, AstNode, SyntaxNode};\n+use text_edit::TextEdit;\n+\n+use crate::{Diagnostic, Fix, Severity};\n+\n+pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n+    match_ast! {\n+        match node {\n+            ast::RecordExpr(it) => check_expr_field_shorthand(acc, file_id, it),\n+            ast::RecordPat(it) => check_pat_field_shorthand(acc, file_id, it),\n+            _ => ()\n+        }\n+    };\n+}\n+\n+fn check_expr_field_shorthand(\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+    record_expr: ast::RecordExpr,\n+) {\n+    let record_field_list = match record_expr.record_expr_field_list() {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    for record_field in record_field_list.fields() {\n+        let (name_ref, expr) = match record_field.name_ref().zip(record_field.expr()) {\n+            Some(it) => it,\n+            None => continue,\n+        };\n+\n+        let field_name = name_ref.syntax().text().to_string();\n+        let field_expr = expr.syntax().text().to_string();\n+        let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n+        if field_name != field_expr || field_name_is_tup_index {\n+            continue;\n+        }\n+\n+        let mut edit_builder = TextEdit::builder();\n+        edit_builder.delete(record_field.syntax().text_range());\n+        edit_builder.insert(record_field.syntax().text_range().start(), field_name);\n+        let edit = edit_builder.finish();\n+\n+        let field_range = record_field.syntax().text_range();\n+        acc.push(Diagnostic {\n+            // name: None,\n+            range: field_range,\n+            message: \"Shorthand struct initialization\".to_string(),\n+            severity: Severity::WeakWarning,\n+            fix: Some(Fix::new(\n+                \"Use struct shorthand initialization\",\n+                SourceFileEdit { file_id, edit }.into(),\n+                field_range,\n+            )),\n+        });\n+    }\n+}\n+\n+fn check_pat_field_shorthand(\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+    record_pat: ast::RecordPat,\n+) {\n+    let record_pat_field_list = match record_pat.record_pat_field_list() {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    for record_pat_field in record_pat_field_list.fields() {\n+        let (name_ref, pat) = match record_pat_field.name_ref().zip(record_pat_field.pat()) {\n+            Some(it) => it,\n+            None => continue,\n+        };\n+\n+        let field_name = name_ref.syntax().text().to_string();\n+        let field_pat = pat.syntax().text().to_string();\n+        let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n+        if field_name != field_pat || field_name_is_tup_index {\n+            continue;\n+        }\n+\n+        let mut edit_builder = TextEdit::builder();\n+        edit_builder.delete(record_pat_field.syntax().text_range());\n+        edit_builder.insert(record_pat_field.syntax().text_range().start(), field_name);\n+        let edit = edit_builder.finish();\n+\n+        let field_range = record_pat_field.syntax().text_range();\n+        acc.push(Diagnostic {\n+            // name: None,\n+            range: field_range,\n+            message: \"Shorthand struct pattern\".to_string(),\n+            severity: Severity::WeakWarning,\n+            fix: Some(Fix::new(\n+                \"Use struct field shorthand\",\n+                SourceFileEdit { file_id, edit }.into(),\n+                field_range,\n+            )),\n+        });\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::{check_fix, check_no_diagnostics};\n+\n+    #[test]\n+    fn test_check_expr_field_shorthand() {\n+        check_no_diagnostics(\n+            r#\"\n+struct A { a: &'static str }\n+fn main() { A { a: \"hello\" } }\n+\"#,\n+        );\n+        check_no_diagnostics(\n+            r#\"\n+struct A(usize);\n+fn main() { A { 0: 0 } }\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str }\n+fn main() {\n+    let a = \"haha\";\n+    A { a<|>: a }\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str }\n+fn main() {\n+    let a = \"haha\";\n+    A { a }\n+}\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn main() {\n+    let a = \"haha\";\n+    let b = \"bb\";\n+    A { a<|>: a, b }\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn main() {\n+    let a = \"haha\";\n+    let b = \"bb\";\n+    A { a, b }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_check_pat_field_shorthand() {\n+        check_no_diagnostics(\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) { let A { a: hello } = a; }\n+\"#,\n+        );\n+        check_no_diagnostics(\n+            r#\"\n+struct A(usize);\n+fn f(a: A) { let A { 0: 0 } = a; }\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) {\n+    let A { a<|>: a } = a;\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) {\n+    let A { a } = a;\n+}\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn f(a: A) {\n+    let A { a<|>: a, b } = a;\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn f(a: A) {\n+    let A { a, b } = a;\n+}\n+\"#,\n+        );\n+    }\n+}"}]}