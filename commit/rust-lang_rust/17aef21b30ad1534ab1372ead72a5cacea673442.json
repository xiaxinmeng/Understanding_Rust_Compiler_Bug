{"sha": "17aef21b30ad1534ab1372ead72a5cacea673442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YWVmMjFiMzBhZDE1MzRhYjEzNzJlYWQ3MmE1Y2FjZWE2NzM0NDI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-05T22:58:59Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-21T18:27:29Z"}, "message": "Remove `NonMacroAttr.mark_used`", "tree": {"sha": "407dcb89bfa9ec185ec3cdbb838505fc2000b28f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407dcb89bfa9ec185ec3cdbb838505fc2000b28f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17aef21b30ad1534ab1372ead72a5cacea673442", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmEhRZEACgkQtAh+UQ6Y\nsWQEQg//T34WwOifF19Whq11qOgBCA6Id66iY78R0b9uelGwvvbsDR/46peliOFM\n8QDvKVOy+cm+7qTrFGayxfvrX/q6QO6Ey5L6rK96DNjmPIE4LFgeFrHNkhn4UVDw\nNhrsF8TkdnDWUyEFS+LPvuRPesqUGVuSqUM9yrubpGkBjFRYVdSx0L/Th1xiiVxA\nIZLtQJ0ruaC9toY1iBvqiNBA2SQrpsdHVcbkkdPAQ7wnsYingS22mh/WBazAB/Lp\n6060RMecnRSL8FIgEfrMlqSK8PwworX4TwbUMVCsr5DAiMzRk8JBlh0yk5zdtwUy\nmUEud/9xtZChw394b+liTfGhBqYbdzs8mbHZ3Tr6jniXf474LnH+OggmNCMbMtuz\nNoDMjEgcLvwLG68FDfknhhfC9EBwYi/LE0MsrEfyv/gjBRRF7tW1djZLfKmxfCcB\nGcPlAJpp6Bt9GVqQ2Ure+IHlbFfUgNObwPJId6NVJbk6qmiRlCWsT32eqX0Lo0+j\nSqzHzaUc9Cu8Mj4AQ9NoXCrPIrnPL4rhQq0WoIvNA2T/Gq+oNzbv96VrLAjnP6qt\n0rPZ0noGfjSJcsbE0bi4grC0w9wu/3bAxqkZBGGN+R+pwHZJdsaxdPLD9a+dwfOm\nex5yxPgvyTDaKkso35JJHm9sQrpeYABVlCIGkOYil7jRaX2rzkk=\n=v/0E\n-----END PGP SIGNATURE-----", "payload": "tree 407dcb89bfa9ec185ec3cdbb838505fc2000b28f\nparent af46699f8104ba5257d0da56d3d817bf8fc751cf\nauthor Aaron Hill <aa1ronham@gmail.com> 1628204339 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1629570449 -0500\n\nRemove `NonMacroAttr.mark_used`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17aef21b30ad1534ab1372ead72a5cacea673442", "html_url": "https://github.com/rust-lang/rust/commit/17aef21b30ad1534ab1372ead72a5cacea673442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17aef21b30ad1534ab1372ead72a5cacea673442/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af46699f8104ba5257d0da56d3d817bf8fc751cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/af46699f8104ba5257d0da56d3d817bf8fc751cf", "html_url": "https://github.com/rust-lang/rust/commit/af46699f8104ba5257d0da56d3d817bf8fc751cf"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "a4b7bdd9155ccebd08ce38e2499c587e37556213", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=17aef21b30ad1534ab1372ead72a5cacea673442", "patch": "@@ -654,10 +654,7 @@ pub enum SyntaxExtensionKind {\n     /// A trivial attribute \"macro\" that does nothing,\n     /// only keeps the attribute and marks it as inert,\n     /// thus making it ineligible for further expansion.\n-    NonMacroAttr {\n-        /// Suppresses the `unused_attributes` lint for this attribute.\n-        mark_used: bool,\n-    },\n+    NonMacroAttr,\n \n     /// A token-based derive macro.\n     Derive(\n@@ -706,7 +703,7 @@ impl SyntaxExtension {\n             SyntaxExtensionKind::Bang(..) | SyntaxExtensionKind::LegacyBang(..) => MacroKind::Bang,\n             SyntaxExtensionKind::Attr(..)\n             | SyntaxExtensionKind::LegacyAttr(..)\n-            | SyntaxExtensionKind::NonMacroAttr { .. } => MacroKind::Attr,\n+            | SyntaxExtensionKind::NonMacroAttr => MacroKind::Attr,\n             SyntaxExtensionKind::Derive(..) | SyntaxExtensionKind::LegacyDerive(..) => {\n                 MacroKind::Derive\n             }\n@@ -812,8 +809,8 @@ impl SyntaxExtension {\n         SyntaxExtension::default(SyntaxExtensionKind::Derive(Box::new(expander)), edition)\n     }\n \n-    pub fn non_macro_attr(mark_used: bool, edition: Edition) -> SyntaxExtension {\n-        SyntaxExtension::default(SyntaxExtensionKind::NonMacroAttr { mark_used }, edition)\n+    pub fn non_macro_attr(edition: Edition) -> SyntaxExtension {\n+        SyntaxExtension::default(SyntaxExtensionKind::NonMacroAttr, edition)\n     }\n \n     pub fn expn_data("}, {"sha": "16e086e32f63da9f3551003da2f614ef2a516828", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=17aef21b30ad1534ab1372ead72a5cacea673442", "patch": "@@ -753,7 +753,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         }\n                     }\n                 }\n-                SyntaxExtensionKind::NonMacroAttr { mark_used: _ } => {\n+                SyntaxExtensionKind::NonMacroAttr => {\n                     self.cx.expanded_inert_attrs.mark(&attr);\n                     item.visit_attrs(|attrs| attrs.insert(pos, attr));\n                     fragment_kind.expect_from_annotatables(iter::once(item))"}, {"sha": "2ee483d850e7b4ef156e27b48706685be3805fcc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=17aef21b30ad1534ab1372ead72a5cacea673442", "patch": "@@ -195,7 +195,7 @@ impl<'a> Resolver<'a> {\n     crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n         match res {\n             Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),\n-            Res::NonMacroAttr(attr_kind) => Some(self.non_macro_attr(attr_kind.is_used())),\n+            Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),\n             _ => None,\n         }\n     }"}, {"sha": "1f176a1a8f28353d1c2b3f745fd07d499829ba47", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17aef21b30ad1534ab1372ead72a5cacea673442/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=17aef21b30ad1534ab1372ead72a5cacea673442", "patch": "@@ -968,7 +968,7 @@ pub struct Resolver<'a> {\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n-    non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n+    non_macro_attr: Lrc<SyntaxExtension>,\n     local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n     ast_transform_scopes: FxHashMap<LocalExpnId, Module<'a>>,\n     unused_macros: FxHashMap<LocalDefId, (NodeId, Span)>,\n@@ -1293,8 +1293,6 @@ impl<'a> Resolver<'a> {\n             macros::registered_attrs_and_tools(session, &krate.attrs);\n \n         let features = session.features_untracked();\n-        let non_macro_attr =\n-            |mark_used| Lrc::new(SyntaxExtension::non_macro_attr(mark_used, session.edition()));\n \n         let mut resolver = Resolver {\n             session,\n@@ -1361,7 +1359,7 @@ impl<'a> Resolver<'a> {\n             macro_map: FxHashMap::default(),\n             dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),\n             dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),\n-            non_macro_attrs: [non_macro_attr(false), non_macro_attr(true)],\n+            non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),\n             invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n@@ -1476,15 +1474,11 @@ impl<'a> Resolver<'a> {\n         self.crate_loader.cstore()\n     }\n \n-    fn non_macro_attr(&self, mark_used: bool) -> Lrc<SyntaxExtension> {\n-        self.non_macro_attrs[mark_used as usize].clone()\n-    }\n-\n     fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {\n         match macro_kind {\n             MacroKind::Bang => self.dummy_ext_bang.clone(),\n             MacroKind::Derive => self.dummy_ext_derive.clone(),\n-            MacroKind::Attr => self.non_macro_attr(true),\n+            MacroKind::Attr => self.non_macro_attr.clone(),\n         }\n     }\n "}]}