{"sha": "857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1N2ExMmEwMWVkOGE5MjQ5Y2VhOGY0OGIzOWEwZjhiZGZkOTVjYmQ=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-13T04:33:10Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-13T04:33:10Z"}, "message": "Expand the \"Traits\" section of the reference.", "tree": {"sha": "8ab0f4c58806764207cfe75c46e36ca5587e9445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab0f4c58806764207cfe75c46e36ca5587e9445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "html_url": "https://github.com/rust-lang/rust/commit/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd/comments", "author": null, "committer": null, "parents": [{"sha": "c2b30b86df6b34ba19e87e63402e43d9e81a64fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b30b86df6b34ba19e87e63402e43d9e81a64fb", "html_url": "https://github.com/rust-lang/rust/commit/c2b30b86df6b34ba19e87e63402e43d9e81a64fb"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "03b5530983697e68972ebbdda0d662d8a3a2971a", "filename": "src/doc/reference.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=857a12a01ed8a9249cea8f48b39a0f8bdfd95cbd", "patch": "@@ -1346,6 +1346,8 @@ vtable when the trait is used as a [trait object](#trait-objects).\n Traits are implemented for specific types through separate\n [implementations](#implementations).\n \n+Consider the following trait:\n+\n ```\n # type Surface = i32;\n # type BoundingBox = i32;\n@@ -1360,6 +1362,20 @@ This defines a trait with two methods. All values that have\n `draw` and `bounding_box` methods called, using `value.bounding_box()`\n [syntax](#method-call-expressions).\n \n+Traits can include default implementations of methods, as in:\n+\n+```\n+trait Foo {\n+    fn bar(&self);\n+\n+    fn baz(&self) { println!(\"We called baz.\"); }\n+}\n+```\n+\n+Here the `baz` method has a default implementation, so types that implement\n+`Foo` need only implement `bar`. It is also possible for implementing types\n+to override a method that has a default implementation.\n+\n Type parameters can be specified for a trait to make it generic. These appear\n after the trait name, using the same syntax used in [generic\n functions](#generic-functions).\n@@ -1372,6 +1388,30 @@ trait Seq<T> {\n }\n ```\n \n+It is also possible to define associated types for a trait. Consider the\n+following example of a `Container` trait. Notice how the type is available\n+for use in the method signatures:\n+\n+```\n+trait Container {\n+    type E;\n+    fn empty() -> Self;\n+    fn insert(&mut self, Self::E);\n+}\n+```\n+\n+In order for a type to implement this trait, it must not only provide\n+implementations for every method, but it must specify the type `E`. Here's\n+an implementation of `Container` for the standard library type `Vec`:\n+\n+```\n+impl<T> Container for Vec<T> {\n+    type E = T;\n+    fn empty() -> Vec<T> { Vec::new() }\n+    fn insert(&mut self, x: T) { self.push(x); }\n+}\n+```\n+\n Generic functions may use traits as _bounds_ on their type parameters. This\n will have two effects: only types that have the trait may instantiate the\n parameter, and within the generic function, the methods of the trait can be"}]}