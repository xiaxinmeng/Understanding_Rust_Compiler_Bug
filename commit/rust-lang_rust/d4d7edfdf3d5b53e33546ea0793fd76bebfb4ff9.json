{"sha": "d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "node_id": "C_kwDOAAsO6NoAKGQ0ZDdlZGZkZjNkNWI1M2UzMzU0NmVhMDc5M2ZkNzZiZWJmYjRmZjk", "commit": {"author": {"name": "LevitatingLion", "email": "levitatinglion@web.de", "date": "2023-02-24T02:13:24Z"}, "committer": {"name": "LevitatingLion", "email": "levitatinglion@web.de", "date": "2023-02-24T03:18:38Z"}, "message": "Use pointers to `c_char` instead of `i8` in `miri_host_to_target_path`\n\nThis makes sure that the interface of `miri_host_to_target_path` is compatible with `CStr` for targets where `c_char` is unsigned (such as ARM). This commit changes the signature of `miri_host_to_target_path` in the README and in all test cases.", "tree": {"sha": "1e4939628c7e00ee77a8773104696a734ad6f184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e4939628c7e00ee77a8773104696a734ad6f184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "html_url": "https://github.com/rust-lang/rust/commit/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/comments", "author": {"login": "LevitatingLion", "id": 21149108, "node_id": "MDQ6VXNlcjIxMTQ5MTA4", "avatar_url": "https://avatars.githubusercontent.com/u/21149108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LevitatingLion", "html_url": "https://github.com/LevitatingLion", "followers_url": "https://api.github.com/users/LevitatingLion/followers", "following_url": "https://api.github.com/users/LevitatingLion/following{/other_user}", "gists_url": "https://api.github.com/users/LevitatingLion/gists{/gist_id}", "starred_url": "https://api.github.com/users/LevitatingLion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LevitatingLion/subscriptions", "organizations_url": "https://api.github.com/users/LevitatingLion/orgs", "repos_url": "https://api.github.com/users/LevitatingLion/repos", "events_url": "https://api.github.com/users/LevitatingLion/events{/privacy}", "received_events_url": "https://api.github.com/users/LevitatingLion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LevitatingLion", "id": 21149108, "node_id": "MDQ6VXNlcjIxMTQ5MTA4", "avatar_url": "https://avatars.githubusercontent.com/u/21149108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LevitatingLion", "html_url": "https://github.com/LevitatingLion", "followers_url": "https://api.github.com/users/LevitatingLion/followers", "following_url": "https://api.github.com/users/LevitatingLion/following{/other_user}", "gists_url": "https://api.github.com/users/LevitatingLion/gists{/gist_id}", "starred_url": "https://api.github.com/users/LevitatingLion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LevitatingLion/subscriptions", "organizations_url": "https://api.github.com/users/LevitatingLion/orgs", "repos_url": "https://api.github.com/users/LevitatingLion/repos", "events_url": "https://api.github.com/users/LevitatingLion/events{/privacy}", "received_events_url": "https://api.github.com/users/LevitatingLion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80f5272c6b4a29f4f6479d63a5753ed9b697d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80f5272c6b4a29f4f6479d63a5753ed9b697d8c", "html_url": "https://github.com/rust-lang/rust/commit/a80f5272c6b4a29f4f6479d63a5753ed9b697d8c"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "9bd8ed1c4997e8f31f457818f430f3db1157c5f4", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -590,7 +590,7 @@ extern \"Rust\" {\n     /// `out` must point to at least `out_size` many bytes, and the result will be stored there\n     /// with a null terminator.\n     /// Returns 0 if the `out` buffer was large enough, and the required size otherwise.\n-    fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+    fn miri_host_to_target_path(path: *const c_char, out: *mut c_char, out_size: usize) -> usize;\n }\n ```\n "}, {"sha": "048577ef15a611f55fac354d7876fa1c81c94d16", "filename": "src/tools/miri/test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsrc%2Fmain.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -23,16 +23,16 @@ fn main() {\n     // (We rely on the test runner to always disable isolation when passing no arguments.)\n     if std::env::args().len() <= 1 {\n         fn host_to_target_path(path: String) -> PathBuf {\n-            use std::ffi::{CStr, CString};\n+            use std::ffi::{c_char, CStr, CString};\n \n             let path = CString::new(path).unwrap();\n             let mut out = Vec::with_capacity(1024);\n \n             unsafe {\n                 extern \"Rust\" {\n                     fn miri_host_to_target_path(\n-                        path: *const i8,\n-                        out: *mut i8,\n+                        path: *const c_char,\n+                        out: *mut c_char,\n                         out_size: usize,\n                     ) -> usize;\n                 }"}, {"sha": "52161098788b50b4b41dac12edb9678e820e8e54", "filename": "src/tools/miri/test-cargo-miri/subcrate/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Fmain.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -5,16 +5,16 @@ fn main() {\n     println!(\"subcrate running\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "1681c721dc2e22ae912bb97d860eb288a937b71d", "filename": "src/tools/miri/test-cargo-miri/subcrate/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Fsubcrate%2Ftest.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -8,16 +8,16 @@ fn main() {\n     println!(\"subcrate testing\");\n \n     fn host_to_target_path(path: String) -> PathBuf {\n-        use std::ffi::{CStr, CString};\n+        use std::ffi::{c_char, CStr, CString};\n \n         let path = CString::new(path).unwrap();\n         let mut out = Vec::with_capacity(1024);\n \n         unsafe {\n             extern \"Rust\" {\n                 fn miri_host_to_target_path(\n-                    path: *const i8,\n-                    out: *mut i8,\n+                    path: *const c_char,\n+                    out: *mut c_char,\n                     out_size: usize,\n                 ) -> usize;\n             }"}, {"sha": "cd071a7f32ac1f0a913437f172bd0caf9c4f4fcf", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -5,7 +5,7 @@\n #![feature(io_error_uncategorized)]\n \n use std::convert::TryInto;\n-use std::ffi::{CStr, CString};\n+use std::ffi::{c_char, CStr, CString};\n use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n@@ -31,7 +31,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "98e1c3a0adb2ecef8e009918c4b5845661632bd9", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -7,7 +7,7 @@ use std::os::unix::io::AsRawFd;\n use std::path::PathBuf;\n \n fn tmp() -> PathBuf {\n-    use std::ffi::{CStr, CString};\n+    use std::ffi::{c_char, CStr, CString};\n \n     let path = std::env::var(\"MIRI_TEMP\")\n         .unwrap_or_else(|_| std::env::temp_dir().into_os_string().into_string().unwrap());\n@@ -17,7 +17,11 @@ fn tmp() -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}, {"sha": "7a9974f393895e44ddcbebbcd79db21014a4ce4f", "filename": "src/tools/miri/tests/pass/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ffs.rs?ref=d4d7edfdf3d5b53e33546ea0793fd76bebfb4ff9", "patch": "@@ -6,7 +6,7 @@\n #![feature(is_terminal)]\n \n use std::collections::HashMap;\n-use std::ffi::OsString;\n+use std::ffi::{c_char, OsString};\n use std::fs::{\n     canonicalize, create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename,\n     File, OpenOptions,\n@@ -39,7 +39,11 @@ fn host_to_target_path(path: String) -> PathBuf {\n \n     unsafe {\n         extern \"Rust\" {\n-            fn miri_host_to_target_path(path: *const i8, out: *mut i8, out_size: usize) -> usize;\n+            fn miri_host_to_target_path(\n+                path: *const c_char,\n+                out: *mut c_char,\n+                out_size: usize,\n+            ) -> usize;\n         }\n         let ret = miri_host_to_target_path(path.as_ptr(), out.as_mut_ptr(), out.capacity());\n         assert_eq!(ret, 0);"}]}