{"sha": "d0766079833e70b25f081db59105888b9e986f18", "node_id": "C_kwDOAAsO6NoAKGQwNzY2MDc5ODMzZTcwYjI1ZjA4MWRiNTkxMDU4ODhiOWU5ODZmMTg", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-05-09T18:34:01Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-05-09T18:34:01Z"}, "message": "Don't force include Windows goop when documenting", "tree": {"sha": "8ad9914753595c1f5701979ca378666042aa5c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad9914753595c1f5701979ca378666042aa5c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0766079833e70b25f081db59105888b9e986f18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmRakh4ACgkQcTRy8vRW\nJ96UQA//ZHlw3L0Giu2GgV4s0GzyLaRpcY4vs5o4O5iLewAKr2TQpmrJeN4PmtzG\n+vlbeS4fQP+hZpGbyAUBSerguFyM06kM+tOotlCU8nmp0RYzYIO8P7ZvyBqSNR3s\ntxJf7347vEDZPCseXBrSMEYGpMPqYxJ9lEKakiMcK2l08xSWliktNEGgcXnaJmMh\nMuVRQkKzZPHUCqgew2mEuFH5POStQliUyaacgq86QbgwXzu4urJMNEfeynFkNq+g\nZ6M8AmsuDBLEFWTc7K2VWmWB8ay3vTx9qjY8/GFaS+FDX3GqwOfo/6f+F5I5znEm\nRANqFLzgoPIW/jGwi2aL92cRgXNmc8Ie7HKdiMY8eUfUtVTP8ts4nXt3g+Cm9Xxq\nmL6blIQ2jEfM5yndwxxvhG07nSTnjwnogjZSD5nlwTFPD4yMIrct4nMeDQWVvixI\nCPPXWMwW8m1nFejx9WzLuvJnTHf/KpY/hq5jpVnPd768rqNQXCkaJkWszch2Atf0\nYedo8wI1Yy/iAw0kUk0hx2fV4BURls0Y1g8/6fgq6jilAbjd8Rb/iQN7Ydgr1JWH\nQVRXvO1fVlaiCHTWSiq56ShztUs/9wDxUAl6pl70FsMaC2KXtPAYYu3s3BTLgSSu\nwPe7ozw6f5/RfpAmIuX98o3+GMwdvdvFTYur911kMJ+qDgdDQMQ=\n=iKkm\n-----END PGP SIGNATURE-----", "payload": "tree 8ad9914753595c1f5701979ca378666042aa5c41\nparent 3a37c2f0523c87147b64f1b8099fc9df22e8c53e\nauthor Chris Denton <chris@chrisdenton.dev> 1683657241 +0100\ncommitter Chris Denton <chris@chrisdenton.dev> 1683657241 +0100\n\nDon't force include Windows goop when documenting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0766079833e70b25f081db59105888b9e986f18", "html_url": "https://github.com/rust-lang/rust/commit/d0766079833e70b25f081db59105888b9e986f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0766079833e70b25f081db59105888b9e986f18/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "html_url": "https://github.com/rust-lang/rust/commit/3a37c2f0523c87147b64f1b8099fc9df22e8c53e"}], "stats": {"total": 99, "additions": 40, "deletions": 59}, "files": [{"sha": "280757a41a2ba635b7f3c3de3274f155d189a71f", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=d0766079833e70b25f081db59105888b9e986f18", "patch": "@@ -9,7 +9,7 @@ use crate::io;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n use crate::ptr;\n-use crate::sys::c;\n+use crate::sys;\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -190,14 +190,14 @@ impl BorrowedHandle<'_> {\n     /// object as the existing `BorrowedHandle` instance.\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedHandle> {\n-        self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)\n+        self.duplicate(0, false, sys::c::DUPLICATE_SAME_ACCESS)\n     }\n \n     pub(crate) fn duplicate(\n         &self,\n-        access: c::DWORD,\n+        access: u32,\n         inherit: bool,\n-        options: c::DWORD,\n+        options: u32,\n     ) -> io::Result<OwnedHandle> {\n         let handle = self.as_raw_handle();\n \n@@ -211,14 +211,14 @@ impl BorrowedHandle<'_> {\n \n         let mut ret = ptr::null_mut();\n         cvt(unsafe {\n-            let cur_proc = c::GetCurrentProcess();\n-            c::DuplicateHandle(\n+            let cur_proc = sys::c::GetCurrentProcess();\n+            sys::c::DuplicateHandle(\n                 cur_proc,\n                 handle,\n                 cur_proc,\n                 &mut ret,\n                 access,\n-                inherit as c::BOOL,\n+                inherit as sys::c::BOOL,\n                 options,\n             )\n         })?;\n@@ -233,7 +233,7 @@ impl TryFrom<HandleOrInvalid> for OwnedHandle {\n     #[inline]\n     fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, InvalidHandleError> {\n         let owned_handle = handle_or_invalid.0;\n-        if owned_handle.handle == c::INVALID_HANDLE_VALUE {\n+        if owned_handle.handle == sys::c::INVALID_HANDLE_VALUE {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n@@ -365,7 +365,7 @@ impl Drop for OwnedHandle {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            let _ = c::CloseHandle(self.handle);\n+            let _ = sys::c::CloseHandle(self.handle);\n         }\n     }\n }"}, {"sha": "1759e2e7f3f91e31b1b6784770e70927154c0391", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=d0766079833e70b25f081db59105888b9e986f18", "patch": "@@ -11,7 +11,6 @@ use crate::os::windows::io::{OwnedHandle, OwnedSocket};\n use crate::os::windows::raw;\n use crate::ptr;\n use crate::sys;\n-use crate::sys::c;\n use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n \n /// Raw HANDLEs.\n@@ -104,42 +103,42 @@ impl AsRawHandle for fs::File {\n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawHandle for io::Stdin {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_INPUT_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_INPUT_HANDLE) as RawHandle })\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawHandle for io::Stdout {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_OUTPUT_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_OUTPUT_HANDLE) as RawHandle })\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawHandle for io::Stderr {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_ERROR_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_ERROR_HANDLE) as RawHandle })\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawHandle for io::StdinLock<'a> {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_INPUT_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_INPUT_HANDLE) as RawHandle })\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawHandle for io::StdoutLock<'a> {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_OUTPUT_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_OUTPUT_HANDLE) as RawHandle })\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawHandle for io::StderrLock<'a> {\n     fn as_raw_handle(&self) -> RawHandle {\n-        stdio_handle(unsafe { c::GetStdHandle(c::STD_ERROR_HANDLE) as RawHandle })\n+        stdio_handle(unsafe { sys::c::GetStdHandle(sys::c::STD_ERROR_HANDLE) as RawHandle })\n     }\n }\n \n@@ -152,14 +151,14 @@ fn stdio_handle(raw: RawHandle) -> RawHandle {\n     // console. In that case, return null to the user, which is consistent\n     // with what they'd get in the parent, and which avoids the problem that\n     // `INVALID_HANDLE_VALUE` aliases the current process handle.\n-    if raw == c::INVALID_HANDLE_VALUE { ptr::null_mut() } else { raw }\n+    if raw == sys::c::INVALID_HANDLE_VALUE { ptr::null_mut() } else { raw }\n }\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n-        let handle = handle as c::HANDLE;\n+        let handle = handle as sys::c::HANDLE;\n         fs::File::from_inner(sys::fs::File::from_inner(FromInner::from_inner(\n             OwnedHandle::from_raw_handle(handle),\n         )))"}, {"sha": "eb6097a89a61e745e2a149c97a8ea2fac1d65a41", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=d0766079833e70b25f081db59105888b9e986f18", "patch": "@@ -9,7 +9,6 @@ use crate::marker::PhantomData;\n use crate::mem;\n use crate::mem::forget;\n use crate::sys;\n-use crate::sys::c;\n #[cfg(not(target_vendor = \"uwp\"))]\n use crate::sys::cvt;\n \n@@ -76,7 +75,7 @@ impl BorrowedSocket<'_> {\n     #[rustc_const_stable(feature = \"io_safety\", since = \"1.63.0\")]\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub const unsafe fn borrow_raw(socket: RawSocket) -> Self {\n-        assert!(socket != c::INVALID_SOCKET as RawSocket);\n+        assert!(socket != sys::c::INVALID_SOCKET as RawSocket);\n         Self { socket, _phantom: PhantomData }\n     }\n }\n@@ -94,7 +93,11 @@ impl OwnedSocket {\n     #[cfg(not(target_vendor = \"uwp\"))]\n     pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n         cvt(unsafe {\n-            c::SetHandleInformation(self.as_raw_socket() as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0)\n+            sys::c::SetHandleInformation(\n+                self.as_raw_socket() as sys::c::HANDLE,\n+                sys::c::HANDLE_FLAG_INHERIT,\n+                0,\n+            )\n         })\n         .map(drop)\n     }\n@@ -110,43 +113,47 @@ impl BorrowedSocket<'_> {\n     /// object as the existing `BorrowedSocket` instance.\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone_to_owned(&self) -> io::Result<OwnedSocket> {\n-        let mut info = unsafe { mem::zeroed::<c::WSAPROTOCOL_INFOW>() };\n+        let mut info = unsafe { mem::zeroed::<sys::c::WSAPROTOCOL_INFOW>() };\n         let result = unsafe {\n-            c::WSADuplicateSocketW(self.as_raw_socket(), c::GetCurrentProcessId(), &mut info)\n+            sys::c::WSADuplicateSocketW(\n+                self.as_raw_socket(),\n+                sys::c::GetCurrentProcessId(),\n+                &mut info,\n+            )\n         };\n         sys::net::cvt(result)?;\n         let socket = unsafe {\n-            c::WSASocketW(\n+            sys::c::WSASocketW(\n                 info.iAddressFamily,\n                 info.iSocketType,\n                 info.iProtocol,\n                 &mut info,\n                 0,\n-                c::WSA_FLAG_OVERLAPPED | c::WSA_FLAG_NO_HANDLE_INHERIT,\n+                sys::c::WSA_FLAG_OVERLAPPED | sys::c::WSA_FLAG_NO_HANDLE_INHERIT,\n             )\n         };\n \n-        if socket != c::INVALID_SOCKET {\n+        if socket != sys::c::INVALID_SOCKET {\n             unsafe { Ok(OwnedSocket::from_raw_socket(socket)) }\n         } else {\n-            let error = unsafe { c::WSAGetLastError() };\n+            let error = unsafe { sys::c::WSAGetLastError() };\n \n-            if error != c::WSAEPROTOTYPE && error != c::WSAEINVAL {\n+            if error != sys::c::WSAEPROTOTYPE && error != sys::c::WSAEINVAL {\n                 return Err(io::Error::from_raw_os_error(error));\n             }\n \n             let socket = unsafe {\n-                c::WSASocketW(\n+                sys::c::WSASocketW(\n                     info.iAddressFamily,\n                     info.iSocketType,\n                     info.iProtocol,\n                     &mut info,\n                     0,\n-                    c::WSA_FLAG_OVERLAPPED,\n+                    sys::c::WSA_FLAG_OVERLAPPED,\n                 )\n             };\n \n-            if socket == c::INVALID_SOCKET {\n+            if socket == sys::c::INVALID_SOCKET {\n                 return Err(last_error());\n             }\n \n@@ -161,7 +168,7 @@ impl BorrowedSocket<'_> {\n \n /// Returns the last error from the Windows socket interface.\n fn last_error() -> io::Error {\n-    io::Error::from_raw_os_error(unsafe { c::WSAGetLastError() })\n+    io::Error::from_raw_os_error(unsafe { sys::c::WSAGetLastError() })\n }\n \n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n@@ -194,7 +201,7 @@ impl IntoRawSocket for OwnedSocket {\n impl FromRawSocket for OwnedSocket {\n     #[inline]\n     unsafe fn from_raw_socket(socket: RawSocket) -> Self {\n-        debug_assert_ne!(socket, c::INVALID_SOCKET as RawSocket);\n+        debug_assert_ne!(socket, sys::c::INVALID_SOCKET as RawSocket);\n         Self { socket }\n     }\n }\n@@ -204,7 +211,7 @@ impl Drop for OwnedSocket {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            let _ = c::closesocket(self.socket);\n+            let _ = sys::c::closesocket(self.socket);\n         }\n     }\n }"}, {"sha": "c72be13804d20f4185f5e1d0fe8b9a392a0c17d4", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0766079833e70b25f081db59105888b9e986f18/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=d0766079833e70b25f081db59105888b9e986f18", "patch": "@@ -52,31 +52,6 @@ cfg_if::cfg_if! {\n     }\n }\n \n-// Import essential modules from platforms used in `std::os` when documenting.\n-//\n-// Note that on some platforms those modules don't compile\n-// (missing things in `libc` which is empty), so they are not included in `std::os` and can be\n-// omitted here as well.\n-\n-#[cfg(doc)]\n-#[cfg(not(any(\n-    all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-)))]\n-cfg_if::cfg_if! {\n-    if #[cfg(not(windows))] {\n-        // On non-Windows platforms (aka linux/osx/etc) pull in a \"minimal\"\n-        // amount of windows goop which ends up compiling\n-\n-        #[macro_use]\n-        #[path = \"windows/compat.rs\"]\n-        pub mod compat;\n-\n-        #[path = \"windows/c.rs\"]\n-        pub mod c;\n-    }\n-}\n-\n cfg_if::cfg_if! {\n     // Fuchsia components default to full backtrace.\n     if #[cfg(target_os = \"fuchsia\")] {"}]}