{"sha": "e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4N2Y4Y2M0OWI1NmVhMmI4ZjAxMjgxYTBiMmJhZjIwZTEyYTMxOWQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-16T10:36:40Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-24T08:49:57Z"}, "message": "Source sidebar improvements", "tree": {"sha": "8f0b44998705c8387f90b0fa11ab9613c962991b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0b44998705c8387f90b0fa11ab9613c962991b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "html_url": "https://github.com/rust-lang/rust/commit/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93520d2ad145b791b1b1a6c71cdea65b1943ffb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/93520d2ad145b791b1b1a6c71cdea65b1943ffb6", "html_url": "https://github.com/rust-lang/rust/commit/93520d2ad145b791b1b1a6c71cdea65b1943ffb6"}], "stats": {"total": 146, "additions": 86, "deletions": 60}, "files": [{"sha": "287e5a31888c38eb1ab5836c4e7cb5bc477f7392", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "patch": "@@ -194,9 +194,10 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                    .collect::<String>(),\n     suffix=page.resource_suffix,\n     extra_scripts=extra_scripts.iter().map(|e| {\n-        format!(\"<script src=\\\"{root_path}{extra_script}\\\"></script>\",\n+        format!(\"<script src=\\\"{root_path}{extra_script}{suffix}.js\\\"></script>\",\n                 root_path=page.root_path,\n-                extra_script=e)\n+                extra_script=e,\n+                suffix=page.resource_suffix)\n     }).collect::<String>(),\n     )\n }"}, {"sha": "7b020415af1be0feff6ddc975779c04cb6957eb4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "patch": "@@ -859,9 +859,11 @@ themePicker.onblur = handleThemeButtonsBlur;\n     write_minify(cx.dst.join(&format!(\"settings{}.js\", cx.shared.resource_suffix)),\n                  static_files::SETTINGS_JS,\n                  options.enable_minification)?;\n-    write_minify(cx.dst.join(&format!(\"source-script{}.js\", cx.shared.resource_suffix)),\n-                 include_str!(\"static/source-script.js\"),\n-                 options.enable_minification)?;\n+    if cx.shared.include_sources {\n+        write_minify(cx.dst.join(&format!(\"source-script{}.js\", cx.shared.resource_suffix)),\n+                     static_files::sidebar::SOURCE_SCRIPT,\n+                     options.enable_minification)?;\n+    }\n \n     {\n         let mut data = format!(\"var resourcesSuffix = \\\"{}\\\";\\n\",\n@@ -990,8 +992,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n             }\n         }\n \n-        fn to_string(&self) -> String {\n-            let mut subs: Vec<&Hierarchy> = self.children.iter().map(|(_, v)| v).collect();\n+        fn to_json_string(&self) -> String {\n+            let mut subs: Vec<&Hierarchy> = self.children.values().collect();\n             subs.sort_unstable_by(|a, b| a.elem.cmp(&b.elem));\n             let mut files = self.elems.iter()\n                                       .map(|s| format!(\"\\\"{}\\\"\",\n@@ -1002,46 +1004,52 @@ themePicker.onblur = handleThemeButtonsBlur;\n             // FIXME(imperio): we could avoid to generate \"dirs\" and \"files\" if they're empty.\n             format!(\"{{\\\"name\\\":\\\"{name}\\\",\\\"dirs\\\":[{subs}],\\\"files\\\":[{files}]}}\",\n                     name=self.elem.to_str().expect(\"invalid osstring conversion\"),\n-                    subs=subs.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\",\"),\n+                    subs=subs.iter().map(|s| s.to_json_string()).collect::<Vec<_>>().join(\",\"),\n                     files=files.join(\",\"))\n         }\n     }\n \n-    use std::path::Component;\n+    if cx.shared.include_sources {\n+        use std::path::Component;\n \n-    let mut hierarchy = Hierarchy::new(OsString::new());\n-    for source in cx.shared.local_sources.iter()\n-                                         .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root)\n-                                                            .ok()) {\n-        let mut h = &mut hierarchy;\n-        let mut elems = source.components()\n-                              .filter_map(|s| {\n-                                  match s {\n-                                      Component::Normal(s) => Some(s.to_owned()),\n-                                      _ => None,\n-                                  }\n-                              })\n-                              .peekable();\n-        loop {\n-            let cur_elem = elems.next().expect(\"empty file path\");\n-            if elems.peek().is_none() {\n-                h.elems.insert(cur_elem);\n-                break;\n-            } else {\n-                let e = cur_elem.clone();\n-                h.children.entry(cur_elem.clone()).or_insert_with(|| Hierarchy::new(e));\n-                h = h.children.get_mut(&cur_elem).expect(\"not found child\");\n+        let mut hierarchy = Hierarchy::new(OsString::new());\n+        for source in cx.shared.local_sources.iter()\n+                                             .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root)\n+                                                                .ok()) {\n+            let mut h = &mut hierarchy;\n+            let mut elems = source.components()\n+                                  .filter_map(|s| {\n+                                      match s {\n+                                          Component::Normal(s) => Some(s.to_owned()),\n+                                          _ => None,\n+                                      }\n+                                  })\n+                                  .peekable();\n+            loop {\n+                let cur_elem = elems.next().expect(\"empty file path\");\n+                if elems.peek().is_none() {\n+                    h.elems.insert(cur_elem);\n+                    break;\n+                } else {\n+                    let e = cur_elem.clone();\n+                    h.children.entry(cur_elem.clone()).or_insert_with(|| Hierarchy::new(e));\n+                    h = h.children.get_mut(&cur_elem).expect(\"not found child\");\n+                }\n             }\n         }\n-    }\n \n-    let dst = cx.dst.join(\"source-files.js\");\n-    let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n-    all_sources.push(format!(\"sourcesIndex['{}'] = {};\", &krate.name, hierarchy.to_string()));\n-    all_sources.sort();\n-    let mut w = try_err!(File::create(&dst), &dst);\n-    try_err!(writeln!(&mut w, \"var N = null;var sourcesIndex = {{}};\\n{}\", all_sources.join(\"\\n\")),\n-             &dst);\n+        let dst = cx.dst.join(\"source-files.js\");\n+        let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n+        all_sources.push(format!(\"sourcesIndex['{}'] = {};\",\n+                                 &krate.name,\n+                                 hierarchy.to_json_string()));\n+        all_sources.sort();\n+        let mut w = try_err!(File::create(&dst), &dst);\n+        try_err!(writeln!(&mut w,\n+                          \"var N = null;var sourcesIndex = {{}};\\n{}\",\n+                          all_sources.join(\"\\n\")),\n+                 &dst);\n+    }\n \n     // Update the search index\n     let dst = cx.dst.join(\"search-index.js\");\n@@ -1367,7 +1375,7 @@ impl<'a> SourceCollector<'a> {\n         layout::render(&mut w, &self.scx.layout,\n                        &page, &(\"\"), &Source(contents),\n                        self.scx.css_file_extension.is_some(),\n-                       &self.scx.themes, &[\"source-files.js\", \"source-script.js\"])?;\n+                       &self.scx.themes, &[\"source-files\", \"source-script\"])?;\n         w.flush()?;\n         self.scx.local_sources.insert(p.clone(), href);\n         Ok(())"}, {"sha": "902c492105f59d098d84d66190a8c0dfc11ea13f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "patch": "@@ -1464,25 +1464,28 @@ kbd {\n #sidebar-toggle {\n \tposition: fixed;\n \ttop: 30px;\n-\tright: 300px;\n+\tleft: 300px;\n \tz-index: 10;\n \tpadding: 3px;\n-\tborder-top-left-radius: 3px;\n-\tborder-bottom-left-radius: 3px;\n+\tborder-top-right-radius: 3px;\n+\tborder-bottom-right-radius: 3px;\n \tcursor: pointer;\n \tfont-weight: bold;\n-\ttransition: right 1s;\n+\ttransition: left .5s;\n \tfont-size: 1.2em;\n+\tborder: 1px solid;\n+\tborder-left: 0;\n }\n #source-sidebar {\n \tposition: fixed;\n \ttop: 0;\n \tbottom: 0;\n-\tright: 0;\n+\tleft: 0;\n \twidth: 300px;\n \tz-index: 1;\n \toverflow: auto;\n-\ttransition: right 1s;\n+\ttransition: left .5s;\n+\tborder-right: 1px solid;\n }\n #source-sidebar > .title {\n \tfont-size: 1.5em;\n@@ -1495,6 +1498,11 @@ div.children {\n \tpadding-left: 27px;\n \tdisplay: none;\n }\n+div.name {\n+\tcursor: pointer;\n+\tposition: relative;\n+\tmargin-left: 16px;\n+}\n div.files > a {\n \tdisplay: block;\n \tpadding: 0 3px;\n@@ -1507,10 +1515,13 @@ div.name.expand + .children {\n }\n div.name::before {\n \tcontent: \"\\25B6\";\n-\tdisplay: inline-block;\n-\tpadding-right: 4px;\n+\tpadding-left: 4px;\n \tfont-size: 0.7em;\n+\tposition: absolute;\n+\tleft: -16px;\n+\ttop: 4px;\n }\n div.name.expand::before {\n \ttransform: rotate(90deg);\n+\tleft: -14px;\n }"}, {"sha": "f8e0cf196fbcb0ef08ac46d023086d5a4e8787d0", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "patch": "@@ -72,21 +72,21 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     children.appendChild(files);\n     parent.appendChild(name);\n     parent.appendChild(children);\n-    return hasFoundFile === true && search.currentFile !== null;\n+    return hasFoundFile === true && currentFile.startsWith(fullPath);\n }\n \n function toggleSidebar() {\n     var sidebar = document.getElementById(\"source-sidebar\");\n     var child = this.children[0].children[0];\n-    if (child.innerText === \"<\") {\n-        sidebar.style.right = \"\";\n-        this.style.right = \"\";\n-        child.innerText = \">\";\n+    if (child.innerText === \">\") {\n+        sidebar.style.left = \"\";\n+        this.style.left = \"\";\n+        child.innerText = \"<\";\n         updateLocalStorage(\"rustdoc-source-sidebar-hidden\", \"false\");\n     } else {\n-        sidebar.style.right = \"-300px\";\n-        this.style.right = \"0\";\n-        child.innerText = \"<\";\n+        sidebar.style.left = \"-300px\";\n+        this.style.left = \"0\";\n+        child.innerText = \">\";\n         updateLocalStorage(\"rustdoc-source-sidebar-hidden\", \"true\");\n     }\n }\n@@ -102,10 +102,10 @@ function createSidebarToggle() {\n     var inner2 = document.createElement(\"div\");\n     inner2.style.marginTop = \"-2px\";\n     if (getCurrentValue(\"rustdoc-source-sidebar-hidden\") === \"true\") {\n-        inner2.innerText = \"<\";\n-        sidebarToggle.style.right = \"0\";\n-    } else {\n         inner2.innerText = \">\";\n+        sidebarToggle.style.left = \"0\";\n+    } else {\n+        inner2.innerText = \"<\";\n     }\n \n     inner1.appendChild(inner2);\n@@ -125,7 +125,7 @@ function createSourceSidebar() {\n     var sidebar = document.createElement(\"div\");\n     sidebar.id = \"source-sidebar\";\n     if (getCurrentValue(\"rustdoc-source-sidebar-hidden\") === \"true\") {\n-        sidebar.style.right = \"-300px\";\n+        sidebar.style.left = \"-300px\";\n     }\n \n     var currentFile = getCurrentFilePath();"}, {"sha": "ee29f15d686c1acf57a9c9f749734a73aef73967", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87f8cc49b56ea2b8f01281a0b2baf20e12a319d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=e87f8cc49b56ea2b8f01281a0b2baf20e12a319d", "patch": "@@ -109,3 +109,9 @@ pub mod source_code_pro {\n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n     pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }\n+\n+/// Files related to the sidebar in rustdoc sources.\n+pub mod sidebar {\n+    /// File script to handle sidebar.\n+    pub static SOURCE_SCRIPT: &'static str = include_str!(\"static/source-script.js\");\n+}"}]}