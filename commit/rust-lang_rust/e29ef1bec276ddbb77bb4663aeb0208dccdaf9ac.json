{"sha": "e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWVmMWJlYzI3NmRkYmI3N2JiNDY2M2FlYjAyMDhkY2NkYWY5YWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T19:22:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T20:31:11Z"}, "message": "Refactor a few things in the metadata module\n\nRename metadata::tags to metadata::common. Move some utility functions from\nmetadata::encoder to metadata::common.", "tree": {"sha": "2c46f88cf848cd735282ada43ee8295e8d76e83f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c46f88cf848cd735282ada43ee8295e8d76e83f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "html_url": "https://github.com/rust-lang/rust/commit/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b723082cdb2d5793c103f64f9709639f97e31c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/b723082cdb2d5793c103f64f9709639f97e31c61", "html_url": "https://github.com/rust-lang/rust/commit/b723082cdb2d5793c103f64f9709639f97e31c61"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "5393e1d0b7edef75df89c88e22a9fa98892f282b", "filename": "src/comp/metadata/common.rs", "status": "renamed", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcommon.rs?ref=e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "patch": "@@ -1,4 +1,6 @@\n-// EBML tag definitions shared by the encoder and decoder\n+// EBML tag definitions and utils shared by the encoder and decoder\n+\n+import std::str;\n \n const uint tag_paths = 0x01u;\n \n@@ -52,4 +54,14 @@ const uint tag_attribute = 0x22u;\n \n const uint tag_meta_item_word = 0x23u;\n \n-const uint tag_meta_item_list = 0x24u;\n\\ No newline at end of file\n+const uint tag_meta_item_list = 0x24u;\n+\n+// djb's cdb hashes.\n+fn hash_node_id(&int node_id) -> uint { ret 177573u ^ (node_id as uint); }\n+\n+fn hash_path(&str s) -> uint {\n+    auto h = 5381u;\n+    for (u8 ch in str::bytes(s)) { h = (h << 5u) + h ^ (ch as uint); }\n+    ret h;\n+}\n+", "previous_filename": "src/comp/metadata/tags.rs"}, {"sha": "bc44560b1b4ac63e8ff069c202e3067f36fd105e", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "patch": "@@ -23,7 +23,7 @@ import std::option::none;\n import std::option::some;\n import std::map::hashmap;\n import syntax::print::pprust;\n-import tags::*;\n+import common::*;\n \n export read_crates;\n export list_file_metadata;"}, {"sha": "cc3c103ac56a8eb31ecacc6ebe0a4c3dfc2a95fe", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "patch": "@@ -10,11 +10,10 @@ import std::map::hashmap;\n import syntax::ast;\n import front::attr;\n import middle::ty;\n-import tags::*;\n+import common::*;\n import tydecode::parse_def_id;\n import tydecode::parse_ty_data;\n import driver::session;\n-import util::common;\n import syntax::print::pprust;\n \n export get_symbol;\n@@ -51,7 +50,7 @@ fn maybe_find_item(int item_id, &ebml::doc items) -> option::t[ebml::doc] {\n         ret ebml::be_uint_from_bytes(bytes, 0u, 4u) as int == item_id;\n     }\n     auto eqer = bind eq_item(_, item_id);\n-    auto found = lookup_hash(items, eqer, encoder::hash_node_id(item_id));\n+    auto found = lookup_hash(items, eqer, hash_node_id(item_id));\n     if (vec::len(found) == 0u) {\n         ret option::none[ebml::doc];\n     } else { ret option::some[ebml::doc](found.(0)); }\n@@ -129,7 +128,7 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n     auto paths = ebml::get_doc(md, tag_paths);\n     auto eqer = bind eq_item(_, s);\n     let vec[ast::def_id] result = [];\n-    for (ebml::doc doc in lookup_hash(paths, eqer, encoder::hash_path(s))) {\n+    for (ebml::doc doc in lookup_hash(paths, eqer, hash_path(s))) {\n         auto did_doc = ebml::get_doc(doc, tag_def_id);\n         vec::push(result, parse_def_id(ebml::doc_data(did_doc)));\n     }"}, {"sha": "ed90eaf1263f2b948d351e67145086667d18d654", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "patch": "@@ -10,15 +10,13 @@ import std::option::some;\n import std::option::none;\n import std::ebml;\n import syntax::ast::*;\n-import tags::*;\n+import common::*;\n import middle::trans::crate_ctxt;\n import middle::ty;\n import middle::ty::node_id_to_monotype;\n import front::attr;\n \n export def_to_str;\n-export hash_path;\n-export hash_node_id;\n export encode_metadata;\n \n // Path table encoding\n@@ -370,15 +368,6 @@ fn encode_info_for_items(&@crate_ctxt cx, &ebml::writer ebml_w) ->\n \n // Path and definition ID indexing\n \n-// djb's cdb hashes.\n-fn hash_node_id(&int node_id) -> uint { ret 177573u ^ (node_id as uint); }\n-\n-fn hash_path(&str s) -> uint {\n-    auto h = 5381u;\n-    for (u8 ch in str::bytes(s)) { h = (h << 5u) + h ^ (ch as uint); }\n-    ret h;\n-}\n-\n fn create_index[T](&vec[tup(T, uint)] index, fn(&T) -> uint  hash_fn) ->\n    vec[vec[tup(T, uint)]] {\n     let vec[mutable vec[tup(T, uint)]] buckets = vec::empty_mut();"}, {"sha": "b5f104745c42994fa062c628e22e90671ef18389", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=e29ef1bec276ddbb77bb4663aeb0208dccdaf9ac", "patch": "@@ -82,7 +82,7 @@ mod metadata {\n     export decoder;\n     export creader;\n \n-    mod tags;\n+    mod common;\n     mod tyencode;\n     mod tydecode;\n     mod encoder;"}]}