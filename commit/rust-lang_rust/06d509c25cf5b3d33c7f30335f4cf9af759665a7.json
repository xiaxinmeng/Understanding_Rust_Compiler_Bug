{"sha": "06d509c25cf5b3d33c7f30335f4cf9af759665a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDUwOWMyNWNmNWIzZDMzYzdmMzAzMzVmNGNmOWFmNzU5NjY1YTc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-03-08T04:13:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-08T04:13:05Z"}, "message": "Merge pull request #2512 from topecongiro/rustc-ap-syntax\n\nUpdate rustc-ap-syntax", "tree": {"sha": "289f1302c249d250f393b53a9a7fa0beee14dcac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289f1302c249d250f393b53a9a7fa0beee14dcac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d509c25cf5b3d33c7f30335f4cf9af759665a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaoLhRCRBK7hj4Ov3rIwAAdHIIAJ7gI/+s69/VXt2IflbnXKr4\n7dpQ1CRAq+3sxjEv4a8EwnepViniF86k64k08IZlDv194bAkQKle0SZKEYk4jo+v\nJwZ/uQjrDp/FXZvmmG7HgzcFTDMe+xYpoyC6cQbAwrSiE3icKEgMVx+LdVjVdhe4\nbfJZAHsXxwsO69oGhtsyr76/vmLQuhlKmngjsZRwNCdKDGWO0rYaGLPlNqWEr1VM\nsXFAhMACrvejs4oCzrPNZjZvL0sCKhIPIjTnGb4ryHYMNNDFZl3JccfNF2Qn5A9J\nn1uBbSKVC4HIWX2Fc2zEDPZx/XFgRtmNfTHpZcqZCVuWiimmo4Pms5Vo3vt5Ekc=\n=9g5r\n-----END PGP SIGNATURE-----\n", "payload": "tree 289f1302c249d250f393b53a9a7fa0beee14dcac\nparent f0d179dd12d48dcff4a4b8d3073bcd3b4af1ad3f\nparent 9889678f56e61e158195d6097626adc0374db619\nauthor Nick Cameron <nrc@ncameron.org> 1520482385 +1300\ncommitter GitHub <noreply@github.com> 1520482385 +1300\n\nMerge pull request #2512 from topecongiro/rustc-ap-syntax\n\nUpdate rustc-ap-syntax"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d509c25cf5b3d33c7f30335f4cf9af759665a7", "html_url": "https://github.com/rust-lang/rust/commit/06d509c25cf5b3d33c7f30335f4cf9af759665a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d509c25cf5b3d33c7f30335f4cf9af759665a7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d179dd12d48dcff4a4b8d3073bcd3b4af1ad3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d179dd12d48dcff4a4b8d3073bcd3b4af1ad3f", "html_url": "https://github.com/rust-lang/rust/commit/f0d179dd12d48dcff4a4b8d3073bcd3b4af1ad3f"}, {"sha": "9889678f56e61e158195d6097626adc0374db619", "url": "https://api.github.com/repos/rust-lang/rust/commits/9889678f56e61e158195d6097626adc0374db619", "html_url": "https://github.com/rust-lang/rust/commit/9889678f56e61e158195d6097626adc0374db619"}], "stats": {"total": 609, "additions": 394, "deletions": 215}, "files": [{"sha": "c92b7cb9b231e61d83f062e58abc68d6ea3fb140", "filename": "Cargo.lock", "status": "modified", "additions": 109, "deletions": 47, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -11,7 +11,7 @@ name = \"atty\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -23,7 +23,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -33,18 +33,23 @@ name = \"backtrace-sys\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bitflags\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"byteorder\"\n+version = \"1.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.4.1\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -56,7 +61,7 @@ dependencies = [\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.4\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -66,11 +71,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"derive-new\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.12.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -83,6 +89,14 @@ name = \"dtoa\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ena\"\n+version = \"0.9.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.5.4\"\n@@ -151,7 +165,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.37\"\n+version = \"0.2.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -167,7 +181,7 @@ name = \"memchr\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -197,12 +211,20 @@ name = \"parking_lot_core\"\n version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"proc-macro2\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"quick-error\"\n version = \"1.2.1\"\n@@ -213,13 +235,21 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.4.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -255,7 +285,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -264,57 +294,58 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"29.0.0\"\n+version = \"57.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -328,21 +359,21 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustfmt-nightly\"\n version = \"0.4.0\"\n dependencies = [\n- \"cargo_metadata 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -417,6 +448,16 @@ dependencies = [\n  \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.12.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synom\"\n version = \"0.11.3\"\n@@ -434,6 +475,15 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"term\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"termcolor\"\n version = \"0.3.5\"\n@@ -447,7 +497,7 @@ name = \"termion\"\n version = \"1.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -484,6 +534,11 @@ name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"1.0.0\"\n@@ -545,12 +600,14 @@ dependencies = [\n \"checksum backtrace 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ebbbf59b1c43eefa8c3ede390fcc36820b4999f7914104015be25025e0d62af2\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n-\"checksum cargo_metadata 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f410f43295c912ae1328de55e5c050dbef882c17b836f5ed41cc8b96c40d6cc5\"\n-\"checksum cc 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"deaf9ec656256bb25b404c51ef50097207b9cbb29c933d31f92cae5a8a0ffee0\"\n+\"checksum byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"652805b7e73fada9d85e9a6682a4abd490cb52d96aeecc12e33a0de34dfd0d23\"\n+\"checksum cargo_metadata 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab46e9ef52c8e10e1a41fe4064c77fb82abe4a1e532d259c1ee67624c984b099\"\n+\"checksum cc 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9be26b24e988625409b19736d130f0c7d224f01d06454b5f81d8d23d6c1a618f\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"415f627ab054041c3eb748c2e1da0ef751989f5f0c386b63a098e545854a98ba\"\n+\"checksum derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92f8b8e1d6c8a5f5ea0849a0e4c55941576115c62d3fc425e96918bbbeb3d3c2\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n+\"checksum ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8b449f3b18c89d2dbe40548d2ee4fa58ea0a08b761992da6ecb9788e4688834\"\n \"checksum env_logger 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3cc21490995c841d68e00276eba02071ebb269ec24011d5728bd00eabd39e31\"\n \"checksum error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff511d5dc435d703f4971bc399647c9bc38e20cb41452e3b9feb4765419ed3f3\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n@@ -560,26 +617,28 @@ dependencies = [\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d\"\n-\"checksum libc 0.2.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56aebce561378d99a0bb578f8cb15b6114d2a1814a6c7949bbe646d968bb4fa9\"\n+\"checksum libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f54263ad99207254cf58b5f701ecb432c717445ea2ee8af387334bdd1a03fdff\"\n \"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum num-traits 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b3c2bd9b9d21e48e956b763c9f37134dc62d9e95da6edb3f672cacb6caf3cd3\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fd9d732f2de194336fb02fe11f9eed13d9e76f13f4315b4d88a14ca411750cd\"\n \"checksum parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"538ef00b7317875071d5e00f603f24d16f0b474c1a5fc0ccb8b454ca72eafa79\"\n+\"checksum proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd07deb3c6d1d9ff827999c7f9b04cdfd66b1b17ae508e14fe47b620f2282ae0\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eca14c727ad12702eb4b6bfb5a232287dcf8385cb8ca83a3eeaf6519c44c408\"\n \"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n \"checksum redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d92eecebad22b767915e4d529f89f28ee96dbbf5a4810d2b844373f136417fd\"\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n \"checksum regex 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5be5347bde0c48cfd8c3fdc0766cdfe9d8a755ef84d620d6794c778c91de8b2b\"\n \"checksum regex-syntax 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e931c58b93d86f080c734bfd2bce7dd0079ae2331235818133c8be7f422e20e\"\n-\"checksum rustc-ap-rustc_cratesio_shim 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ad5e562044ea78a6764dd75ae8afe4b21fde49f4548024b5fdf6345c21fb524\"\n-\"checksum rustc-ap-rustc_data_structures 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c0d65325492aba7db72899e3edbab34d39af98c42ab7c7e450c9a288ffe4ad\"\n-\"checksum rustc-ap-rustc_errors 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87d4ab2e06a671b5b5c5b0359dac346f164c99d059dce6a22feb08f2f56bd182\"\n-\"checksum rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e0745fa445ff41c4b6699936cf35ce3ca49502377dd7b3929c829594772c3a7b\"\n-\"checksum rustc-ap-syntax 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82efedabe30f393161e11214a9130edfa01ad476372d1c6f3fec1f8d30488c9d\"\n-\"checksum rustc-ap-syntax_pos 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db9de2e927e280c75b8efab9c5f591ad31082d5d2c4c562c68fdba2ee77286b0\"\n+\"checksum rustc-ap-rustc_cratesio_shim 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cec17c61275586dc539c662c72a34cd907c2a3284656c1c7a73de43c38fb1c4a\"\n+\"checksum rustc-ap-rustc_data_structures 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8358567a8a378e34b5ffcd2e266b02a524ba8189374f6e90f788c1aae748cb63\"\n+\"checksum rustc-ap-rustc_errors 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8e3ed225d3531044c1ddcbf31e79eaa00387451440a485818fec8e6a9e25d03\"\n+\"checksum rustc-ap-serialize 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8415efe18266da2aa1b68dc386128485f5f360d6f6e5a4c4ad8d48e6f757c858\"\n+\"checksum rustc-ap-syntax 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afd0049fc03db2c516e50c3089304d21de7ff0c38ed282a8ec655cc012c12145\"\n+\"checksum rustc-ap-syntax_pos 57.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d51e454e21f66e41737d9294254ec8f7be392699834570a45d0155be30dda75\"\n \"checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n@@ -590,15 +649,18 @@ dependencies = [\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n+\"checksum syn 0.12.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"517f6da31bc53bf080b9a77b29fbd0ff8da2f5a2ebd24c73c2238274a94ac7cb\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n+\"checksum term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e6b677dd1e8214ea1ef4297f85dbcbed8e8cdddb561040cc998ca2551c37561\"\n \"checksum termcolor 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56c456352e44f9f91f774ddeeed27c1ec60a2455ed66d692059acfb1d731bda1\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\"\n \"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n+\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\""}, {"sha": "3758862da67df98649178dd8e6c905b6ac5b3d07", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -41,15 +41,15 @@ serde_derive = \"1.0\"\n serde_json = \"1.0\"\n unicode-segmentation = \"1.0.0\"\n regex = \"0.2\"\n-term = \"0.4\"\n+term = \"0.5\"\n diff = \"0.1\"\n log = \"0.4\"\n env_logger = \"0.5\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n-cargo_metadata = \"0.4\"\n-rustc-ap-syntax = \"29.0.0\"\n-rustc-ap-rustc_errors = \"29.0.0\"\n+cargo_metadata = \"0.5\"\n+rustc-ap-syntax = \"57.0.0\"\n+rustc-ap-rustc_errors = \"57.0.0\"\n \n [dev-dependencies]\n lazy_static = \"1.0.0\""}, {"sha": "f6c05f5be40ae9deedeba9ba4883e0ca6f74d3f4", "filename": "src/codemap.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -22,6 +22,7 @@ pub trait SpanUtils {\n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n     fn span_before(&self, original: Span, needle: &str) -> BytePos;\n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos>;\n+    fn opt_span_before(&self, original: Span, needle: &str) -> Option<BytePos>;\n }\n \n pub trait LineRangeUtils {\n@@ -35,10 +36,7 @@ pub trait LineRangeUtils {\n \n impl<'a> SpanUtils for SnippetProvider<'a> {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).expect(\"Bad snippet\");\n-        let offset = snippet.find_uncommented(needle).expect(\"Bad offset\") + needle.len();\n-\n-        original.lo() + BytePos(offset as u32)\n+        self.opt_span_after(original, needle).expect(\"bad span\")\n     }\n \n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n@@ -53,15 +51,17 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n     }\n \n     fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap();\n-\n-        original.lo() + BytePos(offset as u32)\n+        self.opt_span_before(original, needle).expect(\"bad span\")\n     }\n \n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {\n+        self.opt_span_before(original, needle)\n+            .map(|bytepos| bytepos + BytePos(needle.len() as u32))\n+    }\n+\n+    fn opt_span_before(&self, original: Span, needle: &str) -> Option<BytePos> {\n         let snippet = self.span_to_snippet(original)?;\n-        let offset = snippet.find_uncommented(needle)? + needle.len();\n+        let offset = snippet.find_uncommented(needle)?;\n \n         Some(original.lo() + BytePos(offset as u32))\n     }"}, {"sha": "2945f03a535867174526117e0be8d57c6b3fd311", "filename": "src/expr.rs", "status": "modified", "additions": 164, "deletions": 122, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -730,7 +730,7 @@ struct ControlFlow<'a> {\n     block: &'a ast::Block,\n     else_block: Option<&'a ast::Expr>,\n     label: Option<ast::Label>,\n-    pat: Option<&'a ast::Pat>,\n+    pats: Vec<&'a ast::Pat>,\n     keyword: &'a str,\n     matcher: &'a str,\n     connector: &'a str,\n@@ -744,7 +744,7 @@ fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow>\n     match expr.node {\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => Some(ControlFlow::new_if(\n             cond,\n-            None,\n+            vec![],\n             if_block,\n             else_block.as_ref().map(|e| &**e),\n             expr_type == ExprType::SubExpression,\n@@ -754,7 +754,7 @@ fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow>\n         ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n             Some(ControlFlow::new_if(\n                 cond,\n-                Some(pat),\n+                ptr_vec_to_ref_vec(pat),\n                 if_block,\n                 else_block.as_ref().map(|e| &**e),\n                 expr_type == ExprType::SubExpression,\n@@ -768,37 +768,47 @@ fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow>\n         ast::ExprKind::Loop(ref block, label) => {\n             Some(ControlFlow::new_loop(block, label, expr.span))\n         }\n-        ast::ExprKind::While(ref cond, ref block, label) => {\n-            Some(ControlFlow::new_while(None, cond, block, label, expr.span))\n-        }\n+        ast::ExprKind::While(ref cond, ref block, label) => Some(ControlFlow::new_while(\n+            vec![],\n+            cond,\n+            block,\n+            label,\n+            expr.span,\n+        )),\n         ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => Some(\n-            ControlFlow::new_while(Some(pat), cond, block, label, expr.span),\n+            ControlFlow::new_while(ptr_vec_to_ref_vec(pat), cond, block, label, expr.span),\n         ),\n         _ => None,\n     }\n }\n \n+fn choose_matcher(pats: &[&ast::Pat]) -> &'static str {\n+    if pats.is_empty() {\n+        \"\"\n+    } else {\n+        \"let\"\n+    }\n+}\n+\n impl<'a> ControlFlow<'a> {\n     fn new_if(\n         cond: &'a ast::Expr,\n-        pat: Option<&'a ast::Pat>,\n+        pats: Vec<&'a ast::Pat>,\n         block: &'a ast::Block,\n         else_block: Option<&'a ast::Expr>,\n         allow_single_line: bool,\n         nested_if: bool,\n         span: Span,\n     ) -> ControlFlow<'a> {\n+        let matcher = choose_matcher(&pats);\n         ControlFlow {\n             cond: Some(cond),\n             block,\n             else_block,\n             label: None,\n-            pat,\n+            pats,\n             keyword: \"if\",\n-            matcher: match pat {\n-                Some(..) => \"let\",\n-                None => \"\",\n-            },\n+            matcher,\n             connector: \" =\",\n             allow_single_line,\n             nested_if,\n@@ -812,7 +822,7 @@ impl<'a> ControlFlow<'a> {\n             block,\n             else_block: None,\n             label,\n-            pat: None,\n+            pats: vec![],\n             keyword: \"loop\",\n             matcher: \"\",\n             connector: \"\",\n@@ -823,23 +833,21 @@ impl<'a> ControlFlow<'a> {\n     }\n \n     fn new_while(\n-        pat: Option<&'a ast::Pat>,\n+        pats: Vec<&'a ast::Pat>,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n         label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n+        let matcher = choose_matcher(&pats);\n         ControlFlow {\n             cond: Some(cond),\n             block,\n             else_block: None,\n             label,\n-            pat,\n+            pats,\n             keyword: \"while\",\n-            matcher: match pat {\n-                Some(..) => \"let\",\n-                None => \"\",\n-            },\n+            matcher,\n             connector: \" =\",\n             allow_single_line: false,\n             nested_if: false,\n@@ -859,7 +867,7 @@ impl<'a> ControlFlow<'a> {\n             block,\n             else_block: None,\n             label,\n-            pat: Some(pat),\n+            pats: vec![pat],\n             keyword: \"for\",\n             matcher: \"\",\n             connector: \" in\",\n@@ -914,6 +922,46 @@ impl<'a> ControlFlow<'a> {\n }\n \n impl<'a> ControlFlow<'a> {\n+    fn rewrite_pat_expr(\n+        &self,\n+        context: &RewriteContext,\n+        expr: &ast::Expr,\n+        shape: Shape,\n+        offset: usize,\n+    ) -> Option<String> {\n+        debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, self.pats, expr);\n+\n+        let cond_shape = shape.offset_left(offset)?;\n+        if !self.pats.is_empty() {\n+            let matcher = if self.matcher.is_empty() {\n+                self.matcher.to_owned()\n+            } else {\n+                format!(\"{} \", self.matcher)\n+            };\n+            let pat_shape = cond_shape\n+                .offset_left(matcher.len())?\n+                .sub_width(self.connector.len())?;\n+            let pat_string = rewrite_multiple_patterns(context, &self.pats, pat_shape)?;\n+            let result = format!(\"{}{}{}\", matcher, pat_string, self.connector);\n+            return rewrite_assign_rhs(context, result, expr, cond_shape);\n+        }\n+\n+        let expr_rw = expr.rewrite(context, cond_shape);\n+        // The expression may (partially) fit on the current line.\n+        // We do not allow splitting between `if` and condition.\n+        if self.keyword == \"if\" || expr_rw.is_some() {\n+            return expr_rw;\n+        }\n+\n+        // The expression won't fit on the current line, jump to next.\n+        let nested_shape = shape\n+            .block_indent(context.config.tab_spaces())\n+            .with_max_width(context.config);\n+        let nested_indent_str = nested_shape.indent.to_string_with_newline(context.config);\n+        expr.rewrite(context, nested_shape)\n+            .map(|expr_rw| format!(\"{}{}\", nested_indent_str, expr_rw))\n+    }\n+\n     fn rewrite_cond(\n         &self,\n         context: &RewriteContext,\n@@ -922,11 +970,7 @@ impl<'a> ControlFlow<'a> {\n     ) -> Option<(String, usize)> {\n         // Do not take the rhs overhead from the upper expressions into account\n         // when rewriting pattern.\n-        let new_width = context\n-            .config\n-            .max_width()\n-            .checked_sub(shape.used_width())\n-            .unwrap_or(0);\n+        let new_width = context.budget(shape.used_width());\n         let fresh_shape = Shape {\n             width: new_width,\n             ..shape\n@@ -944,16 +988,7 @@ impl<'a> ControlFlow<'a> {\n         let offset = self.keyword.len() + label_string.len() + 1;\n \n         let pat_expr_string = match self.cond {\n-            Some(cond) => rewrite_pat_expr(\n-                context,\n-                self.pat,\n-                cond,\n-                self.matcher,\n-                self.connector,\n-                self.keyword,\n-                constr_shape,\n-                offset,\n-            )?,\n+            Some(cond) => self.rewrite_pat_expr(context, cond, constr_shape, offset)?,\n             None => String::new(),\n         };\n \n@@ -1007,15 +1042,17 @@ impl<'a> ControlFlow<'a> {\n             context\n                 .snippet_provider\n                 .span_after(mk_sp(lo, self.span.hi()), self.keyword.trim()),\n-            self.pat.map_or(cond_span.lo(), |p| {\n+            if self.pats.is_empty() {\n+                cond_span.lo()\n+            } else {\n                 if self.matcher.is_empty() {\n-                    p.span.lo()\n+                    self.pats[0].span.lo()\n                 } else {\n                     context\n                         .snippet_provider\n                         .span_before(self.span, self.matcher.trim())\n                 }\n-            }),\n+            },\n         );\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n@@ -1102,7 +1139,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                 ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(\n                         cond,\n-                        Some(pat),\n+                        ptr_vec_to_ref_vec(pat),\n                         if_block,\n                         next_else_block.as_ref().map(|e| &**e),\n                         false,\n@@ -1113,7 +1150,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                 ast::ExprKind::If(ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(\n                         cond,\n-                        None,\n+                        vec![],\n                         if_block,\n                         next_else_block.as_ref().map(|e| &**e),\n                         false,\n@@ -1231,23 +1268,43 @@ pub fn is_unsafe_block(block: &ast::Block) -> bool {\n     }\n }\n \n-// A simple wrapper type against ast::Arm. Used inside write_list().\n+/// A simple wrapper type against ast::Arm. Used inside write_list().\n struct ArmWrapper<'a> {\n     pub arm: &'a ast::Arm,\n-    // True if the arm is the last one in match expression. Used to decide on whether we should add\n-    // trailing comma to the match arm when `config.trailing_comma() == Never`.\n+    /// True if the arm is the last one in match expression. Used to decide on whether we should add\n+    /// trailing comma to the match arm when `config.trailing_comma() == Never`.\n     pub is_last: bool,\n+    /// Holds a byte position of `|` at the beginning of the arm pattern, if available.\n+    pub beginning_vert: Option<BytePos>,\n }\n \n impl<'a> ArmWrapper<'a> {\n-    pub fn new(arm: &'a ast::Arm, is_last: bool) -> ArmWrapper<'a> {\n-        ArmWrapper { arm, is_last }\n+    pub fn new(\n+        arm: &'a ast::Arm,\n+        is_last: bool,\n+        beginning_vert: Option<BytePos>,\n+    ) -> ArmWrapper<'a> {\n+        ArmWrapper {\n+            arm,\n+            is_last,\n+            beginning_vert,\n+        }\n+    }\n+}\n+\n+impl<'a> Spanned for ArmWrapper<'a> {\n+    fn span(&self) -> Span {\n+        if let Some(lo) = self.beginning_vert {\n+            mk_sp(lo, self.arm.span().hi())\n+        } else {\n+            self.arm.span()\n+        }\n     }\n }\n \n impl<'a> Rewrite for ArmWrapper<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_match_arm(context, self.arm, shape, self.is_last)\n+        rewrite_match_arm(context, self.arm, shape, self.is_last, self.beginning_vert)\n     }\n }\n \n@@ -1344,6 +1401,23 @@ fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {\n     }\n }\n \n+/// Collect a byte position of the beginning `|` for each arm, if available.\n+fn collect_beginning_verts(\n+    context: &RewriteContext,\n+    arms: &[ast::Arm],\n+    span: Span,\n+) -> Vec<Option<BytePos>> {\n+    let mut beginning_verts = Vec::with_capacity(arms.len());\n+    let mut lo = context.snippet_provider.span_after(span, \"{\");\n+    for arm in arms {\n+        let hi = arm.pats[0].span.lo();\n+        let missing_span = mk_sp(lo, hi);\n+        beginning_verts.push(context.snippet_provider.opt_span_before(missing_span, \"|\"));\n+        lo = arm.span().hi();\n+    }\n+    beginning_verts\n+}\n+\n fn rewrite_match_arms(\n     context: &RewriteContext,\n     arms: &[ast::Arm],\n@@ -1359,15 +1433,17 @@ fn rewrite_match_arms(\n     let is_last_iter = repeat(false)\n         .take(arm_len.checked_sub(1).unwrap_or(0))\n         .chain(repeat(true));\n+    let beginning_verts = collect_beginning_verts(context, arms, span);\n     let items = itemize_list(\n         context.snippet_provider,\n         arms.iter()\n             .zip(is_last_iter)\n-            .map(|(arm, is_last)| ArmWrapper::new(arm, is_last)),\n+            .zip(beginning_verts.into_iter())\n+            .map(|((arm, is_last), beginning_vert)| ArmWrapper::new(arm, is_last, beginning_vert)),\n         \"}\",\n         \"|\",\n-        |arm| arm.arm.span().lo(),\n-        |arm| arm.arm.span().hi(),\n+        |arm| arm.span().lo(),\n+        |arm| arm.span().hi(),\n         |arm| arm.rewrite(context, arm_shape),\n         open_brace_pos,\n         span.hi(),\n@@ -1394,6 +1470,7 @@ fn rewrite_match_arm(\n     arm: &ast::Arm,\n     shape: Shape,\n     is_last: bool,\n+    beginning_vert: Option<BytePos>,\n ) -> Option<String> {\n     let (missing_span, attrs_str) = if !arm.attrs.is_empty() {\n         if contains_skip(&arm.attrs) {\n@@ -1415,9 +1492,9 @@ fn rewrite_match_arm(\n     };\n     let pats_str = rewrite_match_pattern(\n         context,\n-        &arm.pats,\n+        &ptr_vec_to_ref_vec(&arm.pats),\n         &arm.guard,\n-        arm.beginning_vert.is_some(),\n+        beginning_vert.is_some(),\n         shape,\n     ).and_then(|pats_str| {\n         combine_strs_with_missing_comments(\n@@ -1467,13 +1544,15 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n         ast::PatKind::TupleStruct(ref path, ref subpats, _) => {\n             path.segments.len() <= 1 && subpats.len() <= 1\n         }\n-        ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) => is_short_pattern_inner(&*p),\n+        ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) | ast::PatKind::Paren(ref p) => {\n+            is_short_pattern_inner(&*p)\n+        }\n     }\n }\n \n fn rewrite_match_pattern(\n     context: &RewriteContext,\n-    pats: &[ptr::P<ast::Pat>],\n+    pats: &[&ast::Pat],\n     guard: &Option<ptr::P<ast::Expr>>,\n     has_beginning_vert: bool,\n     shape: Shape,\n@@ -1484,36 +1563,7 @@ fn rewrite_match_pattern(\n     let pat_shape = shape\n         .sub_width(5)?\n         .offset_left(if has_beginning_vert { 2 } else { 0 })?;\n-\n-    let pat_strs = pats.iter()\n-        .map(|p| p.rewrite(context, pat_shape))\n-        .collect::<Option<Vec<_>>>()?;\n-\n-    let use_mixed_layout = pats.iter()\n-        .zip(pat_strs.iter())\n-        .all(|(pat, pat_str)| is_short_pattern(pat, pat_str));\n-    let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n-    let tactic = if use_mixed_layout {\n-        DefinitiveListTactic::Mixed\n-    } else {\n-        definitive_tactic(\n-            &items,\n-            ListTactic::HorizontalVertical,\n-            Separator::VerticalBar,\n-            pat_shape.width,\n-        )\n-    };\n-    let fmt = ListFormatting {\n-        tactic,\n-        separator: \" |\",\n-        trailing_separator: SeparatorTactic::Never,\n-        separator_place: context.config.binop_separator(),\n-        shape: pat_shape,\n-        ends_with_newline: false,\n-        preserve_newline: false,\n-        config: context.config,\n-    };\n-    let pats_str = write_list(&items, &fmt)?;\n+    let pats_str = rewrite_multiple_patterns(context, pats, pat_shape)?;\n     let beginning_vert = if has_beginning_vert { \"| \" } else { \"\" };\n \n     // Guard\n@@ -1709,48 +1759,40 @@ fn rewrite_guard(\n     }\n }\n \n-fn rewrite_pat_expr(\n+fn rewrite_multiple_patterns(\n     context: &RewriteContext,\n-    pat: Option<&ast::Pat>,\n-    expr: &ast::Expr,\n-    matcher: &str,\n-    // Connecting piece between pattern and expression,\n-    // *without* trailing space.\n-    connector: &str,\n-    keyword: &str,\n+    pats: &[&ast::Pat],\n     shape: Shape,\n-    offset: usize,\n ) -> Option<String> {\n-    debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n-    let cond_shape = shape.offset_left(offset)?;\n-    if let Some(pat) = pat {\n-        let matcher = if matcher.is_empty() {\n-            matcher.to_owned()\n-        } else {\n-            format!(\"{} \", matcher)\n-        };\n-        let pat_shape = cond_shape\n-            .offset_left(matcher.len())?\n-            .sub_width(connector.len())?;\n-        let pat_string = pat.rewrite(context, pat_shape)?;\n-        let result = format!(\"{}{}{}\", matcher, pat_string, connector);\n-        return rewrite_assign_rhs(context, result, expr, cond_shape);\n-    }\n-\n-    let expr_rw = expr.rewrite(context, cond_shape);\n-    // The expression may (partially) fit on the current line.\n-    // We do not allow splitting between `if` and condition.\n-    if keyword == \"if\" || expr_rw.is_some() {\n-        return expr_rw;\n-    }\n+    let pat_strs = pats.iter()\n+        .map(|p| p.rewrite(context, shape))\n+        .collect::<Option<Vec<_>>>()?;\n \n-    // The expression won't fit on the current line, jump to next.\n-    let nested_shape = shape\n-        .block_indent(context.config.tab_spaces())\n-        .with_max_width(context.config);\n-    let nested_indent_str = nested_shape.indent.to_string_with_newline(context.config);\n-    expr.rewrite(context, nested_shape)\n-        .map(|expr_rw| format!(\"{}{}\", nested_indent_str, expr_rw))\n+    let use_mixed_layout = pats.iter()\n+        .zip(pat_strs.iter())\n+        .all(|(pat, pat_str)| is_short_pattern(pat, pat_str));\n+    let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n+    let tactic = if use_mixed_layout {\n+        DefinitiveListTactic::Mixed\n+    } else {\n+        definitive_tactic(\n+            &items,\n+            ListTactic::HorizontalVertical,\n+            Separator::VerticalBar,\n+            shape.width,\n+        )\n+    };\n+    let fmt = ListFormatting {\n+        tactic,\n+        separator: \" |\",\n+        trailing_separator: SeparatorTactic::Never,\n+        separator_place: context.config.binop_separator(),\n+        shape: shape,\n+        ends_with_newline: false,\n+        preserve_newline: false,\n+        config: context.config,\n+    };\n+    write_list(&items, &fmt)\n }\n \n fn can_extend_match_arm_body(body: &ast::Expr) -> bool {"}, {"sha": "ce1bc1ae3182eaf72264aae8c55fe66b0d756590", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -16,8 +16,7 @@ use std::cmp::min;\n use config::lists::*;\n use regex::Regex;\n use syntax::{abi, ast, ptr, symbol};\n-use syntax::ast::{CrateSugar, ImplItem};\n-use syntax::codemap::{BytePos, Span};\n+use syntax::codemap::{self, BytePos, Span};\n use syntax::visit;\n \n use codemap::{LineRangeUtils, SpanUtils};\n@@ -39,6 +38,11 @@ use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_co\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n+const DEFAULT_VISIBILITY: ast::Visibility = codemap::Spanned {\n+    node: ast::VisibilityKind::Inherited,\n+    span: codemap::DUMMY_SP,\n+};\n+\n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config.space_before_colon(), config.space_after_colon())\n }\n@@ -191,7 +195,7 @@ impl<'a> FnSig<'a> {\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n             generics,\n-            visibility: ast::Visibility::Inherited,\n+            visibility: DEFAULT_VISIBILITY,\n         }\n     }\n \n@@ -680,7 +684,7 @@ pub fn format_impl(\n \n fn is_impl_single_line(\n     context: &RewriteContext,\n-    items: &[ImplItem],\n+    items: &[ast::ImplItem],\n     result: &str,\n     where_clause_str: &str,\n     item: &ast::Item,\n@@ -869,7 +873,7 @@ impl<'a> StructParts<'a> {\n         StructParts {\n             prefix: \"\",\n             ident: variant.node.name,\n-            vis: &ast::Visibility::Inherited,\n+            vis: &DEFAULT_VISIBILITY,\n             def: &variant.node.data,\n             generics: None,\n             span: variant.span,\n@@ -1208,21 +1212,9 @@ pub fn format_struct_struct(\n     }\n }\n \n-/// Returns a bytepos that is after that of `(` in `pub(..)`. If the given visibility does not\n-/// contain `pub(..)`, then return the `lo` of the `defualt_span`. Yeah, but for what? Well, we need\n-/// to bypass the `(` in the visibility when creating a span of tuple's body or fn's args.\n-fn get_bytepos_after_visibility(\n-    context: &RewriteContext,\n-    vis: &ast::Visibility,\n-    default_span: Span,\n-    terminator: &str,\n-) -> BytePos {\n-    match *vis {\n-        ast::Visibility::Crate(s, CrateSugar::PubCrate) => context\n-            .snippet_provider\n-            .span_after(mk_sp(s.hi(), default_span.hi()), terminator),\n-        ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n-        ast::Visibility::Restricted { ref path, .. } => path.span.hi(),\n+fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n+    match vis.node {\n+        ast::VisibilityKind::Crate(..) | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }\n@@ -1240,7 +1232,7 @@ fn format_tuple_struct(\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n-        let lo = get_bytepos_after_visibility(context, struct_parts.vis, span, \")\");\n+        let lo = get_bytepos_after_visibility(struct_parts.vis, span);\n         context\n             .snippet_provider\n             .span_after(mk_sp(lo, span.hi()), \"(\")\n@@ -1522,7 +1514,7 @@ impl<'a> StaticParts<'a> {\n         };\n         StaticParts {\n             prefix: \"const\",\n-            vis: &ast::Visibility::Inherited,\n+            vis: &DEFAULT_VISIBILITY,\n             ident: ti.ident,\n             ty,\n             mutability: ast::Mutability::Immutable,\n@@ -1874,7 +1866,7 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = get_bytepos_after_visibility(context, &fn_sig.visibility, span, \")\");\n+    let lo_after_visibility = get_bytepos_after_visibility(&fn_sig.visibility, span);\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = fn_sig\n         .generics"}, {"sha": "e94f13b9daf27d77e3a6076dbda4e0d76def10cc", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -129,6 +129,8 @@ impl Rewrite for Pat {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::Mac(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n+            PatKind::Paren(ref pat) => pat.rewrite(context, shape.offset_left(1)?.sub_width(1)?)\n+                .map(|inner_pat| format!(\"({})\", inner_pat)),\n         }\n     }\n }"}, {"sha": "d1f4865deade59756d70f2fa051bfa0ca111c676", "filename": "src/spanned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -89,10 +89,10 @@ impl Spanned for ast::Ty {\n \n impl Spanned for ast::Arm {\n     fn span(&self) -> Span {\n-        let lo = if let Some(sp) = self.beginning_vert {\n-            sp.lo()\n-        } else {\n+        let lo = if self.attrs.is_empty() {\n             self.pats[0].span.lo()\n+        } else {\n+            self.attrs[0].span.lo()\n         };\n         span_with_attrs_lo_hi!(self, lo, self.body.span.hi())\n     }"}, {"sha": "f6d2ff23c349f8a2123fef79300420adf242a24d", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n \n use syntax::{abi, ptr};\n use syntax::ast::{self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem,\n-                  NestedMetaItemKind, Path, Visibility};\n+                  NestedMetaItemKind, Path, Visibility, VisibilityKind};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n use config::Color;\n@@ -35,12 +35,12 @@ pub fn extra_offset(text: &str, shape: Shape) -> usize {\n \n // Uses Cow to avoid allocating in the common cases.\n pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n-    match *vis {\n-        Visibility::Public => Cow::from(\"pub \"),\n-        Visibility::Inherited => Cow::from(\"\"),\n-        Visibility::Crate(_, CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n-        Visibility::Crate(_, CrateSugar::JustCrate) => Cow::from(\"crate \"),\n-        Visibility::Restricted { ref path, .. } => {\n+    match vis.node {\n+        VisibilityKind::Public => Cow::from(\"pub \"),\n+        VisibilityKind::Inherited => Cow::from(\"\"),\n+        VisibilityKind::Crate(CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n+        VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n+        VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());\n             if path.is_global() {"}, {"sha": "f01df7e91586d98fd935ef48110ec31454f36046", "filename": "tests/source/if_while_or_patterns.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Fsource%2Fif_while_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Fsource%2Fif_while_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fif_while_or_patterns.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -0,0 +1,27 @@\n+#![feature(if_while_or_patterns)]\n+\n+fn main() {\n+    if let 0 | 1 = 0 {\n+        println!(\"hello, world\");\n+    };\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbbbbbb | cccccccccccccccc | d_100 = 0 {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbb | ccccccccccccccccccccc | d_101 = 0 {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbb | ccccccccccccccccccccc | d_103 = 0 {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbb | ccccccccccccccccccccc | d_105 = 0 {\n+        println!(\"hello, world\");\n+    }\n+\n+    while let xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx = foo_bar(bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, cccccccccccccccccccccccccccccccccccccccc) {\n+        println!(\"hello, world\");\n+    }\n+}"}, {"sha": "1c5919ccff97dc72ce1500a4bc5850149305d19f", "filename": "tests/source/visibility.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Fsource%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Fsource%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fvisibility.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -0,0 +1,8 @@\n+// #2398\n+pub mod outer_mod {\n+    pub mod inner_mod {\n+       pub ( in outer_mod ) fn outer_mod_visible_fn() {}\n+         pub ( super ) fn super_mod_visible_fn() {}\n+      pub ( self ) fn inner_mod_visible_fn() {}\n+    }\n+}"}, {"sha": "61a357afcbaea0e2e31de385f48e5015b873125c", "filename": "tests/target/if_while_or_patterns.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Ftarget%2Fif_while_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Ftarget%2Fif_while_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fif_while_or_patterns.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -0,0 +1,38 @@\n+#![feature(if_while_or_patterns)]\n+\n+fn main() {\n+    if let 0 | 1 = 0 {\n+        println!(\"hello, world\");\n+    };\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbbbbbb | cccccccccccccccc | d_100 = 0 {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbb | ccccccccccccccccccccc | d_101 = 0\n+    {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaaaa | bbbbbbbbbbbbbbbbbbbbbbb | ccccccccccccccccccccc | d_103 =\n+        0\n+    {\n+        println!(\"hello, world\");\n+    }\n+\n+    if let aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    | bbbbbbbbbbbbbbbbbbbbbbb\n+    | ccccccccccccccccccccc\n+    | d_105 = 0\n+    {\n+        println!(\"hello, world\");\n+    }\n+\n+    while let xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx\n+    | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx | xxx = foo_bar(\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        cccccccccccccccccccccccccccccccccccccccc,\n+    ) {\n+        println!(\"hello, world\");\n+    }\n+}"}, {"sha": "ca078422c1358f980f8aba816a1bcc1895d25a03", "filename": "tests/target/visibility.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Ftarget%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d509c25cf5b3d33c7f30335f4cf9af759665a7/tests%2Ftarget%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fvisibility.rs?ref=06d509c25cf5b3d33c7f30335f4cf9af759665a7", "patch": "@@ -0,0 +1,8 @@\n+// #2398\n+pub mod outer_mod {\n+    pub mod inner_mod {\n+        pub(in outer_mod) fn outer_mod_visible_fn() {}\n+        pub(super) fn super_mod_visible_fn() {}\n+        pub(self) fn inner_mod_visible_fn() {}\n+    }\n+}"}]}