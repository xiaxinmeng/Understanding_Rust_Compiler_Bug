{"sha": "b7cbd4ec47640323e5b25cc64110f5ff414e4946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Y2JkNGVjNDc2NDAzMjNlNWIyNWNjNjQxMTBmNWZmNDE0ZTQ5NDY=", "commit": {"author": {"name": "Limira", "email": "2409315-limira-rs@users.noreply.gitlab.com", "date": "2019-07-16T04:30:48Z"}, "committer": {"name": "Limira", "email": "2409315-limira-rs@users.noreply.gitlab.com", "date": "2019-07-16T04:30:48Z"}, "message": "Update the help message on error for self type", "tree": {"sha": "56c4d623a0482ad1545be725a7f0889d9e8ba5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c4d623a0482ad1545be725a7f0889d9e8ba5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cbd4ec47640323e5b25cc64110f5ff414e4946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cbd4ec47640323e5b25cc64110f5ff414e4946", "html_url": "https://github.com/rust-lang/rust/commit/b7cbd4ec47640323e5b25cc64110f5ff414e4946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cbd4ec47640323e5b25cc64110f5ff414e4946/comments", "author": null, "committer": null, "parents": [{"sha": "4b65a86ebace8600c8e269e8bfe3365cdc460e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b65a86ebace8600c8e269e8bfe3365cdc460e68", "html_url": "https://github.com/rust-lang/rust/commit/4b65a86ebace8600c8e269e8bfe3365cdc460e68"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "32f1f8c6188fea4cd6dc5659fd79b45f8b324791", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -769,6 +769,10 @@ fn check_method_receiver<'fcx, 'tcx>(\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n+    const HELP_FOR_SELF_TYPE: &str =\n+        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n     debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n            method, self_ty);\n@@ -805,7 +809,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n             fcx.tcx.sess.diagnostic().mut_span_err(\n                 span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n             ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+            .help(HELP_FOR_SELF_TYPE)\n             .code(DiagnosticId::Error(\"E0307\".into()))\n             .emit();\n         }\n@@ -823,14 +827,14 @@ fn check_method_receiver<'fcx, 'tcx>(\n                             the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n-                ).help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                ).help(HELP_FOR_SELF_TYPE)\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n                 fcx.tcx.sess.diagnostic().mut_span_err(\n                     span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n                 ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .help(HELP_FOR_SELF_TYPE)\n                 .code(DiagnosticId::Error(\"E0307\".into()))\n                 .emit();\n             }"}, {"sha": "a70bf1f1990ad99925548b3d3171ac3e9266d82f", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -6,7 +6,7 @@ LL |     fn foo(self: Ptr<Self>);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:22:18\n@@ -16,7 +16,7 @@ LL |     fn foo(self: Ptr<Self>) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:26:18\n@@ -26,7 +26,7 @@ LL |     fn bar(self: Box<Ptr<Self>>) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0f8863b87150f64001c9db5925a6515c3354420b", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -6,7 +6,7 @@ LL |     fn bar(self: *const Self);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:4:18\n@@ -16,7 +16,7 @@ LL |     fn foo(self: *const Self) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n@@ -26,7 +26,7 @@ LL |     fn bar(self: *const Self) {}\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44874\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fae6a26720f3605edc527afdf6d42960b9a1e595", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -5,7 +5,7 @@ LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n "}, {"sha": "88dfee1cada3fed971c49f8053167259b62e9a27", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -5,7 +5,7 @@ LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n "}, {"sha": "6da20e37577b08e03ab5e474deba4e43eb934ece", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7cbd4ec47640323e5b25cc64110f5ff414e4946/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=b7cbd4ec47640323e5b25cc64110f5ff414e4946", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0307]: invalid method receiver type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n@@ -14,7 +14,7 @@ LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0307]: invalid method receiver type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n@@ -23,7 +23,7 @@ LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error[E0308]: mismatched method receiver\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21"}]}