{"sha": "861cced1193b13be87c6098cca93264e15cac351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MWNjZWQxMTkzYjEzYmU4N2M2MDk4Y2NhOTMyNjRlMTVjYWMzNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-25T00:46:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-25T00:46:50Z"}, "message": "auto merge of #10600 : ktt3ja/rust/add-doc, r=huonw\n\nI received a lot of helpful explanations when I was going through rustc's middle-end code. I document some of them here.", "tree": {"sha": "d865cae1dbb90eb8b9d2d76b75b1884841f82e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d865cae1dbb90eb8b9d2d76b75b1884841f82e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861cced1193b13be87c6098cca93264e15cac351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861cced1193b13be87c6098cca93264e15cac351", "html_url": "https://github.com/rust-lang/rust/commit/861cced1193b13be87c6098cca93264e15cac351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861cced1193b13be87c6098cca93264e15cac351/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ff24adaa8c7f9c48c525f284526c23ffd33fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ff24adaa8c7f9c48c525f284526c23ffd33fcb", "html_url": "https://github.com/rust-lang/rust/commit/b3ff24adaa8c7f9c48c525f284526c23ffd33fcb"}, {"sha": "9a4c8da5015d8f08310dd2123959761fea84d0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4c8da5015d8f08310dd2123959761fea84d0f6", "html_url": "https://github.com/rust-lang/rust/commit/9a4c8da5015d8f08310dd2123959761fea84d0f6"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "a74480a7a0c10ed059a4573bcd2f14e4fd6a8629", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861cced1193b13be87c6098cca93264e15cac351/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861cced1193b13be87c6098cca93264e15cac351/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=861cced1193b13be87c6098cca93264e15cac351", "patch": "@@ -70,6 +70,8 @@ pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: @Pat) -> bool {\n     }\n }\n \n+/// Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n+/// `match foo() { Some(a) => (), None => () }`\n pub fn pat_bindings(dm: resolve::DefMap,\n                     pat: @Pat,\n                     it: |BindingMode, NodeId, Span, &Path|) {"}, {"sha": "fefed795779581f3602d5350615c71175a41cb63", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/861cced1193b13be87c6098cca93264e15cac351/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861cced1193b13be87c6098cca93264e15cac351/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=861cced1193b13be87c6098cca93264e15cac351", "patch": "@@ -259,6 +259,9 @@ pub enum AutoRef {\n \n pub type ctxt = @ctxt_;\n \n+/// The data structure to keep track of all the information that typechecker\n+/// generates so that so that it can be reused and doesn't have to be redone\n+/// later on.\n struct ctxt_ {\n     diag: @mut syntax::diagnostic::span_handler,\n     interner: @mut HashMap<intern_key, ~t_box_>,\n@@ -296,6 +299,8 @@ struct ctxt_ {\n     trait_refs: @mut HashMap<NodeId, @TraitRef>,\n     trait_defs: @mut HashMap<DefId, @TraitDef>,\n \n+    /// Despite its name, `items` does not only map NodeId to an item but\n+    /// also to expr/stmt/local/arg/etc\n     items: ast_map::map,\n     intrinsic_defs: @mut HashMap<ast::DefId, t>,\n     freevars: freevars::freevar_map,"}, {"sha": "dacd7a09f9bb8fe07f8b8215d6bbe093ff79e009", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/861cced1193b13be87c6098cca93264e15cac351/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861cced1193b13be87c6098cca93264e15cac351/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=861cced1193b13be87c6098cca93264e15cac351", "patch": "@@ -173,6 +173,8 @@ pub struct DefId {\n     node: NodeId,\n }\n \n+/// Item definitions in the currently-compiled crate would have the CrateNum\n+/// LOCAL_CRATE in their DefId.\n pub static LOCAL_CRATE: CrateNum = 0;\n pub static CRATE_NODE_ID: NodeId = 0;\n \n@@ -244,6 +246,10 @@ pub enum Def {\n               @Def,     // closed over def\n               NodeId,  // expr node that creates the closure\n               NodeId), // id for the block/body of the closure expr\n+\n+    /// Note that if it's a tuple struct's definition, the node id\n+    /// of the DefId refers to the struct_def.ctor_id (whereas normally it\n+    /// refers to the item definition's id).\n     DefStruct(DefId),\n     DefTyParamBinder(NodeId), /* struct, impl or trait with ty params */\n     DefRegion(NodeId),\n@@ -451,6 +457,7 @@ pub enum Stmt_ {\n \n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n+/// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub struct Local {\n     ty: Ty,\n@@ -553,6 +560,10 @@ pub enum Expr_ {\n     ExprAssignOp(NodeId, BinOp, @Expr, @Expr),\n     ExprField(@Expr, Ident, ~[Ty]),\n     ExprIndex(NodeId, @Expr, @Expr),\n+\n+    /// Expression that looks like a \"name\". For example,\n+    /// `std::vec::from_elem::<uint>` is an ExprPath that's the \"name\" part\n+    /// of a function call.\n     ExprPath(Path),\n \n     /// The special identifier `self`."}, {"sha": "218aead6f52995209896ecbde6536362a0ea85e0", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/861cced1193b13be87c6098cca93264e15cac351/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861cced1193b13be87c6098cca93264e15cac351/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=861cced1193b13be87c6098cca93264e15cac351", "patch": "@@ -111,12 +111,18 @@ pub enum ast_node {\n     node_trait_method(@trait_method, DefId /* trait did */,\n                       @path /* path to the trait */),\n     node_method(@method, DefId /* impl did */, @path /* path to the impl */),\n+\n+    /// node_variant represents a variant of an enum, e.g., for\n+    /// `enum A { B, C, D }`, there would be a node_item for `A`, and a\n+    /// node_variant item for each of `B`, `C`, and `D`.\n     node_variant(variant, @item, @path),\n     node_expr(@Expr),\n     node_stmt(@Stmt),\n     node_arg(@Pat),\n     node_local(Ident),\n     node_block(Block),\n+\n+    /// node_struct_ctor represents a tuple struct.\n     node_struct_ctor(@struct_def, @item, @path),\n     node_callee_scope(@Expr)\n }"}]}