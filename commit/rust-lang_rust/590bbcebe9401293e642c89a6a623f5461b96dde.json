{"sha": "590bbcebe9401293e642c89a6a623f5461b96dde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MGJiY2ViZTk0MDEyOTNlNjQyYzg5YTZhNjIzZjU0NjFiOTZkZGU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T04:34:47Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:05:54Z"}, "message": "std: remove Encoder::emit_{owned,managed}_vec and Decoder::read_{owned,managed}_vec", "tree": {"sha": "5ba2c2974cd12401408981b71467b1027b61acfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba2c2974cd12401408981b71467b1027b61acfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590bbcebe9401293e642c89a6a623f5461b96dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590bbcebe9401293e642c89a6a623f5461b96dde", "html_url": "https://github.com/rust-lang/rust/commit/590bbcebe9401293e642c89a6a623f5461b96dde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590bbcebe9401293e642c89a6a623f5461b96dde/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63fc88757f9742b763114deac75962cb897b8218", "url": "https://api.github.com/repos/rust-lang/rust/commits/63fc88757f9742b763114deac75962cb897b8218", "html_url": "https://github.com/rust-lang/rust/commit/63fc88757f9742b763114deac75962cb897b8218"}], "stats": {"total": 202, "additions": 78, "deletions": 124}, "files": [{"sha": "18cf807f4f176f611dd54ac693f559c6f3fb805f", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=590bbcebe9401293e642c89a6a623f5461b96dde", "patch": "@@ -348,26 +348,17 @@ pub mod reader {\n             f()\n         }\n \n-        fn read_owned_vec<T>(&self, f: &fn(uint) -> T) -> T {\n-            debug!(\"read_owned_vec()\");\n+        fn read_seq<T>(&self, f: &fn(uint) -> T) -> T {\n+            debug!(\"read_seq()\");\n             do self.push_doc(self.next_doc(EsVec)) {\n                 let len = self._next_uint(EsVecLen);\n                 debug!(\"  len=%u\", len);\n                 f(len)\n             }\n         }\n \n-        fn read_managed_vec<T>(&self, f: &fn(uint) -> T) -> T {\n-            debug!(\"read_managed_vec()\");\n-            do self.push_doc(self.next_doc(EsVec)) {\n-                let len = self._next_uint(EsVecLen);\n-                debug!(\"  len=%u\", len);\n-                f(len)\n-            }\n-        }\n-\n-        fn read_vec_elt<T>(&self, idx: uint, f: &fn() -> T) -> T {\n-            debug!(\"read_vec_elt(idx=%u)\", idx);\n+        fn read_seq_elt<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+            debug!(\"read_seq_elt(idx=%u)\", idx);\n             self.push_doc(self.next_doc(EsVecElt), f)\n         }\n \n@@ -652,22 +643,14 @@ pub mod writer {\n         }\n         fn emit_enum_variant_arg(&self, _idx: uint, f: &fn()) { f() }\n \n-        fn emit_borrowed_vec(&self, len: uint, f: &fn()) {\n+        fn emit_seq(&self, len: uint, f: &fn()) {\n             do self.wr_tag(EsVec as uint) {\n                 self._emit_tagged_uint(EsVecLen, len);\n                 f()\n             }\n         }\n \n-        fn emit_owned_vec(&self, len: uint, f: &fn()) {\n-            self.emit_borrowed_vec(len, f)\n-        }\n-\n-        fn emit_managed_vec(&self, len: uint, f: &fn()) {\n-            self.emit_borrowed_vec(len, f)\n-        }\n-\n-        fn emit_vec_elt(&self, _idx: uint, f: &fn()) {\n+        fn emit_seq_elt(&self, _idx: uint, f: &fn()) {\n             self.wr_tag(EsVecElt as uint, f)\n         }\n "}, {"sha": "d2dd9bc34326ecdfe0cd1ea2c4d85720d025e3ef", "filename": "src/libstd/json.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=590bbcebe9401293e642c89a6a623f5461b96dde", "patch": "@@ -130,19 +130,13 @@ impl serialize::Encoder for Encoder {\n         f();\n     }\n \n-    fn emit_borrowed_vec(&self, _len: uint, f: &fn()) {\n+    fn emit_seq(&self, _len: uint, f: &fn()) {\n         self.wr.write_char('[');\n         f();\n         self.wr.write_char(']');\n     }\n \n-    fn emit_owned_vec(&self, len: uint, f: &fn()) {\n-        self.emit_borrowed_vec(len, f)\n-    }\n-    fn emit_managed_vec(&self, len: uint, f: &fn()) {\n-        self.emit_borrowed_vec(len, f)\n-    }\n-    fn emit_vec_elt(&self, idx: uint, f: &fn()) {\n+    fn emit_seq_elt(&self, idx: uint, f: &fn()) {\n         if idx != 0 { self.wr.write_char(','); }\n         f()\n     }\n@@ -165,10 +159,10 @@ impl serialize::Encoder for Encoder {\n     }\n \n     fn emit_tup(&self, len: uint, f: &fn()) {\n-        self.emit_borrowed_vec(len, f);\n+        self.emit_seq(len, f);\n     }\n     fn emit_tup_elt(&self, idx: uint, f: &fn()) {\n-        self.emit_vec_elt(idx, f)\n+        self.emit_seq_elt(idx, f)\n     }\n \n     fn emit_option(&self, f: &fn()) { f(); }\n@@ -243,7 +237,7 @@ impl serialize::Encoder for PrettyEncoder {\n         f()\n     }\n \n-    fn emit_borrowed_vec(&self, len: uint, f: &fn()) {\n+    fn emit_seq(&self, len: uint, f: &fn()) {\n         if len == 0 {\n             self.wr.write_str(\"[]\");\n         } else {\n@@ -256,13 +250,7 @@ impl serialize::Encoder for PrettyEncoder {\n             self.wr.write_char(']');\n         }\n     }\n-    fn emit_owned_vec(&self, len: uint, f: &fn()) {\n-        self.emit_borrowed_vec(len, f)\n-    }\n-    fn emit_managed_vec(&self, len: uint, f: &fn()) {\n-        self.emit_borrowed_vec(len, f)\n-    }\n-    fn emit_vec_elt(&self, idx: uint, f: &fn()) {\n+    fn emit_seq_elt(&self, idx: uint, f: &fn()) {\n         if idx == 0 {\n             self.wr.write_char('\\n');\n         } else {\n@@ -300,10 +288,10 @@ impl serialize::Encoder for PrettyEncoder {\n         f();\n     }\n     fn emit_tup(&self, sz: uint, f: &fn()) {\n-        self.emit_borrowed_vec(sz, f);\n+        self.emit_seq(sz, f);\n     }\n     fn emit_tup_elt(&self, idx: uint, f: &fn()) {\n-        self.emit_vec_elt(idx, f)\n+        self.emit_seq_elt(idx, f)\n     }\n \n     fn emit_option(&self, f: &fn()) { f(); }\n@@ -858,19 +846,8 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         }\n     }\n \n-    fn read_owned_vec<T>(&self, f: &fn(uint) -> T) -> T {\n-        debug!(\"read_owned_vec()\");\n-        let len = match *self.peek() {\n-            List(ref list) => list.len(),\n-            _ => fail!(~\"not a list\"),\n-        };\n-        let res = f(len);\n-        self.pop();\n-        res\n-    }\n-\n-    fn read_managed_vec<T>(&self, f: &fn(uint) -> T) -> T {\n-        debug!(\"read_owned_vec()\");\n+    fn read_seq<T>(&self, f: &fn(uint) -> T) -> T {\n+        debug!(\"read_seq()\");\n         let len = match *self.peek() {\n             List(ref list) => list.len(),\n             _ => fail!(~\"not a list\"),\n@@ -880,8 +857,8 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         res\n     }\n \n-    fn read_vec_elt<T>(&self, idx: uint, f: &fn() -> T) -> T {\n-        debug!(\"read_vec_elt(idx=%u)\", idx);\n+    fn read_seq_elt<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+        debug!(\"read_seq_elt(idx=%u)\", idx);\n         match *self.peek() {\n             List(ref list) => {\n                 self.stack.push(&list[idx]);"}, {"sha": "512a12aace8f465467f664629fe9d5de99b18c12", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=590bbcebe9401293e642c89a6a623f5461b96dde", "patch": "@@ -46,10 +46,8 @@ pub trait Encoder {\n     fn emit_enum_variant(&self, v_name: &str, v_id: uint, sz: uint, f: &fn());\n     fn emit_enum_variant_arg(&self, idx: uint, f: &fn());\n \n-    fn emit_borrowed_vec(&self, len: uint, f: &fn());\n-    fn emit_owned_vec(&self, len: uint, f: &fn());\n-    fn emit_managed_vec(&self, len: uint, f: &fn());\n-    fn emit_vec_elt(&self, idx: uint, f: &fn());\n+    fn emit_seq(&self, len: uint, f: &fn());\n+    fn emit_seq_elt(&self, idx: uint, f: &fn());\n \n     fn emit_rec(&self, f: &fn());\n     fn emit_struct(&self, name: &str, _len: uint, f: &fn());\n@@ -94,9 +92,8 @@ pub trait Decoder {\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n-    fn read_owned_vec<T>(&self, f: &fn(uint) -> T) -> T;\n-    fn read_managed_vec<T>(&self, f: &fn(uint) -> T) -> T;\n-    fn read_vec_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n+    fn read_seq<T>(&self, f: &fn(uint) -> T) -> T;\n+    fn read_seq_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n     fn read_rec<T>(&self, f: &fn() -> T) -> T;\n     fn read_struct<T>(&self, name: &str, _len: uint, f: &fn() -> T) -> T;\n@@ -320,49 +317,49 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n \n impl<'self, S:Encoder,T:Encodable<S>> Encodable<S> for &'self [T] {\n     fn encode(&self, s: &S) {\n-        do s.emit_borrowed_vec(self.len()) {\n+        do s.emit_seq(self.len()) {\n             for self.eachi |i, e| {\n-                s.emit_vec_elt(i, || e.encode(s))\n+                s.emit_seq_elt(i, || e.encode(s))\n             }\n         }\n     }\n }\n \n impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~[T] {\n     fn encode(&self, s: &S) {\n-        do s.emit_owned_vec(self.len()) {\n+        do s.emit_seq(self.len()) {\n             for self.eachi |i, e| {\n-                s.emit_vec_elt(i, || e.encode(s))\n+                s.emit_seq_elt(i, || e.encode(s))\n             }\n         }\n     }\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~[T] {\n     fn decode(d: &D) -> ~[T] {\n-        do d.read_owned_vec |len| {\n+        do d.read_seq |len| {\n             do vec::from_fn(len) |i| {\n-                d.read_vec_elt(i, || Decodable::decode(d))\n+                d.read_seq_elt(i, || Decodable::decode(d))\n             }\n         }\n     }\n }\n \n impl<S:Encoder,T:Encodable<S>> Encodable<S> for @[T] {\n     fn encode(&self, s: &S) {\n-        do s.emit_managed_vec(self.len()) {\n+        do s.emit_seq(self.len()) {\n             for self.eachi |i, e| {\n-                s.emit_vec_elt(i, || e.encode(s))\n+                s.emit_seq_elt(i, || e.encode(s))\n             }\n         }\n     }\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n     fn decode(d: &D) -> @[T] {\n-        do d.read_managed_vec |len| {\n+        do d.read_seq |len| {\n             do at_vec::from_fn(len) |i| {\n-                d.read_vec_elt(i, || Decodable::decode(d))\n+                d.read_seq_elt(i, || Decodable::decode(d))\n             }\n         }\n     }\n@@ -395,9 +392,9 @@ impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S> for (T0, T1) {\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1) => {\n-                do s.emit_tup(2) {\n-                    s.emit_tup_elt(0, || t0.encode(s));\n-                    s.emit_tup_elt(1, || t1.encode(s));\n+                do s.emit_seq(2) {\n+                    s.emit_seq_elt(0, || t0.encode(s));\n+                    s.emit_seq_elt(1, || t1.encode(s));\n                 }\n             }\n         }\n@@ -406,10 +403,11 @@ impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S> for (T0, T1) {\n \n impl<D:Decoder,T0:Decodable<D>,T1:Decodable<D>> Decodable<D> for (T0, T1) {\n     fn decode(d: &D) -> (T0, T1) {\n-        do d.read_tup(2) {\n+        do d.read_seq |len| {\n+            fail_unless!(len == 2);\n             (\n-                d.read_tup_elt(0, || Decodable::decode(d)),\n-                d.read_tup_elt(1, || Decodable::decode(d))\n+                d.read_seq_elt(0, || Decodable::decode(d)),\n+                d.read_seq_elt(1, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -424,10 +422,10 @@ impl<\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2) => {\n-                do s.emit_tup(3) {\n-                    s.emit_tup_elt(0, || t0.encode(s));\n-                    s.emit_tup_elt(1, || t1.encode(s));\n-                    s.emit_tup_elt(2, || t2.encode(s));\n+                do s.emit_seq(3) {\n+                    s.emit_seq_elt(0, || t0.encode(s));\n+                    s.emit_seq_elt(1, || t1.encode(s));\n+                    s.emit_seq_elt(2, || t2.encode(s));\n                 }\n             }\n         }\n@@ -441,11 +439,12 @@ impl<\n     T2: Decodable<D>\n > Decodable<D> for (T0, T1, T2) {\n     fn decode(d: &D) -> (T0, T1, T2) {\n-        do d.read_tup(3) {\n+        do d.read_seq |len| {\n+            fail_unless!(len == 3);\n             (\n-                d.read_tup_elt(0, || Decodable::decode(d)),\n-                d.read_tup_elt(1, || Decodable::decode(d)),\n-                d.read_tup_elt(2, || Decodable::decode(d))\n+                d.read_seq_elt(0, || Decodable::decode(d)),\n+                d.read_seq_elt(1, || Decodable::decode(d)),\n+                d.read_seq_elt(2, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -461,11 +460,11 @@ impl<\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2, ref t3) => {\n-                do s.emit_tup(4) {\n-                    s.emit_tup_elt(0, || t0.encode(s));\n-                    s.emit_tup_elt(1, || t1.encode(s));\n-                    s.emit_tup_elt(2, || t2.encode(s));\n-                    s.emit_tup_elt(3, || t3.encode(s));\n+                do s.emit_seq(4) {\n+                    s.emit_seq_elt(0, || t0.encode(s));\n+                    s.emit_seq_elt(1, || t1.encode(s));\n+                    s.emit_seq_elt(2, || t2.encode(s));\n+                    s.emit_seq_elt(3, || t3.encode(s));\n                 }\n             }\n         }\n@@ -480,12 +479,13 @@ impl<\n     T3: Decodable<D>\n > Decodable<D> for (T0, T1, T2, T3) {\n     fn decode(d: &D) -> (T0, T1, T2, T3) {\n-        do d.read_tup(4) {\n+        do d.read_seq |len| {\n+            fail_unless!(len == 4);\n             (\n-                d.read_tup_elt(0, || Decodable::decode(d)),\n-                d.read_tup_elt(1, || Decodable::decode(d)),\n-                d.read_tup_elt(2, || Decodable::decode(d)),\n-                d.read_tup_elt(3, || Decodable::decode(d))\n+                d.read_seq_elt(0, || Decodable::decode(d)),\n+                d.read_seq_elt(1, || Decodable::decode(d)),\n+                d.read_seq_elt(2, || Decodable::decode(d)),\n+                d.read_seq_elt(3, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -502,12 +502,12 @@ impl<\n     fn encode(&self, s: &S) {\n         match *self {\n             (ref t0, ref t1, ref t2, ref t3, ref t4) => {\n-                do s.emit_tup(5) {\n-                    s.emit_tup_elt(0, || t0.encode(s));\n-                    s.emit_tup_elt(1, || t1.encode(s));\n-                    s.emit_tup_elt(2, || t2.encode(s));\n-                    s.emit_tup_elt(3, || t3.encode(s));\n-                    s.emit_tup_elt(4, || t4.encode(s));\n+                do s.emit_seq(5) {\n+                    s.emit_seq_elt(0, || t0.encode(s));\n+                    s.emit_seq_elt(1, || t1.encode(s));\n+                    s.emit_seq_elt(2, || t2.encode(s));\n+                    s.emit_seq_elt(3, || t3.encode(s));\n+                    s.emit_seq_elt(4, || t4.encode(s));\n                 }\n             }\n         }\n@@ -524,13 +524,14 @@ impl<\n > Decodable<D> for (T0, T1, T2, T3, T4) {\n     fn decode(d: &D)\n       -> (T0, T1, T2, T3, T4) {\n-        do d.read_tup(5) {\n+        do d.read_seq |len| {\n+            fail_unless!(len == 5);\n             (\n-                d.read_tup_elt(0, || Decodable::decode(d)),\n-                d.read_tup_elt(1, || Decodable::decode(d)),\n-                d.read_tup_elt(2, || Decodable::decode(d)),\n-                d.read_tup_elt(3, || Decodable::decode(d)),\n-                d.read_tup_elt(4, || Decodable::decode(d))\n+                d.read_seq_elt(0, || Decodable::decode(d)),\n+                d.read_seq_elt(1, || Decodable::decode(d)),\n+                d.read_seq_elt(2, || Decodable::decode(d)),\n+                d.read_seq_elt(3, || Decodable::decode(d)),\n+                d.read_seq_elt(4, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -547,9 +548,9 @@ pub trait EncoderHelpers {\n \n impl<S:Encoder> EncoderHelpers for S {\n     fn emit_from_vec<T>(&self, v: &[T], f: &fn(v: &T)) {\n-        do self.emit_owned_vec(v.len()) {\n+        do self.emit_seq(v.len()) {\n             for v.eachi |i, e| {\n-                do self.emit_vec_elt(i) {\n+                do self.emit_seq_elt(i) {\n                     f(e)\n                 }\n             }\n@@ -563,9 +564,9 @@ pub trait DecoderHelpers {\n \n impl<D:Decoder> DecoderHelpers for D {\n     fn read_to_vec<T>(&self, f: &fn() -> T) -> ~[T] {\n-        do self.read_owned_vec |len| {\n+        do self.read_seq |len| {\n             do vec::from_fn(len) |i| {\n-                self.read_vec_elt(i, || f())\n+                self.read_seq_elt(i, || f())\n             }\n         }\n     }"}, {"sha": "4b262df36a620694592d7f2d874c7791ae8a8e0f", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590bbcebe9401293e642c89a6a623f5461b96dde/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=590bbcebe9401293e642c89a6a623f5461b96dde", "patch": "@@ -1255,17 +1255,10 @@ mod test {\n             self.add_to_log(CallToEmitEnumVariantArg (idx)); f();\n         }\n \n-        fn emit_borrowed_vec(&self, +_len: uint, f: &fn()) {\n+        fn emit_seq(&self, +_len: uint, f: &fn()) {\n             self.add_unknown_to_log(); f();\n         }\n-\n-        fn emit_owned_vec(&self, +_len: uint, f: &fn()) {\n-            self.add_unknown_to_log(); f();\n-        }\n-        fn emit_managed_vec(&self, +_len: uint, f: &fn()) {\n-            self.add_unknown_to_log(); f();\n-        }\n-        fn emit_vec_elt(&self, +_idx: uint, f: &fn()) {\n+        fn emit_seq_elt(&self, +_idx: uint, f: &fn()) {\n             self.add_unknown_to_log(); f();\n         }\n "}]}