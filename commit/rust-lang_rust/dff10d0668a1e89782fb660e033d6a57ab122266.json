{"sha": "dff10d0668a1e89782fb660e033d6a57ab122266", "node_id": "C_kwDOAAsO6NoAKGRmZjEwZDA2NjhhMWU4OTc4MmZiNjYwZTAzM2Q2YTU3YWIxMjIyNjY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-02T15:59:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-14T20:22:10Z"}, "message": "Re-add replacement logic and add comment explaining it", "tree": {"sha": "700a20ab9b1f43178c727a8c986eb46eae2db976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700a20ab9b1f43178c727a8c986eb46eae2db976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff10d0668a1e89782fb660e033d6a57ab122266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff10d0668a1e89782fb660e033d6a57ab122266", "html_url": "https://github.com/rust-lang/rust/commit/dff10d0668a1e89782fb660e033d6a57ab122266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff10d0668a1e89782fb660e033d6a57ab122266/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "755252bf51c121b17436f59b35cfdbc7f0058d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/755252bf51c121b17436f59b35cfdbc7f0058d96", "html_url": "https://github.com/rust-lang/rust/commit/755252bf51c121b17436f59b35cfdbc7f0058d96"}], "stats": {"total": 106, "additions": 71, "deletions": 35}, "files": [{"sha": "63b170a3c63b1d5abc12cafa12855a345d3d7e5f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -1135,20 +1135,44 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        // // Incorporate the argument changes in the removal suggestion.\n-        // let mut prev = -1;\n-        // for (expected_idx, provided_idx) in matched_inputs.iter_enumerated() {\n-        //     if let Some(provided_idx) = provided_idx {\n-        //         prev = provided_idx.index() as i64;\n-        //     }\n-        //     let idx = ProvidedIdx::from_usize((prev + 1) as usize);\n-        //     if let None = provided_idx\n-        //         && let Some((_, arg_span)) = provided_arg_tys.get(idx)\n-        //     {\n-        //         let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n-        //         suggestions.push((*arg_span, ty_to_snippet(expected_ty, expected_idx)));\n-        //     }\n-        // }\n+        // Incorporate the argument changes in the removal suggestion.\n+        // When a type is *missing*, and the rest are additional, we want to suggest these with a\n+        // multipart suggestion, but in order to do so we need to figure out *where* the arg that\n+        // was provided but had the wrong type should go, because when looking at `expected_idx`\n+        // that is the position in the argument list in the definition, while `provided_idx` will\n+        // not be present. So we have to look at what the *last* provided position was, and point\n+        // one after to suggest the replacement. FIXME(estebank): This is hacky, and there's\n+        // probably a better more involved change we can make to make this work.\n+        // For example, if we have\n+        // ```\n+        // fn foo(i32, &'static str) {}\n+        // foo((), (), ());\n+        // ```\n+        // what should be suggested is\n+        // ```\n+        // foo(/* i32 */, /* &str */);\n+        // ```\n+        // which includes the replacement of the first two `()` for the correct type, and the\n+        // removal of the last `()`.\n+        let mut prev = -1;\n+        for (expected_idx, provided_idx) in matched_inputs.iter_enumerated() {\n+            // We want to point not at the *current* argument expression index, but rather at the\n+            // index position where it *should have been*, which is *after* the previous one.\n+            if let Some(provided_idx) = provided_idx {\n+                prev = provided_idx.index() as i64;\n+            }\n+            let idx = ProvidedIdx::from_usize((prev + 1) as usize);\n+            if let None = provided_idx\n+                && let Some((_, arg_span)) = provided_arg_tys.get(idx)\n+            {\n+                // There is a type that was *not* found anywhere, so it isn't a move, but a\n+                // replacement and we look at what type it should have been. This will allow us\n+                // To suggest a multipart suggestion when encountering `foo(1, \"\")` where the def\n+                // was `fn foo(())`.\n+                let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n+                suggestions.push((*arg_span, ty_to_snippet(expected_ty, expected_idx)));\n+            }\n+        }\n \n         // If we have less than 5 things to say, it would be useful to call out exactly what's wrong\n         if labels.len() <= 5 {"}, {"sha": "a86cbbf1802e17d66cea042c9255441bb338962e", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -20,7 +20,7 @@ LL |     foo(&&A, B, C, D, &E, F, G);\n help: remove the extra arguments\n    |\n LL -     foo(&&A, B, C, D, E, F, G);\n-LL +     foo(&&A, D, E, G);\n+LL +     foo(&&A, D, /* &E */, G);\n    |\n \n error: aborting due to previous error"}, {"sha": "c645dd381792953442bc300a50b0bd440aa07780", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -2,17 +2,20 @@ error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/mixed_cases.rs:10:3\n    |\n LL |   two_args(1, \"\", X {});\n-   |   ^^^^^^^^    --------\n-   |               | | |\n-   |               | | unexpected argument of type `X`\n-   |               | help: remove the extra argument\n+   |   ^^^^^^^^    --  ---- unexpected argument of type `X`\n+   |               |\n    |               expected `f32`, found `&str`\n    |\n note: function defined here\n   --> $DIR/mixed_cases.rs:5:4\n    |\n LL | fn two_args(_a: i32, _b: f32) {}\n    |    ^^^^^^^^ -------  -------\n+help: remove the extra argument\n+   |\n+LL -   two_args(1, \"\", X {});\n+LL +   two_args(1, /* f32 */);\n+   |\n \n error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/mixed_cases.rs:11:3"}, {"sha": "cd483e7ad2c6470984b1df1c5600b004fb5e2256", "filename": "tests/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -32,17 +32,20 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:37:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^ ----------------\n-   |                 |      | |\n-   |                 |      | unexpected argument of type `&'static str`\n-   |                 |      help: remove the extra argument\n+   |               ^ -------  ------- unexpected argument of type `&'static str`\n+   |                 |\n    |                 expected `isize`, found `&str`\n    |\n note: implementation defined here\n   --> $DIR/overloaded-calls-bad.rs:10:1\n    |\n LL | impl FnMut<(isize,)> for S {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: remove the extra argument\n+   |\n+LL -     let ans = s(\"burma\", \"shave\");\n+LL +     let ans = s(/* isize */);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:40:7"}, {"sha": "510b99bb5af73f5d3295519fbaccfd431e36ebb7", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -2,10 +2,7 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^  ---\n-   |                                        | |\n-   |                                        | unexpected argument of type `{integer}`\n-   |                                        help: remove the extra argument\n+   |                                  ^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:6:39\n@@ -23,15 +20,17 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |                                       this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: remove the extra argument\n+   |\n+LL -     let _: Option<(i32, bool)> = Some(1, 2);\n+LL +     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^  ---\n-   |               | |\n-   |               | unexpected argument of type `{integer}`\n-   |               help: remove the extra argument\n+   |     ^^^^^^^^    - unexpected argument of type `{integer}`\n    |\n note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:8:14\n@@ -45,6 +44,11 @@ note: function defined here\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n+help: remove the extra argument\n+   |\n+LL -     int_bool(1, 2);\n+LL +     int_bool(/* (i32, bool) */);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:11:28"}, {"sha": "7143c959478b47d4df505125c071a3f797c7a00d", "filename": "tests/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dff10d0668a1e89782fb660e033d6a57ab122266/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=dff10d0668a1e89782fb660e033d6a57ab122266", "patch": "@@ -2,10 +2,7 @@ error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^          ---------------\n-   |                              | |\n-   |                              | unexpected argument of type `Vec<&Process>`\n-   |                              help: remove the extra argument\n+   |                ^^^^            ------------- unexpected argument of type `Vec<&Process>`\n    |\n note: expected `(Vec<String>, Vec<Process>)`, found `Vec<String>`\n   --> $DIR/wrong_argument_ice-3.rs:9:21\n@@ -16,6 +13,11 @@ LL |         groups.push(new_group, vec![process]);\n              found struct `Vec<String>`\n note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+help: remove the extra argument\n+   |\n+LL -         groups.push(new_group, vec![process]);\n+LL +         groups.push(/* (Vec<String>, Vec<Process>) */);\n+   |\n \n error: aborting due to previous error\n "}]}