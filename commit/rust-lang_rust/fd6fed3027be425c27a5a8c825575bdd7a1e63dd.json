{"sha": "fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "node_id": "C_kwDOAAsO6NoAKGZkNmZlZDMwMjdiZTQyNWMyN2E1YThjODI1NTc1YmRkN2ExZTYzZGQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-02T21:20:17Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-23T19:01:53Z"}, "message": "address review", "tree": {"sha": "1f94ec8c44a692f713c328e23c81f98ab52e3334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f94ec8c44a692f713c328e23c81f98ab52e3334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "html_url": "https://github.com/rust-lang/rust/commit/fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fed3027be425c27a5a8c825575bdd7a1e63dd/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef8308687f57335e117fdfa7d92002cf6f53eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef8308687f57335e117fdfa7d92002cf6f53eda", "html_url": "https://github.com/rust-lang/rust/commit/2ef8308687f57335e117fdfa7d92002cf6f53eda"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "36f08a7a48fd24d799adc92e5fc0d5e75cc6808c", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fed3027be425c27a5a8c825575bdd7a1e63dd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fed3027be425c27a5a8c825575bdd7a1e63dd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "patch": "@@ -325,6 +325,13 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         }\n     }\n \n+    /// Similar to `Place::ty` but needed during mir building.\n+    ///\n+    /// Applies the projections in the `PlaceBuilder` to the base\n+    /// type.\n+    ///\n+    /// Fallible as the root of this place may be an upvar for\n+    /// which no base type can be determined.\n     pub fn try_compute_ty<D>(\n         &self,\n         local_decls: &D,"}, {"sha": "fb2a5be28a2eb6ba50ce91b6e3c5abce57b4fce6", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fed3027be425c27a5a8c825575bdd7a1e63dd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fed3027be425c27a5a8c825575bdd7a1e63dd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=fd6fed3027be425c27a5a8c825575bdd7a1e63dd", "patch": "@@ -54,10 +54,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             let variant_idx = opt_variant_idx.unwrap();\n                             adt_def.variant(variant_idx).fields[field_idx].ty(self.tcx, substs)\n                         }\n-                        ty::Adt(adt_def, substs) => {\n-                            adt_def.all_fields().collect::<Vec<_>>()[field_idx].ty(self.tcx, substs)\n-                        }\n-                        ty::Tuple(elems) => elems.to_vec()[field_idx],\n+                        ty::Adt(adt_def, substs) => adt_def\n+                            .all_fields()\n+                            .nth(field_idx)\n+                            .unwrap_or_else(|| {\n+                                bug!(\n+                                    \"expected to take field idx {:?} of fields of {:?}\",\n+                                    field_idx,\n+                                    adt_def\n+                                )\n+                            })\n+                            .ty(self.tcx, substs),\n+                        ty::Tuple(elems) => elems.iter().nth(field_idx).unwrap_or_else(|| {\n+                            bug!(\"expected to take field idx {:?} of {:?}\", field_idx, elems)\n+                        }),\n                         _ => bug!(\n                             \"no field available, place_ty: {:#?}, kind: {:?}\",\n                             place_ty,"}]}