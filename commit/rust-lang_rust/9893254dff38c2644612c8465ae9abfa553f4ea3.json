{"sha": "9893254dff38c2644612c8465ae9abfa553f4ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTMyNTRkZmYzOGMyNjQ0NjEyYzg0NjVhZTlhYmZhNTUzZjRlYTM=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-31T10:08:41Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-06-01T08:39:52Z"}, "message": "Add more corrected code for doc", "tree": {"sha": "acea7d637c55fc4b79f2f34c42901bb5041b71ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acea7d637c55fc4b79f2f34c42901bb5041b71ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9893254dff38c2644612c8465ae9abfa553f4ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9893254dff38c2644612c8465ae9abfa553f4ea3", "html_url": "https://github.com/rust-lang/rust/commit/9893254dff38c2644612c8465ae9abfa553f4ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9893254dff38c2644612c8465ae9abfa553f4ea3/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19339334cb4e9c6db5a1f7dced38edcb16707bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/19339334cb4e9c6db5a1f7dced38edcb16707bc7", "html_url": "https://github.com/rust-lang/rust/commit/19339334cb4e9c6db5a1f7dced38edcb16707bc7"}], "stats": {"total": 120, "additions": 95, "deletions": 25}, "files": [{"sha": "fbc29efdeb26bc2ba48f7a188a824ad84aa69974", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -218,7 +218,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// # let x = Ok::<_, ()>(());\n-    /// x.ok().expect(\"why did I do this again?\")\n+    ///\n+    /// // Bad\n+    /// x.ok().expect(\"why did I do this again?\");\n+    ///\n+    /// // Good\n+    /// x.expect(\"why did I do this again?\");\n     /// ```\n     pub OK_EXPECT,\n     style,\n@@ -273,8 +278,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// # let opt = Some(1);\n-    /// opt.map_or(None, |a| Some(a + 1))\n-    /// # ;\n+    ///\n+    /// // Bad\n+    /// opt.map_or(None, |a| Some(a + 1));\n+    ///\n+    /// // Good\n+    /// opt.and_then(|a| Some(a + 1));\n     /// ```\n     pub OPTION_MAP_OR_NONE,\n     style,\n@@ -390,14 +399,19 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.map(_).flatten(_)`,\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as a\n-    /// single method call.\n+    /// single method call using `_.flat_map(_)`\n     ///\n     /// **Known problems:**\n     ///\n     /// **Example:**\n     /// ```rust\n     /// let vec = vec![vec![1]];\n+    ///\n+    /// // Bad\n     /// vec.iter().map(|x| x.iter()).flatten();\n+    ///\n+    /// // Good\n+    /// vec.iter().flat_map(|x| x.iter());\n     /// ```\n     pub MAP_FLATTEN,\n     pedantic,\n@@ -417,7 +431,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let vec = vec![1];\n+    ///\n+    /// // Bad\n     /// vec.iter().filter(|x| **x == 0).map(|x| *x * 2);\n+    ///\n+    /// // Good\n+    /// vec.iter().filter_map(|x| Some(*x * 2));\n     /// ```\n     pub FILTER_MAP,\n     pedantic,\n@@ -634,7 +653,12 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::rc::Rc;\n     /// let x = Rc::new(1);\n+    ///\n+    /// // Bad\n     /// x.clone();\n+    ///\n+    /// // Good\n+    /// Rc::clone(&x);\n     /// ```\n     pub CLONE_ON_REF_PTR,\n     restriction,\n@@ -741,7 +765,12 @@ declare_clippy_lint! {\n     /// **Known problems:** Does not catch multi-byte unicode characters.\n     ///\n     /// **Example:**\n-    /// `_.split(\"x\")` could be `_.split('x')`\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// _.split(\"x\");\n+    ///\n+    /// // Good\n+    /// _.split('x');\n     pub SINGLE_CHAR_PATTERN,\n     perf,\n     \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\"\n@@ -964,8 +993,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `.chars().last()` or\n-    /// `.chars().next_back()` on a `str` to check if it ends with a given char.\n+    /// **What it does:** Checks for usage of `_.chars().last()` or\n+    /// `_.chars().next_back()` on a `str` to check if it ends with a given char.\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as\n     /// `_.ends_with(_)`.\n@@ -975,8 +1004,12 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// # let name = \"_\";\n-    /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-')\n-    /// # ;\n+    ///\n+    /// // Bad\n+    /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-');\n+    ///\n+    /// // Good\n+    /// name.ends_with('_') || name.ends_with('-');\n     /// ```\n     pub CHARS_LAST_CMP,\n     style,\n@@ -1044,17 +1077,15 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let _ = (0..3).filter_map(|x| if x > 2 { Some(x) } else { None });\n-    /// ```\n-    /// As there is no transformation of the argument this could be written as:\n-    /// ```rust\n+    ///\n+    /// // As there is no transformation of the argument this could be written as:\n     /// let _ = (0..3).filter(|&x| x > 2);\n     /// ```\n     ///\n     /// ```rust\n     /// let _ = (0..4).filter_map(|x| Some(x + 1));\n-    /// ```\n-    /// As there is no conditional check on the argument this could be written as:\n-    /// ```rust\n+    ///\n+    /// // As there is no conditional check on the argument this could be written as:\n     /// let _ = (0..4).map(|x| x + 1);\n     /// ```\n     pub UNNECESSARY_FILTER_MAP,\n@@ -1075,7 +1106,11 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n+    /// // Bad\n     /// let _ = (&vec![3, 4, 5]).into_iter();\n+    ///\n+    /// // Good\n+    /// let _ = (&vec![3, 4, 5]).iter();\n     /// ```\n     pub INTO_ITER_ON_REF,\n     style,"}, {"sha": "51282ab93ef6ec5bd9f856487e97f0db48b9e7ba", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -93,7 +93,7 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = 1.2331f64;\n     /// let y = 1.2332f64;\n-    /// \n+    ///\n     /// // Bad\n     /// if y == 1.23f64 { }\n     /// if y != x {} // where both are floats"}, {"sha": "a8d4c7620b1ef11e92ed9ac0368a145b39bec76d", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -17,8 +17,14 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust,ignore\n-    /// foo(&vec![1, 2])\n+    /// ```rust\n+    /// # fn foo(my_vec: &[u8]) {}\n+    ///\n+    /// // Bad\n+    /// foo(&vec![1, 2]);\n+    ///\n+    /// // Good\n+    /// foo(&[1, 2]);\n     /// ```\n     pub USELESS_VEC,\n     perf,"}, {"sha": "7247518e19b9dd8aa69f87951b8f1b004f65fad2", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -9,6 +9,7 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\n     /// See also: [fs::read docs](https://doc.rust-lang.org/std/fs/fn.read.html), [fs::read_to_string docs](https://doc.rust-lang.org/std/fs/fn.read_to_string.html)\n+    ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**"}, {"sha": "b637253bd0264666418adde8d5c4c86f6f55beee", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -19,8 +19,14 @@ declare_clippy_lint! {\n     /// still around.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n+    /// // Bad\n     /// use std::cmp::Ordering::*;\n+    /// foo(Less);\n+    ///\n+    /// // Good\n+    /// use std::cmp::Ordering;\n+    /// foo(Ordering::Less)\n     /// ```\n     pub ENUM_GLOB_USE,\n     pedantic,\n@@ -60,15 +66,15 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     ///\n-    /// Bad:\n     /// ```rust,ignore\n+    /// // Bad\n     /// use crate1::*;\n     ///\n     /// foo();\n     /// ```\n     ///\n-    /// Good:\n     /// ```rust,ignore\n+    /// // Good\n     /// use crate1::foo;\n     ///\n     /// foo();"}, {"sha": "22ce484b24e40050f72fce96a65293bad0c513f2", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -23,7 +23,11 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// // Bad\n     /// println!(\"\");\n+    ///\n+    /// // Good\n+    /// println!();\n     /// ```\n     pub PRINTLN_EMPTY_STRING,\n     style,\n@@ -32,8 +36,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** This lint warns when you use `print!()` with a format\n-    /// string that\n-    /// ends in a newline.\n+    /// string that ends in a newline.\n     ///\n     /// **Why is this bad?** You should use `println!()` instead, which appends the\n     /// newline.\n@@ -125,7 +128,12 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n+    ///\n+    /// // Bad\n     /// writeln!(buf, \"\");\n+    ///\n+    /// // Good\n+    /// writeln!(buf);\n     /// ```\n     pub WRITELN_EMPTY_STRING,\n     style,\n@@ -147,7 +155,12 @@ declare_clippy_lint! {\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n     /// # let name = \"World\";\n+    ///\n+    /// // Bad\n     /// write!(buf, \"Hello {}!\\n\", name);\n+    ///\n+    /// // Good\n+    /// writeln!(buf, \"Hello {}!\", name);\n     /// ```\n     pub WRITE_WITH_NEWLINE,\n     style,\n@@ -168,7 +181,12 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n+    ///\n+    /// // Bad\n     /// writeln!(buf, \"{}\", \"foo\");\n+    ///\n+    /// // Good\n+    /// writeln!(buf, \"foo\");\n     /// ```\n     pub WRITE_LITERAL,\n     style,"}, {"sha": "0820385e01bb5f68d940a2da8e7f433a137dd55a", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -14,7 +14,11 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// 0.0f32 / 0.0;\n+    /// // Bad\n+    /// let nan = 0.0f32 / 0.0;\n+    ///\n+    /// // Good\n+    /// let nan = f32::NAN;\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,"}, {"sha": "6b6e2c7324c2661baffb450f41865432e8b49d2d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9893254dff38c2644612c8465ae9abfa553f4ea3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9893254dff38c2644612c8465ae9abfa553f4ea3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9893254dff38c2644612c8465ae9abfa553f4ea3", "patch": "@@ -1735,7 +1735,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"pub_enum_variant_names\",\n         group: \"pedantic\",\n-        desc: \"enums where all variants share a prefix/postfix\",\n+        desc: \"public enums where all variants share a prefix/postfix\",\n         deprecation: None,\n         module: \"enum_variants\",\n     },"}]}