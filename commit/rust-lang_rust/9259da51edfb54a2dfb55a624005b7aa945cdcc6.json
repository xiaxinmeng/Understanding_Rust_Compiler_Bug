{"sha": "9259da51edfb54a2dfb55a624005b7aa945cdcc6", "node_id": "C_kwDOAAsO6NoAKDkyNTlkYTUxZWRmYjU0YTJkZmI1NWE2MjQwMDViN2FhOTQ1Y2RjYzY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T10:19:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:58:13Z"}, "message": "Test the 3 generator handling versions for generator/async tests.", "tree": {"sha": "b8f92cdb007d194fa680e5af392b2d8bfa786e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f92cdb007d194fa680e5af392b2d8bfa786e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9259da51edfb54a2dfb55a624005b7aa945cdcc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9259da51edfb54a2dfb55a624005b7aa945cdcc6", "html_url": "https://github.com/rust-lang/rust/commit/9259da51edfb54a2dfb55a624005b7aa945cdcc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9259da51edfb54a2dfb55a624005b7aa945cdcc6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a20078f044d42241e14437368e8e1d0f288aa7c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20078f044d42241e14437368e8e1d0f288aa7c0", "html_url": "https://github.com/rust-lang/rust/commit/a20078f044d42241e14437368e8e1d0f288aa7c0"}], "stats": {"total": 6012, "additions": 5816, "deletions": 196}, "files": [{"sha": "fb83ca90a37873dcbcb572a25e6ff5c676dc5f55", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,106 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_send(foo2(Some(true)));\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d3c5e80a30df443ee5cf66c942c445ba95cec701", "filename": "tests/ui/async-await/async-await-let-else.drop_tracking_mir.stderr", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,90 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL |     is_send(foo2(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:23:26\n+   |\n+LL |         bar2(Rc::new(())).await\n+   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |              |\n+   |              has type `Rc<()>` which is not `Send`\n+LL |     };\n+   |     - `Rc::new(())` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "d3c5e80a30df443ee5cf66c942c445ba95cec701", "filename": "tests/ui/async-await/async-await-let-else.no_drop_tracking.stderr", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,90 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL |     is_send(foo2(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:23:26\n+   |\n+LL |         bar2(Rc::new(())).await\n+   |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |              |\n+   |              has type `Rc<()>` which is not `Send`\n+LL |     };\n+   |     - `Rc::new(())` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ - `Rc::new(())` is later dropped here\n+   |          |                 |\n+   |          |                 await occurs here, with `Rc::new(())` maybe used later\n+   |          has type `Rc<()>` which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "113d576b5e762cfba33f6ee12d0631636cc88a34", "filename": "tests/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,7 +1,7 @@\n // edition:2021\n-// revisions: drop-tracking no-drop-tracking\n-// [drop-tracking] compile-flags: -Zdrop-tracking=yes\n-// [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n use std::rc::Rc;\n "}, {"sha": "083da1cec7313c58f96127a14cceb4cb23e4c6b0", "filename": "tests/ui/async-await/async-error-span.drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/async-error-span.rs:10:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/async-error-span.rs:16:9\n+   |\n+LL |     let a;\n+   |         ^ cannot infer type\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/async-error-span.rs:17:17\n+   |\n+LL |     get_future().await;\n+   |                 ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "083da1cec7313c58f96127a14cceb4cb23e4c6b0", "filename": "tests/ui/async-await/async-error-span.drop_tracking_mir.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/async-error-span.rs:10:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/async-error-span.rs:16:9\n+   |\n+LL |     let a;\n+   |         ^ cannot infer type\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/async-error-span.rs:17:17\n+   |\n+LL |     get_future().await;\n+   |                 ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "083da1cec7313c58f96127a14cceb4cb23e4c6b0", "filename": "tests/ui/async-await/async-error-span.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/async-error-span.rs:10:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/async-error-span.rs:16:9\n+   |\n+LL |     let a;\n+   |         ^ cannot infer type\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/async-error-span.rs:17:17\n+   |\n+LL |     get_future().await;\n+   |                 ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "29b58ebc3a420d31124baf731b8f2a97133eec77", "filename": "tests/ui/async-await/async-error-span.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n // Regression test for issue #62382."}, {"sha": "083da1cec7313c58f96127a14cceb4cb23e4c6b0", "filename": "tests/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `()` is not a future\n-  --> $DIR/async-error-span.rs:7:20\n+  --> $DIR/async-error-span.rs:10:20\n    |\n LL | fn get_future() -> impl Future<Output = ()> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n@@ -8,13 +8,13 @@ LL | fn get_future() -> impl Future<Output = ()> {\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/async-error-span.rs:13:9\n+  --> $DIR/async-error-span.rs:16:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:14:17\n+  --> $DIR/async-error-span.rs:17:17\n    |\n LL |     get_future().await;\n    |                 ^^^^^^"}, {"sha": "0f0dc335e7f27cad0cfec72ccc3cc110f38ede13", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,49 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |           ---------------- has type `Option<impl Debug>` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n+...\n+LL | }\n+   | - `Some(non_send())` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+LL |     }\n+LL | }\n+   | - `get_formatter()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5cec21d890ef16e8af1aa17c4861f007f4f6fc4a", "filename": "tests/ui/async-await/async-fn-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,120 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:70:17\n+   |\n+LL |     assert_send(local_dropped_before_await());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:27:10\n+   |\n+LL |     let x = non_send();\n+   |         - has type `impl Debug` which is not `Send`\n+LL |     drop(x);\n+LL |     fut().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |                ---------- has type `impl Debug` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n+...\n+LL | }\n+   | - `non_send()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+LL |     }\n+LL | }\n+   | - `get_formatter()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:76:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_panic());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_panic` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:56:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = panic!();\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:78:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_infinite_loop());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_infinite_loop` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:63:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = loop {};\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "5cec21d890ef16e8af1aa17c4861f007f4f6fc4a", "filename": "tests/ui/async-await/async-fn-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,120 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:70:17\n+   |\n+LL |     assert_send(local_dropped_before_await());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:27:10\n+   |\n+LL |     let x = non_send();\n+   |         - has type `impl Debug` which is not `Send`\n+LL |     drop(x);\n+LL |     fut().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:72:17\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:36:25\n+   |\n+LL |     match Some(non_send()) {\n+   |                ---------- has type `impl Debug` which is not `Send`\n+LL |         Some(_) => fut().await,\n+   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n+...\n+LL | }\n+   | - `non_send()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:74:17\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:49:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n+   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n+...\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n+LL |     }\n+LL | }\n+   | - `get_formatter()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:76:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_panic());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_panic` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:56:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = panic!();\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:78:17\n+   |\n+LL |     assert_send(non_sync_with_method_call_infinite_loop());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call_infinite_loop` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-fn-nonsend.rs:63:14\n+   |\n+LL |     let f: &mut std::fmt::Formatter = loop {};\n+   |         - has type `&mut Formatter<'_>` which is not `Send`\n+LL |     if non_sync().fmt(f).unwrap() == () {\n+LL |         fut().await;\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n+LL |     }\n+LL | }\n+   | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:67:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "77c957d0592b7e61c6376c2ad716ab7c21a9d7b5", "filename": "tests/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n-// compile-flags: --crate-type lib -Zdrop-tracking\n+// compile-flags: --crate-type lib\n \n use std::{cell::RefCell, fmt::Debug, rc::Rc};\n \n@@ -65,10 +68,13 @@ fn assert_send(_: impl Send) {}\n \n pub fn pass_assert() {\n     assert_send(local_dropped_before_await());\n+    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_send_temporary_in_match());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_panic());\n+    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call_infinite_loop());\n+    //[no_drop_tracking,drop_tracking_mir]~^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "0f0dc335e7f27cad0cfec72ccc3cc110f38ede13", "filename": "tests/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:68:17\n+  --> $DIR/async-fn-nonsend.rs:72:17\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:33:25\n+  --> $DIR/async-fn-nonsend.rs:36:25\n    |\n LL |     match Some(non_send()) {\n    |           ---------------- has type `Option<impl Debug>` which is not `Send`\n@@ -16,20 +16,20 @@ LL |         Some(_) => fut().await,\n LL | }\n    | - `Some(non_send())` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:64:24\n+  --> $DIR/async-fn-nonsend.rs:67:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:70:17\n+  --> $DIR/async-fn-nonsend.rs:74:17\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:46:14\n+  --> $DIR/async-fn-nonsend.rs:49:14\n    |\n LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n    |                                            --------------- has type `Formatter<'_>` which is not `Send`\n@@ -40,7 +40,7 @@ LL |     }\n LL | }\n    | - `get_formatter()` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:64:24\n+  --> $DIR/async-fn-nonsend.rs:67:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`"}, {"sha": "daee8469a1406fce5850d94f9e645d1a28faf0f4", "filename": "tests/ui/async-await/default-struct-update.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdefault-struct-update.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking=y\n \n fn main() {\n     let _ = foo();"}, {"sha": "e520dfbdccebba4c062457d42fb90c4289eee686", "filename": "tests/ui/async-await/drop-and-assign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-and-assign.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n // build-pass\n \n struct A;"}, {"sha": "e2bba812d05b1677d01381178dc0a70bf0904f29", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/drop-track-field-assign-nonsend.rs:43:17\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n    |\n LL |     assert_send(agent.handle());\n    |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/drop-track-field-assign-nonsend.rs:21:38\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n    |\n LL |         let mut info = self.info_result.clone();\n    |             -------- has type `InfoResult` which is not `Send`\n@@ -16,7 +16,7 @@ LL |         let _ = send_element(element).await;\n LL |     }\n    |     - `mut info` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-track-field-assign-nonsend.rs:38:19\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`", "previous_filename": "tests/ui/async-await/drop-track-field-assign-nonsend.stderr"}, {"sha": "e2bba812d05b1677d01381178dc0a70bf0904f29", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e2bba812d05b1677d01381178dc0a70bf0904f29", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e22280008fcf251f7c6247dbccc1b8f67b00220", "filename": "tests/ui/async-await/drop-track-field-assign-nonsend.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Derived from an ICE found in tokio-xmpp during a crater run.\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n \n #![allow(dead_code)]\n "}, {"sha": "dd0e3f11ccc013c5fc8a5c94b9e518d08d80e09f", "filename": "tests/ui/async-await/drop-track-field-assign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Derived from an ICE found in tokio-xmpp during a crater run.\n // edition:2021\n-// compile-flags: -Zdrop-tracking\n // build-pass\n \n #![allow(dead_code)]"}, {"sha": "ac461a671a82afd9d51a11c8c8e0ab5fb12ee6fd", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac461a671a82afd9d51a11c8c8e0ab5fb12ee6fd", "filename": "tests/ui/async-await/field-assign-nonsend.drop_tracking_mir.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac461a671a82afd9d51a11c8c8e0ab5fb12ee6fd", "filename": "tests/ui/async-await/field-assign-nonsend.no_drop_tracking.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/field-assign-nonsend.rs:45:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/field-assign-nonsend.rs:23:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/field-assign-nonsend.rs:40:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e22280008fcf251f7c6247dbccc1b8f67b00220", "filename": "tests/ui/async-await/field-assign-nonsend.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign-nonsend.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,47 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<std::rc::Rc<String>>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = None;\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let agent = Agent { info_result: InfoResult { node: None } };\n+    // FIXME: It would be nice for this to work. See #94067.\n+    assert_send(agent.handle());\n+    //~^ cannot be sent between threads safely\n+}"}, {"sha": "dd0e3f11ccc013c5fc8a5c94b9e518d08d80e09f", "filename": "tests/ui/async-await/field-assign.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Ffield-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffield-assign.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,46 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// build-pass\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<String>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = Some(\"bar\".into());\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn main() {\n+    let mut agent = Agent {\n+        info_result: InfoResult { node: None }\n+    };\n+    let _ = agent.handle();\n+}"}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:24:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.drop_tracking_mir.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:24:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.no_drop_tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be shared between threads safely\n+  --> $DIR/issue-64130-1-sync.rs:24:13\n+   |\n+LL |     is_sync(bar());\n+   |             ^^^^^ future returned by `bar` is not `Sync`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n+note: future is not `Sync` as this value is used across an await\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Sync`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n+\n+error: aborting due to previous error\n+"}, {"sha": "67c99c48172544118db7ca19d1b1e905a30e0dac", "filename": "tests/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(negative_impls)]\n // edition:2018\n "}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:21:13\n+  --> $DIR/issue-64130-1-sync.rs:24:13\n    |\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:15:10\n+  --> $DIR/issue-64130-1-sync.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`\n-  --> $DIR/issue-64130-1-sync.rs:11:15\n+  --> $DIR/issue-64130-1-sync.rs:14:15\n    |\n LL | fn is_sync<T: Sync>(t: T) { }\n    |               ^^^^ required by this bound in `is_sync`"}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.drop_tracking_mir.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.no_drop_tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-2-send.rs:24:13\n+   |\n+LL |     is_send(bar());\n+   |             ^^^^^ future returned by `bar` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-2-send.rs:18:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which is not `Send`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2cb379fe88150408e3c056d7594aa05a5cf44cf8", "filename": "tests/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(negative_impls)]\n // edition:2018\n "}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-2-send.rs:21:13\n+  --> $DIR/issue-64130-2-send.rs:24:13\n    |\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:15:10\n+  --> $DIR/issue-64130-2-send.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Send`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/issue-64130-2-send.rs:11:15\n+  --> $DIR/issue-64130-2-send.rs:14:15\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`"}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.drop_tracking_mir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.no_drop_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n+  --> $DIR/issue-64130-3-other.rs:27:12\n+   |\n+LL | async fn bar() {\n+   |                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_qux(bar());\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n+   |\n+note: future does not implement `Qux` as this value is used across an await\n+  --> $DIR/issue-64130-3-other.rs:21:10\n+   |\n+LL |     let x = Foo;\n+   |         - has type `Foo` which does not implement `Qux`\n+LL |     baz().await;\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n+LL | }\n+   | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:17:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) {}\n+   |              ^^^ required by this bound in `is_qux`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6c242a60e1c6e7eb3c82d1e346175271ce71096b", "filename": "tests/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n // edition:2018"}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n-  --> $DIR/issue-64130-3-other.rs:24:12\n+  --> $DIR/issue-64130-3-other.rs:27:12\n    |\n LL | async fn bar() {\n    |                - within this `impl Future<Output = ()>`\n@@ -8,7 +8,7 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:18:10\n+  --> $DIR/issue-64130-3-other.rs:21:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which does not implement `Qux`\n@@ -17,7 +17,7 @@ LL |     baz().await;\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`\n-  --> $DIR/issue-64130-3-other.rs:14:14\n+  --> $DIR/issue-64130-3-other.rs:17:14\n    |\n LL | fn is_qux<T: Qux>(t: T) {}\n    |              ^^^ required by this bound in `is_qux`"}, {"sha": "884619f4dd69d4151a9c79a1bc401789173e29a9", "filename": "tests/ui/async-await/issue-64130-4-async-move.drop-tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:19:17\n+  --> $DIR/issue-64130-4-async-move.rs:20:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:25:31\n+  --> $DIR/issue-64130-4-async-move.rs:27:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:23:15\n+  --> $DIR/issue-64130-4-async-move.rs:25:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^"}, {"sha": "884619f4dd69d4151a9c79a1bc401789173e29a9", "filename": "tests/ui/async-await/issue-64130-4-async-move.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-4-async-move.rs:20:17\n+   |\n+LL | pub fn foo() -> impl Future + Send {\n+   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-4-async-move.rs:27:31\n+   |\n+LL |         match client.status() {\n+   |               ------ has type `&Client` which is not `Send`\n+LL |             200 => {\n+LL |                 let _x = get().await;\n+   |                               ^^^^^^ await occurs here, with `client` maybe used later\n+...\n+LL |     }\n+   |     - `client` is later dropped here\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-64130-4-async-move.rs:25:15\n+   |\n+LL |         match client.status() {\n+   |               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "884619f4dd69d4151a9c79a1bc401789173e29a9", "filename": "tests/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:19:17\n+  --> $DIR/issue-64130-4-async-move.rs:20:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:25:31\n+  --> $DIR/issue-64130-4-async-move.rs:27:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:23:15\n+  --> $DIR/issue-64130-4-async-move.rs:25:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^"}, {"sha": "13dceabb62f3bf56af6a53e575eed8df73256f8e", "filename": "tests/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,8 +1,9 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] check-pass\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+\n use std::any::Any;\n use std::future::Future;\n \n@@ -18,6 +19,7 @@ async fn get() {}\n \n pub fn foo() -> impl Future + Send {\n     //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n+    //[drop_tracking_mir]~^^ ERROR future cannot be sent between threads safely\n     let client = Client(Box::new(true));\n     async move {\n         match client.status() {"}, {"sha": "e7a302fb3efcd5930caef3dcd01f2da7d5ce1d0d", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-67252-unnamed-future.rs:18:11\n+  --> $DIR/issue-67252-unnamed-future.rs:21:11\n    |\n LL |       spawn(async {\n    |  ___________^\n@@ -8,9 +8,9 @@ LL | |         AFuture.await;\n LL | |     });\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:18:11: 21:6]`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:20:16\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n    |\n LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             -- has type `*mut ()` which is not `Send`\n@@ -19,7 +19,7 @@ LL |         AFuture.await;\n LL |     });\n    |     - `_a` is later dropped here\n note: required by a bound in `spawn`\n-  --> $DIR/issue-67252-unnamed-future.rs:6:13\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n    |\n LL | fn spawn<T: Send>(_: T) {}\n    |             ^^^^ required by this bound in `spawn`", "previous_filename": "tests/ui/async-await/issue-67252-unnamed-future.stderr"}, {"sha": "e7a302fb3efcd5930caef3dcd01f2da7d5ce1d0d", "filename": "tests/ui/async-await/issue-67252-unnamed-future.drop_tracking_mir.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,28 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:21:11\n+   |\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+   |\n+LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             -- has type `*mut ()` which is not `Send`\n+LL |         AFuture.await;\n+   |                ^^^^^^ await occurs here, with `_a` maybe used later\n+LL |     });\n+   |     - `_a` is later dropped here\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7a302fb3efcd5930caef3dcd01f2da7d5ce1d0d", "filename": "tests/ui/async-await/issue-67252-unnamed-future.no_drop_tracking.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,28 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:21:11\n+   |\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-67252-unnamed-future.rs:21:11: 24:6]`, the trait `Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:23:16\n+   |\n+LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             -- has type `*mut ()` which is not `Send`\n+LL |         AFuture.await;\n+   |                ^^^^^^ await occurs here, with `_a` maybe used later\n+LL |     });\n+   |     - `_a` is later dropped here\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:9:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n+\n+error: aborting due to previous error\n+"}, {"sha": "658f059cf81cbe32b74739b647256f27af1d9fc0", "filename": "tests/ui/async-await/issue-67252-unnamed-future.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n use std::future::Future;\n use std::pin::Pin;"}, {"sha": "35b7341f63a4ddfc5040d3785abfb226773827ca", "filename": "tests/ui/async-await/issue-68112.drop_tracking_mir.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,82 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:37:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:34:17\n+   |\n+LL |         let _ = non_send_fut.await;\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:46:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:43:17\n+   |\n+LL |         let _ = make_non_send_future1().await;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:65:18\n+   |\n+LL |     require_send(send_fut);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-68112.rs:50:31\n+   |\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-68112.rs:60:20\n+   |\n+LL |       let send_fut = async {\n+   |  ____________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7f0a135a1596159c381178034d58695b0d849c92", "filename": "tests/ui/async-await/issue-68112.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-68112.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n use std::{\n     cell::RefCell,"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.drop_tracking.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.drop_tracking_mir.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.no_drop_tracking.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,18 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:7:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/issue-70818.rs:9:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "2941de0f57714cb36ff363c2033057617b8af6d2", "filename": "tests/ui/async-await/issue-70818.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use std::future::Future;"}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,11 +1,11 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70818.rs:4:38\n+  --> $DIR/issue-70818.rs:7:38\n    |\n LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/issue-70818.rs:6:18\n+  --> $DIR/issue-70818.rs:9:18\n    |\n LL |     async { (ty, ty1) }\n    |                  ^^^ has type `U` which is not `Send`"}, {"sha": "ea61daa5a16832a8ac3502cb6238994dea34e520", "filename": "tests/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -7,7 +7,7 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n    = note: required for `&Sender<i32>` to implement `Send`\n note: required because it's used within this closure\n-  --> $DIR/issue-70935-complex-spans.rs:17:13\n+  --> $DIR/issue-70935-complex-spans.rs:18:13\n    |\n LL |         baz(|| async{\n    |             ^^\n@@ -20,7 +20,7 @@ LL | | }\n    | |_^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-70935-complex-spans.rs:16:5\n+  --> $DIR/issue-70935-complex-spans.rs:17:5\n    |\n LL | /     async move {\n LL | |         baz(|| async{"}, {"sha": "6c48e6db45777d708d98c4efa93edec0a8a79d3e", "filename": "tests/ui/async-await/issue-70935-complex-spans.drop_tracking_mir.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,21 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n+   |\n+LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+   |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `Sender<i32>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-70935-complex-spans.rs:20:11\n+   |\n+LL |           baz(|| async{\n+   |  _____________-\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+   | |         - ^^^^^^- the value is later dropped here\n+   | |         | |\n+   | |_________| await occurs here, with the value maybe used later\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:18:13: 18:15]` which is not `Send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c48e6db45777d708d98c4efa93edec0a8a79d3e", "filename": "tests/ui/async-await/issue-70935-complex-spans.no_drop_tracking.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:19:11\n+  --> $DIR/issue-70935-complex-spans.rs:20:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n@@ -15,7 +15,7 @@ LL | |         }).await;\n    | |         - ^^^^^^- the value is later dropped here\n    | |         | |\n    | |_________| await occurs here, with the value maybe used later\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:17:13: 17:15]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:18:13: 18:15]` which is not `Send`\n \n error: aborting due to previous error\n "}, {"sha": "76cd293b05b67a13fab4f331bc95ddcfdcb34e06", "filename": "tests/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [no_drop_tracking]compile-flags:-Zdrop-tracking=no\n-// [drop_tracking]compile-flags:-Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // #70935: Check if we do not emit snippet\n // with newlines which lead complex diagnostics.\n \n@@ -13,6 +13,7 @@ async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n     //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     //[drop_tracking]~^^ ERROR `Sender<i32>` cannot be shared between threads\n+    //[drop_tracking_mir]~^^^ ERROR future cannot be sent between threads safely\n     async move {\n         baz(|| async{\n             foo(tx.clone());"}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.drop_tracking.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "1fa8d69143a22ce9ac462e5d27f54fcb9cc47475", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,8 @@\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+//\n // Regression test for issue #73741\n // Ensures that we don't emit spurious errors when\n // a type error ocurrs in an `async fn`"}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-73741-type-err-drop-tracking.rs:8:7\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n    |\n LL |     1 = 2;\n    |     - ^"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-86507.rs:17:13\n+  --> $DIR/issue-86507.rs:20:13\n    |\n LL | /             Box::pin(\n LL | |                 async move {\n@@ -9,11 +9,11 @@ LL | |             )\n    | |_____________^ future created by async block is not `Send`\n    |\n note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n-  --> $DIR/issue-86507.rs:19:29\n+  --> $DIR/issue-86507.rs:22:29\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:18:17: 20:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)", "previous_filename": "tests/ui/async-await/issue-86507.stderr"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.drop_tracking_mir.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:20:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:22:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting this bound\n+   |\n+LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)\n+   |                                       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c8b7ef1b7135a10f55243d13ad3101f3224fd3a", "filename": "tests/ui/async-await/issue-86507.no_drop_tracking.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:20:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:22:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting this bound\n+   |\n+LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)\n+   |                                       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "63c298dbe3dcb0ba9cae45d9f425b7b17c768883", "filename": "tests/ui/async-await/issue-86507.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-86507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use ::core::pin::Pin;"}, {"sha": "ec2249ca592b586e4f18d269b7ea1158a0910184", "filename": "tests/ui/async-await/issue-93648.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-93648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissue-93648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-93648.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n // build-pass\n-// compile-flags: -Zdrop-tracking\n \n fn main() {\n     let _ = async {"}, {"sha": "d5394469806da78e7340c3b0e3b6be68e034e652", "filename": "tests/ui/async-await/issues/auxiliary/issue_67893.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n use std::sync::{Arc, Mutex};"}, {"sha": "8b75d95a68eed8979b23bf7a5092f86e952f17dc", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,33 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:16:17\n+   |\n+LL |       assert_send(async {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         bar(Foo(std::ptr::null())).await;\n+LL | |     })\n+   | |_____^ future created by async block is not `Send`\n+   |\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n+   |\n+LL |         bar(Foo(std::ptr::null())).await;\n+   |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n+   |                 |                 |\n+   |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n+   |                 has type `*const u8` which is not `Send`\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:13\n+   |\n+LL |         bar(Foo(std::ptr::null())).await;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:13:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8b75d95a68eed8979b23bf7a5092f86e952f17dc", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -4,21 +4,22 @@ error: future cannot be sent between threads safely\n LL |       assert_send(async {\n    |  _________________^\n LL | |\n+LL | |\n LL | |         bar(Foo(std::ptr::null())).await;\n LL | |     })\n    | |_____^ future created by async block is not `Send`\n    |\n-   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 19:6]`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `[async block@$DIR/issue-65436-raw-ptr-not-send.rs:16:17: 20:6]`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n    |                 |                 |\n    |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n    |                 has type `*const u8` which is not `Send`\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:13\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:19:13\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "630e0e4eebe1653a6d7c54b5ec298525f5e2154e", "filename": "tests/ui/async-await/issues/issue-65436-raw-ptr-not-send.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,8 +1,8 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // [drop_tracking] check-pass\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n \n struct Foo(*const u8);\n \n@@ -15,6 +15,7 @@ fn assert_send<T: Send>(_: T) {}\n fn main() {\n     assert_send(async {\n         //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n+        //[drop_tracking_mir]~^^ ERROR future cannot be sent between threads safely\n         bar(Foo(std::ptr::null())).await;\n     })\n }"}, {"sha": "c4f8f607d257945a7dbae674c3374d73ba156073", "filename": "tests/ui/async-await/issues/issue-67611-static-mut-refs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67611-static-mut-refs.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,10 @@\n // build-pass\n // edition:2018\n \n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n static mut A: [i32; 5] = [1, 2, 3, 4, 5];\n \n fn is_send_sync<T: Send + Sync>(_: T) {}"}, {"sha": "ce9424c8b252bbe78f7805755c5977c47e4df143", "filename": "tests/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -6,7 +6,7 @@ LL |     g(issue_67893::run())\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/auxiliary/issue_67893.rs:9:26\n+  --> $DIR/auxiliary/issue_67893.rs:12:26\n    |\n LL |     f(*x.lock().unwrap()).await;\n    |        ----------------- ^^^^^^- `x.lock().unwrap()` is later dropped here"}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.drop_tracking.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,21 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "a241f30e73e6eb3f7e8f9c57c669be1091adcf55", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n // edition:2018\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:5:18\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n    |\n LL | async fn rec_1() {\n    |                  ^ recursive `async fn`\n@@ -8,7 +8,7 @@ LL | async fn rec_1() {\n    = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n \n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n    |\n LL | async fn rec_2() {\n    |                  ^ recursive `async fn`"}, {"sha": "d4df9d439c5f15ac1638c2b5d7a9cb3d096be627", "filename": "tests/ui/async-await/non-trivial-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fnon-trivial-drop.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking=y\n \n #![feature(generators)]\n "}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.drop_tracking.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.drop_tracking_mir.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.no_drop_tracking.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n+   |\n+LL | async fn recursive_async_function() -> () {\n+   |                                        ^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "60b34d3a1741586e52a328cdc40a08d4ec1bdfe7", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:5:40\n+  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n    |\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ recursive `async fn`"}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,39 @@\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.drop_tracking_mir.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,39 @@\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.no_drop_tracking.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,39 @@\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:13:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:13:10\n+   |\n+LL |     bar().await;\n+   |          ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0698`."}, {"sha": "c9e77f0c3ea7a47c0fde98c9b412b0aa4b51fcda", "filename": "tests/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // Provoke an unresolved type error (T).\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)"}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,35 +1,35 @@\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:10:5\n+  --> $DIR/unresolved_type_param.rs:13:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:10:10\n+  --> $DIR/unresolved_type_param.rs:13:10\n    |\n LL |     bar().await;\n    |          ^^^^^^"}, {"sha": "7211367afeee6fe3e4f8ab32a515f0dde3798662", "filename": "tests/ui/generator/addassign-yield.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Faddassign-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Faddassign-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Faddassign-yield.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // run-pass\n // Regression test for broken MIR error (#61442)\n // Due to the two possible evaluation orders for"}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.drop_tracking_mir.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.no_drop_tracking.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,47 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:24\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                        ^^^^                - temporary value is freed at the end of this statement\n+   |                        |\n+   |                        creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/auto-trait-regions.rs:48:35\n+   |\n+LL |         let a = A(&mut true, &mut true, No);\n+   |                                   ^^^^     - temporary value is freed at the end of this statement\n+   |                                   |\n+   |                                   creates a temporary value which is freed while still in use\n+...\n+LL |         assert_foo(a);\n+   |                    - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:34:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/auto-trait-regions.rs:54:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "fd13e41319f01be565189006571fc5ed7af0019f", "filename": "tests/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators)]\n #![feature(auto_traits)]\n #![feature(negative_impls)]"}, {"sha": "165748d44305a733353549dbe6ba28d15de56a46", "filename": "tests/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:24\n+  --> $DIR/auto-trait-regions.rs:48:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:35\n+  --> $DIR/auto-trait-regions.rs:48:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -25,7 +25,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:34:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -34,7 +34,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:51:5\n+  --> $DIR/auto-trait-regions.rs:54:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.drop_tracking.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       value captured here by generator\n+LL |\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.drop_tracking_mir.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       value captured here by generator\n+LL |\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.no_drop_tracking.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,31 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:13:33\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         Pin::new(&mut || yield &a).resume(())\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       value captured here by generator\n+LL |\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/borrowing.rs:20:20\n+   |\n+LL |     let _b = {\n+   |         -- borrow later stored here\n+LL |         let a = 3;\n+LL |         || {\n+   |         -- value captured here by generator\n+LL |             yield &a\n+   |                    ^ borrowed value does not live long enough\n+...\n+LL |     };\n+   |     - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "29f39437f8f554ce078e523377833f3924214dfb", "filename": "tests/ui/generator/borrowing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;"}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:9:33\n+  --> $DIR/borrowing.rs:13:33\n    |\n LL |     let _b = {\n    |         -- borrow later stored here\n@@ -13,7 +13,7 @@ LL |     };\n    |     - `a` dropped here while still borrowed\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:16:20\n+  --> $DIR/borrowing.rs:20:20\n    |\n LL |     let _b = {\n    |         -- borrow later stored here"}, {"sha": "c07906ec37d309885ac0a61437d54f478bb2a9dd", "filename": "tests/ui/generator/drop-tracking-parent-expression.drop_tracking.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -13,9 +13,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n@@ -34,14 +34,14 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -55,9 +55,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n@@ -76,14 +76,14 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:25\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,9 +97,9 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:18:21: 18:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/drop-tracking-parent-expression.rs:22:22\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n    |\n LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n    |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n@@ -118,7 +118,7 @@ LL | |         };\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/drop-tracking-parent-expression.rs:41:19\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`", "previous_filename": "tests/ui/generator/drop-tracking-parent-expression.stderr"}, {"sha": "1a05bfe4f0e6aebbdc4497aa433dec2091afab89", "filename": "tests/ui/generator/drop-tracking-parent-expression.drop_tracking_mir.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "1a05bfe4f0e6aebbdc4497aa433dec2091afab89", "filename": "tests/ui/generator/drop-tracking-parent-expression.no_drop_tracking.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/drop-tracking-parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/drop-tracking-parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/drop-tracking-parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-tracking-parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "61e81330b0920d63a4167ec9d1abf6f3cac9490c", "filename": "tests/ui/generator/drop-tracking-parent-expression.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,4 +1,7 @@\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(generators, negative_impls, rustc_attrs)]\n \n macro_rules! type_combinations {\n@@ -25,6 +28,7 @@ macro_rules! type_combinations {\n             //~^ ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n             //~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~^^^^ ERROR cannot be sent between threads\n         }\n \n         // Simple owned value. This works because the Client is considered moved into `drop`,\n@@ -34,6 +38,10 @@ macro_rules! type_combinations {\n                 _ => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking,drop_tracking_mir]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n         }\n     )* }\n }"}, {"sha": "cbc291701cbc9d9a67ea18f269b2b89b54eaaa88", "filename": "tests/ui/generator/drop-tracking-yielding-in-match-guards.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n // build-pass\n // edition:2018\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n #![feature(generators)]\n "}, {"sha": "4bba20bbae0068c9d63fc8a1dd7c5ed8ec7eb1cc", "filename": "tests/ui/generator/issue-57017.drop_tracking_mir.stderr", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,248 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "4bba20bbae0068c9d63fc8a1dd7c5ed8ec7eb1cc", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,248 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:30:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:28:28\n+   |\n+LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n+   |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `&$name::unsync::Client::default()` maybe used later\n+LL |               };\n+   |               - `&$name::unsync::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57017.rs:42:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/issue-57017.rs:39:21: 39:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57017.rs:40:28\n+   |\n+LL |               let g = move || match drop($name::unsend::Client::default()) {\n+   |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n+LL |                   _status => yield,\n+   |                              ^^^^^ yield occurs here, with `$name::unsend::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::unsend::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+LL | |         significant_drop => {\n+...  |\n+LL | |         }\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57017.rs:50:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "bcd6d226788586bd7359d1b12786a2ea83ad1198", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,8 @@\n-// build-pass\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking] build-pass\n+\n #![feature(generators, negative_impls)]\n \n macro_rules! type_combinations {\n@@ -25,6 +28,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking,drop_tracking_mir]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n         }\n \n         // This tests that `Client` is properly considered to be dropped after moving it into the\n@@ -34,6 +40,9 @@ macro_rules! type_combinations {\n                 _status => yield,\n             };\n             assert_send(g);\n+            //[no_drop_tracking,drop_tracking_mir]~^ ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR generator cannot be sent between threads safely\n         }\n     )* }\n }"}, {"sha": "a253cafe24d0d75a3dda69c4230b8962e5a957cd", "filename": "tests/ui/generator/issue-57478.drop_tracking_mir.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,32 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57478.rs:12:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         let guard = Foo;\n+LL | |         drop(guard);\n+LL | |         yield;\n+LL | |     })\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/issue-57478.rs:12:17: 12:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57478.rs:17:9\n+   |\n+LL |         let guard = Foo;\n+   |             ----- has type `Foo` which is not `Send`\n+LL |         drop(guard);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     })\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57478.rs:21:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a253cafe24d0d75a3dda69c4230b8962e5a957cd", "filename": "tests/ui/generator/issue-57478.no_drop_tracking.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,32 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-57478.rs:12:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         let guard = Foo;\n+LL | |         drop(guard);\n+LL | |         yield;\n+LL | |     })\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/issue-57478.rs:12:17: 12:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-57478.rs:17:9\n+   |\n+LL |         let guard = Foo;\n+   |             ----- has type `Foo` which is not `Send`\n+LL |         drop(guard);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     })\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-57478.rs:21:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf5350ecbb9961f84944379c04fb994d8461375a", "filename": "tests/ui/generator/issue-57478.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-57478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57478.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,7 @@\n-// check-pass\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+// [drop_tracking] check-pass\n \n #![feature(negative_impls, generators)]\n \n@@ -8,6 +10,8 @@ impl !Send for Foo {}\n \n fn main() {\n     assert_send(|| {\n+        //[no_drop_tracking]~^ ERROR generator cannot be sent between threads safely\n+        //[drop_tracking_mir]~^^ ERROR generator cannot be sent between threads safely\n         let guard = Foo;\n         drop(guard);\n         yield;"}, {"sha": "282eac1b686efa9cb5adfb6289c5dbd76e7e4f7d", "filename": "tests/ui/generator/issue-68112.drop_tracking.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,13 +1,13 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:40:18\n+  --> $DIR/issue-68112.rs:43:18\n    |\n LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-68112.rs:36:9\n+  --> $DIR/issue-68112.rs:39:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n@@ -18,13 +18,13 @@ LL |         yield;\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:22:25\n+  --> $DIR/issue-68112.rs:25:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:64:18\n+  --> $DIR/issue-68112.rs:67:18\n    |\n LL |     require_send(send_gen);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -35,28 +35,28 @@ LL |     require_send(send_gen);\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:49:5\n+  --> $DIR/issue-68112.rs:52:5\n    |\n LL |     || {\n    |     ^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:46:30\n+  --> $DIR/issue-68112.rs:49:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:54:34\n+  --> $DIR/issue-68112.rs:57:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n note: required because it's used within this generator\n-  --> $DIR/issue-68112.rs:60:20\n+  --> $DIR/issue-68112.rs:63:20\n    |\n LL |     let send_gen = || {\n    |                    ^^\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:22:25\n+  --> $DIR/issue-68112.rs:25:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "tests/ui/generator/issue-68112.stderr"}, {"sha": "282eac1b686efa9cb5adfb6289c5dbd76e7e4f7d", "filename": "tests/ui/generator/issue-68112.drop_tracking_mir.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,66 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:43:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-68112.rs:39:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+...\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:67:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:52:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:49:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:57:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:63:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "282eac1b686efa9cb5adfb6289c5dbd76e7e4f7d", "filename": "tests/ui/generator/issue-68112.no_drop_tracking.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,66 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:43:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/issue-68112.rs:39:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+...\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:67:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:52:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:49:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:57:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:63:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:25:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c3fe09be57fb1147d1129c7d3f059eb57b857e36", "filename": "tests/ui/generator/issue-68112.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-68112.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators, generator_trait)]\n \n use std::{"}, {"sha": "8d3f7c62f393611abfc387bd8192bf4a114750ea", "filename": "tests/ui/generator/issue-93161.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-93161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fissue-93161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-93161.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2021\n // run-pass\n-// compile-flags: -Zdrop-tracking\n \n #![feature(never_type)]\n "}, {"sha": "a15ee4044745ca3b9839e463527013a09ec141e1", "filename": "tests/ui/generator/not-send-sync.drop_tracking.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:16:17\n+  --> $DIR/not-send-sync.rs:19:17\n    |\n LL |       assert_send(|| {\n    |  _____-----------_^\n@@ -15,18 +15,18 @@ LL | |     });\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n    = note: required for `&Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/not-send-sync.rs:16:17\n+  --> $DIR/not-send-sync.rs:19:17\n    |\n LL |     assert_send(|| {\n    |                 ^^\n note: required by a bound in `assert_send`\n-  --> $DIR/not-send-sync.rs:7:23\n+  --> $DIR/not-send-sync.rs:10:23\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:9:17\n+  --> $DIR/not-send-sync.rs:12:17\n    |\n LL |       assert_sync(|| {\n    |  _________________^\n@@ -36,10 +36,10 @@ LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Sync`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/not-send-sync.rs:12:9\n+  --> $DIR/not-send-sync.rs:15:9\n    |\n LL |         let a = Cell::new(2);\n    |             - has type `Cell<i32>` which is not `Sync`\n@@ -48,7 +48,7 @@ LL |         yield;\n LL |     });\n    |     - `a` is later dropped here\n note: required by a bound in `assert_sync`\n-  --> $DIR/not-send-sync.rs:6:23\n+  --> $DIR/not-send-sync.rs:9:23\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_sync`", "previous_filename": "tests/ui/generator/not-send-sync.stderr"}, {"sha": "a15ee4044745ca3b9839e463527013a09ec141e1", "filename": "tests/ui/generator/not-send-sync.drop_tracking_mir.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,58 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:19:17\n+   |\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = note: required for `&Cell<i32>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/not-send-sync.rs:19:17\n+   |\n+LL |     assert_send(|| {\n+   |                 ^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:10:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:12:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:15:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:9:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a15ee4044745ca3b9839e463527013a09ec141e1", "filename": "tests/ui/generator/not-send-sync.no_drop_tracking.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,58 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:19:17\n+   |\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = note: required for `&Cell<i32>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/not-send-sync.rs:19:17\n+   |\n+LL |     assert_send(|| {\n+   |                 ^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:10:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/not-send-sync.rs:12:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[generator@$DIR/not-send-sync.rs:12:17: 12:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/not-send-sync.rs:15:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:9:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aadb2935701c7c4c8ef00e02821275996a9f33c3", "filename": "tests/ui/generator/not-send-sync.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnot-send-sync.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n #![feature(generators)]\n \n use std::cell::Cell;"}, {"sha": "ef489088bf853f7cc6a6b8e7e597a59c0fbba82b", "filename": "tests/ui/generator/parent-expression.drop_tracking.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,128 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2e1313a800487d3b6231d1038d3fa371c39bf240", "filename": "tests/ui/generator/parent-expression.drop_tracking_mir.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "2e1313a800487d3b6231d1038d3fa371c39bf240", "filename": "tests/ui/generator/parent-expression.no_drop_tracking.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,334 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `copy::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `copy::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `copy::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `derived_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `derived_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `derived_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `significant_drop::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `significant_drop::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `significant_drop::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:27:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:21:21: 21:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:25:22\n+   |\n+LL |               let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+   |                                                            ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+...\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/parent-expression.rs:40:25\n+   |\n+LL |               assert_send(g);\n+   |                           ^ generator is not `Send`\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+   |\n+   = help: within `[generator@$DIR/parent-expression.rs:37:21: 37:28]`, the trait `Send` is not implemented for `insignificant_dtor::Client`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/parent-expression.rs:38:22\n+   |\n+LL |               let g = move || match drop($name::Client::default()) {\n+   |                                          ------------------------ has type `insignificant_dtor::Client` which is not `Send`\n+LL |                   _ => yield,\n+   |                        ^^^^^ yield occurs here, with `$name::Client::default()` maybe used later\n+LL |               };\n+   |               - `$name::Client::default()` is later dropped here\n+...\n+LL | /     type_combinations!(\n+LL | |         // OK\n+LL | |         copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+LL | |         // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+...  |\n+LL | |         };\n+LL | |     );\n+   | |_____- in this macro invocation\n+note: required by a bound in `assert_send`\n+  --> $DIR/parent-expression.rs:49:19\n+   |\n+LL | fn assert_send<T: Send>(_thing: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+   = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "61e81330b0920d63a4167ec9d1abf6f3cac9490c", "filename": "tests/ui/generator/parent-expression.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fparent-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fparent-expression.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,77 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n+#![feature(generators, negative_impls, rustc_attrs)]\n+\n+macro_rules! type_combinations {\n+    (\n+        $( $name:ident => { $( $tt:tt )* } );* $(;)?\n+    ) => { $(\n+        mod $name {\n+            $( $tt )*\n+\n+            impl !Sync for Client {}\n+            impl !Send for Client {}\n+        }\n+\n+        // Struct update syntax. This fails because the Client used in the update is considered\n+        // dropped *after* the yield.\n+        {\n+            let g = move || match drop($name::Client { ..$name::Client::default() }) {\n+            //~^ `significant_drop::Client` which is not `Send`\n+            //~| `insignificant_dtor::Client` which is not `Send`\n+            //~| `derived_drop::Client` which is not `Send`\n+                _ => yield,\n+            };\n+            assert_send(g);\n+            //~^ ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+            //~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~^^^^ ERROR cannot be sent between threads\n+        }\n+\n+        // Simple owned value. This works because the Client is considered moved into `drop`,\n+        // even though the temporary expression doesn't end until after the yield.\n+        {\n+            let g = move || match drop($name::Client::default()) {\n+                _ => yield,\n+            };\n+            assert_send(g);\n+            //[no_drop_tracking,drop_tracking_mir]~^ ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+            //[no_drop_tracking,drop_tracking_mir]~| ERROR cannot be sent between threads\n+        }\n+    )* }\n+}\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+fn main() {\n+    type_combinations!(\n+        // OK\n+        copy => { #[derive(Copy, Clone, Default)] pub struct Client; };\n+        // NOT OK: MIR borrowck thinks that this is used after the yield, even though\n+        // this has no `Drop` impl and only the drops of the fields are observable.\n+        // FIXME: this should compile.\n+        derived_drop => { #[derive(Default)] pub struct Client { pub nickname: String } };\n+        // NOT OK\n+        significant_drop => {\n+            #[derive(Default)]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+        // NOT OK (we need to agree with MIR borrowck)\n+        insignificant_dtor => {\n+            #[derive(Default)]\n+            #[rustc_insignificant_dtor]\n+            pub struct Client;\n+            impl Drop for Client {\n+                fn drop(&mut self) {}\n+            }\n+        };\n+    );\n+}"}, {"sha": "e3c19264ee8574cb2d9b2bef85003910390d6add", "filename": "tests/ui/generator/partial-drop.drop_tracking.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,92 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:16:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:21:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+LL |         drop(guard.foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:31:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+...\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:34:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:40:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+...\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fa901b1977a156705af490b2f8dd4197a9b4dc5d", "filename": "tests/ui/generator/partial-drop.drop_tracking_mir.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,92 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:16:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:21:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+LL |         drop(guard.foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:31:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+...\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:34:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:40:9\n+   |\n+LL |         let Bar { foo, x } = guard;\n+   |                   --- has type `Foo` which is not `Send`\n+LL |         drop(foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `foo` maybe used later\n+LL |     });\n+   |     - `foo` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fa901b1977a156705af490b2f8dd4197a9b4dc5d", "filename": "tests/ui/generator/partial-drop.no_drop_tracking.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,92 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:16:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:21:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+LL |         drop(guard.foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:24:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:31:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+...\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     });\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:34:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:40:9\n+   |\n+LL |         let Bar { foo, x } = guard;\n+   |                   --- has type `Foo` which is not `Send`\n+LL |         drop(foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `foo` maybe used later\n+LL |     });\n+   |     - `foo` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:44:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e7f85df5877c51a8bf1deb94d621a9a4dcfea78e", "filename": "tests/ui/generator/partial-drop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,4 +1,6 @@\n-// compile-flags: -Zdrop-tracking\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n #![feature(negative_impls, generators)]\n "}, {"sha": "e3c19264ee8574cb2d9b2bef85003910390d6add", "filename": "tests/ui/generator/partial-drop.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:14:17\n+  --> $DIR/partial-drop.rs:16:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n@@ -11,9 +11,9 @@ LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:14:17: 14:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:16:17: 16:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:19:9\n+  --> $DIR/partial-drop.rs:21:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -23,13 +23,13 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n+  --> $DIR/partial-drop.rs:44:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:22:17\n+  --> $DIR/partial-drop.rs:24:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n@@ -41,9 +41,9 @@ LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:22:17: 22:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:24:17: 24:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:29:9\n+  --> $DIR/partial-drop.rs:31:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -53,13 +53,13 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n+  --> $DIR/partial-drop.rs:44:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:32:17\n+  --> $DIR/partial-drop.rs:34:17\n    |\n LL |       assert_send(|| {\n    |  _________________^\n@@ -71,9 +71,9 @@ LL | |         yield;\n LL | |     });\n    | |_____^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:32:17: 32:19]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:34:17: 34:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:38:9\n+  --> $DIR/partial-drop.rs:40:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -83,7 +83,7 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:42:19\n+  --> $DIR/partial-drop.rs:44:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "7d0a201699b5c734f3688bdff2fb88717d516f0e", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,13 +1,13 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:37:18\n+  --> $DIR/generator-print-verbose-1.rs:40:18\n    |\n LL |     require_send(send_gen);\n    |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-1.rs:35:9\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n@@ -16,13 +16,13 @@ LL |         yield;\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n-  --> $DIR/generator-print-verbose-1.rs:26:25\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:56:18\n+  --> $DIR/generator-print-verbose-1.rs:59:18\n    |\n LL |     require_send(send_gen);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -33,28 +33,28 @@ LL |     require_send(send_gen);\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-1.rs:42:5\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n    |\n LL |     || {\n    |     ^^\n note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n-  --> $DIR/generator-print-verbose-1.rs:41:30\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n-  --> $DIR/generator-print-verbose-1.rs:47:34\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-1.rs:52:20\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n    |\n LL |     let send_gen = || {\n    |                    ^^\n note: required by a bound in `require_send`\n-  --> $DIR/generator-print-verbose-1.rs:26:25\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "tests/ui/generator/print/generator-print-verbose-1.stderr"}, {"sha": "7d0a201699b5c734f3688bdff2fb88717d516f0e", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking_mir.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,64 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:40:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:59:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7d0a201699b5c734f3688bdff2fb88717d516f0e", "filename": "tests/ui/generator/print/generator-print-verbose-1.no_drop_tracking.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,64 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:40:18\n+   |\n+LL |     require_send(send_gen);\n+   |                  ^^^^^^^^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-1.rs:38:9\n+   |\n+LL |         let _non_send_gen = make_non_send_generator();\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+LL |     };\n+   |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-1.rs:59:18\n+   |\n+LL |     require_send(send_gen);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:45:5\n+   |\n+LL |     || {\n+   |     ^^\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:44:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:50:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:55:20\n+   |\n+LL |     let send_gen = || {\n+   |                    ^^\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:29:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d0acff8c93f94782325cb7432de4cf832f62ab90", "filename": "tests/ui/generator/print/generator-print-verbose-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // compile-flags: -Zverbose\n \n // Same as: tests/ui/generator/issue-68112.stderr"}, {"sha": "0df978e47dca9b9b2e107ed00f3dc7ec9d68747b", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:19:17\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n    |\n LL |       assert_send(|| {\n    |  _____-----------_^\n@@ -15,18 +15,18 @@ LL | |     });\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n    = note: required for `&'_#4r Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n-  --> $DIR/generator-print-verbose-2.rs:19:17\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n    |\n LL |     assert_send(|| {\n    |                 ^^\n note: required by a bound in `assert_send`\n-  --> $DIR/generator-print-verbose-2.rs:10:23\n+  --> $DIR/generator-print-verbose-2.rs:13:23\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:12:17\n+  --> $DIR/generator-print-verbose-2.rs:15:17\n    |\n LL |       assert_sync(|| {\n    |  _________________^\n@@ -39,7 +39,7 @@ LL | |     });\n    = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n note: generator is not `Sync` as this value is used across a yield\n-  --> $DIR/generator-print-verbose-2.rs:15:9\n+  --> $DIR/generator-print-verbose-2.rs:18:9\n    |\n LL |         let a = Cell::new(2);\n    |             - has type `Cell<i32>` which is not `Sync`\n@@ -48,7 +48,7 @@ LL |         yield;\n LL |     });\n    |     - `a` is later dropped here\n note: required by a bound in `assert_sync`\n-  --> $DIR/generator-print-verbose-2.rs:9:23\n+  --> $DIR/generator-print-verbose-2.rs:12:23\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_sync`", "previous_filename": "tests/ui/generator/print/generator-print-verbose-2.stderr"}, {"sha": "0df978e47dca9b9b2e107ed00f3dc7ec9d68747b", "filename": "tests/ui/generator/print/generator-print-verbose-2.drop_tracking_mir.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,58 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n+   |\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n+   |\n+LL |     assert_send(|| {\n+   |                 ^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:13:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:15:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:18:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:12:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0df978e47dca9b9b2e107ed00f3dc7ec9d68747b", "filename": "tests/ui/generator/print/generator-print-verbose-2.no_drop_tracking.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,58 @@\n+error[E0277]: `Cell<i32>` cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n+   |\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-2.rs:22:17\n+   |\n+LL |     assert_send(|| {\n+   |                 ^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:13:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be shared between threads safely\n+  --> $DIR/generator-print-verbose-2.rs:15:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n+   |\n+   = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n+   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead\n+note: generator is not `Sync` as this value is used across a yield\n+  --> $DIR/generator-print-verbose-2.rs:18:9\n+   |\n+LL |         let a = Cell::new(2);\n+   |             - has type `Cell<i32>` which is not `Sync`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `a` maybe used later\n+LL |     });\n+   |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:12:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "74b9811b50b2ca3e0ebef66d29a635d00c8132c8", "filename": "tests/ui/generator/print/generator-print-verbose-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // compile-flags: -Zverbose\n \n // Same as test/ui/generator/not-send-sync.rs"}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.drop_tracking.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.drop_tracking_mir.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.no_drop_tracking.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,13 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:27:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n+   |                  |\n+   |                  first borrow later used by call\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "0050d98d03ba65943952a8ce3e64df49eddd01f6", "filename": "tests/ui/generator/retain-resume-ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n //! This test ensures that a mutable reference cannot be passed as a resume argument twice.\n \n #![feature(generators, generator_trait)]"}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `thing` as mutable more than once at a time\n-  --> $DIR/retain-resume-ref.rs:23:25\n+  --> $DIR/retain-resume-ref.rs:27:25\n    |\n LL |     gen.as_mut().resume(&mut thing);\n    |                         ---------- first mutable borrow occurs here"}, {"sha": "4784ff49be2e97dc210385a4fab50dac1fce4ebc", "filename": "tests/ui/generator/static-mut-reference-across-yield.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-mut-reference-across-yield.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,6 +1,8 @@\n // build-pass\n-// revisions: mir thir\n+// revisions: mir thir drop_tracking drop_tracking_mir\n // [thir]compile-flags: -Zthir-unsafeck\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n \n #![feature(generators)]\n "}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.drop_tracking.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,8 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.drop_tracking_mir.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,8 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.no_drop_tracking.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,8 @@\n+error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+  --> $DIR/issue-55872-2.rs:17:9\n+   |\n+LL |         async {}\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1696ead0d8d1b8a84ca3563d17ae7eb4eb76aee4", "filename": "tests/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n #![feature(type_alias_impl_trait)]"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:9\n+  --> $DIR/issue-55872-2.rs:17:9\n    |\n LL |         async {}\n    |         ^^^^^^^^"}, {"sha": "43118ae38540ff45bcd9e53345402d1a54243f88", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking.stderr", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:7:22\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n    |                      ^^^^^^^^^^ recursive opaque type\n@@ -10,7 +10,7 @@ LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n    |                returning here with type `Option<(impl Sized, i32)>`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:12:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n    |\n LL | fn tuple() -> impl Sized {\n    |               ^^^^^^^^^^ recursive opaque type\n@@ -19,7 +19,7 @@ LL |     (tuple(),)\n    |     ---------- returning here with type `(impl Sized,)`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:17:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n    |\n LL | fn array() -> impl Sized {\n    |               ^^^^^^^^^^ recursive opaque type\n@@ -28,7 +28,7 @@ LL |     [array()]\n    |     --------- returning here with type `[impl Sized; 1]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:22:13\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n    |\n LL | fn ptr() -> impl Sized {\n    |             ^^^^^^^^^^ recursive opaque type\n@@ -37,7 +37,7 @@ LL |     &ptr() as *const _\n    |     ------------------ returning here with type `*const impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:27:16\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n    |                ^^^^^^^^^^ recursive opaque type\n@@ -46,7 +46,7 @@ LL |     fn_ptr as fn() -> _\n    |     ------------------- returning here with type `fn() -> impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:32:25\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n    |\n LL |   fn closure_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ recursive opaque type\n@@ -55,10 +55,10 @@ LL | /     move || {\n LL | |         x;\n    | |         - closure captures itself here\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 35:12]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n    |\n LL |   fn closure_ref_capture() -> impl Sized {\n    |                               ^^^^^^^^^^ recursive opaque type\n@@ -67,28 +67,28 @@ LL | /     move || {\n LL | |         &x;\n    | |          - closure captures itself here\n LL | |     }\n-   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 43:12]`\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n    |\n LL | fn closure_sig() -> impl Sized {\n    |                     ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || closure_sig()\n-   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:7]`\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:53:23\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n    |\n LL | fn generator_sig() -> impl Sized {\n    |                       ^^^^^^^^^^ recursive opaque type\n LL |\n LL |     || generator_sig()\n-   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:7]`\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:58:27\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n    |\n LL |   fn generator_capture() -> impl Sized {\n    |                             ^^^^^^^^^^ recursive opaque type\n@@ -98,10 +98,10 @@ LL | |         yield;\n LL | |         x;\n    | |         - generator captures itself here\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 61:12]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:67:35\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n    |\n LL | fn substs_change<T: 'static>() -> impl Sized {\n    |                                   ^^^^^^^^^^ recursive opaque type\n@@ -110,7 +110,7 @@ LL |     (substs_change::<&T>(),)\n    |     ------------------------ returning here with type `(impl Sized,)`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:72:24\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n    |\n LL |   fn generator_hold() -> impl Sized {\n    |                          ^^^^^^^^^^ recursive opaque type\n@@ -121,10 +121,10 @@ LL | |         let x = generator_hold();\n LL | |         yield;\n LL | |         x;\n LL | |     }\n-   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 74:12]`\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:86:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          ^^^^^^^^^ recursive opaque type\n@@ -136,7 +136,7 @@ LL | fn mutual_recursion_b() -> impl Sized {\n    |                            ---------- returning this opaque type `impl Sized`\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:91:28\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          --------- returning this opaque type `impl Sync`", "previous_filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.stderr"}, {"sha": "43118ae38540ff45bcd9e53345402d1a54243f88", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,152 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n+   |\n+LL | fn option(i: i32) -> impl Sized {\n+   |                      ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n+   |                ----          ------------------------ returning here with type `Option<(impl Sized, i32)>`\n+   |                |\n+   |                returning here with type `Option<(impl Sized, i32)>`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n+   |\n+LL | fn tuple() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (tuple(),)\n+   |     ---------- returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n+   |\n+LL | fn array() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     [array()]\n+   |     --------- returning here with type `[impl Sized; 1]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n+   |\n+LL | fn ptr() -> impl Sized {\n+   |             ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     &ptr() as *const _\n+   |     ------------------ returning here with type `*const impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n+   |\n+LL | fn fn_ptr() -> impl Sized {\n+   |                ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     fn_ptr as fn() -> _\n+   |     ------------------- returning here with type `fn() -> impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n+   |\n+LL |   fn closure_capture() -> impl Sized {\n+   |                           ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         x;\n+   | |         - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n+   |\n+LL |   fn closure_ref_capture() -> impl Sized {\n+   |                               ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         &x;\n+   | |          - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n+   |\n+LL | fn closure_sig() -> impl Sized {\n+   |                     ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || closure_sig()\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n+   |\n+LL | fn generator_sig() -> impl Sized {\n+   |                       ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || generator_sig()\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n+   |\n+LL |   fn generator_capture() -> impl Sized {\n+   |                             ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         yield;\n+LL | |         x;\n+   | |         - generator captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n+   |\n+LL | fn substs_change<T: 'static>() -> impl Sized {\n+   |                                   ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (substs_change::<&T>(),)\n+   |     ------------------------ returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n+   |\n+LL |   fn generator_hold() -> impl Sized {\n+   |                          ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL | /     move || {\n+LL | |         let x = generator_hold();\n+   | |             - generator captures itself here\n+LL | |         yield;\n+LL | |         x;\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          ^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion_b()\n+   |     -------------------- returning here with type `impl Sized`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ---------- returning this opaque type `impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          --------- returning this opaque type `impl Sync`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion()\n+   |     ------------------ returning here with type `impl Sync`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "43118ae38540ff45bcd9e53345402d1a54243f88", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.no_drop_tracking.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,152 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:11:22\n+   |\n+LL | fn option(i: i32) -> impl Sized {\n+   |                      ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n+   |                ----          ------------------------ returning here with type `Option<(impl Sized, i32)>`\n+   |                |\n+   |                returning here with type `Option<(impl Sized, i32)>`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:16:15\n+   |\n+LL | fn tuple() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (tuple(),)\n+   |     ---------- returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:21:15\n+   |\n+LL | fn array() -> impl Sized {\n+   |               ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     [array()]\n+   |     --------- returning here with type `[impl Sized; 1]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:13\n+   |\n+LL | fn ptr() -> impl Sized {\n+   |             ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     &ptr() as *const _\n+   |     ------------------ returning here with type `*const impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:31:16\n+   |\n+LL | fn fn_ptr() -> impl Sized {\n+   |                ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     fn_ptr as fn() -> _\n+   |     ------------------- returning here with type `fn() -> impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:36:25\n+   |\n+LL |   fn closure_capture() -> impl Sized {\n+   |                           ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         x;\n+   | |         - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:39:5: 39:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:29\n+   |\n+LL |   fn closure_ref_capture() -> impl Sized {\n+   |                               ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         &x;\n+   | |          - closure captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:47:5: 47:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:52:21\n+   |\n+LL | fn closure_sig() -> impl Sized {\n+   |                     ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || closure_sig()\n+   |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:54:5: 54:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:23\n+   |\n+LL | fn generator_sig() -> impl Sized {\n+   |                       ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     || generator_sig()\n+   |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:59:5: 59:7]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:62:27\n+   |\n+LL |   fn generator_capture() -> impl Sized {\n+   |                             ^^^^^^^^^^ recursive opaque type\n+...\n+LL | /     move || {\n+LL | |         yield;\n+LL | |         x;\n+   | |         - generator captures itself here\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:65:5: 65:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:71:35\n+   |\n+LL | fn substs_change<T: 'static>() -> impl Sized {\n+   |                                   ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     (substs_change::<&T>(),)\n+   |     ------------------------ returning here with type `(impl Sized,)`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:76:24\n+   |\n+LL |   fn generator_hold() -> impl Sized {\n+   |                          ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL | /     move || {\n+LL | |         let x = generator_hold();\n+   | |             - generator captures itself here\n+LL | |         yield;\n+LL | |         x;\n+LL | |     }\n+   | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:78:5: 78:12]`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:90:26\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          ^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion_b()\n+   |     -------------------- returning here with type `impl Sized`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ---------- returning this opaque type `impl Sized`\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:95:28\n+   |\n+LL | fn mutual_recursion() -> impl Sync {\n+   |                          --------- returning this opaque type `impl Sync`\n+...\n+LL | fn mutual_recursion_b() -> impl Sized {\n+   |                            ^^^^^^^^^^ recursive opaque type\n+LL |\n+LL |     mutual_recursion()\n+   |     ------------------ returning here with type `impl Sync`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "630372e13ed58b8d1c2c216708d3e8bbf6915a03", "filename": "tests/ui/impl-trait/recursive-impl-trait-type-indirect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,7 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden.\n "}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,19 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^ ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.drop_tracking_mir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,19 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^ ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.no_drop_tracking.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,19 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^ ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:19:13\n+   |\n+LL |     wheeee(&No {}).await;\n+   |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6e49ee52bd94457fe6a11c30cadba2261fb05594", "filename": "tests/ui/lint/must_not_suspend/dedup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]"}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,16 +1,16 @@\n error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:16:13\n+  --> $DIR/dedup.rs:19:13\n    |\n LL |     wheeee(&No {}).await;\n    |             ^^^^^ ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:16:13\n+  --> $DIR/dedup.rs:19:13\n    |\n LL |     wheeee(&No {}).await;\n    |             ^^^^^\n note: the lint level is defined here\n-  --> $DIR/dedup.rs:3:9\n+  --> $DIR/dedup.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "e3628ca5e493498eaea7849b90ec5c0eecf7ec0a", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: reference to `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n@@ -8,17 +8,17 @@ LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:21:13\n+  --> $DIR/ref.rs:22:13\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n+  --> $DIR/ref.rs:7:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "e9bfa08b5ddd93035c306273a3c94a591cb75075", "filename": "tests/ui/lint/must_not_suspend/ref.drop_tracking_mir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,27 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref.rs:22:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+LL |\n+LL |         other().await;\n+   |                ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/ref.rs:22:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/ref.rs:22:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:7:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e9bfa08b5ddd93035c306273a3c94a591cb75075", "filename": "tests/ui/lint/must_not_suspend/ref.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n@@ -8,17 +8,17 @@ LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:21:26\n+  --> $DIR/ref.rs:22:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n+  --> $DIR/ref.rs:7:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "8784ffbc634614174c32f058e1bfaa1eb3a2eef5", "filename": "tests/ui/lint/must_not_suspend/ref.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,7 +1,8 @@\n // edition:2018\n-// revisions: no_drop_tracking drop_tracking\n-// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n-// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n+\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n "}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.drop_tracking_mir.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.no_drop_tracking.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:24:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL |\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:25:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b6ccae0d249bb2301a06ab3242109afb23a5dc15", "filename": "tests/ui/lint/must_not_suspend/trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,5 +1,5 @@\n error: implementer of `Wow` held across a suspend point, but should not be\n-  --> $DIR/trait.rs:21:9\n+  --> $DIR/trait.rs:24:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n@@ -8,18 +8,18 @@ LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:21:9\n+  --> $DIR/trait.rs:24:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n note: the lint level is defined here\n-  --> $DIR/trait.rs:3:9\n+  --> $DIR/trait.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: boxed `Wow` trait object held across a suspend point, but should not be\n-  --> $DIR/trait.rs:22:9\n+  --> $DIR/trait.rs:25:9\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n@@ -28,7 +28,7 @@ LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:22:9\n+  --> $DIR/trait.rs:25:9\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:23:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8903f8a6d0597ac930424609453669cbdb8f8895", "filename": "tests/ui/lint/must_not_suspend/unit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,23 +1,23 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:20:9\n+  --> $DIR/unit.rs:23:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/unit.rs:3:9\n+  --> $DIR/unit.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.drop_tracking_mir.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.drop_tracking_mir.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.no_drop_tracking.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -0,0 +1,26 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |            ------ the value is held across this suspend point\n+   |\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:24:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:7:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b5002cb9f60a5ccfaabe78ec0c17b8862ed6dad2", "filename": "tests/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,3 +1,6 @@\n+// revisions: no_drop_tracking drop_tracking drop_tracking_mir\n+// [drop_tracking] compile-flags: -Zdrop-tracking\n+// [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n // run-pass\n #![feature(must_not_suspend)]"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9259da51edfb54a2dfb55a624005b7aa945cdcc6/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=9259da51edfb54a2dfb55a624005b7aa945cdcc6", "patch": "@@ -1,23 +1,23 @@\n warning: `Umm` held across a suspend point, but should not be\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/warn.rs:21:9\n+  --> $DIR/warn.rs:24:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n note: the lint level is defined here\n-  --> $DIR/warn.rs:4:9\n+  --> $DIR/warn.rs:7:9\n    |\n LL | #![warn(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^"}]}