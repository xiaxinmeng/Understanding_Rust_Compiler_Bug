{"sha": "41eda69516dd3ee217ae07c0efa369d31f630405", "node_id": "C_kwDOAAsO6NoAKDQxZWRhNjk1MTZkZDNlZTIxN2FlMDdjMGVmYTM2OWQzMWY2MzA0MDU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-24T21:32:10Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-03-18T18:29:04Z"}, "message": "Remove duplicate unreachable blocks", "tree": {"sha": "8e1d53ae15abd9ecdb84afa1164e2898299b95a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1d53ae15abd9ecdb84afa1164e2898299b95a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41eda69516dd3ee217ae07c0efa369d31f630405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41eda69516dd3ee217ae07c0efa369d31f630405", "html_url": "https://github.com/rust-lang/rust/commit/41eda69516dd3ee217ae07c0efa369d31f630405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41eda69516dd3ee217ae07c0efa369d31f630405/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "511364e7874dba9649a264100407e4bffe7b5425", "url": "https://api.github.com/repos/rust-lang/rust/commits/511364e7874dba9649a264100407e4bffe7b5425", "html_url": "https://github.com/rust-lang/rust/commit/511364e7874dba9649a264100407e4bffe7b5425"}], "stats": {"total": 223, "additions": 148, "deletions": 75}, "files": [{"sha": "c8474a455b5561aa94a574d3db5e298fc6df0086", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -28,7 +28,7 @@\n //! return.\n \n use crate::MirPass;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n@@ -48,6 +48,7 @@ impl SimplifyCfg {\n \n pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     CfgSimplifier::new(body).simplify();\n+    remove_duplicate_unreachable_blocks(tcx, body);\n     remove_dead_blocks(tcx, body);\n \n     // FIXME: Should probably be moved into some kind of pass manager\n@@ -259,6 +260,47 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n+pub fn remove_duplicate_unreachable_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    struct OptApplier<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        duplicates: FxIndexSet<BasicBlock>,\n+    }\n+\n+    impl<'tcx> MutVisitor<'tcx> for OptApplier<'tcx> {\n+        fn tcx(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+            for target in terminator.successors_mut() {\n+                if self.duplicates.contains(target) {\n+                    *target = self.duplicates[0];\n+                }\n+            }\n+\n+            self.super_terminator(terminator, location);\n+        }\n+    }\n+\n+    let unreachable_blocks = body\n+        .basic_blocks\n+        .iter_enumerated()\n+        .filter(|(_, bb)| {\n+            // CfgSimplifier::simplify leaves behind some unreachable basic blocks without a\n+            // terminator. Those blocks will be deleted by remove_dead_blocks, but we run just\n+            // before then so we need to handle missing terminators.\n+            // We also need to prevent confusing cleanup and non-cleanup blocks. In practice we\n+            // don't emit empty unreachable cleanup blocks, so this simple check suffices.\n+            bb.terminator.is_some() && bb.is_empty_unreachable() && !bb.is_cleanup\n+        })\n+        .map(|(block, _)| block)\n+        .collect::<FxIndexSet<_>>();\n+\n+    if unreachable_blocks.len() > 1 {\n+        OptApplier { tcx, duplicates: unreachable_blocks }.visit_body(body);\n+    }\n+}\n+\n pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks.len();"}, {"sha": "fd6485de863c22636b874b733bdd5dad00f11ef6", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -90,7 +90,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb0: {\n         _39 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))); // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        switchInt(move _39) -> [0: bb1, 1: bb29, 3: bb27, 4: bb28, otherwise: bb30]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        switchInt(move _39) -> [0: bb1, 1: bb28, 3: bb26, 4: bb27, otherwise: bb29]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n     bb1: {\n@@ -263,7 +263,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        switchInt(move _32) -> [0: bb22, 1: bb20, otherwise: bb21]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n \n     bb20: {\n@@ -281,10 +281,6 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb21: {\n-        unreachable;                     // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-    }\n-\n-    bb22: {\n         StorageLive(_33);                // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         _33 = ((_25 as Ready).0: ());    // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         _37 = _33;                       // scope 6 at $DIR/async_await.rs:+2:5: +2:14\n@@ -293,34 +289,34 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n     }\n \n-    bb23: {\n+    bb22: {\n         StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n \n-    bb24: {\n+    bb23: {\n         nop;                             // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n     }\n \n-    bb25: {\n+    bb24: {\n         StorageDead(_21);                // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n-        goto -> bb26;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n     }\n \n-    bb26: {\n+    bb25: {\n         _0 = Poll::<()>::Ready(move _37); // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n     }\n \n-    bb27: {\n+    bb26: {\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_19);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n@@ -329,19 +325,19 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         goto -> bb11;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb28: {\n+    bb27: {\n         StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_35);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_36);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         _35 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        goto -> bb22;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb29: {\n-        assert(const false, \"`async fn` resumed after completion\") -> bb29; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    bb28: {\n+        assert(const false, \"`async fn` resumed after completion\") -> bb28; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb30: {\n+    bb29: {\n         unreachable;                     // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n }"}, {"sha": "b5e0a66d83f6e13a6fe0e0b02a46d5a5bc492d62", "filename": "tests/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -61,33 +61,29 @@\n   \n       bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-          switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          switchInt(move _8) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n       bb5: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _0 = Option::<i32>::None;        // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n       bb6: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      }\n-  \n-      bb7: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _0 = Option::<i32>::Some(move _10); // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n-      bb8: {\n+      bb7: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "f7f50206af252aab57bdcb9fc7ae2d662952a199", "filename": "tests/mir-opt/simplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `assert_nonzero_nonmax` before SimplifyCfg-after-uninhabited-enum-branching\n++ // MIR for `assert_nonzero_nonmax` after SimplifyCfg-after-uninhabited-enum-branching\n+  \n+  fn assert_nonzero_nonmax(_1: u8) -> u8 {\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+0:47: +0:49\n+  \n+      bb0: {\n+-         switchInt(_1) -> [0: bb1, 255: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+3:13: +7:14\n++         switchInt(_1) -> [0: bb1, 255: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+3:13: +7:14\n+      }\n+  \n+      bb1: {\n+          unreachable;                     // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+10:13: +10:26\n+      }\n+  \n+      bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+13:13: +13:26\n+-     }\n+- \n+-     bb3: {\n+          _0 = _1;                         // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+16:13: +16:20\n+          return;                          // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+17:13: +17:21\n+      }\n+  }\n+  "}, {"sha": "e2578407fea9db894319b9c7b6c263bb3d3ab0d0", "filename": "tests/mir-opt/simplify_duplicate_unreachable_blocks.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -0,0 +1,30 @@\n+#![feature(custom_mir, core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+use std::intrinsics::mir::*;\n+\n+// unit-test: SimplifyCfg-after-uninhabited-enum-branching\n+\n+// EMIT_MIR simplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+pub unsafe fn assert_nonzero_nonmax(x: u8) -> u8 {\n+    mir!(\n+        {\n+            match x {\n+                0 => unreachable1,\n+                u8::MAX => unreachable2,\n+                _ => retblock,\n+            }\n+        }\n+        unreachable1 = {\n+            Unreachable()\n+        }\n+        unreachable2 = {\n+            Unreachable()\n+        }\n+        retblock = {\n+            RET = x;\n+            Return()\n+        }\n+    )\n+}"}, {"sha": "935dbb28b0f5ab1d430faa2b8b8f21cbe11fdcbb", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -26,37 +26,37 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n         _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n     }\n \n     bb1: {\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n     }\n \n     bb2: {\n+        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n+    }\n+\n+    bb3: {\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n     }\n \n-    bb3: {\n+    bb4: {\n         _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        switchInt(move _6) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n     }\n \n-    bb4: {\n+    bb5: {\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }\n \n-    bb5: {\n-        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-    }\n-\n     bb6: {\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6"}, {"sha": "a0b556640755b038b471e4202fd3368d824232bc", "filename": "tests/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -34,7 +34,7 @@ fn main() -> () {\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        switchInt(move _8) -> [4: bb5, 5: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+        switchInt(move _8) -> [4: bb4, 5: bb3, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }\n \n     bb2: {\n@@ -49,22 +49,18 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+        goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-    }\n-\n-    bb5: {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+        goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "58d6e42812f90ffe214cacc8976dfc3f1045ebcf", "filename": "tests/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -63,7 +63,7 @@\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          switchInt(move _8) -> [4: bb8, 5: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+          switchInt(move _8) -> [4: bb7, 5: bb6, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }\n   \n       bb6: {\n@@ -74,22 +74,18 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+          goto -> bb8;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n       }\n   \n       bb7: {\n-          unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-      }\n-  \n-      bb8: {\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+          goto -> bb8;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n       }\n   \n-      bb9: {\n+      bb8: {\n           StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "0368b5f18c9a9b33cc9f5a9189055b3108b95080", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -63,7 +63,7 @@ fn main() -> () {\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n         _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-        switchInt(move _10) -> [2: bb7, 3: bb5, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+        switchInt(move _10) -> [2: bb6, 3: bb5, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n     }\n \n     bb5: {\n@@ -74,25 +74,21 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+        goto -> bb7;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n     }\n \n     bb6: {\n-        unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-    }\n-\n-    bb7: {\n         StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+        goto -> bb7;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}, {"sha": "73353941fae7074ca88118adb8d3979d2d06c648", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/41eda69516dd3ee217ae07c0efa369d31f630405/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=41eda69516dd3ee217ae07c0efa369d31f630405", "patch": "@@ -84,8 +84,8 @@\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n           _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n--         switchInt(move _10) -> [0: bb9, 1: bb10, 2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n-+         switchInt(move _10) -> [2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+-         switchInt(move _10) -> [0: bb8, 1: bb9, 2: bb10, 3: bb7, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n++         switchInt(move _10) -> [2: bb10, 3: bb7, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n       }\n   \n       bb7: {\n@@ -96,44 +96,40 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n       }\n   \n       bb8: {\n-          unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-      }\n-  \n-      bb9: {\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n       }\n   \n-      bb10: {\n+      bb9: {\n           StorageLive(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n       }\n   \n-      bb11: {\n+      bb10: {\n           StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n       }\n   \n-      bb12: {\n+      bb11: {\n           StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}]}