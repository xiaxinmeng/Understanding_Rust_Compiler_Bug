{"sha": "ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMGViZDI3YTQ0MzY3MjliNjhjZGY1MTgwY2ZiYjBjMTZjODAzYTA=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-03T15:39:39Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-03T16:12:11Z"}, "message": "move interpret::MemoryKind::Heap to const eval", "tree": {"sha": "fed491e67397de10c30d23ec6faef40d0f138ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed491e67397de10c30d23ec6faef40d0f138ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "html_url": "https://github.com/rust-lang/rust/commit/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d015f0d92144f0e72735a918aee8510b0fe2cff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d015f0d92144f0e72735a918aee8510b0fe2cff5", "html_url": "https://github.com/rust-lang/rust/commit/d015f0d92144f0e72735a918aee8510b0fe2cff5"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "187f6fab5181f70f2417b11ec8575619fd0e507a", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "patch": "@@ -7,6 +7,7 @@ use std::collections::hash_map::Entry;\n use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n+use std::fmt;\n \n use rustc_ast::Mutability;\n use rustc_hir::def_id::DefId;\n@@ -179,6 +180,28 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n crate type CompileTimeEvalContext<'mir, 'tcx> =\n     InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>;\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum MemoryKind {\n+    Heap,\n+}\n+\n+impl fmt::Display for MemoryKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            MemoryKind::Heap => write!(f, \"heap allocation\"),\n+        }\n+    }\n+}\n+\n+impl interpret::MayLeak for MemoryKind {\n+    #[inline(always)]\n+    fn may_leak(self) -> bool {\n+        match self {\n+            MemoryKind::Heap => false,\n+        }\n+    }\n+}\n+\n impl interpret::MayLeak for ! {\n     #[inline(always)]\n     fn may_leak(self) -> bool {\n@@ -222,6 +245,8 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n \n+    type MemoryKind = MemoryKind;\n+\n     type MemoryExtra = MemoryExtra;\n \n     fn find_mir_or_eval_fn(\n@@ -317,7 +342,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 let ptr = ecx.memory.allocate(\n                     Size::from_bytes(size as u64),\n                     align,\n-                    interpret::MemoryKind::ConstHeap,\n+                    interpret::MemoryKind::Machine(MemoryKind::Heap),\n                 );\n                 ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }"}, {"sha": "01d58c47e3ab9f52141a8a12197cb396f967eed4", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "patch": "@@ -25,19 +25,20 @@ use rustc_target::abi::Size;\n use rustc_ast::Mutability;\n \n use super::{AllocId, Allocation, InterpCx, MPlaceTy, Machine, MemoryKind, Scalar, ValueVisitor};\n+use crate::const_eval;\n \n-pub trait CompileTimeMachine<'mir, 'tcx> = Machine<\n+pub trait CompileTimeMachine<'mir, 'tcx, T> = Machine<\n     'mir,\n     'tcx,\n-    MemoryKind = !,\n+    MemoryKind = T,\n     PointerTag = (),\n     ExtraFnVal = !,\n     FrameExtra = (),\n     AllocExtra = (),\n-    MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    MemoryMap = FxHashMap<AllocId, (MemoryKind<T>, Allocation)>,\n >;\n \n-struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> {\n+struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>> {\n     /// The ectx from which we intern.\n     ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     /// Previously encountered safe references.\n@@ -74,7 +75,7 @@ struct IsStaticOrFn;\n /// `immutable` things might become mutable if `ty` is not frozen.\n /// `ty` can be `None` if there is no potential interior mutability\n /// to account for (e.g. for vtables).\n-fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n+fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     leftover_allocations: &'rt mut FxHashSet<AllocId>,\n     alloc_id: AllocId,\n@@ -105,7 +106,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // changes in this function.\n     match kind {\n         MemoryKind::Stack\n-        | MemoryKind::ConstHeap\n+        | MemoryKind::Machine(const_eval::MemoryKind::Heap)\n         | MemoryKind::Vtable\n         | MemoryKind::CallerLocation => {}\n     }\n@@ -141,7 +142,9 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     None\n }\n \n-impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> InternVisitor<'rt, 'mir, 'tcx, M> {\n+impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>\n+    InternVisitor<'rt, 'mir, 'tcx, M>\n+{\n     fn intern_shallow(\n         &mut self,\n         alloc_id: AllocId,\n@@ -152,8 +155,8 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> InternVisitor<'rt, 'mir\n     }\n }\n \n-impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n-    for InternVisitor<'rt, 'mir, 'tcx, M>\n+impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>\n+    ValueVisitor<'mir, 'tcx, M> for InternVisitor<'rt, 'mir, 'tcx, M>\n {\n     type V = MPlaceTy<'tcx>;\n \n@@ -290,7 +293,7 @@ pub enum InternKind {\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n #[tracing::instrument(skip(ecx))]\n-pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n+pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,\n     ret: MPlaceTy<'tcx>,\n@@ -421,7 +424,9 @@ where\n     Ok(())\n }\n \n-impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n+    InterpCx<'mir, 'tcx, M>\n+{\n     /// A helper function that allocates memory for the layout given and gives you access to mutate\n     /// it. Once your own mutation code is done, the backing `Allocation` is removed from the\n     /// current `Memory` and returned."}, {"sha": "0bba02737722931910c8e5ce2bf5be59ee2cf359", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "patch": "@@ -366,9 +366,9 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type PointerTag = ();\n     type ExtraFnVal = !;\n \n-    type MemoryKind = !;\n-    type MemoryMap = rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n-    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n+    type MemoryMap =\n+        rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<Self::MemoryKind>, Allocation)>;\n+    const GLOBAL_KIND: Option<Self::MemoryKind> = None; // no copying of globals from `tcx` to machine memory\n \n     type AllocExtra = ();\n     type FrameExtra = ();\n@@ -407,7 +407,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _memory_extra: &Self::MemoryExtra,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n-        _kind: Option<MemoryKind<!>>,\n+        _kind: Option<MemoryKind<Self::MemoryKind>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n         (alloc, ())"}, {"sha": "f3e373813ca537c3e40bcccb63b2410f254bcea1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "patch": "@@ -27,9 +27,6 @@ use crate::util::pretty;\n pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n-    /// Heap memory.\n-    /// FIXME: this variant should be in const_eval\n-    ConstHeap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n     /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n@@ -43,7 +40,6 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n-            MemoryKind::ConstHeap => false,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -55,7 +51,6 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n-            MemoryKind::ConstHeap => write!(f, \"heap allocation\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "1d949e020ed5ced7a7a4bc6f88c249707c18a9cd", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0ebd27a4436729b68cdf5180cfbb0c16c803a0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=ff0ebd27a4436729b68cdf5180cfbb0c16c803a0", "patch": "@@ -180,6 +180,8 @@ impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n \n+    type MemoryKind = !;\n+\n     type MemoryExtra = ();\n \n     fn find_mir_or_eval_fn("}]}