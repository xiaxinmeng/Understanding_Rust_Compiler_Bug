{"sha": "e603090961d950b1130950c179361b530c7ad10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MDMwOTA5NjFkOTUwYjExMzA5NTBjMTc5MzYxYjUzMGM3YWQxMGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-08T17:40:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-08T17:40:07Z"}, "message": "minor: add missing test", "tree": {"sha": "4964ed19f3997eed8487b40ec94007a2507a1cd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4964ed19f3997eed8487b40ec94007a2507a1cd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e603090961d950b1130950c179361b530c7ad10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e603090961d950b1130950c179361b530c7ad10a", "html_url": "https://github.com/rust-lang/rust/commit/e603090961d950b1130950c179361b530c7ad10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e603090961d950b1130950c179361b530c7ad10a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880ddddfe6937c11059e9673050ea8c4ed40ff5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/880ddddfe6937c11059e9673050ea8c4ed40ff5b", "html_url": "https://github.com/rust-lang/rust/commit/880ddddfe6937c11059e9673050ea8c4ed40ff5b"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "543b1dfe98e04f7078cdcc26b8056031ead3abea", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e603090961d950b1130950c179361b530c7ad10a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e603090961d950b1130950c179361b530c7ad10a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=e603090961d950b1130950c179361b530c7ad10a", "patch": "@@ -37,22 +37,24 @@ use crate::{\n // ```\n pub(crate) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let assign_expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n-    let name_expr = if assign_expr.op_kind()? == ast::BinOp::Assignment {\n-        assign_expr.lhs()?\n-    } else {\n+\n+    let op_kind = assign_expr.op_kind()?;\n+    if op_kind != ast::BinOp::Assignment {\n+        cov_mark::hit!(test_cant_pull_non_assignments);\n         return None;\n-    };\n+    }\n \n-    let (old_stmt, new_stmt) = if let Some(if_expr) = ctx.find_node_at_offset::<ast::IfExpr>() {\n-        (\n-            ast::Expr::cast(if_expr.syntax().to_owned())?,\n-            exprify_if(&if_expr, &ctx.sema, &name_expr)?.indent(if_expr.indent_level()),\n-        )\n+    let name_expr = assign_expr.lhs()?;\n+\n+    let old_stmt: ast::Expr;\n+    let new_stmt: ast::Expr;\n+\n+    if let Some(if_expr) = ctx.find_node_at_offset::<ast::IfExpr>() {\n+        new_stmt = exprify_if(&if_expr, &ctx.sema, &name_expr)?.indent(if_expr.indent_level());\n+        old_stmt = if_expr.into();\n     } else if let Some(match_expr) = ctx.find_node_at_offset::<ast::MatchExpr>() {\n-        (\n-            ast::Expr::cast(match_expr.syntax().to_owned())?,\n-            exprify_match(&match_expr, &ctx.sema, &name_expr)?,\n-        )\n+        new_stmt = exprify_match(&match_expr, &ctx.sema, &name_expr)?;\n+        old_stmt = match_expr.into()\n     } else {\n         return None;\n     };\n@@ -99,9 +101,7 @@ fn exprify_if(\n ) -> Option<ast::Expr> {\n     let then_branch = exprify_block(&statement.then_branch()?, sema, name)?;\n     let else_branch = match statement.else_branch()? {\n-        ast::ElseBranch::Block(ref block) => {\n-            ast::ElseBranch::Block(exprify_block(block, sema, name)?)\n-        }\n+        ast::ElseBranch::Block(block) => ast::ElseBranch::Block(exprify_block(&block, sema, name)?),\n         ast::ElseBranch::IfExpr(expr) => {\n             cov_mark::hit!(test_pull_assignment_up_chained_if);\n             ast::ElseBranch::IfExpr(ast::IfExpr::cast(\n@@ -436,6 +436,26 @@ fn foo() {\n         3\n     };\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_cant_pull_non_assignments() {\n+        cov_mark::check!(test_cant_pull_non_assignments);\n+        check_assist_not_applicable(\n+            pull_assignment_up,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+    let b = &mut a;\n+\n+    if true {\n+        $0*b + 2;\n+    } else {\n+        *b + 3;\n+    }\n+}\n \"#,\n         )\n     }"}]}