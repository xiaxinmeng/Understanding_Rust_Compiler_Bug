{"sha": "0c22cd79066f59500eae430abb26b9738d105b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjJjZDc5MDY2ZjU5NTAwZWFlNDMwYWJiMjZiOTczOGQxMDViOTk=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-16T21:53:37Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-16T23:55:52Z"}, "message": "Fix error message for E0256 in certain cases.\n\nPreviously, it said \"import `Foo` conflicts with existing submodule\" even\nwhen it was a type alias, enum, or trait. The message now says the conflict\nis with \"type in this module\" in the case of the first two, and \"trait in\nthis module\" for the last one.\n\nFixes #24081.", "tree": {"sha": "d36f7bffa55f5c99edd5980051bbae6d28bdc09a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36f7bffa55f5c99edd5980051bbae6d28bdc09a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c22cd79066f59500eae430abb26b9738d105b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c22cd79066f59500eae430abb26b9738d105b99", "html_url": "https://github.com/rust-lang/rust/commit/0c22cd79066f59500eae430abb26b9738d105b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c22cd79066f59500eae430abb26b9738d105b99/comments", "author": null, "committer": null, "parents": [{"sha": "f6d53af85f600731bbf100147be69b18391ae784", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d53af85f600731bbf100147be69b18391ae784", "html_url": "https://github.com/rust-lang/rust/commit/f6d53af85f600731bbf100147be69b18391ae784"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "2edbf6441ba71173b7940f194088301a88dd52e5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c22cd79066f59500eae430abb26b9738d105b99/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c22cd79066f59500eae430abb26b9738d105b99/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0c22cd79066f59500eae430abb26b9738d105b99", "patch": "@@ -12,6 +12,7 @@ use self::ImportDirectiveSubclass::*;\n \n use DefModifiers;\n use Module;\n+use ModuleKind;\n use Namespace::{self, TypeNS, ValueNS};\n use NameBindings;\n use NamespaceResult::{BoundResult, UnboundResult, UnknownResult};\n@@ -980,10 +981,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         match import_resolution.type_target {\n             Some(ref target) if target.shadowable != Shadowable::Always => {\n                 if let Some(ref ty) = *name_bindings.type_def.borrow() {\n-                    let (what, note) = if ty.module_def.is_some() {\n-                        (\"existing submodule\", \"note conflicting module here\")\n-                    } else {\n-                        (\"type in this module\", \"note conflicting type here\")\n+                    let (what, note) = match ty.module_def {\n+                        Some(ref module)\n+                            if module.kind.get() == ModuleKind::NormalModuleKind =>\n+                                (\"existing submodule\", \"note conflicting module here\"),\n+                        Some(ref module)\n+                            if module.kind.get() == ModuleKind::TraitModuleKind =>\n+                                (\"trait in this module\", \"note conflicting trait here\"),\n+                        _    => (\"type in this module\", \"note conflicting type here\"),\n                     };\n                     span_err!(self.resolver.session, import_span, E0256,\n                               \"import `{}` conflicts with {}\","}, {"sha": "11376cec14ee32d2442dcd952399d0d141cf0d13", "filename": "src/test/compile-fail/issue-24081.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c22cd79066f59500eae430abb26b9738d105b99/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c22cd79066f59500eae430abb26b9738d105b99/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs?ref=0c22cd79066f59500eae430abb26b9738d105b99", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Add; //~ ERROR import `Add` conflicts with type in this module\n+use std::ops::Sub; //~ ERROR import `Sub` conflicts with type in this module\n+use std::ops::Mul; //~ ERROR import `Mul` conflicts with type in this module\n+use std::ops::Div; //~ ERROR import `Div` conflicts with existing submodule\n+use std::ops::Rem; //~ ERROR import `Rem` conflicts with trait in this module\n+\n+type Add = bool;\n+struct Sub { x: f32 }\n+enum Mul { A, B }\n+mod Div { }\n+trait Rem { }\n+\n+fn main() {}"}]}