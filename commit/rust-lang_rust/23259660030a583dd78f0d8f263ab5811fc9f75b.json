{"sha": "23259660030a583dd78f0d8f263ab5811fc9f75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMjU5NjYwMDMwYTU4M2RkNzhmMGQ4ZjI2M2FiNTgxMWZjOWY3NWI=", "commit": {"author": {"name": "Vikram Pal", "email": "vikrampal659@gmail.com", "date": "2020-12-19T08:50:33Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-06-16T01:43:20Z"}, "message": "Implement printing of stack traces on LLVM segfaults and aborts", "tree": {"sha": "9ef2a1edc1ac49fb217641c3989b8f59233b86a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef2a1edc1ac49fb217641c3989b8f59233b86a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23259660030a583dd78f0d8f263ab5811fc9f75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23259660030a583dd78f0d8f263ab5811fc9f75b", "html_url": "https://github.com/rust-lang/rust/commit/23259660030a583dd78f0d8f263ab5811fc9f75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23259660030a583dd78f0d8f263ab5811fc9f75b/comments", "author": {"login": "in42", "id": 12832671, "node_id": "MDQ6VXNlcjEyODMyNjcx", "avatar_url": "https://avatars.githubusercontent.com/u/12832671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/in42", "html_url": "https://github.com/in42", "followers_url": "https://api.github.com/users/in42/followers", "following_url": "https://api.github.com/users/in42/following{/other_user}", "gists_url": "https://api.github.com/users/in42/gists{/gist_id}", "starred_url": "https://api.github.com/users/in42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/in42/subscriptions", "organizations_url": "https://api.github.com/users/in42/orgs", "repos_url": "https://api.github.com/users/in42/repos", "events_url": "https://api.github.com/users/in42/events{/privacy}", "received_events_url": "https://api.github.com/users/in42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138fd56cf9598b4bf016634c768dca128a83a5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/138fd56cf9598b4bf016634c768dca128a83a5d7", "html_url": "https://github.com/rust-lang/rust/commit/138fd56cf9598b4bf016634c768dca128a83a5d7"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "f2206746e2663211b3c32f51c129c50b98f7a895", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/23259660030a583dd78f0d8f263ab5811fc9f75b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23259660030a583dd78f0d8f263ab5811fc9f75b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=23259660030a583dd78f0d8f263ab5811fc9f75b", "patch": "@@ -1312,10 +1312,55 @@ pub fn init_env_logger(env: &str) {\n     tracing::subscriber::set_global_default(subscriber).unwrap();\n }\n \n+extern \"C\" {\n+    // Only available in glibc\n+    fn backtrace_symbols_fd(buffer: *const *mut libc::c_void, size: libc::c_int, fd: libc::c_int);\n+}\n+\n+#[cfg(unix)]\n+fn print_stack_trace(_: libc::c_int) {\n+    unsafe {\n+        static mut STACK_TRACE: [*mut libc::c_void; 256] = [std::ptr::null_mut(); 256];\n+        let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), 256);\n+        if depth == 0 {\n+            return;\n+        }\n+        backtrace_symbols_fd(STACK_TRACE.as_ptr(), depth, 2);\n+    }\n+}\n+\n+#[cfg(unix)]\n+// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n+// process, print a stack trace and then exit.\n+fn print_stack_trace_on_error_signal() {\n+    unsafe {\n+        const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;\n+        let mut alt_stack: libc::stack_t = std::mem::zeroed();\n+        alt_stack.ss_sp =\n+            std::alloc::alloc(std::alloc::Layout::from_size_align_unchecked(ALT_STACK_SIZE, 1))\n+                as *mut libc::c_void;\n+        alt_stack.ss_size = ALT_STACK_SIZE;\n+        libc::sigaltstack(&mut alt_stack, std::ptr::null_mut());\n+\n+        let mut sa: libc::sigaction = std::mem::zeroed();\n+        sa.sa_sigaction =\n+            print_stack_trace as fn(libc::c_int) as *mut libc::c_void as libc::sighandler_t;\n+        sa.sa_flags = libc::SA_NODEFER | libc::SA_RESETHAND | libc::SA_ONSTACK;\n+        libc::sigemptyset(&mut sa.sa_mask);\n+        libc::sigaction(libc::SIGSEGV, &sa, std::ptr::null_mut());\n+    }\n+}\n+\n+#[cfg(windows)]\n+// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n+// process, print a stack trace and then exit.\n+fn print_stack_trace_on_error_signal() {}\n+\n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n     init_rustc_env_logger();\n+    print_stack_trace_on_error_signal();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n     let exit_code = catch_with_exit_code(|| {"}]}