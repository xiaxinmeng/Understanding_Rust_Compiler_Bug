{"sha": "e049a7003b686002d5c091ec0465d07e5c5ff7a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDlhNzAwM2I2ODYwMDJkNWMwOTFlYzA0NjVkMDdlNWM1ZmY3YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-23T11:36:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-23T11:36:32Z"}, "message": "auto merge of #13693 : thestinger/rust/mem, r=alexcrichton\n\nThis exposes volatile versions of the memset/memmove/memcpy intrinsics.\r\n\r\nThe volatile parameter must be constant, so this can't simply be a\r\nparameter to our intrinsics.", "tree": {"sha": "ff99ce2927b9ebf1ca13d25c2fabd08dc9f1f99d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff99ce2927b9ebf1ca13d25c2fabd08dc9f1f99d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e049a7003b686002d5c091ec0465d07e5c5ff7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e049a7003b686002d5c091ec0465d07e5c5ff7a6", "html_url": "https://github.com/rust-lang/rust/commit/e049a7003b686002d5c091ec0465d07e5c5ff7a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e049a7003b686002d5c091ec0465d07e5c5ff7a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89", "html_url": "https://github.com/rust-lang/rust/commit/1ce0b98c7bad8c01e008ccbc790607f4bb26ec89"}, {"sha": "b2724727d52904e104ccb3ce14d9dc60ffee1dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2724727d52904e104ccb3ce14d9dc60ffee1dec", "html_url": "https://github.com/rust-lang/rust/commit/b2724727d52904e104ccb3ce14d9dc60ffee1dec"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "86fde5d821a00b4050c2900a4db5da43e0842eb6", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=e049a7003b686002d5c091ec0465d07e5c5ff7a6", "patch": "@@ -129,7 +129,7 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         RetVoid(bcx);\n     }\n \n-    fn copy_intrinsic(bcx: &Block, allow_overlap: bool, tp_ty: ty::t) {\n+    fn copy_intrinsic(bcx: &Block, allow_overlap: bool, volatile: bool, tp_ty: ty::t) {\n         let ccx = bcx.ccx();\n         let lltp_ty = type_of::type_of(ccx, tp_ty);\n         let align = C_i32(ccx, machine::llalign_of_min(ccx, lltp_ty) as i32);\n@@ -154,13 +154,12 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         let dst_ptr = PointerCast(bcx, get_param(decl, first_real_arg), Type::i8p(ccx));\n         let src_ptr = PointerCast(bcx, get_param(decl, first_real_arg + 1), Type::i8p(ccx));\n         let count = get_param(decl, first_real_arg + 2);\n-        let volatile = C_i1(ccx, false);\n         let llfn = ccx.get_intrinsic(&name);\n-        Call(bcx, llfn, [dst_ptr, src_ptr, Mul(bcx, size, count), align, volatile], []);\n+        Call(bcx, llfn, [dst_ptr, src_ptr, Mul(bcx, size, count), align, C_i1(ccx, volatile)], []);\n         RetVoid(bcx);\n     }\n \n-    fn memset_intrinsic(bcx: &Block, tp_ty: ty::t) {\n+    fn memset_intrinsic(bcx: &Block, volatile: bool, tp_ty: ty::t) {\n         let ccx = bcx.ccx();\n         let lltp_ty = type_of::type_of(ccx, tp_ty);\n         let align = C_i32(ccx, machine::llalign_of_min(ccx, lltp_ty) as i32);\n@@ -176,9 +175,8 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n         let dst_ptr = PointerCast(bcx, get_param(decl, first_real_arg), Type::i8p(ccx));\n         let val = get_param(decl, first_real_arg + 1);\n         let count = get_param(decl, first_real_arg + 2);\n-        let volatile = C_i1(ccx, false);\n         let llfn = ccx.get_intrinsic(&name);\n-        Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, volatile], []);\n+        Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, C_i1(ccx, volatile)], []);\n         RetVoid(bcx);\n     }\n \n@@ -466,11 +464,15 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n             let lladdr = InBoundsGEP(bcx, ptr, [offset]);\n             Ret(bcx, lladdr);\n         }\n-        \"copy_nonoverlapping_memory\" => {\n-            copy_intrinsic(bcx, false, *substs.tys.get(0))\n-        }\n-        \"copy_memory\" => copy_intrinsic(bcx, true, *substs.tys.get(0)),\n-        \"set_memory\" => memset_intrinsic(bcx, *substs.tys.get(0)),\n+        \"copy_nonoverlapping_memory\" => copy_intrinsic(bcx, false, false, *substs.tys.get(0)),\n+        \"copy_memory\" => copy_intrinsic(bcx, true, false, *substs.tys.get(0)),\n+        \"set_memory\" => memset_intrinsic(bcx, false, *substs.tys.get(0)),\n+\n+        \"volatile_copy_nonoverlapping_memory\" =>\n+            copy_intrinsic(bcx, false, true, *substs.tys.get(0)),\n+        \"volatile_copy_memory\" => copy_intrinsic(bcx, true, true, *substs.tys.get(0)),\n+        \"volatile_set_memory\" => memset_intrinsic(bcx, true, *substs.tys.get(0)),\n+\n         \"ctlz8\" => count_zeros_intrinsic(bcx, \"llvm.ctlz.i8\"),\n         \"ctlz16\" => count_zeros_intrinsic(bcx, \"llvm.ctlz.i16\"),\n         \"ctlz32\" => count_zeros_intrinsic(bcx, \"llvm.ctlz.i32\"),"}, {"sha": "9a261689b3779815fe0632f8a939319f898b0cdc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e049a7003b686002d5c091ec0465d07e5c5ff7a6", "patch": "@@ -4217,7 +4217,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                    mutbl: ast::MutImmutable\n                }))\n             }\n-            \"copy_nonoverlapping_memory\" => {\n+            \"copy_memory\" | \"copy_nonoverlapping_memory\" |\n+            \"volatile_copy_memory\" | \"volatile_copy_nonoverlapping_memory\" => {\n               (1,\n                vec!(\n                   ty::mk_ptr(tcx, ty::mt {\n@@ -4232,22 +4233,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                ),\n                ty::mk_nil())\n             }\n-            \"copy_memory\" => {\n-              (1,\n-               vec!(\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutMutable\n-                  }),\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutImmutable\n-                  }),\n-                  ty::mk_uint()\n-               ),\n-               ty::mk_nil())\n-            }\n-            \"set_memory\" => {\n+            \"set_memory\" | \"volatile_set_memory\" => {\n               (1,\n                vec!(\n                   ty::mk_ptr(tcx, ty::mt {"}, {"sha": "09cdad943057b8fe8d300f835cc32f557e390da9", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049a7003b686002d5c091ec0465d07e5c5ff7a6/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=e049a7003b686002d5c091ec0465d07e5c5ff7a6", "patch": "@@ -263,10 +263,6 @@ extern \"rust-intrinsic\" {\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n \n-    pub fn volatile_load<T>(src: *T) -> T;\n-    pub fn volatile_store<T>(dst: *mut T, val: T);\n-\n-\n     /// The size of a type in bytes.\n     ///\n     /// This is the exact number of bytes in memory taken up by a\n@@ -340,6 +336,33 @@ extern \"rust-intrinsic\" {\n     /// `min_align_of::<T>()`\n     pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n \n+    /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n+    /// a size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`\n+    ///\n+    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    #[cfg(not(stage0))]\n+    pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *T, count: uint);\n+    /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n+    /// a size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`\n+    ///\n+    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    #[cfg(not(stage0))]\n+    pub fn volatile_copy_memory<T>(dst: *mut T, src: *T, count: uint);\n+    /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n+    /// size of `count` * `size_of::<T>()` and an alignment of\n+    /// `min_align_of::<T>()`.\n+    ///\n+    /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n+    #[cfg(not(stage0))]\n+    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: uint);\n+\n+    /// Perform a volatile load from the `src` pointer.\n+    pub fn volatile_load<T>(src: *T) -> T;\n+    /// Perform a volatile store to the `dst` pointer.\n+    pub fn volatile_store<T>(dst: *mut T, val: T);\n+\n     pub fn sqrtf32(x: f32) -> f32;\n     pub fn sqrtf64(x: f64) -> f64;\n "}]}