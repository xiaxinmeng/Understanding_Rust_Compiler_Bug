{"sha": "38fee9526a313104e3f869bf07c24b0c1d203d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZmVlOTUyNmEzMTMxMDRlM2Y4NjliZjA3YzI0YjBjMWQyMDNkMTE=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-27T19:31:32Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-27T19:48:35Z"}, "message": "rustc: When landing pads are off, avoid skipping cleanup code.\n\nThis forces various things to be created (e.g. drop glue), and also\nhappens to be necessary for GC liveness to recognize cleanups as\nroots.", "tree": {"sha": "35480f240732ec9acd5b39607cf2ad4c474aa894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35480f240732ec9acd5b39607cf2ad4c474aa894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38fee9526a313104e3f869bf07c24b0c1d203d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38fee9526a313104e3f869bf07c24b0c1d203d11", "html_url": "https://github.com/rust-lang/rust/commit/38fee9526a313104e3f869bf07c24b0c1d203d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38fee9526a313104e3f869bf07c24b0c1d203d11/comments", "author": null, "committer": null, "parents": [{"sha": "5593add3a8da4bb69ecbece5eaef91f01ca748f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5593add3a8da4bb69ecbece5eaef91f01ca748f7", "html_url": "https://github.com/rust-lang/rust/commit/5593add3a8da4bb69ecbece5eaef91f01ca748f7"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "ecfde4d01c7c69077a5e1338a382759416937890", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38fee9526a313104e3f869bf07c24b0c1d203d11/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fee9526a313104e3f869bf07c24b0c1d203d11/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=38fee9526a313104e3f869bf07c24b0c1d203d11", "patch": "@@ -1233,8 +1233,12 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: uint,\n fn call_tydesc_glue_full(++bcx: block, v: ValueRef, tydesc: ValueRef,\n                          field: uint, static_ti: Option<@tydesc_info>) {\n     let _icx = bcx.insn_ctxt(\"call_tydesc_glue_full\");\n-        if bcx.unreachable { return; }\n     let ccx = bcx.ccx();\n+    // NB: Don't short-circuit even if this block is unreachable because\n+    // GC-based cleanup needs to the see that the roots are live.\n+    let no_lpads =\n+        ccx.sess.opts.debugging_opts & session::no_landing_pads != 0;\n+    if bcx.unreachable && !no_lpads { return; }\n \n     let static_glue_fn = match static_ti {\n       None => None,\n@@ -4510,7 +4514,11 @@ fn trans_block_cleanups_(bcx: block,\n                          /* cleanup_cx: block, */ is_lpad: bool) ->\n    block {\n     let _icx = bcx.insn_ctxt(\"trans_block_cleanups\");\n-    if bcx.unreachable { return bcx; }\n+    // NB: Don't short-circuit even if this block is unreachable because\n+    // GC-based cleanup needs to the see that the roots are live.\n+    let no_lpads =\n+        bcx.ccx().sess.opts.debugging_opts & session::no_landing_pads != 0;\n+    if bcx.unreachable && !no_lpads { return bcx; }\n     let mut bcx = bcx;\n     do vec::riter(cleanups) |cu| {\n             match cu {"}]}