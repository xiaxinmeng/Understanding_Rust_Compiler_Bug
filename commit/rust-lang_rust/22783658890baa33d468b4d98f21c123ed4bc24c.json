{"sha": "22783658890baa33d468b4d98f21c123ed4bc24c", "node_id": "C_kwDOAAsO6NoAKDIyNzgzNjU4ODkwYmFhMzNkNDY4YjRkOThmMjFjMTIzZWQ0YmMyNGM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-06-09T12:48:45Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-06-09T12:48:45Z"}, "message": "recompute opaque type origin", "tree": {"sha": "d4b7f8ae9f6b3d5df92d47c9ae7d146d7ee4be27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b7f8ae9f6b3d5df92d47c9ae7d146d7ee4be27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22783658890baa33d468b4d98f21c123ed4bc24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22783658890baa33d468b4d98f21c123ed4bc24c", "html_url": "https://github.com/rust-lang/rust/commit/22783658890baa33d468b4d98f21c123ed4bc24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22783658890baa33d468b4d98f21c123ed4bc24c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb", "html_url": "https://github.com/rust-lang/rust/commit/dcc9028c0ce30c3b37f3ca9faf637a9f3ccd5bcb"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "525b4c8777042ac075e1664bd8fecec35573911a", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=22783658890baa33d468b4d98f21c123ed4bc24c", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'tcx>,\n-        opaque_ty_decls: FxIndexMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n+        opaque_ty_decls: FxIndexMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n     ) -> FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n         let mut result: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>> = FxIndexMap::default();\n \n@@ -72,7 +72,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .collect();\n         debug!(?member_constraints);\n \n-        for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n+        for (opaque_type_key, concrete_type) in opaque_ty_decls {\n             let substs = opaque_type_key.substs;\n             debug!(?concrete_type, ?substs);\n \n@@ -143,7 +143,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let ty = infcx.infer_opaque_definition_from_instantiation(\n                 opaque_type_key,\n                 universal_concrete_type,\n-                origin,\n             );\n             // Sometimes two opaque types are the same only after we remap the generic parameters\n             // back to the opaque type definition. E.g. we may have `OpaqueType<X, Y>` mapped to `(X, Y)`\n@@ -215,7 +214,6 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n-        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx>;\n }\n \n@@ -248,7 +246,6 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n-        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         if let Some(e) = self.tainted_by_errors() {\n             return self.tcx.ty_error(e);\n@@ -258,18 +255,16 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false)\n             .ty;\n \n-        if let Err(guar) = check_opaque_type_parameter_valid(\n-            self.tcx,\n-            opaque_type_key,\n-            origin,\n-            instantiated_ty.span,\n-        ) {\n+        if let Err(guar) =\n+            check_opaque_type_parameter_valid(self.tcx, opaque_type_key, instantiated_ty.span)\n+        {\n             return self.tcx.ty_error(guar);\n         }\n \n         // Only check this for TAIT. RPIT already supports `tests/ui/impl-trait/nested-return-type2.rs`\n         // on stable and we'd break that.\n-        let OpaqueTyOrigin::TyAlias { .. } = origin else {\n+        let opaque_ty_hir = self.tcx.hir().expect_item(opaque_type_key.def_id);\n+        let OpaqueTyOrigin::TyAlias { .. } = opaque_ty_hir.expect_opaque_ty().origin else {\n             return definition_ty;\n         };\n         let def_id = opaque_type_key.def_id;\n@@ -347,10 +342,10 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n fn check_opaque_type_parameter_valid(\n     tcx: TyCtxt<'_>,\n     opaque_type_key: OpaqueTypeKey<'_>,\n-    origin: OpaqueTyOrigin,\n     span: Span,\n ) -> Result<(), ErrorGuaranteed> {\n-    match origin {\n+    let opaque_ty_hir = tcx.hir().expect_item(opaque_type_key.def_id);\n+    match opaque_ty_hir.expect_opaque_ty().origin {\n         // No need to check return position impl trait (RPIT)\n         // because for type and const parameters they are correct\n         // by construction: we convert"}, {"sha": "63a2a24fd43db015cbc9aea60d409a2f53f8e509", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=22783658890baa33d468b4d98f21c123ed4bc24c", "patch": "@@ -7,7 +7,6 @@ use std::{fmt, iter, mem};\n \n use either::Either;\n \n-use hir::OpaqueTyOrigin;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::ErrorGuaranteed;\n@@ -241,7 +240,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                 hidden_type.ty = infcx.tcx.ty_error(reported);\n             }\n \n-            (opaque_type_key, (hidden_type, decl.origin))\n+            (opaque_type_key, hidden_type)\n         })\n         .collect();\n \n@@ -878,8 +877,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n pub(crate) struct MirTypeckResults<'tcx> {\n     pub(crate) constraints: MirTypeckRegionConstraints<'tcx>,\n     pub(crate) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n-    pub(crate) opaque_type_values:\n-        FxIndexMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n+    pub(crate) opaque_type_values: FxIndexMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n }\n \n /// A collection of region constraints that must be satisfied for the"}, {"sha": "44efd334a16df16d0a73c59c70943a08c9ac529f", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=22783658890baa33d468b4d98f21c123ed4bc24c", "patch": "@@ -33,9 +33,6 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// There can be multiple, but they are all `lub`ed together at the end\n     /// to obtain the canonical hidden type.\n     pub hidden_type: OpaqueHiddenType<'tcx>,\n-\n-    /// The origin of the opaque type.\n-    pub origin: hir::OpaqueTyOrigin,\n }\n \n impl<'tcx> InferCtxt<'tcx> {\n@@ -108,7 +105,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n-                let origin = match self.defining_use_anchor {\n+                match self.defining_use_anchor {\n                     DefiningAnchor::Bind(_) => {\n                         // Check that this is `impl Trait` type is\n                         // declared by `parent_def_id` -- i.e., one whose\n@@ -144,9 +141,11 @@ impl<'tcx> InferCtxt<'tcx> {\n                         //     let x = || foo(); // returns the Opaque assoc with `foo`\n                         // }\n                         // ```\n-                        self.opaque_type_origin(def_id)?\n+                        if self.opaque_type_origin(def_id).is_none() {\n+                            return None;\n+                        }\n                     }\n-                    DefiningAnchor::Bubble => self.opaque_type_origin_unchecked(def_id),\n+                    DefiningAnchor::Bubble => {}\n                     DefiningAnchor::Error => return None,\n                 };\n                 if let ty::Alias(ty::Opaque, ty::AliasTy { def_id: b_def_id, .. }) = *b.kind() {\n@@ -170,7 +169,6 @@ impl<'tcx> InferCtxt<'tcx> {\n                     cause.clone(),\n                     param_env,\n                     b,\n-                    origin,\n                     a_is_expected,\n                 ))\n             }\n@@ -524,7 +522,6 @@ impl<'tcx> InferCtxt<'tcx> {\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         hidden_ty: Ty<'tcx>,\n-        origin: hir::OpaqueTyOrigin,\n         a_is_expected: bool,\n     ) -> InferResult<'tcx, ()> {\n         // Ideally, we'd get the span where *this specific `ty` came\n@@ -544,11 +541,11 @@ impl<'tcx> InferCtxt<'tcx> {\n                 ty::PredicateKind::Ambiguous,\n             )]\n         } else {\n-            let prev = self.inner.borrow_mut().opaque_types().register(\n-                opaque_type_key,\n-                OpaqueHiddenType { ty: hidden_ty, span },\n-                origin,\n-            );\n+            let prev = self\n+                .inner\n+                .borrow_mut()\n+                .opaque_types()\n+                .register(opaque_type_key, OpaqueHiddenType { ty: hidden_ty, span });\n             if let Some(prev) = prev {\n                 self.at(&cause, param_env)\n                     .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n@@ -579,15 +576,11 @@ impl<'tcx> InferCtxt<'tcx> {\n         hidden_ty: Ty<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         assert!(self.next_trait_solver());\n-        let origin = self\n-            .opaque_type_origin(opaque_type_key.def_id)\n-            .expect(\"should be called for defining usages only\");\n         self.register_hidden_type(\n             opaque_type_key,\n             ObligationCause::dummy(),\n             param_env,\n             hidden_ty,\n-            origin,\n             true,\n         )\n     }"}, {"sha": "a737761ba228276cd0361aaa983d1fdd307af5b7", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22783658890baa33d468b4d98f21c123ed4bc24c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=22783658890baa33d468b4d98f21c123ed4bc24c", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::undo_log::UndoLogs;\n-use rustc_hir::OpaqueTyOrigin;\n use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty};\n use rustc_span::DUMMY_SP;\n \n@@ -60,14 +59,13 @@ impl<'a, 'tcx> OpaqueTypeTable<'a, 'tcx> {\n         &mut self,\n         key: OpaqueTypeKey<'tcx>,\n         hidden_type: OpaqueHiddenType<'tcx>,\n-        origin: OpaqueTyOrigin,\n     ) -> Option<Ty<'tcx>> {\n         if let Some(decl) = self.storage.opaque_types.get_mut(&key) {\n             let prev = std::mem::replace(&mut decl.hidden_type, hidden_type);\n             self.undo_log.push(UndoLog::OpaqueTypes(key, Some(prev)));\n             return Some(prev.ty);\n         }\n-        let decl = OpaqueTypeDecl { hidden_type, origin };\n+        let decl = OpaqueTypeDecl { hidden_type };\n         self.storage.opaque_types.insert(key, decl);\n         self.undo_log.push(UndoLog::OpaqueTypes(key, None));\n         None"}]}