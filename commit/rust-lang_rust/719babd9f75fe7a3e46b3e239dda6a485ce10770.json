{"sha": "719babd9f75fe7a3e46b3e239dda6a485ce10770", "node_id": "C_kwDOAAsO6NoAKDcxOWJhYmQ5Zjc1ZmU3YTNlNDZiM2UyMzlkZGE2YTQ4NWNlMTA3NzA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-26T13:53:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-26T13:53:30Z"}, "message": "Merge #11564\n\n11564: internal: Cleanup highlighting tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a27335cbfe8399e0882924a013e88c3d93acc658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a27335cbfe8399e0882924a013e88c3d93acc658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/719babd9f75fe7a3e46b3e239dda6a485ce10770", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGjDaCRBK7hj4Ov3rIwAAi9wIAF5nJ44y9fTvdkILstKQHJRx\n1+bab3Wp7+bpoqL2RItOA/MLzleO3JqguibV0NUG4/dwFEn85JYNxAsP/5w1dv3d\nY7ggOpNtlHlGsO46xt2b0KATwL+OpI84A82r1XmXzkexGwid07cVjLlsHXVe+i0a\njEBdIDQbvtZq9v1PhX3WJAyIAzm1QZtSISv1/rIvYKyVcD5FMfN9pWFEv+kjgctY\nxGpx5pPZa0Za7fG6nh1wHAvciaeS1VrnnEqo1WoAHEWwHke6FB8Wsj2F4BNSjko+\n5zcZA2Oh7hqUX2962U2PmMedQAp/r0RhGZIc4XSOOnxrny2qRR6nBzkduUMi0po=\n=rNup\n-----END PGP SIGNATURE-----\n", "payload": "tree a27335cbfe8399e0882924a013e88c3d93acc658\nparent ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f\nparent 36603e0478bace705b9a3b59aebb8a6918a1700b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645883610 +0000\ncommitter GitHub <noreply@github.com> 1645883610 +0000\n\nMerge #11564\n\n11564: internal: Cleanup highlighting tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/719babd9f75fe7a3e46b3e239dda6a485ce10770", "html_url": "https://github.com/rust-lang/rust/commit/719babd9f75fe7a3e46b3e239dda6a485ce10770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/719babd9f75fe7a3e46b3e239dda6a485ce10770/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f", "html_url": "https://github.com/rust-lang/rust/commit/ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f"}, {"sha": "36603e0478bace705b9a3b59aebb8a6918a1700b", "url": "https://api.github.com/repos/rust-lang/rust/commits/36603e0478bace705b9a3b59aebb8a6918a1700b", "html_url": "https://github.com/rust-lang/rust/commit/36603e0478bace705b9a3b59aebb8a6918a1700b"}], "stats": {"total": 848, "additions": 441, "deletions": 407}, "files": [{"sha": "b035e786d352a78a7ff856ae39921f7a31df5012", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -58,5 +58,4 @@\n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-        </code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "9fe2b50cde79f93c68c1efde93d525423fdb7d1f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_attributes.html", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_attributes.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -0,0 +1,57 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">dead_code</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"tool_module attribute library\">rustfmt</span><span class=\"operator attribute\">::</span><span class=\"tool_module attribute library\">skip</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"comment\">// This is a normal comment</span>\n+<span class=\"comment documentation\">/// This is a doc comment</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// This is another normal comment</span>\n+<span class=\"comment documentation\">/// This is another doc comment</span>\n+<span class=\"comment\">// This is another normal comment</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"comment\">// The reason for these being here is to test AttrIds</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span><span class=\"semicolon\">;</span></code></pre>\n\\ No newline at end of file"}, {"sha": "3e20b2f3512df792db686698f7d9bf4415cad461", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -46,5 +46,4 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> <span class=\"operator\">=</span> <span class=\"enum_variant default_library library\">Some</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">nums</span> <span class=\"operator\">=</span> <span class=\"module default_library library\">iter</span><span class=\"operator\">::</span><span class=\"function default_library library\">repeat</span><span class=\"parenthesis\">(</span><span class=\"variable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming default_library library\">unwrap</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-<span class=\"brace\">}</span>\n-</code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "22bdfffa3ef439f01f6af200dbcafb02112ed233", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "renamed", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -44,9 +44,6 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"tool_module attribute library\">rustfmt</span><span class=\"operator attribute\">::</span><span class=\"tool_module attribute library\">skip</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n@@ -58,11 +55,8 @@\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"macro library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"brace\">{</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">x</span> <span class=\"keyword\">pub</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">y</span> <span class=\"keyword\">pub</span>\n-    <span class=\"brace\">}</span> <span class=\"struct declaration\">Foo</span> <span class=\"keyword\">struct</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"type_param\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n@@ -71,7 +65,7 @@\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"self_type\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n+        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -81,26 +75,17 @@\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span>\n+        <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment documentation\">/// This is a doc comment</span>\n-<span class=\"comment\">// This is a normal comment</span>\n-<span class=\"comment documentation\">/// This is a doc comment</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment\">// This is another normal comment</span>\n-<span class=\"comment documentation\">/// This is another doc comment</span>\n-<span class=\"comment\">// This is another normal comment</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment\">// The reason for these being here is to test AttrIds</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n@@ -146,68 +131,19 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n-        <span class=\"numeric_literal\">100</span>\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">dont_color_me_braces</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"numeric_literal\">0</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-        <span class=\"punctuation\">$</span>expr\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro</span> <span class=\"macro declaration\">with_args</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"punctuation\">$</span>i\n-<span class=\"brace\">}</span>\n-\n-<span class=\"keyword\">macro</span> <span class=\"macro declaration\">without_args</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n-        <span class=\"punctuation\">$</span>i\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">{</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parenthesis\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"brace\">}</span>\n-\n-    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"brace\">{</span>\n-        <span class=\"comment\">// Do nothing</span>\n-    <span class=\"brace\">}</span>\n-\n-    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">x</span> <span class=\"arithmetic mutable\">+=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable reference\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration reference\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable reference\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable reference\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"variable declaration\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable reference\">z</span><span class=\"comma\">,</span> <span class=\"variable mutable reference\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n     <span class=\"variable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>", "previous_filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html"}, {"sha": "023e791f8bb842148335e0910f59cd4be39572d9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -45,10 +45,17 @@\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span>\n-        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-                <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-            <span class=\"brace\">}</span>\n-        <span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+        <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>\n+    <span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">foo</span><span class=\"parenthesis\">(</span><span class=\"keyword\">$0</span><span class=\"brace\">{</span>\n+        <span class=\"numeric_literal\">92</span>\n+    <span class=\"brace\">}</span><span class=\"keyword\">$0</span><span class=\"parenthesis\">)</span>\n+<span class=\"brace\">}</span><span class=\"string_literal\">\"</span>\n     <span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "c3f71d443f6713d4e68cf26ef7f2e8daa8067aa3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_macros.html", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -0,0 +1,88 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"macro library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n+    <span class=\"brace\">{</span>\n+        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">x</span> <span class=\"keyword\">pub</span>\n+        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">y</span> <span class=\"keyword\">pub</span>\n+    <span class=\"brace\">}</span> <span class=\"struct declaration\">Foo</span> <span class=\"keyword\">struct</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+        <span class=\"numeric_literal\">100</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">dont_color_me_braces</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"numeric_literal\">0</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>expr\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">with_args</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"punctuation\">$</span>i\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">without_args</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>i\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "e0287f11858beeecaced66bdf87fa481e8062be1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_rainbow.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_rainbow.html?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "previous_filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html"}, {"sha": "2e9ad144f19a420634b1c1334905cfeda1209958", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=ddb5a53fd7100c973d78d8cb2da2ee77b34fd82f", "patch": "@@ -1,53 +0,0 @@\n-\n-<style>\n-body                { margin: 0; }\n-pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n-\n-.lifetime           { color: #DFAF8F; font-style: italic; }\n-.label              { color: #DFAF8F; font-style: italic; }\n-.comment            { color: #7F9F7F; }\n-.documentation      { color: #629755; }\n-.intra_doc_link     { font-style: italic; }\n-.injected           { opacity: 0.65 ; }\n-.struct, .enum      { color: #7CB8BB; }\n-.enum_variant       { color: #BDE0F3; }\n-.string_literal     { color: #CC9393; }\n-.field              { color: #94BFF3; }\n-.function           { color: #93E0E3; }\n-.function.unsafe    { color: #BC8383; }\n-.trait.unsafe       { color: #BC8383; }\n-.operator.unsafe    { color: #BC8383; }\n-.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n-.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n-.parameter          { color: #94BFF3; }\n-.text               { color: #DCDCCC; }\n-.type               { color: #7CB8BB; }\n-.builtin_type       { color: #8CD0D3; }\n-.type_param         { color: #DFAF8F; }\n-.attribute          { color: #94BFF3; }\n-.numeric_literal    { color: #BFEBBF; }\n-.bool_literal       { color: #BFE6EB; }\n-.macro              { color: #94BFF3; }\n-.derive             { color: #94BFF3; font-style: italic; }\n-.module             { color: #AFD8AF; }\n-.value_param        { color: #DCDCCC; }\n-.variable           { color: #DCDCCC; }\n-.format_specifier   { color: #CC696B; }\n-.mutable            { text-decoration: underline; }\n-.escape_sequence    { color: #94BFF3; }\n-.keyword            { color: #F0DFAF; font-weight: bold; }\n-.control            { font-style: italic; }\n-.reference          { font-style: italic; font-weight: bold; }\n-\n-.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n-</style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">f</span><span class=\"parenthesis\">(</span><span class=\"value_param declaration reference\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"function\">f</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"function\">foo</span><span class=\"parenthesis\">(</span><span class=\"keyword\">$0</span><span class=\"brace\">{</span>\n-        <span class=\"numeric_literal\">92</span>\n-    <span class=\"brace\">}</span><span class=\"keyword\">$0</span><span class=\"parenthesis\">)</span>\n-<span class=\"brace\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-<span class=\"brace\">}</span>\n-    </code></pre>\n\\ No newline at end of file"}, {"sha": "ec50fde3562cb87042b7e6efb448e7845be4f108", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 274, "deletions": 273, "changes": 547, "blob_url": "https://github.com/rust-lang/rust/blob/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719babd9f75fe7a3e46b3e239dda6a485ce10770/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=719babd9f75fe7a3e46b3e239dda6a485ce10770", "patch": "@@ -6,19 +6,98 @@ use test_utils::{bench, bench_fixture, skip_slow_tests, AssertLinear};\n \n use crate::{fixture, FileRange, HlTag, TextRange};\n \n+#[test]\n+fn attributes() {\n+    check_highlighting(\n+        r#\"\n+//- proc_macros: identity\n+//- minicore: derive, copy\n+#[allow(dead_code)]\n+#[rustfmt::skip]\n+#[proc_macros::identity]\n+#[derive(Copy)]\n+/// This is a doc comment\n+// This is a normal comment\n+/// This is a doc comment\n+#[derive(Copy)]\n+// This is another normal comment\n+/// This is another doc comment\n+// This is another normal comment\n+#[derive(Copy)]\n+// The reason for these being here is to test AttrIds\n+struct Foo;\n+\"#,\n+        expect_file![\"./test_data/highlight_attributes.html\"],\n+        false,\n+    );\n+}\n+#[test]\n+fn macros() {\n+    check_highlighting(\n+        r#\"\n+//- proc_macros: mirror\n+proc_macros::mirror! {\n+    {\n+        ,i32 :x pub\n+        ,i32 :y pub\n+    } Foo struct\n+}\n+macro_rules! def_fn {\n+    ($($tt:tt)*) => {$($tt)*}\n+}\n+\n+def_fn! {\n+    fn bar() -> u32 {\n+        100\n+    }\n+}\n+\n+macro_rules! dont_color_me_braces {\n+    () => {0}\n+}\n+\n+macro_rules! noop {\n+    ($expr:expr) => {\n+        $expr\n+    }\n+}\n+\n+macro_rules! keyword_frag {\n+    ($type:ty) => ($type)\n+}\n+\n+macro with_args($i:ident) {\n+    $i\n+}\n+\n+macro without_args {\n+    ($i:ident) => {\n+        $i\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Hello, {}!\", 92);\n+    dont_color_me_braces!();\n+    noop!(noop!(1));\n+}\n+\"#,\n+        expect_file![\"./test_data/highlight_macros.html\"],\n+        false,\n+    );\n+}\n+\n+/// If what you want to test feels like a specific entity consider making a new test instead,\n+/// this test fixture here in fact should shrink instead of grow ideally.\n #[test]\n fn test_highlighting() {\n     check_highlighting(\n         r#\"\n-//- proc_macros: identity, mirror\n //- minicore: derive, copy\n //- /main.rs crate:main deps:foo\n use inner::{self as inner_mod};\n mod inner {}\n \n-#[allow()]\n-#[rustfmt::skip]\n-#[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]\n     pub trait FnOnce<Args> {}\n@@ -30,11 +109,8 @@ pub mod ops {\n     pub trait Fn<Args>: FnMut<Args> {}\n }\n \n-proc_macros::mirror! {\n-    {\n-        ,i32 :x pub\n-        ,i32 :y pub\n-    } Foo struct\n+struct Foo {\n+    x: u32,\n }\n \n trait Bar where Self: {\n@@ -64,15 +140,6 @@ impl Foo {\n use self::FooCopy::{self as BarCopy};\n \n #[derive(Copy)]\n-/// This is a doc comment\n-// This is a normal comment\n-/// This is a doc comment\n-#[derive(Copy)]\n-// This is another normal comment\n-/// This is another doc comment\n-// This is another normal comment\n-#[derive(Copy)]\n-// The reason for these being here is to test AttrIds\n struct FooCopy {\n     x: u32,\n }\n@@ -118,57 +185,8 @@ fn foo() {\n     let bar = foobar();\n }\n \n-macro_rules! def_fn {\n-    ($($tt:tt)*) => {$($tt)*}\n-}\n-\n-def_fn! {\n-    fn bar() -> u32 {\n-        100\n-    }\n-}\n-\n-macro_rules! dont_color_me_braces {\n-    () => {0}\n-}\n-\n-macro_rules! noop {\n-    ($expr:expr) => {\n-        $expr\n-    }\n-}\n-\n-macro_rules! keyword_frag {\n-    ($type:ty) => ($type)\n-}\n-\n-macro with_args($i:ident) {\n-    $i\n-}\n-\n-macro without_args {\n-    ($i:ident) => {\n-        $i\n-    }\n-}\n-\n // comment\n fn main() {\n-    println!(\"Hello, {}!\", 92);\n-    dont_color_me_braces!();\n-\n-    let mut vec = Vec::new();\n-    if true {\n-        let x = 92;\n-        vec.push(Foo { x, y: 1 });\n-    }\n-\n-    for e in vec {\n-        // Do nothing\n-    }\n-\n-    noop!(noop!(1));\n-\n     let mut x = 42;\n     x += 1;\n     let y = &mut x;\n@@ -288,161 +306,12 @@ macro_rules! die {\n         panic!();\n     };\n }\n-\"#\n-        .trim(),\n-        expect_file![\"./test_data/highlighting.html\"],\n-        false,\n-    );\n-}\n-\n-#[test]\n-fn test_rainbow_highlighting() {\n-    check_highlighting(\n-        r#\"\n-fn main() {\n-    let hello = \"hello\";\n-    let x = hello.to_string();\n-    let y = hello.to_string();\n-\n-    let x = \"other color please!\";\n-    let y = x.to_string();\n-}\n-\n-fn bar() {\n-    let mut hello = \"hello\";\n-}\n-\"#\n-        .trim(),\n-        expect_file![\"./test_data/rainbow_highlighting.html\"],\n-        true,\n-    );\n-}\n-\n-#[test]\n-fn benchmark_syntax_highlighting_long_struct() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let fixture = bench_fixture::big_struct();\n-    let (analysis, file_id) = fixture::file(&fixture);\n-\n-    let hash = {\n-        let _pt = bench(\"syntax highlighting long struct\");\n-        analysis\n-            .highlight(file_id)\n-            .unwrap()\n-            .iter()\n-            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n-            .count()\n-    };\n-    assert_eq!(hash, 2001);\n-}\n-\n-#[test]\n-fn syntax_highlighting_not_quadratic() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let mut al = AssertLinear::default();\n-    while al.next_round() {\n-        for i in 6..=10 {\n-            let n = 1 << i;\n-\n-            let fixture = bench_fixture::big_struct_n(n);\n-            let (analysis, file_id) = fixture::file(&fixture);\n-\n-            let time = Instant::now();\n-\n-            let hash = analysis\n-                .highlight(file_id)\n-                .unwrap()\n-                .iter()\n-                .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n-                .count();\n-            assert!(hash > n as usize);\n-\n-            let elapsed = time.elapsed();\n-            al.sample(n as f64, elapsed.as_millis() as f64);\n-        }\n-    }\n-}\n-\n-#[test]\n-fn benchmark_syntax_highlighting_parser() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let fixture = bench_fixture::glorious_old_parser();\n-    let (analysis, file_id) = fixture::file(&fixture);\n-\n-    let hash = {\n-        let _pt = bench(\"syntax highlighting parser\");\n-        analysis\n-            .highlight(file_id)\n-            .unwrap()\n-            .iter()\n-            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n-            .count()\n-    };\n-    assert_eq!(hash, 1616);\n-}\n-\n-#[test]\n-fn test_ranges() {\n-    let (analysis, file_id) = fixture::file(\n-        r#\"\n-#[derive(Clone, Debug)]\n-struct Foo {\n-    pub x: i32,\n-    pub y: i32,\n-}\n \"#,\n-    );\n-\n-    // The \"x\"\n-    let highlights = &analysis\n-        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n-        .unwrap();\n-\n-    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n-}\n-\n-#[test]\n-fn test_flattening() {\n-    check_highlighting(\n-        r##\"\n-fn fixture(ra_fixture: &str) {}\n-\n-fn main() {\n-    fixture(r#\"\n-        trait Foo {\n-            fn foo() {\n-                println!(\"2 + 2 = {}\", 4);\n-            }\n-        }\"#\n-    );\n-}\"##\n-        .trim(),\n-        expect_file![\"./test_data/highlight_injection.html\"],\n+        expect_file![\"./test_data/highlight_general.html\"],\n         false,\n     );\n }\n \n-#[test]\n-fn ranges_sorted() {\n-    let (analysis, file_id) = fixture::file(\n-        r#\"\n-#[foo(bar = \"bar\")]\n-macro_rules! test {}\n-}\"#\n-        .trim(),\n-    );\n-    let _ = analysis.highlight(file_id).unwrap();\n-}\n-\n #[test]\n fn test_string_highlighting() {\n     // The format string detection is based on macro-expansion,\n@@ -555,8 +424,7 @@ fn main() {\n     toho!(\"{}fmt\", 0);\n     asm!(\"mov eax, {0}\");\n     format_args!(concat!(\"{}\"), \"{}\");\n-}\"#\n-        .trim(),\n+}\"#,\n         expect_file![\"./test_data/highlight_strings.html\"],\n         false,\n     );\n@@ -630,8 +498,7 @@ fn main() {\n         packed.a.calls_autoref();\n     }\n }\n-\"#\n-        .trim(),\n+\"#,\n         expect_file![\"./test_data/highlight_unsafe.html\"],\n         false,\n     );\n@@ -781,8 +648,7 @@ pub fn block_comments2() {}\n //! ```\n //! fn test() {}\n //! ```\n-\"#\n-        .trim(),\n+\"#,\n         expect_file![\"./test_data/highlight_doctest.html\"],\n         false,\n     );\n@@ -792,14 +658,14 @@ pub fn block_comments2() {}\n fn test_extern_crate() {\n     check_highlighting(\n         r#\"\n-        //- /main.rs crate:main deps:std,alloc\n-        extern crate std;\n-        extern crate alloc as abc;\n-        //- /std/lib.rs crate:std\n-        pub struct S;\n-        //- /alloc/lib.rs crate:alloc\n-        pub struct A\n-        \"#,\n+//- /main.rs crate:main deps:std,alloc\n+extern crate std;\n+extern crate alloc as abc;\n+//- /std/lib.rs crate:std\n+pub struct S;\n+//- /alloc/lib.rs crate:alloc\n+pub struct A\n+\"#,\n         expect_file![\"./test_data/highlight_extern_crate.html\"],\n         false,\n     );\n@@ -809,41 +675,41 @@ fn test_extern_crate() {\n fn test_crate_root() {\n     check_highlighting(\n         r#\"\n-        //- minicore: iterators\n-        //- /main.rs crate:main deps:foo\n-        extern crate foo;\n-        use core::iter;\n+//- minicore: iterators\n+//- /main.rs crate:main deps:foo\n+extern crate foo;\n+use core::iter;\n \n-        pub const NINETY_TWO: u8 = 92;\n+pub const NINETY_TWO: u8 = 92;\n \n-        use foo as foooo;\n+use foo as foooo;\n \n-        pub(crate) fn main() {\n-            let baz = iter::repeat(92);\n-        }\n+pub(crate) fn main() {\n+    let baz = iter::repeat(92);\n+}\n \n-        mod bar {\n-            pub(in super) const FORTY_TWO: u8 = 42;\n+mod bar {\n+    pub(in super) const FORTY_TWO: u8 = 42;\n \n-            mod baz {\n-                use super::super::NINETY_TWO;\n-                use crate::foooo::Point;\n+    mod baz {\n+        use super::super::NINETY_TWO;\n+        use crate::foooo::Point;\n \n-                pub(in super::super) const TWENTY_NINE: u8 = 29;\n-            }\n-        }\n-        //- /foo.rs crate:foo\n-        struct Point {\n-            x: u8,\n-            y: u8,\n-        }\n+        pub(in super::super) const TWENTY_NINE: u8 = 29;\n+    }\n+}\n+//- /foo.rs crate:foo\n+struct Point {\n+    x: u8,\n+    y: u8,\n+}\n \n-        mod inner {\n-            pub(super) fn swap(p: crate::Point) -> crate::Point {\n-                crate::Point { x: p.y, y: p.x }\n-            }\n-        }\n-        \"#,\n+mod inner {\n+    pub(super) fn swap(p: crate::Point) -> crate::Point {\n+        crate::Point { x: p.y, y: p.x }\n+    }\n+}\n+\"#,\n         expect_file![\"./test_data/highlight_crate_root.html\"],\n         false,\n     );\n@@ -853,14 +719,14 @@ fn test_crate_root() {\n fn test_default_library() {\n     check_highlighting(\n         r#\"\n-        //- minicore: option, iterators\n-        use core::iter;\n+//- minicore: option, iterators\n+use core::iter;\n \n-        fn main() {\n-            let foo = Some(92);\n-            let nums = iter::repeat(foo.unwrap());\n-        }\n-        \"#,\n+fn main() {\n+    let foo = Some(92);\n+    let nums = iter::repeat(foo.unwrap());\n+}\n+\"#,\n         expect_file![\"./test_data/highlight_default_library.html\"],\n         false,\n     );\n@@ -888,7 +754,7 @@ impl t for foo {\n     pub fn is_static() {}\n     pub fn is_not_static(&self) {}\n }\n-        \"#,\n+\"#,\n         expect_file![\"./test_data/highlight_assoc_functions.html\"],\n         false,\n     )\n@@ -898,26 +764,161 @@ impl t for foo {\n fn test_injection() {\n     check_highlighting(\n         r##\"\n-fn f(ra_fixture: &str) {}\n+fn fixture(ra_fixture: &str) {}\n+\n fn main() {\n-    f(r\"\n+    fixture(r#\"\n+trait Foo {\n+    fn foo() {\n+        println!(\"2 + 2 = {}\", 4);\n+    }\n+}\"#\n+    );\n+    fixture(r\"\n fn foo() {\n     foo(\\$0{\n         92\n     }\\$0)\n-}\");\n+}\"\n+    );\n }\n-    \"##,\n-        expect_file![\"./test_data/injection.html\"],\n+\"##,\n+        expect_file![\"./test_data/highlight_injection.html\"],\n         false,\n     );\n }\n \n+#[test]\n+fn test_rainbow_highlighting() {\n+    check_highlighting(\n+        r#\"\n+fn main() {\n+    let hello = \"hello\";\n+    let x = hello.to_string();\n+    let y = hello.to_string();\n+\n+    let x = \"other color please!\";\n+    let y = x.to_string();\n+}\n+\n+fn bar() {\n+    let mut hello = \"hello\";\n+}\n+\"#,\n+        expect_file![\"./test_data/highlight_rainbow.html\"],\n+        true,\n+    );\n+}\n+\n+#[test]\n+fn test_ranges() {\n+    let (analysis, file_id) = fixture::file(\n+        r#\"\n+#[derive(Clone, Debug)]\n+struct Foo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\"#,\n+    );\n+\n+    // The \"x\"\n+    let highlights = &analysis\n+        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n+        .unwrap();\n+\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n+}\n+\n+#[test]\n+fn ranges_sorted() {\n+    let (analysis, file_id) = fixture::file(\n+        r#\"\n+#[foo(bar = \"bar\")]\n+macro_rules! test {}\n+}\"#\n+        .trim(),\n+    );\n+    let _ = analysis.highlight(file_id).unwrap();\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n-    let (analysis, file_id) = fixture::file(ra_fixture);\n+    let (analysis, file_id) = fixture::file(ra_fixture.trim());\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n     expect.assert_eq(actual_html)\n }\n+\n+#[test]\n+fn benchmark_syntax_highlighting_long_struct() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let fixture = bench_fixture::big_struct();\n+    let (analysis, file_id) = fixture::file(&fixture);\n+\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting long struct\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+            .count()\n+    };\n+    assert_eq!(hash, 2001);\n+}\n+\n+#[test]\n+fn syntax_highlighting_not_quadratic() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let mut al = AssertLinear::default();\n+    while al.next_round() {\n+        for i in 6..=10 {\n+            let n = 1 << i;\n+\n+            let fixture = bench_fixture::big_struct_n(n);\n+            let (analysis, file_id) = fixture::file(&fixture);\n+\n+            let time = Instant::now();\n+\n+            let hash = analysis\n+                .highlight(file_id)\n+                .unwrap()\n+                .iter()\n+                .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+                .count();\n+            assert!(hash > n as usize);\n+\n+            let elapsed = time.elapsed();\n+            al.sample(n as f64, elapsed.as_millis() as f64);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn benchmark_syntax_highlighting_parser() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let fixture = bench_fixture::glorious_old_parser();\n+    let (analysis, file_id) = fixture::file(&fixture);\n+\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting parser\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n+            .count()\n+    };\n+    assert_eq!(hash, 1616);\n+}"}]}