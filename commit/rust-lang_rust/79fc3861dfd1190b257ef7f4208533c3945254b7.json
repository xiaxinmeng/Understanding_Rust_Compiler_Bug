{"sha": "79fc3861dfd1190b257ef7f4208533c3945254b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmMzODYxZGZkMTE5MGIyNTdlZjdmNDIwODUzM2MzOTQ1MjU0Yjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:56Z"}, "message": "Rollup merge of #74162 - lcnr:ToPredicate-no-ref, r=varkor\n\ntake self by value in ToPredicate", "tree": {"sha": "8ddad2b3c566486f44ea01f6305e1beeb11140f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ddad2b3c566486f44ea01f6305e1beeb11140f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79fc3861dfd1190b257ef7f4208533c3945254b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVuxCRBK7hj4Ov3rIwAAdHIIAD/Ad1IvPgf8sHZEzHMhhWXF\nEJaptAE+Lm2L3+RvklXmvXOIxF4br9DJTCTYdA5lGA9lRKhBCRWo7duAixJY8bPP\nzDj0/wYjRhyrxHwsoZ4QUt7gv9ntd++JkWQcB2ueXmG2YL6nGe3xs3r3Ngyxh87n\n5UOZjL53dGj7cXvBox3JgySPQjfrZz4T417NNRkIBLsvTNck7xt/pLrGVqGxl0oQ\nmxCxbK0TbREMnDB/DdpI6/sw7wpE1CbFWPws1Bex+uyvBeNWAvw5HFJge46JnL2v\nWGKFNyaYCJ4g98G9qu79JvSdn/6LeVEVsqYBcRbeYso7vrsVF+BeWwNeUIEJV4g=\n=jzVq\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ddad2b3c566486f44ea01f6305e1beeb11140f7\nparent 8376fcd5ce17c9187a08f5bfef56ea36d2a54cf4\nparent 1f982305e4c2f3dc62de90d3039f7c43e5247c11\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448816 -0700\ncommitter GitHub <noreply@github.com> 1594448816 -0700\n\nRollup merge of #74162 - lcnr:ToPredicate-no-ref, r=varkor\n\ntake self by value in ToPredicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79fc3861dfd1190b257ef7f4208533c3945254b7", "html_url": "https://github.com/rust-lang/rust/commit/79fc3861dfd1190b257ef7f4208533c3945254b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79fc3861dfd1190b257ef7f4208533c3945254b7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8376fcd5ce17c9187a08f5bfef56ea36d2a54cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8376fcd5ce17c9187a08f5bfef56ea36d2a54cf4", "html_url": "https://github.com/rust-lang/rust/commit/8376fcd5ce17c9187a08f5bfef56ea36d2a54cf4"}, {"sha": "1f982305e4c2f3dc62de90d3039f7c43e5247c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f982305e4c2f3dc62de90d3039f7c43e5247c11", "html_url": "https://github.com/rust-lang/rust/commit/1f982305e4c2f3dc62de90d3039f7c43e5247c11"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "bec1200d7aa0fd592adad67610bfdf325bc29f93", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79fc3861dfd1190b257ef7f4208533c3945254b7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fc3861dfd1190b257ef7f4208533c3945254b7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=79fc3861dfd1190b257ef7f4208533c3945254b7", "patch": "@@ -1337,18 +1337,18 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n }\n \n pub trait ToPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n     #[inline(always)]\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        tcx.mk_predicate(*self)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        tcx.mk_predicate(self)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(\n             ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value }),\n             self.constness,\n@@ -1358,7 +1358,7 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(\n             ty::Binder::dummy(ty::TraitPredicate { trait_ref: *self.value }),\n             self.constness,\n@@ -1368,34 +1368,34 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n             .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&PolyTraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n             .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::RegionOutlives(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::RegionOutlives(self).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::TypeOutlives(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::TypeOutlives(self).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Projection(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::Projection(self).to_predicate(tcx)\n     }\n }\n "}]}