{"sha": "3a4e99115d1f64243eb12b5c937b4ad90b4ad014", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNGU5OTExNWQxZjY0MjQzZWIxMmI1YzkzN2I0YWQ5MGI0YWQwMTQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-21T21:45:00Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-21T22:46:52Z"}, "message": "Do not revisit recursively imported modules", "tree": {"sha": "bdf11825289b8dffe0ddddd626ccbd0f41febb5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf11825289b8dffe0ddddd626ccbd0f41febb5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4e99115d1f64243eb12b5c937b4ad90b4ad014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4e99115d1f64243eb12b5c937b4ad90b4ad014", "html_url": "https://github.com/rust-lang/rust/commit/3a4e99115d1f64243eb12b5c937b4ad90b4ad014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4e99115d1f64243eb12b5c937b4ad90b4ad014/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "858ad554374a8b1ad67692558a0878391abfdd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/858ad554374a8b1ad67692558a0878391abfdd86", "html_url": "https://github.com/rust-lang/rust/commit/858ad554374a8b1ad67692558a0878391abfdd86"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "b4362a5c41a46675f83aceb1f363525e9a534998", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3a4e99115d1f64243eb12b5c937b4ad90b4ad014/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4e99115d1f64243eb12b5c937b4ad90b4ad014/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=3a4e99115d1f64243eb12b5c937b4ad90b4ad014", "patch": "@@ -18,7 +18,8 @@ use crate::{\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n     let _p = profile::span(\"find_path\");\n-    find_path_inner(db, item, from, MAX_PATH_LEN, None)\n+    let mut visited_modules = FxHashSet::default();\n+    find_path_inner(db, item, from, MAX_PATH_LEN, None, &mut visited_modules)\n }\n \n pub fn find_path_prefixed(\n@@ -28,7 +29,8 @@ pub fn find_path_prefixed(\n     prefix_kind: PrefixKind,\n ) -> Option<ModPath> {\n     let _p = profile::span(\"find_path_prefixed\");\n-    find_path_inner(db, item, from, MAX_PATH_LEN, Some(prefix_kind))\n+    let mut visited_modules = FxHashSet::default();\n+    find_path_inner(db, item, from, MAX_PATH_LEN, Some(prefix_kind), &mut visited_modules)\n }\n \n const MAX_PATH_LEN: usize = 15;\n@@ -97,6 +99,7 @@ fn find_path_inner(\n     from: ModuleId,\n     max_len: usize,\n     mut prefixed: Option<PrefixKind>,\n+    visited_modules: &mut FxHashSet<ModuleId>,\n ) -> Option<ModPath> {\n     if max_len == 0 {\n         return None;\n@@ -176,15 +179,17 @@ fn find_path_inner(\n     if item.krate(db) == Some(from.krate) {\n         // Item was defined in the same crate that wants to import it. It cannot be found in any\n         // dependency in this case.\n-\n-        let local_imports = find_local_import_locations(db, item, from);\n-        for (module_id, name) in local_imports {\n+        for (module_id, name) in find_local_import_locations(db, item, from) {\n+            if !visited_modules.insert(module_id) {\n+                continue;\n+            }\n             if let Some(mut path) = find_path_inner(\n                 db,\n                 ItemInNs::Types(ModuleDefId::ModuleId(module_id)),\n                 from,\n                 best_path_len - 1,\n                 prefixed,\n+                visited_modules,\n             ) {\n                 path.push_segment(name);\n \n@@ -213,6 +218,7 @@ fn find_path_inner(\n                     from,\n                     best_path_len - 1,\n                     prefixed,\n+                    visited_modules,\n                 )?;\n                 cov_mark::hit!(partially_imported);\n                 path.push_segment(info.path.segments.last().unwrap().clone());\n@@ -391,8 +397,15 @@ mod tests {\n             .take_types()\n             .unwrap();\n \n-        let found_path =\n-            find_path_inner(&db, ItemInNs::Types(resolved), module, MAX_PATH_LEN, prefix_kind);\n+        let mut visited_modules = FxHashSet::default();\n+        let found_path = find_path_inner(\n+            &db,\n+            ItemInNs::Types(resolved),\n+            module,\n+            MAX_PATH_LEN,\n+            prefix_kind,\n+            &mut visited_modules,\n+        );\n         assert_eq!(found_path, Some(mod_path), \"{:?}\", prefix_kind);\n     }\n \n@@ -878,4 +891,31 @@ mod tests {\n             \"self::module::CompleteMe\",\n         )\n     }\n+\n+    #[test]\n+    fn recursive_pub_mod_reexport() {\n+        check_found_path(\n+            r#\"\n+fn main() {\n+    let _ = 22_i32.as_name$0();\n+}\n+\n+pub mod name {\n+    pub trait AsName {\n+        fn as_name(&self) -> String;\n+    }\n+    impl AsName for i32 {\n+        fn as_name(&self) -> String {\n+            format!(\"Name: {}\", self)\n+        }\n+    }\n+    pub use crate::name;\n+}\n+\"#,\n+            \"name::AsName\",\n+            \"name::AsName\",\n+            \"crate::name::AsName\",\n+            \"self::name::AsName\",\n+        );\n+    }\n }"}]}