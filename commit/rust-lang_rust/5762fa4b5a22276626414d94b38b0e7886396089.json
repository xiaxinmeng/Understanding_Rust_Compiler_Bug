{"sha": "5762fa4b5a22276626414d94b38b0e7886396089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjJmYTRiNWEyMjI3NjYyNjQxNGQ5NGIzOGIwZTc4ODYzOTYwODk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-19T11:49:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:31Z"}, "message": "Allow macros to be resolved with ambiguous idents too", "tree": {"sha": "d9594d35dd780e76f7f01f3054462e17f34d6caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9594d35dd780e76f7f01f3054462e17f34d6caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5762fa4b5a22276626414d94b38b0e7886396089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5762fa4b5a22276626414d94b38b0e7886396089", "html_url": "https://github.com/rust-lang/rust/commit/5762fa4b5a22276626414d94b38b0e7886396089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5762fa4b5a22276626414d94b38b0e7886396089/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869dd91d443b10e11d20d93beb9c06cb0fd7ec42", "url": "https://api.github.com/repos/rust-lang/rust/commits/869dd91d443b10e11d20d93beb9c06cb0fd7ec42", "html_url": "https://github.com/rust-lang/rust/commit/869dd91d443b10e11d20d93beb9c06cb0fd7ec42"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "b42696b0985126f8c17a8afff30f5f5bc4c9a3d6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5762fa4b5a22276626414d94b38b0e7886396089/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5762fa4b5a22276626414d94b38b0e7886396089/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5762fa4b5a22276626414d94b38b0e7886396089", "patch": "@@ -904,6 +904,32 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         }\n                     };\n \n+                    let macro_resolve = || {\n+                            use syntax::ext::base::MacroKind;\n+                            use syntax::ext::hygiene::Mark;\n+                            let segment = ast::PathSegment {\n+                                identifier: ast::Ident::from_str(path_str),\n+                                span: DUMMY_SP,\n+                                parameters: None,\n+                            };\n+                            let path = ast::Path {\n+                                span: DUMMY_SP,\n+                                segments: vec![segment],\n+                            };\n+\n+                            let mut resolver = cx.resolver.borrow_mut();\n+                            let mark = Mark::root();\n+                            let res = resolver\n+                                .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n+                            if let Ok(def) = res {\n+                                Some(def)\n+                            } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n+                                Some(*def)\n+                            } else {\n+                                None\n+                            }\n+                    };\n+\n                     match kind {\n                         PathKind::Value => {\n                             if let Ok(path) = resolve(true) {\n@@ -974,34 +1000,18 @@ impl Clean<Attributes> for [ast::Attribute] {\n                                 path.def\n                             } else if let Ok(path) = resolve(true) {\n                                 path.def\n+                            } else if let Some(def) = macro_resolve() {\n+                                def\n                             } else {\n                                 // this could just be a normal link\n                                 continue;\n                             }\n                         }\n                         PathKind::Macro => {\n-                            use syntax::ext::base::MacroKind;\n-                            use syntax::ext::hygiene::Mark;\n-                            let segment = ast::PathSegment {\n-                                identifier: ast::Ident::from_str(path_str),\n-                                span: DUMMY_SP,\n-                                parameters: None,\n-                            };\n-                            let path = ast::Path {\n-                                span: DUMMY_SP,\n-                                segments: vec![segment],\n-                            };\n-\n-                            let mut resolver = cx.resolver.borrow_mut();\n-                            let mark = Mark::root();\n-                            let res = resolver\n-                                .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n-                            if let Ok(def) = res {\n+                            if let Some(def) = macro_resolve() {\n                                 def\n-                            } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n-                                *def\n                             } else {\n-                                continue;\n+                                continue\n                             }\n                         }\n                     }"}]}