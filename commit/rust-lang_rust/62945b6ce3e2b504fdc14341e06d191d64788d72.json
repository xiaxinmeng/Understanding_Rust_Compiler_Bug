{"sha": "62945b6ce3e2b504fdc14341e06d191d64788d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTQ1YjZjZTNlMmI1MDRmZGMxNDM0MWUwNmQxOTFkNjQ3ODhkNzI=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-23T01:26:57Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-04-12T14:31:02Z"}, "message": "collections: Add slice::binary_search_by_key\n\nThis method adds to the family of `_by_key` methods, and is the\ncounterpart of `slice::sort_by_key`. It was mentioned on #30423 but\nwas not implemented at that time.\n\nRefs #30423", "tree": {"sha": "74fdf757e1772ef77e9f3ae02f9cb6ec9f675255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74fdf757e1772ef77e9f3ae02f9cb6ec9f675255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62945b6ce3e2b504fdc14341e06d191d64788d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62945b6ce3e2b504fdc14341e06d191d64788d72", "html_url": "https://github.com/rust-lang/rust/commit/62945b6ce3e2b504fdc14341e06d191d64788d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62945b6ce3e2b504fdc14341e06d191d64788d72/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed32d83fcd1337e962a58fd04fae6b8503e3283", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed32d83fcd1337e962a58fd04fae6b8503e3283", "html_url": "https://github.com/rust-lang/rust/commit/bed32d83fcd1337e962a58fd04fae6b8503e3283"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "88b3517fe710f19e3b957dc261441b55383346d7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=62945b6ce3e2b504fdc14341e06d191d64788d72", "patch": "@@ -27,6 +27,7 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![cfg_attr(test, allow(deprecated))] // rand\n+#![cfg_attr(not(test), feature(slice_binary_search_by_key))] // impl [T]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(alloc)]"}, {"sha": "07db33c6be85b8443a49c451b56a763d5542641a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=62945b6ce3e2b504fdc14341e06d191d64788d72", "patch": "@@ -741,6 +741,44 @@ impl<T> [T] {\n         core_slice::SliceExt::binary_search_by(self, f)\n     }\n \n+    /// Binary search a sorted slice with a key extraction function.\n+    ///\n+    /// Assumes that the slice is sorted by the key, for instance with\n+    /// `sort_by_key` using the same key extraction function.\n+    ///\n+    /// If a matching value is found then returns `Ok`, containing the\n+    /// index for the matched element; if no match is found then `Err`\n+    /// is returned, containing the index where a matching element could\n+    /// be inserted while maintaining sorted order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Looks up a series of four elements in a slice of pairs sorted by\n+    /// their second elements. The first is found, with a uniquely\n+    /// determined position; the second and third are not found; the\n+    /// fourth could match any position in `[1,4]`.\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_binary_search_by_key)]\n+    /// let s = [(0, 0), (2, 1), (4, 1), (5, 1), (3, 1),\n+    ///          (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n+    ///          (1, 21), (2, 34), (4, 55)];\n+    ///\n+    /// assert_eq!(s.binary_search_by_key(&13, |&(a,b)| b),  Ok(9));\n+    /// assert_eq!(s.binary_search_by_key(&4, |&(a,b)| b),   Err(7));\n+    /// assert_eq!(s.binary_search_by_key(&100, |&(a,b)| b), Err(13));\n+    /// let r = s.binary_search_by_key(&1, |&(a,b)| b);\n+    /// assert!(match r { Ok(1...4) => true, _ => false, });\n+    /// ```\n+    #[unstable(feature = \"slice_binary_search_by_key\", reason = \"recently added\", issue = \"0\")]\n+    #[inline]\n+    pub fn binary_search_by_key<B, F>(&self, b: &B, f: F) -> Result<usize, usize>\n+        where F: FnMut(&T) -> B,\n+              B: Ord\n+    {\n+        core_slice::SliceExt::binary_search_by_key(self, b, f)\n+    }\n+\n     /// Sorts the slice, in place.\n     ///\n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`."}, {"sha": "68f5a725b74bce838238cb096091a8dec3464a17", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62945b6ce3e2b504fdc14341e06d191d64788d72/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=62945b6ce3e2b504fdc14341e06d191d64788d72", "patch": "@@ -157,6 +157,11 @@ pub trait SliceExt {\n     fn clone_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Clone;\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     fn copy_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Copy;\n+\n+    #[unstable(feature = \"slice_binary_search_by_key\", reason = \"recently added\", issue = \"0\")]\n+    fn binary_search_by_key<B, F>(&self, b: &B, f: F) -> Result<usize, usize>\n+        where F: FnMut(&Self::Item) -> B,\n+              B: Ord;\n }\n \n // Use macros to be generic over const/mut\n@@ -507,6 +512,14 @@ impl<T> SliceExt for [T] {\n                 src.as_ptr(), self.as_mut_ptr(), self.len());\n         }\n     }\n+\n+    #[inline]\n+    fn binary_search_by_key<B, F>(&self, b: &B, mut f: F) -> Result<usize, usize>\n+        where F: FnMut(&Self::Item) -> B,\n+              B: Ord\n+    {\n+        self.binary_search_by(|k| f(k).cmp(b))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}