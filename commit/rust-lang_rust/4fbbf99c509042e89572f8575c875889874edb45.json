{"sha": "4fbbf99c509042e89572f8575c875889874edb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYmJmOTljNTA5MDQyZTg5NTcyZjg1NzVjODc1ODg5ODc0ZWRiNDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-07T05:20:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "Be more accurate when mentioning type of found match arms", "tree": {"sha": "5a4dade869f0ef4c6c58cab6fa82484e07cb2db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4dade869f0ef4c6c58cab6fa82484e07cb2db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fbbf99c509042e89572f8575c875889874edb45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbbf99c509042e89572f8575c875889874edb45", "html_url": "https://github.com/rust-lang/rust/commit/4fbbf99c509042e89572f8575c875889874edb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fbbf99c509042e89572f8575c875889874edb45/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799b13ada59d0663e98a02744d21d2c3b08501ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/799b13ada59d0663e98a02744d21d2c3b08501ce", "html_url": "https://github.com/rust-lang/rust/commit/799b13ada59d0663e98a02744d21d2c3b08501ce"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "2ffcd2c4ace7bc48d1533463bbf9cdee16239f0d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4fbbf99c509042e89572f8575c875889874edb45/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbbf99c509042e89572f8575c875889874edb45/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4fbbf99c509042e89572f8575c875889874edb45", "patch": "@@ -662,19 +662,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n                 _ => {\n+                    // `last_ty` can be `!`, `expected` will have better info when present.\n+                    let t = self.resolve_vars_if_possible(&match exp_found {\n+                        Some(ty::error::ExpectedFound { expected, .. }) => expected,\n+                        _ => last_ty,\n+                    });\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n                     if prior_arms.len() <= 4 {\n                         for sp in prior_arms {\n-                            err.span_label(*sp, format!(\n-                                \"this is found to be of type `{}`\",\n-                                self.resolve_vars_if_possible(&last_ty),\n-                            ));\n+                            err.span_label( *sp, format!(\"this is found to be of type `{}`\", t));\n                         }\n                     } else if let Some(sp) = prior_arms.last() {\n-                        err.span_label(*sp, format!(\n-                            \"this and all prior arms are found to be of type `{}`\", last_ty,\n-                        ));\n+                        err.span_label(\n+                            *sp,\n+                            format!(\"this and all prior arms are found to be of type `{}`\", t),\n+                        );\n                     }\n                 }\n             },\n@@ -1143,27 +1146,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n-                        let (def_id, ret_ty) = match exp_found.found.sty {\n-                            ty::FnDef(def, _) => {\n-                                (Some(def), Some(self.tcx.fn_sig(def).output()))\n-                            }\n-                            _ => (None, None),\n-                        };\n-\n-                        let exp_is_struct = match exp_found.expected.sty {\n-                            ty::Adt(def, _) => def.is_struct(),\n-                            _ => false,\n-                        };\n-\n-                        if let (Some(def_id), Some(ret_ty)) = (def_id, ret_ty) {\n-                            if exp_is_struct && &exp_found.expected == ret_ty.skip_binder() {\n-                                let message = format!(\n-                                    \"did you mean `{}(/* fields */)`?\",\n-                                    self.tcx.def_path_str(def_id)\n-                                );\n-                                diag.span_label(span, message);\n-                            }\n-                        }\n                         self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                     }\n "}, {"sha": "8f54023305e839b76a847f21d5f28a1923fe024e", "filename": "src/test/ui/match/match-arm-resolving-to-never.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fbbf99c509042e89572f8575c875889874edb45/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fbbf99c509042e89572f8575c875889874edb45/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs?ref=4fbbf99c509042e89572f8575c875889874edb45", "patch": "@@ -0,0 +1,19 @@\n+enum E {\n+    A,\n+    B,\n+    C,\n+    D,\n+    E,\n+    F,\n+}\n+\n+fn main() {\n+    match E::F {\n+        E::A => 1,\n+        E::B => 2,\n+        E::C => 3,\n+        E::D => 4,\n+        E::E => unimplemented!(\"\"),\n+        E::F => \"\", //~ ERROR match arms have incompatible types\n+    };\n+}"}, {"sha": "24ce97f86e76023476b602b1eb16b73c44e7f514", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fbbf99c509042e89572f8575c875889874edb45/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fbbf99c509042e89572f8575c875889874edb45/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=4fbbf99c509042e89572f8575c875889874edb45", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/match-arm-resolving-to-never.rs:17:17\n+   |\n+LL | /     match E::F {\n+LL | |         E::A => 1,\n+LL | |         E::B => 2,\n+LL | |         E::C => 3,\n+LL | |         E::D => 4,\n+LL | |         E::E => unimplemented!(\"\"),\n+   | |                 ------------------ this and all prior arms are found to be of type `{integer}`\n+LL | |         E::F => \"\",\n+   | |                 ^^ expected integer, found reference\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `{integer}`\n+              found type `&'static str`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}