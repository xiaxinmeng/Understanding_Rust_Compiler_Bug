{"sha": "0f857791ad731343631b6dfc415cb46222cc95b0", "node_id": "C_kwDOAAsO6NoAKDBmODU3NzkxYWQ3MzEzNDM2MzFiNmRmYzQxNWNiNDYyMjJjYzk1YjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-24T18:50:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-24T18:53:47Z"}, "message": "Fully clear the body.", "tree": {"sha": "8f24b0d0ae2947a97eeebffd1114914378484732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f24b0d0ae2947a97eeebffd1114914378484732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f857791ad731343631b6dfc415cb46222cc95b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f857791ad731343631b6dfc415cb46222cc95b0", "html_url": "https://github.com/rust-lang/rust/commit/0f857791ad731343631b6dfc415cb46222cc95b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f857791ad731343631b6dfc415cb46222cc95b0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e50721475160e0aa02d905083388c5c29cc51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e50721475160e0aa02d905083388c5c29cc51d", "html_url": "https://github.com/rust-lang/rust/commit/15e50721475160e0aa02d905083388c5c29cc51d"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "50b7dda2bc29c0a20b776cf9540d64d57753271b", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f857791ad731343631b6dfc415cb46222cc95b0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f857791ad731343631b6dfc415cb46222cc95b0/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=0f857791ad731343631b6dfc415cb46222cc95b0", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{\n     traversal, AnalysisPhase, Body, ClearCrossCrate, ConstQualifs, Constant, LocalDecl, MirPass,\n     MirPhase, Operand, Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo,\n-    Statement, StatementKind, TerminatorKind,\n+    Statement, StatementKind, TerminatorKind, START_BLOCK,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n@@ -491,9 +491,10 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     //\n     // We don't usually need to worry about this kind of case,\n     // since we would get a compilation error if the user tried\n-    // to call it. However, since we can do const propagation\n-    // even without any calls to the function, we need to make\n-    // sure that it even makes sense to try to evaluate the body.\n+    // to call it. However, since we optimize even without any\n+    // calls to the function, we need to make sure that it even\n+    // makes sense to try to evaluate the body.\n+    //\n     // If there are unsatisfiable where clauses, then all bets are\n     // off, and we just give up.\n     //\n@@ -515,16 +516,17 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     if traits::impossible_predicates(tcx, traits::elaborate(tcx, predicates).collect()) {\n         trace!(\"optimizations skipped for {:?}: found unsatisfiable predicates\", body.source);\n+        // Clear the body to only contain a single `unreachable` statement.\n+        let bbs = body.basic_blocks.as_mut();\n+        bbs.raw.truncate(1);\n+        bbs[START_BLOCK].statements.clear();\n+        bbs[START_BLOCK].terminator_mut().kind = TerminatorKind::Unreachable;\n+        body.var_debug_info.clear();\n+        body.local_decls.raw.truncate(body.arg_count + 1);\n         pm::run_passes(\n             tcx,\n             body,\n-            &[\n-                &reveal_all::RevealAll,\n-                &simplify::SimplifyCfg::Final,\n-                &simplify::SimplifyLocals::Final,\n-                // Dump the end result for testing and debugging purposes.\n-                &dump_mir::Marker(\"PreCodegen\"),\n-            ],\n+            &[&reveal_all::RevealAll, &dump_mir::Marker(\"PreCodegen\")],\n             Some(MirPhase::Runtime(RuntimePhase::Optimized)),\n         );\n         return;"}]}