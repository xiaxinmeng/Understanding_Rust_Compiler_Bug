{"sha": "d7d42ccfd254dca9923bca63b008423dc4e0f83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZDQyY2NmZDI1NGRjYTk5MjNiY2E2M2IwMDg0MjNkYzRlMGY4M2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-07T11:07:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T11:07:17Z"}, "message": "Rollup merge of #83945 - SkiFire13:fix-83924, r=estebank\n\nAdd suggestion to reborrow mutable references when they're moved in a for loop\n\nAddress #83924", "tree": {"sha": "fc12b3db17212c201f0303b2fd65a6e355f2320a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc12b3db17212c201f0303b2fd65a6e355f2320a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d42ccfd254dca9923bca63b008423dc4e0f83d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbZJlCRBK7hj4Ov3rIwAAdHIIALMJvDHO+ZvkfdMjIRkEY7pB\nnBOleVwRsQiBI9xwmaXIvkVWeTIhpQORUt19bva1gZ3MkvLmctNX/zvW9EzZPcCy\nQEX5/eGc8t9hdKanPCC84TK2lwsbdM4joq9GXocu17UA3OUAxvIGd7w2RdsxEW06\nMXdO6MjTMmdEv4RiZrfMHAX1Mn6o6CrpmFqKvPlo4WblA0/G/JLvptehR3+Bf8P2\noQkf8U68Z5IR3hR8tw0/+vCCJkOwt1CoDjpeQYwLVUfDX1rlK0Yq2l75ejr7PtcK\nr/QdaAOSgqoBgxuIGtSRU9eODbdnyMpRGvzw8sRS4Z0W1DtW16lDA+UMcW0wGJk=\n=rNoT\n-----END PGP SIGNATURE-----\n", "payload": "tree fc12b3db17212c201f0303b2fd65a6e355f2320a\nparent 9c688cd2a2935ae4645c0b878f1f40ea51e98816\nparent a77598434838376141c8cb25fe29693b3a26b173\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617793637 +0200\ncommitter GitHub <noreply@github.com> 1617793637 +0200\n\nRollup merge of #83945 - SkiFire13:fix-83924, r=estebank\n\nAdd suggestion to reborrow mutable references when they're moved in a for loop\n\nAddress #83924\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d42ccfd254dca9923bca63b008423dc4e0f83d", "html_url": "https://github.com/rust-lang/rust/commit/d7d42ccfd254dca9923bca63b008423dc4e0f83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d42ccfd254dca9923bca63b008423dc4e0f83d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c688cd2a2935ae4645c0b878f1f40ea51e98816", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c688cd2a2935ae4645c0b878f1f40ea51e98816", "html_url": "https://github.com/rust-lang/rust/commit/9c688cd2a2935ae4645c0b878f1f40ea51e98816"}, {"sha": "a77598434838376141c8cb25fe29693b3a26b173", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77598434838376141c8cb25fe29693b3a26b173", "html_url": "https://github.com/rust-lang/rust/commit/a77598434838376141c8cb25fe29693b3a26b173"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "5fdf8a8d1ee195d322f79af77cb250f5b6888707", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d7d42ccfd254dca9923bca63b008423dc4e0f83d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d42ccfd254dca9923bca63b008423dc4e0f83d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=d7d42ccfd254dca9923bca63b008423dc4e0f83d", "patch": "@@ -264,7 +264,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n                     let sess = self.infcx.tcx.sess;\n-                    if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n+                    let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n+                    // If we have a `&mut` ref, we need to reborrow.\n+                    if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n+                        // If we are in a loop this will be suggested later.\n+                        if !is_loop_move {\n+                            err.span_suggestion_verbose(\n+                                move_span.shrink_to_lo(),\n+                                &format!(\n+                                    \"consider creating a fresh reborrow of {} here\",\n+                                    self.describe_place(moved_place.as_ref())\n+                                        .map(|n| format!(\"`{}`\", n))\n+                                        .unwrap_or_else(|| \"the mutable reference\".to_string()),\n+                                ),\n+                                format!(\"&mut *\"),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    } else if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n                         err.span_suggestion(\n                             move_span,\n                             \"consider borrowing to avoid moving into the for loop\","}, {"sha": "aa40da12b875da8ddaa5d03b1f573099309d01cb", "filename": "src/test/ui/issues/issue-83924.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed?ref=d7d42ccfd254dca9923bca63b008423dc4e0f83d", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut values = vec![10, 11, 12];\n+    let v = &mut values;\n+\n+    let mut max = 0;\n+\n+    for n in &mut *v {\n+        max = std::cmp::max(max, *n);\n+    }\n+\n+    println!(\"max is {}\", max);\n+    println!(\"Converting to percentages of maximum value...\");\n+    for n in v {\n+        //~^ ERROR: use of moved value: `v` [E0382]\n+        *n = 100 * (*n) / max;\n+    }\n+    println!(\"values: {:#?}\", values);\n+}"}, {"sha": "22b80fe2f383f932380ac9f8338ddeee1be6dd4a", "filename": "src/test/ui/issues/issue-83924.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs?ref=d7d42ccfd254dca9923bca63b008423dc4e0f83d", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut values = vec![10, 11, 12];\n+    let v = &mut values;\n+\n+    let mut max = 0;\n+\n+    for n in v {\n+        max = std::cmp::max(max, *n);\n+    }\n+\n+    println!(\"max is {}\", max);\n+    println!(\"Converting to percentages of maximum value...\");\n+    for n in v {\n+        //~^ ERROR: use of moved value: `v` [E0382]\n+        *n = 100 * (*n) / max;\n+    }\n+    println!(\"values: {:#?}\", values);\n+}"}, {"sha": "682bc323cb051224aa6775714f4549f3156b04e9", "filename": "src/test/ui/issues/issue-83924.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7d42ccfd254dca9923bca63b008423dc4e0f83d/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr?ref=d7d42ccfd254dca9923bca63b008423dc4e0f83d", "patch": "@@ -0,0 +1,25 @@\n+error[E0382]: use of moved value: `v`\n+  --> $DIR/issue-83924.rs:15:14\n+   |\n+LL |     let v = &mut values;\n+   |         - move occurs because `v` has type `&mut Vec<i32>`, which does not implement the `Copy` trait\n+...\n+LL |     for n in v {\n+   |              - `v` moved due to this implicit call to `.into_iter()`\n+...\n+LL |     for n in v {\n+   |              ^ value used here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `v`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+help: consider creating a fresh reborrow of `v` here\n+   |\n+LL |     for n in &mut *v {\n+   |              ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}