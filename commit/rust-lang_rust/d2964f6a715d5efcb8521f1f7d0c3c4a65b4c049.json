{"sha": "d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTY0ZjZhNzE1ZDVlZmNiODUyMWYxZjdkMGMzYzRhNjViNGMwNDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-28T13:20:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-28T13:20:24Z"}, "message": "Rustup to rustc 1.44.0-nightly (75208942f 2020-03-27)", "tree": {"sha": "0c92c3ea8cbafec98df0d94a98f621e837ff6bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c92c3ea8cbafec98df0d94a98f621e837ff6bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "html_url": "https://github.com/rust-lang/rust/commit/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d12440aab0d3566a8519205f40f0392739ce41", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d12440aab0d3566a8519205f40f0392739ce41", "html_url": "https://github.com/rust-lang/rust/commit/f6d12440aab0d3566a8519205f40f0392739ce41"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "839a020ec18c56e35b25c33d57875a25de10f854", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "patch": "@@ -1 +1 @@\n-nightly-2020-03-24\n+nightly-2020-03-28"}, {"sha": "4f5fb0f2e44ed1b324e79289f39d7732ef14da7d", "filename": "src/abi/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "patch": "@@ -61,15 +61,15 @@ pub(super) fn add_local_place_comments<'tcx>(\n     place: CPlace<'tcx>,\n     local: Local,\n ) {\n-    let TyLayout { ty, details } = place.layout();\n-    let ty::layout::LayoutDetails {\n+    let TyLayout { ty, layout } = place.layout();\n+    let ty::layout::Layout {\n         size,\n         align,\n         abi: _,\n         variants: _,\n         fields: _,\n         largest_niche: _,\n-    } = details;\n+    } = layout;\n \n     let (kind, extra) = match *place.inner() {\n         CPlaceInner::Var(var) => {"}, {"sha": "d2841b25f5ea9b2e1b91297daa31000af521ac6e", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "patch": "@@ -573,7 +573,13 @@ fn trans_stmt<'tcx>(\n                 }\n                 Rvalue::Repeat(operand, times) => {\n                     let operand = trans_operand(fx, operand);\n-                    for i in 0..*times {\n+                    let times = fx\n+                        .monomorphize(times)\n+                        .eval(fx.tcx, ParamEnv::reveal_all())\n+                        .val\n+                        .try_to_bits(fx.tcx.data_layout.pointer_size)\n+                        .unwrap();\n+                    for i in 0..times {\n                         let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n                         let to = lval.place_index(fx, index);\n                         to.write_cvalue(fx, operand);\n@@ -642,14 +648,14 @@ fn trans_stmt<'tcx>(\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..) => {}\n \n-        StatementKind::InlineAsm(asm) => {\n+        StatementKind::LlvmInlineAsm(asm) => {\n             use rustc_ast::ast::Name;\n-            let InlineAsm {\n+            let LlvmInlineAsm {\n                 asm,\n                 outputs: _,\n                 inputs: _,\n             } = &**asm;\n-            let rustc_hir::InlineAsmInner {\n+            let rustc_hir::LlvmInlineAsmInner {\n                 asm: asm_code, // Name\n                 outputs,       // Vec<Name>\n                 inputs,        // Vec<Name>"}, {"sha": "7bd2f476193295190e1c71ae5186dfb2c544cde5", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d2964f6a715d5efcb8521f1f7d0c3c4a65b4c049", "patch": "@@ -391,7 +391,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n struct TransPlaceInterpreter;\n \n impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n-    type MemoryKinds = !;\n+    type MemoryKind = !;\n     type ExtraFnVal = !;\n     type PointerTag = ();\n     type AllocExtra = ();\n@@ -400,7 +400,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n \n     const CHECK_ALIGN: bool = true;\n-    const STATIC_KIND: Option<!> = None;\n+    const GLOBAL_KIND: Option<!> = None;\n \n     fn enforce_validity(_: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false\n@@ -458,7 +458,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         (alloc, ())\n     }\n \n-    fn tag_static_base_pointer(_: &(), _: AllocId) -> Self::PointerTag {\n+    fn tag_global_base_pointer(_: &(), _: AllocId) -> Self::PointerTag {\n         ()\n     }\n "}]}