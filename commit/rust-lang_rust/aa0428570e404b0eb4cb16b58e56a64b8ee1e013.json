{"sha": "aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMDQyODU3MGU0MDRiMGViNGNiMTZiNThlNTZhNjRiOGVlMWUwMTM=", "commit": {"author": {"name": "aheart", "email": "aheart@users.noreply.github.com", "date": "2018-12-09T16:17:50Z"}, "committer": {"name": "aheart", "email": "aheart@users.noreply.github.com", "date": "2018-12-09T18:58:20Z"}, "message": "Add lint for items deprecated in future", "tree": {"sha": "e1db8d53ab16d0339f4ea35ee4b5b9486cd3d79e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1db8d53ab16d0339f4ea35ee4b5b9486cd3d79e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "html_url": "https://github.com/rust-lang/rust/commit/aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/comments", "author": {"login": "aheart", "id": 9392791, "node_id": "MDQ6VXNlcjkzOTI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9392791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aheart", "html_url": "https://github.com/aheart", "followers_url": "https://api.github.com/users/aheart/followers", "following_url": "https://api.github.com/users/aheart/following{/other_user}", "gists_url": "https://api.github.com/users/aheart/gists{/gist_id}", "starred_url": "https://api.github.com/users/aheart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aheart/subscriptions", "organizations_url": "https://api.github.com/users/aheart/orgs", "repos_url": "https://api.github.com/users/aheart/repos", "events_url": "https://api.github.com/users/aheart/events{/privacy}", "received_events_url": "https://api.github.com/users/aheart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aheart", "id": 9392791, "node_id": "MDQ6VXNlcjkzOTI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9392791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aheart", "html_url": "https://github.com/aheart", "followers_url": "https://api.github.com/users/aheart/followers", "following_url": "https://api.github.com/users/aheart/following{/other_user}", "gists_url": "https://api.github.com/users/aheart/gists{/gist_id}", "starred_url": "https://api.github.com/users/aheart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aheart/subscriptions", "organizations_url": "https://api.github.com/users/aheart/orgs", "repos_url": "https://api.github.com/users/aheart/repos", "events_url": "https://api.github.com/users/aheart/events{/privacy}", "received_events_url": "https://api.github.com/users/aheart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea007c6b10e728de9dfc1fe78b8e0aed4f08f1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea007c6b10e728de9dfc1fe78b8e0aed4f08f1ab", "html_url": "https://github.com/rust-lang/rust/commit/ea007c6b10e728de9dfc1fe78b8e0aed4f08f1ab"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "df3defc2c5cba327c52b58c219ddad8ec838fc19", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "patch": "@@ -365,6 +365,13 @@ pub mod parser {\n     }\n }\n \n+declare_lint! {\n+    pub DEPRECATED_IN_FUTURE,\n+    Allow,\n+    \"detects use of items that will be deprecated in a future version\",\n+    report_in_external_macro: true\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// that are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -427,6 +434,7 @@ impl LintPass for HardwiredLints {\n             MACRO_USE_EXTERN_CRATE,\n             MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n             parser::QUESTION_MARK_MACRO_SEP,\n+            DEPRECATED_IN_FUTURE,\n         )\n     }\n }"}, {"sha": "57e5c4865a9c6ebab039b4565b5ca4749c99eff8", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "patch": "@@ -13,7 +13,7 @@\n \n pub use self::StabilityLevel::*;\n \n-use lint;\n+use lint::{self, Lint};\n use hir::{self, Item, Generics, StructField, Variant, HirId};\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n@@ -562,18 +562,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return EvalResult::Allow;\n         }\n \n-        let lint_deprecated = |def_id: DefId, id: NodeId, note: Option<Symbol>| {\n-            let path = self.item_path_str(def_id);\n-\n+        let lint_deprecated = |def_id: DefId,\n+                               id: NodeId,\n+                               note: Option<Symbol>,\n+                               message: &str,\n+                               lint: &'static Lint| {\n             let msg = if let Some(note) = note {\n-                format!(\"use of deprecated item '{}': {}\", path, note)\n+                format!(\"{}: {}\", message, note)\n             } else {\n-                format!(\"use of deprecated item '{}'\", path)\n+                format!(\"{}\", message)\n             };\n \n-            self.lint_node(lint::builtin::DEPRECATED, id, span, &msg);\n+            self.lint_node(lint, id, span, &msg);\n             if id == ast::DUMMY_NODE_ID {\n-                span_bug!(span, \"emitted a deprecated lint with dummy node id: {:?}\", def_id);\n+                span_bug!(span, \"emitted a {} lint with dummy node id: {:?}\", lint.name, def_id);\n             }\n         };\n \n@@ -584,17 +586,40 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // version, then we should display no warning message.\n                 let deprecated_in_future_version = if let Some(sym) = depr_entry.attr.since {\n                     let since = sym.as_str();\n-                    !deprecation_in_effect(&since)\n+                    if !deprecation_in_effect(&since) {\n+                        Some(since)\n+                    } else {\n+                        None\n+                    }\n                 } else {\n-                    false\n+                    None\n                 };\n \n                 let parent_def_id = self.hir().local_def_id(self.hir().get_parent(id));\n-                let skip = deprecated_in_future_version ||\n-                           self.lookup_deprecation_entry(parent_def_id)\n+                let skip = self.lookup_deprecation_entry(parent_def_id)\n                                .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n-                if !skip {\n-                    lint_deprecated(def_id, id, depr_entry.attr.note);\n+\n+\n+                if let Some(since) = deprecated_in_future_version {\n+                    let path = self.item_path_str(def_id);\n+                    let message = format!(\"use of item '{}' \\\n+                                           that will be deprecated in future version {}\",\n+                                          path,\n+                                          since);\n+\n+                    lint_deprecated(def_id,\n+                                    id,\n+                                    depr_entry.attr.note,\n+                                    &message,\n+                                    lint::builtin::DEPRECATED_IN_FUTURE);\n+                } else if !skip {\n+                    let path = self.item_path_str(def_id);\n+                    let message = format!(\"use of deprecated item '{}'\", path);\n+                    lint_deprecated(def_id,\n+                                    id,\n+                                    depr_entry.attr.note,\n+                                    &message,\n+                                    lint::builtin::DEPRECATED);\n                 }\n             };\n         }\n@@ -614,8 +639,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(&Stability{rustc_depr: Some(attr::RustcDeprecation { reason, since }), ..})\n                 = stability {\n             if let Some(id) = id {\n+                let path = self.item_path_str(def_id);\n+                let message = format!(\"use of deprecated item '{}'\", path);\n                 if deprecation_in_effect(&since.as_str()) {\n-                    lint_deprecated(def_id, id, Some(reason));\n+                    lint_deprecated(def_id,\n+                                    id,\n+                                    Some(reason),\n+                                    &message,\n+                                    lint::builtin::DEPRECATED);\n                 }\n             }\n         }"}, {"sha": "c6c60177e9d0ee2eec9178d67a08fce01c8ec8ce", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+\n+#![deny(deprecated_in_future)]\n+\n+#[deprecated(since = \"99.99.99\", note = \"text\")]\n+pub fn deprecated_future() {}\n+\n+fn test() {\n+    deprecated_future(); //~ ERROR use of item 'deprecated_future' that will be deprecated in future version 99.99.99: text\n+}\n+\n+fn main() {}"}, {"sha": "38392cf96084ce5e2fb2b0961438e2330fc9d0fa", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa0428570e404b0eb4cb16b58e56a64b8ee1e013/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=aa0428570e404b0eb4cb16b58e56a64b8ee1e013", "patch": "@@ -0,0 +1,14 @@\n+error: use of item 'deprecated_future' that will be deprecated in future version 99.99.99: text\n+  --> $DIR/deprecation-in-future.rs:9:5\n+   |\n+LL |     deprecated_future(); //~ ERROR use of item 'deprecated_future' that will be deprecated in future version 99.99.99: text\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deprecation-in-future.rs:3:9\n+   |\n+LL | #![deny(deprecated_in_future)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}