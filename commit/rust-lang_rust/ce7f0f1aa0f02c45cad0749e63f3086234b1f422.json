{"sha": "ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "node_id": "C_kwDOAAsO6NoAKGNlN2YwZjFhYTBmMDJjNDVjYWQwNzQ5ZTYzZjMwODYyMzRiMWY0MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T19:07:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-28T19:07:50Z"}, "message": "Auto merge of #100719 - CohenArthur:rust-safe-intrinsic-attribute, r=wesleywiser\n\nAdd `#[rustc_safe_intrinsic]`\n\nThis PR adds the `#[rustc_safe_intrinsic]` attribute as mentionned on Zulip. The goal of this attribute is to avoid keeping a list of symbols as the source for stable intrinsics, and instead rely on an attribute. This is similar to `#[rustc_const_stable]` and `#[rustc_const_unstable]`, which among other things, are used to mark the constness of intrinsic functions.", "tree": {"sha": "90f9531530c5630cf6b25fb5765dcd75d4bf6032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f9531530c5630cf6b25fb5765dcd75d4bf6032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "html_url": "https://github.com/rust-lang/rust/commit/ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "307dd938d7937c93dc7a880e81a2383b82f30ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/307dd938d7937c93dc7a880e81a2383b82f30ad0", "html_url": "https://github.com/rust-lang/rust/commit/307dd938d7937c93dc7a880e81a2383b82f30ad0"}, {"sha": "b1b86491f1c2bb761a06b779a3a7a936a996977a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b86491f1c2bb761a06b779a3a7a936a996977a", "html_url": "https://github.com/rust-lang/rust/commit/b1b86491f1c2bb761a06b779a3a7a936a996977a"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "cc546bdbb3b353ecf242e618d6090ac9f59d6da9", "filename": "compiler/rustc_error_codes/src/error_codes/E0094.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -6,6 +6,7 @@ Erroneous code example:\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T, U>() -> usize; // error: intrinsic has wrong number\n                                  //        of type parameters\n }\n@@ -19,6 +20,7 @@ Example:\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T>() -> usize; // ok!\n }\n ```"}, {"sha": "8c2462ebd9b86d87b40f7e64c67eb4fcbdf07fef", "filename": "compiler/rustc_error_codes/src/error_codes/E0211.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0211.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0211.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0211.md?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -7,6 +7,7 @@ used. Erroneous code examples:\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T>(); // error: intrinsic has wrong type\n }\n \n@@ -42,6 +43,7 @@ For the first code example, please check the function definition. Example:\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T>() -> usize; // ok!\n }\n ```"}, {"sha": "5ee6c9f23877097c60ec90f77276b4b1af75ef37", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -499,6 +499,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(rustc_safe_intrinsic, Normal, template!(Word), DuplicatesOk),\n     ungated!(\n         rustc_default_body_unstable, Normal,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk"}, {"sha": "8be1cf04f8b691d9b8e8127b9eb52f3555567e0a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -7,7 +7,8 @@ use crate::errors::{\n };\n use crate::require_same_types;\n \n-use rustc_errors::struct_span_err;\n+use hir::def_id::DefId;\n+use rustc_errors::{struct_span_err, DiagnosticMessage};\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -61,8 +62,12 @@ fn equate_intrinsic_type<'tcx>(\n }\n \n /// Returns the unsafety of the given intrinsic.\n-pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n-    match intrinsic {\n+pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir::Unsafety {\n+    let has_safe_attr = match tcx.has_attr(intrinsic_id, sym::rustc_safe_intrinsic) {\n+        true => hir::Unsafety::Normal,\n+        false => hir::Unsafety::Unsafe,\n+    };\n+    let is_in_list = match tcx.item_name(intrinsic_id) {\n         // When adding a new intrinsic to this list,\n         // it's usually worth updating that intrinsic's documentation\n         // to note that it's safe to call, since\n@@ -106,14 +111,26 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n         | sym::variant_count\n         | sym::ptr_mask => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n+    };\n+\n+    if has_safe_attr != is_in_list {\n+        tcx.sess.struct_span_err(\n+            tcx.def_span(intrinsic_id),\n+            DiagnosticMessage::Str(format!(\n+                    \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n+                    tcx.item_name(intrinsic_id)\n+        ))).emit();\n     }\n+\n+    is_in_list\n }\n \n /// Remember to add all intrinsics here, in `compiler/rustc_codegen_llvm/src/intrinsic.rs`,\n /// and in `library/core/src/intrinsics.rs`.\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n-    let intrinsic_name = tcx.item_name(it.def_id.to_def_id());\n+    let intrinsic_id = it.def_id.to_def_id();\n+    let intrinsic_name = tcx.item_name(intrinsic_id);\n     let name_str = intrinsic_name.as_str();\n \n     let bound_vars = tcx.mk_bound_variable_kinds(\n@@ -160,7 +177,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         };\n         (n_tps, 0, inputs, output, hir::Unsafety::Unsafe)\n     } else {\n-        let unsafety = intrinsic_operation_unsafety(intrinsic_name);\n+        let unsafety = intrinsic_operation_unsafety(tcx, intrinsic_id);\n         let (n_tps, inputs, output) = match intrinsic_name {\n             sym::abort => (0, Vec::new(), tcx.types.never),\n             sym::unreachable => (0, Vec::new(), tcx.types.never),"}, {"sha": "7d363d95f860941872c0a27164b7f0fbe06fe821", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -2544,7 +2544,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        intrinsic_operation_unsafety(tcx.item_name(def_id))\n+        intrinsic_operation_unsafety(tcx, def_id)\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "09727b433b3d4c02c0626ac6380d5678bcbf5277", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1296,6 +1296,7 @@ symbols! {\n         rustc_reallocator,\n         rustc_regions,\n         rustc_reservation_impl,\n+        rustc_safe_intrinsic,\n         rustc_serialize,\n         rustc_skip_array_during_method_dispatch,\n         rustc_specialization_trait,"}, {"sha": "15ee14398b6768cb644a6a7c3a9f17ba6f6323f4", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -788,6 +788,7 @@ extern \"rust-intrinsic\" {\n     /// uninitialized at that point in the control flow.\n     ///\n     /// This intrinsic should not be used outside of the compiler.\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn rustc_peek<T>(_: T) -> T;\n \n     /// Aborts the execution of the process.\n@@ -805,6 +806,7 @@ extern \"rust-intrinsic\" {\n     /// On Unix, the\n     /// process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or\n     /// `SIGBUS`.  The precise behaviour is not guaranteed and not stable.\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn abort() -> !;\n \n     /// Informs the optimizer that this point in the code is not reachable,\n@@ -843,6 +845,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn likely(b: bool) -> bool;\n \n     /// Hints to the compiler that branch condition is likely to be false.\n@@ -857,6 +860,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn unlikely(b: bool) -> bool;\n \n     /// Executes a breakpoint trap, for inspection by a debugger.\n@@ -876,6 +880,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn size_of<T>() -> usize;\n \n     /// The minimum alignment of a type.\n@@ -887,6 +892,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n     ///\n@@ -915,6 +921,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n@@ -928,27 +935,31 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n@@ -960,6 +971,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Consider using [`core::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n     /// Moves a value out of scope without running drop glue.\n@@ -972,6 +984,7 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_intrinsic_forget\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type.\n@@ -1251,6 +1264,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n     #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn needs_drop<T: ?Sized>() -> bool;\n \n     /// Calculates the offset from a pointer.\n@@ -1295,6 +1309,7 @@ extern \"rust-intrinsic\" {\n     /// any safety invariants.\n     ///\n     /// Consider using [`pointer::mask`] instead.\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n@@ -1486,6 +1501,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::min`]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n     ///\n@@ -1496,6 +1512,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::min`]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n     ///\n@@ -1506,6 +1523,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::max`]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n     ///\n@@ -1516,6 +1534,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::max`]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n@@ -1636,6 +1655,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `count_ones` method. For example,\n     /// [`u32::count_ones`]\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn ctpop<T: Copy>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n@@ -1673,6 +1693,7 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(num_leading, 16);\n     /// ```\n     #[rustc_const_stable(feature = \"const_ctlz\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn ctlz<T: Copy>(x: T) -> T;\n \n     /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n@@ -1729,6 +1750,7 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(num_trailing, 16);\n     /// ```\n     #[rustc_const_stable(feature = \"const_cttz\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn cttz<T: Copy>(x: T) -> T;\n \n     /// Like `cttz`, but extra-unsafe as it returns `undef` when\n@@ -1761,6 +1783,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `swap_bytes` method. For example,\n     /// [`u32::swap_bytes`]\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn bswap<T: Copy>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n@@ -1774,6 +1797,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `reverse_bits` method. For example,\n     /// [`u32::reverse_bits`]\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn bitreverse<T: Copy>(x: T) -> T;\n \n     /// Performs checked integer addition.\n@@ -1787,6 +1811,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_add` method. For example,\n     /// [`u32::overflowing_add`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n@@ -1800,6 +1825,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_sub` method. For example,\n     /// [`u32::overflowing_sub`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n@@ -1813,6 +1839,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_mul` method. For example,\n     /// [`u32::overflowing_mul`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs an exact division, resulting in undefined behavior where\n@@ -1887,6 +1914,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `rotate_left` method. For example,\n     /// [`u32::rotate_left`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn rotate_left<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n@@ -1900,6 +1928,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `rotate_right` method. For example,\n     /// [`u32::rotate_right`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn rotate_right<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n@@ -1913,6 +1942,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`u32::wrapping_add`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n@@ -1925,6 +1955,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`u32::wrapping_sub`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n@@ -1937,6 +1968,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`u32::wrapping_mul`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, saturating at numeric bounds.\n@@ -1950,6 +1982,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `saturating_add` method. For example,\n     /// [`u32::saturating_add`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n     /// Computes `a - b`, saturating at numeric bounds.\n     ///\n@@ -1962,6 +1995,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`u32::saturating_sub`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v';\n@@ -1974,6 +2008,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n     /// Returns the number of variants of the type `T` cast to a `usize`;\n@@ -1986,6 +2021,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The to-be-stabilized version of this intrinsic is [`mem::variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn variant_count<T>() -> usize;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`\n@@ -2019,6 +2055,7 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8;\n \n     /// Allocates a block of memory at compile time.\n@@ -2069,6 +2106,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// [`std::hint::black_box`]: crate::hint::black_box\n     #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]\n+    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n     pub fn black_box<T>(dummy: T) -> T;\n \n     /// `ptr` must point to a vtable."}, {"sha": "80bf2f2fd9042d8158c85a50053b2c5cbd211d5a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -689,7 +689,7 @@ impl Item {\n                 let abi = tcx.fn_sig(self.item_id.as_def_id().unwrap()).abi();\n                 hir::FnHeader {\n                     unsafety: if abi == Abi::RustIntrinsic {\n-                        intrinsic_operation_unsafety(self.name.unwrap())\n+                        intrinsic_operation_unsafety(tcx, self.item_id.as_def_id().unwrap())\n                     } else {\n                         hir::Unsafety::Unsafe\n                     },"}, {"sha": "d08abdaeb1411f45e4cb90fb654e23de1f447362", "filename": "src/test/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsafe-intrinsic.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,12 +1,14 @@\n #![feature(intrinsics)]\n #![feature(no_core)]\n+#![feature(rustc_attrs)]\n \n #![no_core]\n #![crate_name = \"foo\"]\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n     // @has - '//pre[@class=\"rust fn\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n     // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'"}, {"sha": "a2ec932c124555b7abdf0876c205c47785915ab8", "filename": "src/test/ui/error-codes/E0094.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0094.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,5 +1,7 @@\n #![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T, U>() -> usize; //~ ERROR E0094\n }\n "}, {"sha": "531cd4c784d3384091fb7215c909b8eabb3efbba", "filename": "src/test/ui/error-codes/E0094.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0094.stderr?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,5 +1,5 @@\n error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n-  --> $DIR/E0094.rs:3:15\n+  --> $DIR/E0094.rs:5:15\n    |\n LL |     fn size_of<T, U>() -> usize;\n    |               ^^^^^^ expected 1 type parameter"}, {"sha": "dd9e0b284eaa23ee59816dc2d9efe000f8321a21", "filename": "src/test/ui/error-codes/E0308.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,6 +1,8 @@\n #![feature(intrinsics)]\n+#![feature(rustc_attrs)]\n \n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     fn size_of<T>(); //~ ERROR E0308\n }\n "}, {"sha": "187b775f92dc0a5719d7a7477cb315f4add9679a", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: intrinsic has wrong type\n-  --> $DIR/E0308.rs:4:5\n+  --> $DIR/E0308.rs:6:5\n    |\n LL |     fn size_of<T>();\n    |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`"}, {"sha": "a72aa4171a1030891318eb7fd59b065e099ff934", "filename": "src/test/ui/extern/extern-with-type-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -2,6 +2,7 @@\n \n extern \"rust-intrinsic\" {\n     // Real example from libcore\n+    #[rustc_safe_intrinsic]\n     fn type_id<T: ?Sized + 'static>() -> u64;\n \n     // Silent bounds made explicit to make sure they are actually\n@@ -10,6 +11,7 @@ extern \"rust-intrinsic\" {\n \n     // Bounds aren't checked right now, so this should work\n     // even though it's incorrect.\n+    #[rustc_safe_intrinsic]\n     fn size_of<T: Clone>() -> usize;\n \n     // Unresolved bounds should still error."}, {"sha": "88be1e5dd3da02a79784ba0eb4a398543e808afb", "filename": "src/test/ui/extern/extern-with-type-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-with-type-bounds.stderr?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,5 +1,5 @@\n error[E0405]: cannot find trait `NoSuchTrait` in this scope\n-  --> $DIR/extern-with-type-bounds.rs:16:20\n+  --> $DIR/extern-with-type-bounds.rs:18:20\n    |\n LL |     fn align_of<T: NoSuchTrait>() -> usize;\n    |                    ^^^^^^^^^^^ not found in this scope"}, {"sha": "c8b1ff1dbce3b479d00c0e63981d18f138b6f9d9", "filename": "src/test/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -6,6 +6,7 @@\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> usize;\n+        #[rustc_safe_intrinsic]\n         pub fn min_align_of<T>() -> usize;\n     }\n }"}, {"sha": "88bf42b685f4d071915670b89b925cebb872e8b1", "filename": "src/test/ui/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -1,15 +1,21 @@\n // run-pass\n \n #![feature(intrinsics)]\n+#![feature(rustc_attrs)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {\n+        #[rustc_safe_intrinsic]\n         pub fn ctpop<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn ctlz<T>(x: T) -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn cttz<T>(x: T) -> T;\n         pub fn cttz_nonzero<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn bswap<T>(x: T) -> T;\n+        #[rustc_safe_intrinsic]\n         pub fn bitreverse<T>(x: T) -> T;\n     }\n }"}, {"sha": "50e12eaeb5cc0b4aa4d82f477569089212da4406", "filename": "src/test/ui/intrinsics/safe-intrinsic-mismatch.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -0,0 +1,11 @@\n+#![feature(intrinsics)]\n+#![feature(rustc_attrs)]\n+\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize; //~ ERROR intrinsic safety mismatch\n+\n+    #[rustc_safe_intrinsic]\n+    fn assume(b: bool); //~ ERROR intrinsic safety mismatch\n+}\n+\n+fn main() {}"}, {"sha": "0c2f3be491dd30c83dc9eb06ad54aa39efb9b2b4", "filename": "src/test/ui/intrinsics/safe-intrinsic-mismatch.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fsafe-intrinsic-mismatch.stderr?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -0,0 +1,14 @@\n+error: intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `size_of`\n+  --> $DIR/safe-intrinsic-mismatch.rs:5:5\n+   |\n+LL |     fn size_of<T>() -> usize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `assume`\n+  --> $DIR/safe-intrinsic-mismatch.rs:8:5\n+   |\n+LL |     fn assume(b: bool);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ee704198d193bb13713820db29838648d1f2bb92", "filename": "src/test/ui/structs-enums/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u32.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -10,6 +10,7 @@ use std::mem;\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> usize;\n+        #[rustc_safe_intrinsic]\n         pub fn min_align_of<T>() -> usize;\n     }\n }"}, {"sha": "40ede9705f115d0097f2e3cb337535261783914d", "filename": "src/test/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7f0f1aa0f02c45cad0749e63f3086234b1f422/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=ce7f0f1aa0f02c45cad0749e63f3086234b1f422", "patch": "@@ -12,6 +12,7 @@ use std::mem;\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> usize;\n+        #[rustc_safe_intrinsic]\n         pub fn min_align_of<T>() -> usize;\n     }\n }"}]}