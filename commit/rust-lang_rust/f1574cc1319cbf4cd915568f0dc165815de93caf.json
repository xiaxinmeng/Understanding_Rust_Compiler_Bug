{"sha": "f1574cc1319cbf4cd915568f0dc165815de93caf", "node_id": "C_kwDOAAsO6NoAKGYxNTc0Y2MxMzE5Y2JmNGNkOTE1NTY4ZjBkYzE2NTgxNWRlOTNjYWY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-24T13:46:17Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-15T21:39:39Z"}, "message": "Update `vec_init_then_push` docs", "tree": {"sha": "14bf41d562a16de5b2441f6f4c2d77dc5e7e2bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14bf41d562a16de5b2441f6f4c2d77dc5e7e2bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1574cc1319cbf4cd915568f0dc165815de93caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1574cc1319cbf4cd915568f0dc165815de93caf", "html_url": "https://github.com/rust-lang/rust/commit/f1574cc1319cbf4cd915568f0dc165815de93caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1574cc1319cbf4cd915568f0dc165815de93caf/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948af01633337b3ab57f0db84d49128c5dbc417b", "url": "https://api.github.com/repos/rust-lang/rust/commits/948af01633337b3ab57f0db84d49128c5dbc417b", "html_url": "https://github.com/rust-lang/rust/commit/948af01633337b3ab57f0db84d49128c5dbc417b"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "35db45e2b0c9921b97672f6322e48a870f658190", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1574cc1319cbf4cd915568f0dc165815de93caf/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1574cc1319cbf4cd915568f0dc165815de93caf/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=f1574cc1319cbf4cd915568f0dc165815de93caf", "patch": "@@ -18,6 +18,13 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `push` immediately after creating a new `Vec`.\n     ///\n+    /// If the `Vec` is created using `with_capacity` this will only lint if the capacity is a\n+    /// constant and the number of pushes is greater than or equal to the initial capacity.\n+    ///\n+    /// If the `Vec` is extended after the initial sequence of pushes and it was default initialized\n+    /// then this will only lint after there were at least four pushes. This number may change in\n+    /// the future.\n+    ///\n     /// ### Why is this bad?\n     /// The `vec![]` macro is both more performant and easier to read than\n     /// multiple `push` calls.\n@@ -56,7 +63,7 @@ struct VecPushSearcher {\n }\n impl VecPushSearcher {\n     fn display_err(&self, cx: &LateContext<'_>) {\n-        let min_pushes_for_extension = match self.init {\n+        let required_pushes_before_extension = match self.init {\n             _ if self.found == 0 => return,\n             VecInitKind::WithConstCapacity(x) if x > self.found => return,\n             VecInitKind::WithConstCapacity(x) => x,\n@@ -98,6 +105,8 @@ impl VecPushSearcher {\n                         && adjusted_mut == Mutability::Mut\n                         && !adjusted_ty.peel_refs().is_slice() =>\n                 {\n+                    // No need to set `needs_mut` to true. The receiver will be either explicitly borrowed, or it will\n+                    // be implicitly borrowed via an adjustment. Both of these cases are already handled by this point.\n                     return ControlFlow::Break(true);\n                 },\n                 ExprKind::Assign(lhs, ..) if e.hir_id == lhs.hir_id => {\n@@ -110,7 +119,7 @@ impl VecPushSearcher {\n         });\n \n         // Avoid allocating small `Vec`s when they'll be extended right after.\n-        if res == ControlFlow::Break(true) && self.found <= min_pushes_for_extension {\n+        if res == ControlFlow::Break(true) && self.found <= required_pushes_before_extension {\n             return;\n         }\n "}, {"sha": "531745424a7d02b77c8503480b81eb9b72ad2103", "filename": "tests/ui/vec_init_then_push.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1574cc1319cbf4cd915568f0dc165815de93caf/tests%2Fui%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1574cc1319cbf4cd915568f0dc165815de93caf/tests%2Fui%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.rs?ref=f1574cc1319cbf4cd915568f0dc165815de93caf", "patch": "@@ -29,6 +29,12 @@ fn main() {\n         // no lint\n         vec.push(1);\n     }\n+\n+    let mut vec = Vec::with_capacity(5);\n+    vec.push(1);\n+    vec.push(2);\n+    vec.push(3);\n+    vec.push(4);\n }\n \n pub fn no_lint() -> Vec<i32> {\n@@ -84,5 +90,17 @@ fn _cond_push_with_large_start(x: bool) -> Vec<u32> {\n     if x {\n         v.push(1);\n     }\n-    v\n+\n+    let mut v2 = Vec::new();\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.extend(&v);\n+\n+    v2\n }"}, {"sha": "50b029fc33727a2a23351099f8beb60ac88271f1", "filename": "tests/ui/vec_init_then_push.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1574cc1319cbf4cd915568f0dc165815de93caf/tests%2Fui%2Fvec_init_then_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1574cc1319cbf4cd915568f0dc165815de93caf/tests%2Fui%2Fvec_init_then_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.stderr?ref=f1574cc1319cbf4cd915568f0dc165815de93caf", "patch": "@@ -31,15 +31,15 @@ LL | |     new_err.push(0);\n    | |____________________^ help: consider using the `vec![]` macro: `new_err = vec![..];`\n \n error: calls to `push` immediately after creation\n-  --> $DIR/vec_init_then_push.rs:67:5\n+  --> $DIR/vec_init_then_push.rs:73:5\n    |\n LL | /     let mut v = Vec::new();\n LL | |     v.push(x);\n LL | |     v.push(1);\n    | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n \n error: calls to `push` immediately after creation\n-  --> $DIR/vec_init_then_push.rs:75:5\n+  --> $DIR/vec_init_then_push.rs:81:5\n    |\n LL | /     let mut v = Vec::new();\n LL | |     v.push(0);\n@@ -50,5 +50,17 @@ LL | |     v.push(1);\n LL | |     v.push(0);\n    | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n \n-error: aborting due to 6 previous errors\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:94:5\n+   |\n+LL | /     let mut v2 = Vec::new();\n+LL | |     v2.push(0);\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+...  |\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+   | |_______________^ help: consider using the `vec![]` macro: `let mut v2 = vec![..];`\n+\n+error: aborting due to 7 previous errors\n "}]}