{"sha": "26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "node_id": "C_kwDOAAsO6NoAKDI2ZTVmZTllODUwN2Y3ZGNiNTBjMjFlNzg1NTE1YTc4NDFlOGNmNTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-15T16:39:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T14:20:21Z"}, "message": "Do not fetch HIR node when iterating to find lint.", "tree": {"sha": "2291e94074ded968833f356effba4905598f276d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2291e94074ded968833f356effba4905598f276d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "html_url": "https://github.com/rust-lang/rust/commit/26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e5fe9e8507f7dcb50c21e785515a7841e8cf55/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e76599f5f22c471cf0743518e59e64048243aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e76599f5f22c471cf0743518e59e64048243aef", "html_url": "https://github.com/rust-lang/rust/commit/6e76599f5f22c471cf0743518e59e64048243aef"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "36f748f561a68702881336bcc9c6606163043e00", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26e5fe9e8507f7dcb50c21e785515a7841e8cf55/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5fe9e8507f7dcb50c21e785515a7841e8cf55/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "patch": "@@ -61,7 +61,7 @@ pub struct ParentHirIterator<'hir> {\n }\n \n impl<'hir> Iterator for ParentHirIterator<'hir> {\n-    type Item = (HirId, Node<'hir>);\n+    type Item = HirId;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if self.current_id == CRATE_HIR_ID {\n@@ -77,10 +77,7 @@ impl<'hir> Iterator for ParentHirIterator<'hir> {\n             }\n \n             self.current_id = parent_id;\n-            if let Some(node) = self.map.find(parent_id) {\n-                return Some((parent_id, node));\n-            }\n-            // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.\n+            return Some(parent_id);\n         }\n     }\n }\n@@ -393,8 +390,8 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn enclosing_body_owner(self, hir_id: HirId) -> LocalDefId {\n-        for (parent, _) in self.parent_iter(hir_id) {\n-            if let Some(body) = self.find(parent).map(associated_body).flatten() {\n+        for (_, node) in self.parent_iter(hir_id) {\n+            if let Some(body) = associated_body(node) {\n                 return self.body_owner_def_id(body);\n             }\n         }\n@@ -635,10 +632,17 @@ impl<'hir> Map<'hir> {\n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n     #[inline]\n-    pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {\n+    pub fn parent_id_iter(self, current_id: HirId) -> impl Iterator<Item = HirId> + 'hir {\n         ParentHirIterator { current_id, map: self }\n     }\n \n+    /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n+    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    #[inline]\n+    pub fn parent_iter(self, current_id: HirId) -> impl Iterator<Item = (HirId, Node<'hir>)> {\n+        self.parent_id_iter(current_id).filter_map(move |id| Some((id, self.find(id)?)))\n+    }\n+\n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n     #[inline]"}, {"sha": "aa02fc00eabf445f40da13f9cc4dae1ba6e4c3f5", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26e5fe9e8507f7dcb50c21e785515a7841e8cf55/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5fe9e8507f7dcb50c21e785515a7841e8cf55/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "patch": "@@ -125,19 +125,15 @@ impl ShallowLintLevelMap {\n         if let Some(&(level, src)) = self.specs.get(&id) {\n             return (Some(level), src);\n         }\n-        let mut cur = start;\n \n-        loop {\n-            let parent = tcx.hir().get_parent_node(cur);\n-            if cur == parent {\n-                return (None, LintLevelSource::Default);\n-            }\n+        for parent in tcx.hir().parent_id_iter(start) {\n             let specs = tcx.shallow_lint_levels_on(parent);\n             if let Some(&(level, src)) = specs.specs.get(&id) {\n                 return (Some(level), src);\n             }\n-            cur = parent\n         }\n+\n+        (None, LintLevelSource::Default)\n     }\n \n     /// Fetch and return the user-visible lint level for the given lint at the given HirId."}]}