{"sha": "7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNWIwNDU0ZTllZTVlYTliOTljNjMxNTE3NGI0OThkZjYwYTdiYjU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T15:45:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:17Z"}, "message": "fix cfail tests", "tree": {"sha": "9aa05a1e5d2af03d15544760c7bd9f043fc2e560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa05a1e5d2af03d15544760c7bd9f043fc2e560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "html_url": "https://github.com/rust-lang/rust/commit/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/comments", "author": null, "committer": null, "parents": [{"sha": "ca17d0812686012307e364a4dce7b84af6886f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca17d0812686012307e364a4dce7b84af6886f91", "html_url": "https://github.com/rust-lang/rust/commit/ca17d0812686012307e364a4dce7b84af6886f91"}], "stats": {"total": 807, "additions": 195, "deletions": 612}, "files": [{"sha": "f15157d126ed76ee64c85f474f66a9c42efcdeb6", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -11,7 +11,7 @@\n \n struct sty(Vec<int> );\n \n-fn unpack(_unpack: |v: &sty| -> Vec<int> ) {}\n+fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<int> {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "f14668192f8503cfd0d4485b900ef5d2b1247303", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = |&:| println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "e268b0e93fdad4e9aac45a114c0adeb738d51b28", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that fn-to-block coercion isn't incorrectly lifted over\n-// other tycons.\n-\n-fn main() {\n-    fn f(f: fn(fn(fn()))) {\n-    }\n-\n-    fn g(f: fn(||)) {\n-    }\n-\n-    f(g);\n-    //~^ ERROR mismatched types: expected `fn(fn(fn()))`\n-}"}, {"sha": "76af956a26fff7a9a908163d5c578fa49b8fc908", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that fn-to-block coercion isn't incorrectly lifted over\n-// other tycons.\n-\n-fn coerce(b: ||) -> extern fn() {\n-    fn lol(f: extern fn(v: ||) -> extern fn(),\n-           g: ||) -> extern fn() { return f(g); }\n-    fn fn_id(f: extern fn()) -> extern fn() { return f }\n-    return lol(fn_id, b);\n-    //~^ ERROR mismatched types\n-}\n-\n-fn main() {\n-    let i = 8i;\n-    let f = coerce(|| println!(\"{}\", i) );\n-    f();\n-}"}, {"sha": "a6801a6a51a52d10ae228bed6b16caa563570240", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -24,7 +24,7 @@ fn a() {\n     println!(\"{}\", *q);\n }\n \n-fn borrow(_x: &[int], _f: ||) {}\n+fn borrow<F>(_x: &[int], _f: F) where F: FnOnce() {}\n \n fn b() {\n     // here we alias the mutable vector into an imm slice and try to"}, {"sha": "2804b8c48a703f4f4be64c71d3ac5effd36452af", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -13,7 +13,7 @@ enum Either<T, U> { Left(T), Right(U) }\n struct X(Either<(uint,uint), fn()>);\n \n impl X {\n-    pub fn with(&self, blk: |x: &Either<(uint,uint), fn()>|) {\n+    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(uint, uint), fn()>) {\n         let X(ref e) = *self;\n         blk(e)\n     }\n@@ -25,7 +25,7 @@ fn main() {\n         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n             match opt {\n                 &Either::Right(ref f) => {\n-                    x = X(Either::Left((0,0)));\n+                    x = X(Either::Left((0, 0)));\n                     (*f)()\n                 },\n                 _ => panic!()"}, {"sha": "e519e57d178c85b10dc9fd68ec308aecdcc660e7", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: ||) { f(); }\n+fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n     let x: int;\n     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`"}, {"sha": "6dbdff9441d55a8b0283bedfc3598c5b88e206a4", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,53 +10,54 @@\n \n // Ensure that invoking a closure counts as a unique immutable borrow\n \n+#![feature(unboxed_closures)]\n \n-type Fn<'a> = ||:'a;\n+type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {\n-    f: ||: 'a\n+    f: Box<FnMut() + 'a>\n }\n \n-fn call(f: |Fn|) {\n-    f(|| {\n-    //~^ ERROR: closure requires unique access to `f` but it is already borrowed\n-        f(|| {})\n+fn call<F>(mut f: F) where F: FnMut(Fn) {\n+    f(box || {\n+    //~^ ERROR: cannot borrow `f` as mutable more than once\n+        f(box || {})\n     });\n }\n \n fn test1() {\n-    call(|a| {\n-        a();\n+    call(|mut a| {\n+        a.call_mut(());\n     });\n }\n \n-fn test2(f: &||) {\n-    (*f)(); //~ ERROR: closure invocation in a `&` reference\n+fn test2<F>(f: &F) where F: FnMut() {\n+    (*f)(); //~ ERROR: cannot borrow immutable dereference of `&`-pointer `*f` as mutable\n }\n \n-fn test3(f: &mut ||) {\n+fn test3<F>(f: &mut F) where F: FnMut() {\n     (*f)();\n }\n \n fn test4(f: &Test) {\n-    (f.f)() //~ ERROR: closure invocation in a `&` reference\n+    f.f.call_mut(()) //~ ERROR: cannot borrow immutable dereference of `Box` `*f.f` as mutable\n }\n \n fn test5(f: &mut Test) {\n-    (f.f)()\n+    f.f.call_mut(())\n }\n \n fn test6() {\n-    let f = || {};\n-    (|| {\n+    let mut f = |&mut:| {};\n+    (|&mut:| {\n         f();\n     })();\n }\n \n fn test7() {\n-    fn foo(_: |g: |int|, b: int|) {}\n-    let f = |g: |int|, b: int| {};\n-    f(|a| { //~ ERROR: cannot borrow `f` as immutable because previous closure\n+    fn foo<F>(_: F) where F: FnMut(Box<FnMut(int)>, int) {}\n+    let mut f = |&mut: g: Box<FnMut(int)>, b: int| {};\n+    f(box |a| { //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n         foo(f); //~ ERROR: cannot move out of captured outer variable\n     }, 3);\n }"}, {"sha": "47a47d0443255aab3e06d4d13f3970637a47593b", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -22,37 +22,37 @@ fn set(x: &mut int) {\n \n fn a() {\n     let mut x = 3i;\n-    let c1 = || x = 4;\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| x = 4;\n+    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || get(&x); //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n     let mut x = 3i;\n-    let c2 = || x * 5;\n+    let c2 = |&mut:| x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n     let mut x = 3i;\n-    let c1 = || get(&x);\n+    let c1 = |&mut:| get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n     let mut x = box 3i;\n-    let c1 = || get(&*x);\n+    let c1 = |&mut:| get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n \n@@ -62,7 +62,7 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || get(&*x.f);\n+    let c1 = |&mut:| get(&*x.f);\n     *x.f = 5; //~ ERROR cannot assign to `*x.f`\n }\n \n@@ -72,8 +72,8 @@ fn h() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || get(&*x.f);\n-    let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n+    let c1 = |&mut:| get(&*x.f);\n+    let c2 = |&mut:| *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n }\n \n fn main() {"}, {"sha": "30e1421ba2660fb873bba3bc85488f9ab9abe519", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,9 +20,9 @@ fn set(x: &mut int) {\n }\n \n fn a(x: &int) {\n-    let c1 = || set(&mut *x);\n+    let c1 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n-    let c2 = || set(&mut *x);\n+    let c2 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n     //~| ERROR closure requires unique access\n }"}, {"sha": "0f284b5384913f41dce038cdd46da80b67894333", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -15,8 +15,8 @@\n \n fn a() {\n     let mut x = 3i;\n-    let c1 = || x = 4;\n-    let c2 = || x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| x = 4;\n+    let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn set(x: &mut int) {\n@@ -25,20 +25,20 @@ fn set(x: &mut int) {\n \n fn b() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n     let mut x = 3i;\n-    let c1 = || x = 5;\n-    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| x = 5;\n+    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n     let mut x = 3i;\n-    let c1 = || x = 5;\n-    let c2 = || { let _y = || set(&mut x); }; // (nested closure)\n+    let c1 = |&mut:| x = 5;\n+    let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n \n@@ -48,8 +48,8 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || set(&mut *x.f);\n-    let c2 = || set(&mut *x.f);\n+    let c1 = |&mut:| set(&mut *x.f);\n+    let c2 = |&mut:| set(&mut *x.f);\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n "}, {"sha": "a9cc9e967f6ff70ecdabda9052ef7f118864f3d6", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let mut this = &mut Foo {\n         x: 1,\n     };\n-    let r = || {\n+    let mut r = |&mut:| {\n         let p = &this.x;\n         &mut this.x; //~ ERROR cannot borrow\n     };"}, {"sha": "9a772cc49b87b62ac8b6e84caa81bbf0b7b0467f", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -23,27 +23,27 @@ fn set(x: &mut int) -> int {\n }\n \n fn a(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || get(x);\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| get(x);\n }\n \n fn b(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn c(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n }\n \n fn d(x: &mut int) {\n-    let c1 = || set(x);\n-    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| set(x);\n+    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn e(x: &mut int) {\n-    let c1: || = || x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n+    let c1 = |&mut:| x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n }\n \n fn main() {"}, {"sha": "23c90fcf574d5bb45b920cb6ba60a6b84475f31b", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -25,7 +25,7 @@ impl Drop for Foo {\n \n fn main() {\n   let mut ptr = box Foo { x: 0 };\n-  let test = |foo: &Foo| {\n+  let mut test = |&mut: foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };\n   test(&*ptr); //~ ERROR cannot borrow `*ptr`"}, {"sha": "5496a9dd4b3611c78b2a0fc70f7f4845ea5f6d08", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let j: || -> int = || {\n+    let j = |&:| -> int {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "33c284c71b341df0558956f2e861747d3d5fa37f", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f: || -> int = || {\n+    let f  = |&:| -> int {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "0428ee83065173a99156ebf4a7bfa7e78d8cbdd5", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n impl Foo {\n-    pub fn foo(&mut self, fun: |&int|) {\n+    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&int) {\n         for f in self.n.iter() {\n             fun(f);\n         }"}, {"sha": "f798d170f963b35dd8a2f255c96f5c6df4694596", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -18,7 +18,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { panic!() }\n-fn for_func(_f: || -> bool) { panic!() }\n+fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<int>) {"}, {"sha": "ff038b545d5fec4013c51b85f3e2692956b2f276", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -112,7 +112,9 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n+fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n+    F: FnMut(&'r mut uint) -> bool,\n+{\n     // Here we check that when you break out of an inner loop, the\n     // borrows that go out of scope as you exit the inner loop are\n     // removed from the bitset.\n@@ -128,7 +130,7 @@ fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n     }\n }\n \n-fn loop_loop_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n+fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where F: FnMut(&'r mut uint) -> bool {\n     // Similar to `loop_break_pops_scopes` but for the `loop` keyword\n \n     while cond() {"}, {"sha": "85fc7fb87b34034b9a6c4379b7a4191799713b1f", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -18,7 +18,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { panic!() }\n-fn for_func(_f: || -> bool) { panic!() }\n+fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<int>) {"}, {"sha": "5c282495cc239419705136bcbb19aaf62fb720f4", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n use std::thread::Thread;\n \n-fn borrow(v: &int, f: |x: &int|) {\n+fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n     f(v);\n }\n "}, {"sha": "b6a71fcd446abe72bb6fbdf3067a47ab2e0750e6", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow(v: &int, f: |x: &int|) {\n+fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n     f(v);\n }\n "}, {"sha": "0ada3db47a4b6ec1884fa2bae169fb9bcae24d3c", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -13,14 +13,14 @@ struct point { x: int, y: int }\n \n trait methods {\n     fn impurem(&self);\n-    fn blockm(&self, f: ||);\n+    fn blockm<F>(&self, f: F) where F: FnOnce();\n }\n \n impl methods for point {\n     fn impurem(&self) {\n     }\n \n-    fn blockm(&self, f: ||) { f() }\n+    fn blockm<F>(&self, f: F) where F: FnOnce() { f() }\n }\n \n fn a() {"}, {"sha": "7849475ec67991cb519cf33dff826920764bfc84", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -12,7 +12,7 @@\n // (locally rooted) mutable, unique vector, and that we then prevent\n // modifications to the contents.\n \n-fn takes_imm_elt(_v: &int, f: ||) {\n+fn takes_imm_elt<F>(_v: &int, f: F) where F: FnOnce() {\n     f();\n }\n "}, {"sha": "35f0751aa7895a941f1adecaf1a7d581114ec7da", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let bar = box 3;\n-    let _g = || {\n+    let _g = |&mut:| {\n         let _h = move |:| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "c5d23925a89b1f2d25c5470e2b43ea00a318457c", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with(f: |&String|) {}\n+fn with<F>(f: F) where F: FnOnce(&String) {}\n \n fn arg_item(&_x: &String) {}\n     //~^ ERROR cannot move out of dereference of `&`-pointer"}, {"sha": "0a47353683cfb7cfa82483a199c9767260e81183", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -32,7 +32,7 @@ fn foo() {\n \n fn bar() {\n     // Original borrow ends at end of closure\n-    || {\n+    |&:| {\n         let mut x = 1u;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow"}, {"sha": "1f257b8a5cba847d2b0d281a1ac0c78bea9cbbf4", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n fn cond() -> bool { true }\n \n-fn foo(_: ||) {}\n+fn foo<F>(_: F) where F: FnOnce() {}\n \n fn main() {\n     let pth = break; //~ ERROR: `break` outside of loop"}, {"sha": "a02d6b7f5173acc3ea6b4f4f36b03baf020f4c02", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct X {\n-    field: ||:'static + Send,\n+struct X<F> where F: FnOnce() + 'static + Send {\n+    field: F,\n }\n \n-fn foo(blk: ||:'static) -> X {\n-    return X { field: blk }; //~ ERROR expected bounds `Send`\n+fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type\n+    return X { field: blk };\n }\n \n fn main() {"}, {"sha": "6b25e4be2d9a3f033e9e51d53ebcc379a74ef3e4", "filename": "src/test/compile-fail/closure-bounds-not-builtin.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-trait Foo {}\n-\n-fn take(f: ||:Foo) {\n-    //~^ ERROR only the builtin traits can be used as closure or object bounds\n-}\n-\n-fn main() {}"}, {"sha": "d27529bad43052b776fc8702005e62cd1c01425d", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn bar(blk: ||:'static) {\n+fn bar<F>(blk: F) where F: FnOnce() + 'static {\n }\n \n fn foo(x: &()) {\n     bar(|| { //~ ERROR cannot infer an appropriate lifetime\n         let _ = x;\n-        //~^ ERROR captured variable `x` does not outlive\n     })\n }\n "}, {"sha": "509fffc5c9a882e2806b64b587fbf15d1c73e7e5", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n \n-fn take_any(_: ||) {\n+fn take_any<F>(_: F) where F: FnOnce() {\n }\n \n-fn take_const_owned(_: ||:Sync+Send) {\n+fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n }\n \n-fn give_any(f: ||) {\n+fn give_any<F>(f: F) where F: FnOnce() {\n     take_any(f);\n }\n \n-fn give_owned(f: ||:Send) {\n+fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Sync`, found bounds `Send`\n+    take_const_owned(f); //~ ERROR the trait `core::kinds::Sync` is not implemented for the type\n }\n \n fn main() {}"}, {"sha": "ef01c96addeb8f555f4ba26919e7f3b65b73c961", "filename": "src/test/compile-fail/closure-reform-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -17,7 +17,7 @@ fn call_bare(f: fn(&str)) {\n \n fn main() {\n     let string = \"world!\";\n-    let f: |&str| = |s| println!(\"{}{}\", s, string);\n+    let f = |&: s: &str| println!(\"{}{}\", s, string);\n     call_bare(f)    //~ ERROR mismatched types\n }\n "}, {"sha": "7a1ebed0a82acb433a9d128ae54485fce6fe090b", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(f: || -> !) {}\n-\n-fn main() {\n-    // Type inference didn't use to be able to handle this:\n-    foo(|| panic!());\n-    foo(|| -> ! panic!());\n-    foo(|| 22i); //~ ERROR computation may converge in a function marked as diverging\n-    foo(|| -> ! 22i); //~ ERROR computation may converge in a function marked as diverging\n-    let x = || -> ! 1i; //~ ERROR computation may converge in a function marked as diverging\n-}"}, {"sha": "52f4c4749e224f90e1455befddc899c5cf7557a6", "filename": "src/test/compile-fail/coerce-bare-fn-to-closure-and-proc.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that coercions from fn item types are ok, but not fn pointer\n-// types to closures/procs are not allowed.\n-\n-fn foo() {}\n-\n-fn fn_item_type() {\n-    let f = foo;\n-\n-    let f_closure: || = f;\n-}\n-\n-fn fn_pointer_type() {\n-    let f = foo as fn();\n-    let f_closure: || = f;\n-    //~^ ERROR: mismatched types\n-}\n-\n-fn main() { }"}, {"sha": "46f5f41d7282f89254c2c022629204c0aefe2f39", "filename": "src/test/compile-fail/dead-code-closure-bang.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test FIXME(#20574)\n+\n #![deny(unreachable_code)]\n \n fn main() {\n-    let x: || -> ! = || panic!();\n+    let x = |:| panic!();\n     x();\n     std::io::println(\"Foo bar\"); //~ ERROR: unreachable statement\n }"}, {"sha": "d7586af291e8638d77de1aa3344366c5c7272220", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -11,8 +11,10 @@\n extern fn f() {\n }\n \n+fn is_fn<F>(_: F) where F: Fn() {}\n+\n fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n-    let _x: || = f; //~ ERROR mismatched types\n+    is_fn(f); //~ ERROR the trait `core::ops::Fn()` is not implemented for the type `extern \"C\" fn()\n }"}, {"sha": "039628b67528289e2780b50d4f3441ea3199d748", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -12,7 +12,7 @@ fn takes_imm(x: &int) { }\n \n fn takes_mut(x: &mut int) { }\n \n-fn apply<T>(t: T, f: |T|) {\n+fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)\n }\n "}, {"sha": "827e648cca86d0a32113bf2a6ca38cecbea4cd2f", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,7 +14,7 @@ fn f(y: Box<int>) {\n }\n \n fn g() {\n-    let _frob: |Box<int>| = |q| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob = |&: q: Box<int>| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "dec4fc3b8f5b274649bb7f06a280f1cd50a64210", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test<'x>(x: &'x int) {\n-    drop::< for<'z>|&'z int| -> &'z int >(|z| {\n+    drop::<Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n     });"}, {"sha": "f496c1e1227dbcc3b9be173558453f298a2c5e2c", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,7 +20,7 @@ impl Drop for Foo {\n \n fn main() {\n     let mut ptr = box Foo { x: 0 };\n-    let test = |foo: &Foo| {\n+    let mut test = |&mut: foo: &Foo| {\n         println!(\"access {}\", foo.x);\n         ptr = box Foo { x: ptr.x + 1 };\n         println!(\"access {}\", foo.x);"}, {"sha": "89667937531536fe306c3eb881b6a1e0dc772d02", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut v = vec!(1i);\n-    let f = || v.push(2i);\n+    let mut f = |&mut:| v.push(2i);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "5033576a23482e2847b8bac03c1ccc99fb6e8300", "filename": "src/test/compile-fail/issue-14182.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test FIXME(japari) remove test\n+\n struct Foo {\n     f: for <'b> |&'b int|:\n       'b -> &'b int //~ ERROR use of undeclared lifetime name `'b`"}, {"sha": "9d2212b69cee116de1d270b87f1010416b4ab45a", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,7 +14,7 @@\n // wrong arity.\n \n fn _foo<F: Fn()> (f: F) {\n-    |t| f(t); //~ ERROR E0057\n+    |&: t| f(t); //~ ERROR E0057\n }\n \n fn main() {}"}, {"sha": "ad2ebff59bc51ad226ac51c9c04267772539bf75", "filename": "src/test/compile-fail/issue-17636.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait MyItem<T> {}\n-impl<T> MyItem<T> for T {}\n-\n-pub fn build_archive<'a, I: MyItem<&'a (|&uint|:'a)>>(files: I) {}\n-\n-fn main() {\n-    build_archive(&(|_| { }));\n-//~^ ERROR not implemented\n-}"}, {"sha": "970b14c7eb7cc612224a3e12d1bbf226bbd78c5d", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -12,7 +12,7 @@\n // and rejected.\n \n fn main() {\n-    (|| box *[0u].as_slice())();\n+    (|&:| box *[0u].as_slice())();\n     //~^ ERROR cannot move out of dereference\n     //~^^ ERROR cannot move a value of type [uint]\n }"}, {"sha": "f87a0d774fa7c7c9745b833654d097c658aa5d29", "filename": "src/test/compile-fail/issue-18343.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Obj<'a> {\n-    closure: ||: 'a -> u32\n+struct Obj<F> where F: FnMut() -> u32 {\n+    closure: F,\n }\n \n fn main() {\n     let o = Obj { closure: || 42 };\n-    o.closure(); //~ ERROR type `Obj<'_>` does not implement any method in scope named `closure`\n+    o.closure(); //~ ERROR does not implement any method in scope named `closure`\n     //~^ NOTE use `(s.closure)(...)` if you meant to call the function stored in the `closure` field\n }"}, {"sha": "e93acb3f064af5c38b441e4d8d33e4e4fee808d7", "filename": "src/test/compile-fail/issue-18345.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type Step<'s, R, T> = |R, T|: 's -> R;\n-type Transducer<'t, R, T, U> = |Step<'t, R, U>|: 't -> Step<'t, R, T>;\n-\n-fn mapping<'f, R, T, U>(f: |T|: 'f -> U) -> &'f Transducer<'f, R, T, U> {\n-    |step| |r, x|\n-        step(r, f(x))\n-        //~^ ERROR the type of this value must be known in this context\n-}\n-\n-fn main() {}"}, {"sha": "3a0fbddf8185fa3d9fdb5345023d79b131d150f4", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -13,25 +13,25 @@ use std::cell::RefCell;\n fn main() {\n     let c = RefCell::new(vec![]);\n     let mut y = 1u;\n-    c.push(|| y = 0);\n-    c.push(|| y = 0);\n+    c.push(box || y = 0);\n+    c.push(box || y = 0);\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n     let c = RefCell::new(vec![]);\n     let mut y = 1u;\n \n-    Push::push(&c, || y = 0);\n-    Push::push(&c, || y = 0);\n+    Push::push(&c, box || y = 0);\n+    Push::push(&c, box || y = 0);\n }\n \n trait Push<'c> {\n-    fn push<'f: 'c>(&self, push: ||:'f -> ());\n+    fn push<'f: 'c>(&self, push: Box<FnMut() + 'f>);\n }\n \n-impl<'c> Push<'c> for RefCell<Vec<||:'c>> {\n-    fn push<'f: 'c>(&self, fun: ||:'f -> ()) {\n+impl<'c> Push<'c> for RefCell<Vec<Box<FnMut() + 'c>>> {\n+    fn push<'f: 'c>(&self, fun: Box<FnMut() + 'f>) {\n         self.borrow_mut().push(fun)\n     }\n }"}, {"sha": "aa7c4c3060bdb93ebd4a7a04df865dad2ae4ff60", "filename": "src/test/compile-fail/issue-19009.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(lang_items)]\n-#![no_std]\n-#![crate_type=\"rlib\"]\n-#[lang=\"sized\"] pub trait Sized for Sized? {}\n-\n-fn ice(f: for <'s> ||\n-    :'s //~ ERROR use of undeclared lifetime name `'s`\n-) {}\n-fn main() { ice(||{}) }"}, {"sha": "545e3f8acb139caf7eecd36d2df47779ae4d0bed", "filename": "src/test/compile-fail/issue-19141.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let n = 0u;\n-\n-    let f = move || n += 1;  //~error boxed closures can't capture by value\n-}"}, {"sha": "e5d8d3327199b9dfc361d0c1c9c2014fcfbe2b71", "filename": "src/test/compile-fail/issue-20193.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(t: &mut int){\n-    println!(\"{}\", t);\n-}\n-\n-fn main() {\n-    let test = 10;\n-\n-    let h = move || {  //~error boxed closures can't capture by value\n-        let mut r = &mut test.clone();\n-        foo(r);\n-    };\n-\n-    h();\n-}"}, {"sha": "3ff4557ae80ed3155449e1864ec15be361fb8a24", "filename": "src/test/compile-fail/issue-20228-1.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct S;\n-\n-impl S {\n-    fn foo(&self) {\n-        let _ = move || { self };  //~error boxed closures can't capture by value\n-    }\n-}\n-\n-fn main() {\n-}"}, {"sha": "5fec4268bf7c2b78cb3cfa10b27babf86f8b4dbc", "filename": "src/test/compile-fail/issue-20228-2.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct S;\n-\n-impl S {\n-    fn foo(&self) {\n-        let _ = move || { self.foo() };  //~error boxed closures can't capture by value\n-    }\n-}\n-\n-fn main() {\n-}"}, {"sha": "691660f897157f309dfcb52a2e3420b4db1dd729", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |A| -> Vec<B> );\n+    fn bind<B, F>(&self, f: F) where F: FnMut(A) -> Vec<B>;\n }\n \n impl<A> vec_monad<A> for Vec<A> {\n-    fn bind<B>(&self, f: |A| -> Vec<B> ) {\n+    fn bind<B, F>(&self, mut f: F) where F: FnMut(A) -> Vec<B> {\n         let mut r = panic!();\n         for elt in self.iter() { r = r + f(*elt); }\n         //~^ ERROR the type of this value must be known\n    }\n }\n fn main() {\n-    [\"hi\"].bind(|x| [x] );\n+    [\"hi\"].bind(|&mut: x| [x] );\n     //~^ ERROR type `[&str; 1]` does not implement any method in scope named `bind`\n }"}, {"sha": "c67d6b1ce8f7ce17e063dcc42ab31835527ca254", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let needlesArr: Vec<char> = vec!('a', 'f');\n-    needlesArr.iter().fold(|x, y| {\n+    needlesArr.iter().fold(|&: x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n     //"}, {"sha": "86ab9be77fc6808389e948f913e33d1ac10ff23e", "filename": "src/test/compile-fail/issue-3563.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n trait A {\n-  fn a(&self) {\n-      || self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n-  }\n+    fn a(&self) {\n+        |&:| self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n+        //~^ ERROR expected (), found closure\n+    }\n }\n fn main() {}"}, {"sha": "d4f9ea5b276f9fc4ed4165528e021999db1e37c5", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n fn id<T>(t: T) -> T { t }\n \n-fn f<'r, T>(v: &'r T) -> ||: 'r -> T {\n-    id(|| *v) //~ ERROR cannot infer\n+fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+    id(box |&mut:| *v) //~ ERROR cannot infer\n }\n \n fn main() {\n     let v = &5i;\n-    println!(\"{}\", f(v)());\n+    println!(\"{}\", f(v).call_mut(()));\n }"}, {"sha": "5063a78e38348d6eb0e4e8fcbdaf4ebfe70f7e30", "filename": "src/test/compile-fail/issue-4523.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foopy() {}\n-\n-static f: ||: 'static = foopy;\n-\n-fn main () {\n-    f(); //~ ERROR closure invocation in a static location\n-}"}, {"sha": "fef414ce978a8756e263cc821d6035950611033d", "filename": "src/test/compile-fail/issue-5216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn f() { }\n-struct S(||); //~ ERROR explicit lifetime bound required\n+struct S(Box<FnMut()>); //~ ERROR explicit lifetime bound required\n pub static C: S = S(f);\n \n \n fn g() { }\n-type T = ||;  //~ ERROR explicit lifetime bound required\n+type T = Box<FnMut()>;  //~ ERROR explicit lifetime bound required\n pub static D: T = g;\n \n fn main() {}"}, {"sha": "1691688fd84645f65d31446cae23cdd48d3e2f44", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -11,6 +11,6 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x: |int| -> int = |ref x| { x += 1; };\n+    let x = |&: ref x: int| -> int { x += 1; };\n     //~^ ERROR binary assignment operation `+=` cannot be applied to type `&int`\n }"}, {"sha": "433ae3bf89e03a540c9965ef21f327556d044c52", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -17,13 +17,13 @@ fn twice(x: Box<uint>) -> uint {\n      *x * 2\n }\n \n-fn invoke(f: || -> uint) {\n+fn invoke<F>(f: F) where F: FnOnce() -> uint {\n      f();\n }\n \n fn main() {\n       let x  : Box<uint>  = box 9;\n-      let sq : || -> uint =  || { *x * *x };\n+      let sq =  |:| { *x * *x };\n \n       twice(x); //~ ERROR: cannot move out of\n       invoke(sq);"}, {"sha": "897afb1c10245a256ddeb449afe47292b8b44b6b", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -25,7 +25,7 @@ impl CrateId {\n \n pub fn remove_package_from_database() {\n     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-    let push_id = |installed_id: &CrateId| {\n+    let push_id = |&mut: installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n         //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n         // conflicting requirements\n@@ -38,7 +38,7 @@ pub fn remove_package_from_database() {\n \n }\n \n-pub fn list_database(f: |&CrateId|) {\n+pub fn list_database<F>(mut f: F) where F: FnMut(&CrateId) {\n     let stuff = [\"foo\", \"bar\"];\n \n     for l in stuff.iter() {"}, {"sha": "b5725249812f6ccd2edfb018b5d3fddbe9d62ded", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -57,9 +57,6 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     // mutable object types are not ok\n     assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::kinds::Copy` is not implemented\n \n-    // closures are like an `&mut` object\n-    assert_copy::<||>(); //~ ERROR `core::kinds::Copy` is not implemented\n-\n     // unsafe ptrs are ok\n     assert_copy::<*const int>();\n     assert_copy::<*const &'a mut int>();"}, {"sha": "c300096caf1e09c87bcb4f8e6c99d8e9cecbe837", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -27,14 +27,9 @@ fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n-fn closure_with_no_bound_not_ok<'a>() {\n-    assert_send::<||:'static>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n-}\n-\n fn object_with_send_bound_ok() {\n     assert_send::<&'static (Dummy+Send)>();\n     assert_send::<Box<Dummy+Send>>();\n-    assert_send::<||:Send>;\n }\n \n fn main() { }"}, {"sha": "7513e1bc21a4a7e1a953beb1dcbde9af804cb43d", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -35,7 +35,7 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n+    let x = |&: mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: int) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n@@ -65,15 +65,15 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |mut y: int| y = 32i;\n+    let x = |&mut: mut y: int| y = 32i;\n     fn nothing(mut foo: int) { foo = 37i; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n     let mut _allowed = 1i;\n }\n \n-fn callback(f: ||) {}\n+fn callback<F>(f: F) where F: FnOnce() {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]"}, {"sha": "5c8e73e674751d109db04ffec9e4d657e0abae90", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,7 +20,7 @@ mod foo {\n     }\n }\n \n-fn callback<T>(_f: || -> T) -> T { panic!() }\n+fn callback<T, F>(_f: F) -> T where F: FnOnce() -> T { panic!() }\n unsafe fn unsf() {}\n \n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block"}, {"sha": "82de02f09813ce9a7ca0acd663f32048cd1007a9", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: || -> int) -> int { f() }\n+fn force<F>(f: F) -> int where F: FnOnce() -> int { f() }\n fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "14af49dfc49c5d379c9907fb9b49e66041d659a9", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,7 +20,7 @@ enum E {\n     Baz\n }\n \n-fn f(s: &S, g: |&S|) {\n+fn f<G>(s: &S, g: G) where G: FnOnce(&S) {\n     g(s)\n }\n "}, {"sha": "ab762332ee43da3ba48d32eeca32b4ca3cfd4b25", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,5 +14,5 @@ fn test(_x: Box<uint>) {}\n \n fn main() {\n     let i = box 3;\n-    let _f = || test(i); //~ ERROR cannot move out\n+    let _f = |&:| test(i); //~ ERROR cannot move out\n }"}, {"sha": "787e25ea319544606154d49020210379426a1f91", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -12,11 +12,13 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n+#![feature(unboxed_closures)]\n+\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that\n     // accepts itself as argument:\n-    c: |&mut R, bool|: 'a\n+    c: Box<FnMut(&mut R, bool) + 'a>\n }\n \n fn innocent_looking_victim() {\n@@ -27,8 +29,8 @@ fn innocent_looking_victim() {\n         } else {\n             match x {\n                 Some(ref msg) => {\n-                    (f.c)(f, true);\n-                    //~^ ERROR: cannot borrow `*f` as mutable because\n+                    f.c.call_mut((f, true));\n+                    //~^ ERROR: cannot borrow `*f` as mutable more than once at a time\n                     println!(\"{}\", msg);\n                 },\n                 None => panic!(\"oops\"),\n@@ -37,8 +39,8 @@ fn innocent_looking_victim() {\n     })\n }\n \n-fn conspirator(f: |&mut R, bool|) {\n-    let mut r = R {c: f};\n+fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n+    let mut r = R {c: box f};\n     f(&mut r, false) //~ ERROR use of moved value\n }\n "}, {"sha": "ebda4e9103d604669547d28dd73e1d4e2a2aef8f", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn let_in<T>(x: T, f: |T|) {}\n+fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n \n fn main() {\n     let_in(3u, |i| { assert!(i == 3i); });"}, {"sha": "575e9864a92d3bd633febe9e08cdfb73c86acf9f", "filename": "src/test/compile-fail/refutable-pattern-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f = |3: int| println!(\"hello\");\n+    let f = |&: 3: int| println!(\"hello\");\n     //~^ ERROR refutable pattern in function argument: `_` not covered\n     f(4);\n }"}, {"sha": "9e8281faf2f567c4f4bf4561182420c0771a1885", "filename": "src/test/compile-fail/region-bound-on-closure-outlives-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn call_rec(f: |uint| -> uint) -> uint {\n-    (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+fn call_rec<F>(mut f: F) -> uint where F: FnMut(uint) -> uint {\n+    (|&mut: x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n }\n \n fn main() {}"}, {"sha": "bb895a318ff17d272128783425d352b16278e6a0", "filename": "src/test/compile-fail/regionck-closure-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn env<'a>(blk: |p: ||: 'a|) {\n-    // Test that the closure here cannot be assigned\n-    // the lifetime `'a`, which outlives the current\n-    // block.\n-\n-    let mut state = 0i;\n-    let statep = &mut state;\n-    blk(|| *statep = 1i); //~ ERROR captured variable `statep` does not outlive\n-}\n-\n-fn no_env_no_for<'a>(blk: |p: |||: 'a) {\n-    // Test that a closure with no free variables CAN\n-    // outlive the block in which it is created.\n-\n-    blk(|| ())\n-}\n-\n-fn repeating_loop() {\n-    // Test that the closure cannot be created within `loop` loop and\n-    // called without, even though the state that it closes over is\n-    // external to the loop.\n-\n-    let closure;\n-    let state = 0i;\n-\n-    loop {\n-        closure = || state; //~ ERROR cannot infer\n-        break;\n-    }\n-\n-    closure();\n-}\n-\n-fn repeating_while() {\n-    // Test that the closure cannot be created within `while` loop and\n-    // called without, even though the state that it closes over is\n-    // external to the loop.\n-\n-    let closure;\n-    let state = 0i;\n-\n-    while true {\n-        closure = || state; //~ ERROR cannot infer\n-        break;\n-    }\n-\n-    closure();\n-}\n-\n-fn main() {}"}, {"sha": "fb60d8f7b27a4acb442fe0fcc7b3fafc3b5911d3", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -16,7 +16,7 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let _f = || {\n+        let _f = |&:| {\n             let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer\n             *p = 3u;\n         };"}, {"sha": "0628bbb8bb08eb70a85813bb450bd8c8ee155da3", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -69,11 +69,6 @@ fn object_with_send_bound_not_ok<'a>() {\n     //~^ ERROR declared lifetime bound not satisfied\n }\n \n-fn closure_with_lifetime_not_ok<'a>() {\n-    assert_send::<||:'a>();\n-    //~^ ERROR not implemented\n-}\n-\n // unsafe pointers are ok unless they point at unsendable things\n \n struct UniqueUnsafePtr(Unique<*const int>);"}, {"sha": "1774c9fada946fc6a3806735a0052ace3f3d6a48", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -27,14 +27,14 @@ fn compute(x: &ast) -> uint {\n     }\n }\n \n-fn map_nums<'a,'b>(x: &ast, f: |uint| -> uint) -> &'a ast<'b> {\n+fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(uint) -> uint {\n     match *x {\n       ast::num(x) => {\n-        return &ast::num(f(x)); //~ ERROR borrowed value does not live long enough\n+        return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n       }\n       ast::add(x, y) => {\n-        let m_x = map_nums(x, |z| f(z));\n-        let m_y = map_nums(y, |z| f(z));\n+        let m_x = map_nums(x, f);\n+        let m_y = map_nums(y, f);\n         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n       }\n     }"}, {"sha": "547accbf0860d27ce85d7b65aedc27f0c709123d", "filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: |x: &int|) {\n+fn with_int<F>(f: F) where F: FnOnce(&int) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "6d67bd80650fad0afa66f5e2a9e46087345eaa59", "filename": "src/test/compile-fail/regions-escape-bound-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: |x: &int|) {\n+fn with_int<F>(f: F) where F: FnOnce(&int) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "e3771cfebba255cf7f656f3e4153486b0c6c6829", "filename": "src/test/compile-fail/regions-escape-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -16,7 +16,7 @@\n struct S;\n \n impl S {\n-    fn f<B>(&self, _: |&i32| -> B) {\n+    fn f<B, F>(&self, _: F) where F: FnOnce(&i32) -> B {\n     }\n }\n "}, {"sha": "873d4cea0395e627f2dcbfcecdef8b4c59e19c81", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,7 +20,7 @@ impl<'a> Deref for &'a int {\n     }\n }\n \n-fn with<R:Deref>(f: |x: &int| -> R) -> int {\n+fn with<R:Deref, F>(f: F) -> int where F: FnOnce(&int) -> R {\n     f(&3).get()\n }\n "}, {"sha": "91a6ff789ea39fb9ca31fba3b84b238711b82b7f", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn of<'a,T>() -> |T|:'a { panic!(); }\n-fn subtype<T>(x: |T|) { panic!(); }\n-\n-fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n-    // Here, x, y, and z are free.  Other letters\n-    // are bound.  Note that the arrangement\n-    // subtype::<T1>(of::<T2>()) will typecheck\n-    // iff T1 <: T2.\n-\n-    subtype::< for<'a>|&'a T|>(\n-        of::< for<'a>|&'a T|>());\n-\n-    subtype::< for<'a>|&'a T|>(\n-        of::< for<'b>|&'b T|>());\n-\n-    subtype::< for<'b>|&'b T|>(\n-        of::<|&'x T|>());\n-\n-    subtype::<|&'x T|>(\n-        of::< for<'b>|&'b T|>());  //~ ERROR mismatched types\n-\n-    subtype::< for<'a,'b>|&'a T, &'b T|>(\n-        of::< for<'a>|&'a T, &'a T|>());\n-\n-    subtype::< for<'a>|&'a T, &'a T|>(\n-        of::< for<'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n-\n-    subtype::< for<'a,'b>|&'a T, &'b T|>(\n-        of::<|&'x T, &'y T|>());\n-\n-    subtype::<|&'x T, &'y T|>(\n-        of::< for<'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n-}\n-\n-fn main() {}"}, {"sha": "854584ec535e66ddb57ae48002b9c1a82e8bd3af", "filename": "src/test/compile-fail/regions-fns.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Before fn subtyping was properly implemented,\n-// we reported errors in this case:\n-\n-fn not_ok<'b>(a: &uint, b: &'b uint) {\n-    let mut g: |x: &uint| = |x: &'b uint| {};\n-    //~^ ERROR mismatched types\n-    g(a);\n-}\n-\n-fn main() {\n-}"}, {"sha": "6e59a29b8cf2236f8e57110c0f4d00171b5eb47a", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -30,7 +30,7 @@ fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     panic!();\n }\n \n-fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: |&'a &'b uint|) {\n+fn ordering4<'a, 'b, F>(a: &'a uint, b: &'b uint, x: F) where F: FnOnce(&'a &'b uint) {\n     // Do not infer ordering from closure argument types.\n     let z: Option<&'a &'b uint> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references"}, {"sha": "76bbe71cf75b5ba067ded39edfc32b3d20ef2ccb", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca17d0812686012307e364a4dce7b84af6886f91/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=ca17d0812686012307e364a4dce7b84af6886f91", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn wants_static_fn(_x: ||: 'static) {}\n-\n-fn main() {\n-    let i = 3i;\n-    wants_static_fn(|| {\n-        println!(\"i={}\", i); //~ ERROR captured variable `i` does not outlive\n-    })\n-}"}, {"sha": "0c250e38258cec518bddb3a48a81e14c965be69b", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n struct parameterized1<'a> {\n-    g: ||: 'a\n+    g: Box<FnMut() + 'a>\n }\n \n struct not_parameterized1 {\n-    g: ||: 'static\n+    g: Box<FnMut() + 'static>\n }\n \n struct not_parameterized2 {\n-    g: ||: 'static\n+    g: Box<FnMut() + 'static>\n }\n \n fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }"}, {"sha": "c8edd936bf28b232a16e7fa50e33aded71fef4ef", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -11,7 +11,10 @@\n \n fn borrow<T>(x: &T) -> &T {x}\n \n-fn foo(cond: || -> bool, make_box: || -> Box<int>) {\n+fn foo<C, M>(mut cond: C, mut make_box: M) where\n+    C: FnMut() -> bool,\n+    M: FnMut() -> Box<int>,\n+{\n     let mut y: &int;\n     loop {\n         let x = make_box();"}, {"sha": "ac41f2a5b3e47be208a6c53d257990538ab6dc51", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n fn select<'r>(x: &'r int, y: &'r int) -> &'r int { x }\n \n-fn with<T>(f: |x: &int| -> T) -> T {\n+fn with<T, F>(f: F) -> T where F: FnOnce(&int) -> T {\n     f(&20)\n }\n "}, {"sha": "190e444fe7e830bc92879e0e8792547767f753bb", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n \n struct invariant<'a> {\n-    f: |x: &mut &'a int|: 'static\n+    f: Box<FnOnce(&mut &'a int) + 'static>,\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "71d0c988c5e274e0849c8c6b8b24c4169d0f14d6", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,7 +10,7 @@\n \n \n struct invariant<'a> {\n-    f: ||: 'static -> &mut &'a int\n+    f: Box<for<'b> FnOnce() -> &'b mut &'a int + 'static>,\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "323ebc3c20b37c3aad95cc84735b4de70bdc0483", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,12 +14,12 @@ struct direct<'a> {\n \n struct indirect1 {\n     // Here the lifetime parameter of direct is bound by the fn()\n-    g: |direct|: 'static\n+    g: Box<FnOnce(direct) + 'static>\n }\n \n struct indirect2<'a> {\n     // But here it is set to 'a\n-    g: |direct<'a>|: 'static\n+    g: Box<FnOnce(direct<'a>) + 'static>\n }\n \n fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types"}, {"sha": "b9c721159f2b44c125117afe7e7523f6b047a821", "filename": "src/test/compile-fail/regions-name-undeclared.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -43,19 +43,16 @@ fn bar<'a>(x: &'a int) {\n \n     // &'a CAN be declared on functions and used then:\n     fn g<'a>(a: &'a int) { } // OK\n-    fn h(a: for<'a>|&'a int|) { } // OK\n-\n-    // But not in the bound of a closure, it's not in scope *there*\n-    fn i(a: for<'a>|&int|:'a) { } //~ ERROR undeclared lifetime\n+    fn h(a: Box<for<'a> FnOnce(&'a int)>) { } // OK\n }\n \n // Test nesting of lifetimes in fn type declarations\n fn fn_types(a: &'a int, //~ ERROR undeclared lifetime\n-            b: for<'a>|a: &'a int,\n-                       b: &'b int, //~ ERROR undeclared lifetime\n-                       c: for<'b>|a: &'a int,\n-                                  b: &'b int|,\n-                       d: &'b int|, //~ ERROR undeclared lifetime\n+            b: Box<for<'a> FnOnce(&'a int,\n+                                  &'b int, //~ ERROR undeclared lifetime\n+                                  Box<for<'b> FnOnce(&'a int,\n+                                                     &'b int)>,\n+                                  &'b int)>, //~ ERROR undeclared lifetime\n             c: &'a int) //~ ERROR undeclared lifetime\n {\n }"}, {"sha": "b7fe893a1f5bbca1a2857c8b9212e0238b02bdcc", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ignore(_f: for<'z>|&'z int| -> &'z int) {}\n+fn ignore<F>(_f: F) where F: for<'z> FnOnce(&'z int) -> &'z int {}\n \n fn nested() {\n     let y = 3;"}, {"sha": "5d8ef718ef0d354b7bfe93720256f002b8f55c2a", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -14,13 +14,13 @@ fn nested<'x>(x: &'x int) {\n     let y = 3;\n     let mut ay = &y;\n \n-    ignore::< for<'z>|&'z int|>(|z| {\n+    ignore::<Box<for<'z> FnMut(&'z int)>>(box |z| {\n         ay = x; //~ ERROR cannot infer\n         ay = &y;\n         ay = z;\n     });\n \n-    ignore::< for<'z>|&'z int| -> &'z int>(|z| {\n+    ignore::< Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n         if false { return x; }  //~ ERROR cannot infer an appropriate lifetime for automatic\n         if false { return ay; }\n         return z;"}, {"sha": "f9eecb60c6af118a72680ad92e3ef5fb1f7bc9b6", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -13,7 +13,7 @@ fn arg_item(box ref x: Box<int>) -> &'static int {\n     x //~^ ERROR borrowed value does not live long enough\n }\n \n-fn with<R>(f: |Box<int>| -> R) -> R { f(box 3) }\n+fn with<R, F>(f: F) -> R where F: FnOnce(Box<int>) -> R { f(box 3) }\n \n fn arg_closure() -> &'static int {\n     with(|box ref x| x) //~ ERROR borrowed value does not live long enough"}, {"sha": "bd14d31217e88269ee580d55bdb45ed2fa255b03", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -12,7 +12,7 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n-fn with<R>(f: for<'a>|x: &'a int| -> R) -> R {\n+fn with<R, F>(f: F) -> R where F: for<'a> FnOnce(&'a int) -> R {\n     f(&3)\n }\n "}, {"sha": "4dfd4f1709a6f2894da09c0d2a7deac419595b32", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -15,7 +15,7 @@\n // used to successfully compile because we failed to account for the\n // fact that fn(x: &int) rebound the region &.\n \n-fn with<R>(f: |x: &int| -> R) -> R {\n+fn with<R, F>(f: F) -> R where F: FnOnce(&int) -> R {\n     f(&3)\n }\n "}, {"sha": "d7b2a45cc63bb6f10457472e5ba11db80dbc0604", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -20,11 +20,4 @@ fn main() {\n         let x = f();\n         let y = f();\n     }\n-    // Boxed closure case\n-    {\n-        let mut x = 0u;\n-        let f = || &mut x; //~ ERROR cannot infer\n-        let x = f();\n-        let y = f();\n-    }\n }"}, {"sha": "991040bc62fea1ef8f4151002c6187db889e9283", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n struct closure_box<'a> {\n-    cl: ||: 'a\n+    cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it<'r>(x: ||: 'r) -> closure_box<'r> {\n+fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n \n fn main() {\n     let cl_box = {\n-        let mut i = 3;\n-        box_it(|| i += 1) //~ ERROR cannot infer\n+        let mut i = 3i;\n+        box_it(box || i += 1) //~ ERROR cannot infer\n     };\n-    (cl_box.cl)();\n+    cl_box.cl.call_mut(());\n }"}, {"sha": "3249794e5c822a879e0b83e6f5356cb1b93510bc", "filename": "src/test/compile-fail/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5b0454e9ee5ea9b99c6315174b498df60a7bb5/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs?ref=7d5b0454e9ee5ea9b99c6315174b498df60a7bb5", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:can't use type parameters from outer function; try using\n fn foo<T>(x: T) {\n-    fn bar(f: |T| -> T) { }\n+    fn bar(f: Box<FnMut(T) -> T>) { }\n }\n fn main() { foo(1); }"}]}