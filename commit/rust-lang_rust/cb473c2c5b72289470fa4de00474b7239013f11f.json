{"sha": "cb473c2c5b72289470fa4de00474b7239013f11f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDczYzJjNWI3MjI4OTQ3MGZhNGRlMDA0NzRiNzIzOTAxM2YxMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T16:35:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-25T16:35:19Z"}, "message": "Auto merge of #83424 - cjgillot:noparam, r=lcnr\n\nGenericParam does not need to be a HIR owner.\n\nThe special case is not required.\n\nUniversal impl traits design to regular generic parameters, and their content is owned by the enclosing item.\n\nExistential (and opaque) impl traits generate their own enclosing item, and are collected through it.", "tree": {"sha": "a7691ae8a7716ceeda9072e87ceb02b7634721c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7691ae8a7716ceeda9072e87ceb02b7634721c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb473c2c5b72289470fa4de00474b7239013f11f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb473c2c5b72289470fa4de00474b7239013f11f", "html_url": "https://github.com/rust-lang/rust/commit/cb473c2c5b72289470fa4de00474b7239013f11f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb473c2c5b72289470fa4de00474b7239013f11f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e17a5c5fd086ebe6f57216fb3ce5d1d8d6c83e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e17a5c5fd086ebe6f57216fb3ce5d1d8d6c83e5", "html_url": "https://github.com/rust-lang/rust/commit/6e17a5c5fd086ebe6f57216fb3ce5d1d8d6c83e5"}, {"sha": "4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "html_url": "https://github.com/rust-lang/rust/commit/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111"}], "stats": {"total": 60, "additions": 6, "deletions": 54}, "files": [{"sha": "046e7fc70fcedc440ed84a80ba47db14cc33facd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cb473c2c5b72289470fa4de00474b7239013f11f", "patch": "@@ -520,10 +520,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n-                    TyKind::ImplTrait(def_node_id, _) => {\n-                        self.lctx.allocate_hir_id_counter(def_node_id);\n-                        visit::walk_ty(self, t);\n-                    }\n                     _ => visit::walk_ty(self, t),\n                 }\n             }\n@@ -1431,14 +1427,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        self.allocate_hir_id_counter(def_node_id);\n-\n-                        let hir_bounds = self.with_hir_id_owner(def_node_id, |this| {\n-                            this.lower_param_bounds(\n-                                bounds,\n-                                ImplTraitContext::Universal(in_band_ty_params, parent_def_id),\n-                            )\n-                        });\n+                        let hir_bounds = self.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::Universal(in_band_ty_params, parent_def_id),\n+                        );\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         in_band_ty_params.push(hir::GenericParam {"}, {"sha": "501e7d624d2e4b56edc1bb5c3b45222a48d1d8df", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=cb473c2c5b72289470fa4de00474b7239013f11f", "patch": "@@ -373,26 +373,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'hir GenericParam<'hir>) {\n-        if let hir::GenericParamKind::Type {\n-            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-            ..\n-        } = param.kind\n-        {\n-            debug_assert_eq!(\n-                param.hir_id.owner,\n-                self.definitions.opt_hir_id_to_local_def_id(param.hir_id).unwrap()\n-            );\n-            self.with_dep_node_owner(param.hir_id.owner, param, |this, hash| {\n-                this.insert_with_hash(param.span, param.hir_id, Node::GenericParam(param), hash);\n-\n-                this.with_parent(param.hir_id, |this| {\n-                    intravisit::walk_generic_param(this, param);\n-                });\n-            });\n-        } else {\n-            self.insert(param.span, param.hir_id, Node::GenericParam(param));\n-            intravisit::walk_generic_param(self, param);\n-        }\n+        self.insert(param.span, param.hir_id, Node::GenericParam(param));\n+        intravisit::walk_generic_param(self, param);\n     }\n \n     fn visit_const_param_default(&mut self, param: HirId, ct: &'hir AnonConst) {"}, {"sha": "944a3097a61c33ee476631a3aa956d3ab55018be", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=cb473c2c5b72289470fa4de00474b7239013f11f", "patch": "@@ -172,17 +172,4 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n-\n-    fn visit_generic_param(&mut self, param: &'hir hir::GenericParam<'hir>) {\n-        if let hir::GenericParamKind::Type {\n-            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-            ..\n-        } = param.kind\n-        {\n-            // Synthetic impl trait parameters are owned by the node of the desugared type.\n-            // This means it is correct for them to have a different owner.\n-        } else {\n-            intravisit::walk_generic_param(self, param);\n-        }\n-    }\n }"}, {"sha": "65f16ff45a10ca1b7347a51ca5cc06adb60def34", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb473c2c5b72289470fa4de00474b7239013f11f/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=cb473c2c5b72289470fa4de00474b7239013f11f", "patch": "@@ -320,15 +320,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n         for param in generics.params {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type {\n-                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                    ..\n-                } => {\n-                    return self\n-                        .nest_typeck_results(self.tcx.hir().local_def_id(param.hir_id), |this| {\n-                            this.visit_generics(generics)\n-                        });\n-                }\n                 hir::GenericParamKind::Type { .. } => {\n                     let param_ss = param.name.ident().span;\n                     let name = escape(self.span.snippet(param_ss));"}]}