{"sha": "ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTAyNWMxOTc5ZDBiNDAxOWQ5MGE4YWI3YWQ0MzM2ZDQ2OGEwZGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-08T15:42:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-08T15:42:26Z"}, "message": "Call `Expr::peel_drop_temps()` from more places for more accurate suggestions", "tree": {"sha": "d2a446b34edca1b591153f1e823df6066e702b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a446b34edca1b591153f1e823df6066e702b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "html_url": "https://github.com/rust-lang/rust/commit/ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84c4cd7188f484083091bee436dc07eb90b47e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84c4cd7188f484083091bee436dc07eb90b47e3", "html_url": "https://github.com/rust-lang/rust/commit/d84c4cd7188f484083091bee436dc07eb90b47e3"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "2b672c96dfa6b3875785c0b8bcf61d0a24a345ab", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "patch": "@@ -109,6 +109,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               allow_two_phase: AllowTwoPhase)\n                               -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n         let expected = self.resolve_type_vars_with_obligations(expected);\n+        let expr = expr.peel_drop_temps();\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase) {\n             Ok(ty) => return (ty, None),"}, {"sha": "ad46a443b8ffa9e886969f8409266a13d30b4d7a", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "patch": "@@ -87,12 +87,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {\n+            let expr = expr.peel_drop_temps();\n             self.suggest_ref_or_into(&mut err, expr, expected_ty, ty);\n-\n-            let expr = match &expr.kind {\n-                ExprKind::DropTemps(expr) => expr,\n-                _ => expr,\n-            };\n             extend_err(&mut err);\n             // Error possibly reported in `check_assign` so avoid emitting error again.\n             err.emit_unless(self.is_assign_to_bool(expr, expected_ty));"}, {"sha": "7475b9cc3b327b9b4940f2edc0b9587756aa12e9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "patch": "@@ -4216,20 +4216,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn suggest_mismatched_types_on_tail(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n-        expression: &'tcx hir::Expr,\n+        expr: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         cause_span: Span,\n         blk_id: hir::HirId,\n     ) -> bool {\n-        self.suggest_missing_semicolon(err, expression, expected, cause_span);\n+        let expr = expr.peel_drop_temps();\n+        self.suggest_missing_semicolon(err, expr, expected, cause_span);\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type = self.suggest_missing_return_type(\n                 err, &fn_decl, expected, found, can_suggest);\n         }\n-        self.suggest_ref_or_into(err, expression, expected, found);\n-        self.suggest_boxing_when_appropriate(err, expression, expected, found);\n+        self.suggest_ref_or_into(err, expr, expected, found);\n+        self.suggest_boxing_when_appropriate(err, expr, expected, found);\n         pointing_at_return_type\n     }\n "}, {"sha": "0936f3b9e38e856c313cb33272fcaffa658de498", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac9025c1979d0b4019d90a8ab7ad4336d468a0de/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=ac9025c1979d0b4019d90a8ab7ad4336d468a0de", "patch": "@@ -2,7 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:18:8\n    |\n LL |     if b_ref() {}\n-   |        ^^^^^^^ expected bool, found &bool\n+   |        ^^^^^^^\n+   |        |\n+   |        expected bool, found &bool\n+   |        help: consider dereferencing the borrow: `*b_ref()`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -11,7 +14,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n    |\n LL |     if b_mut_ref() {}\n-   |        ^^^^^^^^^^^ expected bool, found &mut bool\n+   |        ^^^^^^^^^^^\n+   |        |\n+   |        expected bool, found &mut bool\n+   |        help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`\n@@ -44,7 +50,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n    |\n LL |     while b_ref() {}\n-   |           ^^^^^^^ expected bool, found &bool\n+   |           ^^^^^^^\n+   |           |\n+   |           expected bool, found &bool\n+   |           help: consider dereferencing the borrow: `*b_ref()`\n    |\n    = note: expected type `bool`\n               found type `&bool`\n@@ -53,7 +62,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n    |\n LL |     while b_mut_ref() {}\n-   |           ^^^^^^^^^^^ expected bool, found &mut bool\n+   |           ^^^^^^^^^^^\n+   |           |\n+   |           expected bool, found &mut bool\n+   |           help: consider dereferencing the borrow: `*b_mut_ref()`\n    |\n    = note: expected type `bool`\n               found type `&mut bool`"}]}