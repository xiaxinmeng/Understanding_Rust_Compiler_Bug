{"sha": "1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYTlmMDNlYWRmOTk0NDZmM2MyMDhkZDFiNGNiODkxZjlmOTBjYTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-28T03:03:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-29T21:18:15Z"}, "message": "Nits and other local improvements in resolve", "tree": {"sha": "488174ef8cc4be7e576193590b50c8512fda4b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/488174ef8cc4be7e576193590b50c8512fda4b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "html_url": "https://github.com/rust-lang/rust/commit/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e13a0450d34572bc564b3ee1d275a01f403b4186", "url": "https://api.github.com/repos/rust-lang/rust/commits/e13a0450d34572bc564b3ee1d275a01f403b4186", "html_url": "https://github.com/rust-lang/rust/commit/e13a0450d34572bc564b3ee1d275a01f403b4186"}], "stats": {"total": 73, "additions": 25, "deletions": 48}, "files": [{"sha": "a1d866fc48be4552a7a3d0d148231af29d0a1fe9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "patch": "@@ -360,21 +360,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n             // These items live in both the type and value namespaces.\n             ItemStruct(ref struct_def, _) => {\n-                // Adding to both Type and Value namespaces or just Type?\n-                let ctor_id = if struct_def.is_struct() {\n-                    None\n-                } else {\n-                    Some(struct_def.id())\n-                };\n-\n                 // Define a name in the type namespace.\n                 let def = Def::Struct(self.ast_map.local_def_id(item.id));\n                 self.define(parent, name, TypeNS, (def, sp, modifiers));\n \n                 // If this is a newtype or unit-like struct, define a name\n                 // in the value namespace as well\n-                if let Some(cid) = ctor_id {\n-                    let def = Def::Struct(self.ast_map.local_def_id(cid));\n+                if !struct_def.is_struct() {\n+                    let def = Def::Struct(self.ast_map.local_def_id(struct_def.id()));\n                     self.define(parent, name, ValueNS, (def, sp, modifiers));\n                 }\n \n@@ -516,31 +509,16 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         if is_exported {\n             self.external_exports.insert(def.def_id());\n         }\n-        let is_struct_ctor = if let Def::Struct(def_id) = def {\n-            self.session.cstore.tuple_struct_definition_if_ctor(def_id).is_some()\n-        } else {\n-            false\n-        };\n \n-        // Define a module if necessary.\n         match def {\n-            Def::Mod(_) |\n-            Def::ForeignMod(_) |\n-            Def::Trait(..) |\n-            Def::Enum(..) |\n-            Def::TyAlias(..) if !is_struct_ctor => {\n+            Def::Mod(_) | Def::ForeignMod(_) | Def::Enum(..) | Def::TyAlias(..) => {\n                 debug!(\"(building reduced graph for external crate) building module {} {}\",\n                        final_ident,\n                        is_public);\n                 let parent_link = ModuleParentLink(new_parent, name);\n                 let module = self.new_module(parent_link, Some(def), true, is_public);\n                 self.try_define(new_parent, name, TypeNS, (module, DUMMY_SP));\n             }\n-            _ => {}\n-        }\n-\n-        match def {\n-            Def::Mod(_) | Def::ForeignMod(_) | Def::Enum(..) | Def::TyAlias(..) => {}\n             Def::Variant(_, variant_id) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\",\n                        final_ident);\n@@ -585,16 +563,18 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         self.external_exports.insert(trait_item_def.def_id());\n                     }\n                 }\n+\n+                let parent_link = ModuleParentLink(new_parent, name);\n+                let module = self.new_module(parent_link, Some(def), true, is_public);\n+                self.try_define(new_parent, name, TypeNS, (module, DUMMY_SP));\n             }\n             Def::AssociatedTy(..) => {\n                 debug!(\"(building reduced graph for external crate) building type {}\",\n                        final_ident);\n                 self.try_define(new_parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n             }\n-            Def::Struct(..) if is_struct_ctor => {\n-                // Do nothing\n-            }\n-            Def::Struct(def_id) => {\n+            Def::Struct(def_id)\n+                if self.session.cstore.tuple_struct_definition_if_ctor(def_id).is_none() => {\n                 debug!(\"(building reduced graph for external crate) building type and value for \\\n                         {}\",\n                        final_ident);\n@@ -608,6 +588,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n+            Def::Struct(..) => {}\n             Def::Local(..) |\n             Def::PrimTy(..) |\n             Def::TyParam(..) |"}, {"sha": "3a6bc678dfc3353ad9cac6cef894001f45132ed0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "patch": "@@ -3579,27 +3579,23 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             // Look for trait children.\n             build_reduced_graph::populate_module_if_necessary(self, &search_module);\n \n-            {\n-                for (_, name_binding) in search_module.children.borrow().iter() {\n-                    let def = match name_binding.def() {\n-                        Some(def) => def,\n-                        None => continue,\n-                    };\n-                    let trait_def_id = match def {\n-                        Def::Trait(trait_def_id) => trait_def_id,\n-                        _ => continue,\n-                    };\n-                    if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n-                        add_trait_info(&mut found_traits, trait_def_id, name);\n-                    }\n+            for (&(_, ns), name_binding) in search_module.children.borrow().iter() {\n+                if ns != TypeNS { continue }\n+                let trait_def_id = match name_binding.def() {\n+                    Some(Def::Trait(trait_def_id)) => trait_def_id,\n+                    Some(..) | None => continue,\n+                };\n+                if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n+                    add_trait_info(&mut found_traits, trait_def_id, name);\n                 }\n             }\n \n             // Look for imports.\n             for (&(_, ns), import) in search_module.import_resolutions.borrow().iter() {\n-                let target = match (ns, &import.target) {\n-                    (TypeNS, &Some(ref target)) => target.clone(),\n-                    _ => continue,\n+                if ns != TypeNS { continue }\n+                let target = match import.target {\n+                    Some(ref target) => target,\n+                    None => continue,\n                 };\n                 let did = match target.binding.def() {\n                     Some(Def::Trait(trait_def_id)) => trait_def_id,"}, {"sha": "07f6a0f9549906fd84eedf9aa0096f9619643103", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1ca9f03eadf99446f3c208dd1b4cb891f9f90ca7", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             return (Success((module, name_binding)), false);\n         }\n \n-        if let TypeNS = ns {\n+        if ns == TypeNS {\n             if let Some(extern_crate) = module.external_module_children.borrow().get(&name) {\n                 // track the extern crate as used.\n                 if let Some(DefId{ krate: kid, .. }) = extern_crate.def_id() {\n@@ -882,7 +882,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                                      import_span: Span,\n                                                      (name, ns): (Name, Namespace)) {\n         // First, check for conflicts between imports and `extern crate`s.\n-        if let TypeNS = ns {\n+        if ns == TypeNS {\n             if module.external_module_children.borrow().contains_key(&name) {\n                 match import.target {\n                     Some(ref target) if target.shadowable != Shadowable::Always => {\n@@ -905,7 +905,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             Some(name_binding) => name_binding,\n         };\n \n-        if let ValueNS = ns {\n+        if ns == ValueNS {\n             match import.target {\n                 Some(ref target) if target.shadowable != Shadowable::Always => {\n                     let mut err = struct_span_err!(self.resolver.session,"}]}