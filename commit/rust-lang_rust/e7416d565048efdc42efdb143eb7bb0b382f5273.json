{"sha": "e7416d565048efdc42efdb143eb7bb0b382f5273", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NDE2ZDU2NTA0OGVmZGM0MmVmZGIxNDNlYjdiYjBiMzgyZjUyNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-25T07:06:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-25T07:06:15Z"}, "message": "Auto merge of #54317 - Centril:feature/dbg_macro, r=SimonSapin\n\nImplement the dbg!(..) macro\n\nImplements the `dbg!(..)` macro due to #54306.\ncc https://github.com/rust-lang/rfcs/pull/2361\n\nr? @alexcrichton", "tree": {"sha": "c1742cf3ac950f1e4dcfe48e3a1d72db216cb3ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1742cf3ac950f1e4dcfe48e3a1d72db216cb3ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7416d565048efdc42efdb143eb7bb0b382f5273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7416d565048efdc42efdb143eb7bb0b382f5273", "html_url": "https://github.com/rust-lang/rust/commit/e7416d565048efdc42efdb143eb7bb0b382f5273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7416d565048efdc42efdb143eb7bb0b382f5273/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "287187230b8d76686883d1ea32940294ec0fd5c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/287187230b8d76686883d1ea32940294ec0fd5c9", "html_url": "https://github.com/rust-lang/rust/commit/287187230b8d76686883d1ea32940294ec0fd5c9"}, {"sha": "e5b9331a863c071954bcfbaa4446888414e87249", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b9331a863c071954bcfbaa4446888414e87249", "html_url": "https://github.com/rust-lang/rust/commit/e5b9331a863c071954bcfbaa4446888414e87249"}], "stats": {"total": 332, "additions": 332, "deletions": 0}, "files": [{"sha": "16a3aecfc186b8a037ca16e7aa6e7776d3cf5eda", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -220,6 +220,126 @@ macro_rules! eprintln {\n     })\n }\n \n+/// A macro for quick and dirty debugging with which you can inspect\n+/// the value of a given expression. An example:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+///\n+/// let a = 2;\n+/// let b = dbg!(a * 2) + 1;\n+/// //      ^-- prints: [src/main.rs:4] a * 2 = 4\n+/// assert_eq!(b, 5);\n+/// ```\n+///\n+/// The macro works by using the `Debug` implementation of the type of\n+/// the given expression to print the value to [stderr] along with the\n+/// source location of the macro invocation as well as the source code\n+/// of the expression.\n+///\n+/// Invoking the macro on an expression moves and takes ownership of it\n+/// before returning the evaluated expression unchanged. If the type\n+/// of the expression does not implement `Copy` and you don't want\n+/// to give up ownership, you can instead borrow with `dbg!(&expr)`\n+/// for some expression `expr`.\n+///\n+/// Note that the macro is intended as a debugging tool and therefore you\n+/// should avoid having uses of it in version control for longer periods.\n+/// Use cases involving debug output that should be added to version control\n+/// may be better served by macros such as `debug!` from the `log` crate.\n+///\n+/// # Stability\n+///\n+/// The exact output printed by this macro should not be relied upon\n+/// and is subject to future changes.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr` fails.\n+///\n+/// # Further examples\n+///\n+/// With a method call:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+///\n+/// fn foo(n: usize) {\n+///     if let Some(_) = dbg!(n.checked_sub(4)) {\n+///         // ...\n+///     }\n+/// }\n+///\n+/// foo(3)\n+/// ```\n+///\n+/// This prints to [stderr]:\n+///\n+/// ```text,ignore\n+/// [src/main.rs:4] n.checked_sub(4) = None\n+/// ```\n+///\n+/// Naive factorial implementation:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+///\n+/// fn factorial(n: u32) -> u32 {\n+///     if dbg!(n <= 1) {\n+///         dbg!(1)\n+///     } else {\n+///         dbg!(n * factorial(n - 1))\n+///     }\n+/// }\n+///\n+/// dbg!(factorial(4));\n+/// ```\n+///\n+/// This prints to [stderr]:\n+///\n+/// ```text,ignore\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = true\n+/// [src/main.rs:4] 1 = 1\n+/// [src/main.rs:5] n * factorial(n - 1) = 2\n+/// [src/main.rs:5] n * factorial(n - 1) = 6\n+/// [src/main.rs:5] n * factorial(n - 1) = 24\n+/// [src/main.rs:11] factorial(4) = 24\n+/// ```\n+///\n+/// The `dbg!(..)` macro moves the input:\n+///\n+/// ```compile_fail\n+/// #![feature(dbg_macro)]\n+///\n+/// /// A wrapper around `usize` which importantly is not Copyable.\n+/// #[derive(Debug)]\n+/// struct NoCopy(usize);\n+///\n+/// let a = NoCopy(42);\n+/// let _ = dbg!(a); // <-- `a` is moved here.\n+/// let _ = dbg!(a); // <-- `a` is moved again; error!\n+/// ```\n+///\n+/// [stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\n+#[macro_export]\n+#[unstable(feature = \"dbg_macro\", issue = \"54306\")]\n+macro_rules! dbg {\n+    ($val:expr) => {\n+        // Use of `match` here is intentional because it affects the lifetimes\n+        // of temporaries - https://stackoverflow.com/a/48732525/1063961\n+        match $val {\n+            tmp => {\n+                eprintln!(\"[{}:{}] {} = {:#?}\",\n+                    file!(), line!(), stringify!($val), &tmp);\n+                tmp\n+            }\n+        }\n+    }\n+}\n+\n #[macro_export]\n #[unstable(feature = \"await_macro\", issue = \"50547\")]\n #[allow_internal_unstable]"}, {"sha": "f7216c57e42b8fd678afdfd02f97bfabb12fffcb", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,121 @@\n+// run-pass\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n+\n+// Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n+// as well as some compile time properties we expect.\n+\n+#![feature(dbg_macro)]\n+\n+#[derive(Copy, Clone, Debug)]\n+struct Unit;\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+struct Point<T> {\n+    x: T,\n+    y: T,\n+}\n+\n+#[derive(Debug, PartialEq)]\n+struct NoCopy(usize);\n+\n+fn test() {\n+    let a: Unit = dbg!(Unit);\n+    let _: Unit = dbg!(a);\n+    // We can move `a` because it's Copy.\n+    drop(a);\n+\n+    // `Point<T>` will be faithfully formatted according to `{:#?}`.\n+    let a = Point { x: 42, y: 24 };\n+    let b: Point<u8> = dbg!(Point { x: 42, y: 24 }); // test stringify!(..)\n+    let c: Point<u8> = dbg!(b);\n+    // Identity conversion:\n+    assert_eq!(a, b);\n+    assert_eq!(a, c);\n+    // We can move `b` because it's Copy.\n+    drop(b);\n+\n+    // Test that we can borrow and that successive applications is still identity.\n+    let a = NoCopy(1337);\n+    let b: &NoCopy = dbg!(dbg!(&a));\n+    assert_eq!(&a, b);\n+\n+    // Test involving lifetimes of temporaries:\n+    fn f<'a>(x: &'a u8) -> &'a u8 { x }\n+    let a: &u8 = dbg!(f(&42));\n+    assert_eq!(a, &42);\n+\n+    // Test side effects:\n+    let mut foo = 41;\n+    assert_eq!(7331, dbg!({\n+        foo += 1;\n+        eprintln!(\"before\");\n+        7331\n+    }));\n+    assert_eq!(foo, 42);\n+}\n+\n+fn validate_stderr(stderr: Vec<String>) {\n+    assert_eq!(stderr, &[\n+        \":23] Unit = Unit\",\n+\n+        \":24] a = Unit\",\n+\n+        \":30] Point{x: 42, y: 24,} = Point {\",\n+        \"    x: 42,\",\n+        \"    y: 24\",\n+        \"}\",\n+\n+        \":31] b = Point {\",\n+        \"    x: 42,\",\n+        \"    y: 24\",\n+        \"}\",\n+\n+        \":40] &a = NoCopy(\",\n+        \"    1337\",\n+        \")\",\n+\n+        \":40] dbg!(& a) = NoCopy(\",\n+        \"    1337\",\n+        \")\",\n+        \":45] f(&42) = 42\",\n+\n+        \"before\",\n+        \":50] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n+    ]);\n+}\n+\n+fn main() {\n+    // The following is a hack to deal with compiletest's inability\n+    // to check the output (to stdout) of run-pass tests.\n+    use std::env;\n+    use std::process::Command;\n+\n+    let mut args = env::args();\n+    let prog = args.next().unwrap();\n+    let child = args.next();\n+    if let Some(\"child\") = child.as_ref().map(|s| &**s) {\n+        // Only run the test if we've been spawned as 'child'\n+        test()\n+    } else {\n+        // This essentially spawns as 'child' to run the tests\n+        // and then it collects output of stderr and checks the output\n+        // against what we expect.\n+        let out = Command::new(&prog).arg(\"child\").output().unwrap();\n+        assert!(out.status.success());\n+        assert!(out.stdout.is_empty());\n+\n+        let stderr = String::from_utf8(out.stderr).unwrap();\n+        let stderr = stderr.lines().map(|mut s| {\n+            if s.starts_with(\"[\") {\n+                // Strip `[` and file path:\n+                s = s.trim_start_matches(\"[\");\n+                assert!(s.starts_with(file!()));\n+                s = s.trim_start_matches(file!());\n+            }\n+            s.to_owned()\n+        }).collect();\n+\n+        validate_stderr(stderr);\n+    }\n+}"}, {"sha": "b237c6f147bf77a04a463d44f4a80656d6e1be0a", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-feature-gate.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.rs?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,5 @@\n+// Feature gate test for `dbg!(..)`.\n+\n+fn main() {\n+    dbg!(1);\n+}"}, {"sha": "64df1e196d28593ca40194137c63c120f36a9a4d", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-feature-gate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-feature-gate.stderr?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: macro dbg! is unstable (see issue #54306)\n+  --> $DIR/dbg-macro-feature-gate.rs:4:5\n+   |\n+LL |     dbg!(1);\n+   |     ^^^^^^^^\n+   |\n+   = help: add #![feature(dbg_macro)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "bf99fef3bbd2f415cfd104807c905ca2a0f2e91b", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/dbg-macro-move-semantics.rs:11:18\n+   |\n+LL |     let _ = dbg!(a);\n+   |             ------- value moved here\n+LL |     let _ = dbg!(a);\n+   |                  ^ value used here after move\n+   |\n+   = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "bcf508d9af5d73790861d305a2daee37db3e811c", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,12 @@\n+// Test ensuring that `dbg!(expr)` will take ownership of the argument.\n+\n+#![feature(dbg_macro)]\n+\n+#[derive(Debug)]\n+struct NoCopy(usize);\n+\n+fn main() {\n+    let a = NoCopy(0);\n+    let _ = dbg!(a);\n+    let _ = dbg!(a);\n+}"}, {"sha": "1064317438515a8cfb705e8c1cd804267f4812bb", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,25 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/dbg-macro-move-semantics.rs:11:18\n+   |\n+LL |     let _ = dbg!(a);\n+   |             ------- value moved here\n+LL |     let _ = dbg!(a);\n+   |                  ^ value used here after move\n+   |\n+   = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/dbg-macro-move-semantics.rs:11:13\n+   |\n+LL |     let _ = dbg!(a);\n+   |             ------- value moved here\n+LL |     let _ = dbg!(a);\n+   |             ^^^^^^^ value used here after move\n+   |\n+   = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "8e6f3b226fc1ea0a9a50f35fd18a914fb2be6015", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,9 @@\n+// Test ensuring that `dbg!(expr)` requires the passed type to implement `Debug`.\n+\n+#![feature(dbg_macro)]\n+\n+struct NotDebug;\n+\n+fn main() {\n+    let _: NotDebug = dbg!(NotDebug);\n+}"}, {"sha": "a3b6a1761b991a07a64db899eeb1ee5a51e05ab6", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7416d565048efdc42efdb143eb7bb0b382f5273/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=e7416d565048efdc42efdb143eb7bb0b382f5273", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: `NotDebug` doesn't implement `std::fmt::Debug`\n+  --> $DIR/dbg-macro-requires-debug.rs:8:23\n+   |\n+LL |     let _: NotDebug = dbg!(NotDebug);\n+   |                       ^^^^^^^^^^^^^^ `NotDebug` cannot be formatted using `{:?}`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `NotDebug`\n+   = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&NotDebug`\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}