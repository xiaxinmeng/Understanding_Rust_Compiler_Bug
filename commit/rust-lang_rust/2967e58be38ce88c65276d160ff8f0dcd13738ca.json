{"sha": "2967e58be38ce88c65276d160ff8f0dcd13738ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjdlNThiZTM4Y2U4OGM2NTI3NmQxNjBmZjhmMGRjZDEzNzM4Y2E=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-08T12:36:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-08T12:36:14Z"}, "message": "Rollup merge of #78728 - a1phyr:const_cell_into_inner, r=dtolnay\n\nConstantify `UnsafeCell::into_inner` and related\n\nTracking issue: #78729\n\nThis PR constantifies:\n- `UnsafeCell::into_inner`\n- `Cell::into_inner`\n- `RefCell::into_inner`\n- `Atomic*::into_inner`\n\nr? `````@dtolnay`````", "tree": {"sha": "2f88dd8d16a7e18d327cc3ee4d8d6dcd9d8920a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f88dd8d16a7e18d327cc3ee4d8d6dcd9d8920a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2967e58be38ce88c65276d160ff8f0dcd13738ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfp+Y+CRBK7hj4Ov3rIwAAdHIIAIInzgBA5gzslZutPfgBqvrT\nYli8Bg58CQI20nj0fiL2qPCXimKQDE5k2UJUN49rXRF3yNHMhhRwAMn9vIvrcLi1\nW17np1prKaRJBHHK9F7Ut5ZLY0Ra2+8X2OCgqRhDZX+B3jYdMBInGqEnUS48o/oC\nFaPMgBVzF4OwthQVfCBWuohi0DoxKXUDNvTaOKG1IFCTLRsWCqMvRlTe6rnZ1/4X\nU0hKrplpDkzkUJ8HLE4TIint/TXI+24o10A/eZvoTOuXLhYd8AeuG319y+8MHLH9\nIv0TLx4SaF0188yAtVTUBlZK+pnCMifHo6sgLp+b6zt9Q6zHNUT9dxGcjUtV1ro=\n=xP16\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f88dd8d16a7e18d327cc3ee4d8d6dcd9d8920a6\nparent a619e2539859b6e1365fedf3fff17485b4748d64\nparent 795bbfe056de9acd0ada4a401b128f23dd368868\nauthor Mara Bos <m-ou.se@m-ou.se> 1604838974 +0100\ncommitter GitHub <noreply@github.com> 1604838974 +0100\n\nRollup merge of #78728 - a1phyr:const_cell_into_inner, r=dtolnay\n\nConstantify `UnsafeCell::into_inner` and related\n\nTracking issue: #78729\n\nThis PR constantifies:\n- `UnsafeCell::into_inner`\n- `Cell::into_inner`\n- `RefCell::into_inner`\n- `Atomic*::into_inner`\n\nr? `````@dtolnay`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2967e58be38ce88c65276d160ff8f0dcd13738ca", "html_url": "https://github.com/rust-lang/rust/commit/2967e58be38ce88c65276d160ff8f0dcd13738ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2967e58be38ce88c65276d160ff8f0dcd13738ca/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a619e2539859b6e1365fedf3fff17485b4748d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/a619e2539859b6e1365fedf3fff17485b4748d64", "html_url": "https://github.com/rust-lang/rust/commit/a619e2539859b6e1365fedf3fff17485b4748d64"}, {"sha": "795bbfe056de9acd0ada4a401b128f23dd368868", "url": "https://api.github.com/repos/rust-lang/rust/commits/795bbfe056de9acd0ada4a401b128f23dd368868", "html_url": "https://github.com/rust-lang/rust/commit/795bbfe056de9acd0ada4a401b128f23dd368868"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "5eaecce67eb7f790fbc5381db01c432fe721fb15", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=2967e58be38ce88c65276d160ff8f0dcd13738ca", "patch": "@@ -406,7 +406,8 @@ impl<T> Cell<T> {\n     /// assert_eq!(five, 5);\n     /// ```\n     #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> T {\n         self.value.into_inner()\n     }\n }\n@@ -668,12 +669,11 @@ impl<T> RefCell<T> {\n     /// let five = c.into_inner();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     #[inline]\n-    pub fn into_inner(self) -> T {\n+    pub const fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n         // compiler statically verifies that it is not currently borrowed.\n-        // Therefore the following assertion is just a `debug_assert!`.\n-        debug_assert!(self.borrow.get() == UNUSED);\n         self.value.into_inner()\n     }\n \n@@ -1682,7 +1682,8 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> T {\n         self.value\n     }\n }"}, {"sha": "ea560288c28bdcf0069ae86a546c79276ac5c589", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2967e58be38ce88c65276d160ff8f0dcd13738ca", "patch": "@@ -70,6 +70,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n+#![feature(const_cell_into_inner)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]"}, {"sha": "d48c02bf59c6463cffd8e29a68b3322a4c31b393", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=2967e58be38ce88c65276d160ff8f0dcd13738ca", "patch": "@@ -355,7 +355,8 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> bool {\n         self.v.into_inner() != 0\n     }\n \n@@ -931,7 +932,8 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> *mut T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> *mut T {\n         self.p.into_inner()\n     }\n \n@@ -1452,7 +1454,8 @@ assert_eq!(some_var.into_inner(), 5);\n ```\"),\n                 #[inline]\n                 #[$stable_access]\n-                pub fn into_inner(self) -> $int_type {\n+                #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+                pub const fn into_inner(self) -> $int_type {\n                     self.v.into_inner()\n                 }\n             }"}, {"sha": "77517879dd2507f20df999d24caf294e5599042d", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=2967e58be38ce88c65276d160ff8f0dcd13738ca", "patch": "@@ -422,3 +422,15 @@ fn refcell_format() {\n     let msg = format!(\"{name} {}\", &*what.borrow(), name = &*name.borrow());\n     assert_eq!(msg, \"rust rocks\".to_string());\n }\n+\n+#[allow(dead_code)]\n+fn const_cells() {\n+    const UNSAFE_CELL: UnsafeCell<i32> = UnsafeCell::new(3);\n+    const _: i32 = UNSAFE_CELL.into_inner();\n+\n+    const REF_CELL: RefCell<i32> = RefCell::new(3);\n+    const _: i32 = REF_CELL.into_inner();\n+\n+    const CELL: Cell<i32> = Cell::new(3);\n+    const _: i32 = CELL.into_inner();\n+}"}, {"sha": "c9f9b890c39386538327f242a42712b8dac7d79a", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967e58be38ce88c65276d160ff8f0dcd13738ca/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2967e58be38ce88c65276d160ff8f0dcd13738ca", "patch": "@@ -9,6 +9,7 @@\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n+#![feature(const_cell_into_inner)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}]}