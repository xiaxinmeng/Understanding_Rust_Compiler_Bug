{"sha": "91f6445b5956aff72755b84854a19d2921009e1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZjY0NDViNTk1NmFmZjcyNzU1Yjg0ODU0YTE5ZDI5MjEwMDllMWU=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-25T18:51:28Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-26T01:45:38Z"}, "message": "Overhaul the documentation for OsString / OsStr", "tree": {"sha": "78291fda7050833a7bb7c7cb1afc8f0739b452fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78291fda7050833a7bb7c7cb1afc8f0739b452fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91f6445b5956aff72755b84854a19d2921009e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91f6445b5956aff72755b84854a19d2921009e1e", "html_url": "https://github.com/rust-lang/rust/commit/91f6445b5956aff72755b84854a19d2921009e1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91f6445b5956aff72755b84854a19d2921009e1e/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "html_url": "https://github.com/rust-lang/rust/commit/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "1214a2406e2d0c038de0850a0f47439903532831", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91f6445b5956aff72755b84854a19d2921009e1e/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f6445b5956aff72755b84854a19d2921009e1e/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=91f6445b5956aff72755b84854a19d2921009e1e", "patch": "@@ -92,13 +92,40 @@\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n-//! * [`OsStr`] represents a borrowed string slice in a format that\n-//! can be passed to the operating system.  It can be converted into\n-//! an UTF-8 Rust string slice in a similar way to `OsString`.\n+//! * [`OsStr`] represents a borrowed reference to a string in a\n+//! format that can be passed to the operating system.  It can be\n+//! converted into an UTF-8 Rust string slice in a similar way to\n+//! `OsString`.\n+//!\n+//! # Conversions\n+//!\n+//! ## On Unix\n+//!\n+//! On Unix, [`OsStr`] implements the `std::os::unix:ffi::`[`OsStrExt`][unix.OsStrExt] trait, which\n+//! augments it with two methods, [`from_bytes`] and [`as_bytes`].  These do inexpensive conversions\n+//! from and to UTF-8 byte slices.\n+//!\n+//! Additionally, on Unix [`OsString`] implements the\n+//! `std::os::unix:ffi::`[`OsStringExt`][unix.OsStringExt] trait,\n+//! which provides [`from_vec`] and [`into_vec`] methods that consume\n+//! their arguments, and take or produce vectors of [`u8`].\n+//!\n+//! ## On Windows\n+//!\n+//! On Windows, [`OsStr`] implements the `std::os::windows::ffi::`[`OsStrExt`][windows.OsStrExt]\n+//! trait, which provides an [`encode_wide`] method.  This provides an iterator that can be\n+//! [`collect`]ed into a vector of [`u16`].\n+//!\n+//! Additionally, on Windows [`OsString`] implements the\n+//! `std::os::windows:ffi::`[`OsStringExt`][windows.OsStringExt] trait, which provides a\n+//! [`from_wide`] method.  The result of this method is an `OsString` which can be round-tripped to\n+//! a Windows string losslessly.\n //!\n //! [`String`]: ../string/struct.String.html\n //! [`str`]: ../primitive.str.html\n //! [`char`]: ../primitive.char.html\n+//! [`u8`]: ../primitive.u8.html\n+//! [`u16`]: ../primitive.u16.html\n //! [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n //! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n //! [`CString`]: struct.CString.html\n@@ -108,6 +135,18 @@\n //! [`env::set_var()`]: ../env/fn.set_var.html\n //! [`env::var_os()`]: ../env/fn.var_os.html\n //! [`Result<>`]: ../result/enum.Result.html\n+//! [unix.OsStringExt]: ../os/unix/ffi/trait.OsStringExt.html\n+//! [`from_vec`]: ../os/unix/ffi/trait.OsStringExt.html#tymethod.from_vec\n+//! [`into_vec`]: ../os/unix/ffi/trait.OsStringExt.html#tymethod.into_vec\n+//! [unix.OsStrExt]: ../os/unix/ffi/trait.OsStrExt.html\n+//! [`from_bytes`]: ../os/unix/ffi/trait.OsStrExt.html#tymethod.from_bytes\n+//! [`as_bytes`]: ../os/unix/ffi/trait.OsStrExt.html#tymethod.as_bytes\n+//! [`OsStrExt`]: ../os/unix/ffi/trait.OsStrExt.html\n+//! [windows.OsStrExt]: ../os/windows/ffi/trait.OsStrExt.html\n+//! [`encode_wide`]: ../os/windows/ffi/trait.OsStrExt.html#tymethod.encode_wide\n+//! [`collect`]: ../iter/trait.Iterator.html#method.collect\n+//! [windows.OsStringExt]: ../os/windows/ffi/trait.OsStringExt.html\n+//! [`from_wide`]: ../os/windows/ffi/trait.OsStringExt.html#tymethod.from_wide\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "72b0e68a9b65648efe9f2353d7a6990d6e11e4ee", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/91f6445b5956aff72755b84854a19d2921009e1e/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f6445b5956aff72755b84854a19d2921009e1e/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=91f6445b5956aff72755b84854a19d2921009e1e", "patch": "@@ -33,18 +33,65 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// `OsString` and [`OsStr`] bridge this gap by simultaneously representing Rust\n /// and platform-native string values, and in particular allowing a Rust string\n-/// to be converted into an \"OS\" string with no cost.\n+/// to be converted into an \"OS\" string with no cost if possible.\n+///\n+/// `OsString` is to [`OsStr`] as [`String`] is to [`&str`]: the former\n+/// in each pair are owned strings; the latter are borrowed\n+/// references.\n+///\n+/// # Creating an `OsString`\n+///\n+/// **From a Rust string**: `OsString` implements\n+/// [`From`]`<`[`String`]`>`, so you can use `my_string.`[`from`] to\n+/// create an `OsString` from a normal Rust string.\n+///\n+/// **From slices:** Just like you can start with an empty Rust\n+/// [`String`] and then [`push_str`][String.push_str] `&str`\n+/// sub-string slices into it, you can create an empty `OsString` with\n+/// the [`new`] method and then push string slices into it with the\n+/// [`push`] method.\n+///\n+/// # Extracting a borrowed reference to the whole OS string\n+///\n+/// You can use the [`as_os_str`] method to get an `&`[`OsStr`] from\n+/// an `OsString`; this is effectively a borrowed reference to the\n+/// whole string.\n+///\n+/// # Conversions\n+///\n+/// See the [module's toplevel documentation about conversions][conversions] for a discussion on the traits which\n+/// `OsString` implements for conversions from/to native representations.\n ///\n /// [`OsStr`]: struct.OsStr.html\n+/// [`From`]: ../convert/trait.From.html\n+/// [`from`]: ../convert/trait.From.html#tymethod.from\n+/// [`String`]: ../string/struct.String.html\n+/// [`&str`]: ../primitive.str.html\n+/// [`u8`]: ../primitive.u8.html\n+/// [`u16`]: ../primitive.u16.html\n+/// [String.push_str]: ../string/struct.String.html#method.push_str\n+/// [`new`]: #struct.OsString.html#method.new\n+/// [`push`]: #struct.OsString.html#method.push\n+/// [`as_os_str`]: #struct.OsString.html#method.as_os_str\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf\n }\n \n-/// Slices into OS strings (see [`OsString`]).\n+/// Borrowed reference to an OS string (see [`OsString`]).\n+///\n+/// This type represents a borrowed reference to a string in the operating system's preferred\n+/// representation.\n+///\n+/// `OsStr` is to [`OsString`] as [`String`] is to [`&str`]: the former in each pair are borrowed\n+/// references; the latter are owned strings.\n+///\n+/// See the [module's toplevel documentation about conversions][conversions] for a discussion on the traits which\n+/// `OsStr` implements for conversions from/to native representations.\n ///\n /// [`OsString`]: struct.OsString.html\n+/// [conversions]: index.html#conversions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsStr {\n     inner: Slice"}]}