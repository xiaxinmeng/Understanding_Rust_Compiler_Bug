{"sha": "23afad6e7f0ff17320411a274f3a3beb92452235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYWZhZDZlN2YwZmYxNzMyMDQxMWEyNzRmM2EzYmViOTI0NTIyMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T11:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T11:56:23Z"}, "message": "Auto merge of #88650 - sapessi:issue-77175-fix, r=estebank\n\nSkip single use lifetime lint for generated opaque types\n\nFix: #77175\n\nThe opaque type generated by the desugaring process of an async function uses the lifetimes defined by the originating function. The DefId for the lifetimes in the opaque type are different from the ones in the originating async function - as they should be, as far as I understand, and could therefore be considered a single use lifetimes, this causes the single_use_lifetimes lint to fail compilation if explicitly denied. This fix skips the lint for lifetimes used only once in generated opaque types for an async function that are declared in the parent async function definition.\n\nMore info in the comments on the original issue: 1 and 2", "tree": {"sha": "cd2cac52ee6592c97eda72179a91a21c2427fba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd2cac52ee6592c97eda72179a91a21c2427fba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23afad6e7f0ff17320411a274f3a3beb92452235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23afad6e7f0ff17320411a274f3a3beb92452235", "html_url": "https://github.com/rust-lang/rust/commit/23afad6e7f0ff17320411a274f3a3beb92452235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23afad6e7f0ff17320411a274f3a3beb92452235/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9", "html_url": "https://github.com/rust-lang/rust/commit/6cdd42f9f8dd4e5e5ba0aa816bc4c99ab8b102f9"}, {"sha": "0696c28430c58508e40e027f565f48ff8e0c0b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0696c28430c58508e40e027f565f48ff8e0c0b34", "html_url": "https://github.com/rust-lang/rust/commit/0696c28430c58508e40e027f565f48ff8e0c0b34"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "a5dbbffeaa86beff97c88d9f73393212a521c471", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/23afad6e7f0ff17320411a274f3a3beb92452235/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23afad6e7f0ff17320411a274f3a3beb92452235/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=23afad6e7f0ff17320411a274f3a3beb92452235", "patch": "@@ -2024,7 +2024,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // ensure that we issue lints in a repeatable order\n         def_ids.sort_by_cached_key(|&def_id| self.tcx.def_path_hash(def_id));\n \n-        for def_id in def_ids {\n+        'lifetimes: for def_id in def_ids {\n             debug!(\"check_uses_for_lifetimes_defined_by_scope: def_id = {:?}\", def_id);\n \n             let lifetimeuseset = self.lifetime_uses.remove(&def_id);\n@@ -2067,6 +2067,27 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 {\n                                     continue;\n                                 }\n+\n+                                // opaque types generated when desugaring an async function can have a single\n+                                // use lifetime even if it is explicitly denied (Issue #77175)\n+                                if let hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::OpaqueTy(ref opaque),\n+                                    ..\n+                                }) = self.tcx.hir().get(parent_hir_id)\n+                                {\n+                                    if opaque.origin != hir::OpaqueTyOrigin::AsyncFn {\n+                                        continue 'lifetimes;\n+                                    }\n+                                    // We want to do this only if the liftime identifier is already defined\n+                                    // in the async function that generated this. Otherwise it could be\n+                                    // an opaque type defined by the developer and we still want this\n+                                    // lint to fail compilation\n+                                    for p in opaque.generics.params {\n+                                        if defined_by.contains_key(&p.name) {\n+                                            continue 'lifetimes;\n+                                        }\n+                                    }\n+                                }\n                             }\n                         }\n "}, {"sha": "2282752b6c1fe998ffda86521abaa9abce2e0505", "filename": "src/test/ui/lifetimes/issue-77175.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23afad6e7f0ff17320411a274f3a3beb92452235/src%2Ftest%2Fui%2Flifetimes%2Fissue-77175.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23afad6e7f0ff17320411a274f3a3beb92452235/src%2Ftest%2Fui%2Flifetimes%2Fissue-77175.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-77175.rs?ref=23afad6e7f0ff17320411a274f3a3beb92452235", "patch": "@@ -0,0 +1,19 @@\n+#[deny(single_use_lifetimes)]\n+// edition:2018\n+// check-pass\n+\n+// Prior to the fix, the compiler complained that the 'a lifetime was only used\n+// once. This was obviously wrong since the lifetime is used twice: For the s3\n+// parameter and the return type. The issue was caused by the compiler\n+// desugaring the async function into a generator that uses only a single\n+// lifetime, which then the validator complained about becauase of the\n+// single_use_lifetimes constraints.\n+async fn bar<'a>(s1: String, s2: &'_ str, s3: &'a str) -> &'a str {\n+    s3\n+}\n+\n+fn foo<'a>(s1: String, s2: &'_ str, s3: &'a str) -> &'a str {\n+    s3\n+}\n+\n+fn main() {}"}]}