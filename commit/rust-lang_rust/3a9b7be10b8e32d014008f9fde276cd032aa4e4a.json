{"sha": "3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOWI3YmUxMGI4ZTMyZDAxNDAwOGY5ZmRlMjc2Y2QwMzJhYTRlNGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-07-11T16:29:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-23T15:01:04Z"}, "message": "Added tests and fixed corner case for trailing attributes with no attached binding in generics.", "tree": {"sha": "cdb52d948b248d2c070f3c629ef6d9299172b47c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb52d948b248d2c070f3c629ef6d9299172b47c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "html_url": "https://github.com/rust-lang/rust/commit/3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "url": "https://api.github.com/repos/rust-lang/rust/commits/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "html_url": "https://github.com/rust-lang/rust/commit/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "3c561780085b85a618f70b0d788f115fb6c43e96", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "patch": "@@ -1958,7 +1958,7 @@ impl<'a> Parser<'a> {\n                         assert!(recv.is_empty());\n                         *recv = attrs;\n                     } else {\n-                        let msg = \"encountered trailing attributes after lifetime parameters\";\n+                        let msg = \"trailing attribute after lifetime parameters\";\n                         return Err(self.fatal(msg));\n                     }\n                     debug!(\"parse_lifetime_defs ret {:?}\", res);\n@@ -4294,12 +4294,21 @@ impl<'a> Parser<'a> {\n         let span_lo = self.span.lo;\n \n         if self.eat(&token::Lt) {\n+            // Upon encountering attribute in generics list, we do not\n+            // know if it is attached to lifetime or to type param.\n+            //\n+            // Solution: 1. eagerly parse attributes in tandem with\n+            // lifetime defs, 2. store last set of parsed (and unused)\n+            // attributes in `attrs`, and 3. pass in those attributes\n+            // when parsing formal type param after lifetime defs.\n             let mut attrs = vec![];\n             let lifetime_defs = self.parse_lifetime_defs(Some(&mut attrs))?;\n             let mut seen_default = false;\n             let mut post_lifetime_attrs = Some(attrs);\n             let ty_params = self.parse_seq_to_gt(Some(token::Comma), |p| {\n                 p.forbid_lifetime()?;\n+                // Move out of `post_lifetime_attrs` if present. O/w\n+                // not first type param: parse attributes anew.\n                 let attrs = match post_lifetime_attrs.as_mut() {\n                     None => p.parse_outer_attributes()?,\n                     Some(attrs) => mem::replace(attrs, vec![]),\n@@ -4315,6 +4324,12 @@ impl<'a> Parser<'a> {\n                 }\n                 Ok(ty_param)\n             })?;\n+            if let Some(attrs) = post_lifetime_attrs {\n+                if !attrs.is_empty() {\n+                    self.span_err(attrs[0].span,\n+                                  \"trailing attribute after lifetime parameters\");\n+                }\n+            }\n             Ok(ast::Generics {\n                 lifetimes: lifetime_defs,\n                 ty_params: ty_params,"}, {"sha": "53e287cda208adbcee9881156b28a584350d9816", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs?ref=3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+    //~^ ERROR trailing attribute after lifetime parameters\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "a38a7bfb9378526d090f42bdcd6f4a01a20ea162", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs?ref=3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefAny<'a, T>(&'a T);\n+\n+impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {\n+    //~^ ERROR expected identifier, found `>`\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "e7d5b94d24226b1ceaee9813f9837550fc7b286a", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9b7be10b8e32d014008f9fde276cd032aa4e4a/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs?ref=3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+    //~^ ERROR trailing attribute after lifetime parameters\n+{\n+\n+}\n+\n+fn main() {\n+\n+}"}]}