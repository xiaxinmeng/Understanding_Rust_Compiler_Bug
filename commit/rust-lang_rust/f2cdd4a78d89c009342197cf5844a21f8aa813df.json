{"sha": "f2cdd4a78d89c009342197cf5844a21f8aa813df", "node_id": "C_kwDOAAsO6NoAKGYyY2RkNGE3OGQ4OWMwMDkzNDIxOTdjZjU4NDRhMjFmOGFhODEzZGY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-21T18:54:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-21T18:54:50Z"}, "message": "Rustup to rustc 1.62.0-nightly (879aff385 2022-04-20)", "tree": {"sha": "1ed7a068a6163c29f728fdef42448cb728cdf80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed7a068a6163c29f728fdef42448cb728cdf80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2cdd4a78d89c009342197cf5844a21f8aa813df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cdd4a78d89c009342197cf5844a21f8aa813df", "html_url": "https://github.com/rust-lang/rust/commit/f2cdd4a78d89c009342197cf5844a21f8aa813df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2cdd4a78d89c009342197cf5844a21f8aa813df/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb32e6eb5de33e2b6f66505a305b59bf471078e", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb32e6eb5de33e2b6f66505a305b59bf471078e", "html_url": "https://github.com/rust-lang/rust/commit/acb32e6eb5de33e2b6f66505a305b59bf471078e"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "51ba0dbfcc7920e2868531cc897bd70c48a9909b", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -134,9 +134,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.121\"\n+version = \"0.2.124\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n+checksum = \"21a41fed9d98f27ab1c6d161da622a4fa35e8a54a8adc24bbf3ddd0ef70b0e50\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -203,6 +203,7 @@ dependencies = [\n name = \"proc_macro\"\n version = \"0.0.0\"\n dependencies = [\n+ \"core\",\n  \"std\",\n ]\n "}, {"sha": "8da705e0cb06dbf7f0232bdad8e9ab6f899636d8", "filename": "example/mini_core.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -494,13 +494,20 @@ pub trait Deref {\n     fn deref(&self) -> &Self::Target;\n }\n \n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[rustc_nonnull_optimization_guaranteed]\n+pub struct NonNull<T: ?Sized>(pub *mut T);\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+\n pub struct Unique<T: ?Sized> {\n-    pub pointer: *const T,\n+    pub pointer: NonNull<T>,\n     pub _marker: PhantomData<T>,\n }\n \n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n-\n impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n #[lang = \"owned_box\"]\n@@ -529,7 +536,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n \n #[lang = \"box_free\"]\n unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n-    libc::free(ptr.pointer as *mut u8);\n+    libc::free(ptr.pointer.0 as *mut u8);\n }\n \n #[lang = \"drop\"]"}, {"sha": "85ca908d0a266f2e1012ea4d166d1068d7e538dc", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -122,7 +122,7 @@ fn call_return_u128_pair() {\n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n     take_unique(Unique {\n-        pointer: 0 as *const (),\n+        pointer: unsafe { NonNull(1 as *mut ()) },\n         _marker: PhantomData,\n     });\n     take_f32(0.1);\n@@ -173,7 +173,7 @@ fn main() {\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n \n         Unique {\n-            pointer: 0 as *const &str,\n+            pointer: NonNull(1 as *mut &str),\n             _marker: PhantomData,\n         } as Unique<dyn SomeTrait>;\n "}, {"sha": "966097c248b6f6c98d6d250a369f5df0b8d797c9", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-04-05\"\n+channel = \"nightly-2022-04-21\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "65346cb39622aa0e7bc2a7de747820af62b3d519", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -821,7 +821,8 @@ pub(crate) fn codegen_place<'tcx>(\n                 if cplace.layout().ty.is_box() {\n                     cplace = cplace\n                         .place_field(fx, Field::new(0)) // Box<T> -> Unique<T>\n-                        .place_field(fx, Field::new(0)) // Unique<T> -> *const T\n+                        .place_field(fx, Field::new(0)) // Unique<T> -> NonNull<T>\n+                        .place_field(fx, Field::new(0)) // NonNull<T> -> *mut T\n                         .place_deref(fx);\n                 } else {\n                     cplace = cplace.place_deref(fx);"}, {"sha": "f619bb5ed5e586ae33f5b7711095613bdad14472", "filename": "src/discriminant.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2cdd4a78d89c009342197cf5844a21f8aa813df/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cdd4a78d89c009342197cf5844a21f8aa813df/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=f2cdd4a78d89c009342197cf5844a21f8aa813df", "patch": "@@ -128,8 +128,16 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n             let relative_discr = if niche_start == 0 {\n                 tag\n             } else {\n-                // FIXME handle niche_start > i64::MAX\n-                fx.bcx.ins().iadd_imm(tag, -i64::try_from(niche_start).unwrap())\n+                let niche_start = match fx.bcx.func.dfg.value_type(tag) {\n+                    types::I128 => {\n+                        let lsb = fx.bcx.ins().iconst(types::I64, niche_start as u64 as i64);\n+                        let msb =\n+                            fx.bcx.ins().iconst(types::I64, (niche_start >> 64) as u64 as i64);\n+                        fx.bcx.ins().iconcat(lsb, msb)\n+                    }\n+                    ty => fx.bcx.ins().iconst(ty, niche_start as i64),\n+                };\n+                fx.bcx.ins().isub(tag, niche_start)\n             };\n             let relative_max = niche_variants.end().as_u32() - niche_variants.start().as_u32();\n             let is_niche = {"}]}