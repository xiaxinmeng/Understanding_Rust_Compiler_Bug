{"sha": "49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjMyZTBjOGU3ODk0ODIxMDY1NDI5OWE4YzE5YjJlMGYwY2JmYTk=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-12T13:58:51Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:22:55Z"}, "message": "Improve error messages", "tree": {"sha": "f1f5e5ddb1195c42eff25cced635f3c64b7b82c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f5e5ddb1195c42eff25cced635f3c64b7b82c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "html_url": "https://github.com/rust-lang/rust/commit/49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f32e0c8e78948210654299a8c19b2e0f0cbfa9/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316e9db0cf86852b0150d8f0d475ba9a1dcc4774", "url": "https://api.github.com/repos/rust-lang/rust/commits/316e9db0cf86852b0150d8f0d475ba9a1dcc4774", "html_url": "https://github.com/rust-lang/rust/commit/316e9db0cf86852b0150d8f0d475ba9a1dcc4774"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "1aa4a986cd1fed44db761c2252cc081529ff0a73", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49f32e0c8e78948210654299a8c19b2e0f0cbfa9/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f32e0c8e78948210654299a8c19b2e0f0cbfa9/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls\n-        if let ExprKind::MethodCall(call, ..) = expr.kind {\n+        if let ExprKind::MethodCall(call, _, elements, _) = expr.kind {\n             // Get the `DefId` only when dealing with an `AssocFn`\n             if let Some((DefKind::AssocFn, did)) =\n                 cx.typeck_results().type_dependent_def(expr.hir_id)\n@@ -70,15 +70,23 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                             .iter()\n                             .any(|s| cx.tcx.is_diagnostic_item(*s, i.def_id()))\n                             {\n+                                let method = &call.ident.name;\n+                                let receiver = &elements[0];\n+                                let receiver_ty = cx.typeck_results().expr_ty(receiver);\n                                 let expr_span = expr.span;\n+                                let note = format!(\n+                                    \"the type `{:?}` which `{}` is being called on is the same as the type returned from `{}`, \\\n+                                        so the method call does not do anything and can be removed.\",\n+                                    receiver_ty, method, method\n+                                );\n \n-                                cx.struct_span_lint(NOOP_METHOD_CALL, expr_span, |lint| {\n+                                let span = expr_span.with_lo(receiver.span.hi());\n+                                cx.struct_span_lint(NOOP_METHOD_CALL, span, |lint| {\n                                     let method = &call.ident.name;\n                                     let message = format!(\"call to `.{}()` on a reference in this situation does nothing\", &method);\n                                     lint.build(&message)\n-                                        .span_label(expr_span, \"unnecessary method call\")\n-                                        .note(\"the type the method is being called on and the return type are functionally equivalent.\")\n-                                        .note(\"therefore, the method call doesn't actually do anything and can be removed.\")\n+                                        .span_label(span, \"unnecessary method call\")\n+                                        .note(&note)\n                                         .emit()\n                                 });\n                             }"}, {"sha": "7e27bf3abf9f3dc8926854fd2283b0c0719d311c", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/49f32e0c8e78948210654299a8c19b2e0f0cbfa9/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f32e0c8e78948210654299a8c19b2e0f0cbfa9/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=49f32e0c8e78948210654299a8c19b2e0f0cbfa9", "patch": "@@ -1,39 +1,35 @@\n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:24:32\n+  --> $DIR/noop-method-call.rs:24:35\n    |\n LL |     let foo_clone: &Foo<u32> = foo.clone();\n-   |                                ^^^^^^^^^^^ unnecessary method call\n+   |                                   ^^^^^^^^ unnecessary method call\n    |\n    = note: `#[warn(noop_method_call)]` on by default\n-   = note: the type the method is being called on and the return type are functionally equivalent.\n-   = note: therefore, the method call doesn't actually do anything and can be removed.\n+   = note: the type `&Foo<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed.\n \n warning: call to `.deref()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:31:39\n+  --> $DIR/noop-method-call.rs:31:44\n    |\n LL |     let derefed: &DerefExample<u32> = deref.deref();\n-   |                                       ^^^^^^^^^^^^^ unnecessary method call\n+   |                                            ^^^^^^^^ unnecessary method call\n    |\n-   = note: the type the method is being called on and the return type are functionally equivalent.\n-   = note: therefore, the method call doesn't actually do anything and can be removed.\n+   = note: the type `&&DerefExample<u32>` which `deref` is being called on is the same as the type returned from `deref`, so the method call does not do anything and can be removed.\n \n warning: call to `.borrow()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:38:31\n+  --> $DIR/noop-method-call.rs:38:32\n    |\n LL |     let borrowed: &Foo<u32> = a.borrow();\n-   |                               ^^^^^^^^^^ unnecessary method call\n+   |                                ^^^^^^^^^ unnecessary method call\n    |\n-   = note: the type the method is being called on and the return type are functionally equivalent.\n-   = note: therefore, the method call doesn't actually do anything and can be removed.\n+   = note: the type `&&Foo<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed.\n \n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:47:5\n+  --> $DIR/noop-method-call.rs:47:8\n    |\n LL |     foo.clone();\n-   |     ^^^^^^^^^^^ unnecessary method call\n+   |        ^^^^^^^^ unnecessary method call\n    |\n-   = note: the type the method is being called on and the return type are functionally equivalent.\n-   = note: therefore, the method call doesn't actually do anything and can be removed.\n+   = note: the type `&Foo<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed.\n \n warning: 4 warnings emitted\n "}]}