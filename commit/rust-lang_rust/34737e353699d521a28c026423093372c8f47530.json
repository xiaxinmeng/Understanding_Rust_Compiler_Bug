{"sha": "34737e353699d521a28c026423093372c8f47530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzM3ZTM1MzY5OWQ1MjFhMjhjMDI2NDIzMDkzMzcyYzhmNDc1MzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-16T20:38:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-17T22:04:28Z"}, "message": "Add more tests for unnameable reachable items", "tree": {"sha": "e7f1bf83ac3fa8cb66c79e4688d9c2a72041b369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f1bf83ac3fa8cb66c79e4688d9c2a72041b369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34737e353699d521a28c026423093372c8f47530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34737e353699d521a28c026423093372c8f47530", "html_url": "https://github.com/rust-lang/rust/commit/34737e353699d521a28c026423093372c8f47530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34737e353699d521a28c026423093372c8f47530/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767a4474700e4bdbbae07caa2a85647e356d4de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/767a4474700e4bdbbae07caa2a85647e356d4de0", "html_url": "https://github.com/rust-lang/rust/commit/767a4474700e4bdbbae07caa2a85647e356d4de0"}], "stats": {"total": 196, "additions": 168, "deletions": 28}, "files": [{"sha": "7ec2bb9394cc3724c2eb17e3b1420dc8a52d8fb6", "filename": "src/test/auxiliary/reachable-unnameable-items.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Fauxiliary%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Fauxiliary%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Freachable-unnameable-items.rs?ref=34737e353699d521a28c026423093372c8f47530", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use inner_private_module::*;\n+\n+mod inner_private_module {\n+    pub struct Unnameable1;\n+    pub struct Unnameable2;\n+    #[derive(Clone, Copy)]\n+    pub struct Unnameable3;\n+    pub struct Unnameable4;\n+    pub struct Unnameable5;\n+    pub struct Unnameable6;\n+    pub struct Unnameable7;\n+    #[derive(Default)]\n+    pub struct Unnameable8;\n+    pub enum UnnameableEnum {\n+        NameableVariant\n+    }\n+    pub trait UnnameableTrait {\n+        type Alias: Default;\n+    }\n+\n+    impl Unnameable1 {\n+        pub fn method_of_unnameable_type1(&self) -> &'static str {\n+            \"Hello1\"\n+        }\n+    }\n+    impl Unnameable2 {\n+        pub fn method_of_unnameable_type2(&self) -> &'static str {\n+            \"Hello2\"\n+        }\n+    }\n+    impl Unnameable3 {\n+        pub fn method_of_unnameable_type3(&self) -> &'static str {\n+            \"Hello3\"\n+        }\n+    }\n+    impl Unnameable4 {\n+        pub fn method_of_unnameable_type4(&self) -> &'static str {\n+            \"Hello4\"\n+        }\n+    }\n+    impl Unnameable5 {\n+        pub fn method_of_unnameable_type5(&self) -> &'static str {\n+            \"Hello5\"\n+        }\n+    }\n+    impl Unnameable6 {\n+        pub fn method_of_unnameable_type6(&self) -> &'static str {\n+            \"Hello6\"\n+        }\n+    }\n+    impl Unnameable7 {\n+        pub fn method_of_unnameable_type7(&self) -> &'static str {\n+            \"Hello7\"\n+        }\n+    }\n+    impl Unnameable8 {\n+        pub fn method_of_unnameable_type8(&self) -> &'static str {\n+            \"Hello8\"\n+        }\n+    }\n+    impl UnnameableEnum {\n+        pub fn method_of_unnameable_enum(&self) -> &'static str {\n+            \"HelloEnum\"\n+        }\n+    }\n+}\n+\n+pub fn function_returning_unnameable_type() -> Unnameable1 {\n+    Unnameable1\n+}\n+\n+pub const CONSTANT_OF_UNNAMEABLE_TYPE: Unnameable2 =\n+                                            Unnameable2;\n+\n+pub fn function_accepting_unnameable_type(_: Option<Unnameable3>) {}\n+\n+pub type AliasOfUnnameableType = Unnameable4;\n+\n+impl Unnameable1 {\n+    pub fn inherent_method_returning_unnameable_type(&self) -> Unnameable5 {\n+        Unnameable5\n+    }\n+}\n+\n+pub trait Tr {\n+    fn trait_method_returning_unnameable_type(&self) -> Unnameable6 {\n+        Unnameable6\n+    }\n+}\n+impl Tr for Unnameable1 {}\n+\n+pub use inner_private_module::UnnameableEnum::NameableVariant;\n+\n+pub struct Struct {\n+    pub field_of_unnameable_type: Unnameable7\n+}\n+\n+pub static STATIC: Struct = Struct { field_of_unnameable_type: Unnameable7 } ;\n+\n+impl UnnameableTrait for AliasOfUnnameableType {\n+    type Alias = Unnameable8;\n+}\n+\n+pub fn generic_function<T: UnnameableTrait>() -> T::Alias {\n+    Default::default()\n+}"}, {"sha": "80225c9fe8eacc0c85934f17c919302ebbd6ba84", "filename": "src/test/run-pass/issue-16734.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/767a4474700e4bdbbae07caa2a85647e356d4de0/src%2Ftest%2Frun-pass%2Fissue-16734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767a4474700e4bdbbae07caa2a85647e356d4de0/src%2Ftest%2Frun-pass%2Fissue-16734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16734.rs?ref=767a4474700e4bdbbae07caa2a85647e356d4de0", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:issue-16734.rs\n-\n-extern crate issue_16734;\n-\n-fn main() {\n-    let res = issue_16734::public_function_returning_unnameable_type()\n-                                .method_of_unnameable_type();\n-    assert_eq!(res, \"Hello!\");\n-}"}, {"sha": "88d3f160c81ea38d65d55bdbdfb42f1cecf977f8", "filename": "src/test/run-pass/reachable-unnameable-items.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs?ref=34737e353699d521a28c026423093372c8f47530", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:reachable-unnameable-items.rs\n+\n+#![feature(braced_empty_structs)]\n+#![feature(recover)]\n+\n+extern crate reachable_unnameable_items;\n+use reachable_unnameable_items::*;\n+\n+fn main() {\n+    let res1 = function_returning_unnameable_type().method_of_unnameable_type1();\n+    let res2 = CONSTANT_OF_UNNAMEABLE_TYPE.method_of_unnameable_type2();\n+    let res4 = AliasOfUnnameableType{}.method_of_unnameable_type4();\n+    let res5 = function_returning_unnameable_type().inherent_method_returning_unnameable_type().\n+                                                    method_of_unnameable_type5();\n+    let res6 = function_returning_unnameable_type().trait_method_returning_unnameable_type().\n+                                                    method_of_unnameable_type6();\n+    let res7 = STATIC.field_of_unnameable_type.method_of_unnameable_type7();\n+    let res8 = generic_function::<AliasOfUnnameableType>().method_of_unnameable_type8();\n+    let res_enum = NameableVariant.method_of_unnameable_enum();\n+    assert_eq!(res1, \"Hello1\");\n+    assert_eq!(res2, \"Hello2\");\n+    assert_eq!(res4, \"Hello4\");\n+    assert_eq!(res5, \"Hello5\");\n+    assert_eq!(res6, \"Hello6\");\n+    assert_eq!(res7, \"Hello7\");\n+    assert_eq!(res8, \"Hello8\");\n+    assert_eq!(res_enum, \"HelloEnum\");\n+\n+    let none = None;\n+    function_accepting_unnameable_type(none);\n+    let _guard = std::panic::recover(|| none.unwrap().method_of_unnameable_type3());\n+}"}, {"sha": "5d0c6df3d582f3dce77a493c835152a2f8044762", "filename": "src/test/run-pass/reachable-unnameable-type-alias.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Frun-pass%2Freachable-unnameable-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737e353699d521a28c026423093372c8f47530/src%2Ftest%2Frun-pass%2Freachable-unnameable-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freachable-unnameable-type-alias.rs?ref=34737e353699d521a28c026423093372c8f47530", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod inner_private_module {\n-    pub struct Unnameable;\n+#![feature(staged_api)]\n+#![stable(feature = \"a\", since = \"b\")]\n \n-    impl Unnameable {\n-        pub fn method_of_unnameable_type(&self) -> &'static str {\n-            \"Hello!\"\n-        }\n-    }\n+mod inner_private_module {\n+    // UnnameableTypeAlias isn't marked as reachable, so no stability annotation is required here\n+    pub type UnnameableTypeAlias = u8;\n }\n \n-pub fn public_function_returning_unnameable_type() -> inner_private_module::Unnameable {\n-    inner_private_module::Unnameable\n+#[stable(feature = \"a\", since = \"b\")]\n+pub fn f() -> inner_private_module::UnnameableTypeAlias {\n+    0\n }\n+\n+fn main() {}", "previous_filename": "src/test/auxiliary/issue-16734.rs"}]}