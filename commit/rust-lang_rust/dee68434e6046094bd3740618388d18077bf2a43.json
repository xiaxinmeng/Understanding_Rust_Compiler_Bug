{"sha": "dee68434e6046094bd3740618388d18077bf2a43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTY4NDM0ZTYwNDYwOTRiZDM3NDA2MTgzODhkMTgwNzdiZjJhNDM=", "commit": {"author": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2018-10-06T13:32:38Z"}, "committer": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2018-10-06T13:32:38Z"}, "message": "Overflow Visual functions even with one argument", "tree": {"sha": "31e6df022e19f2293804e7f4f21ea3d53534158d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e6df022e19f2293804e7f4f21ea3d53534158d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee68434e6046094bd3740618388d18077bf2a43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJGBAABCAAwFiEE1hPewaQLbx3Fswa5As442kfp1pEFAlu4uZASHHlhbHRlcnpA\nZ21haWwuY29tAAoJEALOONpH6daRwN0QALmikVjCs3EWuRHck3/md6LyLlzg/f7o\nfZmfI8kUZQGevTdOyBF+mniD7OeqO097TU5M7NrTqPd22GH9T9zTRIxmneUl0KDq\nJCIz35EV33gooQIvwa02ni1URIuedcVnFPzlyBUsHQlROPPTpA1E3/+EWzD+HxdE\ndPTPaEHm411ErcTcK0PxpDXSIgAz//8bdYFUUC9CT9Lnp9Atwxs2Wb6CcQ/jogpt\nGke9tM6lGGbktcYariaF1XynRdaOF1SoIrLcYKeWt09NjZa1Aam7VfHaeemluFY1\ndzHU//d9MMnyhE/NIP5VQmCco2W9xBNuBMI5Ws+LIf2lj8XxhVuTbOdjcGnvXo3s\n4BuEbJdaj/oT9C/pA+jvcnIH68m8Z/2zfqm5v2ddBsGLLIjlAKQlXKwfRKAzdMpW\nAPST20m094ek6ykxSqS0tVuXf5LGdAYCyFfLOnkvzzJHNu0Fom4TSwTff1d4Cafu\n0bZG4uPS7kFFrwejYikniaNoj2RNI+g+/bWAGtmJz7PjbkOYE8qW9ld+hKAZBfy9\nHrKd5lkZ57SHyjgp5pMRFjZbDvtH8BrBQCwhg9uZt2UR3tqllWsCGnbiCwLJdMWo\nJRgJC9pzzHwTotC8s0xyPpgqmZL9/0COZP8hhL0cUtwl1MkLfqW/iyouJcJD9Etz\nYAlxlo/2uxW3\n=JZjU\n-----END PGP SIGNATURE-----", "payload": "tree 31e6df022e19f2293804e7f4f21ea3d53534158d\nparent 6dc9b9665167fb8f3ac3b576bcf6d224f956ea5d\nauthor Ivan Molodetskikh <yalterz@gmail.com> 1538832758 +0300\ncommitter Ivan Molodetskikh <yalterz@gmail.com> 1538832758 +0300\n\nOverflow Visual functions even with one argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee68434e6046094bd3740618388d18077bf2a43", "html_url": "https://github.com/rust-lang/rust/commit/dee68434e6046094bd3740618388d18077bf2a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee68434e6046094bd3740618388d18077bf2a43/comments", "author": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc9b9665167fb8f3ac3b576bcf6d224f956ea5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc9b9665167fb8f3ac3b576bcf6d224f956ea5d", "html_url": "https://github.com/rust-lang/rust/commit/6dc9b9665167fb8f3ac3b576bcf6d224f956ea5d"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "4a4c123f4da3d68dfbb29580f8728b343e6ad75c", "filename": "src/chains.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dee68434e6046094bd3740618388d18077bf2a43/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee68434e6046094bd3740618388d18077bf2a43/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=dee68434e6046094bd3740618388d18077bf2a43", "patch": "@@ -576,7 +576,15 @@ impl<'a> ChainFormatterShared<'a> {\n         if all_in_one_line || extendable {\n             // First we try to 'overflow' the last child and see if it looks better than using\n             // vertical layout.\n-            if let Some(one_line_shape) = last_shape.offset_left(almost_total) {\n+            let one_line_shape = if context.use_block_indent() {\n+                last_shape.offset_left(almost_total)\n+            } else {\n+                last_shape\n+                    .visual_indent(almost_total)\n+                    .sub_width(almost_total)\n+            };\n+\n+            if let Some(one_line_shape) = one_line_shape {\n                 if let Some(rw) = last.rewrite(context, one_line_shape) {\n                     // We allow overflowing here only if both of the following conditions match:\n                     // 1. The entire chain fits in a single line except the last child."}, {"sha": "09257e591101d032f11a871a889b15ad21b02e55", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee68434e6046094bd3740618388d18077bf2a43/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee68434e6046094bd3740618388d18077bf2a43/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=dee68434e6046094bd3740618388d18077bf2a43", "patch": "@@ -1376,8 +1376,7 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n             context.config.combine_control_expr() && context.use_block_indent() && args_len == 1\n         }\n         ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n-            context.use_block_indent()\n-                || context.config.indent_style() == IndentStyle::Visual && args_len > 1\n+            context.use_block_indent() || context.config.indent_style() == IndentStyle::Visual\n         }\n         ast::ExprKind::Array(..)\n         | ast::ExprKind::Call(..)"}, {"sha": "76ef99a4b59f15d62b0ffa26b987c8fbcb1e2731", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dee68434e6046094bd3740618388d18077bf2a43/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee68434e6046094bd3740618388d18077bf2a43/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=dee68434e6046094bd3740618388d18077bf2a43", "patch": "@@ -37,8 +37,8 @@ fn main() {\n \n     fffffffffffffffffffffffffffffffffff(a, {\n         SCRIPT_TASK_ROOT.with(|root| {\n-                                  *root.borrow_mut() = Some(&script_task);\n-                              });\n+                            *root.borrow_mut() = Some(&script_task);\n+                        });\n     });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum =\n@@ -47,9 +47,9 @@ fn main() {\n                .fold(0, |acc, x| acc + x);\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n-                             x += 1;\n-                             x\n-                         })\n+                        x += 1;\n+                        x\n+                    })\n                     .filter(some_mod::some_filter)\n }\n \n@@ -83,16 +83,16 @@ fn floaters() {\n      .baz();\n \n     Foo { x: val }.baz(|| {\n-                           force();\n-                           multiline();\n-                       })\n+                      force();\n+                      multiline();\n+                  })\n                   .quux();\n \n     Foo { y: i_am_multi_line,\n           z: ok }.baz(|| {\n-                          force();\n-                          multiline();\n-                      })\n+                     force();\n+                     multiline();\n+                 })\n                  .quux();\n \n     a + match x {\n@@ -137,22 +137,22 @@ fn issue1434() {\n     for _ in 0..100 {\n         let prototype_id =\n             PrototypeIdData::from_reader::<_, B>(&mut self.file_cursor).chain_err(|| {\n-                           format!(\"could not read prototype ID at offset {:#010x}\",\n-                                   current_offset)\n-                       })?;\n+                format!(\"could not read prototype ID at offset {:#010x}\",\n+                        current_offset)\n+            })?;\n     }\n }\n \n fn issue2264() {\n     {\n         something.function()\n                  .map(|| {\n-                          if let a_very_very_very_very_very_very_very_very_long_variable =\n-                              compute_this_variable()\n-                          {\n-                              println!(\"Hello\");\n-                          }\n-                      })\n+                     if let a_very_very_very_very_very_very_very_very_long_variable =\n+                         compute_this_variable()\n+                     {\n+                         println!(\"Hello\");\n+                     }\n+                 })\n                  .collect();\n     }\n }"}, {"sha": "37b216ea9b137258d1021ca7a5bef60262b73a44", "filename": "tests/target/issue-2985.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dee68434e6046094bd3740618388d18077bf2a43/tests%2Ftarget%2Fissue-2985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee68434e6046094bd3740618388d18077bf2a43/tests%2Ftarget%2Fissue-2985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2985.rs?ref=dee68434e6046094bd3740618388d18077bf2a43", "patch": "@@ -4,30 +4,30 @@ fn foo() {\n         {\n             let extra_encoder_settings = extra_encoder_settings.iter()\n                                                                .filter_map(|&(name, value)| {\n-                                                                               value.split()\n-                                                                                    .next()\n-                                                                                    .something()\n-                                                                                    .something2()\n-                                                                                    .something3()\n-                                                                                    .something4()\n-                                                                           });\n+                                                                   value.split()\n+                                                                        .next()\n+                                                                        .something()\n+                                                                        .something2()\n+                                                                        .something3()\n+                                                                        .something4()\n+                                                               });\n             let extra_encoder_settings = extra_encoder_settings.iter()\n                                                                .filter_map(|&(name, value)| {\n-                                                                               value.split()\n-                                                                                    .next()\n-                                                                                    .something()\n-                                                                                    .something2()\n-                                                                                    .something3()\n-                                                                                    .something4()\n-                                                                           })\n+                                                                   value.split()\n+                                                                        .next()\n+                                                                        .something()\n+                                                                        .something2()\n+                                                                        .something3()\n+                                                                        .something4()\n+                                                               })\n                                                                .something();\n             if let Some(subpod) = pod.subpods.iter().find(|s| {\n-                                                              !s.plaintext\n-                                                                .as_ref()\n-                                                                .map(String::as_ref)\n-                                                                .unwrap_or(\"\")\n-                                                                .is_empty()\n-                                                          }) {\n+                                                        !s.plaintext\n+                                                          .as_ref()\n+                                                          .map(String::as_ref)\n+                                                          .unwrap_or(\"\")\n+                                                          .is_empty()\n+                                                    }) {\n                 do_something();\n             }\n         }"}]}