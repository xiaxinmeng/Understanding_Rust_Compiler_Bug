{"sha": "899f22238669bade874f29f784cdffba28ff0982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OWYyMjIzODY2OWJhZGU4NzRmMjlmNzg0Y2RmZmJhMjhmZjA5ODI=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-23T21:19:23Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-23T22:16:46Z"}, "message": "Calibrate span for method call error messages\n\nSpecifically, the method parameter cardinality mismatch or missing\nmethod error message span now gets method itself exactly. It was the\nwhole expression.\n\nCloses #9390\nCloses #13684\nCloses #13709", "tree": {"sha": "dec876a0dd6a32f30d555388c592cf8a579b0390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec876a0dd6a32f30d555388c592cf8a579b0390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899f22238669bade874f29f784cdffba28ff0982", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899f22238669bade874f29f784cdffba28ff0982", "html_url": "https://github.com/rust-lang/rust/commit/899f22238669bade874f29f784cdffba28ff0982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899f22238669bade874f29f784cdffba28ff0982/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5dd3f05fe95168b5569d0f519636149479eb6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dd3f05fe95168b5569d0f519636149479eb6ac", "html_url": "https://github.com/rust-lang/rust/commit/b5dd3f05fe95168b5569d0f519636149479eb6ac"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "17666f334944fab76a5f947b5111a88d5e911a3e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -791,7 +791,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                     }\n                     Some(method) => {\n                         debug!(\"(privacy checking) checking impl method\");\n-                        self.check_method(expr.span, method.origin, ident);\n+                        self.check_method(expr.span, method.origin, ident.node);\n                     }\n                 }\n             }"}, {"sha": "d429ead39d63f1cec6840639f5f5e6611a1b012b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -5083,7 +5083,7 @@ impl<'a> Resolver<'a> {\n                 debug!(\"(recording candidate traits for expr) recording \\\n                         traits for {}\",\n                        expr.id);\n-                let traits = self.search_for_traits_containing_method(ident.name);\n+                let traits = self.search_for_traits_containing_method(ident.node.name);\n                 self.trait_map.insert(expr.id, traits);\n             }\n             _ => {"}, {"sha": "ce35d1ab1debc72522e3917fc9d91cc6d4ae47e9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -1722,7 +1722,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 }\n                 _ => {\n                     fcx.tcx().sess.span_bug(\n-                        sp,\n+                        callee_expr.span,\n                         format!(\"method without bare fn type\"));\n                 }\n             }\n@@ -1936,7 +1936,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n     // Checks a method call.\n     fn check_method_call(fcx: &FnCtxt,\n                          expr: &ast::Expr,\n-                         method_name: ast::Ident,\n+                         method_name: ast::SpannedIdent,\n                          args: &[@ast::Expr],\n                          tps: &[ast::P<ast::Ty>]) {\n         let rcvr = args[0];\n@@ -1952,7 +1952,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         let tps = tps.iter().map(|&ast_ty| fcx.to_ty(ast_ty)).collect::<Vec<_>>();\n         let fn_ty = match method::lookup(fcx, expr, rcvr,\n-                                         method_name.name,\n+                                         method_name.node.name,\n                                          expr_t, tps.as_slice(),\n                                          DontDerefArgs,\n                                          CheckTraitsAndInherentMethods,\n@@ -1966,11 +1966,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             None => {\n                 debug!(\"(checking method call) failing expr is {}\", expr.id);\n \n-                fcx.type_error_message(expr.span,\n+                fcx.type_error_message(method_name.span,\n                   |actual| {\n-                      format!(\"type `{}` does not implement any method in scope \\\n-                            named `{}`\",\n-                           actual, token::get_ident(method_name))\n+                      format!(\"type `{}` does not implement any method in scope named `{}`\",\n+                              actual, token::get_ident(method_name.node))\n                   },\n                   expr_t,\n                   None);\n@@ -1982,7 +1981,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         };\n \n         // Call the generic checker.\n-        let ret_ty = check_method_argument_types(fcx, expr.span,\n+        let ret_ty = check_method_argument_types(fcx, method_name.span,\n                                                  fn_ty, expr, args,\n                                                  DontDerefArgs);\n "}, {"sha": "12a57cacc3a8da05f5024fb171e741b07adbacc1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -480,7 +480,7 @@ pub enum Expr_ {\n     ExprBox(@Expr, @Expr),\n     ExprVec(Vec<@Expr>),\n     ExprCall(@Expr, Vec<@Expr>),\n-    ExprMethodCall(Ident, Vec<P<Ty>>, Vec<@Expr>),\n+    ExprMethodCall(SpannedIdent, Vec<P<Ty>>, Vec<@Expr>),\n     ExprTup(Vec<@Expr>),\n     ExprBinary(BinOp, @Expr, @Expr),\n     ExprUnary(UnOp, @Expr),"}, {"sha": "d5465303394c6a49ccd5a7fb18be2466b2369078", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -12,7 +12,7 @@ use abi;\n use ast::{P, Ident};\n use ast;\n use ast_util;\n-use codemap::{Span, respan, DUMMY_SP};\n+use codemap::{Span, respan, Spanned, DUMMY_SP};\n use ext::base::ExtCtxt;\n use ext::quote::rt::*;\n use fold::Folder;\n@@ -548,8 +548,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                         expr: @ast::Expr,\n                         ident: ast::Ident,\n                         mut args: Vec<@ast::Expr> ) -> @ast::Expr {\n+        let id = Spanned { node: ident, span: span };\n         args.unshift(expr);\n-        self.expr(span, ast::ExprMethodCall(ident, Vec::new(), args))\n+        self.expr(span, ast::ExprMethodCall(id, Vec::new(), args))\n     }\n     fn expr_block(&self, b: P<ast::Block>) -> @ast::Expr {\n         self.expr(b.span, ast::ExprBlock(b))"}, {"sha": "d50e425b9a7a5b2671f39f056bd0438b634a24d1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -797,7 +797,7 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         }\n         ExprMethodCall(i, ref tps, ref args) => {\n             ExprMethodCall(\n-                folder.fold_ident(i),\n+                respan(i.span, folder.fold_ident(i.node)),\n                 tps.iter().map(|&x| folder.fold_ty(x)).collect(),\n                 args.iter().map(|&x| folder.fold_expr(x)).collect())\n         }"}, {"sha": "8f011ffab5f1bd56781652f6508ce529b12616cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -1646,7 +1646,11 @@ impl<'a> Parser<'a> {\n         ExprCall(f, args)\n     }\n \n-    fn mk_method_call(&mut self, ident: Ident, tps: Vec<P<Ty>> , args: Vec<@Expr> ) -> ast::Expr_ {\n+    fn mk_method_call(&mut self,\n+                      ident: ast::SpannedIdent,\n+                      tps: Vec<P<Ty>>,\n+                      args: Vec<@Expr>)\n+                      -> ast::Expr_ {\n         ExprMethodCall(ident, tps, args)\n     }\n \n@@ -1919,6 +1923,7 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::DOT) {\n                 match self.token {\n                   token::IDENT(i, _) => {\n+                    let dot = self.last_span.hi;\n                     hi = self.span.hi;\n                     self.bump();\n                     let (_, tys) = if self.eat(&token::MOD_SEP) {\n@@ -1940,7 +1945,8 @@ impl<'a> Parser<'a> {\n                             hi = self.last_span.hi;\n \n                             es.unshift(e);\n-                            let nd = self.mk_method_call(i, tys, es);\n+                            let id = spanned(dot, hi, i);\n+                            let nd = self.mk_method_call(id, tys, es);\n                             e = self.mk_expr(lo, hi, nd);\n                         }\n                         _ => {"}, {"sha": "2f5f1f07fc5d9bcb966e6a340f9d03d82449c215", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -1208,7 +1208,7 @@ impl<'a> State<'a> {\n                 let base_args = args.slice_from(1);\n                 try!(self.print_expr(*args.get(0)));\n                 try!(word(&mut self.s, \".\"));\n-                try!(self.print_ident(ident));\n+                try!(self.print_ident(ident.node));\n                 if tys.len() > 0u {\n                     try!(word(&mut self.s, \"::<\"));\n                     try!(self.commasep(Inconsistent, tys.as_slice(),"}, {"sha": "3610a0e2e9d90316b6797ab2dd81a03474a2c86e", "filename": "src/test/compile-fail/method-call-err-msg.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/899f22238669bade874f29f784cdffba28ff0982/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899f22238669bade874f29f784cdffba28ff0982/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs?ref=899f22238669bade874f29f784cdffba28ff0982", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that parameter cardinality or missing method error gets span exactly.\n+\n+pub struct Foo;\n+impl Foo {\n+    fn zero(self) -> Foo { self }\n+    fn one(self, _: int) -> Foo { self }\n+    fn two(self, _: int, _: int) -> Foo { self }\n+}\n+\n+fn main() {\n+    let x = Foo;\n+    x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n+     .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+     .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+\n+    let y = Foo;\n+    y.zero()\n+     .take()    //~ ERROR type `Foo` does not implement any method in scope named `take`\n+     .one(0);\n+}"}]}