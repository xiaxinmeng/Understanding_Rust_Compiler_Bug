{"sha": "6fa16d6a473415415cb87a1fe6754aace32cbb1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTE2ZDZhNDczNDE1NDE1Y2I4N2ExZmU2NzU0YWFjZTMyY2JiMWM=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-04-13T14:21:32Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-04-13T17:57:51Z"}, "message": "pluralize doc comment verbs and add missing periods", "tree": {"sha": "6009800c0605908efff7b33c6711b5924d4f70d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6009800c0605908efff7b33c6711b5924d4f70d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa16d6a473415415cb87a1fe6754aace32cbb1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa16d6a473415415cb87a1fe6754aace32cbb1c", "html_url": "https://github.com/rust-lang/rust/commit/6fa16d6a473415415cb87a1fe6754aace32cbb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa16d6a473415415cb87a1fe6754aace32cbb1c/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588d37c653ddac491c2c1cb8974f56781533b173", "url": "https://api.github.com/repos/rust-lang/rust/commits/588d37c653ddac491c2c1cb8974f56781533b173", "html_url": "https://github.com/rust-lang/rust/commit/588d37c653ddac491c2c1cb8974f56781533b173"}], "stats": {"total": 760, "additions": 380, "deletions": 380}, "files": [{"sha": "d12b979e084fc33c8edb75a1c8e6d754c4d770a2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -923,7 +923,7 @@ impl BitVec {\n         self.set(insert_pos, elem);\n     }\n \n-    /// Return the total number of bits in this vector\n+    /// Returns the total number of bits in this vector\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize { self.nbits }\n@@ -1695,7 +1695,7 @@ impl BitSet {\n         self.other_op(other, |w1, w2| w1 ^ w2);\n     }\n \n-    /// Return the number of set bits in this set.\n+    /// Returns the number of set bits in this set.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize  {"}, {"sha": "413100039a2cc5ca50fc35110b74a4d970da5e03", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -1339,7 +1339,7 @@ impl<K, V> BTreeMap<K, V> {\n         Values { inner: self.iter().map(second) }\n     }\n \n-    /// Return the number of elements in the map.\n+    /// Returns the number of elements in the map.\n     ///\n     /// # Examples\n     ///\n@@ -1354,7 +1354,7 @@ impl<K, V> BTreeMap<K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize { self.length }\n \n-    /// Return true if the map contains no elements.\n+    /// Returns true if the map contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1abd56fd1458d25dab2562ff4d0ea9597831882d", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -284,7 +284,7 @@ impl<T: Ord> BTreeSet<T> {\n         Union{a: self.iter().peekable(), b: other.iter().peekable()}\n     }\n \n-    /// Return the number of elements in the set\n+    /// Returns the number of elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -299,7 +299,7 @@ impl<T: Ord> BTreeSet<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize { self.map.len() }\n \n-    /// Returns true if the set contains no elements\n+    /// Returns true if the set contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "5be9739cb32de7ccba1e6dbcf61e4b12f0683a62", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -549,7 +549,7 @@ impl<T> [T] {\n         core_slice::SliceExt::binary_search_by(self, f)\n     }\n \n-    /// Return the number of elements in the slice\n+    /// Returns the number of elements in the slice.\n     ///\n     /// # Example\n     ///\n@@ -757,7 +757,7 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n \n-    /// Return an unsafe mutable pointer to the slice's buffer.\n+    /// Returns an unsafe mutable pointer to the slice's buffer.\n     ///\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n@@ -984,7 +984,7 @@ impl<T> [T] {\n         core_slice::SliceExt::ends_with(self, needle)\n     }\n \n-    /// Convert `self` into a vector without clones or allocation.\n+    /// Converts `self` into a vector without clones or allocation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn into_vec(self: Box<Self>) -> Vec<T> {"}, {"sha": "e1da8b3b3bccd375e3e3d250a60ac4498bdc8207", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -1248,7 +1248,7 @@ impl str {\n         core_str::StrExt::trim_right_matches(&self[..], pat)\n     }\n \n-    /// Check that `index`-th byte lies at the start and/or end of a\n+    /// Checks that `index`-th byte lies at the start and/or end of a\n     /// UTF-8 code point sequence.\n     ///\n     /// The start and end of the string (when `index == self.len()`) are\n@@ -1435,7 +1435,7 @@ impl str {\n         core_str::StrExt::char_at_reverse(&self[..], i)\n     }\n \n-    /// Convert `self` to a byte slice.\n+    /// Converts `self` to a byte slice.\n     ///\n     /// # Examples\n     ///\n@@ -1591,7 +1591,7 @@ impl str {\n         core_str::StrExt::subslice_offset(&self[..], inner)\n     }\n \n-    /// Return an unsafe pointer to the `&str`'s buffer.\n+    /// Returns an unsafe pointer to the `&str`'s buffer.\n     ///\n     /// The caller must ensure that the string outlives this pointer, and\n     /// that it is not\n@@ -1609,7 +1609,7 @@ impl str {\n         core_str::StrExt::as_ptr(&self[..])\n     }\n \n-    /// Return an iterator of `u16` over the string encoded as UTF-16.\n+    /// Returns an iterator of `u16` over the string encoded as UTF-16.\n     #[unstable(feature = \"collections\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn utf16_units(&self) -> Utf16Units {"}, {"sha": "c3266ea2948c7e4fba6f1e8b52bbbd3f8aba78b1", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -347,7 +347,7 @@ impl String {\n         String { vec: bytes }\n     }\n \n-    /// Return the underlying byte buffer, encoded as UTF-8.\n+    /// Returns the underlying byte buffer, encoded as UTF-8.\n     ///\n     /// # Examples\n     ///\n@@ -363,7 +363,7 @@ impl String {\n         self.vec\n     }\n \n-    /// Extract a string slice containing the entire string.\n+    /// Extracts a string slice containing the entire string.\n     #[inline]\n     #[unstable(feature = \"convert\",\n                reason = \"waiting on RFC revision\")]\n@@ -607,7 +607,7 @@ impl String {\n         ch\n     }\n \n-    /// Insert a character into the string buffer at byte position `idx`.\n+    /// Inserts a character into the string buffer at byte position `idx`.\n     ///\n     /// # Warning\n     ///\n@@ -662,7 +662,7 @@ impl String {\n         &mut self.vec\n     }\n \n-    /// Return the number of bytes in this string.\n+    /// Returns the number of bytes in this string.\n     ///\n     /// # Examples\n     ///\n@@ -705,12 +705,12 @@ impl String {\n }\n \n impl FromUtf8Error {\n-    /// Consume this error, returning the bytes that were attempted to make a\n+    /// Consumes this error, returning the bytes that were attempted to make a\n     /// `String` with.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> { self.bytes }\n \n-    /// Access the underlying UTF8-error that was the cause of this error.\n+    /// Accesss the underlying UTF8-error that was the cause of this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn utf8_error(&self) -> Utf8Error { self.error }\n }\n@@ -959,7 +959,7 @@ impl<'a> Deref for DerefString<'a> {\n     }\n }\n \n-/// Convert a string slice to a wrapper type providing a `&String` reference.\n+/// Converts a string slice to a wrapper type providing a `&String` reference.\n ///\n /// # Examples\n ///"}, {"sha": "4fa91a6a16a526ca9369b7ddfe4bc9b8b0209ddb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -393,7 +393,7 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Convert the vector into Box<[T]>.\n+    /// Converts the vector into Box<[T]>.\n     ///\n     /// Note that this will drop any excess capacity. Calling this and\n     /// converting back to a vector with `into_vec()` is equivalent to calling\n@@ -434,7 +434,7 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Extract a slice containing the entire vector.\n+    /// Extracts a slice containing the entire vector.\n     #[inline]\n     #[unstable(feature = \"convert\",\n                reason = \"waiting on RFC revision\")]\n@@ -1936,7 +1936,7 @@ impl<'a, T> Drop for DerefVec<'a, T> {\n     }\n }\n \n-/// Convert a slice to a wrapper type providing a `&Vec<T>` reference.\n+/// Converts a slice to a wrapper type providing a `&Vec<T>` reference.\n #[unstable(feature = \"collections\")]\n pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {"}, {"sha": "a66cde81c8ba5943dd1adb609cd707b581d6c049", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -481,7 +481,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Shorten a ringbuf, dropping excess elements from the back.\n+    /// Shortens a ringbuf, dropping excess elements from the back.\n     ///\n     /// If `len` is greater than the ringbuf's current length, this has no\n     /// effect."}, {"sha": "cb86e4ab38d3d0b0bf37937c85cc6875b44585ea", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -452,7 +452,7 @@ impl<V> VecMap<V> {\n         Drain { iter: self.v.drain().enumerate().filter_map(filter) }\n     }\n \n-    /// Return the number of elements in the map.\n+    /// Returns the number of elements in the map.\n     ///\n     /// # Examples\n     ///\n@@ -470,7 +470,7 @@ impl<V> VecMap<V> {\n         self.v.iter().filter(|elt| elt.is_some()).count()\n     }\n \n-    /// Return true if the map contains no elements.\n+    /// Returns true if the map contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "85b8accadf3e58665d4520591d773d98b6aceb1d", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -91,7 +91,7 @@ use marker::{Reflect, Sized};\n /// [mod]: index.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Any: Reflect + 'static {\n-    /// Get the `TypeId` of `self`\n+    /// Gets the `TypeId` of `self`.\n     #[unstable(feature = \"core\",\n                reason = \"this method will likely be replaced by an associated static\")]\n     fn get_type_id(&self) -> TypeId;"}, {"sha": "df0de234b9a16ef9bc5ce6f2032d6c42bea77008", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -211,7 +211,7 @@ impl<T:Copy> Cell<T> {\n         }\n     }\n \n-    /// Get a reference to the underlying `UnsafeCell`.\n+    /// Gets a reference to the underlying `UnsafeCell`.\n     ///\n     /// # Unsafety\n     ///\n@@ -436,7 +436,7 @@ impl<T> RefCell<T> {\n         }\n     }\n \n-    /// Get a reference to the underlying `UnsafeCell`.\n+    /// Gets a reference to the underlying `UnsafeCell`.\n     ///\n     /// This can be used to circumvent `RefCell`'s safety checks.\n     ///\n@@ -537,7 +537,7 @@ impl<'b, T> Deref for Ref<'b, T> {\n     }\n }\n \n-/// Copy a `Ref`.\n+/// Copies a `Ref`.\n ///\n /// The `RefCell` is already immutably borrowed, so this cannot fail.\n ///\n@@ -647,7 +647,7 @@ pub struct UnsafeCell<T> {\n impl<T> !Sync for UnsafeCell<T> {}\n \n impl<T> UnsafeCell<T> {\n-    /// Construct a new instance of `UnsafeCell` which will wrap the specified\n+    /// Constructs a new instance of `UnsafeCell` which will wrap the specified\n     /// value.\n     ///\n     /// All access to the inner value through methods is `unsafe`, and it is highly discouraged to\n@@ -685,7 +685,7 @@ impl<T> UnsafeCell<T> {\n         &self.value as *const T as *mut T\n     }\n \n-    /// Unwraps the value\n+    /// Unwraps the value.\n     ///\n     /// # Unsafety\n     ///"}, {"sha": "f11c01507dcd8aa22950cd7311c4e8abe552dc3f", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -38,7 +38,7 @@ pub trait Clone : Sized {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn clone(&self) -> Self;\n \n-    /// Perform copy-assignment from `source`.\n+    /// Performs copy-assignment from `source`.\n     ///\n     /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\n     /// but can be overridden to reuse the resources of `a` to avoid unnecessary\n@@ -52,7 +52,7 @@ pub trait Clone : Sized {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> Clone for &'a T {\n-    /// Return a shallow copy of the reference.\n+    /// Returns a shallow copy of the reference.\n     #[inline]\n     fn clone(&self) -> &'a T { *self }\n }\n@@ -61,7 +61,7 @@ macro_rules! clone_impl {\n     ($t:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Clone for $t {\n-            /// Return a deep copy of the value.\n+            /// Returns a deep copy of the value.\n             #[inline]\n             fn clone(&self) -> $t { *self }\n         }\n@@ -92,28 +92,28 @@ macro_rules! extern_fn_clone {\n         #[unstable(feature = \"core\",\n                    reason = \"this may not be sufficient for fns with region parameters\")]\n         impl<$($A,)* ReturnType> Clone for extern \"Rust\" fn($($A),*) -> ReturnType {\n-            /// Return a copy of a function pointer\n+            /// Returns a copy of a function pointer.\n             #[inline]\n             fn clone(&self) -> extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n         }\n \n         #[unstable(feature = \"core\", reason = \"brand new\")]\n         impl<$($A,)* ReturnType> Clone for extern \"C\" fn($($A),*) -> ReturnType {\n-            /// Return a copy of a function pointer\n+            /// Returns a copy of a function pointer.\n             #[inline]\n             fn clone(&self) -> extern \"C\" fn($($A),*) -> ReturnType { *self }\n         }\n \n         #[unstable(feature = \"core\", reason = \"brand new\")]\n         impl<$($A,)* ReturnType> Clone for unsafe extern \"Rust\" fn($($A),*) -> ReturnType {\n-            /// Return a copy of a function pointer\n+            /// Returns a copy of a function pointer.\n             #[inline]\n             fn clone(&self) -> unsafe extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n         }\n \n         #[unstable(feature = \"core\", reason = \"brand new\")]\n         impl<$($A,)* ReturnType> Clone for unsafe extern \"C\" fn($($A),*) -> ReturnType {\n-            /// Return a copy of a function pointer\n+            /// Returns a copy of a function pointer.\n             #[inline]\n             fn clone(&self) -> unsafe extern \"C\" fn($($A),*) -> ReturnType { *self }\n         }"}, {"sha": "8ed89adec5b69385d208b821dcd39cfb67530497", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -139,16 +139,16 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_fence_rel();\n     pub fn atomic_fence_acqrel();\n \n-    /// Abort the execution of the process.\n+    /// Aborts the execution of the process.\n     pub fn abort() -> !;\n \n-    /// Tell LLVM that this point in the code is not reachable,\n+    /// Tells LLVM that this point in the code is not reachable,\n     /// enabling further optimizations.\n     ///\n     /// NB: This is very different from the `unreachable!()` macro!\n     pub fn unreachable() -> !;\n \n-    /// Inform the optimizer that a condition is always true.\n+    /// Informs the optimizer that a condition is always true.\n     /// If the condition is false, the behavior is undefined.\n     ///\n     /// No code is generated for this intrinsic, but the optimizer will try\n@@ -158,7 +158,7 @@ extern \"rust-intrinsic\" {\n     /// own, or if it does not enable any significant optimizations.\n     pub fn assume(b: bool);\n \n-    /// Execute a breakpoint trap, for inspection by a debugger.\n+    /// Executes a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n \n     /// The size of a type in bytes.\n@@ -170,7 +170,7 @@ extern \"rust-intrinsic\" {\n     /// elements.\n     pub fn size_of<T>() -> usize;\n \n-    /// Move a value to an uninitialized memory location.\n+    /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: &mut T, src: T);\n@@ -186,7 +186,7 @@ extern \"rust-intrinsic\" {\n     /// crate it is invoked in.\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n-    /// Create a value initialized to so that its drop flag,\n+    /// Creates a value initialized to so that its drop flag,\n     /// if any, says that it has been dropped.\n     ///\n     /// `init_dropped` is unsafe because it returns a datum with all\n@@ -199,15 +199,15 @@ extern \"rust-intrinsic\" {\n     /// intrinsic).\n     pub fn init_dropped<T>() -> T;\n \n-    /// Create a value initialized to zero.\n+    /// Creates a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,\n     /// which is unsafe unless T is `Copy`.  Also, even if T is\n     /// `Copy`, an all-zero value may not correspond to any legitimate\n     /// state for the type in question.\n     pub fn init<T>() -> T;\n \n-    /// Create an uninitialized value.\n+    /// Creates an uninitialized value.\n     ///\n     /// `uninit` is unsafe because there is no guarantee of what its\n     /// contents are. In particular its drop-flag may be set to any\n@@ -216,7 +216,7 @@ extern \"rust-intrinsic\" {\n     /// initialize memory previous set to the result of `uninit`.\n     pub fn uninit<T>() -> T;\n \n-    /// Move a value out of scope without running drop glue.\n+    /// Moves a value out of scope without running drop glue.\n     ///\n     /// `forget` is unsafe because the caller is responsible for\n     /// ensuring the argument is deallocated already."}, {"sha": "81a5a676e1a67fde81756584ed7b485a2ce73595", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -91,7 +91,7 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n-    /// Advance the iterator and return the next value. Return `None` when the\n+    /// Advances the iterator and returns the next value. Returns `None` when the\n     /// end is reached.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next(&mut self) -> Option<Self::Item>;\n@@ -670,7 +670,7 @@ pub trait Iterator {\n         None\n     }\n \n-    /// Return the index of the first element satisfying the specified predicate\n+    /// Returns the index of the first element satisfying the specified predicate\n     ///\n     /// Does not consume the iterator past the first found element.\n     ///\n@@ -698,7 +698,7 @@ pub trait Iterator {\n         None\n     }\n \n-    /// Return the index of the last element satisfying the specified predicate\n+    /// Returns the index of the last element satisfying the specified predicate\n     ///\n     /// If no element matches, None is returned.\n     ///\n@@ -853,7 +853,7 @@ pub trait Iterator {\n         MinMax(min, max)\n     }\n \n-    /// Return the element that gives the maximum value from the\n+    /// Returns the element that gives the maximum value from the\n     /// specified function.\n     ///\n     /// Returns the rightmost element if the comparison determines two elements\n@@ -882,7 +882,7 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n-    /// Return the element that gives the minimum value from the\n+    /// Returns the element that gives the minimum value from the\n     /// specified function.\n     ///\n     /// Returns the leftmost element if the comparison determines two elements\n@@ -1099,7 +1099,7 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n                           built from an iterator over elements of type `{A}`\"]\n pub trait FromIterator<A> {\n-    /// Build a container with elements from something iterable.\n+    /// Builds a container with elements from something iterable.\n     ///\n     /// # Examples\n     ///\n@@ -1158,7 +1158,7 @@ impl<I: Iterator> IntoIterator for I {\n /// A type growable from an `Iterator` implementation\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Extend<A> {\n-    /// Extend a container with the elements yielded by an arbitrary iterator\n+    /// Extends a container with the elements yielded by an arbitrary iterator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn extend<T: IntoIterator<Item=A>>(&mut self, iterable: T);\n }\n@@ -1170,7 +1170,7 @@ pub trait Extend<A> {\n /// independently of each other.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DoubleEndedIterator: Iterator {\n-    /// Yield an element from the end of the range, returning `None` if the\n+    /// Yields an element from the end of the range, returning `None` if the\n     /// range is empty.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n@@ -1191,11 +1191,11 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n            reason = \"not widely used, may be better decomposed into Index \\\n                      and ExactSizeIterator\")]\n pub trait RandomAccessIterator: Iterator {\n-    /// Return the number of indexable elements. At most `std::usize::MAX`\n+    /// Returns the number of indexable elements. At most `std::usize::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n     fn indexable(&self) -> usize;\n \n-    /// Return an element at an index, or `None` if the index is out of bounds\n+    /// Returns an element at an index, or `None` if the index is out of bounds\n     fn idx(&mut self, index: usize) -> Option<Self::Item>;\n }\n \n@@ -1210,7 +1210,7 @@ pub trait RandomAccessIterator: Iterator {\n pub trait ExactSizeIterator: Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    /// Return the exact length of the iterator.\n+    /// Returns the exact length of the iterator.\n     fn len(&self) -> usize {\n         let (lower, upper) = self.size_hint();\n         // Note: This assertion is overly defensive, but it checks the invariant\n@@ -1856,7 +1856,7 @@ impl<I: ExactSizeIterator> ExactSizeIterator for Peekable<I> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator> Peekable<I> {\n-    /// Return a reference to the next element of the iterator with out\n+    /// Returns a reference to the next element of the iterator with out\n     /// advancing it, or None if the iterator is exhausted.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1870,7 +1870,7 @@ impl<I: Iterator> Peekable<I> {\n         }\n     }\n \n-    /// Check whether peekable iterator is empty or not.\n+    /// Checks whether peekable iterator is empty or not.\n     #[inline]\n     pub fn is_empty(&mut self) -> bool {\n         self.peek().is_none()\n@@ -2401,12 +2401,12 @@ pub trait Step: PartialOrd {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n \n-    /// The number of steps between two step objects.\n+    /// Returns the number of steps between two step objects.\n     ///\n     /// `start` should always be less than `end`, so the result should never\n     /// be negative.\n     ///\n-    /// Return `None` if it is not possible to calculate steps_between\n+    /// Returns `None` if it is not possible to calculate steps_between\n     /// without overflow.\n     fn steps_between(start: &Self, end: &Self, by: &Self) -> Option<usize>;\n }\n@@ -2549,7 +2549,7 @@ pub struct RangeInclusive<A> {\n     done: bool,\n }\n \n-/// Return an iterator over the range [start, stop]\n+/// Returns an iterator over the range [start, stop].\n #[inline]\n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n@@ -2657,7 +2657,7 @@ pub struct RangeStepInclusive<A> {\n     done: bool,\n }\n \n-/// Return an iterator over the range [start, stop] by `step`.\n+/// Returns an iterator over the range [start, stop] by `step`.\n ///\n /// It handles overflow by stopping.\n ///\n@@ -2827,7 +2827,7 @@ type IterateState<T, F> = (F, Option<T>, bool);\n #[unstable(feature = \"core\")]\n pub type Iterate<T, F> = Unfold<IterateState<T, F>, fn(&mut IterateState<T, F>) -> Option<T>>;\n \n-/// Create a new iterator that produces an infinite sequence of\n+/// Creates a new iterator that produces an infinite sequence of\n /// repeated applications of the given function `f`.\n #[unstable(feature = \"core\")]\n pub fn iterate<T, F>(seed: T, f: F) -> Iterate<T, F> where\n@@ -2853,7 +2853,7 @@ pub fn iterate<T, F>(seed: T, f: F) -> Iterate<T, F> where\n     Unfold::new((f, Some(seed), true), next)\n }\n \n-/// Create a new iterator that endlessly repeats the element `elt`.\n+/// Creates a new iterator that endlessly repeats the element `elt`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n@@ -2940,7 +2940,7 @@ pub mod order {\n         }\n     }\n \n-    /// Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)\n+    /// Compares `a` and `b` for nonequality (Using partial equality, `PartialEq`)\n     pub fn ne<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n         L::Item: PartialEq<R::Item>,\n     {\n@@ -2953,7 +2953,7 @@ pub mod order {\n         }\n     }\n \n-    /// Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)\n+    /// Returns `a` < `b` lexicographically (Using partial order, `PartialOrd`)\n     pub fn lt<R: Iterator, L: Iterator>(mut a: L, mut b: R) -> bool where\n         L::Item: PartialOrd<R::Item>,\n     {\n@@ -2967,7 +2967,7 @@ pub mod order {\n         }\n     }\n \n-    /// Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)\n+    /// Returns `a` <= `b` lexicographically (Using partial order, `PartialOrd`)\n     pub fn le<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n         L::Item: PartialOrd<R::Item>,\n     {\n@@ -2981,7 +2981,7 @@ pub mod order {\n         }\n     }\n \n-    /// Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)\n+    /// Returns `a` > `b` lexicographically (Using partial order, `PartialOrd`)\n     pub fn gt<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n         L::Item: PartialOrd<R::Item>,\n     {\n@@ -2995,7 +2995,7 @@ pub mod order {\n         }\n     }\n \n-    /// Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)\n+    /// Returns `a` >= `b` lexicographically (Using partial order, `PartialOrd`)\n     pub fn ge<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n         L::Item: PartialOrd<R::Item>,\n     {"}, {"sha": "c4128e79765c8157a8f738b2eb090b7a0d463c1f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -134,7 +134,7 @@ pub fn align_of_val<T>(_val: &T) -> usize {\n     align_of::<T>()\n }\n \n-/// Create a value initialized to zero.\n+/// Creates a value initialized to zero.\n ///\n /// This function is similar to allocating space for a local variable and zeroing it out (an unsafe\n /// operation).\n@@ -158,7 +158,7 @@ pub unsafe fn zeroed<T>() -> T {\n     intrinsics::init()\n }\n \n-/// Create a value initialized to an unspecified series of bytes.\n+/// Creates a value initialized to an unspecified series of bytes.\n ///\n /// The byte sequence usually indicates that the value at the memory\n /// in question has been dropped. Thus, *if* T carries a drop flag,\n@@ -179,7 +179,7 @@ pub unsafe fn dropped<T>() -> T {\n     dropped_impl()\n }\n \n-/// Create an uninitialized value.\n+/// Creates an uninitialized value.\n ///\n /// Care must be taken when using this function, if the type `T` has a destructor and the value\n /// falls out of scope (due to unwinding or returning) before being initialized, then the\n@@ -234,7 +234,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/// Replace the value at a mutable location with a new one, returning the old value, without\n+/// Replaces the value at a mutable location with a new one, returning the old value, without\n /// deinitialising or copying either one.\n ///\n /// This is primarily used for transferring and swapping ownership of a value in a mutable"}, {"sha": "db2d1b2f1fdaa7a686221fe803595a32d4812871", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -38,7 +38,7 @@ unsafe impl Zeroable for u64 {}\n pub struct NonZero<T: Zeroable>(T);\n \n impl<T: Zeroable> NonZero<T> {\n-    /// Create an instance of NonZero with the provided value.\n+    /// Creates an instance of NonZero with the provided value.\n     /// You must indeed ensure that the value is actually \"non-zero\".\n     #[inline(always)]\n     pub unsafe fn new(inner: T) -> NonZero<T> {"}, {"sha": "9b1a384a0d06a90865556f930a15ffbe7fa721ec", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -268,7 +268,7 @@ pub trait Int\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn swap_bytes(self) -> Self;\n \n-    /// Convert an integer from big endian to the target's endianness.\n+    /// Converts an integer from big endian to the target's endianness.\n     ///\n     /// On big endian this is a no-op. On little endian the bytes are swapped.\n     ///\n@@ -291,7 +291,7 @@ pub trait Int\n         if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n     }\n \n-    /// Convert an integer from little endian to the target's endianness.\n+    /// Converts an integer from little endian to the target's endianness.\n     ///\n     /// On little endian this is a no-op. On big endian the bytes are swapped.\n     ///\n@@ -314,7 +314,7 @@ pub trait Int\n         if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n     }\n \n-    /// Convert `self` to big endian from the target's endianness.\n+    /// Converts `self` to big endian from the target's endianness.\n     ///\n     /// On big endian this is a no-op. On little endian the bytes are swapped.\n     ///\n@@ -337,7 +337,7 @@ pub trait Int\n         if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n     }\n \n-    /// Convert `self` to little endian from the target's endianness.\n+    /// Converts `self` to little endian from the target's endianness.\n     ///\n     /// On little endian this is a no-op. On big endian the bytes are swapped.\n     ///\n@@ -845,7 +845,7 @@ macro_rules! int_impl {\n             let min: $T = Int::min_value(); !min\n         }\n \n-        /// Convert a string slice in a given base to an integer.\n+        /// Converts a string slice in a given base to an integer.\n         ///\n         /// Leading and trailing whitespace represent an error.\n         ///\n@@ -995,7 +995,7 @@ macro_rules! int_impl {\n             (self as $UnsignedT).swap_bytes() as $T\n         }\n \n-        /// Convert an integer from big endian to the target's endianness.\n+        /// Converts an integer from big endian to the target's endianness.\n         ///\n         /// On big endian this is a no-op. On little endian the bytes are\n         /// swapped.\n@@ -1019,7 +1019,7 @@ macro_rules! int_impl {\n             if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n         }\n \n-        /// Convert an integer from little endian to the target's endianness.\n+        /// Converts an integer from little endian to the target's endianness.\n         ///\n         /// On little endian this is a no-op. On big endian the bytes are\n         /// swapped.\n@@ -1043,7 +1043,7 @@ macro_rules! int_impl {\n             if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n         }\n \n-        /// Convert `self` to big endian from the target's endianness.\n+        /// Converts `self` to big endian from the target's endianness.\n         ///\n         /// On big endian this is a no-op. On little endian the bytes are\n         /// swapped.\n@@ -1067,7 +1067,7 @@ macro_rules! int_impl {\n             if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n         }\n \n-        /// Convert `self` to little endian from the target's endianness.\n+        /// Converts `self` to little endian from the target's endianness.\n         ///\n         /// On little endian this is a no-op. On big endian the bytes are\n         /// swapped.\n@@ -1361,7 +1361,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub fn max_value() -> $T { !0 }\n \n-        /// Convert a string slice in a given base to an integer.\n+        /// Converts a string slice in a given base to an integer.\n         ///\n         /// Leading and trailing whitespace represent an error.\n         ///\n@@ -1517,7 +1517,7 @@ macro_rules! uint_impl {\n             unsafe { $bswap(self as $ActualT) as $T }\n         }\n \n-        /// Convert an integer from big endian to the target's endianness.\n+        /// Converts an integer from big endian to the target's endianness.\n         ///\n         /// On big endian this is a no-op. On little endian the bytes are\n         /// swapped.\n@@ -1541,7 +1541,7 @@ macro_rules! uint_impl {\n             if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n         }\n \n-        /// Convert an integer from little endian to the target's endianness.\n+        /// Converts an integer from little endian to the target's endianness.\n         ///\n         /// On little endian this is a no-op. On big endian the bytes are\n         /// swapped.\n@@ -1565,7 +1565,7 @@ macro_rules! uint_impl {\n             if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n         }\n \n-        /// Convert `self` to big endian from the target's endianness.\n+        /// Converts `self` to big endian from the target's endianness.\n         ///\n         /// On big endian this is a no-op. On little endian the bytes are\n         /// swapped.\n@@ -1589,7 +1589,7 @@ macro_rules! uint_impl {\n             if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n         }\n \n-        /// Convert `self` to little endian from the target's endianness.\n+        /// Converts `self` to little endian from the target's endianness.\n         ///\n         /// On little endian this is a no-op. On big endian the bytes are\n         /// swapped.\n@@ -2183,7 +2183,7 @@ impl_to_primitive_float! { f64 }\n /// A generic trait for converting a number to a value.\n #[unstable(feature = \"core\", reason = \"trait is likely to be removed\")]\n pub trait FromPrimitive : ::marker::Sized {\n-    /// Convert an `isize` to return an optional value of this type. If the\n+    /// Converts an `isize` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n     #[inline]\n     #[unstable(feature = \"core\")]\n@@ -2192,39 +2192,39 @@ pub trait FromPrimitive : ::marker::Sized {\n         FromPrimitive::from_i64(n as i64)\n     }\n \n-    /// Convert an `isize` to return an optional value of this type. If the\n+    /// Converts an `isize` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_isize(n: isize) -> Option<Self> {\n         FromPrimitive::from_i64(n as i64)\n     }\n \n-    /// Convert an `i8` to return an optional value of this type. If the\n+    /// Converts an `i8` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_i8(n: i8) -> Option<Self> {\n         FromPrimitive::from_i64(n as i64)\n     }\n \n-    /// Convert an `i16` to return an optional value of this type. If the\n+    /// Converts an `i16` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_i16(n: i16) -> Option<Self> {\n         FromPrimitive::from_i64(n as i64)\n     }\n \n-    /// Convert an `i32` to return an optional value of this type. If the\n+    /// Converts an `i32` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_i32(n: i32) -> Option<Self> {\n         FromPrimitive::from_i64(n as i64)\n     }\n \n-    /// Convert an `i64` to return an optional value of this type. If the\n+    /// Converts an `i64` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     fn from_i64(n: i64) -> Option<Self>;\n \n-    /// Convert an `usize` to return an optional value of this type. If the\n+    /// Converts an `usize` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     #[unstable(feature = \"core\")]\n@@ -2233,46 +2233,46 @@ pub trait FromPrimitive : ::marker::Sized {\n         FromPrimitive::from_u64(n as u64)\n     }\n \n-    /// Convert a `usize` to return an optional value of this type. If the\n+    /// Converts a `usize` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_usize(n: usize) -> Option<Self> {\n         FromPrimitive::from_u64(n as u64)\n     }\n \n-    /// Convert an `u8` to return an optional value of this type. If the\n+    /// Converts an `u8` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_u8(n: u8) -> Option<Self> {\n         FromPrimitive::from_u64(n as u64)\n     }\n \n-    /// Convert an `u16` to return an optional value of this type. If the\n+    /// Converts an `u16` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_u16(n: u16) -> Option<Self> {\n         FromPrimitive::from_u64(n as u64)\n     }\n \n-    /// Convert an `u32` to return an optional value of this type. If the\n+    /// Converts an `u32` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_u32(n: u32) -> Option<Self> {\n         FromPrimitive::from_u64(n as u64)\n     }\n \n-    /// Convert an `u64` to return an optional value of this type. If the\n+    /// Converts an `u64` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     fn from_u64(n: u64) -> Option<Self>;\n \n-    /// Convert a `f32` to return an optional value of this type. If the\n+    /// Converts a `f32` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_f32(n: f32) -> Option<Self> {\n         FromPrimitive::from_f64(n as f64)\n     }\n \n-    /// Convert a `f64` to return an optional value of this type. If the\n+    /// Converts a `f64` to return an optional value of this type. If the\n     /// type cannot be represented by this value, the `None` is returned.\n     #[inline]\n     fn from_f64(n: f64) -> Option<Self> {\n@@ -2401,7 +2401,7 @@ impl_from_primitive! { u64, to_u64 }\n impl_from_primitive! { f32, to_f32 }\n impl_from_primitive! { f64, to_f64 }\n \n-/// Cast from one machine scalar to another.\n+/// Casts from one machine scalar to another.\n ///\n /// # Examples\n ///\n@@ -2583,16 +2583,16 @@ pub trait Float\n     /// Returns the mantissa, exponent and sign as integers, respectively.\n     fn integer_decode(self) -> (u64, i16, i8);\n \n-    /// Return the largest integer less than or equal to a number.\n+    /// Returns the largest integer less than or equal to a number.\n     fn floor(self) -> Self;\n-    /// Return the smallest integer greater than or equal to a number.\n+    /// Returns the smallest integer greater than or equal to a number.\n     fn ceil(self) -> Self;\n-    /// Return the nearest integer to a number. Round half-way cases away from\n+    /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n     fn round(self) -> Self;\n-    /// Return the integer part of a number.\n+    /// Returns the integer part of a number.\n     fn trunc(self) -> Self;\n-    /// Return the fractional part of a number.\n+    /// Returns the fractional part of a number.\n     fn fract(self) -> Self;\n \n     /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n@@ -2615,21 +2615,21 @@ pub trait Float\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add.\n     fn mul_add(self, a: Self, b: Self) -> Self;\n-    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    /// Takes the reciprocal (inverse) of a number, `1/x`.\n     fn recip(self) -> Self;\n \n-    /// Raise a number to an integer power.\n+    /// Raises a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n     fn powi(self, n: i32) -> Self;\n-    /// Raise a number to a floating point power.\n+    /// Raises a number to a floating point power.\n     fn powf(self, n: Self) -> Self;\n \n-    /// Take the square root of a number.\n+    /// Takes the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     fn sqrt(self) -> Self;\n-    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    /// Takes the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(self) -> Self;\n \n     /// Returns `e^(self)`, (the exponential function).\n@@ -2645,9 +2645,9 @@ pub trait Float\n     /// Returns the base 10 logarithm of the number.\n     fn log10(self) -> Self;\n \n-    /// Convert radians to degrees.\n+    /// Converts radians to degrees.\n     fn to_degrees(self) -> Self;\n-    /// Convert degrees to radians.\n+    /// Converts degrees to radians.\n     fn to_radians(self) -> Self;\n }\n \n@@ -2682,7 +2682,7 @@ macro_rules! from_str_radix_float_impl {\n         impl FromStr for $T {\n             type Err = ParseFloatError;\n \n-            /// Convert a string in base 10 to a float.\n+            /// Converts a string in base 10 to a float.\n             /// Accepts an optional decimal exponent.\n             ///\n             /// This function accepts strings such as\n@@ -2719,7 +2719,7 @@ macro_rules! from_str_radix_float_impl {\n         impl FromStrRadix for $T {\n             type Err = ParseFloatError;\n \n-            /// Convert a string in a given base to a float.\n+            /// Converts a string in a given base to a float.\n             ///\n             /// Due to possible conflicts, this function does **not** accept\n             /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**"}, {"sha": "4c784a579da6b004f83b8f6616b56046f0546181", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -223,7 +223,7 @@ impl<T> Option<T> {\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Convert from `Option<T>` to `Option<&T>`\n+    /// Converts from `Option<T>` to `Option<&T>`\n     ///\n     /// # Examples\n     ///\n@@ -248,7 +248,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Convert from `Option<T>` to `Option<&mut T>`\n+    /// Converts from `Option<T>` to `Option<&mut T>`\n     ///\n     /// # Examples\n     ///\n@@ -269,7 +269,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Convert from `Option<T>` to `&mut [T]` (without copying)\n+    /// Converts from `Option<T>` to `&mut [T]` (without copying)\n     ///\n     /// # Examples\n     ///\n@@ -704,7 +704,7 @@ impl<T> Option<T> {\n         mem::replace(self, None)\n     }\n \n-    /// Convert from `Option<T>` to `&[T]` (without copying)\n+    /// Converts from `Option<T>` to `&[T]` (without copying)\n     #[inline]\n     #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n     pub fn as_slice<'a>(&'a self) -> &'a [T] {"}, {"sha": "9a165a2e3173bca16654a16f977cc5b7b4796da8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -544,19 +544,19 @@ unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n impl<T: ?Sized> Unique<T> {\n-    /// Create a new `Unique`.\n+    /// Creates a new `Unique`.\n     #[unstable(feature = \"unique\")]\n     pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n         Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n \n-    /// Dereference the content.\n+    /// Dereferences the content.\n     #[unstable(feature = \"unique\")]\n     pub unsafe fn get(&self) -> &T {\n         &**self.pointer\n     }\n \n-    /// Mutably dereference the content.\n+    /// Mutably dereferences the content.\n     #[unstable(feature = \"unique\")]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n         &mut ***self"}, {"sha": "dcec75fc170dab682936b3b89f9ec5d3655240ac", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -311,7 +311,7 @@ impl<T, E> Result<T, E> {\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Convert from `Result<T, E>` to `Option<T>`\n+    /// Converts from `Result<T, E>` to `Option<T>`\n     ///\n     /// Converts `self` into an `Option<T>`, consuming `self`,\n     /// and discarding the error, if any.\n@@ -334,7 +334,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Convert from `Result<T, E>` to `Option<E>`\n+    /// Converts from `Result<T, E>` to `Option<E>`\n     ///\n     /// Converts `self` into an `Option<E>`, consuming `self`,\n     /// and discarding the success value, if any.\n@@ -361,7 +361,7 @@ impl<T, E> Result<T, E> {\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Convert from `Result<T, E>` to `Result<&T, &E>`\n+    /// Converts from `Result<T, E>` to `Result<&T, &E>`\n     ///\n     /// Produces a new `Result`, containing a reference\n     /// into the original, leaving the original in place.\n@@ -382,7 +382,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Convert from `Result<T, E>` to `Result<&mut T, &mut E>`\n+    /// Converts from `Result<T, E>` to `Result<&mut T, &mut E>`\n     ///\n     /// ```\n     /// fn mutate(r: &mut Result<i32, i32>) {\n@@ -409,7 +409,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Convert from `Result<T, E>` to `&[T]` (without copying)\n+    /// Converts from `Result<T, E>` to `&[T]` (without copying)\n     #[inline]\n     #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n     pub fn as_slice(&self) -> &[T] {\n@@ -423,7 +423,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Convert from `Result<T, E>` to `&mut [T]` (without copying)\n+    /// Converts from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n     /// # #![feature(core)]\n@@ -811,7 +811,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n              reason = \"use inherent method instead\")]\n #[allow(deprecated)]\n impl<T, E> AsSlice<T> for Result<T, E> {\n-    /// Convert from `Result<T, E>` to `&[T]` (without copying)\n+    /// Converts from `Result<T, E>` to `&[T]` (without copying)\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         match *self {\n@@ -974,7 +974,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n // FromIterator\n /////////////////////////////////////////////////////////////////////////////\n \n-/// Perform a fold operation over the result values from an iterator.\n+/// Performs a fold operation over the result values from an iterator.\n ///\n /// If an `Err` is encountered, it is immediately returned.\n /// Otherwise, the folded value is returned."}, {"sha": "62b693dcbe6ae06f093993622188ec7202a76ab3", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -32,17 +32,17 @@ pub trait Pattern<'a>: Sized {\n     /// Associated searcher for this pattern\n     type Searcher: Searcher<'a>;\n \n-    /// Construct the associated searcher from\n+    /// Constructs the associated searcher from\n     /// `self` and the `haystack` to search in.\n     fn into_searcher(self, haystack: &'a str) -> Self::Searcher;\n \n-    /// Check whether the pattern matches anywhere in the haystack\n+    /// Checks whether the pattern matches anywhere in the haystack\n     #[inline]\n     fn is_contained_in(self, haystack: &'a str) -> bool {\n         self.into_searcher(haystack).next_match().is_some()\n     }\n \n-    /// Check whether the pattern matches at the front of the haystack\n+    /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n         match self.into_searcher(haystack).next() {\n@@ -51,7 +51,7 @@ pub trait Pattern<'a>: Sized {\n         }\n     }\n \n-    /// Check whether the pattern matches at the back of the haystack\n+    /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool\n         where Self::Searcher: ReverseSearcher<'a>"}, {"sha": "a2ba8c4c1bae07dfb9d494e3eb3c60a54f366b84", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -23,12 +23,12 @@ use mem;\n #[unstable(feature = \"std_misc\",\n            reason = \"would prefer to do this in a more general way\")]\n pub trait OwnedAsciiExt {\n-    /// Convert the string to ASCII upper case:\n+    /// Converts the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     fn into_ascii_uppercase(self) -> Self;\n \n-    /// Convert the string to ASCII lower case:\n+    /// Converts the string to ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     fn into_ascii_lowercase(self) -> Self;\n@@ -41,7 +41,7 @@ pub trait AsciiExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned;\n \n-    /// Check if within the ASCII range.\n+    /// Checks if within the ASCII range.\n     ///\n     /// # Examples\n     ///\n@@ -95,7 +95,7 @@ pub trait AsciiExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_lowercase(&self) -> Self::Owned;\n \n-    /// Check that two strings are an ASCII case-insensitive match.\n+    /// Checks that two strings are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n     /// but without allocating and copying temporary strings.\n@@ -117,7 +117,7 @@ pub trait AsciiExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n \n-    /// Convert this type to its ASCII upper case equivalent in-place.\n+    /// Converts this type to its ASCII upper case equivalent in-place.\n     ///\n     /// See `to_ascii_uppercase` for more information.\n     ///\n@@ -136,7 +136,7 @@ pub trait AsciiExt {\n     #[unstable(feature = \"ascii\")]\n     fn make_ascii_uppercase(&mut self);\n \n-    /// Convert this type to its ASCII lower case equivalent in-place.\n+    /// Converts this type to its ASCII lower case equivalent in-place.\n     ///\n     /// See `to_ascii_lowercase` for more information.\n     ///"}, {"sha": "e507146bcb36577c9639cd8026acdf4088aadb09", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -506,7 +506,7 @@ impl<K, V, S> HashMap<K, V, S>\n }\n \n impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n-    /// Create an empty HashMap.\n+    /// Creates an empty HashMap.\n     ///\n     /// # Examples\n     ///\n@@ -563,7 +563,7 @@ impl<K, V, S> HashMap<K, V, S>\n         }\n     }\n \n-    /// Create an empty HashMap with space for at least `capacity`\n+    /// Creates an empty HashMap with space for at least `capacity`\n     /// elements, using `hasher` to hash the keys.\n     ///\n     /// Warning: `hasher` is normally randomly generated, and\n@@ -1596,7 +1596,7 @@ pub struct RandomState {\n #[unstable(feature = \"std_misc\",\n            reason = \"hashing an hash maps may be altered\")]\n impl RandomState {\n-    /// Construct a new `RandomState` that is initialized with random keys.\n+    /// Constructs a new `RandomState` that is initialized with random keys.\n     #[inline]\n     #[allow(deprecated)]\n     pub fn new() -> RandomState {"}, {"sha": "6b0546b1ee72f737c4e0cfa002afcb54d71e0d9a", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -111,7 +111,7 @@ pub struct HashSet<T, S = RandomState> {\n }\n \n impl<T: Hash + Eq> HashSet<T, RandomState> {\n-    /// Create an empty HashSet.\n+    /// Creates an empty HashSet.\n     ///\n     /// # Examples\n     ///\n@@ -125,7 +125,7 @@ impl<T: Hash + Eq> HashSet<T, RandomState> {\n         HashSet::with_capacity(INITIAL_CAPACITY)\n     }\n \n-    /// Create an empty HashSet with space for at least `n` elements in\n+    /// Creates an empty HashSet with space for at least `n` elements in\n     /// the hash table.\n     ///\n     /// # Examples\n@@ -166,7 +166,7 @@ impl<T, S> HashSet<T, S>\n         HashSet::with_capacity_and_hash_state(INITIAL_CAPACITY, hash_state)\n     }\n \n-    /// Create an empty HashSet with space for at least `capacity`\n+    /// Creates an empty HashSet with space for at least `capacity`\n     /// elements in the hash table, using `hasher` to hash the keys.\n     ///\n     /// Warning: `hasher` is normally randomly generated, and\n@@ -402,7 +402,7 @@ impl<T, S> HashSet<T, S>\n         Union { iter: self.iter().chain(other.difference(self)) }\n     }\n \n-    /// Return the number of elements in the set\n+    /// Returns the number of elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -417,7 +417,7 @@ impl<T, S> HashSet<T, S>\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize { self.map.len() }\n \n-    /// Returns true if the set contains no elements\n+    /// Returns true if the set contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "c69df6435c49889b8b1181963208ea3c186323e1", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -105,7 +105,7 @@ impl DynamicLibrary {\n         }\n     }\n \n-    /// Access the value at the symbol of the dynamic library\n+    /// Accesses the value at the symbol of the dynamic library.\n     pub unsafe fn symbol<T>(&self, symbol: &str) -> Result<*mut T, String> {\n         // This function should have a lifetime constraint of 'a on\n         // T but that feature is still unimplemented"}, {"sha": "bcc109a71cb0436970c93bec58574d734b1fc75b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -261,7 +261,7 @@ pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n     os_imp::setenv(k.as_ref(), v.as_ref())\n }\n \n-/// Remove an environment variable from the environment of the currently running process.\n+/// Removes an environment variable from the environment of the currently running process.\n ///\n /// # Examples\n ///"}, {"sha": "1910530c63a42a738f232bffdbbe158413e71a4c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -133,7 +133,7 @@ pub struct CStr {\n pub struct NulError(usize, Vec<u8>);\n \n impl CString {\n-    /// Create a new C-compatible string from a container of bytes.\n+    /// Creates a new C-compatible string from a container of bytes.\n     ///\n     /// This method will consume the provided data and use the underlying bytes\n     /// to construct a new string, ensuring that there is a trailing 0 byte.\n@@ -169,7 +169,7 @@ impl CString {\n         }\n     }\n \n-    /// Create a C-compatible string from a byte vector without checking for\n+    /// Creates a C-compatible string from a byte vector without checking for\n     /// interior 0 bytes.\n     ///\n     /// This method is equivalent to `from_vec` except that no runtime assertion\n@@ -258,7 +258,7 @@ impl From<NulError> for old_io::IoError {\n }\n \n impl CStr {\n-    /// Cast a raw C string to a safe C string wrapper.\n+    /// Casts a raw C string to a safe C string wrapper.\n     ///\n     /// This function will cast the provided `ptr` to the `CStr` wrapper which\n     /// allows inspection and interoperation of non-owned C strings. This method\n@@ -301,7 +301,7 @@ impl CStr {\n         mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n     }\n \n-    /// Return the inner pointer to this C string.\n+    /// Returns the inner pointer to this C string.\n     ///\n     /// The returned pointer will be valid for as long as `self` is and points\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n@@ -311,7 +311,7 @@ impl CStr {\n         self.inner.as_ptr()\n     }\n \n-    /// Convert this C string to a byte slice.\n+    /// Converts this C string to a byte slice.\n     ///\n     /// This function will calculate the length of this string (which normally\n     /// requires a linear amount of work to be done) and then return the\n@@ -329,7 +329,7 @@ impl CStr {\n         &bytes[..bytes.len() - 1]\n     }\n \n-    /// Convert this C string to a byte slice containing the trailing 0 byte.\n+    /// Converts this C string to a byte slice containing the trailing 0 byte.\n     ///\n     /// This function is the equivalent of `to_bytes` except that it will retain\n     /// the trailing nul instead of chopping it off."}, {"sha": "99becb67a5a7a1e6a78eef3cdaaa2aaa1c6a42af", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -25,6 +25,6 @@ mod os_str;\n /// Freely convertible to an `&OsStr` slice.\n #[unstable(feature = \"std_misc\")]\n pub trait AsOsStr {\n-    /// Convert to an `&OsStr` slice.\n+    /// Converts to an `&OsStr` slice.\n     fn as_os_str(&self) -> &OsStr;\n }"}, {"sha": "5e61b29f34ced44d3dc99720c738039a7ad2e330", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -69,7 +69,7 @@ impl OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n-    /// Construct an `OsString` from a byte sequence.\n+    /// Constructs an `OsString` from a byte sequence.\n     ///\n     /// # Platform behavior\n     ///\n@@ -94,21 +94,21 @@ impl OsString {\n         from_bytes_inner(bytes.into())\n     }\n \n-    /// Convert to an `OsStr` slice.\n+    /// Converts to an `OsStr` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(&self) -> &OsStr {\n         self\n     }\n \n-    /// Convert the `OsString` into a `String` if it contains valid Unicode data.\n+    /// Converts the `OsString` into a `String` if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_string(self) -> Result<String, OsString> {\n         self.inner.into_string().map_err(|buf| OsString { inner: buf} )\n     }\n \n-    /// Extend the string with the given `&OsStr` slice.\n+    /// Extends the string with the given `&OsStr` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push<T: AsRef<OsStr>>(&mut self, s: T) {\n         self.inner.push_slice(&s.as_ref().inner)\n@@ -221,43 +221,43 @@ impl Hash for OsString {\n }\n \n impl OsStr {\n-    /// Coerce into an `OsStr` slice.\n+    /// Coerces into an `OsStr` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {\n         s.as_ref()\n     }\n \n-    /// Coerce directly from a `&str` slice to a `&OsStr` slice.\n+    /// Coerces directly from a `&str` slice to a `&OsStr` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[deprecated(since = \"1.0.0\",\n                  reason = \"use `OsStr::new` instead\")]\n     pub fn from_str(s: &str) -> &OsStr {\n         unsafe { mem::transmute(Slice::from_str(s)) }\n     }\n \n-    /// Yield a `&str` slice if the `OsStr` is valid unicode.\n+    /// Yields a `&str` slice if the `OsStr` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n     }\n \n-    /// Convert an `OsStr` to a `Cow<str>`.\n+    /// Converts an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()\n     }\n \n-    /// Copy the slice into an owned `OsString`.\n+    /// Copies the slice into an owned `OsString`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }\n     }\n \n-    /// Yield this `OsStr` as a byte slice.\n+    /// Yields this `OsStr` as a byte slice.\n     ///\n     /// # Platform behavior\n     ///\n@@ -275,7 +275,7 @@ impl OsStr {\n         }\n     }\n \n-    /// Create a `CString` containing this `OsStr` data.\n+    /// Creates a `CString` containing this `OsStr` data.\n     ///\n     /// Fails if the `OsStr` contains interior nulls.\n     ///\n@@ -287,7 +287,7 @@ impl OsStr {\n         self.to_bytes().and_then(|b| CString::new(b).ok())\n     }\n \n-    /// Get the underlying byte representation.\n+    /// Gets the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n     /// revealing the internal, platform-specific encodings."}, {"sha": "cfa711db84d13e7ec49af46832509dd8482b856c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -171,7 +171,7 @@ impl File {\n         OpenOptions::new().read(true).open(path)\n     }\n \n-    /// Open a file in write-only mode.\n+    /// Opens a file in write-only mode.\n     ///\n     /// This function will create a file if it does not exist,\n     /// and will truncate it if it does.\n@@ -201,7 +201,7 @@ impl File {\n         self.path.as_ref().map(|p| &**p)\n     }\n \n-    /// Attempt to sync all OS-internal metadata to disk.\n+    /// Attempts to sync all OS-internal metadata to disk.\n     ///\n     /// This function will attempt to ensure that all in-core data reaches the\n     /// filesystem before returning.\n@@ -362,7 +362,7 @@ impl OpenOptions {\n         OpenOptions(fs_imp::OpenOptions::new())\n     }\n \n-    /// Set the option for read access.\n+    /// Sets the option for read access.\n     ///\n     /// This option, when true, will indicate that the file should be\n     /// `read`-able if opened.\n@@ -379,7 +379,7 @@ impl OpenOptions {\n         self.0.read(read); self\n     }\n \n-    /// Set the option for write access.\n+    /// Sets the option for write access.\n     ///\n     /// This option, when true, will indicate that the file should be\n     /// `write`-able if opened.\n@@ -396,7 +396,7 @@ impl OpenOptions {\n         self.0.write(write); self\n     }\n \n-    /// Set the option for the append mode.\n+    /// Sets the option for the append mode.\n     ///\n     /// This option, when true, means that writes will append to a file instead\n     /// of overwriting previous contents.\n@@ -413,7 +413,7 @@ impl OpenOptions {\n         self.0.append(append); self\n     }\n \n-    /// Set the option for truncating a previous file.\n+    /// Sets the option for truncating a previous file.\n     ///\n     /// If a file is successfully opened with this option set it will truncate\n     /// the file to 0 length if it already exists.\n@@ -430,7 +430,7 @@ impl OpenOptions {\n         self.0.truncate(truncate); self\n     }\n \n-    /// Set the option for creating a new file.\n+    /// Sets the option for creating a new file.\n     ///\n     /// This option indicates whether a new file will be created if the file\n     /// does not yet already exist.\n@@ -447,7 +447,7 @@ impl OpenOptions {\n         self.0.create(create); self\n     }\n \n-    /// Open a file at `path` with the options specified by `self`.\n+    /// Opens a file at `path` with the options specified by `self`.\n     ///\n     /// # Errors\n     ///\n@@ -587,7 +587,7 @@ impl Permissions {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn readonly(&self) -> bool { self.0.readonly() }\n \n-    /// Modify the readonly flag for this set of permissions.\n+    /// Modifies the readonly flag for this set of permissions.\n     ///\n     /// This operation does **not** modify the filesystem. To modify the\n     /// filesystem use the `fs::set_permissions` function.\n@@ -670,7 +670,7 @@ impl DirEntry {\n     pub fn path(&self) -> PathBuf { self.0.path() }\n }\n \n-/// Remove a file from the underlying filesystem.\n+/// Removes a file from the underlying filesystem.\n ///\n /// Note that, just because an unlink call was successful, it is not\n /// guaranteed that a file is immediately deleted (e.g. depending on\n@@ -856,7 +856,7 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::readlink(path.as_ref())\n }\n \n-/// Create a new, empty directory at the provided path\n+/// Creates a new, empty directory at the provided path\n ///\n /// # Errors\n ///\n@@ -906,7 +906,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     create_dir(path)\n }\n \n-/// Remove an existing, empty directory\n+/// Removes an existing, empty directory.\n ///\n /// # Errors\n ///\n@@ -1058,7 +1058,7 @@ impl Iterator for WalkDir {\n            reason = \"the precise set of methods exposed on this trait may \\\n                      change and some methods may be removed\")]\n pub trait PathExt {\n-    /// Get information on the file, directory, etc at this path.\n+    /// Gets information on the file, directory, etc at this path.\n     ///\n     /// Consult the `fs::stat` documentation for more info.\n     ///"}, {"sha": "72743106abf6a24ac589e0c852b960d7159c952e", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -34,21 +34,21 @@ pub struct Cursor<T> {\n }\n \n impl<T> Cursor<T> {\n-    /// Create a new cursor wrapping the provided underlying I/O object.\n+    /// Creates a new cursor wrapping the provided underlying I/O object.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: T) -> Cursor<T> {\n         Cursor { pos: 0, inner: inner }\n     }\n \n-    /// Consume this cursor, returning the underlying value.\n+    /// Consumes this cursor, returning the underlying value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> T { self.inner }\n \n-    /// Get a reference to the underlying value in this cursor.\n+    /// Gets a reference to the underlying value in this cursor.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &T { &self.inner }\n \n-    /// Get a mutable reference to the underlying value in this cursor.\n+    /// Gets a mutable reference to the underlying value in this cursor.\n     ///\n     /// Care should be taken to avoid modifying the internal I/O state of the\n     /// underlying value as it may corrupt this cursor's position."}, {"sha": "a49039b1ec4ee808497ad20186006c19be57efed", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -191,7 +191,7 @@ impl Error {\n         }\n     }\n \n-    /// Return the corresponding `ErrorKind` for this error.\n+    /// Returns the corresponding `ErrorKind` for this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {"}, {"sha": "ef836a194618c666835f54f17697c0e7f9d0d7eb", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -220,14 +220,14 @@ pub trait Read {\n         append_to_string(buf, |b| read_to_end(self, b))\n     }\n \n-    /// Create a \"by reference\" adaptor for this instance of `Read`.\n+    /// Creates a \"by reference\" adaptor for this instance of `Read`.\n     ///\n     /// The returned adaptor also implements `Read` and will simply borrow this\n     /// current reader.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n \n-    /// Transform this `Read` instance to an `Iterator` over its bytes.\n+    /// Transforms this `Read` instance to an `Iterator` over its bytes.\n     ///\n     /// The returned type implements `Iterator` where the `Item` is `Result<u8,\n     /// R::Err>`.  The yielded item is `Ok` if a byte was successfully read and\n@@ -238,7 +238,7 @@ pub trait Read {\n         Bytes { inner: self }\n     }\n \n-    /// Transform this `Read` instance to an `Iterator` over `char`s.\n+    /// Transforms this `Read` instance to an `Iterator` over `char`s.\n     ///\n     /// This adaptor will attempt to interpret this reader as an UTF-8 encoded\n     /// sequence of characters. The returned iterator will return `None` once\n@@ -255,7 +255,7 @@ pub trait Read {\n         Chars { inner: self }\n     }\n \n-    /// Create an adaptor which will chain this stream with another.\n+    /// Creates an adaptor which will chain this stream with another.\n     ///\n     /// The returned `Read` instance will first read all bytes from this object\n     /// until EOF is encountered. Afterwards the output is equivalent to the\n@@ -265,7 +265,7 @@ pub trait Read {\n         Chain { first: self, second: next, done_first: false }\n     }\n \n-    /// Create an adaptor which will read at most `limit` bytes from it.\n+    /// Creates an adaptor which will read at most `limit` bytes from it.\n     ///\n     /// This function returns a new instance of `Read` which will read at most\n     /// `limit` bytes, after which it will always return EOF (`Ok(0)`). Any\n@@ -406,7 +406,7 @@ pub trait Write {\n         }\n     }\n \n-    /// Create a \"by reference\" adaptor for this instance of `Write`.\n+    /// Creates a \"by reference\" adaptor for this instance of `Write`.\n     ///\n     /// The returned adaptor also implements `Write` and will simply borrow this\n     /// current writer."}, {"sha": "cd6af77daa9061e00c094979d9bad3f64dc00c45", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -45,7 +45,7 @@ struct StdoutRaw(stdio::Stdout);\n /// the `std::io::stdio::stderr_raw` function.\n struct StderrRaw(stdio::Stderr);\n \n-/// Construct a new raw handle to the standard input of this process.\n+/// Constructs a new raw handle to the standard input of this process.\n ///\n /// The returned handle does not interact with any other handles created nor\n /// handles returned by `std::io::stdin`. Data buffered by the `std::io::stdin`\n@@ -54,7 +54,7 @@ struct StderrRaw(stdio::Stderr);\n /// The returned handle has no external synchronization or buffering.\n fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n \n-/// Construct a new raw handle to the standard input stream of this process.\n+/// Constructs a new raw handle to the standard input stream of this process.\n ///\n /// The returned handle does not interact with any other handles created nor\n /// handles returned by `std::io::stdout`. Note that data is buffered by the\n@@ -65,7 +65,7 @@ fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n /// top.\n fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n \n-/// Construct a new raw handle to the standard input stream of this process.\n+/// Constructs a new raw handle to the standard input stream of this process.\n ///\n /// The returned handle does not interact with any other handles created nor\n /// handles returned by `std::io::stdout`.\n@@ -109,7 +109,7 @@ pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<StdinRaw>>,\n }\n \n-/// Create a new handle to the global standard input stream of this process.\n+/// Creates a new handle to the global standard input stream of this process.\n ///\n /// The handle returned refers to a globally shared buffer between all threads.\n /// Access is synchronized and can be explicitly controlled with the `lock()`\n@@ -139,7 +139,7 @@ pub fn stdin() -> Stdin {\n }\n \n impl Stdin {\n-    /// Lock this handle to the standard input stream, returning a readable\n+    /// Locks this handle to the standard input stream, returning a readable\n     /// guard.\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n@@ -243,7 +243,7 @@ pub fn stdout() -> Stdout {\n }\n \n impl Stdout {\n-    /// Lock this handle to the standard output stream, returning a writable\n+    /// Locks this handle to the standard output stream, returning a writable\n     /// guard.\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n@@ -315,7 +315,7 @@ pub fn stderr() -> Stderr {\n }\n \n impl Stderr {\n-    /// Lock this handle to the standard error stream, returning a writable\n+    /// Locks this handle to the standard error stream, returning a writable\n     /// guard.\n     ///\n     /// The lock is released when the returned lock goes out of scope. The"}, {"sha": "8d4af4689af293b42da223ea2132bf9c6cef2271", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -58,7 +58,7 @@ pub enum Ipv6MulticastScope {\n }\n \n impl Ipv4Addr {\n-    /// Create a new IPv4 address from four eight-bit octets.\n+    /// Creates a new IPv4 address from four eight-bit octets.\n     ///\n     /// The result will represent the IP address a.b.c.d\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -127,7 +127,7 @@ impl Ipv4Addr {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n-    /// Convert this address to an IPv4-compatible IPv6 address\n+    /// Converts this address to an IPv4-compatible IPv6 address\n     ///\n     /// a.b.c.d becomes ::a.b.c.d\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -137,7 +137,7 @@ impl Ipv4Addr {\n                       ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n     }\n \n-    /// Convert this address to an IPv4-mapped IPv6 address\n+    /// Converts this address to an IPv4-mapped IPv6 address\n     ///\n     /// a.b.c.d becomes ::ffff:a.b.c.d\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -220,7 +220,7 @@ impl FromInner<libc::in_addr> for Ipv4Addr {\n }\n \n impl Ipv6Addr {\n-    /// Create a new IPv6 address from eight 16-bit segments.\n+    /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n     /// The result will represent the IP address a:b:c:d:e:f:g:h\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -234,7 +234,7 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Return the eight 16-bit segments that make up this address\n+    /// Returns the eight 16-bit segments that make up this address\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn segments(&self) -> [u16; 8] {\n         [ntoh(self.inner.s6_addr[0]),\n@@ -324,7 +324,7 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n-    /// Convert this address to an IPv4 address. Returns None if this address is\n+    /// Converts this address to an IPv4 address. Returns None if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n     /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d"}, {"sha": "209a0032fb4419712fa2875eefd38a590971953d", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -82,7 +82,7 @@ pub struct TcpListener(net_imp::TcpListener);\n pub struct Incoming<'a> { listener: &'a TcpListener }\n \n impl TcpStream {\n-    /// Open a TCP connection to a remote host.\n+    /// Opens a TCP connection to a remote host.\n     ///\n     /// `addr` is an address of the remote host. Anything which implements\n     /// `ToSocketAddrs` trait can be supplied for the address; see this trait\n@@ -104,7 +104,7 @@ impl TcpStream {\n         self.0.socket_addr()\n     }\n \n-    /// Shut down the read, write, or both halves of this connection.\n+    /// Shuts down the read, write, or both halves of this connection.\n     ///\n     /// This function will cause all pending and future I/O on the specified\n     /// portions to return immediately with an appropriate value (see the\n@@ -114,7 +114,7 @@ impl TcpStream {\n         self.0.shutdown(how)\n     }\n \n-    /// Create a new independently owned handle to the underlying socket.\n+    /// Creates a new independently owned handle to the underlying socket.\n     ///\n     /// The returned `TcpStream` is a reference to the same stream that this\n     /// object references. Both handles will read and write the same stream of\n@@ -190,7 +190,7 @@ impl TcpListener {\n         self.0.socket_addr()\n     }\n \n-    /// Create a new independently owned handle to the underlying socket.\n+    /// Creates a new independently owned handle to the underlying socket.\n     ///\n     /// The returned `TcpListener` is a reference to the same socket that this\n     /// object references. Both handles can be used to accept incoming"}, {"sha": "1955b895300ead37b634f3e191f32129b284396e", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -85,7 +85,7 @@ impl UdpSocket {\n         self.0.socket_addr()\n     }\n \n-    /// Create a new independently owned handle to the underlying socket.\n+    /// Creates a new independently owned handle to the underlying socket.\n     ///\n     /// The returned `UdpSocket` is a reference to the same socket that this\n     /// object references. Both handles will read and write the same port, and\n@@ -100,7 +100,7 @@ impl UdpSocket {\n         self.0.set_broadcast(on)\n     }\n \n-    /// Set the multicast loop flag to the specified value\n+    /// Sets the multicast loop flag to the specified value\n     ///\n     /// This lets multicast packets loop back to local sockets (if enabled)\n     pub fn set_multicast_loop(&self, on: bool) -> io::Result<()> {"}, {"sha": "736f6d2f4f4f834f96894ff98161b1b6ffffef01", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -527,7 +527,7 @@ impl f32 {\n     #[inline]\n     pub fn round(self) -> f32 { num::Float::round(self) }\n \n-    /// Return the integer part of a number.\n+    /// Returns the integer part of a number.\n     ///\n     /// ```\n     /// let f = 3.3_f32;\n@@ -666,7 +666,7 @@ impl f32 {\n     #[inline]\n     pub fn mul_add(self, a: f32, b: f32) -> f32 { num::Float::mul_add(self, a, b) }\n \n-    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    /// Takes the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n     /// use std::f32;\n@@ -680,7 +680,7 @@ impl f32 {\n     #[inline]\n     pub fn recip(self) -> f32 { num::Float::recip(self) }\n \n-    /// Raise a number to an integer power.\n+    /// Raises a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n@@ -696,7 +696,7 @@ impl f32 {\n     #[inline]\n     pub fn powi(self, n: i32) -> f32 { num::Float::powi(self, n) }\n \n-    /// Raise a number to a floating point power.\n+    /// Raises a number to a floating point power.\n     ///\n     /// ```\n     /// use std::f32;\n@@ -710,7 +710,7 @@ impl f32 {\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 { num::Float::powf(self, n) }\n \n-    /// Take the square root of a number.\n+    /// Takes the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n@@ -729,7 +729,7 @@ impl f32 {\n     #[inline]\n     pub fn sqrt(self) -> f32 { num::Float::sqrt(self) }\n \n-    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    /// Takes the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -852,7 +852,7 @@ impl f32 {\n     #[inline]\n     pub fn log10(self) -> f32 { num::Float::log10(self) }\n \n-    /// Convert radians to degrees.\n+    /// Converts radians to degrees.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -868,7 +868,7 @@ impl f32 {\n     #[inline]\n     pub fn to_degrees(self) -> f32 { num::Float::to_degrees(self) }\n \n-    /// Convert degrees to radians.\n+    /// Converts degrees to radians.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -1003,7 +1003,7 @@ impl f32 {\n         unsafe { cmath::fdimf(self, other) }\n     }\n \n-    /// Take the cubic root of a number.\n+    /// Takes the cubic root of a number.\n     ///\n     /// ```\n     /// use std::f32;\n@@ -1021,7 +1021,7 @@ impl f32 {\n         unsafe { cmath::cbrtf(self) }\n     }\n \n-    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n     /// ```"}, {"sha": "bb9067eca13dd85557bf6d88f75a26c126bedd51", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -534,7 +534,7 @@ impl f64 {\n     #[inline]\n     pub fn round(self) -> f64 { num::Float::round(self) }\n \n-    /// Return the integer part of a number.\n+    /// Returns the integer part of a number.\n     ///\n     /// ```\n     /// let f = 3.3_f64;\n@@ -671,7 +671,7 @@ impl f64 {\n     #[inline]\n     pub fn mul_add(self, a: f64, b: f64) -> f64 { num::Float::mul_add(self, a, b) }\n \n-    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    /// Takes the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n     /// let x = 2.0_f64;\n@@ -683,7 +683,7 @@ impl f64 {\n     #[inline]\n     pub fn recip(self) -> f64 { num::Float::recip(self) }\n \n-    /// Raise a number to an integer power.\n+    /// Raises a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n@@ -697,7 +697,7 @@ impl f64 {\n     #[inline]\n     pub fn powi(self, n: i32) -> f64 { num::Float::powi(self, n) }\n \n-    /// Raise a number to a floating point power.\n+    /// Raises a number to a floating point power.\n     ///\n     /// ```\n     /// let x = 2.0_f64;\n@@ -709,7 +709,7 @@ impl f64 {\n     #[inline]\n     pub fn powf(self, n: f64) -> f64 { num::Float::powf(self, n) }\n \n-    /// Take the square root of a number.\n+    /// Takes the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n@@ -726,7 +726,7 @@ impl f64 {\n     #[inline]\n     pub fn sqrt(self) -> f64 { num::Float::sqrt(self) }\n \n-    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    /// Takes the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -835,7 +835,7 @@ impl f64 {\n     #[inline]\n     pub fn log10(self) -> f64 { num::Float::log10(self) }\n \n-    /// Convert radians to degrees.\n+    /// Converts radians to degrees.\n     ///\n     /// ```\n     /// use std::f64::consts;\n@@ -850,7 +850,7 @@ impl f64 {\n     #[inline]\n     pub fn to_degrees(self) -> f64 { num::Float::to_degrees(self) }\n \n-    /// Convert degrees to radians.\n+    /// Converts degrees to radians.\n     ///\n     /// ```\n     /// use std::f64::consts;\n@@ -978,7 +978,7 @@ impl f64 {\n         unsafe { cmath::fdim(self, other) }\n     }\n \n-    /// Take the cubic root of a number.\n+    /// Takes the cubic root of a number.\n     ///\n     /// ```\n     /// let x = 8.0_f64;\n@@ -994,7 +994,7 @@ impl f64 {\n         unsafe { cmath::cbrt(self) }\n     }\n \n-    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n     /// ```"}, {"sha": "e0b9c720dbbed82b9be59c9e95ffd81df227ee33", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -383,7 +383,7 @@ pub trait Float\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn round(self) -> Self;\n-    /// Return the integer part of a number.\n+    /// Returns the integer part of a number.\n     ///\n     /// ```\n     /// use std::num::Float;\n@@ -509,7 +509,7 @@ pub trait Float\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure about its place in the world\")]\n     fn mul_add(self, a: Self, b: Self) -> Self;\n-    /// Take the reciprocal (inverse) of a number, `1/x`.\n+    /// Takes the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -524,7 +524,7 @@ pub trait Float\n                reason = \"unsure about its place in the world\")]\n     fn recip(self) -> Self;\n \n-    /// Raise a number to an integer power.\n+    /// Raises a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n@@ -538,7 +538,7 @@ pub trait Float\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn powi(self, n: i32) -> Self;\n-    /// Raise a number to a floating point power.\n+    /// Raises a number to a floating point power.\n     ///\n     /// ```\n     /// use std::num::Float;\n@@ -550,7 +550,7 @@ pub trait Float\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn powf(self, n: Self) -> Self;\n-    /// Take the square root of a number.\n+    /// Takes the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n@@ -569,7 +569,7 @@ pub trait Float\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn sqrt(self) -> Self;\n \n-    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n+    /// Takes the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -679,7 +679,7 @@ pub trait Float\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn log10(self) -> Self;\n \n-    /// Convert radians to degrees.\n+    /// Converts radians to degrees.\n     ///\n     /// ```\n     /// use std::num::Float;\n@@ -693,7 +693,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\", reason = \"desirability is unclear\")]\n     fn to_degrees(self) -> Self;\n-    /// Convert degrees to radians.\n+    /// Converts degrees to radians.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -807,7 +807,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn abs_sub(self, other: Self) -> Self;\n-    /// Take the cubic root of a number.\n+    /// Takes the cubic root of a number.\n     ///\n     /// ```\n     /// # #![feature(std_misc)]\n@@ -822,7 +822,7 @@ pub trait Float\n     /// ```\n     #[unstable(feature = \"std_misc\", reason = \"may be renamed\")]\n     fn cbrt(self) -> Self;\n-    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n     /// ```"}, {"sha": "cdc5cecbf380a8f95bdaf280af6fdfe37180507d", "filename": "src/libstd/path.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -312,7 +312,7 @@ impl<'a> Prefix<'a> {\n \n     }\n \n-    /// Determine if the prefix is verbatim, i.e. begins `\\\\?\\`.\n+    /// Determines if the prefix is verbatim, i.e. begins `\\\\?\\`.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_verbatim(&self) -> bool {\n@@ -341,7 +341,7 @@ impl<'a> Prefix<'a> {\n // Exposed parsing helpers\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Determine whether the character is one of the permitted path\n+/// Determines whether the character is one of the permitted path\n /// separators for the current platform.\n ///\n /// # Examples\n@@ -524,7 +524,7 @@ pub enum Component<'a> {\n }\n \n impl<'a> Component<'a> {\n-    /// Extract the underlying `OsStr` slice\n+    /// Extracts the underlying `OsStr` slice\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_os_str(self) -> &'a OsStr {\n         match self {\n@@ -629,7 +629,7 @@ impl<'a> Components<'a> {\n         }\n     }\n \n-    /// Extract a slice corresponding to the portion of the path remaining for iteration.\n+    /// Extracts a slice corresponding to the portion of the path remaining for iteration.\n     ///\n     /// # Examples\n     ///\n@@ -750,7 +750,7 @@ impl<'a> AsRef<OsStr> for Components<'a> {\n }\n \n impl<'a> Iter<'a> {\n-    /// Extract a slice corresponding to the portion of the path remaining for iteration.\n+    /// Extracts a slice corresponding to the portion of the path remaining for iteration.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &'a Path {\n         self.inner.as_path()\n@@ -941,19 +941,19 @@ impl PathBuf {\n         unsafe { mem::transmute(self) }\n     }\n \n-    /// Allocate an empty `PathBuf`.\n+    /// Allocates an empty `PathBuf`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n-    /// Coerce to a `Path` slice.\n+    /// Coerces to a `Path` slice.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &Path {\n         self\n     }\n \n-    /// Extend `self` with `path`.\n+    /// Extends `self` with `path`.\n     ///\n     /// If `path` is absolute, it replaces the current path.\n     ///\n@@ -1064,7 +1064,7 @@ impl PathBuf {\n         true\n     }\n \n-    /// Consume the `PathBuf`, yielding its internal `OsString` storage\n+    /// Consumes the `PathBuf`, yielding its internal `OsString` storage.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n@@ -1254,7 +1254,7 @@ impl Path {\n         unsafe { mem::transmute(s.as_ref()) }\n     }\n \n-    /// Yield the underlying `OsStr` slice.\n+    /// Yields the underlying `OsStr` slice.\n     ///\n     /// # Examples\n     ///\n@@ -1268,7 +1268,7 @@ impl Path {\n         &self.inner\n     }\n \n-    /// Yield a `&str` slice if the `Path` is valid unicode.\n+    /// Yields a `&str` slice if the `Path` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n     ///\n@@ -1284,7 +1284,7 @@ impl Path {\n         self.inner.to_str()\n     }\n \n-    /// Convert a `Path` to a `Cow<str>`.\n+    /// Converts a `Path` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     ///\n@@ -1300,7 +1300,7 @@ impl Path {\n         self.inner.to_string_lossy()\n     }\n \n-    /// Convert a `Path` to an owned `PathBuf`.\n+    /// Converts a `Path` to an owned `PathBuf`.\n     ///\n     /// # Examples\n     ///\n@@ -1477,7 +1477,7 @@ impl Path {\n         iter_after(self.components().rev(), child.as_ref().components().rev()).is_some()\n     }\n \n-    /// Extract the stem (non-extension) portion of `self.file()`.\n+    /// Extracts the stem (non-extension) portion of `self.file()`.\n     ///\n     /// The stem is:\n     ///\n@@ -1500,7 +1500,7 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n-    /// Extract the extension of `self.file()`, if possible.\n+    /// Extracts the extension of `self.file()`, if possible.\n     ///\n     /// The extension is:\n     ///\n@@ -1714,7 +1714,7 @@ impl cmp::Ord for Path {\n #[unstable(feature = \"std_misc\")]\n #[deprecated(since = \"1.0.0\", reason = \"use std::convert::AsRef<Path> instead\")]\n pub trait AsPath {\n-    /// Convert to a `Path`.\n+    /// Converts to a `Path`.\n     #[unstable(feature = \"std_misc\")]\n     fn as_path(&self) -> &Path;\n }"}, {"sha": "7306dd3826062a84bb302c9ed248b09f150d02f8", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -194,7 +194,7 @@ impl Command {\n         self\n     }\n \n-    /// Set the working directory for the child process.\n+    /// Sets the working directory for the child process.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn current_dir<P: AsRef<path::Path>>(&mut self, dir: P) -> &mut Command {\n         self.inner.cwd(dir.as_ref().as_ref());\n@@ -396,7 +396,7 @@ impl ExitStatus {\n         self.0.success()\n     }\n \n-    /// Return the exit code of the process, if any.\n+    /// Returns the exit code of the process, if any.\n     ///\n     /// On Unix, this will return `None` if the process was terminated\n     /// by a signal; `std::os::unix` provides an extension trait for\n@@ -453,7 +453,7 @@ impl Child {\n         unsafe { self.handle.kill() }\n     }\n \n-    /// Wait for the child to exit completely, returning the status that it\n+    /// Waits for the child to exit completely, returning the status that it\n     /// exited with. This function will continue to have the same return value\n     /// after it has been called at least once.\n     ///\n@@ -474,7 +474,7 @@ impl Child {\n         }\n     }\n \n-    /// Simultaneously wait for the child to exit and collect all remaining\n+    /// Simultaneously waits for the child to exit and collect all remaining\n     /// output on the stdout/stderr handles, returning a `Output`\n     /// instance.\n     ///"}, {"sha": "34fcf6cdadd304165d2bc29cfc677ed5f212abe1", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -49,7 +49,7 @@ struct BarrierState {\n pub struct BarrierWaitResult(bool);\n \n impl Barrier {\n-    /// Create a new barrier that can block a given number of threads.\n+    /// Creates a new barrier that can block a given number of threads.\n     ///\n     /// A barrier will block `n`-1 threads which call `wait` and then wake up\n     /// all threads at once when the `n`th thread calls `wait`.\n@@ -65,7 +65,7 @@ impl Barrier {\n         }\n     }\n \n-    /// Block the current thread until all threads has rendezvoused here.\n+    /// Blocks the current thread until all threads has rendezvoused here.\n     ///\n     /// Barriers are re-usable after all threads have rendezvoused once, and can\n     /// be used continuously.\n@@ -97,7 +97,7 @@ impl Barrier {\n }\n \n impl BarrierWaitResult {\n-    /// Return whether this thread from `wait` is the \"leader thread\".\n+    /// Returns whether this thread from `wait` is the \"leader thread\".\n     ///\n     /// Only one thread will have `true` returned from their result, all other\n     /// threads will have `false` returned."}, {"sha": "fcb0d2c0b2d38bbe60e00117b1315e1515c15d90", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -102,7 +102,7 @@ impl Condvar {\n         }\n     }\n \n-    /// Block the current thread until this condition variable receives a\n+    /// Blocks the current thread until this condition variable receives a\n     /// notification.\n     ///\n     /// This function will atomically unlock the mutex specified (represented by\n@@ -137,7 +137,7 @@ impl Condvar {\n         }\n     }\n \n-    /// Wait on this condition variable for a notification, timing out after a\n+    /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n     /// The semantics of this function are equivalent to `wait()`\n@@ -169,7 +169,7 @@ impl Condvar {\n         self.wait_timeout_ms(guard, dur.num_milliseconds() as u32)\n     }\n \n-    /// Wait on this condition variable for a notification, timing out after a\n+    /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n     /// The semantics of this function are equivalent to `wait_timeout` except\n@@ -189,7 +189,7 @@ impl Condvar {\n         }\n     }\n \n-    /// Wake up one blocked thread on this condvar.\n+    /// Wakes up one blocked thread on this condvar.\n     ///\n     /// If there is a blocked thread on this condition variable, then it will\n     /// be woken up from its call to `wait` or `wait_timeout`. Calls to\n@@ -199,7 +199,7 @@ impl Condvar {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn notify_one(&self) { unsafe { self.inner.inner.notify_one() } }\n \n-    /// Wake up all blocked threads on this condvar.\n+    /// Wakes up all blocked threads on this condvar.\n     ///\n     /// This method will ensure that any current waiters on the condition\n     /// variable are awoken. Calls to `notify_all()` are not buffered in any\n@@ -218,7 +218,7 @@ impl Drop for Condvar {\n }\n \n impl StaticCondvar {\n-    /// Block the current thread until this condition variable receives a\n+    /// Blocks the current thread until this condition variable receives a\n     /// notification.\n     ///\n     /// See `Condvar::wait`.\n@@ -239,7 +239,7 @@ impl StaticCondvar {\n         }\n     }\n \n-    /// Wait on this condition variable for a notification, timing out after a\n+    /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n     /// See `Condvar::wait_timeout`.\n@@ -260,7 +260,7 @@ impl StaticCondvar {\n         }\n     }\n \n-    /// Wait on this condition variable for a notification, timing out after a\n+    /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n     /// The implementation will repeatedly wait while the duration has not\n@@ -306,21 +306,21 @@ impl StaticCondvar {\n         poison::map_result(guard_result, |g| (g, true))\n     }\n \n-    /// Wake up one blocked thread on this condvar.\n+    /// Wakes up one blocked thread on this condvar.\n     ///\n     /// See `Condvar::notify_one`.\n     #[unstable(feature = \"std_misc\",\n                reason = \"may be merged with Condvar in the future\")]\n     pub fn notify_one(&'static self) { unsafe { self.inner.notify_one() } }\n \n-    /// Wake up all blocked threads on this condvar.\n+    /// Wakes up all blocked threads on this condvar.\n     ///\n     /// See `Condvar::notify_all`.\n     #[unstable(feature = \"std_misc\",\n                reason = \"may be merged with Condvar in the future\")]\n     pub fn notify_all(&'static self) { unsafe { self.inner.notify_all() } }\n \n-    /// Deallocate all resources associated with this static condvar.\n+    /// Deallocates all resources associated with this static condvar.\n     ///\n     /// This method is unsafe to call as there is no guarantee that there are no\n     /// active users of the condvar, and this also doesn't prevent any future"}, {"sha": "422439fadc1a1b77255d220977b180936a6593f4", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -750,7 +750,7 @@ impl<T> Receiver<T> {\n         }\n     }\n \n-    /// Attempt to wait for a value on this receiver, returning an error if the\n+    /// Attempts to wait for a value on this receiver, returning an error if the\n     /// corresponding channel has hung up.\n     ///\n     /// This function will always block the current thread if there is no data"}, {"sha": "b8ad92841f2de65a8a7e8ef3df3a17886829fb6e", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -254,11 +254,11 @@ impl Select {\n }\n \n impl<'rx, T: Send> Handle<'rx, T> {\n-    /// Retrieve the id of this handle.\n+    /// Retrieves the id of this handle.\n     #[inline]\n     pub fn id(&self) -> usize { self.id }\n \n-    /// Block to receive a value on the underlying receiver, returning `Some` on\n+    /// Blocks to receive a value on the underlying receiver, returning `Some` on\n     /// success or `None` if the channel disconnects. This function has the same\n     /// semantics as `Receiver.recv`\n     pub fn recv(&mut self) -> Result<T, RecvError> { self.rx.recv() }"}, {"sha": "7896870ea07e0c5060019da93ded747edc094a52", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -232,7 +232,7 @@ impl<T> Mutex<T> {\n         }\n     }\n \n-    /// Determine whether the lock is poisoned.\n+    /// Determines whether the lock is poisoned.\n     ///\n     /// If another thread is active, the lock can still become poisoned at any\n     /// time.  You should not trust a `false` value for program correctness"}, {"sha": "948965f5efa9d157dca85f7e0121eba169546dc0", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -51,7 +51,7 @@ pub const ONCE_INIT: Once = Once {\n };\n \n impl Once {\n-    /// Perform an initialization routine once and only once. The given closure\n+    /// Performs an initialization routine once and only once. The given closure\n     /// will be executed if this is the first time `call_once` has been called,\n     /// and otherwise the routine will *not* be invoked.\n     ///"}, {"sha": "1ea92d5eff7fe92b4e019880ec46360209145ad6", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -169,7 +169,7 @@ impl<T> RwLock<T> {\n         RwLockReadGuard::new(&*self.inner, &self.data)\n     }\n \n-    /// Attempt to acquire this lock with shared read access.\n+    /// Attempts to acquire this lock with shared read access.\n     ///\n     /// This function will never block and will return immediately if `read`\n     /// would otherwise succeed. Returns `Some` of an RAII guard which will\n@@ -194,7 +194,7 @@ impl<T> RwLock<T> {\n         }\n     }\n \n-    /// Lock this rwlock with exclusive write access, blocking the current\n+    /// Locks this rwlock with exclusive write access, blocking the current\n     /// thread until it can be acquired.\n     ///\n     /// This function will not return while other writers or other readers\n@@ -215,7 +215,7 @@ impl<T> RwLock<T> {\n         RwLockWriteGuard::new(&*self.inner, &self.data)\n     }\n \n-    /// Attempt to lock this rwlock with exclusive write access.\n+    /// Attempts to lock this rwlock with exclusive write access.\n     ///\n     /// This function does not ever block, and it will return `None` if a call\n     /// to `write` would otherwise block. If successful, an RAII guard is\n@@ -237,7 +237,7 @@ impl<T> RwLock<T> {\n         }\n     }\n \n-    /// Determine whether the lock is poisoned.\n+    /// Determines whether the lock is poisoned.\n     ///\n     /// If another thread is active, the lock can still become poisoned at any\n     /// time.  You should not trust a `false` value for program correctness\n@@ -287,7 +287,7 @@ impl StaticRwLock {\n         RwLockReadGuard::new(self, &DUMMY.0)\n     }\n \n-    /// Attempt to acquire this lock with shared read access.\n+    /// Attempts to acquire this lock with shared read access.\n     ///\n     /// See `RwLock::try_read`.\n     #[inline]\n@@ -302,7 +302,7 @@ impl StaticRwLock {\n         }\n     }\n \n-    /// Lock this rwlock with exclusive write access, blocking the current\n+    /// Locks this rwlock with exclusive write access, blocking the current\n     /// thread until it can be acquired.\n     ///\n     /// See `RwLock::write`.\n@@ -314,7 +314,7 @@ impl StaticRwLock {\n         RwLockWriteGuard::new(self, &DUMMY.0)\n     }\n \n-    /// Attempt to lock this rwlock with exclusive write access.\n+    /// Attempts to lock this rwlock with exclusive write access.\n     ///\n     /// See `RwLock::try_write`.\n     #[inline]\n@@ -329,7 +329,7 @@ impl StaticRwLock {\n         }\n     }\n \n-    /// Deallocate all resources associated with this static lock.\n+    /// Deallocates all resources associated with this static lock.\n     ///\n     /// This method is unsafe to call as there is no guarantee that there are no\n     /// active users of the lock, and this also doesn't prevent any future users"}, {"sha": "9f46b0c38248fef95129fdea634311bee4552f29", "filename": "src/libstd/sys/common/condvar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -31,23 +31,23 @@ impl Condvar {\n     #[inline]\n     pub unsafe fn new() -> Condvar { Condvar(imp::Condvar::new()) }\n \n-    /// Signal one waiter on this condition variable to wake up.\n+    /// Signals one waiter on this condition variable to wake up.\n     #[inline]\n     pub unsafe fn notify_one(&self) { self.0.notify_one() }\n \n-    /// Awaken all current waiters on this condition variable.\n+    /// Awakens all current waiters on this condition variable.\n     #[inline]\n     pub unsafe fn notify_all(&self) { self.0.notify_all() }\n \n-    /// Wait for a signal on the specified mutex.\n+    /// Waits for a signal on the specified mutex.\n     ///\n     /// Behavior is undefined if the mutex is not locked by the current thread.\n     /// Behavior is also undefined if more than one mutex is used concurrently\n     /// on this condition variable.\n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) { self.0.wait(mutex::raw(mutex)) }\n \n-    /// Wait for a signal on the specified mutex with a timeout duration\n+    /// Waits for a signal on the specified mutex with a timeout duration\n     /// specified by `dur` (a relative time into the future).\n     ///\n     /// Behavior is undefined if the mutex is not locked by the current thread.\n@@ -58,7 +58,7 @@ impl Condvar {\n         self.0.wait_timeout(mutex::raw(mutex), dur)\n     }\n \n-    /// Deallocate all resources associated with this condition variable.\n+    /// Deallocates all resources associated with this condition variable.\n     ///\n     /// Behavior is undefined if there are current or will be future users of\n     /// this condition variable."}, {"sha": "1f9dd54192ccaeae9170b4e58162b893c2551bf7", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -24,29 +24,29 @@ unsafe impl Sync for Mutex {}\n pub const MUTEX_INIT: Mutex = Mutex(imp::MUTEX_INIT);\n \n impl Mutex {\n-    /// Lock the mutex blocking the current thread until it is available.\n+    /// Locks the mutex blocking the current thread until it is available.\n     ///\n     /// Behavior is undefined if the mutex has been moved between this and any\n     /// previous function call.\n     #[inline]\n     pub unsafe fn lock(&self) { self.0.lock() }\n \n-    /// Attempt to lock the mutex without blocking, returning whether it was\n+    /// Attempts to lock the mutex without blocking, returning whether it was\n     /// successfully acquired or not.\n     ///\n     /// Behavior is undefined if the mutex has been moved between this and any\n     /// previous function call.\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool { self.0.try_lock() }\n \n-    /// Unlock the mutex.\n+    /// Unlocks the mutex.\n     ///\n     /// Behavior is undefined if the current thread does not actually hold the\n     /// mutex.\n     #[inline]\n     pub unsafe fn unlock(&self) { self.0.unlock() }\n \n-    /// Deallocate all resources associated with this mutex.\n+    /// Deallocates all resources associated with this mutex.\n     ///\n     /// Behavior is undefined if there are current or will be future users of\n     /// this mutex."}, {"sha": "6deb4a48007b4aade00d2a07d341087e9b4a98ac", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -116,7 +116,7 @@ impl<T: Send> Error for PoisonError<T> {\n }\n \n impl<T> PoisonError<T> {\n-    /// Create a `PoisonError`.\n+    /// Creates a `PoisonError`.\n     #[unstable(feature = \"std_misc\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard: guard }"}, {"sha": "725a09bcc86a99b88432adfefbc236a2369f0d66", "filename": "src/libstd/sys/common/rwlock.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -21,15 +21,15 @@ pub struct RWLock(imp::RWLock);\n pub const RWLOCK_INIT: RWLock = RWLock(imp::RWLOCK_INIT);\n \n impl RWLock {\n-    /// Acquire shared access to the underlying lock, blocking the current\n+    /// Acquires shared access to the underlying lock, blocking the current\n     /// thread to do so.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n     /// previous method call.\n     #[inline]\n     pub unsafe fn read(&self) { self.0.read() }\n \n-    /// Attempt to acquire shared access to this lock, returning whether it\n+    /// Attempts to acquire shared access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n     /// This function does not block the current thread.\n@@ -39,15 +39,15 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool { self.0.try_read() }\n \n-    /// Acquire write access to the underlying lock, blocking the current thread\n+    /// Acquires write access to the underlying lock, blocking the current thread\n     /// to do so.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n     /// previous method call.\n     #[inline]\n     pub unsafe fn write(&self) { self.0.write() }\n \n-    /// Attempt to acquire exclusive access to this lock, returning whether it\n+    /// Attempts to acquire exclusive access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n     /// This function does not block the current thread.\n@@ -57,20 +57,20 @@ impl RWLock {\n     #[inline]\n     pub unsafe fn try_write(&self) -> bool { self.0.try_write() }\n \n-    /// Unlock previously acquired shared access to this lock.\n+    /// Unlocks previously acquired shared access to this lock.\n     ///\n     /// Behavior is undefined if the current thread does not have shared access.\n     #[inline]\n     pub unsafe fn read_unlock(&self) { self.0.read_unlock() }\n \n-    /// Unlock previously acquired exclusive access to this lock.\n+    /// Unlocks previously acquired exclusive access to this lock.\n     ///\n     /// Behavior is undefined if the current thread does not currently have\n     /// exclusive access.\n     #[inline]\n     pub unsafe fn write_unlock(&self) { self.0.write_unlock() }\n \n-    /// Destroy OS-related resources with this RWLock.\n+    /// Destroys OS-related resources with this RWLock.\n     ///\n     /// Behavior is undefined if there are any currently active users of this\n     /// lock."}, {"sha": "618a389110ac1627b3853da2848d0eae670b9e32", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -207,7 +207,7 @@ impl StaticKey {\n }\n \n impl Key {\n-    /// Create a new managed OS TLS key.\n+    /// Creates a new managed OS TLS key.\n     ///\n     /// This key will be deallocated when the key falls out of scope.\n     ///"}, {"sha": "34a4a773f8ea7233ee325efb551ee3cd8a27b2ca", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -69,17 +69,17 @@ impl fmt::Debug for CodePoint {\n }\n \n impl CodePoint {\n-    /// Unsafely create a new `CodePoint` without checking the value.\n+    /// Unsafely creates a new `CodePoint` without checking the value.\n     ///\n     /// Only use when `value` is known to be less than or equal to 0x10FFFF.\n     #[inline]\n     pub unsafe fn from_u32_unchecked(value: u32) -> CodePoint {\n         CodePoint { value: value }\n     }\n \n-    /// Create a new `CodePoint` if the value is a valid code point.\n+    /// Creates a new `CodePoint` if the value is a valid code point.\n     ///\n-    /// Return `None` if `value` is above 0x10FFFF.\n+    /// Returns `None` if `value` is above 0x10FFFF.\n     #[inline]\n     pub fn from_u32(value: u32) -> Option<CodePoint> {\n         match value {\n@@ -88,23 +88,23 @@ impl CodePoint {\n         }\n     }\n \n-    /// Create a new `CodePoint` from a `char`.\n+    /// Creates a new `CodePoint` from a `char`.\n     ///\n     /// Since all Unicode scalar values are code points, this always succeeds.\n     #[inline]\n     pub fn from_char(value: char) -> CodePoint {\n         CodePoint { value: value as u32 }\n     }\n \n-    /// Return the numeric value of the code point.\n+    /// Returns the numeric value of the code point.\n     #[inline]\n     pub fn to_u32(&self) -> u32 {\n         self.value\n     }\n \n-    /// Optionally return a Unicode scalar value for the code point.\n+    /// Optionally returns a Unicode scalar value for the code point.\n     ///\n-    /// Return `None` if the code point is a surrogate (from U+D800 to U+DFFF).\n+    /// Returns `None` if the code point is a surrogate (from U+D800 to U+DFFF).\n     #[inline]\n     pub fn to_char(&self) -> Option<char> {\n         match self.value {\n@@ -113,9 +113,9 @@ impl CodePoint {\n         }\n     }\n \n-    /// Return a Unicode scalar value for the code point.\n+    /// Returns a Unicode scalar value for the code point.\n     ///\n-    /// Return `'\\u{FFFD}'` (the replacement character \u201c\ufffd\u201d)\n+    /// Returns `'\\u{FFFD}'` (the replacement character \u201c\ufffd\u201d)\n     /// if the code point is a surrogate (from U+D800 to U+DFFF).\n     #[inline]\n     pub fn to_char_lossy(&self) -> char {\n@@ -151,19 +151,19 @@ impl fmt::Debug for Wtf8Buf {\n }\n \n impl Wtf8Buf {\n-    /// Create an new, empty WTF-8 string.\n+    /// Creates an new, empty WTF-8 string.\n     #[inline]\n     pub fn new() -> Wtf8Buf {\n         Wtf8Buf { bytes: Vec::new() }\n     }\n \n-    /// Create an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.\n+    /// Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.\n     #[inline]\n     pub fn with_capacity(n: usize) -> Wtf8Buf {\n         Wtf8Buf { bytes: Vec::with_capacity(n) }\n     }\n \n-    /// Create a WTF-8 string from an UTF-8 `String`.\n+    /// Creates a WTF-8 string from an UTF-8 `String`.\n     ///\n     /// This takes ownership of the `String` and does not copy.\n     ///\n@@ -173,7 +173,7 @@ impl Wtf8Buf {\n         Wtf8Buf { bytes: string.into_bytes() }\n     }\n \n-    /// Create a WTF-8 string from an UTF-8 `&str` slice.\n+    /// Creates a WTF-8 string from an UTF-8 `&str` slice.\n     ///\n     /// This copies the content of the slice.\n     ///\n@@ -183,7 +183,7 @@ impl Wtf8Buf {\n         Wtf8Buf { bytes: <[_]>::to_vec(str.as_bytes()) }\n     }\n \n-    /// Create a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.\n+    /// Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.\n     ///\n     /// This is lossless: calling `.encode_wide()` on the resulting string\n     /// will always return the original code units.\n@@ -319,7 +319,7 @@ impl Wtf8Buf {\n         self.bytes.truncate(new_len)\n     }\n \n-    /// Consume the WTF-8 string and try to convert it to UTF-8.\n+    /// Consumes the WTF-8 string and tries to convert it to UTF-8.\n     ///\n     /// This does not copy the data.\n     ///\n@@ -333,7 +333,7 @@ impl Wtf8Buf {\n         }\n     }\n \n-    /// Consume the WTF-8 string and convert it lossily to UTF-8.\n+    /// Consumes the WTF-8 string and converts it lossily to UTF-8.\n     ///\n     /// This does not copy the data (but may overwrite parts of it in place).\n     ///\n@@ -454,21 +454,21 @@ impl fmt::Debug for Wtf8 {\n }\n \n impl Wtf8 {\n-    /// Create a WTF-8 slice from a UTF-8 `&str` slice.\n+    /// Creates a WTF-8 slice from a UTF-8 `&str` slice.\n     ///\n     /// Since WTF-8 is a superset of UTF-8, this always succeeds.\n     #[inline]\n     pub fn from_str(value: &str) -> &Wtf8 {\n         unsafe { mem::transmute(value.as_bytes()) }\n     }\n \n-    /// Return the length, in WTF-8 bytes.\n+    /// Returns the length, in WTF-8 bytes.\n     #[inline]\n     pub fn len(&self) -> usize {\n         self.bytes.len()\n     }\n \n-    /// Return the code point at `position` if it is in the ASCII range,\n+    /// Returns the code point at `position` if it is in the ASCII range,\n     /// or `b'\\xFF' otherwise.\n     ///\n     /// # Panics\n@@ -482,7 +482,7 @@ impl Wtf8 {\n         }\n     }\n \n-    /// Return the code point at `position`.\n+    /// Returns the code point at `position`.\n     ///\n     /// # Panics\n     ///\n@@ -494,7 +494,7 @@ impl Wtf8 {\n         code_point\n     }\n \n-    /// Return the code point at `position`\n+    /// Returns the code point at `position`\n     /// and the position of the next code point.\n     ///\n     /// # Panics\n@@ -507,15 +507,15 @@ impl Wtf8 {\n         (CodePoint { value: c }, n)\n     }\n \n-    /// Return an iterator for the string\u2019s code points.\n+    /// Returns an iterator for the string\u2019s code points.\n     #[inline]\n     pub fn code_points(&self) -> Wtf8CodePoints {\n         Wtf8CodePoints { bytes: self.bytes.iter() }\n     }\n \n-    /// Try to convert the string to UTF-8 and return a `&str` slice.\n+    /// Tries to convert the string to UTF-8 and return a `&str` slice.\n     ///\n-    /// Return `None` if the string contains surrogates.\n+    /// Returns `None` if the string contains surrogates.\n     ///\n     /// This does not copy the data.\n     #[inline]\n@@ -528,8 +528,8 @@ impl Wtf8 {\n         }\n     }\n \n-    /// Lossily convert the string to UTF-8.\n-    /// Return an UTF-8 `&str` slice if the contents are well-formed in UTF-8.\n+    /// Lossily converts the string to UTF-8.\n+    /// Returns an UTF-8 `&str` slice if the contents are well-formed in UTF-8.\n     ///\n     /// Surrogates are replaced with `\"\\u{FFFD}\"` (the replacement character \u201c\ufffd\u201d).\n     ///\n@@ -559,7 +559,7 @@ impl Wtf8 {\n         }\n     }\n \n-    /// Convert the WTF-8 string to potentially ill-formed UTF-16\n+    /// Converts the WTF-8 string to potentially ill-formed UTF-16\n     /// and return an iterator of 16-bit code units.\n     ///\n     /// This is lossless:"}, {"sha": "a95cb85e74a042fe98d987e8dd5980b758848cc0", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -53,7 +53,7 @@ pub mod io {\n     /// and `AsRawSocket` set of traits.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawFd {\n-        /// Extract the raw file descriptor.\n+        /// Extracts the raw file descriptor.\n         ///\n         /// This method does **not** pass ownership of the raw file descriptor\n         /// to the caller. The descriptor is only guarantee to be valid while\n@@ -216,11 +216,11 @@ pub mod ffi {\n     /// Unix-specific extensions to `OsString`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait OsStringExt {\n-        /// Create an `OsString` from a byte vector.\n+        /// Creates an `OsString` from a byte vector.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn from_vec(vec: Vec<u8>) -> Self;\n \n-        /// Yield the underlying byte vector of this `OsString`.\n+        /// Yields the underlying byte vector of this `OsString`.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn into_vec(self) -> Vec<u8>;\n     }\n@@ -241,7 +241,7 @@ pub mod ffi {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn from_bytes(slice: &[u8]) -> &Self;\n \n-        /// Get the underlying byte view of the `OsStr` slice.\n+        /// Gets the underlying byte view of the `OsStr` slice.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn as_bytes(&self) -> &[u8];\n     }\n@@ -280,7 +280,7 @@ pub mod fs {\n \n     /// Unix-specific extensions to `OpenOptions`\n     pub trait OpenOptionsExt {\n-        /// Set the mode bits that a new file will be created with.\n+        /// Sets the mode bits that a new file will be created with.\n         ///\n         /// If a new file is created as part of a `File::open_opts` call then this\n         /// specified `mode` will be used as the permission bits for the new file."}, {"sha": "e5bdb554359df6257ddf43929c7dce9dc922fa11", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -28,7 +28,7 @@ impl FileDesc {\n \n     pub fn raw(&self) -> c_int { self.fd }\n \n-    /// Extract the actual filedescriptor without closing it.\n+    /// Extracts the actual filedescriptor without closing it.\n     pub fn into_raw(self) -> c_int {\n         let fd = self.fd;\n         unsafe { mem::forget(self) };"}, {"sha": "c74d6b7e0775ef50de68ade617df1ecbbbe27105", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -130,7 +130,7 @@ impl FileDesc {\n         }\n     }\n \n-    /// Extract the actual filedescriptor without closing it.\n+    /// Extracts the actual filedescriptor without closing it.\n     pub fn unwrap(self) -> fd_t {\n         let fd = self.fd;\n         unsafe { mem::forget(self) };"}, {"sha": "71da2f9219c2f91a0f36745a37c58ecae075e642", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -85,7 +85,7 @@ pub fn last_gai_error(s: libc::c_int) -> IoError {\n     err\n }\n \n-/// Convert an `errno` value into a high-level error variant and description.\n+/// Converts an `errno` value into a high-level error variant and description.\n #[allow(deprecated)]\n pub fn decode_error(errno: i32) -> IoError {\n     // FIXME: this should probably be a bit more descriptive..."}, {"sha": "52ec6063d7a181b215787a9ebf35ea6daaa602a6", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -86,7 +86,7 @@ pub fn errno() -> i32 {\n     }\n }\n \n-/// Get a detailed string description for the given error number\n+/// Gets a detailed string description for the given error number.\n pub fn error_string(errno: i32) -> String {\n     #[cfg(target_os = \"linux\")]\n     extern {"}, {"sha": "022407ebc024e556f9974aa13852f54b34a95df1", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -38,7 +38,7 @@ pub mod io {\n     /// Extract raw handles.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawHandle {\n-        /// Extract the raw handle, without taking any ownership.\n+        /// Extracts the raw handle, without taking any ownership.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn as_raw_handle(&self) -> RawHandle;\n     }\n@@ -47,7 +47,7 @@ pub mod io {\n     #[unstable(feature = \"from_raw_os\",\n                reason = \"recent addition to the std::os::windows::io module\")]\n     pub trait FromRawHandle {\n-        /// Construct a new I/O object from the specified raw handle.\n+        /// Constructs a new I/O object from the specified raw handle.\n         ///\n         /// This function will **consume ownership** of the handle given,\n         /// passing responsibility for closing the handle to the returned\n@@ -112,7 +112,7 @@ pub mod io {\n     /// Extract raw sockets.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait AsRawSocket {\n-        /// Extract the underlying raw socket from this object.\n+        /// Extracts the underlying raw socket from this object.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         fn as_raw_socket(&self) -> RawSocket;\n     }\n@@ -214,7 +214,7 @@ pub mod ffi {\n     /// Windows-specific extensions to `OsString`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait OsStringExt {\n-        /// Create an `OsString` from a potentially ill-formed UTF-16 slice of\n+        /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n         /// 16-bit code units.\n         ///\n         /// This is lossless: calling `.encode_wide()` on the resulting string\n@@ -233,7 +233,7 @@ pub mod ffi {\n     /// Windows-specific extensions to `OsStr`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub trait OsStrExt {\n-        /// Re-encode an `OsStr` as a wide character sequence,\n+        /// Re-encodes an `OsStr` as a wide character sequence,\n         /// i.e. potentially ill-formed UTF-16.\n         ///\n         /// This is lossless. Note that the encoding does not include a final\n@@ -258,25 +258,25 @@ pub mod fs {\n \n     /// Windows-specific extensions to `OpenOptions`\n     pub trait OpenOptionsExt {\n-        /// Override the `dwDesiredAccess` argument to the call to `CreateFile`\n+        /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n         /// with the specified value.\n         fn desired_access(&mut self, access: i32) -> &mut Self;\n \n-        /// Override the `dwCreationDisposition` argument to the call to\n+        /// Overrides the `dwCreationDisposition` argument to the call to\n         /// `CreateFile` with the specified value.\n         ///\n         /// This will override any values of the standard `create` flags, for\n         /// example.\n         fn creation_disposition(&mut self, val: i32) -> &mut Self;\n \n-        /// Override the `dwFlagsAndAttributes` argument to the call to\n+        /// Overrides the `dwFlagsAndAttributes` argument to the call to\n         /// `CreateFile` with the specified value.\n         ///\n         /// This will override any values of the standard flags on the\n         /// `OpenOptions` structure.\n         fn flags_and_attributes(&mut self, val: i32) -> &mut Self;\n \n-        /// Override the `dwShareMode` argument to the call to `CreateFile` with\n+        /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n         /// the specified value.\n         ///\n         /// This will override any values of the standard flags on the"}, {"sha": "eb031e9b745f8e43b5cf1ae146adf046e00c84e4", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -95,7 +95,7 @@ pub fn last_gai_error(_errno: i32) -> IoError {\n     last_net_error()\n }\n \n-/// Convert an `errno` value into a high-level error variant and description.\n+/// Converts an `errno` value into a high-level error variant and description.\n #[allow(deprecated)]\n pub fn decode_error(errno: i32) -> IoError {\n     let (kind, desc) = match errno {"}, {"sha": "232e5669c2b90b176dd482b879500618e7072455", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -42,7 +42,7 @@ pub fn errno() -> i32 {\n     unsafe { libc::GetLastError() as i32 }\n }\n \n-/// Get a detailed string description for the given error number\n+/// Gets a detailed string description for the given error number.\n pub fn error_string(errnum: i32) -> String {\n     use libc::types::os::arch::extra::DWORD;\n     use libc::types::os::arch::extra::LPWSTR;"}, {"sha": "cc4031cc180765ffa7866f18c7af120e3844959a", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -226,7 +226,7 @@ pub enum LocalKeyState {\n }\n \n impl<T: 'static> LocalKey<T> {\n-    /// Acquire a reference to the value in this TLS key.\n+    /// Acquires a reference to the value in this TLS key.\n     ///\n     /// This will lazily initialize the value if this thread has not referenced\n     /// this key yet."}, {"sha": "5db7e9773c9834ba583a8947af15c3f4db5590f2", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -215,7 +215,7 @@ pub struct Builder {\n }\n \n impl Builder {\n-    /// Generate the base configuration for spawning a thread, from which\n+    /// Generates the base configuration for spawning a thread, from which\n     /// configuration methods can be chained.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Builder {\n@@ -225,22 +225,22 @@ impl Builder {\n         }\n     }\n \n-    /// Name the thread-to-be. Currently the name is used for identification\n+    /// Names the thread-to-be. Currently the name is used for identification\n     /// only in panic messages.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(mut self, name: String) -> Builder {\n         self.name = Some(name);\n         self\n     }\n \n-    /// Set the size of the stack for the new thread.\n+    /// Sets the size of the stack for the new thread.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stack_size(mut self, size: usize) -> Builder {\n         self.stack_size = Some(size);\n         self\n     }\n \n-    /// Spawn a new thread, and return a join handle for it.\n+    /// Spawns a new thread, and returns a join handle for it.\n     ///\n     /// The child thread may outlive the parent (unless the parent thread\n     /// is the main thread; the whole process is terminated when the main\n@@ -259,8 +259,8 @@ impl Builder {\n         self.spawn_inner(Box::new(f)).map(|i| JoinHandle(i))\n     }\n \n-    /// Spawn a new child thread that must be joined within a given\n-    /// scope, and return a `JoinGuard`.\n+    /// Spawns a new child thread that must be joined within a given\n+    /// scope, and returns a `JoinGuard`.\n     ///\n     /// The join guard can be used to explicitly join the child thread (via\n     /// `join`), returning `Result<T>`, or it will implicitly join the child\n@@ -355,7 +355,7 @@ impl Builder {\n // Free functions\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Spawn a new thread, returning a `JoinHandle` for it.\n+/// Spawns a new thread, returning a `JoinHandle` for it.\n ///\n /// The join handle will implicitly *detach* the child thread upon being\n /// dropped. In this case, the child thread may outlive the parent (unless\n@@ -374,7 +374,7 @@ pub fn spawn<F>(f: F) -> JoinHandle where F: FnOnce(), F: Send + 'static {\n     Builder::new().spawn(f).unwrap()\n }\n \n-/// Spawn a new *scoped* thread, returning a `JoinGuard` for it.\n+/// Spawns a new *scoped* thread, returning a `JoinGuard` for it.\n ///\n /// The join guard can be used to explicitly join the child thread (via\n /// `join`), returning `Result<T>`, or it will implicitly join the child\n@@ -400,7 +400,7 @@ pub fn current() -> Thread {\n     thread_info::current_thread()\n }\n \n-/// Cooperatively give up a timeslice to the OS scheduler.\n+/// Cooperatively gives up a timeslice to the OS scheduler.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     unsafe { imp::yield_now() }\n@@ -413,7 +413,7 @@ pub fn panicking() -> bool {\n     unwind::panicking()\n }\n \n-/// Invoke a closure, capturing the cause of panic if one occurs.\n+/// Invokes a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `Ok(())` if the closure does not panic, and will\n /// return `Err(cause)` if the closure panics. The `cause` returned is the\n@@ -462,7 +462,7 @@ pub fn catch_panic<F, R>(f: F) -> Result<R>\n     Ok(result.unwrap())\n }\n \n-/// Put the current thread to sleep for the specified amount of time.\n+/// Puts the current thread to sleep for the specified amount of time.\n ///\n /// The thread may sleep longer than the duration specified due to scheduling\n /// specifics or platform-dependent functionality. Note that on unix platforms\n@@ -482,7 +482,7 @@ pub fn sleep(dur: Duration) {\n     imp::sleep(dur)\n }\n \n-/// Block unless or until the current thread's token is made available (may wake spuriously).\n+/// Blocks unless or until the current thread's token is made available (may wake spuriously).\n ///\n /// See the module doc for more detail.\n //\n@@ -501,7 +501,7 @@ pub fn park() {\n     *guard = false;\n }\n \n-/// Block unless or until the current thread's token is made available or\n+/// Blocks unless or until the current thread's token is made available or\n /// the specified duration has been reached (may wake spuriously).\n ///\n /// The semantics of this function are equivalent to `park()` except that the\n@@ -573,7 +573,7 @@ impl Thread {\n         }\n     }\n \n-    /// Get the thread's name.\n+    /// Gets the thread's name.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(&self) -> Option<&str> {\n         self.inner.name.as_ref().map(|s| &**s)\n@@ -638,13 +638,13 @@ impl<T> JoinInner<T> {\n pub struct JoinHandle(JoinInner<()>);\n \n impl JoinHandle {\n-    /// Extract a handle to the underlying thread\n+    /// Extracts a handle to the underlying thread\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n \n-    /// Wait for the associated thread to finish.\n+    /// Waits for the associated thread to finish.\n     ///\n     /// If the child thread panics, `Err` is returned with the parameter given\n     /// to `panic`.\n@@ -684,13 +684,13 @@ pub struct JoinGuard<'a, T: Send + 'a> {\n unsafe impl<'a, T: Send + 'a> Sync for JoinGuard<'a, T> {}\n \n impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n-    /// Extract a handle to the thread this guard will join on.\n+    /// Extracts a handle to the thread this guard will join on.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.inner.thread\n     }\n \n-    /// Wait for the associated thread to finish, returning the result of the\n+    /// Waits for the associated thread to finish, returning the result of the\n     /// thread's calculation.\n     ///\n     /// # Panics"}, {"sha": "9c0b4a5d8337800211d774098f57f81fa9f5a132", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa16d6a473415415cb87a1fe6754aace32cbb1c/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=6fa16d6a473415415cb87a1fe6754aace32cbb1c", "patch": "@@ -135,7 +135,7 @@ macro_rules! __scoped_thread_local_inner {\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n                      stabilizing its interface\")]\n impl<T> ScopedKey<T> {\n-    /// Insert a value into this scoped thread local storage slot for a\n+    /// Inserts a value into this scoped thread local storage slot for a\n     /// duration of a closure.\n     ///\n     /// While `cb` is running, the value `t` will be returned by `get` unless\n@@ -188,7 +188,7 @@ impl<T> ScopedKey<T> {\n         cb()\n     }\n \n-    /// Get a value out of this scoped variable.\n+    /// Gets a value out of this scoped variable.\n     ///\n     /// This function takes a closure which receives the value of this\n     /// variable."}]}