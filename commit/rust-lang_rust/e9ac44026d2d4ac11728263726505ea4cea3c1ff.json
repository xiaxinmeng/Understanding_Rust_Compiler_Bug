{"sha": "e9ac44026d2d4ac11728263726505ea4cea3c1ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWM0NDAyNmQyZDRhYzExNzI4MjYzNzI2NTA1ZWE0Y2VhM2MxZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-28T00:45:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-28T00:45:34Z"}, "message": "Auto merge of #29383 - petrochenkov:empstr, r=pnkfelix\n\nFixes https://github.com/rust-lang/rust/issues/28692\nFixes https://github.com/rust-lang/rust/issues/28992\nFixes some other similar issues (see the tests)\n\n[breaking-change], needs crater run (cc @brson or @alexcrichton )\n\nThe pattern with parens `UnitVariant(..)` for unit variants seems to be popular in rustc (see the second commit), but mostly used by one person (@nikomatsakis), according to git blame. If it causes breakage on crates.io I'll add an exceptional case for it.", "tree": {"sha": "84d2da81ff9bf40e61c38664ccabf1e07e0ce0e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d2da81ff9bf40e61c38664ccabf1e07e0ce0e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ac44026d2d4ac11728263726505ea4cea3c1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ac44026d2d4ac11728263726505ea4cea3c1ff", "html_url": "https://github.com/rust-lang/rust/commit/e9ac44026d2d4ac11728263726505ea4cea3c1ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ac44026d2d4ac11728263726505ea4cea3c1ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac2b13a5a0132a020a3954031635fed65fd6c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac2b13a5a0132a020a3954031635fed65fd6c22", "html_url": "https://github.com/rust-lang/rust/commit/bac2b13a5a0132a020a3954031635fed65fd6c22"}, {"sha": "af96402cc88a40db4f61b22924bfeb24a53cf424", "url": "https://api.github.com/repos/rust-lang/rust/commits/af96402cc88a40db4f61b22924bfeb24a53cf424", "html_url": "https://github.com/rust-lang/rust/commit/af96402cc88a40db4f61b22924bfeb24a53cf424"}], "stats": {"total": 319, "additions": 192, "deletions": 127}, "files": [{"sha": "48d7f44063ec361db0684114fd867a0d44ac0714", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -225,11 +225,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n             }\n         }\n-\n     }\n \n     fn visit_expr(&mut self, expr: &hir::Expr) {"}, {"sha": "70ef112efbaaba872032ad1298e77fddc4f7a990", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -1424,7 +1424,7 @@ impl<'tcx> cmt_<'tcx> {\n                 NonAliasable\n             }\n \n-            Categorization::StaticItem(..) => {\n+            Categorization::StaticItem => {\n                 if self.mutbl.is_mutable() {\n                     FreelyAliasable(AliasableStaticMut)\n                 } else {"}, {"sha": "4425a24590c83328b76d07cdd2e08d59afdcb601", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 self.walk_fn(fk, fd, b, s)\n             }\n         }\n@@ -479,7 +479,7 @@ impl<'a> LifetimeContext<'a> {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            FnKind::Closure(..) => {\n+            FnKind::Closure => {\n                 intravisit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "76428ca6d9035e897119079fde2d716859e66b73", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -300,7 +300,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n         ty::TyInt(..) |\n         ty::TyUint(..) |\n         ty::TyFloat(..) |\n-        ty::TyStr(..) |\n+        ty::TyStr |\n         ty::TyBareFn(..) |\n         ty::TyArray(..) |\n         ty::TySlice(..) |"}, {"sha": "0b0f6c0b998fc584dfe5cb6fe3ae0d9f7682a521", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -1563,7 +1563,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         match other {\n-            &ObjectCandidate(..) |\n+            &ObjectCandidate |\n             &ParamCandidate(_) | &ProjectionCandidate => match victim {\n                 &DefaultImplCandidate(..) => {\n                     self.tcx().sess.bug(\n@@ -1572,16 +1572,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n                 &ImplCandidate(..) |\n                 &ClosureCandidate(..) |\n-                &FnPointerCandidate(..) |\n-                &BuiltinObjectCandidate(..) |\n-                &BuiltinUnsizeCandidate(..) |\n+                &FnPointerCandidate |\n+                &BuiltinObjectCandidate |\n+                &BuiltinUnsizeCandidate |\n                 &DefaultImplObjectCandidate(..) |\n                 &BuiltinCandidate(..) => {\n                     // We have a where-clause so don't go around looking\n                     // for impls.\n                     true\n                 }\n-                &ObjectCandidate(..) |\n+                &ObjectCandidate |\n                 &ProjectionCandidate => {\n                     // Arbitrarily give param candidates priority\n                     // over projection and object candidates."}, {"sha": "ea092ed977edaa11f044c618c8a20402a8e01d64", "filename": "src/librustc/middle/ty/outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Foutlives.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -188,21 +188,21 @@ fn compute_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n         // the type and then visits the types that are lexically\n         // contained within. (The comments refer to relevant rules\n         // from RFC1214.)\n-        ty::TyBool(..) |        // OutlivesScalar\n-        ty::TyChar(..) |        // OutlivesScalar\n+        ty::TyBool |            // OutlivesScalar\n+        ty::TyChar |            // OutlivesScalar\n         ty::TyInt(..) |         // OutlivesScalar\n         ty::TyUint(..) |        // OutlivesScalar\n         ty::TyFloat(..) |       // OutlivesScalar\n         ty::TyEnum(..) |        // OutlivesNominalType\n         ty::TyStruct(..) |      // OutlivesNominalType\n         ty::TyBox(..) |         // OutlivesNominalType (ish)\n-        ty::TyStr(..) |         // OutlivesScalar (ish)\n+        ty::TyStr |             // OutlivesScalar (ish)\n         ty::TyArray(..) |       // ...\n         ty::TySlice(..) |       // ...\n         ty::TyRawPtr(..) |      // ...\n         ty::TyRef(..) |         // OutlivesReference\n         ty::TyTuple(..) |       // ...\n-        ty::TyError(..) => {\n+        ty::TyError => {\n             push_region_constraints(out, ty.regions());\n             for subty in ty.walk_shallow() {\n                 compute_components(infcx, subty, out);"}, {"sha": "f6bb51a26adc9a8bd76546f1997720d555d4c6a5", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -540,14 +540,14 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                             ol, old_loan_msg)\n                 }\n \n-                euv::OverloadedOperator(..) |\n-                euv::AddrOf(..) |\n-                euv::AutoRef(..) |\n-                euv::AutoUnsafe(..) |\n-                euv::ClosureInvocation(..) |\n-                euv::ForLoop(..) |\n-                euv::RefBinding(..) |\n-                euv::MatchDiscriminant(..) => {\n+                euv::OverloadedOperator |\n+                euv::AddrOf |\n+                euv::AutoRef |\n+                euv::AutoUnsafe |\n+                euv::ClosureInvocation |\n+                euv::ForLoop |\n+                euv::RefBinding |\n+                euv::MatchDiscriminant => {\n                     format!(\"previous borrow of `{}` occurs here{}\",\n                             ol, old_loan_msg)\n                 }"}, {"sha": "e7ce93972633be7216b6315b8b157860eb31b981", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 self.extend(result, &cmt, LpInterior(i.cleaned()))\n             }\n \n-            Categorization::StaticItem(..) => {\n+            Categorization::StaticItem => {\n                 Safe\n             }\n "}, {"sha": "162c91ee4e9b59bf54bb81ae67667f12de084e3a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -942,8 +942,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                            \"consider changing this closure to take self by mutable reference\");\n                 }\n             }\n-            mc::AliasableStatic(..) |\n-            mc::AliasableStaticMut(..) => {\n+            mc::AliasableStatic |\n+            mc::AliasableStaticMut => {\n                 span_err!(\n                     self.tcx.sess, span, E0388,\n                     \"{} in a static location\", prefix);\n@@ -998,7 +998,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn note_and_explain_bckerr(&self, err: BckError<'tcx>) {\n         let code = err.code;\n         match code {\n-            err_mutbl(..) => {\n+            err_mutbl => {\n                 match err.cmt.note {\n                     mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n                         // If this is an `Fn` closure, it simply can't mutate upvars."}, {"sha": "b9637addccf691ecd7439a4ac1f7be9b0921efc3", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -66,7 +66,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<BasicBlock, MatchPair<'pat, 'tcx>> {\n         match *match_pair.pattern.kind {\n-            PatternKind::Wild(..) => {\n+            PatternKind::Wild => {\n                 // nothing left to do\n                 Ok(block)\n             }"}, {"sha": "3380b3a6c1484308d6607692c73345f7001a98e0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     }\n                     ty::TyEnum(adt, substs) => {\n                         match cx.tcx.def_map.borrow()[&self.id].full_def() {\n-                            def::DefVariant(enum_id, variant_id, true) => {\n+                            def::DefVariant(enum_id, variant_id, _) => {\n                                 debug_assert!(adt.did == enum_id);\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let field_refs = field_refs(&adt.variants[index], fields);"}, {"sha": "b161d7f33307e2e4ca331334639d269b62d20009", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -619,7 +619,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            FnKind::Closure(..) => ClosureRibKind(node_id),\n+            FnKind::Closure => ClosureRibKind(node_id),\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}, {"sha": "e65a212e41b130e01cac5d5dc4d5807b341a4cdf", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -247,7 +247,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             }\n         }\n \n-        ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) | ty::TyError(..) => {\n+        ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) | ty::TyError => {\n             cx.sess().bug(&format!(\"fictitious type {:?} in sizing_type_of()\",\n                                    t))\n         }\n@@ -451,7 +451,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyInfer(..) => cx.sess().bug(\"type_of with TyInfer\"),\n       ty::TyProjection(..) => cx.sess().bug(\"type_of with TyProjection\"),\n       ty::TyParam(..) => cx.sess().bug(\"type_of with ty_param\"),\n-      ty::TyError(..) => cx.sess().bug(\"type_of with TyError\"),\n+      ty::TyError => cx.sess().bug(\"type_of with TyError\"),\n     };\n \n     debug!(\"--> mapped t={:?} to llty={}\","}, {"sha": "1053919be53fe40acb610556cc8feed39714a750", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 61, "deletions": 23, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -21,6 +21,7 @@ use check::{check_expr_with_lvalue_pref};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n use require_same_types;\n use util::nodemap::FnvHashMap;\n+use session::Session;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -136,6 +137,12 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         }\n         hir::PatEnum(..) | hir::PatIdent(..)\n                 if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n+            if let hir::PatEnum(ref path, ref subpats) = pat.node {\n+                if !(subpats.is_some() && subpats.as_ref().unwrap().is_empty()) {\n+                    bad_struct_kind_err(tcx.sess, pat.span, path, false);\n+                    return;\n+                }\n+            }\n             let const_did = tcx.def_map.borrow().get(&pat.id).unwrap().def_id();\n             let const_scheme = tcx.lookup_item_type(const_did);\n             assert!(const_scheme.generics.is_empty());\n@@ -192,11 +199,12 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         }\n         hir::PatIdent(_, ref path, _) => {\n             let path = hir_util::ident_to_path(path.span, path.node);\n-            check_pat_enum(pcx, pat, &path, Some(&[]), expected);\n+            check_pat_enum(pcx, pat, &path, Some(&[]), expected, false);\n         }\n         hir::PatEnum(ref path, ref subpats) => {\n             let subpats = subpats.as_ref().map(|v| &v[..]);\n-            check_pat_enum(pcx, pat, path, subpats, expected);\n+            let is_tuple_struct_pat = !(subpats.is_some() && subpats.unwrap().is_empty());\n+            check_pat_enum(pcx, pat, path, subpats, expected, is_tuple_struct_pat);\n         }\n         hir::PatQPath(ref qself, ref path) => {\n             let self_ty = fcx.to_ty(&qself.ty);\n@@ -572,11 +580,19 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n     fcx.write_substs(pat.id, ty::ItemSubsts { substs: item_substs.clone() });\n }\n \n+// This function exists due to the warning \"diagnostic code E0164 already used\"\n+fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path, is_warning: bool) {\n+    let name = pprust::path_to_string(path);\n+    span_err_or_warn!(is_warning, sess, span, E0164,\n+        \"`{}` does not name a tuple variant or a tuple struct\", name);\n+}\n+\n pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                                 pat: &hir::Pat,\n                                 path: &hir::Path,\n                                 subpats: Option<&'tcx [P<hir::Pat>]>,\n-                                expected: Ty<'tcx>)\n+                                expected: Ty<'tcx>,\n+                                is_tuple_struct_pat: bool)\n {\n     // Typecheck the path.\n     let fcx = pcx.fcx;\n@@ -618,25 +634,52 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                      path_scheme, &ctor_predicates,\n                      opt_ty, def, pat.span, pat.id);\n \n+    let report_bad_struct_kind = |is_warning| {\n+        bad_struct_kind_err(tcx.sess, pat.span, path, is_warning);\n+        fcx.write_error(pat.id);\n+\n+        if let Some(subpats) = subpats {\n+            for pat in subpats {\n+                check_pat(pcx, &**pat, tcx.types.err);\n+            }\n+        }\n+    };\n+\n     // If we didn't have a fully resolved path to start with, we had an\n     // associated const, and we should quit now, since the rest of this\n     // function uses checks specific to structs and enums.\n     if path_res.depth != 0 {\n-        let pat_ty = fcx.node_ty(pat.id);\n-        demand::suptype(fcx, pat.span, expected, pat_ty);\n+        if is_tuple_struct_pat {\n+            report_bad_struct_kind(false);\n+        } else {\n+            let pat_ty = fcx.node_ty(pat.id);\n+            demand::suptype(fcx, pat.span, expected, pat_ty);\n+        }\n         return;\n     }\n \n     let pat_ty = fcx.node_ty(pat.id);\n     demand::eqtype(fcx, pat.span, expected, pat_ty);\n \n-\n     let real_path_ty = fcx.node_ty(pat.id);\n     let (arg_tys, kind_name): (Vec<_>, &'static str) = match real_path_ty.sty {\n         ty::TyEnum(enum_def, expected_substs)\n             if def == def::DefVariant(enum_def.did, def.def_id(), false) =>\n         {\n             let variant = enum_def.variant_of_def(def);\n+            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n+                // Matching unit variants with tuple variant patterns (`UnitVariant(..)`)\n+                // is allowed for backward compatibility.\n+                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n+                report_bad_struct_kind(is_special_case);\n+                if !is_special_case {\n+                    return\n+                } else {\n+                    span_note!(tcx.sess, pat.span,\n+                        \"this warning will become a HARD ERROR in a future release. \\\n+                        See RFC 218 for details.\");\n+                }\n+            }\n             (variant.fields\n                     .iter()\n                     .map(|f| fcx.instantiate_type_scheme(pat.span,\n@@ -646,26 +689,21 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n              \"variant\")\n         }\n         ty::TyStruct(struct_def, expected_substs) => {\n-            (struct_def.struct_variant()\n-                       .fields\n-                       .iter()\n-                       .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                            expected_substs,\n-                                                            &f.unsubst_ty()))\n-                       .collect(),\n+            let variant = struct_def.struct_variant();\n+            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n+                report_bad_struct_kind(false);\n+                return;\n+            }\n+            (variant.fields\n+                    .iter()\n+                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n+                                                         expected_substs,\n+                                                         &f.unsubst_ty()))\n+                    .collect(),\n              \"struct\")\n         }\n         _ => {\n-            let name = pprust::path_to_string(path);\n-            span_err!(tcx.sess, pat.span, E0164,\n-                \"`{}` does not name a non-struct variant or a tuple struct\", name);\n-            fcx.write_error(pat.id);\n-\n-            if let Some(subpats) = subpats {\n-                for pat in subpats {\n-                    check_pat(pcx, &**pat, tcx.types.err);\n-                }\n-            }\n+            report_bad_struct_kind(false);\n             return;\n         }\n     };"}, {"sha": "ed819d46041e60ce45c5db274a6501b725a64003", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -1052,7 +1052,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     (impl_def_id, substs, ref_obligations)\n                 }\n \n-                ObjectCandidate(..) |\n+                ObjectCandidate |\n                 TraitCandidate |\n                 WhereClauseCandidate(..) => {\n                     // These have no additional conditions to check."}, {"sha": "ed8bb6a962509eae4858cc8df34fae9074ee5d83", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -1446,7 +1446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               -> Option<(ty::AdtDef<'tcx>, ty::VariantDef<'tcx>)>\n     {\n         let (adt, variant) = match def {\n-            def::DefVariant(enum_id, variant_id, true) => {\n+            def::DefVariant(enum_id, variant_id, _) => {\n                 let adt = self.tcx().lookup_adt_def(enum_id);\n                 (adt, adt.variant_with_id(variant_id))\n             }"}, {"sha": "cdbfda40813b4648a4b356de34358ee80b5acdc1", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -69,7 +69,7 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-        TyStr(..) | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n+        TyStr | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n         TyParam(..) | TyError |\n         TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n             None"}, {"sha": "4ea834cce2d8843f7218340d4a2c3b5ae6ac8c14", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -774,7 +774,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) |\n-            ty::ReEmpty(..) => None\n+            ty::ReEmpty => None\n         }\n     }\n }\n@@ -1607,7 +1607,7 @@ impl Clean<Type> for hir::Ty {\n             TyPolyTraitRef(ref bounds) => {\n                 PolyTraitRef(bounds.clean(cx))\n             },\n-            TyInfer(..) => {\n+            TyInfer => {\n                 Infer\n             },\n             TyTypeof(..) => {"}, {"sha": "b2d44301eed8dcb44d81832a2564fee820ae7b58", "filename": "src/test/compile-fail/empty-struct-braces-gate-2.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -20,8 +20,7 @@ enum E {\n fn main() {\n     let e2: Empty2 = Empty2 {}; //~ ERROR empty structs and enum variants with braces are unstable\n     let e2: Empty2 = Empty2;\n-    // Issue #28692\n-    // let e5: E = E::Empty5 {}; // ERROR empty structs and enum variants with braces are unstable\n+    let e5: E = E::Empty5 {}; //~ ERROR empty structs and enum variants with braces are unstable\n     let e5: E = E::Empty5;\n \n     match e2 {\n@@ -33,17 +32,15 @@ fn main() {\n     match e2 {\n         Empty2 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 {} => {} // ERROR empty structs and enum variants with braces are unstable\n-    // }\n+    match e5 {\n+        E::Empty5 {} => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n     match e5 {\n         E::Empty5 => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 { .. } => {} // ERROR empty structs and enum variants with braces are unstable\n-    // }\n+    match e5 {\n+        E::Empty5 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n \n     let e22 = Empty2 { ..e2 }; //~ ERROR empty structs and enum variants with braces are unstable\n }"}, {"sha": "6a6c3f16c04afed220bc08c3777f9272147ce677", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -10,7 +10,6 @@\n \n // Can't use empty braced struct as constant pattern\n \n-#![deny(warnings)]\n #![feature(braced_empty_structs)]\n \n struct Empty1 {}\n@@ -23,11 +22,10 @@ fn main() {\n     let e1 = Empty1 {};\n     let e2 = E::Empty2 {};\n \n-    // Issue #28692\n-    // match e1 {\n-    //     Empty1 => () // ERROR incorrect error\n-    // }\n+    match e1 {\n+        Empty1 => () // Not an error, `Empty1` is interpreted as a new binding\n+    }\n     match e2 {\n-        E::Empty2 => () //~ ERROR `E::Empty2` does not name a non-struct variant or a tuple struct\n+        E::Empty2 => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "d98d64b712a8b42b36705daa7217813b9983b537", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -14,13 +14,8 @@\n \n struct Empty1 {}\n \n-enum E {\n-    Empty2 {}\n-}\n-\n fn main() {\n     let e1 = Empty1 {};\n-    let e2 = E::Empty2 {};\n \n     // Rejected by parser as yet\n     // match e1 {\n@@ -29,11 +24,4 @@ fn main() {\n     match e1 {\n         Empty1(..) => () //~ ERROR unresolved enum variant, struct or const `Empty1`\n     }\n-    // Issue #28692\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR unresolved enum variant, struct or const `Empty2`\n-    // }\n-    // match e2 {\n-    //     E::Empty2(..) => () // ERROR unresolved enum variant, struct or const `Empty2`\n-    // }\n }"}, {"sha": "9fae203f3894d4f42232953d7f4e978a825bd1c0", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use empty braced struct as enum pattern\n+\n+#![feature(braced_empty_structs)]\n+\n+enum E {\n+    Empty2 {}\n+}\n+\n+fn main() {\n+    let e2 = E::Empty2 {};\n+\n+    // Rejected by parser as yet\n+    // match e2 {\n+    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    // }\n+    match e2 {\n+        E::Empty2(..) => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    }\n+}"}, {"sha": "6cb9a3f007f0c5e628e6fd8983e6e548255fad23", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(braced_empty_structs)]\n \n-FIXME //~ ERROR expected item, found `FIXME`\n-\n struct Empty1;\n \n enum E {\n@@ -24,17 +22,18 @@ fn main() {\n     let e1 = Empty1;\n     let e2 = E::Empty2;\n \n-    // Issue #28692\n-    // match e1 {\n-    //     Empty1() => () // ERROR variable `Empty1` should have a snake case name\n-    // }\n+    // Rejected by parser as yet\n     // match e1 {\n-    //     Empty1(..) => () // ERROR variable `Empty1` should have a snake case name\n-    // }\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR variable `Empty2` should have a snake case name\n+    //     Empty1() => () // ERROR `Empty1` does not name a tuple variant or a tuple struct\n     // }\n+    match e1 {\n+        Empty1(..) => () //~ ERROR `Empty1` does not name a tuple variant or a tuple struct\n+    }\n+    // Rejected by parser as yet\n     // match e2 {\n-    //     E::Empty2(..) => () // ERROR variable `Empty2` should have a snake case name\n+    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n+    match e2 {\n+        E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n+    }\n }"}, {"sha": "56452449d4ee13e705fd55b66e3335e81e17ea06", "filename": "src/test/compile-fail/issue-19086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let f = FooB { x: 3, y: 4 };\n     match f {\n         FooB(a, b) => println!(\"{} {}\", a, b),\n-//~^ ERROR `FooB` does not name a non-struct variant or a tuple struct\n+//~^ ERROR `FooB` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "ff2846dc705bbca12cad936c5ef43cec7016aa69", "filename": "src/test/compile-fail/issue-27831.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let Bar { .. } = x; //~ ERROR empty structs and enum variants with braces are unstable\n \n     match Enum::Bar {\n-        Enum::Bar { .. } //~ ERROR `Enum::Bar` does not name a struct\n+        Enum::Bar { .. } //~ ERROR empty structs and enum variants with braces are unstable\n            => {}\n         Enum::Foo { .. } //~ ERROR `Enum::Foo` does not name a struct\n            => {}"}, {"sha": "f7d53ba23daf50e8a2ac69fa64feeda4fed69cfb", "filename": "src/test/compile-fail/issue-28992-empty.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use constants as tuple struct patterns\n+\n+#![feature(associated_consts)]\n+\n+const C1: i32 = 0;\n+\n+struct S;\n+\n+impl S {\n+    const C2: i32 = 0;\n+}\n+\n+fn main() {\n+    if let C1(..) = 0 {} //~ ERROR `C1` does not name a tuple variant or a tuple struct\n+    if let S::C2(..) = 0 {} //~ ERROR `S::C2` does not name a tuple variant or a tuple struct\n+}"}, {"sha": "17debdabb61f08fe1982e77ae63037a6f7bc21a9", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -21,6 +21,7 @@ fn main() {\n           color::cmyk(_, _, _, _) => { }\n           color::no_color(_) => { }\n           //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n+          //~^^ WARN `color::no_color` does not name a tuple variant or a tuple struct\n         }\n     }\n }"}, {"sha": "15c28ec2713e967d160e67bd20c1f047407afd53", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -32,7 +32,7 @@ pub fn test_match_partial(p: Lonely<D, D>) {\n     //~^ ERROR                 parent_of_fragments: `$(local p)`\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         _ => {}\n     }\n }\n@@ -44,7 +44,7 @@ pub fn test_match_full(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(..) => {}\n         Two(..) => {}\n     }\n@@ -59,7 +59,7 @@ pub fn test_match_bind_one(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n     //~| ERROR                  assigned_leaf_path: `$(local data)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(data) => {}\n         Two(..) => {}\n     }\n@@ -78,7 +78,7 @@ pub fn test_match_bind_many(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n     //~| ERROR                  assigned_leaf_path: `$(local right)`\n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n         One(data) => {}\n         Two(left, right) => {}\n     }"}, {"sha": "a1152333900a0f455b4d096acf7b3b4b6e5a69a1", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -38,7 +38,7 @@ pub fn test_match_bind_and_underscore(p: Lonely<D, D>) {\n     //~| ERROR                  assigned_leaf_path: `$(local left)`\n \n     match p {\n-        Zero(..) => {}\n+        Zero => {}\n \n         One(_) => {}       // <-- does not fragment `($(local p) as One)` ...\n "}, {"sha": "1721d1f0ae11c6697426314235917d7aaf963a27", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -26,6 +26,7 @@ fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n         A::D(_) => (),       //~ ERROR this pattern has 1 field, but\n+        //~^ WARN `A::D` does not name a tuple variant or a tuple struct\n         _ => ()\n     }\n     match 'c' {"}, {"sha": "80ea1bc3a0e49d23b92016165060043766ae653f", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     let e3: Empty3 = Empty3 {};\n     let e3: Empty3 = Empty3;\n     let e4: E = E::Empty4 {};\n-    // let e5: E = E::Empty5 {}; // Issue #28692\n+    let e5: E = E::Empty5 {};\n     let e5: E = E::Empty5;\n \n     match e1 {\n@@ -46,11 +46,10 @@ fn main() {\n         E::Empty4 {} => {}\n         _ => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 {} => {}\n-    //     _ => {}\n-    // }\n+    match e5 {\n+        E::Empty5 {} => {}\n+        _ => {}\n+    }\n \n     match e1 {\n         Empty1 { .. } => {}\n@@ -65,11 +64,10 @@ fn main() {\n         E::Empty4 { .. } => {}\n         _ => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 { .. } => {}\n-    //     _ => {}\n-    // }\n+    match e5 {\n+        E::Empty5 { .. } => {}\n+        _ => {}\n+    }\n \n     match e2 {\n         Empty2 => {}"}, {"sha": "74936411da2c9f30b65876eb4a4853144f755b01", "filename": "src/test/run-pass/issue-14308.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14308.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -10,7 +10,6 @@\n \n \n struct A(isize);\n-struct B;\n \n fn main() {\n     let x = match A(3) {\n@@ -22,12 +21,4 @@ fn main() {\n         A(..) => 2\n     };\n     assert_eq!(x, 2);\n-\n-    // This next test uses a (..) wildcard match on a nullary struct.\n-    // There's no particularly good reason to support this, but it's currently allowed,\n-    // and this makes sure it doesn't ICE or break LLVM.\n-    let x = match B {\n-        B(..) => 3\n-    };\n-    assert_eq!(x, 3);\n }"}, {"sha": "49ee99b22a1202655fd863906529597bb9fdc08a", "filename": "src/test/run-pass/issue-1701.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fissue-1701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac44026d2d4ac11728263726505ea4cea3c1ff/src%2Ftest%2Frun-pass%2Fissue-1701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1701.rs?ref=e9ac44026d2d4ac11728263726505ea4cea3c1ff", "patch": "@@ -20,7 +20,7 @@ fn noise(a: animal) -> Option<String> {\n       animal::cat(..)    => { Some(\"meow\".to_string()) }\n       animal::dog(..)    => { Some(\"woof\".to_string()) }\n       animal::rabbit(..) => { None }\n-      animal::tiger(..)  => { Some(\"roar\".to_string()) }\n+      animal::tiger  => { Some(\"roar\".to_string()) }\n     }\n }\n "}]}