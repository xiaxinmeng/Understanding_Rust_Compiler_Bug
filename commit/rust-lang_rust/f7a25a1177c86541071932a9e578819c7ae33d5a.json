{"sha": "f7a25a1177c86541071932a9e578819c7ae33d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YTI1YTExNzdjODY1NDEwNzE5MzJhOWU1Nzg4MTljN2FlMzNkNWE=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-06-30T15:03:18Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-06-30T15:03:18Z"}, "message": "warn on use of default value for an option", "tree": {"sha": "acee3c442bb0df88426c4a99a76ea5cd7e2cd53c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acee3c442bb0df88426c4a99a76ea5cd7e2cd53c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a25a1177c86541071932a9e578819c7ae33d5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAls3m7YACgkQbVYg2Qgh\nATPu7gf+L50s6yTIfyZLGIz6YL4FLMZvkNHH6cZ40LAFV69JmQuNJPg3sxt5/4/Z\nLLvDQIY4VBNaZtNQCNRdW5F++JN7nkXUFsdfKoWiClCHLaIpHM5xkBUFHj1swZRD\n67Hgr0DA8RjFuIJii1aBbho7w83dQ6svhZZOAsuigGuzx6YZTw9LrKlpP5Co/bnS\nUxekVejavSPctgya4BKWm258ucQ5T1hm7gLME5lPkXtp3grWZ1p5QxQCiMpHz4Lm\nUzwLjp59J2sGbDsjM9H+QWQIP2sflouVQ9vuninl4l5icIh31L/hSLqqtKXxP5v3\n7GJBHHariP+1u3601f+l6HK8pRvkYg==\n=TKc3\n-----END PGP SIGNATURE-----", "payload": "tree acee3c442bb0df88426c4a99a76ea5cd7e2cd53c\nparent f8f9457e200f9a349843eedd73c5a969261657e8\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1530370998 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1530370998 +0200\n\nwarn on use of default value for an option\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a25a1177c86541071932a9e578819c7ae33d5a", "html_url": "https://github.com/rust-lang/rust/commit/f7a25a1177c86541071932a9e578819c7ae33d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a25a1177c86541071932a9e578819c7ae33d5a/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8f9457e200f9a349843eedd73c5a969261657e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f9457e200f9a349843eedd73c5a969261657e8", "html_url": "https://github.com/rust-lang/rust/commit/f8f9457e200f9a349843eedd73c5a969261657e8"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "9478bc89f3ba27b1906b20015b7ea238f31904a0", "filename": "Contributing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7a25a1177c86541071932a9e578819c7ae33d5a/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7a25a1177c86541071932a9e578819c7ae33d5a/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=f7a25a1177c86541071932a9e578819c7ae33d5a", "patch": "@@ -205,7 +205,7 @@ and `ListFormatting` the key structure for configuration. You'll need to make a\n \n Rustfmt strives to be highly configurable. Often the first part of a patch is\n creating a configuration option for the feature you are implementing. All\n-handling of configuration options is done in [src/config.rs](src/config.rs). Look for the\n+handling of configuration options is done in [src/config/mod.rs](src/config/mod.rs). Look for the\n `create_config!` macro at the end of the file for all the options. The rest of\n the file defines a bunch of enums used for options, and the machinery to produce\n the config struct and parse a config file, etc. Checking an option is done by"}, {"sha": "ddb063feeab0335a3e76b7f7db092f69d77701aa", "filename": "src/config/config_type.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=f7a25a1177c86541071932a9e578819c7ae33d5a", "patch": "@@ -281,6 +281,7 @@ macro_rules! create_config {\n                 match key {\n                     $(\n                         stringify!($i) => {\n+                            self.$i.1 = true;\n                             self.$i.2 = val.parse::<$ty>()\n                                 .expect(&format!(\"Failed to parse override for {} (\\\"{}\\\") as a {}\",\n                                                  stringify!($i),\n@@ -421,6 +422,16 @@ macro_rules! create_config {\n             fn set_ignore(&mut self, dir: &Path) {\n                 self.ignore.2.add_prefix(dir);\n             }\n+\n+            /// Returns true if the config key was explicitely set and is the default value.\n+            pub fn is_default(&self, key: &str) -> bool {\n+                $(\n+                    if let stringify!($i) = key {\n+                        return self.$i.1 && self.$i.2 == $def;\n+                    }\n+                 )+\n+                false\n+            }\n         }\n \n         // Template for the default configuration"}, {"sha": "436c7a83b81f6ade58945df03bfa593c4f676d04", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=f7a25a1177c86541071932a9e578819c7ae33d5a", "patch": "@@ -126,7 +126,7 @@ impl Range {\n /// It is represented as a multimap keyed on file names, with values a collection of\n /// non-overlapping ranges sorted by their start point. An inner `None` is interpreted to mean all\n /// lines in all files.\n-#[derive(Clone, Debug, Default)]\n+#[derive(Clone, Debug, Default, PartialEq)]\n pub struct FileLines(Option<HashMap<FileName, Vec<Range>>>);\n \n /// Normalizes the ranges so that the invariants for `FileLines` hold: ranges are non-overlapping,"}, {"sha": "b3599c230f454df07cadc4e872625047d3b18652", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=f7a25a1177c86541071932a9e578819c7ae33d5a", "patch": "@@ -223,7 +223,7 @@ configuration_option_enum! { Verbosity:\n     Quiet,\n }\n \n-#[derive(Deserialize, Serialize, Clone, Debug)]\n+#[derive(Deserialize, Serialize, Clone, Debug, PartialEq)]\n pub struct WidthHeuristics {\n     // Maximum width of the args of a function call before falling back\n     // to vertical formatting.\n@@ -293,7 +293,7 @@ impl Default for EmitMode {\n }\n \n /// A set of directories, files and modules that rustfmt should ignore.\n-#[derive(Default, Deserialize, Serialize, Clone, Debug)]\n+#[derive(Default, Deserialize, Serialize, Clone, Debug, PartialEq)]\n pub struct IgnoreList(HashSet<PathBuf>);\n \n impl IgnoreList {"}, {"sha": "233055a067e58cb1f86fe25fcf6b42fd2f91d38c", "filename": "src/test/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a25a1177c86541071932a9e578819c7ae33d5a/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=f7a25a1177c86541071932a9e578819c7ae33d5a", "patch": "@@ -363,6 +363,9 @@ fn read_config(filename: &Path) -> Config {\n     for (key, val) in &sig_comments {\n         if key != \"target\" && key != \"config\" {\n             config.override_value(key, val);\n+            if config.is_default(key) {\n+                warn!(\"Default value {} used explicitly for {}\", val, key);\n+            }\n         }\n     }\n "}]}