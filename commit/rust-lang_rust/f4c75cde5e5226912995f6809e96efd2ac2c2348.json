{"sha": "f4c75cde5e5226912995f6809e96efd2ac2c2348", "node_id": "C_kwDOAAsO6NoAKGY0Yzc1Y2RlNWU1MjI2OTEyOTk1ZjY4MDllOTZlZmQyYWMyYzIzNDg", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-07-13T09:26:24Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:10Z"}, "message": "Fix `any()` not taking reference in `search_is_some` lint", "tree": {"sha": "ff747eeb07a9cd754d1c7394f179368a09129c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff747eeb07a9cd754d1c7394f179368a09129c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c75cde5e5226912995f6809e96efd2ac2c2348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c75cde5e5226912995f6809e96efd2ac2c2348", "html_url": "https://github.com/rust-lang/rust/commit/f4c75cde5e5226912995f6809e96efd2ac2c2348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c75cde5e5226912995f6809e96efd2ac2c2348/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38bd2514ad7d039f6836b0a05dda4dc5f0849942", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd2514ad7d039f6836b0a05dda4dc5f0849942", "html_url": "https://github.com/rust-lang/rust/commit/38bd2514ad7d039f6836b0a05dda4dc5f0849942"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "42a0a09f38540da714f5eed963f6b265bdc640bd", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4c75cde5e5226912995f6809e96efd2ac2c2348/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c75cde5e5226912995f6809e96efd2ac2c2348/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=f4c75cde5e5226912995f6809e96efd2ac2c2348", "patch": "@@ -45,9 +45,27 @@ pub(super) fn check<'tcx>(\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {\n                         Some(search_snippet.replacen('&', \"\", 1))\n-                    } else if let PatKind::Binding(_, _, ident, _) = strip_pat_refs(closure_arg.pat).kind {\n+                    } else if let PatKind::Binding(annotation, _, ident, _) = strip_pat_refs(closure_arg.pat).kind {\n                         let name = &*ident.name.as_str();\n-                        Some(search_snippet.replace(&format!(\"*{}\", name), name))\n+                        let old_search_snippet = search_snippet.clone();\n+                        let search_snippet = search_snippet.replace(&format!(\"*{}\", name), name);\n+\n+                        if_chain! {\n+                            // if there is no dereferencing used in closure body\n+                            if old_search_snippet == search_snippet;\n+                            if annotation == hir::BindingAnnotation::Unannotated;\n+                            if let ty::Ref(_, inner_ty, _) = cx.typeck_results().node_type(closure_arg.hir_id).kind();\n+                            if let ty::Ref(..) = inner_ty.kind();\n+                            // put an `&` in the closure body, but skip closure params\n+                            if let Some((start, end)) = old_search_snippet.split_once(&name);\n+\n+                            then {\n+                                let end = end.replace(name, &format!(\"&{}\", name));\n+                                Some(format!(\"{}{}{}\", start, name, end))\n+                            } else {\n+                                Some(search_snippet)\n+                            }\n+                        }\n                     } else {\n                         None\n                     }"}, {"sha": "029f557ffa62b3420dd71eeef03b284669561363", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=f4c75cde5e5226912995f6809e96efd2ac2c2348", "patch": "@@ -66,3 +66,38 @@ fn is_none() {\n     let _ = !s1[2..].contains(&s2);\n     let _ = !s1[2..].contains(&s2[2..]);\n }\n+\n+#[allow(clippy::clone_on_copy, clippy::map_clone)]\n+mod issue7392 {\n+    struct Player {\n+        hand: Vec<usize>,\n+    }\n+    fn filter() {\n+        let p = Player {\n+            hand: vec![1, 2, 3, 4, 5],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|c| !filter_hand.iter().any(|cc| c == &cc))\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+\n+    struct PlayerTuple {\n+        hand: Vec<(usize, char)>,\n+    }\n+    fn filter_tuple() {\n+        let p = PlayerTuple {\n+            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|(c, _)| !filter_hand.iter().any(|cc| c == cc))\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+}"}, {"sha": "b8f8fe3d3c19243985993e654698a59a2d4edf17", "filename": "tests/ui/search_is_some_fixable.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=f4c75cde5e5226912995f6809e96efd2ac2c2348", "patch": "@@ -66,3 +66,38 @@ fn is_none() {\n     let _ = s1[2..].find(&s2).is_none();\n     let _ = s1[2..].find(&s2[2..]).is_none();\n }\n+\n+#[allow(clippy::clone_on_copy, clippy::map_clone)]\n+mod issue7392 {\n+    struct Player {\n+        hand: Vec<usize>,\n+    }\n+    fn filter() {\n+        let p = Player {\n+            hand: vec![1, 2, 3, 4, 5],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+\n+    struct PlayerTuple {\n+        hand: Vec<(usize, char)>,\n+    }\n+    fn filter_tuple() {\n+        let p = PlayerTuple {\n+            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+}"}, {"sha": "0d92722229c3ec75aeb094795316f1da6fb03bae", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4c75cde5e5226912995f6809e96efd2ac2c2348/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=f4c75cde5e5226912995f6809e96efd2ac2c2348", "patch": "@@ -180,5 +180,17 @@ error: called `is_none()` after calling `find()` on a string\n LL |     let _ = s1[2..].find(&s2[2..]).is_none();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2[2..])`\n \n-error: aborting due to 30 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:83:25\n+   |\n+LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == &cc)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:99:30\n+   |\n+LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == cc)`\n+\n+error: aborting due to 32 previous errors\n "}]}