{"sha": "a115fea88472e00e69424ddc1b7c65840f120f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTVmZWE4ODQ3MmUwMGU2OTQyNGRkYzFiN2M2NTg0MGYxMjBmNmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T07:24:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T07:24:17Z"}, "message": "Rollup merge of #58407 - euclio:upper-camel-case, r=estebank\n\nspecify \"upper camel case\" in style lint\n\nAlso, fix an issue where internal upper case letters were converted to\nlower case.\n\nFixes #57319.", "tree": {"sha": "ba31860e9e44f9ae838283e6a81bb56fa520d0cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba31860e9e44f9ae838283e6a81bb56fa520d0cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a115fea88472e00e69424ddc1b7c65840f120f6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZRehCRBK7hj4Ov3rIwAAdHIIAEr1cN6vZL+sASpyjXmmXtdw\nA5hBFR3QHwtQArZM1SYJYO1O9rrNvVfhjP54iKw2Nj6uN5ZFhISvQ8X2QXAy4DTf\njCKoB6Hec1TW9pjEyIpmvLOpXcoRUx0iWE/UxOXi/kCC5eWCQaZ/8we/vSmfAW99\nfZiW72DfD4RdGF9+ynyGB429a/OsLa85Gyb1au/1ULaiCz3Uzc0hyhMxhEnih43M\nF2+0i2TuS9sMxQdyDnlkD4EXva3uWIyJtIGzPLT0Wxl4ByW5PD26qSMEQNdxppe1\nzX8IWO9g0+9rpYrWAxUChuEhwXhUtYIgLp6sgJkvoF7pWrRDXUlZFWOM9P+wO9I=\n=Omdi\n-----END PGP SIGNATURE-----\n", "payload": "tree ba31860e9e44f9ae838283e6a81bb56fa520d0cf\nparent 2a539a1b91c5ac17e6445d23e49c3f69d50d1ab6\nparent 2f95299f6bf87a7b23381cda954570e72c80c159\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550129057 +0100\ncommitter GitHub <noreply@github.com> 1550129057 +0100\n\nRollup merge of #58407 - euclio:upper-camel-case, r=estebank\n\nspecify \"upper camel case\" in style lint\n\nAlso, fix an issue where internal upper case letters were converted to\nlower case.\n\nFixes #57319.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a115fea88472e00e69424ddc1b7c65840f120f6c", "html_url": "https://github.com/rust-lang/rust/commit/a115fea88472e00e69424ddc1b7c65840f120f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a115fea88472e00e69424ddc1b7c65840f120f6c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a539a1b91c5ac17e6445d23e49c3f69d50d1ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a539a1b91c5ac17e6445d23e49c3f69d50d1ab6", "html_url": "https://github.com/rust-lang/rust/commit/2a539a1b91c5ac17e6445d23e49c3f69d50d1ab6"}, {"sha": "2f95299f6bf87a7b23381cda954570e72c80c159", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f95299f6bf87a7b23381cda954570e72c80c159", "html_url": "https://github.com/rust-lang/rust/commit/2f95299f6bf87a7b23381cda954570e72c80c159"}], "stats": {"total": 265, "additions": 139, "deletions": 126}, "files": [{"sha": "fd2b635faefb406d85b78b39db156fc1a85d3e22", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -8,7 +8,6 @@ edition = \"2018\"\n name = \"rustc_lint\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n-test = false\n \n [dependencies]\n log = \"0.4\""}, {"sha": "c2dd9a3d1b84f0aa2d7bdb1b543c124c9a9bfef4", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 95, "deletions": 53, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -38,66 +38,87 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct NonCamelCaseTypes;\n+fn char_has_case(c: char) -> bool {\n+    c.is_lowercase() || c.is_uppercase()\n+}\n \n-impl NonCamelCaseTypes {\n-    fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n-        fn char_has_case(c: char) -> bool {\n-            c.is_lowercase() || c.is_uppercase()\n-        }\n+fn is_camel_case(name: &str) -> bool {\n+    let name = name.trim_matches('_');\n+    if name.is_empty() {\n+        return true;\n+    }\n \n-        fn is_camel_case(name: &str) -> bool {\n-            let name = name.trim_matches('_');\n-            if name.is_empty() {\n-                return true;\n+    // start with a non-lowercase letter rather than non-uppercase\n+    // ones (some scripts don't have a concept of upper/lowercase)\n+    !name.chars().next().unwrap().is_lowercase()\n+        && !name.contains(\"__\")\n+        && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n+            // contains a capitalisable character followed by, or preceded by, an underscore\n+            char_has_case(pair[0]) && pair[1] == '_' || char_has_case(pair[1]) && pair[0] == '_'\n+        })\n+}\n+\n+fn to_camel_case(s: &str) -> String {\n+    s.trim_matches('_')\n+        .split('_')\n+        .filter(|component| !component.is_empty())\n+        .map(|component| {\n+            let mut camel_cased_component = String::new();\n+\n+            let mut new_word = true;\n+            let mut prev_is_lower_case = true;\n+\n+            for c in component.chars() {\n+                // Preserve the case if an uppercase letter follows a lowercase letter, so that\n+                // `camelCase` is converted to `CamelCase`.\n+                if prev_is_lower_case && c.is_uppercase() {\n+                    new_word = true;\n+                }\n+\n+                if new_word {\n+                    camel_cased_component.push_str(&c.to_uppercase().to_string());\n+                } else {\n+                    camel_cased_component.push_str(&c.to_lowercase().to_string());\n+                }\n+\n+                prev_is_lower_case = c.is_lowercase();\n+                new_word = false;\n             }\n \n-            // start with a non-lowercase letter rather than non-uppercase\n-            // ones (some scripts don't have a concept of upper/lowercase)\n-            !name.is_empty() && !name.chars().next().unwrap().is_lowercase() &&\n-                !name.contains(\"__\") && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n-                    // contains a capitalisable character followed by, or preceded by, an underscore\n-                    char_has_case(pair[0]) && pair[1] == '_' ||\n-                    char_has_case(pair[1]) && pair[0] == '_'\n-                })\n-        }\n+            camel_cased_component\n+        })\n+        .fold(\n+            (String::new(), None),\n+            |(acc, prev): (String, Option<String>), next| {\n+                // separate two components with an underscore if their boundary cannot\n+                // be distinguished using a uppercase/lowercase case distinction\n+                let join = if let Some(prev) = prev {\n+                    let l = prev.chars().last().unwrap();\n+                    let f = next.chars().next().unwrap();\n+                    !char_has_case(l) && !char_has_case(f)\n+                } else {\n+                    false\n+                };\n+                (acc + if join { \"_\" } else { \"\" } + &next, Some(next))\n+            },\n+        )\n+        .0\n+}\n \n-        fn to_camel_case(s: &str) -> String {\n-            s.trim_matches('_')\n-                .split('_')\n-                .map(|word| {\n-                    word.chars().enumerate().map(|(i, c)| if i == 0 {\n-                        c.to_uppercase().collect::<String>()\n-                    } else {\n-                        c.to_lowercase().collect()\n-                    })\n-                    .collect::<String>()\n-                })\n-                .filter(|x| !x.is_empty())\n-                .fold((String::new(), None), |(acc, prev): (String, Option<String>), next| {\n-                    // separate two components with an underscore if their boundary cannot\n-                    // be distinguished using a uppercase/lowercase case distinction\n-                    let join = if let Some(prev) = prev {\n-                                    let l = prev.chars().last().unwrap();\n-                                    let f = next.chars().next().unwrap();\n-                                    !char_has_case(l) && !char_has_case(f)\n-                                } else { false };\n-                    (acc + if join { \"_\" } else { \"\" } + &next, Some(next))\n-                }).0\n-        }\n+#[derive(Copy, Clone)]\n+pub struct NonCamelCaseTypes;\n \n+impl NonCamelCaseTypes {\n+    fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n         let name = &ident.name.as_str();\n \n         if !is_camel_case(name) {\n-            let c = to_camel_case(name);\n-\n-            let msg = format!(\"{} `{}` should have a camel case name\", sort, name);\n+            let msg = format!(\"{} `{}` should have an upper camel case name\", sort, name);\n             cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, &msg)\n                 .span_suggestion(\n                     ident.span,\n-                    \"convert the identifier to camel case\",\n-                    c,\n+                    \"convert the identifier to upper camel case\",\n+                    to_camel_case(name),\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n@@ -119,11 +140,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         let has_repr_c = it.attrs\n             .iter()\n-            .any(|attr| {\n-                attr::find_repr_attrs(&cx.sess.parse_sess, attr)\n-                    .iter()\n-                    .any(|r| r == &attr::ReprC)\n-            });\n+            .any(|attr| attr::find_repr_attrs(&cx.sess.parse_sess, attr).contains(&attr::ReprC));\n \n         if has_repr_c {\n             return;\n@@ -439,3 +456,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{is_camel_case, to_camel_case};\n+\n+    #[test]\n+    fn camel_case() {\n+        assert!(!is_camel_case(\"userData\"));\n+        assert_eq!(to_camel_case(\"userData\"), \"UserData\");\n+\n+        assert!(is_camel_case(\"X86_64\"));\n+\n+        assert!(!is_camel_case(\"X86__64\"));\n+        assert_eq!(to_camel_case(\"X86__64\"), \"X86_64\");\n+\n+        assert!(!is_camel_case(\"Abc_123\"));\n+        assert_eq!(to_camel_case(\"Abc_123\"), \"Abc123\");\n+\n+        assert!(!is_camel_case(\"A1_b2_c3\"));\n+        assert_eq!(to_camel_case(\"A1_b2_c3\"), \"A1B2C3\");\n+\n+        assert!(!is_camel_case(\"ONE_TWO_THREE\"));\n+        assert_eq!(to_camel_case(\"ONE_TWO_THREE\"), \"OneTwoThree\");\n+    }\n+}"}, {"sha": "bd7f327bc0f63de1e840f8e35995f77ccc1dd6bd", "filename": "src/test/ui/lint/lint-group-nonstandard-style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.rs?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -19,7 +19,7 @@ mod test {\n \n         fn CamelCase() {} //~ WARN should have a snake\n \n-        struct snake_case; //~ WARN should have a camel\n+        struct snake_case; //~ WARN should have an upper camel\n     }\n }\n "}, {"sha": "ab36cda57ec80527374c5fcbc358c78971c6ec36", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -1,8 +1,8 @@\n-warning: type `snake_case` should have a camel case name\n+warning: type `snake_case` should have an upper camel case name\n   --> $DIR/lint-group-nonstandard-style.rs:22:16\n    |\n-LL |         struct snake_case; //~ WARN should have a camel\n-   |                ^^^^^^^^^^ help: convert the identifier to camel case: `SnakeCase`\n+LL |         struct snake_case; //~ WARN should have an upper camel\n+   |                ^^^^^^^^^^ help: convert the identifier to upper camel case: `SnakeCase`\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:18:17"}, {"sha": "d3b119a944109d59a56178ab38cc635b72bffe0b", "filename": "src/test/ui/lint/lint-non-camel-case-types.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.rs?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -2,43 +2,35 @@\n #![allow(dead_code)]\n \n struct ONE_TWO_THREE;\n-//~^ ERROR type `ONE_TWO_THREE` should have a camel case name\n+//~^ ERROR type `ONE_TWO_THREE` should have an upper camel case name\n \n-struct foo { //~ ERROR type `foo` should have a camel case name\n+struct foo { //~ ERROR type `foo` should have an upper camel case name\n     bar: isize,\n }\n \n-enum foo2 { //~ ERROR type `foo2` should have a camel case name\n+enum foo2 { //~ ERROR type `foo2` should have an upper camel case name\n     Bar\n }\n \n-struct foo3 { //~ ERROR type `foo3` should have a camel case name\n+struct foo3 { //~ ERROR type `foo3` should have an upper camel case name\n     bar: isize\n }\n \n-type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n+type foo4 = isize; //~ ERROR type `foo4` should have an upper camel case name\n \n enum Foo5 {\n-    bar //~ ERROR variant `bar` should have a camel case name\n+    bar //~ ERROR variant `bar` should have an upper camel case name\n }\n \n-trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n+trait foo6 { //~ ERROR trait `foo6` should have an upper camel case name\n     fn dummy(&self) { }\n }\n \n-fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n+fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have an upper camel case name\n \n #[repr(C)]\n struct foo7 {\n     bar: isize,\n }\n \n-struct X86_64;\n-\n-struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n-\n-struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n-\n-struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n-\n fn main() { }"}, {"sha": "7afacf64d8778589e654f664d89b49d1ac3c39f7", "filename": "src/test/ui/lint/lint-non-camel-case-types.stderr", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-camel-case-types.stderr?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -1,74 +1,56 @@\n-error: type `ONE_TWO_THREE` should have a camel case name\n+error: type `ONE_TWO_THREE` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:4:8\n    |\n LL | struct ONE_TWO_THREE;\n-   |        ^^^^^^^^^^^^^ help: convert the identifier to camel case: `OneTwoThree`\n+   |        ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `OneTwoThree`\n    |\n note: lint level defined here\n   --> $DIR/lint-non-camel-case-types.rs:1:11\n    |\n LL | #![forbid(non_camel_case_types)]\n    |           ^^^^^^^^^^^^^^^^^^^^\n \n-error: type `foo` should have a camel case name\n+error: type `foo` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:7:8\n    |\n-LL | struct foo { //~ ERROR type `foo` should have a camel case name\n-   |        ^^^ help: convert the identifier to camel case: `Foo`\n+LL | struct foo { //~ ERROR type `foo` should have an upper camel case name\n+   |        ^^^ help: convert the identifier to upper camel case: `Foo`\n \n-error: type `foo2` should have a camel case name\n+error: type `foo2` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:11:6\n    |\n-LL | enum foo2 { //~ ERROR type `foo2` should have a camel case name\n-   |      ^^^^ help: convert the identifier to camel case: `Foo2`\n+LL | enum foo2 { //~ ERROR type `foo2` should have an upper camel case name\n+   |      ^^^^ help: convert the identifier to upper camel case: `Foo2`\n \n-error: type `foo3` should have a camel case name\n+error: type `foo3` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:15:8\n    |\n-LL | struct foo3 { //~ ERROR type `foo3` should have a camel case name\n-   |        ^^^^ help: convert the identifier to camel case: `Foo3`\n+LL | struct foo3 { //~ ERROR type `foo3` should have an upper camel case name\n+   |        ^^^^ help: convert the identifier to upper camel case: `Foo3`\n \n-error: type `foo4` should have a camel case name\n+error: type `foo4` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:19:6\n    |\n-LL | type foo4 = isize; //~ ERROR type `foo4` should have a camel case name\n-   |      ^^^^ help: convert the identifier to camel case: `Foo4`\n+LL | type foo4 = isize; //~ ERROR type `foo4` should have an upper camel case name\n+   |      ^^^^ help: convert the identifier to upper camel case: `Foo4`\n \n-error: variant `bar` should have a camel case name\n+error: variant `bar` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:22:5\n    |\n-LL |     bar //~ ERROR variant `bar` should have a camel case name\n-   |     ^^^ help: convert the identifier to camel case: `Bar`\n+LL |     bar //~ ERROR variant `bar` should have an upper camel case name\n+   |     ^^^ help: convert the identifier to upper camel case: `Bar`\n \n-error: trait `foo6` should have a camel case name\n+error: trait `foo6` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:25:7\n    |\n-LL | trait foo6 { //~ ERROR trait `foo6` should have a camel case name\n-   |       ^^^^ help: convert the identifier to camel case: `Foo6`\n+LL | trait foo6 { //~ ERROR trait `foo6` should have an upper camel case name\n+   |       ^^^^ help: convert the identifier to upper camel case: `Foo6`\n \n-error: type parameter `ty` should have a camel case name\n+error: type parameter `ty` should have an upper camel case name\n   --> $DIR/lint-non-camel-case-types.rs:29:6\n    |\n-LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name\n-   |      ^^ help: convert the identifier to camel case: `Ty`\n+LL | fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have an upper camel case name\n+   |      ^^ help: convert the identifier to upper camel case: `Ty`\n \n-error: type `X86__64` should have a camel case name\n-  --> $DIR/lint-non-camel-case-types.rs:38:8\n-   |\n-LL | struct X86__64; //~ ERROR type `X86__64` should have a camel case name\n-   |        ^^^^^^^ help: convert the identifier to camel case: `X86_64`\n-\n-error: type `Abc_123` should have a camel case name\n-  --> $DIR/lint-non-camel-case-types.rs:40:8\n-   |\n-LL | struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name\n-   |        ^^^^^^^ help: convert the identifier to camel case: `Abc123`\n-\n-error: type `A1_b2_c3` should have a camel case name\n-  --> $DIR/lint-non-camel-case-types.rs:42:8\n-   |\n-LL | struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name\n-   |        ^^^^^^^^ help: convert the identifier to camel case: `A1B2C3`\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "f59d5502aae30b3c98053b2e371ae910b87651a9", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -1,9 +1,7 @@\n-//\n-\n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-       //~^ WARN type parameter `\u03b3` should have a camel case name\n+       //~^ WARN type parameter `\u03b3` should have an upper camel case name\n >() {}\n \n struct X {"}, {"sha": "52fb607af5b2573359ca9bb0e76a1168811a56ce", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a115fea88472e00e69424ddc1b7c65840f120f6c/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=a115fea88472e00e69424ddc1b7c65840f120f6c", "patch": "@@ -1,40 +1,40 @@\n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:4:5\n+  --> $DIR/utf8_idents.rs:2:5\n    |\n LL |     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n    |     ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:5:5\n+  --> $DIR/utf8_idents.rs:3:5\n    |\n LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n    |     ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:10:5\n+  --> $DIR/utf8_idents.rs:8:5\n    |\n LL |     \u03b4: usize //~ ERROR non-ascii idents are not fully supported\n    |     ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n-  --> $DIR/utf8_idents.rs:14:9\n+  --> $DIR/utf8_idents.rs:12:9\n    |\n LL |     let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n    |         ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-warning: type parameter `\u03b3` should have a camel case name\n-  --> $DIR/utf8_idents.rs:5:5\n+warning: type parameter `\u03b3` should have an upper camel case name\n+  --> $DIR/utf8_idents.rs:3:5\n    |\n LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n-   |     ^ help: convert the identifier to camel case: `\u0393`\n+   |     ^ help: convert the identifier to upper camel case: `\u0393`\n    |\n    = note: #[warn(non_camel_case_types)] on by default\n "}]}