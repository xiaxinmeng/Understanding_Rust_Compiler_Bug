{"sha": "b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTI5ZDExYWVhNGI0OTdiOGY1M2IxMWE1OTVhOGNiYzU1YzlmMWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-29T23:55:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-02T09:31:25Z"}, "message": "watch out for krate numbers being reassigned\n\nThe biggest problem, actually, is krate numbers being removed entirely,\nwhich can lead to array-index-out-of-bounds errors.\n\ncc #35123 -- not a complete fix, since really we ought to \"map\" the old\ncrate numbers to the new ones, not just detect changes.", "tree": {"sha": "29e8b355f56fdca9cf9034b3dede58dd0c7cd1f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e8b355f56fdca9cf9034b3dede58dd0c7cd1f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "html_url": "https://github.com/rust-lang/rust/commit/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56eb4b7f5206f157aa200e8424f697791990d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56eb4b7f5206f157aa200e8424f697791990d27", "html_url": "https://github.com/rust-lang/rust/commit/c56eb4b7f5206f157aa200e8424f697791990d27"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "332eeae7202e36a0d9eb8dc090cfc32ea0ed2b10", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "patch": "@@ -16,9 +16,12 @@\n use rustc::dep_graph::DepNode;\n use rustc::hir::map::DefPath;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::ty::TyCtxt;\n use rustc::util::nodemap::DefIdMap;\n use std::fmt::{self, Debug};\n+use std::iter::once;\n+use syntax::ast;\n \n /// Index into the DefIdDirectory\n #[derive(Copy, Clone, Debug, PartialOrd, Ord, Hash, PartialEq, Eq,\n@@ -31,17 +34,66 @@ pub struct DefPathIndex {\n pub struct DefIdDirectory {\n     // N.B. don't use Removable here because these def-ids are loaded\n     // directly without remapping, so loading them should not fail.\n-    paths: Vec<DefPath>\n+    paths: Vec<DefPath>,\n+\n+    // For each crate, saves the crate-name/disambiguator so that\n+    // later we can match crate-numbers up again.\n+    krates: Vec<KrateInfo>,\n+}\n+\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n+pub struct KrateInfo {\n+    krate: ast::CrateNum,\n+    name: String,\n+    disambiguator: String,\n }\n \n impl DefIdDirectory {\n-    pub fn new() -> DefIdDirectory {\n-        DefIdDirectory { paths: vec![] }\n+    pub fn new(krates: Vec<KrateInfo>) -> DefIdDirectory {\n+        DefIdDirectory { paths: vec![], krates: krates }\n+    }\n+\n+    pub fn krate_still_valid(&self,\n+                             tcx: TyCtxt,\n+                             max_current_crate: ast::CrateNum,\n+                             krate: ast::CrateNum) -> bool {\n+        // Check that the crate-number still matches. For now, if it\n+        // doesn't, just return None. We could do better, such as\n+        // finding the new number.\n+\n+        if krate > max_current_crate {\n+            false\n+        } else {\n+            let old_info = &self.krates[krate as usize];\n+            assert_eq!(old_info.krate, krate);\n+            let old_name: &str = &old_info.name;\n+            let old_disambiguator: &str = &old_info.disambiguator;\n+            let new_name: &str = &tcx.crate_name(krate);\n+            let new_disambiguator: &str = &tcx.crate_disambiguator(krate);\n+            old_name == new_name && old_disambiguator == new_disambiguator\n+        }\n     }\n \n     pub fn retrace(&self, tcx: TyCtxt) -> RetracedDefIdDirectory {\n+        let max_current_crate =\n+            tcx.sess.cstore.crates()\n+                           .into_iter()\n+                           .max()\n+                           .unwrap_or(LOCAL_CRATE);\n+\n         let ids = self.paths.iter()\n-                            .map(|path| tcx.retrace_path(path))\n+                            .map(|path| {\n+                                if self.krate_still_valid(tcx, max_current_crate, path.krate) {\n+                                    tcx.retrace_path(path)\n+                                } else {\n+                                    debug!(\"crate {} changed from {:?} to {:?}/{:?}\",\n+                                           path.krate,\n+                                           self.krates[path.krate as usize],\n+                                           tcx.crate_name(path.krate),\n+                                           tcx.crate_disambiguator(path.krate));\n+                                    None\n+                                }\n+                            })\n                             .collect();\n         RetracedDefIdDirectory { ids: ids }\n     }\n@@ -70,10 +122,26 @@ pub struct DefIdDirectoryBuilder<'a,'tcx:'a> {\n \n impl<'a,'tcx> DefIdDirectoryBuilder<'a,'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> DefIdDirectoryBuilder<'a, 'tcx> {\n+        let mut krates: Vec<_> =\n+            once(LOCAL_CRATE)\n+            .chain(tcx.sess.cstore.crates())\n+            .map(|krate| {\n+                KrateInfo {\n+                    krate: krate,\n+                    name: tcx.crate_name(krate).to_string(),\n+                    disambiguator: tcx.crate_disambiguator(krate).to_string()\n+                }\n+            })\n+            .collect();\n+\n+        // the result of crates() is not in order, so sort list of\n+        // crates so that we can just index it later\n+        krates.sort_by_key(|k| k.krate);\n+\n         DefIdDirectoryBuilder {\n             tcx: tcx,\n             hash: DefIdMap(),\n-            directory: DefIdDirectory::new()\n+            directory: DefIdDirectory::new(krates),\n         }\n     }\n "}, {"sha": "865156095a4d45d323733e9554643a661acc4077", "filename": "src/test/incremental/krate_reassign_34991/auxiliary/a.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fauxiliary%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fauxiliary%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fauxiliary%2Fa.rs?ref=b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+pub type X = u32;\n+"}, {"sha": "1c807059ddbe6100d09c1e9a361d5289d5a2aab0", "filename": "src/test/incremental/krate_reassign_34991/main.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4929d11aea4b497b8f53b11a595a8cbc55c9f1e/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate_reassign_34991%2Fmain.rs?ref=b4929d11aea4b497b8f53b11a595a8cbc55c9f1e", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:a.rs\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+extern crate a;\n+\n+#[cfg(rpass1)]\n+pub fn use_X() -> u32 {\n+    let x: a::X = 22;\n+    x as u32\n+}\n+\n+#[cfg(rpass2)]\n+pub fn use_X() -> u32 {\n+    22\n+}\n+\n+pub fn main() { }"}]}