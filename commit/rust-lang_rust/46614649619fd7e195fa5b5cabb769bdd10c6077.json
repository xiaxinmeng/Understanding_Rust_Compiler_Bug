{"sha": "46614649619fd7e195fa5b5cabb769bdd10c6077", "node_id": "C_kwDOAAsO6NoAKDQ2NjE0NjQ5NjE5ZmQ3ZTE5NWZhNWI1Y2FiYjc2OWJkZDEwYzYwNzc", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T01:05:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T01:05:26Z"}, "message": "Rollup merge of #89370 - RalfJung:ctfe-aggregate-rvalue, r=oli-obk\n\nCTFE: tweak aggregate rvalue handling\n\nI have not looked at this code in ages... I think Miri does not even hit it, since (most?) aggregate rvalues are lowered somewhere in the MIR pipeline, but CTFE does hit it.\n\nSo this adds some extra sanity assertions, and removes a ZST special case -- ZST should only be special cased fairly late (when the actual memory access happens); e.g. `!` is a ZST and we still want `copy_op` to be called for it since it will perform validation (and raise UB, since `!` is never valid).", "tree": {"sha": "df34a50a2be232959940c8c3f4bc8cd50ca5d17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df34a50a2be232959940c8c3f4bc8cd50ca5d17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46614649619fd7e195fa5b5cabb769bdd10c6077", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVl7WCRBK7hj4Ov3rIwAA+iIIAHIzZxfvxl+LjsbfhyWla1O7\naYZKvXuVCc0+t04Gki6mQZMvyXHOq4H3HNtsv+AN0L9Tfz2keHmYvQjpPyShEYrp\nwLvz4CovI4M51geyeodlbji+hfsjp60i7yojSb2gHOgcin26lnCN4NzXBHnWWOWT\no1BpxRez7mS1dO8T3NalUS4WV73nX78dLo7p8gTl+wlHA2byJl1MBtFKS9VPKV6g\ntw9ICDXPxZHGmZLNTRk4PqsKUhaN3S1ws3yEaW1WqSKEwgPFA756mypqI8dFB0IP\nQgROHESXIsOnmw2xIcad6VVWSJ3i7hP7uqN41OMBVWoXt389C+70ROTv0ZwMS1c=\n=hfU1\n-----END PGP SIGNATURE-----\n", "payload": "tree df34a50a2be232959940c8c3f4bc8cd50ca5d17e\nparent fbc67b59a12adc84642989e6f736cdfd2737a47c\nparent 268bb46db29299d8946cafdc70d8c1eaf2756106\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633050326 -0700\ncommitter GitHub <noreply@github.com> 1633050326 -0700\n\nRollup merge of #89370 - RalfJung:ctfe-aggregate-rvalue, r=oli-obk\n\nCTFE: tweak aggregate rvalue handling\n\nI have not looked at this code in ages... I think Miri does not even hit it, since (most?) aggregate rvalues are lowered somewhere in the MIR pipeline, but CTFE does hit it.\n\nSo this adds some extra sanity assertions, and removes a ZST special case -- ZST should only be special cased fairly late (when the actual memory access happens); e.g. `!` is a ZST and we still want `copy_op` to be called for it since it will perform validation (and raise UB, since `!` is never valid).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46614649619fd7e195fa5b5cabb769bdd10c6077", "html_url": "https://github.com/rust-lang/rust/commit/46614649619fd7e195fa5b5cabb769bdd10c6077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46614649619fd7e195fa5b5cabb769bdd10c6077/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc67b59a12adc84642989e6f736cdfd2737a47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc67b59a12adc84642989e6f736cdfd2737a47c", "html_url": "https://github.com/rust-lang/rust/commit/fbc67b59a12adc84642989e6f736cdfd2737a47c"}, {"sha": "268bb46db29299d8946cafdc70d8c1eaf2756106", "url": "https://api.github.com/repos/rust-lang/rust/commits/268bb46db29299d8946cafdc70d8c1eaf2756106", "html_url": "https://github.com/rust-lang/rust/commit/268bb46db29299d8946cafdc70d8c1eaf2756106"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "e6037d561dedcb5228ed84e93e524df136f17551", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46614649619fd7e195fa5b5cabb769bdd10c6077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46614649619fd7e195fa5b5cabb769bdd10c6077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=46614649619fd7e195fa5b5cabb769bdd10c6077", "patch": "@@ -197,12 +197,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(ref kind, ref operands) => {\n+                // active_field_index is for union initialization.\n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant(variant_index, &dest)?;\n                         if adt_def.is_enum() {\n-                            (self.place_downcast(&dest, variant_index)?, active_field_index)\n+                            assert!(active_field_index.is_none());\n+                            (self.place_downcast(&dest, variant_index)?, None)\n                         } else {\n+                            if active_field_index.is_some() {\n+                                assert_eq!(operands.len(), 1);\n+                            }\n                             (dest, active_field_index)\n                         }\n                     }\n@@ -211,12 +216,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 for (i, operand) in operands.iter().enumerate() {\n                     let op = self.eval_operand(operand, None)?;\n-                    // Ignore zero-sized fields.\n-                    if !op.layout.is_zst() {\n-                        let field_index = active_field_index.unwrap_or(i);\n-                        let field_dest = self.place_field(&dest, field_index)?;\n-                        self.copy_op(&op, &field_dest)?;\n-                    }\n+                    let field_index = active_field_index.unwrap_or(i);\n+                    let field_dest = self.place_field(&dest, field_index)?;\n+                    self.copy_op(&op, &field_dest)?;\n                 }\n             }\n \n@@ -253,7 +255,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Len(place) => {\n-                // FIXME(CTFE): don't allow computing the length of arrays in const eval\n                 let src = self.eval_place(place)?;\n                 let mplace = self.force_allocation(&src)?;\n                 let len = mplace.len(self)?;"}]}