{"sha": "7ba51fa05b2e9406e753306c4dafe6bd34988310", "node_id": "C_kwDOAAsO6NoAKDdiYTUxZmEwNWIyZTk0MDZlNzUzMzA2YzRkYWZlNmJkMzQ5ODgzMTA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T00:19:57Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-05T01:13:46Z"}, "message": "rustdoc: use `collect()` instead of repeatedly pushing to bindings", "tree": {"sha": "8f3766b91d86e069f582672b8a500fc0577e6bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3766b91d86e069f582672b8a500fc0577e6bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba51fa05b2e9406e753306c4dafe6bd34988310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba51fa05b2e9406e753306c4dafe6bd34988310", "html_url": "https://github.com/rust-lang/rust/commit/7ba51fa05b2e9406e753306c4dafe6bd34988310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba51fa05b2e9406e753306c4dafe6bd34988310/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f9d5e73d5524b6281c10a5c89b7db35c330634", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f9d5e73d5524b6281c10a5c89b7db35c330634", "html_url": "https://github.com/rust-lang/rust/commit/f6f9d5e73d5524b6281c10a5c89b7db35c330634"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3e7e4c748ad466ccd1d8334326f03014fa798607", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ba51fa05b2e9406e753306c4dafe6bd34988310/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba51fa05b2e9406e753306c4dafe6bd34988310/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7ba51fa05b2e9406e753306c4dafe6bd34988310", "patch": "@@ -1640,9 +1640,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 bounds.push(bound);\n             }\n \n-            let mut bindings = vec![];\n-            for pb in obj.projection_bounds() {\n-                bindings.push(TypeBinding {\n+            let bindings = obj\n+                .projection_bounds()\n+                .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n                         pb.skip_binder()\n                             .lift_to_tcx(cx.tcx)\n@@ -1656,8 +1656,8 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                     kind: TypeBindingKind::Equality {\n                         term: clean_middle_term(pb.skip_binder().term, cx),\n                     },\n-                });\n-            }\n+                })\n+                .collect();\n \n             let path = external_path(cx, did, false, bindings, substs);\n             bounds.insert(0, PolyTrait { trait_: path, generic_params: Vec::new() });"}]}