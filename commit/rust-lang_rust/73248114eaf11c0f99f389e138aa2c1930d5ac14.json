{"sha": "73248114eaf11c0f99f389e138aa2c1930d5ac14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjQ4MTE0ZWFmMTFjMGY5OWYzODllMTM4YWEyYzE5MzBkNWFjMTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T09:57:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T10:02:03Z"}, "message": "Implement unsize of adt's (cc #14)", "tree": {"sha": "73b35ffd17f08391b4c0e0aa5884a3b1083b4602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73b35ffd17f08391b4c0e0aa5884a3b1083b4602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73248114eaf11c0f99f389e138aa2c1930d5ac14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73248114eaf11c0f99f389e138aa2c1930d5ac14", "html_url": "https://github.com/rust-lang/rust/commit/73248114eaf11c0f99f389e138aa2c1930d5ac14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73248114eaf11c0f99f389e138aa2c1930d5ac14/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b0fc59f95da8872c353380cbfa2cafce8cf0b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b0fc59f95da8872c353380cbfa2cafce8cf0b5", "html_url": "https://github.com/rust-lang/rust/commit/b9b0fc59f95da8872c353380cbfa2cafce8cf0b5"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "8fa27662bdacc3411639cbff334630f0af9d9085", "filename": "examples/mini_core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73248114eaf11c0f99f389e138aa2c1930d5ac14/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73248114eaf11c0f99f389e138aa2c1930d5ac14/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=73248114eaf11c0f99f389e138aa2c1930d5ac14", "patch": "@@ -12,6 +12,7 @@ pub trait Unsize<T: ?Sized> {}\n pub trait CoerceUnsized<T> {}\n \n impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n \n #[lang = \"copy\"]\n pub unsafe trait Copy {}\n@@ -203,7 +204,9 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n }\n \n #[lang = \"owned_box\"]\n-pub struct Box<T>(*mut T);\n+pub struct Box<T: ?Sized>(*mut T);\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n static mut MY_TINY_HEAP: [u8; 16] = [0; 16];\n "}, {"sha": "84651ffd5ff5bf3c3c514d91474b9ae32d868c51", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73248114eaf11c0f99f389e138aa2c1930d5ac14/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73248114eaf11c0f99f389e138aa2c1930d5ac14/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=73248114eaf11c0f99f389e138aa2c1930d5ac14", "patch": "@@ -111,8 +111,9 @@ fn main() {\n         // TODO remove when jit supports linking rlibs\n         #[cfg(not(jit))]\n         {\n-            let world = box \"World!\\0\";\n+            let world: Box<&str> = box \"World!\\0\";\n             puts(*world as *const str as *const u8);\n+            world as Box<SomeTrait>;\n         }\n \n         assert_eq!(intrinsics::size_of_val(hello) as u8, 6);"}, {"sha": "3213a94ba23c62568d161d4f4fbc5e56b61b417c", "filename": "src/common.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/73248114eaf11c0f99f389e138aa2c1930d5ac14/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73248114eaf11c0f99f389e138aa2c1930d5ac14/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=73248114eaf11c0f99f389e138aa2c1930d5ac14", "patch": "@@ -252,7 +252,22 @@ impl<'tcx> CValue<'tcx> {\n                 };\n                 dest.write_cvalue(fx, CValue::ByValPair(ptr, extra, dest.layout()));\n             }\n-            ty => unimpl!(\"unsize of non ptr {:?}\", ty),\n+            _ => {\n+                assert!(!self.layout().ty.is_enum(), \"Tried to unsize enum\");\n+                let field_count = self.layout().fields.count();\n+                let mut found_unsize_field = false;\n+                for idx in 0..field_count {\n+                    let field_dest = dest.place_field(fx, mir::Field::new(idx));\n+                    let field_src = self.value_field(fx, mir::Field::new(idx));\n+                    if field_src.layout().ty != field_dest.layout().ty {\n+                        assert!(!found_unsize_field);\n+                        found_unsize_field = true;\n+                        field_src.unsize_value(fx, field_dest);\n+                    } else {\n+                        field_dest.write_cvalue(fx, field_src);\n+                    }\n+                }\n+            }\n         }\n     }\n "}]}