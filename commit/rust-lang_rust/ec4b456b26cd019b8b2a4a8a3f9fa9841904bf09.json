{"sha": "ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNGI0NTZiMjZjZDAxOWI4YjJhNGE4YTNmOWZhOTg0MTkwNGJmMDk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T13:09:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T15:59:04Z"}, "message": "rustc: Remove the vstore handling of @str and @[].", "tree": {"sha": "31fea04fef0af0ad23812591ade11c7a389f7847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fea04fef0af0ad23812591ade11c7a389f7847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "html_url": "https://github.com/rust-lang/rust/commit/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39cd20a4311f6e1377a01462cda5a89a4e67c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39cd20a4311f6e1377a01462cda5a89a4e67c15", "html_url": "https://github.com/rust-lang/rust/commit/e39cd20a4311f6e1377a01462cda5a89a4e67c15"}], "stats": {"total": 176, "additions": 47, "deletions": 129}, "files": [{"sha": "92af631c2bd3e71a034bc9fcc3feaa63990feccc", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -156,7 +156,6 @@ fn parse_vstore(st: &mut PState, conv: conv_did) -> ty::vstore {\n \n     match next(st) {\n       '~' => ty::vstore_uniq,\n-      '@' => ty::vstore_box,\n       '&' => ty::vstore_slice(parse_region(st, conv)),\n       c => st.tcx.sess.bug(format!(\"parse_vstore(): bad input '{}'\", c))\n     }"}, {"sha": "d17a45165432c089b06d939c7059be6e173a670b", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -219,7 +219,6 @@ pub fn enc_vstore(w: &mut MemWriter, cx: @ctxt, v: ty::vstore) {\n     match v {\n         ty::vstore_fixed(u) => mywrite!(w, \"{}|\", u),\n         ty::vstore_uniq => mywrite!(w, \"~\"),\n-        ty::vstore_box => mywrite!(w, \"@\"),\n         ty::vstore_slice(r) => {\n             mywrite!(w, \"&\");\n             enc_region(w, cx, r);"}, {"sha": "e674af6b3b3e3444254006fc3483a4f9d037b021", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -888,7 +888,6 @@ fn check_heap_type(cx: &Context, span: Span, ty: ty::t) {\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match ty::get(t).sty {\n                 ty::ty_box(_) |\n-                ty::ty_vec(_, ty::vstore_box) |\n                 ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n                     n_box += 1;\n                 }"}, {"sha": "72fd98e56ed6743548907bc974b4d4d5d48ccb09", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -178,7 +178,6 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n         }\n \n         ty::ty_box(_) |\n-        ty::ty_vec(_, ty::vstore_box) |\n         ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n             Some(deref_ptr(gc_ptr))\n         }"}, {"sha": "78affcc69e1138bc26dbe8ef048bdcd21d09f454", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -768,7 +768,6 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n         ty::ty_float(_) => MonoFloat,\n         ty::ty_rptr(..) | ty::ty_uniq(..) | ty::ty_box(..) |\n         ty::ty_str(ty::vstore_uniq) | ty::ty_vec(_, ty::vstore_uniq) |\n-        ty::ty_str(ty::vstore_box) | ty::ty_vec(_, ty::vstore_box) |\n         ty::ty_bare_fn(..) => MonoNonNull,\n         // Is that everything?  Would closures or slices qualify?\n         _ => MonoBits"}, {"sha": "3cdb1c52d3c5beea3fdbd93ed65a222ab4accf01", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -1896,23 +1896,6 @@ fn vec_metadata(cx: &CrateContext,\n         span);\n }\n \n-fn boxed_vec_metadata(cx: &CrateContext,\n-                      element_type: ty::t,\n-                      span: Span)\n-                   -> DICompositeType {\n-    let element_llvm_type = type_of::type_of(cx, element_type);\n-    let vec_llvm_type = Type::vec(cx.sess.targ_cfg.arch, &element_llvm_type);\n-    let vec_type_name: &str = format!(\"[{}]\", ppaux::ty_to_str(cx.tcx, element_type));\n-    let vec_metadata = vec_metadata(cx, element_type, span);\n-\n-    return boxed_type_metadata(\n-        cx,\n-        Some(vec_type_name),\n-        vec_llvm_type,\n-        vec_metadata,\n-        span);\n-}\n-\n fn vec_slice_metadata(cx: &CrateContext,\n                       vec_type: ty::t,\n                       element_type: ty::t,\n@@ -2093,9 +2076,6 @@ fn type_metadata(cx: &CrateContext,\n                     let vec_metadata = vec_metadata(cx, i8_t, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n-                ty::vstore_box => {\n-                    fail!(\"unexpected managed string\")\n-                }\n                 ty::vstore_slice(_region) => {\n                     vec_slice_metadata(cx, t, i8_t, usage_site_span)\n                 }\n@@ -2116,10 +2096,6 @@ fn type_metadata(cx: &CrateContext,\n                     let vec_metadata = vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n-                ty::vstore_box => {\n-                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, usage_site_span);\n-                    pointer_type_metadata(cx, t, boxed_vec_metadata)\n-                }\n                 ty::vstore_slice(_) => {\n                     vec_slice_metadata(cx, t, mt.ty, usage_site_span)\n                 }"}, {"sha": "1bfbb3f99b1999f474b666cdc029d2e6896cf649", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -64,10 +64,7 @@ pub fn take_ty<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n     // NB: v is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"take_ty\");\n     match ty::get(t).sty {\n-        ty::ty_box(_) |\n-        ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) => {\n-            incr_refcnt_of_boxed(bcx, v)\n-        }\n+        ty::ty_box(_) => incr_refcnt_of_boxed(bcx, v),\n         ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n             incr_refcnt_of_boxed(bcx, GEPi(bcx, v, [0u, abi::trt_field_box]))\n         }\n@@ -113,10 +110,6 @@ fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n                 if !ty::type_needs_drop(tcx, typ) =>\n             return ty::mk_box(tcx, ty::mk_nil()),\n \n-            ty::ty_vec(mt, ty::vstore_box)\n-                if !ty::type_needs_drop(tcx, mt.ty) =>\n-            return ty::mk_box(tcx, ty::mk_nil()),\n-\n             ty::ty_uniq(typ)\n                 if !ty::type_needs_drop(tcx, typ) =>\n             return ty::mk_uniq(tcx, ty::mk_nil()),\n@@ -326,11 +319,6 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n         ty::ty_box(body_ty) => {\n             decr_refcnt_maybe_free(bcx, v0, Some(body_ty))\n         }\n-        ty::ty_str(ty::vstore_box) | ty::ty_vec(_, ty::vstore_box) => {\n-            let unit_ty = ty::sequence_element_type(ccx.tcx, t);\n-            let unboxed_vec_ty = ty::mk_mut_unboxed_vec(ccx.tcx, unit_ty);\n-            decr_refcnt_maybe_free(bcx, v0, Some(unboxed_vec_ty))\n-        }\n         ty::ty_uniq(content_ty) => {\n             let llbox = Load(bcx, v0);\n             let not_null = IsNotNull(bcx, llbox);"}, {"sha": "b9d23c47fcdce3518b2dbb5c62bd8570b5b01c0f", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -140,7 +140,6 @@ impl<'a> Reflector<'a> {\n             }\n             ty::vstore_slice(_) => (~\"slice\", ~[]),\n             ty::vstore_uniq => (~\"uniq\", ~[]),\n-            ty::vstore_box => (~\"box\", ~[])\n         }\n     }\n "}, {"sha": "1043ce69ab49f8e772572bf663b10c5810c7b42e", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -44,9 +44,6 @@ pub fn expand_boxed_vec_ty(tcx: ty::ctxt, t: ty::t) -> ty::t {\n         ty::ty_str(ty::vstore_uniq) | ty::ty_vec(_, ty::vstore_uniq) => {\n             ty::mk_uniq(tcx, unboxed_vec_ty)\n         }\n-        ty::ty_str(ty::vstore_box) | ty::ty_vec(_, ty::vstore_box) => {\n-            ty::mk_box(tcx, unboxed_vec_ty)\n-        }\n         _ => tcx.sess.bug(\"non boxed-vec type \\\n                            in tvec::expand_boxed_vec_ty\")\n     }\n@@ -65,21 +62,6 @@ pub fn get_alloc(bcx: &Block, vptr: ValueRef) -> ValueRef {\n     Load(bcx, GEPi(bcx, vptr, [0u, abi::vec_elt_alloc]))\n }\n \n-pub fn get_bodyptr(bcx: &Block, vptr: ValueRef, t: ty::t) -> ValueRef {\n-    let vt = vec_types(bcx, t);\n-\n-    let managed = match ty::get(vt.vec_ty).sty {\n-      ty::ty_str(ty::vstore_box) | ty::ty_vec(_, ty::vstore_box) => true,\n-      _ => false\n-    };\n-\n-    if managed {\n-        GEPi(bcx, vptr, [0u, abi::box_field_body])\n-    } else {\n-        vptr\n-    }\n-}\n-\n pub fn get_dataptr(bcx: &Block, vptr: ValueRef) -> ValueRef {\n     let _icx = push_ctxt(\"tvec::get_dataptr\");\n     GEPi(bcx, vptr, [0u, abi::vec_elt_elems, 0u])\n@@ -381,7 +363,7 @@ pub fn trans_uniq_or_managed_vstore<'a>(bcx: &'a Block<'a>,\n     let temp_scope = fcx.push_custom_cleanup_scope();\n     fcx.schedule_free_value(cleanup::CustomScope(temp_scope), val, heap);\n \n-    let dataptr = get_dataptr(bcx, get_bodyptr(bcx, val, vt.vec_ty));\n+    let dataptr = get_dataptr(bcx, val);\n \n     debug!(\"alloc_vec() returned val={}, dataptr={}\",\n            bcx.val_to_str(val), bcx.val_to_str(dataptr));\n@@ -570,10 +552,9 @@ pub fn get_base_and_byte_len(bcx: &Block,\n             let len = Mul(bcx, count, vt.llunit_size);\n             (base, len)\n         }\n-        ty::vstore_uniq | ty::vstore_box => {\n+        ty::vstore_uniq => {\n             assert!(type_is_immediate(bcx.ccx(), vt.vec_ty));\n-            let llval = Load(bcx, llval);\n-            let body = get_bodyptr(bcx, llval, vec_ty);\n+            let body = Load(bcx, llval);\n             (get_dataptr(bcx, body), get_fill(bcx, body))\n         }\n     }\n@@ -610,10 +591,9 @@ pub fn get_base_and_len(bcx: &Block,\n             let count = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_len]));\n             (base, count)\n         }\n-        ty::vstore_uniq | ty::vstore_box => {\n+        ty::vstore_uniq => {\n             assert!(type_is_immediate(bcx.ccx(), vt.vec_ty));\n-            let llval = Load(bcx, llval);\n-            let body = get_bodyptr(bcx, llval, vec_ty);\n+            let body = Load(bcx, llval);\n             (get_dataptr(bcx, body), UDiv(bcx, get_fill(bcx, body), vt.llunit_size))\n         }\n     }\n@@ -730,7 +710,7 @@ pub fn iter_vec_uniq<'r,\n                      f: iter_vec_block<'r,'b>)\n                      -> &'b Block<'b> {\n     let _icx = push_ctxt(\"tvec::iter_vec_uniq\");\n-    let data_ptr = get_dataptr(bcx, get_bodyptr(bcx, vptr, vec_ty));\n+    let data_ptr = get_dataptr(bcx, vptr);\n     iter_vec_raw(bcx, data_ptr, vec_ty, fill, f)\n }\n "}, {"sha": "0bc5ffd10196f78c4debeabcf7e1a43a5227a384", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -115,9 +115,7 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_float(t) => Type::float_from_ty(t),\n \n         ty::ty_str(ty::vstore_uniq) |\n-        ty::ty_str(ty::vstore_box) |\n         ty::ty_vec(_, ty::vstore_uniq) |\n-        ty::ty_vec(_, ty::vstore_box) |\n         ty::ty_box(..) |\n         ty::ty_uniq(..) |\n         ty::ty_ptr(..) |\n@@ -221,13 +219,6 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n         let name = llvm_type_name(cx, an_enum, did, substs.tps);\n         adt::incomplete_type_of(cx, repr, name)\n       }\n-      ty::ty_str(ty::vstore_box) => {\n-          fail!(\"unexpected managed string\")\n-      }\n-      ty::ty_vec(ref mt, ty::vstore_box) => {\n-          let e_ty = type_of(cx, mt.ty);\n-          Type::at_box(cx, Type::vec(cx.sess.targ_cfg.arch, &e_ty)).ptr_to()\n-      }\n       ty::ty_box(typ) => {\n           Type::at_box(cx, type_of(cx, typ)).ptr_to()\n       }"}, {"sha": "7f27b1a0cfa307a7d76733ed250e64d2b73c5816", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -130,7 +130,6 @@ pub struct mt {\n pub enum vstore {\n     vstore_fixed(uint),\n     vstore_uniq,\n-    vstore_box,\n     vstore_slice(Region)\n }\n \n@@ -1558,7 +1557,7 @@ pub fn type_is_box(ty: t) -> bool {\n \n pub fn type_is_boxed(ty: t) -> bool {\n     match get(ty).sty {\n-      ty_box(_) | ty_vec(_, vstore_box) | ty_str(vstore_box) => true,\n+      ty_box(_) => true,\n       _ => false\n     }\n }\n@@ -1682,10 +1681,7 @@ fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n           }\n           ty_uniq(_) |\n           ty_str(vstore_uniq) |\n-          ty_str(vstore_box) |\n-          ty_vec(_, vstore_uniq) |\n-          ty_vec(_, vstore_box)\n-          => {\n+          ty_vec(_, vstore_uniq) => {\n             // Once we're inside a box, the annihilator will find\n             // it and destroy it.\n             if !encountered_box {\n@@ -2028,10 +2024,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 tc_mt(cx, mt, cache).owned_pointer()\n             }\n \n-            ty_vec(mt, vstore_box) => {\n-                tc_mt(cx, mt, cache).managed_pointer()\n-            }\n-\n             ty_vec(ref mt, vstore_slice(r)) => {\n                 tc_ty(cx, mt.ty, cache).reference(\n                     borrowed_contents(r, mt.mutbl))\n@@ -2041,10 +2033,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 tc_mt(cx, mt, cache)\n             }\n \n-            ty_str(vstore_box) => {\n-                TC::Managed\n-            }\n-\n             ty_str(vstore_slice(r)) => {\n                 borrowed_contents(r, ast::MutImmutable)\n             }\n@@ -2530,8 +2518,8 @@ pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_type | ty_ptr(_) | ty_bare_fn(_) => result = true,\n       // Boxed types\n       ty_box(_) | ty_uniq(_) | ty_closure(_) |\n-      ty_str(vstore_uniq) | ty_str(vstore_box) |\n-      ty_vec(_, vstore_uniq) | ty_vec(_, vstore_box) |\n+      ty_str(vstore_uniq) |\n+      ty_vec(_, vstore_uniq) |\n       ty_trait(_, _, _, _, _) | ty_rptr(_,_) => result = false,\n       // Structural types\n       ty_enum(did, ref substs) => {\n@@ -4426,7 +4414,7 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n \n         fn fold_vstore(&mut self, vstore: vstore) -> vstore {\n             match vstore {\n-                vstore_fixed(..) | vstore_uniq | vstore_box => vstore,\n+                vstore_fixed(..) | vstore_uniq => vstore,\n                 vstore_slice(_) => vstore_slice(ReStatic)\n             }\n         }\n@@ -4863,7 +4851,6 @@ pub fn hash_crate_independent(tcx: ctxt, t: t, local_hash: ~str) -> u64 {\n         match v {\n             vstore_fixed(_) => hash.input([0]),\n             vstore_uniq => hash.input([1]),\n-            vstore_box => hash.input([2]),\n             vstore_slice(r) => {\n                 hash.input([3]);\n                 region(hash, r);"}, {"sha": "63d6e2ae4428a53f3bcc98c3ee8f794df0c482d2", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -202,7 +202,6 @@ pub fn super_fold_vstore<T:TypeFolder>(this: &mut T,\n     match vstore {\n         ty::vstore_fixed(i) => ty::vstore_fixed(i),\n         ty::vstore_uniq => ty::vstore_uniq,\n-        ty::vstore_box => ty::vstore_box,\n         ty::vstore_slice(r) => ty::vstore_slice(this.fold_region(r)),\n     }\n }"}, {"sha": "90abdc5ac502febf95b8c7343ba856a802dd5ccc", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -384,6 +384,23 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n         ty::mt {ty: ast_ty_to_ty(this, rscope, mt.ty), mutbl: mt.mutbl}\n     }\n \n+    enum PointerTy {\n+        Box,\n+        VStore(ty::vstore)\n+    }\n+    impl PointerTy {\n+        fn expect_vstore(&self, tcx: ty::ctxt, span: Span, ty: &str) -> ty::vstore {\n+            match *self {\n+                Box => {\n+                    tcx.sess.span_err(span, format!(\"managed {} are not supported\", ty));\n+                    // everything can be ~, so this is a worth substitute\n+                    ty::vstore_uniq\n+                }\n+                VStore(vst) => vst\n+            }\n+        }\n+    }\n+\n     // Handle @, ~, and & being able to mean strs and vecs.\n     // If a_seq_ty is a str or a vec, make it a str/vec.\n     // Also handle first-class trait types.\n@@ -392,17 +409,18 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                   this: &AC,\n                   rscope: &RS,\n                   a_seq_ty: &ast::MutTy,\n-                  vst: ty::vstore,\n+                  ptr_ty: PointerTy,\n                   constr: |ty::mt| -> ty::t)\n                   -> ty::t {\n         let tcx = this.tcx();\n-        debug!(\"mk_pointer(vst={:?})\", vst);\n+        debug!(\"mk_pointer(ptr_ty={:?})\", ptr_ty);\n \n         match a_seq_ty.ty.node {\n             ast::TyVec(ty) => {\n+                let vst = ptr_ty.expect_vstore(tcx, a_seq_ty.ty.span, \"vectors\");\n                 let mut mt = ast_ty_to_mt(this, rscope, ty);\n                 if a_seq_ty.mutbl == ast::MutMutable {\n-                    mt = ty::mt { ty: mt.ty, mutbl: a_seq_ty.mutbl };\n+                    mt.mutbl = ast::MutMutable;\n                 }\n                 debug!(\"&[]: vst={:?}\", vst);\n                 return ty::mk_vec(tcx, mt, vst);\n@@ -416,26 +434,19 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                     Some(&ast::DefPrimTy(ast::TyStr)) if\n                             a_seq_ty.mutbl == ast::MutImmutable => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n-                        match vst {\n-                            ty::vstore_box => {\n-                                tcx.sess.span_err(path.span,\n-                                                  \"managed strings are not \\\n-                                                   supported\")\n-                            }\n-                            _ => {}\n-                        }\n+                        let vst = ptr_ty.expect_vstore(tcx, path.span, \"strings\");\n                         return ty::mk_str(tcx, vst);\n                     }\n                     Some(&ast::DefTrait(trait_def_id)) => {\n                         let result = ast_path_to_trait_ref(\n                             this, rscope, trait_def_id, None, path);\n-                        let trait_store = match vst {\n-                            ty::vstore_box => ty::BoxTraitStore,\n-                            ty::vstore_uniq => ty::UniqTraitStore,\n-                            ty::vstore_slice(r) => {\n+                        let trait_store = match ptr_ty {\n+                            Box => ty::BoxTraitStore,\n+                            VStore(ty::vstore_uniq) => ty::UniqTraitStore,\n+                            VStore(ty::vstore_slice(r)) => {\n                                 ty::RegionTraitStore(r)\n                             }\n-                            ty::vstore_fixed(..) => {\n+                            VStore(ty::vstore_fixed(..)) => {\n                                 tcx.sess.span_err(\n                                     path.span,\n                                     \"@trait, ~trait or &trait are the only supported \\\n@@ -483,12 +494,11 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n             ast::TyBot => ty::mk_bot(),\n             ast::TyBox(ty) => {\n                 let mt = ast::MutTy { ty: ty, mutbl: ast::MutImmutable };\n-                mk_pointer(this, rscope, &mt, ty::vstore_box,\n-                           |tmt| ty::mk_box(tcx, tmt.ty))\n+                mk_pointer(this, rscope, &mt, Box, |tmt| ty::mk_box(tcx, tmt.ty))\n             }\n             ast::TyUniq(ty) => {\n                 let mt = ast::MutTy { ty: ty, mutbl: ast::MutImmutable };\n-                mk_pointer(this, rscope, &mt, ty::vstore_uniq,\n+                mk_pointer(this, rscope, &mt, VStore(ty::vstore_uniq),\n                            |tmt| ty::mk_uniq(tcx, tmt.ty))\n             }\n             ast::TyVec(ty) => {\n@@ -502,7 +512,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n             ast::TyRptr(ref region, ref mt) => {\n                 let r = opt_ast_region_to_region(this, rscope, ast_ty.span, region);\n                 debug!(\"ty_rptr r={}\", r.repr(this.tcx()));\n-                mk_pointer(this, rscope, mt, ty::vstore_slice(r),\n+                mk_pointer(this, rscope, mt, VStore(ty::vstore_slice(r)),\n                            |tmt| ty::mk_rptr(tcx, r, tmt))\n             }\n             ast::TyTup(ref fields) => {"}, {"sha": "97b07186f4e099b600fd863e9b72202cb85896a9", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -604,7 +604,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n           ty::ty_vec(mt, vstore) => {\n             let region_var = match vstore {\n                 ty::vstore_slice(r) => r,\n-                ty::vstore_box | ty::vstore_uniq | ty::vstore_fixed(_) => {\n+                ty::vstore_uniq | ty::vstore_fixed(_) => {\n                     default_region_var\n                 }\n             };"}, {"sha": "d32d51c251a86277a3647183ee2169826a982e19", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -699,7 +699,6 @@ impl<'a> LookupContext<'a> {\n         let tcx = self.tcx();\n         let sty = ty::get(self_ty).sty.clone();\n         match sty {\n-            ty_vec(mt, vstore_box) |\n             ty_vec(mt, vstore_uniq) |\n             ty_vec(mt, vstore_slice(_)) | // NDM(#3148)\n             ty_vec(mt, vstore_fixed(_)) => {\n@@ -728,7 +727,6 @@ impl<'a> LookupContext<'a> {\n                     })\n             }\n \n-            ty_str(vstore_box) |\n             ty_str(vstore_uniq) |\n             ty_str(vstore_fixed(_)) => {\n                 let entry = self.search_for_some_kind_of_autorefd_method("}, {"sha": "6d46cd38087c73fb93d640d9a668670e8a9e610c", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -1215,9 +1215,7 @@ pub mod guarantor {\n             }\n             ty::ty_box(..) |\n             ty::ty_ptr(..) |\n-            ty::ty_vec(_, ty::vstore_box) |\n-            ty::ty_trait(_, _, ty::BoxTraitStore, _, _) |\n-            ty::ty_str(ty::vstore_box) => {\n+            ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n                 OtherPointer\n             }\n             ty::ty_closure(ref closure_ty) => {\n@@ -1301,7 +1299,6 @@ pub mod guarantor {\n                 let guarantor1 = match vstore {\n                     ty::vstore_fixed(_) | ty::vstore_uniq => guarantor,\n                     ty::vstore_slice(r) => Some(r),\n-                    ty::vstore_box => None\n                 };\n \n                 link_ref_bindings_in_pats(rcx, before, guarantor1);"}, {"sha": "adf36cf973bac44e6cd78ef7e69b811a47827727", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -67,7 +67,7 @@ we may want to adjust precisely when coercions occur.\n \n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn, AutoBorrowObj};\n use middle::ty::{AutoDerefRef};\n-use middle::ty::{vstore_slice, vstore_box, vstore_uniq};\n+use middle::ty::{vstore_slice, vstore_uniq};\n use middle::ty::{mt};\n use middle::ty;\n use middle::typeck::infer::{CoerceResult, resolve_type, Coercion};\n@@ -272,7 +272,6 @@ impl Coerce {\n                b.inf_str(self.get_ref().infcx));\n \n         match *sty_a {\n-            ty::ty_str(vstore_box) |\n             ty::ty_str(vstore_uniq) => {}\n             _ => {\n                 return self.subtype(a, b);"}, {"sha": "51364addfed23098333b725c269777f044f9b413", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -736,7 +736,7 @@ impl<'a> ConstraintContext<'a> {\n                 self.add_constraints_from_region(r, contra);\n             }\n \n-            ty::vstore_fixed(_) | ty::vstore_uniq | ty::vstore_box => {\n+            ty::vstore_fixed(_) | ty::vstore_uniq => {\n             }\n         }\n     }"}, {"sha": "eba99c7fb5a0250177263136012b04495161a3ef", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -260,7 +260,6 @@ pub fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> ~str {\n     match vs {\n       ty::vstore_fixed(n) => format!(\"{}\", n),\n       ty::vstore_uniq => ~\"~\",\n-      ty::vstore_box => ~\"@\",\n       ty::vstore_slice(r) => region_ptr_to_str(cx, r)\n     }\n }"}, {"sha": "8a3da581607a026ef3f1526392dfc559da4a96dd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ec4b456b26cd019b8b2a4a8a3f9fa9841904bf09", "patch": "@@ -2825,7 +2825,7 @@ impl Parser {\n             let hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,\n-                node: sub,\n+                node: PatUniq(sub),\n                 span: mk_sp(lo, hi)\n             }\n           }"}]}