{"sha": "3d28ee3e34d100534062d0bc690779ed9b6927fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjhlZTNlMzRkMTAwNTM0MDYyZDBiYzY5MDc3OWVkOWI2OTI3ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-03T14:51:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-03T14:51:05Z"}, "message": "Auto merge of #55646 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #54162 (Hide default impls items)\n - #55555 (Make `-Z ls` list the actual filename of external dependencies)\n - #55567 (add test for deriving Debug on uninhabited enum)\n - #55568 (test that rustdoc doesn't overflow on a big enum)\n - #55598 (publish-toolstate: ping maintainers when a tool builds again)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fa410dd9fe06391fba21ac86ccb239cb5e99af6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa410dd9fe06391fba21ac86ccb239cb5e99af6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d28ee3e34d100534062d0bc690779ed9b6927fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d28ee3e34d100534062d0bc690779ed9b6927fe", "html_url": "https://github.com/rust-lang/rust/commit/3d28ee3e34d100534062d0bc690779ed9b6927fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d28ee3e34d100534062d0bc690779ed9b6927fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad8c7b3502616aff142a4640cce911c6c2c5463", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad8c7b3502616aff142a4640cce911c6c2c5463", "html_url": "https://github.com/rust-lang/rust/commit/2ad8c7b3502616aff142a4640cce911c6c2c5463"}, {"sha": "723edf7793cd0953e12c677ac2f49bf2f67cfb1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/723edf7793cd0953e12c677ac2f49bf2f67cfb1e", "html_url": "https://github.com/rust-lang/rust/commit/723edf7793cd0953e12c677ac2f49bf2f67cfb1e"}], "stats": {"total": 478, "additions": 429, "deletions": 49}, "files": [{"sha": "0854df5d1269f36679846fd387347d1c1c59128b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'tcx> MetadataBlob {\n         for (i, dep) in root.crate_deps\n                             .decode(self)\n                             .enumerate() {\n-            write!(out, \"{} {}-{}\\n\", i + 1, dep.name, dep.hash)?;\n+            write!(out, \"{} {}{}\\n\", i + 1, dep.name, dep.extra_filename)?;\n         }\n         write!(out, \"\\n\")?;\n         Ok(())"}, {"sha": "9f68fd56c5e04512d023436a9f7b0f5c47479914", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -552,6 +552,14 @@ impl ItemEnum {\n             _ => return None,\n         })\n     }\n+\n+    pub fn is_associated(&self) -> bool {\n+        match *self {\n+            ItemEnum::TypedefItem(_, _) |\n+            ItemEnum::AssociatedTypeItem(_, _) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "8ba299d229885932e10da7ca1be49c3891178f7e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -2322,8 +2322,8 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n-    document_stability(w, cx, item)?;\n-    document_full(w, item, cx, \"\")?;\n+    document_stability(w, cx, item, false)?;\n+    document_full(w, item, cx, \"\", false)?;\n     Ok(())\n }\n \n@@ -2332,44 +2332,53 @@ fn render_markdown(w: &mut fmt::Formatter,\n                    cx: &Context,\n                    md_text: &str,\n                    links: Vec<(String, String)>,\n-                   prefix: &str)\n+                   prefix: &str,\n+                   is_hidden: bool)\n                    -> fmt::Result {\n     let mut ids = cx.id_map.borrow_mut();\n-    write!(w, \"<div class='docblock'>{}{}</div>\",\n-        prefix, Markdown(md_text, &links, RefCell::new(&mut ids), cx.codes))\n+    write!(w, \"<div class='docblock{}'>{}{}</div>\",\n+           if is_hidden { \" hidden\" } else { \"\" },\n+           prefix,\n+           Markdown(md_text, &links, RefCell::new(&mut ids),\n+           cx.codes))\n }\n \n fn document_short(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item, link: AssocItemLink,\n-                  prefix: &str) -> fmt::Result {\n+                  prefix: &str, is_hidden: bool) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             plain_summary_line(Some(s))\n         };\n-        render_markdown(w, cx, &markdown, item.links(), prefix)?;\n+        render_markdown(w, cx, &markdown, item.links(), prefix, is_hidden)?;\n     } else if !prefix.is_empty() {\n-        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n+        write!(w, \"<div class='docblock{}'>{}</div>\",\n+               if is_hidden { \" hidden\" } else { \"\" },\n+               prefix)?;\n     }\n     Ok(())\n }\n \n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n-                 cx: &Context, prefix: &str) -> fmt::Result {\n+                 cx: &Context, prefix: &str, is_hidden: bool) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, cx, &*s, item.links(), prefix)?;\n+        render_markdown(w, cx, &*s, item.links(), prefix, is_hidden)?;\n     } else if !prefix.is_empty() {\n-        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n+        write!(w, \"<div class='docblock{}'>{}</div>\",\n+               if is_hidden { \" hidden\" } else { \"\" },\n+               prefix)?;\n     }\n     Ok(())\n }\n \n-fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n+fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n+                      is_hidden: bool) -> fmt::Result {\n     let stabilities = short_stability(item, cx, true);\n     if !stabilities.is_empty() {\n-        write!(w, \"<div class='stability'>\")?;\n+        write!(w, \"<div class='stability{}'>\", if is_hidden { \" hidden\" } else { \"\" })?;\n         for stability in stabilities {\n             write!(w, \"{}\", stability)?;\n         }\n@@ -3934,14 +3943,21 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             RenderMode::ForDeref { mut_: deref_mut_ } => should_render_item(&item, deref_mut_),\n         };\n \n+        let (is_hidden, extra_class) = if trait_.is_none() ||\n+                                          item.doc_value().is_some() ||\n+                                          item.inner.is_associated() {\n+            (false, \"\")\n+        } else {\n+            (true, \" hidden\")\n+        };\n         match item.inner {\n             clean::MethodItem(clean::Method { ref decl, .. }) |\n-            clean::TyMethodItem(clean::TyMethod{ ref decl, .. }) => {\n+            clean::TyMethodItem(clean::TyMethod { ref decl, .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                     let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                     write!(w, \"{}\", spotlight_decl(decl)?)?;\n                     write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n                     write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n@@ -3963,15 +3979,15 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n                 write!(w, \"</code></span></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n                 let src = if let Some(l) = (Item { cx, item }).src_href() {\n@@ -3985,7 +4001,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n                 write!(w, \"</code></span></h4>\\n\")?;\n@@ -4002,25 +4018,25 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     if let Some(it) = t.items.iter().find(|i| i.name == item.name) {\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n-                        document_stability(w, cx, it)?;\n+                        document_stability(w, cx, it, is_hidden)?;\n                         if item.doc_value().is_some() {\n-                            document_full(w, item, cx, \"\")?;\n+                            document_full(w, item, cx, \"\", is_hidden)?;\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, cx, it, link, \"\")?;\n+                            document_short(w, cx, it, link, \"\", is_hidden)?;\n                         }\n                     }\n                 } else {\n-                    document_stability(w, cx, item)?;\n+                    document_stability(w, cx, item, is_hidden)?;\n                     if show_def_docs {\n-                        document_full(w, item, cx, \"\")?;\n+                        document_full(w, item, cx, \"\", is_hidden)?;\n                     }\n                 }\n             } else {\n-                document_stability(w, cx, item)?;\n+                document_stability(w, cx, item, is_hidden)?;\n                 if show_def_docs {\n-                    document_short(w, cx, item, link, \"\")?;\n+                    document_short(w, cx, item, link, \"\", is_hidden)?;\n                 }\n             }\n         }"}, {"sha": "4425712eed7a15aaf9fecc4ae761453769f31aac", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -2052,6 +2052,50 @@\n     onEach(document.getElementsByClassName('method'), func);\n     onEach(document.getElementsByClassName('associatedconstant'), func);\n     onEach(document.getElementsByClassName('impl'), func);\n+    onEach(document.getElementsByClassName('impl-items'), function(e) {\n+        onEach(e.getElementsByClassName('associatedconstant'), func);\n+        var hiddenElems = e.getElementsByClassName('hidden');\n+        var needToggle = false;\n+\n+        for (var i = 0; i < hiddenElems.length; ++i) {\n+            if (hasClass(hiddenElems[i], \"content\") === false &&\n+                hasClass(hiddenElems[i], \"docblock\") === false) {\n+                needToggle = true;\n+                break;\n+            }\n+        }\n+        if (needToggle === true) {\n+            var newToggle = document.createElement('a');\n+            newToggle.href = 'javascript:void(0)';\n+            newToggle.className = 'collapse-toggle hidden-default collapsed';\n+            newToggle.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(true) + \"</span>\" +\n+                                  \"] Show hidden undocumented items\";\n+            newToggle.onclick = function() {\n+                if (hasClass(this, \"collapsed\")) {\n+                    removeClass(this, \"collapsed\");\n+                    onEach(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n+                        if (hasClass(x, \"content\") === false) {\n+                            removeClass(x, \"hidden\");\n+                            addClass(x, \"x\");\n+                        }\n+                    }, true);\n+                    this.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(false) +\n+                                     \"</span>] Hide undocumented items\"\n+                } else {\n+                    addClass(this, \"collapsed\");\n+                    onEach(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n+                        if (hasClass(x, \"content\") === false) {\n+                            addClass(x, \"hidden\");\n+                            removeClass(x, \"x\");\n+                        }\n+                    }, true);\n+                    this.innerHTML = \"[<span class='inner'>\" + labelForToggleButton(true) +\n+                                     \"</span>] Show hidden undocumented items\";\n+                }\n+            };\n+            e.insertBefore(newToggle, e.firstChild);\n+        }\n+    });\n \n     function createToggle(otherMessage, fontSize, extraClass, show) {\n         var span = document.createElement('span');"}, {"sha": "8f679b4d22b25d51f292e0b278f7ae7578e66e2f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -479,17 +479,6 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-bottom: 15px;\n }\n \n-.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n-\tmargin-left: 20px;\n-}\n-.content .impl-items .docblock, .content .impl-items .stability {\n-\tmargin-bottom: .6em;\n-}\n-\n-.content .impl-items > .stability {\n-\tmargin-left: 40px;\n-}\n-\n .content .docblock > .impl-items {\n \tmargin-left: 20px;\n \tmargin-top: -34px;\n@@ -531,7 +520,20 @@ h4 > code, h3 > code, .invisible > code {\n \ttop: -9px;\n \tleft: -13px;\n }\n-.methods > .stability {\n+\n+.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n+\tmargin-left: 20px;\n+}\n+\n+.content .impl-items .docblock, .content .impl-items .stability {\n+\tmargin-bottom: .6em;\n+}\n+\n+.content .impl-items > .stability {\n+\tmargin-left: 40px;\n+}\n+\n+.methods > .stability, .content .impl-items > .stability {\n \tmargin-top: -8px;\n }\n \n@@ -839,6 +841,11 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \ttext-align: center;\n }\n \n+.collapse-toggle.hidden-default {\n+\tposition: relative;\n+\tmargin-left: 20px;\n+}\n+\n .ghost {\n \tdisplay: none;\n }"}, {"sha": "5f7a8c75d3c5f6973775c2a09fd98b1af6e4693c", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -15,11 +15,19 @@ var mainTheme = document.getElementById(\"mainThemeStyle\");\n \n var savedHref = [];\n \n-function onEach(arr, func) {\n+function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n-        for (var i = 0; i < arr.length; i++) {\n-            if (func(arr[i]) === true) {\n-                return true;\n+        if (reversed !== true) {\n+            for (var i = 0; i < arr.length; ++i) {\n+                if (func(arr[i]) === true) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            for (var i = arr.length - 1; i >= 0; --i) {\n+                if (func(arr[i]) === true) {\n+                    return true;\n+                }\n             }\n         }\n     }"}, {"sha": "9ace8714918248c619b2c7c8a46be0e4f01540dc", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -75,8 +75,8 @@ pub trait Qux {\n     /// Docs for QUX1 in trait.\n     const QUX1: i8;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n-    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n-    /// Docs for QUX_DEFAULT0 in trait.\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT12 in trait.\"\n+    /// Docs for QUX_DEFAULT12 in trait.\n     const QUX_DEFAULT0: u16 = 1;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in trait.\"\n@@ -99,7 +99,7 @@ impl Qux for Bar {\n     /// Docs for QUX1 in impl.\n     const QUX1: i8 = 5;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n-    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n+    // @has - '//*[@class=\"docblock hidden\"]' \"Docs for QUX_DEFAULT12 in trait.\"\n     const QUX_DEFAULT0: u16 = 6;\n     // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n     // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in impl.\""}, {"sha": "c265ae44f0dc0334d7b7ae8ae3e9d114ca029e04", "filename": "src/test/rustdoc/auxiliary/enum_primitive.rs", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fenum_primitive.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -0,0 +1,210 @@\n+// Copyright (c) 2015 Anders Kaseorg <andersk@mit.edu>\n+\n+// Permission is hereby granted, free of charge, to any person obtaining\n+// a copy of this software and associated documentation files (the\n+// \u201cSoftware\u201d), to deal in the Software without restriction, including\n+// without limitation the rights to use, copy, modify, merge, publish,\n+// distribute, sublicense, and/or sell copies of the Software, and to\n+// permit persons to whom the Software is furnished to do so, subject to\n+// the following conditions:\n+\n+// The above copyright notice and this permission notice shall be\n+// included in all copies or substantial portions of the Software.\n+\n+// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND,\n+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n+// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n+// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n+// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+\n+//! This crate exports a macro `enum_from_primitive!` that wraps an\n+//! `enum` declaration and automatically adds an implementation of\n+//! `num::FromPrimitive` (reexported here), to allow conversion from\n+//! primitive integers to the enum.  It therefore provides an\n+//! alternative to the built-in `#[derive(FromPrimitive)]`, which\n+//! requires the unstable `std::num::FromPrimitive` and is disabled in\n+//! Rust 1.0.\n+//!\n+//! # Example\n+//!\n+//! ```\n+//! #[macro_use] extern crate enum_primitive;\n+//! extern crate num_traits;\n+//! use num_traits::FromPrimitive;\n+//!\n+//! enum_from_primitive! {\n+//! #[derive(Debug, PartialEq)]\n+//! enum FooBar {\n+//!     Foo = 17,\n+//!     Bar = 42,\n+//!     Baz,\n+//! }\n+//! }\n+//!\n+//! fn main() {\n+//!     assert_eq!(FooBar::from_i32(17), Some(FooBar::Foo));\n+//!     assert_eq!(FooBar::from_i32(42), Some(FooBar::Bar));\n+//!     assert_eq!(FooBar::from_i32(43), Some(FooBar::Baz));\n+//!     assert_eq!(FooBar::from_i32(91), None);\n+//! }\n+//! ```\n+\n+\n+pub mod num_traits {\n+    pub trait FromPrimitive: Sized {\n+        fn from_i64(n: i64) -> Option<Self>;\n+        fn from_u64(n: u64) -> Option<Self>;\n+    }\n+}\n+\n+pub use std::option::Option;\n+pub use num_traits::FromPrimitive;\n+\n+/// Helper macro for internal use by `enum_from_primitive!`.\n+#[macro_export]\n+macro_rules! enum_from_primitive_impl_ty {\n+    ($meth:ident, $ty:ty, $name:ident, $( $variant:ident )*) => {\n+        #[allow(non_upper_case_globals, unused)]\n+        fn $meth(n: $ty) -> $crate::Option<Self> {\n+            $( if n == $name::$variant as $ty {\n+                $crate::Option::Some($name::$variant)\n+            } else )* {\n+                $crate::Option::None\n+            }\n+        }\n+    };\n+}\n+\n+/// Helper macro for internal use by `enum_from_primitive!`.\n+#[macro_export]\n+#[macro_use(enum_from_primitive_impl_ty)]\n+macro_rules! enum_from_primitive_impl {\n+    ($name:ident, $( $variant:ident )*) => {\n+        impl $crate::FromPrimitive for $name {\n+            enum_from_primitive_impl_ty! { from_i64, i64, $name, $( $variant )* }\n+            enum_from_primitive_impl_ty! { from_u64, u64, $name, $( $variant )* }\n+        }\n+    };\n+}\n+\n+/// Wrap this macro around an `enum` declaration to get an\n+/// automatically generated implementation of `num::FromPrimitive`.\n+#[macro_export]\n+#[macro_use(enum_from_primitive_impl)]\n+macro_rules! enum_from_primitive {\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),*\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*,\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),+,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),+,\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )+ }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),*\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),*\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( #[$variant_attr:meta] )* $variant:ident ),+\n+            $( = $discriminator:expr, $( $( #[$variant_two_attr:meta] )* $variant_two:ident ),+ )*,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( #[$variant_attr] )* $variant ),+\n+            $( = $discriminator, $( $( #[$variant_two_attr] )* $variant_two ),+ )*,\n+        }\n+        enum_from_primitive_impl! { $name, $( $variant )+ $( $( $variant_two )+ )* }\n+    };\n+\n+    (\n+        $( #[$enum_attr:meta] )*\n+        pub enum $name:ident {\n+            $( $( $( #[$variant_attr:meta] )* $variant:ident ),+ = $discriminator:expr ),+,\n+        }\n+    ) => {\n+        $( #[$enum_attr] )*\n+        pub enum $name {\n+            $( $( $( #[$variant_attr] )* $variant ),+ = $discriminator ),+,\n+        }\n+        enum_from_primitive_impl! { $name, $( $( $variant )+ )+ }\n+    };\n+}\n+"}, {"sha": "949ef1182889730f580ce65f67a7e77f6ab818e9", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -73,7 +73,7 @@ impl T for S2 {\n // @has manual_impl/struct.S3.html '//*[@class=\"trait\"]' 'T'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait b_method implementation.'\n-// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+// @has - '//*[@class=\"docblock hidden\"]' 'Docs associated with the trait a_method definition.'\n pub struct S3(usize);\n \n /// Docs associated with the S3 trait implementation."}, {"sha": "37b0aca4b00caa1cd46b1472b4a767c0a340e623", "filename": "src/test/rustdoc/no-stack-overflow-25295.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-stack-overflow-25295.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ensure this code doesn't stack overflow\n+// aux-build:enum_primitive.rs\n+\n+#[macro_use] extern crate enum_primitive;\n+\n+enum_from_primitive! {\n+    pub enum Test {\n+        A1,A2,A3,A4,A5,A6,\n+        B1,B2,B3,B4,B5,B6,\n+        C1,C2,C3,C4,C5,C6,\n+        D1,D2,D3,D4,D5,D6,\n+        E1,E2,E3,E4,E5,E6,\n+        F1,F2,F3,F4,F5,F6,\n+        G1,G2,G3,G4,G5,G6,\n+        H1,H2,H3,H4,H5,H6,\n+        I1,I2,I3,I4,I5,I6,\n+        J1,J2,J3,J4,J5,J6,\n+        K1,K2,K3,K4,K5,K6,\n+        L1,L2,L3,L4,L5,L6,\n+        M1,M2,M3,M4,M5,M6,\n+        N1,N2,N3,N4,N5,N6,\n+        O1,O2,O3,O4,O5,O6,\n+        P1,P2,P3,P4,P5,P6,\n+        Q1,Q2,Q3,Q4,Q5,Q6,\n+        R1,R2,R3,R4,R5,R6,\n+        S1,S2,S3,S4,S5,S6,\n+        T1,T2,T3,T4,T5,T6,\n+        U1,U2,U3,U4,U5,U6,\n+        V1,V2,V3,V4,V5,V6,\n+        W1,W2,W3,W4,W5,W6,\n+        X1,X2,X3,X4,X5,X6,\n+        Y1,Y2,Y3,Y4,Y5,Y6,\n+        Z1,Z2,Z3,Z4,Z5,Z6,\n+    }\n+}\n+"}, {"sha": "dc7f5d60cd82c7cfa83bc043a22cfb37beec941f", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// compile-flags: -Wunused\n+\n+// ensure there are no special warnings about uninhabited types\n+// when deriving Debug on an empty enum\n+\n+#[derive(Debug)]\n+enum Void {} //~ WARN never used\n+\n+#[derive(Debug)]\n+enum Foo { //~ WARN never used\n+    Bar(u8),\n+    Void(Void),\n+}\n+\n+fn main() {}\n+"}, {"sha": "11032abfa12ae3bc3b0748eadf71df6c1b284280", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -0,0 +1,14 @@\n+warning: enum is never used: `Void`\n+  --> $DIR/derive-uninhabited-enum-38885.rs:18:1\n+   |\n+LL | enum Void {} //~ WARN never used\n+   | ^^^^^^^^^\n+   |\n+   = note: `-W dead-code` implied by `-W unused`\n+\n+warning: enum is never used: `Foo`\n+  --> $DIR/derive-uninhabited-enum-38885.rs:21:1\n+   |\n+LL | enum Foo { //~ WARN never used\n+   | ^^^^^^^^\n+"}, {"sha": "4ade87f5d65bd2c167175bcf27ca178a28df1b50", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/3d28ee3e34d100534062d0bc690779ed9b6927fe/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=3d28ee3e34d100534062d0bc690779ed9b6927fe", "patch": "@@ -26,7 +26,7 @@\n MAINTAINERS = {\n     'miri': '@oli-obk @RalfJung @eddyb',\n     'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk',\n-    'rls': '@nrc',\n+    'rls': '@nrc @Xanewok',\n     'rustfmt': '@nrc',\n     'book': '@carols10cents @steveklabnik',\n     'nomicon': '@frewsxcv @Gankro',\n@@ -81,8 +81,8 @@ def update_latest(\n                 status[os] = new\n                 if new > old:\n                     changed = True\n-                    message += '\ud83c\udf89 {} on {}: {} \u2192 {}.\\n' \\\n-                        .format(tool, os, old, new)\n+                    message += '\ud83c\udf89 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n+                        .format(tool, os, old, new, MAINTAINERS.get(tool))\n                 elif new < old:\n                     changed = True\n                     message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\"}]}