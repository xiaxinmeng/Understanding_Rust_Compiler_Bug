{"sha": "9d6c4f09c4b309fd45379996975f4075ba37258b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNmM0ZjA5YzRiMzA5ZmQ0NTM3OTk5Njk3NWY0MDc1YmEzNzI1OGI=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-09-17T01:24:33Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-09-17T06:26:58Z"}, "message": "merge into/literal suggestion for DRY", "tree": {"sha": "4d674bc5aea714d259c9ae1bce47c5a815877eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d674bc5aea714d259c9ae1bce47c5a815877eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d6c4f09c4b309fd45379996975f4075ba37258b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c4f09c4b309fd45379996975f4075ba37258b", "html_url": "https://github.com/rust-lang/rust/commit/9d6c4f09c4b309fd45379996975f4075ba37258b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c4f09c4b309fd45379996975f4075ba37258b/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31a2a0c603c6a7ec2a69e2b5658bcca016dbc29", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31a2a0c603c6a7ec2a69e2b5658bcca016dbc29", "html_url": "https://github.com/rust-lang/rust/commit/d31a2a0c603c6a7ec2a69e2b5658bcca016dbc29"}], "stats": {"total": 119, "additions": 52, "deletions": 67}, "files": [{"sha": "e78cd4891a5ea99fa4004b55a02b508b29c74a9e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 52, "deletions": 67, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9d6c4f09c4b309fd45379996975f4075ba37258b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d6c4f09c4b309fd45379996975f4075ba37258b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9d6c4f09c4b309fd45379996975f4075ba37258b", "patch": "@@ -415,26 +415,56 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           src,\n                                           if needs_paren { \")\" } else { \"\" },\n                                           expected_ty);\n-            let into_suggestion = format!(\"{}{}{}.into()\",\n-                                          if needs_paren { \"(\" } else { \"\" },\n-                                          src,\n-                                          if needs_paren { \")\" } else { \"\" });\n-            let suffix_suggestion = format!(\n-                \"{}{}{}{}\",\n+            let into_suggestion = format!(\n+                \"{}{}{}.into()\",\n                 if needs_paren { \"(\" } else { \"\" },\n-                src.trim_right_matches(&checked_ty.to_string()),\n-                expected_ty,\n+                src,\n                 if needs_paren { \")\" } else { \"\" },\n             );\n-\n-            let is_suffixed = |expr: &hir::Expr| {\n+            let literal_is_ty_suffixed = |expr: &hir::Expr| {\n                 if let hir::ExprKind::Lit(lit) = &expr.node {\n                     lit.node.is_suffixed()\n                 } else {\n                     false\n                 }\n             };\n \n+            let into_sugg = into_suggestion.clone();\n+            let suggest_to_change_suffix_or_into = |err: &mut DiagnosticBuilder,\n+                                                    note: Option<&str>| {\n+                let suggest_msg = if literal_is_ty_suffixed(expr) {\n+                    format!(\n+                        \"change the type of the numeric literal from `{}` to `{}`\",\n+                        checked_ty,\n+                        expected_ty,\n+                    )\n+                } else {\n+                    match note {\n+                        Some(note) => format!(\"{}, which {}\", msg, note),\n+                        _ => format!(\"{} in a lossless way\", msg),\n+                    }\n+                };\n+\n+                let suffix_suggestion = format!(\n+                    \"{}{}{}{}\",\n+                    if needs_paren { \"(\" } else { \"\" },\n+                    src.trim_right_matches(&checked_ty.to_string()),\n+                    expected_ty,\n+                    if needs_paren { \")\" } else { \"\" },\n+                );\n+\n+                err.span_suggestion_with_applicability(\n+                    expr.span,\n+                    &suggest_msg,\n+                    if literal_is_ty_suffixed(expr) {\n+                        suffix_suggestion\n+                    } else {\n+                        into_sugg\n+                    },\n+                    Applicability::MachineApplicable,\n+                );\n+            };\n+\n             match (&expected_ty.sty, &checked_ty.sty) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n                     match (found.bit_width(), exp.bit_width()) {\n@@ -459,25 +489,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            if is_suffixed(expr) {\n-                                err.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    &format!(\n-                                        \"change the type of the numeric literal from `{}` to `{}`\",\n-                                        checked_ty,\n-                                        expected_ty,\n-                                    ),\n-                                    suffix_suggestion,\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                    into_suggestion,\n-                                    Applicability::MachineApplicable\n-                                );\n-                            }\n+                            suggest_to_change_suffix_or_into(\n+                                err,\n+                                Some(will_sign_extend),\n+                            );\n                         }\n                     }\n                     true\n@@ -505,25 +520,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            if is_suffixed(expr) {\n-                                err.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    &format!(\n-                                        \"change the type of the numeric literal from `{}` to `{}`\",\n-                                        checked_ty,\n-                                        expected_ty,\n-                                    ),\n-                                    suffix_suggestion,\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_suggestion_with_applicability(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_zero_extend),\n-                                    into_suggestion,\n-                                    Applicability::MachineApplicable\n-                                );\n-                            }\n+                           suggest_to_change_suffix_or_into(\n+                               err,\n+                               Some(will_zero_extend),\n+                           );\n                         }\n                     }\n                     true\n@@ -624,25 +624,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n-                        if is_suffixed(expr) {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\n-                                    \"change the type of the numeric literal from `{}` to `{}`\",\n-                                    checked_ty,\n-                                    expected_ty,\n-                                ),\n-                                suffix_suggestion,\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{} in a lossless way\", msg),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n-                            );\n-                        }\n+                       suggest_to_change_suffix_or_into(\n+                           err,\n+                           None,\n+                       );\n                     } else if can_cast {\n                         err.span_suggestion_with_applicability(\n                             expr.span,"}]}