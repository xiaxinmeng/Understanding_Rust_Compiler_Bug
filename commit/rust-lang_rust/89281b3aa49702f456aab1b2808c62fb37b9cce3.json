{"sha": "89281b3aa49702f456aab1b2808c62fb37b9cce3", "node_id": "C_kwDOAAsO6NoAKDg5MjgxYjNhYTQ5NzAyZjQ1NmFhYjFiMjgwOGM2MmZiMzdiOWNjZTM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-13T14:21:42Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-14T09:35:32Z"}, "message": "add pretty ignore reasons for llvm, cdb, gdb and lldb", "tree": {"sha": "f212c297645b236b6f687c6319e6b78e379aa12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f212c297645b236b6f687c6319e6b78e379aa12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89281b3aa49702f456aab1b2808c62fb37b9cce3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQ5HmYACgkQzXazX3c0\ndp4JORAAi4GZNESfms5wzains/ag4Yx1Hxauto80cV4BKmYANh6N+L4SAlgd7Ew+\nNcYOYHVeB2QDomhVACF9pXTPa27OPjwHiRp4J11pJTFBVlsBdfqYcGJUG2W5INuK\n54SqKMXjHwLM/4pJiC7POR39VpURiEMQiFonadQgIgrtEmiecH17oKsDpUNi1x+P\n9Q63jZtVbe5z/A52CgW7xRflSnFgfDK1377bhcfrZqPlhJbsjh22o3qXSMxizG2l\nXNEAHpEXMZg4OKgYFgA7vOcoWs3KcH0K4mZjv7L64MBJ+d/ZQNmGfrncQH5mz7GD\njJJQ+jbaiyhOse9Bks0SjmKYndnekMRjBVTTnYiA9b5Q6RtN7mmJ6GpH0F8OM2fy\ncunn6Rxmrl22cri3l0Tgj/BLumVRAScAIDxzRxFADFPpdqPv10PQ0sItRXFKZcpy\nTwFc+v2+D4NWnI6/mxTfe11uRddNHWiCV1oyBbzqosZEbzchRoCsZs5u2NxyS9h1\nTwdZXVmuPAPD9P9ZDu6xhPXFxVMTStvGuHpp313wGqimoadUrnTO2u1yrLdjZKSV\necBp9oGQuZo0moA/EtAH8wFLzjsQiKQH562Vud6Q/Tjpm5OEZeZhAWs/O3ypg3H7\nsT2mpJVht+4mIGNyhKRuY4z+MMsUVVR9lAwemNHqEoQYjsAnVn0=\n=D+LR\n-----END PGP SIGNATURE-----", "payload": "tree f212c297645b236b6f687c6319e6b78e379aa12c\nparent 97879ce24ba6fbc89b1a7a9bef5d31f73963646c\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1681395702 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1681464932 +0200\n\nadd pretty ignore reasons for llvm, cdb, gdb and lldb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89281b3aa49702f456aab1b2808c62fb37b9cce3", "html_url": "https://github.com/rust-lang/rust/commit/89281b3aa49702f456aab1b2808c62fb37b9cce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89281b3aa49702f456aab1b2808c62fb37b9cce3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97879ce24ba6fbc89b1a7a9bef5d31f73963646c", "url": "https://api.github.com/repos/rust-lang/rust/commits/97879ce24ba6fbc89b1a7a9bef5d31f73963646c", "html_url": "https://github.com/rust-lang/rust/commit/97879ce24ba6fbc89b1a7a9bef5d31f73963646c"}], "stats": {"total": 140, "additions": 107, "deletions": 33}, "files": [{"sha": "bc90c413cfd73a220c694949db7e39d7fdc7dcae", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 107, "deletions": 33, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/89281b3aa49702f456aab1b2808c62fb37b9cce3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89281b3aa49702f456aab1b2808c62fb37b9cce3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=89281b3aa49702f456aab1b2808c62fb37b9cce3", "patch": "@@ -934,6 +934,20 @@ pub fn make_test_description<R: Read>(\n                 }\n             };\n         }\n+        macro_rules! decision {\n+            ($e:expr) => {\n+                match $e {\n+                    IgnoreDecision::Ignore { reason } => {\n+                        ignore = true;\n+                        // The ignore reason must be a &'static str, so we have to leak memory to\n+                        // create it. This is fine, as the header is parsed only at the start of\n+                        // compiletest so it won't grow indefinitely.\n+                        ignore_message = Some(Box::leak(Box::<str>::from(reason)));\n+                    }\n+                    IgnoreDecision::Continue => {}\n+                }\n+            };\n+        }\n \n         {\n             let parsed = parse_cfg_name_directive(config, ln, \"ignore\");\n@@ -975,7 +989,11 @@ pub fn make_test_description<R: Read>(\n             };\n         }\n \n-        reason!(ignore_llvm(config, ln));\n+        decision!(ignore_llvm(config, ln));\n+        decision!(ignore_cdb(config, ln));\n+        decision!(ignore_gdb(config, ln));\n+        decision!(ignore_lldb(config, ln));\n+\n         reason!(\n             config.run_clang_based_tests_with.is_none() && config.parse_needs_matching_clang(ln)\n         );\n@@ -1005,12 +1023,15 @@ pub fn make_test_description<R: Read>(\n             config.target == \"wasm32-unknown-unknown\"\n                 && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS)\n         );\n-        reason!(config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln));\n-        reason!(config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln));\n-        reason!(config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln));\n         reason!(!has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\"));\n         reason!(config.parse_name_directive(ln, \"needs-i686-dlltool\") && !has_i686_dlltool());\n         reason!(config.parse_name_directive(ln, \"needs-x86_64-dlltool\") && !has_x86_64_dlltool());\n+        reason!(\n+            config.parse_name_directive(ln, \"rust-lldb\")\n+                && config.debugger == Some(Debugger::Lldb)\n+                && !config.lldb_native_rust\n+        );\n+\n         should_fail |= config.parse_name_directive(ln, \"should-fail\");\n     });\n \n@@ -1044,22 +1065,34 @@ pub fn make_test_description<R: Read>(\n     }\n }\n \n-fn ignore_cdb(config: &Config, line: &str) -> bool {\n+fn ignore_cdb(config: &Config, line: &str) -> IgnoreDecision {\n+    if config.debugger != Some(Debugger::Cdb) {\n+        return IgnoreDecision::Continue;\n+    }\n+\n     if let Some(actual_version) = config.cdb_version {\n-        if let Some(min_version) = line.strip_prefix(\"min-cdb-version:\").map(str::trim) {\n-            let min_version = extract_cdb_version(min_version).unwrap_or_else(|| {\n-                panic!(\"couldn't parse version range: {:?}\", min_version);\n+        if let Some(rest) = line.strip_prefix(\"min-cdb-version:\").map(str::trim) {\n+            let min_version = extract_cdb_version(rest).unwrap_or_else(|| {\n+                panic!(\"couldn't parse version range: {:?}\", rest);\n             });\n \n             // Ignore if actual version is smaller than the minimum\n             // required version\n-            return actual_version < min_version;\n+            if actual_version < min_version {\n+                return IgnoreDecision::Ignore {\n+                    reason: format!(\"ignored when the CDB version is lower than {rest}\"),\n+                };\n+            }\n         }\n     }\n-    false\n+    IgnoreDecision::Continue\n }\n \n-fn ignore_gdb(config: &Config, line: &str) -> bool {\n+fn ignore_gdb(config: &Config, line: &str) -> IgnoreDecision {\n+    if config.debugger != Some(Debugger::Gdb) {\n+        return IgnoreDecision::Continue;\n+    }\n+\n     if let Some(actual_version) = config.gdb_version {\n         if let Some(rest) = line.strip_prefix(\"min-gdb-version:\").map(str::trim) {\n             let (start_ver, end_ver) = extract_version_range(rest, extract_gdb_version)\n@@ -1072,7 +1105,11 @@ fn ignore_gdb(config: &Config, line: &str) -> bool {\n             }\n             // Ignore if actual version is smaller than the minimum\n             // required version\n-            return actual_version < start_ver;\n+            if actual_version < start_ver {\n+                return IgnoreDecision::Ignore {\n+                    reason: format!(\"ignored when the GDB version is lower than {rest}\"),\n+                };\n+            }\n         } else if let Some(rest) = line.strip_prefix(\"ignore-gdb-version:\").map(str::trim) {\n             let (min_version, max_version) = extract_version_range(rest, extract_gdb_version)\n                 .unwrap_or_else(|| {\n@@ -1083,32 +1120,47 @@ fn ignore_gdb(config: &Config, line: &str) -> bool {\n                 panic!(\"Malformed GDB version range: max < min\")\n             }\n \n-            return actual_version >= min_version && actual_version <= max_version;\n+            if actual_version >= min_version && actual_version <= max_version {\n+                if min_version == max_version {\n+                    return IgnoreDecision::Ignore {\n+                        reason: format!(\"ignored when the GDB version is {rest}\"),\n+                    };\n+                } else {\n+                    return IgnoreDecision::Ignore {\n+                        reason: format!(\"ignored when the GDB version is between {rest}\"),\n+                    };\n+                }\n+            }\n         }\n     }\n-    false\n+    IgnoreDecision::Continue\n }\n \n-fn ignore_lldb(config: &Config, line: &str) -> bool {\n+fn ignore_lldb(config: &Config, line: &str) -> IgnoreDecision {\n+    if config.debugger != Some(Debugger::Lldb) {\n+        return IgnoreDecision::Continue;\n+    }\n+\n     if let Some(actual_version) = config.lldb_version {\n-        if let Some(min_version) = line.strip_prefix(\"min-lldb-version:\").map(str::trim) {\n-            let min_version = min_version.parse().unwrap_or_else(|e| {\n-                panic!(\"Unexpected format of LLDB version string: {}\\n{:?}\", min_version, e);\n+        if let Some(rest) = line.strip_prefix(\"min-lldb-version:\").map(str::trim) {\n+            let min_version = rest.parse().unwrap_or_else(|e| {\n+                panic!(\"Unexpected format of LLDB version string: {}\\n{:?}\", rest, e);\n             });\n             // Ignore if actual version is smaller the minimum required\n             // version\n-            actual_version < min_version\n-        } else {\n-            line.starts_with(\"rust-lldb\") && !config.lldb_native_rust\n+            if actual_version < min_version {\n+                return IgnoreDecision::Ignore {\n+                    reason: format!(\"ignored when the LLDB version is {rest}\"),\n+                };\n+            }\n         }\n-    } else {\n-        false\n     }\n+    IgnoreDecision::Continue\n }\n \n-fn ignore_llvm(config: &Config, line: &str) -> bool {\n+fn ignore_llvm(config: &Config, line: &str) -> IgnoreDecision {\n     if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n-        return true;\n+        return IgnoreDecision::Ignore { reason: \"ignored when the system LLVM is used\".into() };\n     }\n     if let Some(needed_components) =\n         config.parse_name_value_directive(line, \"needs-llvm-components\")\n@@ -1121,20 +1173,30 @@ fn ignore_llvm(config: &Config, line: &str) -> bool {\n             if env::var_os(\"COMPILETEST_NEEDS_ALL_LLVM_COMPONENTS\").is_some() {\n                 panic!(\"missing LLVM component: {}\", missing_component);\n             }\n-            return true;\n+            return IgnoreDecision::Ignore {\n+                reason: format!(\"ignored when the {missing_component} LLVM component is missing\"),\n+            };\n         }\n     }\n     if let Some(actual_version) = config.llvm_version {\n         if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n             let min_version = extract_llvm_version(rest).unwrap();\n             // Ignore if actual version is smaller the minimum required\n             // version\n-            actual_version < min_version\n+            if actual_version < min_version {\n+                return IgnoreDecision::Ignore {\n+                    reason: format!(\"ignored when the LLVM version is older than {rest}\"),\n+                };\n+            }\n         } else if let Some(rest) = line.strip_prefix(\"min-system-llvm-version:\").map(str::trim) {\n             let min_version = extract_llvm_version(rest).unwrap();\n             // Ignore if using system LLVM and actual version\n             // is smaller the minimum required version\n-            config.system_llvm && actual_version < min_version\n+            if config.system_llvm && actual_version < min_version {\n+                return IgnoreDecision::Ignore {\n+                    reason: format!(\"ignored when the system LLVM version is older than {rest}\"),\n+                };\n+            }\n         } else if let Some(rest) = line.strip_prefix(\"ignore-llvm-version:\").map(str::trim) {\n             // Syntax is: \"ignore-llvm-version: <version1> [- <version2>]\"\n             let (v_min, v_max) =\n@@ -1145,11 +1207,23 @@ fn ignore_llvm(config: &Config, line: &str) -> bool {\n                 panic!(\"Malformed LLVM version range: max < min\")\n             }\n             // Ignore if version lies inside of range.\n-            actual_version >= v_min && actual_version <= v_max\n-        } else {\n-            false\n+            if actual_version >= v_min && actual_version <= v_max {\n+                if v_min == v_max {\n+                    return IgnoreDecision::Ignore {\n+                        reason: format!(\"ignored when the LLVM version is {rest}\"),\n+                    };\n+                } else {\n+                    return IgnoreDecision::Ignore {\n+                        reason: format!(\"ignored when the LLVM version is between {rest}\"),\n+                    };\n+                }\n+            }\n         }\n-    } else {\n-        false\n     }\n+    IgnoreDecision::Continue\n+}\n+\n+enum IgnoreDecision {\n+    Ignore { reason: String },\n+    Continue,\n }"}]}