{"sha": "964e0691be3262d4864aa5d97e9dd6cecf806484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NGUwNjkxYmUzMjYyZDQ4NjRhYTVkOTdlOWRkNmNlY2Y4MDY0ODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-07T23:38:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T02:21:24Z"}, "message": "use chunks api for SparseBitMatrix and add a `subset` fn", "tree": {"sha": "5003339223b37f2ccdea13262bf453a798badbea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5003339223b37f2ccdea13262bf453a798badbea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/964e0691be3262d4864aa5d97e9dd6cecf806484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/964e0691be3262d4864aa5d97e9dd6cecf806484", "html_url": "https://github.com/rust-lang/rust/commit/964e0691be3262d4864aa5d97e9dd6cecf806484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/964e0691be3262d4864aa5d97e9dd6cecf806484/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "accfdcc9055a1831f67db7affad5bb82752dabbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/accfdcc9055a1831f67db7affad5bb82752dabbf", "html_url": "https://github.com/rust-lang/rust/commit/accfdcc9055a1831f67db7affad5bb82752dabbf"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "7231fe431729e82d7a0709c408ede2b0b9e3a3b9", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/964e0691be3262d4864aa5d97e9dd6cecf806484/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964e0691be3262d4864aa5d97e9dd6cecf806484/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=964e0691be3262d4864aa5d97e9dd6cecf806484", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::BTreeMap;\n+use indexed_vec::{Idx, IndexVec};\n use std::collections::btree_map::Entry;\n-use std::marker::PhantomData;\n+use std::collections::BTreeMap;\n use std::iter::FromIterator;\n-use indexed_vec::{Idx, IndexVec};\n+use std::marker::PhantomData;\n \n type Word = u128;\n const WORD_BITS: usize = 128;\n@@ -317,14 +317,25 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n         if read != write {\n             let (bit_set_read, bit_set_write) = self.vector.pick2_mut(read, write);\n \n-            for read_val in bit_set_read.iter() {\n-                changed = changed | bit_set_write.insert(read_val);\n+            for read_chunk in bit_set_read.chunks() {\n+                changed = changed | bit_set_write.insert_chunk(read_chunk).any();\n             }\n         }\n \n         changed\n     }\n \n+    /// True if `sub` is a subset of `sup`\n+    pub fn subset(&self, sub: R, sup: R) -> bool {\n+        sub == sup || {\n+            let bit_set_sub = &self.vector[sub];\n+            let bit_set_sup = &self.vector[sup];\n+            bit_set_sub\n+                .chunks()\n+                .all(|read_chunk| read_chunk.bits_eq(bit_set_sup.contains_chunk(read_chunk)))\n+        }\n+    }\n+\n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n     pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {\n@@ -346,6 +357,7 @@ pub struct SparseChunk<I> {\n }\n \n impl<I: Idx> SparseChunk<I> {\n+    #[inline]\n     pub fn one(index: I) -> Self {\n         let index = index.index();\n         let key_usize = index / 128;\n@@ -358,10 +370,16 @@ impl<I: Idx> SparseChunk<I> {\n         }\n     }\n \n+    #[inline]\n     pub fn any(&self) -> bool {\n         self.bits != 0\n     }\n \n+    #[inline]\n+    pub fn bits_eq(&self, other: SparseChunk<I>) -> bool {\n+        self.bits == other.bits\n+    }\n+\n     pub fn iter(&self) -> impl Iterator<Item = I> {\n         let base = self.key as usize * 128;\n         let mut bits = self.bits;\n@@ -394,6 +412,10 @@ impl<I: Idx> SparseBitSet<I> {\n         self.chunk_bits.len() * 128\n     }\n \n+    /// Returns a chunk containing only those bits that are already\n+    /// present. You can test therefore if `self` contains all the\n+    /// bits in chunk already by doing `chunk ==\n+    /// self.contains_chunk(chunk)`.\n     pub fn contains_chunk(&self, chunk: SparseChunk<I>) -> SparseChunk<I> {\n         SparseChunk {\n             bits: self.chunk_bits\n@@ -403,6 +425,11 @@ impl<I: Idx> SparseBitSet<I> {\n         }\n     }\n \n+    /// Modifies `self` to contain all the bits from `chunk` (in\n+    /// addition to any pre-existing bits); returns a new chunk that\n+    /// contains only those bits that were newly added. You can test\n+    /// if anything was inserted by invoking `any()` on the returned\n+    /// value.\n     pub fn insert_chunk(&mut self, chunk: SparseChunk<I>) -> SparseChunk<I> {\n         if chunk.bits == 0 {\n             return chunk;"}]}