{"sha": "cff04117064ddee95f425c49f22c8aa5a3a665d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjA0MTE3MDY0ZGRlZTk1ZjQyNWM0OWYyMmM4YWE1YTNhNjY1ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T21:34:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T21:34:34Z"}, "message": "Auto merge of #28476 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28276, #28314, #28422, #28435, #28451, #28466, #28470, #28471, #28473, #28474\n- Failed merges:", "tree": {"sha": "3b188dd67face21fafd7cc72dcdb9ede4263e25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b188dd67face21fafd7cc72dcdb9ede4263e25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff04117064ddee95f425c49f22c8aa5a3a665d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff04117064ddee95f425c49f22c8aa5a3a665d4", "html_url": "https://github.com/rust-lang/rust/commit/cff04117064ddee95f425c49f22c8aa5a3a665d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff04117064ddee95f425c49f22c8aa5a3a665d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06812f57ba389365b6ab9aa5ef5ce6782182cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06812f57ba389365b6ab9aa5ef5ce6782182cb9", "html_url": "https://github.com/rust-lang/rust/commit/a06812f57ba389365b6ab9aa5ef5ce6782182cb9"}, {"sha": "5faff5dbde23b1bb928a30c2b3b9d2dd5ec3a261", "url": "https://api.github.com/repos/rust-lang/rust/commits/5faff5dbde23b1bb928a30c2b3b9d2dd5ec3a261", "html_url": "https://github.com/rust-lang/rust/commit/5faff5dbde23b1bb928a30c2b3b9d2dd5ec3a261"}], "stats": {"total": 246, "additions": 142, "deletions": 104}, "files": [{"sha": "18feebf3d5689f7b73ac5a5350d2be8b207a898b", "filename": "src/doc/reference.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -2762,7 +2762,7 @@ The following expressions are equivalent.\n let x = std::ops::Range {start: 0, end: 10};\n let y = 0..10;\n \n-assert_eq!(x,y);\n+assert_eq!(x, y);\n ```\n \n ### Unary operator expressions\n@@ -3035,18 +3035,18 @@ A `loop` expression may optionally have a _label_. The label is written as\n a lifetime preceding the loop expression, as in `'foo: loop{ }`. If a\n label is present, then labeled `break` and `continue` expressions nested\n within this loop may exit out of this loop or return control to its head.\n-See [Break expressions](#break-expressions) and [Continue\n+See [break expressions](#break-expressions) and [continue\n expressions](#continue-expressions).\n \n-### Break expressions\n+### `break` expressions\n \n A `break` expression has an optional _label_. If the label is absent, then\n executing a `break` expression immediately terminates the innermost loop\n enclosing it. It is only permitted in the body of a loop. If the label is\n present, then `break 'foo` terminates the loop with label `'foo`, which need not\n be the innermost label enclosing the `break` expression, but must enclose it.\n \n-### Continue expressions\n+### `continue` expressions\n \n A `continue` expression has an optional _label_. If the label is absent, then\n executing a `continue` expression immediately terminates the current iteration\n@@ -3059,7 +3059,7 @@ innermost label enclosing the `break` expression, but must enclose it.\n \n A `continue` expression is only permitted in the body of a loop.\n \n-### While loops\n+### `while` loops\n \n A `while` loop begins by evaluating the boolean loop conditional expression.\n If the loop conditional expression evaluates to `true`, the loop body block\n@@ -3082,12 +3082,12 @@ Like `loop` expressions, `while` loops can be controlled with `break` or\n loops](#infinite-loops), [break expressions](#break-expressions), and\n [continue expressions](#continue-expressions) for more information.\n \n-### For expressions\n+### `for` expressions\n \n A `for` expression is a syntactic construct for looping over elements provided\n by an implementation of `std::iter::IntoIterator`.\n \n-An example of a for loop over the contents of an array:\n+An example of a `for` loop over the contents of an array:\n \n ```\n # type Foo = i32;\n@@ -3117,7 +3117,7 @@ Like `loop` expressions, `for` loops can be controlled with `break` or\n loops](#infinite-loops), [break expressions](#break-expressions), and\n [continue expressions](#continue-expressions) for more information.\n \n-### If expressions\n+### `if` expressions\n \n An `if` expression is a conditional branch in program control. The form of an\n `if` expression is a condition expression, followed by a consequent block, any\n@@ -3129,7 +3129,7 @@ evaluates to `false`, the consequent block is skipped and any subsequent `else\n if` condition is evaluated. If all `if` and `else if` conditions evaluate to\n `false` then any `else` block is executed.\n \n-### Match expressions\n+### `match` expressions\n \n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n@@ -3235,7 +3235,7 @@ let message = match maybe_digit {\n };\n ```\n \n-### If let expressions\n+### `if let` expressions\n \n An `if let` expression is semantically identical to an `if` expression but in place\n of a condition expression it expects a refutable let statement. If the value of the\n@@ -3256,15 +3256,15 @@ if let (\"Ham\", b) = dish {\n }\n ```\n \n-### While let loops\n+### `while let` loops\n \n A `while let` loop is semantically identical to a `while` loop but in place of a\n condition expression it expects a refutable let statement. If the value of the\n expression on the right hand side of the let statement matches the pattern, the\n loop body block executes and control returns to the pattern matching statement.\n Otherwise, the while expression completes.\n \n-### Return expressions\n+### `return` expressions\n \n Return expressions are denoted with the keyword `return`. Evaluating a `return`\n expression moves its argument into the designated output location for the"}, {"sha": "230eb0a85ab0f1242412df0913b95f3d6d918c8f", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -87,7 +87,9 @@ thread '<main>' panicked at 'Invalid number: 11', src/bin/panic-simple.rs:5\n Here's another example that is slightly less contrived. A program that accepts\n an integer as an argument, doubles it and prints it.\n \n+<a name=\"code-unwrap-double\"/>\n ```rust,should_panic\n+\n use std::env;\n \n fn main() {\n@@ -120,7 +122,7 @@ It would be better if we just showed the code for unwrapping because it is so\n simple, but to do that, we will first need to explore the `Option` and `Result`\n types. Both of these types have a method called `unwrap` defined on them.\n \n-## The `Option` type\n+### The `Option` type\n \n The `Option` type is [defined in the standard library][5]:\n \n@@ -137,6 +139,7 @@ system is an important concept because it will cause the compiler to force the\n programmer to handle that absence. Let's take a look at an example that tries\n to find a character in a string:\n \n+<a name=\"code-option-ex-string-find\"/>\n ```rust\n // Searches `haystack` for the Unicode character `needle`. If one is found, the\n // byte offset of the character is returned. Otherwise, `None` is returned."}, {"sha": "3a4328562f87278649e025ea1c7d2ce3d73bacbe", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -599,7 +599,7 @@ With this definition, anything of type `Foo` can be either a\n `Foo::Bar` or a `Foo::Baz`. We use the `::` to indicate the\n namespace for a particular `enum` variant.\n \n-The [`Ordering`][ordering] enum has three possible variants: `Less`, `Equal`,\n+The [`Ordering`][ordering] `enum` has three possible variants: `Less`, `Equal`,\n and `Greater`. The `match` statement takes a value of a type, and lets you\n create an \u2018arm\u2019 for each possible value. Since we have three types of\n `Ordering`, we have three arms:\n@@ -918,9 +918,9 @@ let guess: u32 = match guess.trim().parse() {\n \n This is how you generally move from \u2018crash on error\u2019 to \u2018actually handle the\n error\u2019, by switching from `ok().expect()` to a `match` statement. The `Result`\n-returned by `parse()` is an enum just like `Ordering`, but in this case, each\n+returned by `parse()` is an `enum` just like `Ordering`, but in this case, each\n variant has some data associated with it: `Ok` is a success, and `Err` is a\n-failure. Each contains more information: the successful parsed integer, or an\n+failure. Each contains more information: the successfully parsed integer, or an\n error type. In this case, we `match` on `Ok(num)`, which sets the inner value\n of the `Ok` to the name `num`, and then we just return it on the right-hand\n side. In the `Err` case, we don\u2019t care what kind of error it is, so we just"}, {"sha": "366069ac9a3bfd5c9b463c33da207220667cce42", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -64,7 +64,7 @@ Oh, we should also mention the officially supported platforms:\n \n * Windows (7, 8, Server 2008 R2)\n * Linux (2.6.18 or later, various distributions), x86 and x86-64\n-* OSX 10.7 (Lion) or greater, x86 and x86-64\n+* OSX 10.7 (Lion) or later, x86 and x86-64\n \n We extensively test Rust on these platforms, and a few others, too, like\n Android. But these are the ones most likely to work, as they have the most"}, {"sha": "aca736ef2ac3b63848cef087a7f7168e05ff2ece", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -217,18 +217,18 @@ on the heap. The actual value of the box is a structure which has a pointer to\n it allocates some memory for the heap, and puts `5` there. The memory now looks\n like this:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 5                |\n-| ...             | ...  | ...              |\n-| 1               | y    | 42               |\n-| 0               | x    | \u2192 2<sup>30</sup> |\n-\n-We have 2<sup>30</sup> in our hypothetical computer with 1GB of RAM. And since\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n+| ...                  | ...  | ...                    |\n+| 1                    | y    | 42                     |\n+| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n+\n+We have (2<sup>30</sup>) - 1 in our hypothetical computer with 1GB of RAM. And since\n our stack grows from zero, the easiest place to allocate memory is from the\n other end. So our first value is at the highest place in memory. And the value\n of the struct at `x` has a [raw pointer][rawpointer] to the place we\u2019ve\n-allocated on the heap, so the value of `x` is 2<sup>30</sup>, the memory\n+allocated on the heap, so the value of `x` is (2<sup>30</sup>) - 1, the memory\n location we\u2019ve asked for.\n \n [rawpointer]: raw-pointers.html\n@@ -244,18 +244,18 @@ layout of a program which has been running for a while now:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-| 2<sup>30</sup>       |      | 5                      |\n-| (2<sup>30</sup>) - 1 |      |                        |\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n | (2<sup>30</sup>) - 2 |      |                        |\n-| (2<sup>30</sup>) - 3 |      | 42                     |\n+| (2<sup>30</sup>) - 3 |      |                        |\n+| (2<sup>30</sup>) - 4 |      | 42                     |\n | ...                  | ...  | ...                    |\n-| 3                    | y    | \u2192 (2<sup>30</sup>) - 3 |\n+| 3                    | y    | \u2192 (2<sup>30</sup>) - 4 |\n | 2                    | y    | 42                     |\n | 1                    | y    | 42                     |\n-| 0                    | x    | \u2192 2<sup>30</sup>       |\n+| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n \n In this case, we\u2019ve allocated four things on the heap, but deallocated two of\n-them. There\u2019s a gap between 2<sup>30</sup> and (2<sup>30</sup>) - 3 which isn\u2019t\n+them. There\u2019s a gap between (2<sup>30</sup>) - 1 and (2<sup>30</sup>) - 4 which isn\u2019t\n currently being used. The specific details of how and why this happens depends\n on what kind of strategy you use to manage the heap. Different programs can use\n different \u2018memory allocators\u2019, which are libraries that manage this for you.\n@@ -366,105 +366,105 @@ fn main() {\n \n First, we call `main()`:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n We allocate memory for `j`, `i`, and `h`. `i` is on the heap, and so has a\n value pointing there.\n \n Next, at the end of `main()`, `foo()` gets called:\n \n-| Address         | Name | Value           |\n-|-----------------|------|-----------------|\n-| 2<sup>30</sup>  |      | 20              |\n-| ...             | ...  | ...             |\n-| 5               | z    | \u2192 4             |\n-| 4               | y    | 10              |\n-| 3               | x    | \u2192 0             |\n-| 2               | j    | \u2192 0             |\n-| 1               | i    | \u2192 2<sup>30</sup>|\n-| 0               | h    | 3               |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n Space gets allocated for `x`, `y`, and `z`. The argument `x` has the same value\n as `j`, since that\u2019s what we passed it in. It\u2019s a pointer to the `0` address,\n since `j` points at `h`.\n \n Next, `foo()` calls `baz()`, passing `z`:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 7               | g    | 100              |\n-| 6               | f    | \u2192 4              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 7                    | g    | 100                    |\n+| 6                    | f    | \u2192 4                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n We\u2019ve allocated memory for `f` and `g`. `baz()` is very short, so when it\u2019s\n over, we get rid of its stack frame:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-| 2<sup>30</sup>  |      | 20               |\n-| ...             | ...  | ...              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n Next, `foo()` calls `bar()` with `x` and `z`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n We end up allocating another value on the heap, and so we have to subtract one\n-from 2<sup>30</sup>. It\u2019s easier to just write that than `1,073,741,823`. In any\n+from (2<sup>30</sup>) - 1. It\u2019s easier to just write that than `1,073,741,822`. In any\n case, we set up the variables as usual.\n \n At the end of `bar()`, it calls `baz()`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 12                   | g    | 100                    |\n | 11                   | f    | \u2192 9                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n With this, we\u2019re at our deepest point! Whew! Congrats for following along this\n@@ -474,44 +474,44 @@ After `baz()` is over, we get rid of `f` and `g`:\n \n | Address              | Name | Value                  |\n |----------------------|------|------------------------|\n-|  2<sup>30</sup>      |      | 20                     |\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| (2<sup>30</sup>) - 2 |      | 5                      |\n | ...                  | ...  | ...                    |\n | 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n | 8                    | c    | 5                      |\n | 7                    | b    | \u2192 4                    |\n | 6                    | a    | \u2192 0                    |\n | 5                    | z    | \u2192 4                    |\n | 4                    | y    | 10                     |\n | 3                    | x    | \u2192 0                    |\n | 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n | 0                    | h    | 3                      |\n \n Next, we return from `bar()`. `d` in this case is a `Box<T>`, so it also frees\n-what it points to: (2<sup>30</sup>) - 1.\n-\n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-|  2<sup>30</sup> |      | 20               |\n-| ...             | ...  | ...              |\n-| 5               | z    | \u2192 4              |\n-| 4               | y    | 10               |\n-| 3               | x    | \u2192 0              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+what it points to: (2<sup>30</sup>) - 2.\n+\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n And after that, `foo()` returns:\n \n-| Address         | Name | Value            |\n-|-----------------|------|------------------|\n-|  2<sup>30</sup> |      | 20               |\n-| ...             | ...  | ...              |\n-| 2               | j    | \u2192 0              |\n-| 1               | i    | \u2192 2<sup>30</sup> |\n-| 0               | h    | 3                |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| (2<sup>30</sup>) - 1 |      | 20                     |\n+| ...                  | ...  | ...                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n+| 0                    | h    | 3                      |\n \n And then, finally, `main()`, which cleans the rest up. When `i` is `Drop`ped,\n it will clean up the last of the heap too."}, {"sha": "5f0eb63edbc45128351a41bc2038f11e29b2f6e8", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -94,7 +94,7 @@ use fmt;\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n-    /// The `drop` method, called when the value goes out of scope.\n+    /// A method called when the value goes out of scope.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn drop(&mut self);\n }"}, {"sha": "0f72dcc1281a4581737c44cfeeeb369583d32665", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -92,6 +92,7 @@ impl Default for AtomicBool {\n     }\n }\n \n+// Send is implicitly implemented for AtomicBool.\n unsafe impl Sync for AtomicBool {}\n \n /// A signed integer type which can be safely shared between threads.\n@@ -106,6 +107,7 @@ impl Default for AtomicIsize {\n     }\n }\n \n+// Send is implicitly implemented for AtomicIsize.\n unsafe impl Sync for AtomicIsize {}\n \n /// An unsigned integer type which can be safely shared between threads.\n@@ -120,6 +122,7 @@ impl Default for AtomicUsize {\n     }\n }\n \n+// Send is implicitly implemented for AtomicUsize.\n unsafe impl Sync for AtomicUsize {}\n \n /// A raw pointer type which can be safely shared between threads."}, {"sha": "440a4184780cd9db055b6f33c6f7fb232d9da648", "filename": "src/test/run-pass/issue-24533.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Ftest%2Frun-pass%2Fissue-24533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff04117064ddee95f425c49f22c8aa5a3a665d4/src%2Ftest%2Frun-pass%2Fissue-24533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24533.rs?ref=cff04117064ddee95f425c49f22c8aa5a3a665d4", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::slice::Iter;\n+use std::io::{Error, ErrorKind, Result};\n+use std::vec::*;\n+\n+fn foo(it: &mut Iter<u8>) -> Result<u8> {\n+    Ok(*it.next().unwrap())\n+}\n+\n+fn bar() -> Result<u8> {\n+    let data: Vec<u8> = Vec::new();\n+\n+    if true {\n+        return Err(Error::new(ErrorKind::NotFound, \"msg\"));\n+    }\n+\n+    let mut it = data.iter();\n+    foo(&mut it)\n+}\n+\n+fn main() {\n+    bar();\n+}"}]}