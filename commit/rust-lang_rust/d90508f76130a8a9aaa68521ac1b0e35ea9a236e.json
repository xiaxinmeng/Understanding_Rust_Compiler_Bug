{"sha": "d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "node_id": "C_kwDOAAsO6NoAKGQ5MDUwOGY3NjEzMGE4YTlhYWE2ODUyMWFjMWIwZTM1ZWE5YTIzNmU", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-06-12T12:06:24Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-06-14T20:22:41Z"}, "message": "use indexed loop instead of ptr bumping\n\nthis seems to produce less IR", "tree": {"sha": "dd0db39597d6d6be0ca556c02c9ffd6a849bc995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0db39597d6d6be0ca556c02c9ffd6a849bc995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "html_url": "https://github.com/rust-lang/rust/commit/d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d90508f76130a8a9aaa68521ac1b0e35ea9a236e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5b2f0b4b71662663a224f685b2b808d9c8f99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5b2f0b4b71662663a224f685b2b808d9c8f99a", "html_url": "https://github.com/rust-lang/rust/commit/ba5b2f0b4b71662663a224f685b2b808d9c8f99a"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "96a145e22ed5d9f0d9ae1004ac62b2b60e49f2ee", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d90508f76130a8a9aaa68521ac1b0e35ea9a236e/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90508f76130a8a9aaa68521ac1b0e35ea9a236e/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "patch": "@@ -192,23 +192,33 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+            fn fold<B, F>(self, init: B, mut f: F) -> B\n                 where\n                     F: FnMut(B, Self::Item) -> B,\n             {\n-                // Handling the 0-len case explicitly and then using a do-while style loop\n-                // helps the optimizer. See issue #106288\n+                // this implementation consists of the following optimizations compared to the\n+                // default implementation:\n+                // - do-while loop, as is llvm's preferred loop shape,\n+                //   see https://releases.llvm.org/16.0.0/docs/LoopTerminology.html#more-canonical-loops\n+                // - bumps an index instead of a pointer since the latter case inhibits\n+                //   some optimizations, see #111603\n+                // - avoids Option wrapping/matching\n                 if is_empty!(self) {\n                     return init;\n                 }\n                 let mut acc = init;\n-                // SAFETY: The 0-len case was handled above so one loop iteration is guaranteed.\n-                unsafe {\n-                    loop {\n-                        acc = f(acc, next_unchecked!(self));\n-                        if is_empty!(self) {\n-                            break;\n-                        }\n+                let mut i = 0;\n+                let len = len!(self);\n+                loop {\n+                    // SAFETY: the loop iterates `i in 0..len`, which always is in bounds of\n+                    // the slice allocation\n+                    acc = f(acc, unsafe { & $( $mut_ )? *self.ptr.add(i).as_ptr() });\n+                    // SAFETY: `i` can't overflow since it'll only reach usize::MAX if the\n+                    // slice had that length, in which case we'll break out of the loop\n+                    // after the increment\n+                    i = unsafe { i.unchecked_add(1) };\n+                    if i == len {\n+                        break;\n                     }\n                 }\n                 acc"}, {"sha": "14fef4e2cd55a622cb62e8cf325605c76f17ad6d", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d90508f76130a8a9aaa68521ac1b0e35ea9a236e/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90508f76130a8a9aaa68521ac1b0e35ea9a236e/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=d90508f76130a8a9aaa68521ac1b0e35ea9a236e", "patch": "@@ -37,14 +37,6 @@ pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n // CHECK-LABEL: @issue75636\n #[no_mangle]\n pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n-    // CHECK-NOT: panic\n-\n-    // Call to panic_cannot_unwind in case of double-panic is expected,\n-    // on LLVM 16 and older, but other panics are not.\n-    // old: filter\n-    // old-NEXT: ; call core::panicking::panic_cannot_unwind\n-    // old-NEXT: panic_cannot_unwind\n-\n     // CHECK-NOT: panic\n     iter.iter().copied().collect()\n }"}]}