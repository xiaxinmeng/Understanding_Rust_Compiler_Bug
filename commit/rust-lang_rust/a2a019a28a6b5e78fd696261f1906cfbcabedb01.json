{"sha": "a2a019a28a6b5e78fd696261f1906cfbcabedb01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYTAxOWEyOGE2YjVlNzhmZDY5NjI2MWYxOTA2Y2ZiY2FiZWRiMDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-21T19:26:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-21T20:38:35Z"}, "message": "do not introduce *false* results from lifetime resolution", "tree": {"sha": "ebfe7695186ef794fa662672bd7148f441ed8733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebfe7695186ef794fa662672bd7148f441ed8733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a019a28a6b5e78fd696261f1906cfbcabedb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a019a28a6b5e78fd696261f1906cfbcabedb01", "html_url": "https://github.com/rust-lang/rust/commit/a2a019a28a6b5e78fd696261f1906cfbcabedb01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a019a28a6b5e78fd696261f1906cfbcabedb01/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36917b33104dc0af4d26d53899b7cd064a40b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36917b33104dc0af4d26d53899b7cd064a40b22", "html_url": "https://github.com/rust-lang/rust/commit/b36917b33104dc0af4d26d53899b7cd064a40b22"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "abc81689df242ca120be1a1a4d1572c4fac79289", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a2a019a28a6b5e78fd696261f1906cfbcabedb01", "patch": "@@ -632,8 +632,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     // and ban them. Type variables instantiated inside binders aren't\n                     // well-supported at the moment, so this doesn't work.\n                     // In the future, this should be fixed and this error should be removed.\n-                    let def = self.map.defs.get(&lifetime.id);\n-                    if let Some(&Region::LateBound(_, def_id, _)) = def {\n+                    let def = self.map.defs.get(&lifetime.id).cloned();\n+                    if let Some(Region::LateBound(_, def_id, _)) = def {\n                         if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n                             // Ensure that the parent of the def is an item, not HRTB\n                             let parent_id = self.tcx.hir.get_parent_node(node_id);\n@@ -651,6 +651,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                     \"`impl Trait` can only capture lifetimes \\\n                                      bound at the fn or impl level\"\n                                 );\n+                                self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                             }\n                         }\n                     }\n@@ -2377,6 +2378,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Sometimes we resolve a lifetime, but later find that it is an\n+    /// error (esp. around impl trait). In that case, we remove the\n+    /// entry into `map.defs` so as not to confuse later code.\n+    fn uninsert_lifetime_on_error(&mut self, lifetime_ref: &'tcx hir::Lifetime, bad_def: Region) {\n+        let old_value = self.map.defs.remove(&lifetime_ref.id);\n+        assert_eq!(old_value, Some(bad_def));\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "05a4b8b3544f5dc1932017abf18d767305525af7", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=a2a019a28a6b5e78fd696261f1906cfbcabedb01", "patch": "@@ -19,7 +19,7 @@ fn free_fn_capture_hrtb_in_impl_trait()\n     -> Box<for<'a> Id<impl Lt<'a>>>\n         //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level [E0657]\n {\n-    ()\n+    () //~ ERROR mismatched types\n }\n \n struct Foo;\n@@ -28,7 +28,7 @@ impl Foo {\n         -> Box<for<'a> Id<impl Lt<'a>>>\n             //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level\n     {\n-        ()\n+        () //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "23b9666de3cd9f0ea1e059125172bbb43825d062", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2a019a28a6b5e78fd696261f1906cfbcabedb01/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=a2a019a28a6b5e78fd696261f1906cfbcabedb01", "patch": "@@ -10,6 +10,25 @@ error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl le\n LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n    |                                   ^^\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/E0657.rs:22:5\n+   |\n+LL |     () //~ ERROR mismatched types\n+   |     ^^ expected struct `std::boxed::Box`, found ()\n+   |\n+   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0657.rs:31:9\n+   |\n+LL |         () //~ ERROR mismatched types\n+   |         ^^ expected struct `std::boxed::Box`, found ()\n+   |\n+   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+              found type `()`\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0657`.\n+Some errors occurred: E0308, E0657.\n+For more information about an error, try `rustc --explain E0308`."}]}