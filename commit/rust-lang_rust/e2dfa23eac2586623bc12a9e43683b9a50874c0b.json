{"sha": "e2dfa23eac2586623bc12a9e43683b9a50874c0b", "node_id": "C_kwDOAAsO6NoAKGUyZGZhMjNlYWMyNTg2NjIzYmMxMmE5ZTQzNjgzYjlhNTA4NzRjMGI", "commit": {"author": {"name": "Oliver Downard", "email": "odownard.trade@gmail.com", "date": "2022-03-14T21:07:19Z"}, "committer": {"name": "Oliver Downard", "email": "odownard.trade@gmail.com", "date": "2022-04-03T15:38:57Z"}, "message": "Improve method name suggestions\n\nAttempts to improve method name suggestions when a matching method name\nis not found. The approach taken is use the Levenshtein distance and\naccount for substrings having a high distance but can sometimes be very\nclose to the intended method (eg. empty vs is_empty).", "tree": {"sha": "f75ef8894ced6dcd2fdc02fd663259d24cbe5b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75ef8894ced6dcd2fdc02fd663259d24cbe5b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2dfa23eac2586623bc12a9e43683b9a50874c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2dfa23eac2586623bc12a9e43683b9a50874c0b", "html_url": "https://github.com/rust-lang/rust/commit/e2dfa23eac2586623bc12a9e43683b9a50874c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2dfa23eac2586623bc12a9e43683b9a50874c0b/comments", "author": {"login": "OliverMD", "id": 4549075, "node_id": "MDQ6VXNlcjQ1NDkwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4549075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OliverMD", "html_url": "https://github.com/OliverMD", "followers_url": "https://api.github.com/users/OliverMD/followers", "following_url": "https://api.github.com/users/OliverMD/following{/other_user}", "gists_url": "https://api.github.com/users/OliverMD/gists{/gist_id}", "starred_url": "https://api.github.com/users/OliverMD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OliverMD/subscriptions", "organizations_url": "https://api.github.com/users/OliverMD/orgs", "repos_url": "https://api.github.com/users/OliverMD/repos", "events_url": "https://api.github.com/users/OliverMD/events{/privacy}", "received_events_url": "https://api.github.com/users/OliverMD/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OliverMD", "id": 4549075, "node_id": "MDQ6VXNlcjQ1NDkwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4549075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OliverMD", "html_url": "https://github.com/OliverMD", "followers_url": "https://api.github.com/users/OliverMD/followers", "following_url": "https://api.github.com/users/OliverMD/following{/other_user}", "gists_url": "https://api.github.com/users/OliverMD/gists{/gist_id}", "starred_url": "https://api.github.com/users/OliverMD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OliverMD/subscriptions", "organizations_url": "https://api.github.com/users/OliverMD/orgs", "repos_url": "https://api.github.com/users/OliverMD/repos", "events_url": "https://api.github.com/users/OliverMD/events{/privacy}", "received_events_url": "https://api.github.com/users/OliverMD/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a242a432c9c40a60def102209a5d40900b7b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a242a432c9c40a60def102209a5d40900b7b9d", "html_url": "https://github.com/rust-lang/rust/commit/15a242a432c9c40a60def102209a5d40900b7b9d"}], "stats": {"total": 114, "additions": 104, "deletions": 10}, "files": [{"sha": "61e4b98a8d28bbda31d873b007217a5a2fc5e350", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -46,6 +46,62 @@ pub fn lev_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n     (dcol[m] <= limit).then_some(dcol[m])\n }\n \n+/// Provides a word similarity score between two words that accounts for substrings being more\n+/// meaningful than a typical Levenshtein distance. The lower the score, the closer the match.\n+/// 0 is an identical match.\n+///\n+/// Uses the Levenshtein distance between the two strings and removes the cost of the length\n+/// difference. If this is 0 then it is either a substring match or a full word match, in the\n+/// substring match case we detect this and return `1`. To prevent finding meaningless substrings,\n+/// eg. \"in\" in \"shrink\", we only perform this subtraction of length difference if one of the words\n+/// is not greater than twice the length of the other. For cases where the words are close in size\n+/// but not an exact substring then the cost of the length difference is discounted by half.\n+///\n+/// Returns `None` if the distance exceeds the limit.\n+pub fn lev_distance_with_substrings(a: &str, b: &str, limit: usize) -> Option<usize> {\n+    let n = a.chars().count();\n+    let m = b.chars().count();\n+\n+    // Check one isn't less than half the length of the other. If this is true then there is a\n+    // big difference in length.\n+    let big_len_diff = (n * 2) < m || (m * 2) < n;\n+    let len_diff = if n < m { m - n } else { n - m };\n+    let lev = lev_distance(a, b, limit + len_diff)?;\n+\n+    // This is the crux, subtracting length difference means exact substring matches will now be 0\n+    let score = lev - len_diff;\n+\n+    // If the score is 0 but the words have different lengths then it's a substring match not a full\n+    // word match\n+    let score = if score == 0 && len_diff > 0 && !big_len_diff {\n+        1 // Exact substring match, but not a total word match so return non-zero\n+    } else if !big_len_diff {\n+        // Not a big difference in length, discount cost of length difference\n+        score + (len_diff + 1) / 2\n+    } else {\n+        // A big difference in length, add back the difference in length to the score\n+        score + len_diff\n+    };\n+\n+    (score <= limit).then_some(score)\n+}\n+\n+/// Finds the best match for given word in the given iterator where substrings are meaningful.\n+///\n+/// A version of [`find_best_match_for_name`] that uses [`lev_distance_with_substrings`] as the score\n+/// for word similarity. This takes an optional distance limit which defaults to one-third of the\n+/// given word.\n+///\n+/// Besides the modified Levenshtein, we use case insensitive comparison to improve accuracy\n+/// on an edge case with a lower(upper)case letters mismatch.\n+pub fn find_best_match_for_name_with_substrings(\n+    candidates: &[Symbol],\n+    lookup: Symbol,\n+    dist: Option<usize>,\n+) -> Option<Symbol> {\n+    find_best_match_for_name_impl(true, candidates, lookup, dist)\n+}\n+\n /// Finds the best match for a given word in the given iterator.\n ///\n /// As a loose rule to avoid the obviously incorrect suggestions, it takes\n@@ -54,11 +110,20 @@ pub fn lev_distance(a: &str, b: &str, limit: usize) -> Option<usize> {\n ///\n /// Besides Levenshtein, we use case insensitive comparison to improve accuracy\n /// on an edge case with a lower(upper)case letters mismatch.\n-#[cold]\n pub fn find_best_match_for_name(\n     candidates: &[Symbol],\n     lookup: Symbol,\n     dist: Option<usize>,\n+) -> Option<Symbol> {\n+    find_best_match_for_name_impl(false, candidates, lookup, dist)\n+}\n+\n+#[cold]\n+fn find_best_match_for_name_impl(\n+    use_substring_score: bool,\n+    candidates: &[Symbol],\n+    lookup: Symbol,\n+    dist: Option<usize>,\n ) -> Option<Symbol> {\n     let lookup = lookup.as_str();\n     let lookup_uppercase = lookup.to_uppercase();\n@@ -74,7 +139,11 @@ pub fn find_best_match_for_name(\n     let mut dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n     let mut best = None;\n     for c in candidates {\n-        match lev_distance(lookup, c.as_str(), dist) {\n+        match if use_substring_score {\n+            lev_distance_with_substrings(lookup, c.as_str(), dist)\n+        } else {\n+            lev_distance(lookup, c.as_str(), dist)\n+        } {\n             Some(0) => return Some(*c),\n             Some(d) => {\n                 dist = d - 1;"}, {"sha": "b17d6588c9f06dfe998a6b654749d6d7e8de8ca5", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -27,6 +27,17 @@ fn test_lev_distance_limit() {\n     assert_eq!(lev_distance(\"abc\", \"xyz\", 2), None);\n }\n \n+#[test]\n+fn test_method_name_similarity_score() {\n+    assert_eq!(lev_distance_with_substrings(\"empty\", \"is_empty\", 1), Some(1));\n+    assert_eq!(lev_distance_with_substrings(\"shrunk\", \"rchunks\", 2), None);\n+    assert_eq!(lev_distance_with_substrings(\"abc\", \"abcd\", 1), Some(1));\n+    assert_eq!(lev_distance_with_substrings(\"a\", \"abcd\", 1), None);\n+    assert_eq!(lev_distance_with_substrings(\"edf\", \"eq\", 1), None);\n+    assert_eq!(lev_distance_with_substrings(\"abc\", \"xyz\", 3), Some(3));\n+    assert_eq!(lev_distance_with_substrings(\"abcdef\", \"abcdef\", 2), Some(0));\n+}\n+\n #[test]\n fn test_find_best_match_for_name() {\n     use crate::create_default_session_globals_then;"}, {"sha": "6cae7ab1221d1f6214b5bc9ecee45ea9fb2596ce", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -24,7 +24,9 @@ use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};\n+use rustc_span::lev_distance::{\n+    find_best_match_for_name_with_substrings, lev_distance_with_substrings,\n+};\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -1699,7 +1701,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         .iter()\n                         .map(|cand| cand.name)\n                         .collect::<Vec<Symbol>>();\n-                    find_best_match_for_name(&names, self.method_name.unwrap().name, None)\n+                    find_best_match_for_name_with_substrings(\n+                        &names,\n+                        self.method_name.unwrap().name,\n+                        None,\n+                    )\n                 }\n                 .unwrap();\n                 Ok(applicable_close_candidates.into_iter().find(|method| method.name == best_name))\n@@ -1856,7 +1862,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         if x.kind.namespace() != Namespace::ValueNS {\n                             return false;\n                         }\n-                        match lev_distance(name.as_str(), x.name.as_str(), max_dist) {\n+                        match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n+                        {\n                             Some(d) => d > 0,\n                             None => false,\n                         }"}, {"sha": "d52b2b36c7bccd9d8f5d1918b085dd066457beb0", "filename": "src/test/ui/associated-item/associated-item-enum.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -17,7 +17,10 @@ LL | enum Enum { Variant }\n    | --------- variant or associated item `mispellable_trait` not found here\n ...\n LL |     Enum::mispellable_trait();\n-   |           ^^^^^^^^^^^^^^^^^ variant or associated item not found in `Enum`\n+   |           ^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           variant or associated item not found in `Enum`\n+   |           help: there is an associated function with a similar name: `misspellable`\n \n error[E0599]: no variant or associated item named `MISPELLABLE` found for enum `Enum` in the current scope\n   --> $DIR/associated-item-enum.rs:19:11"}, {"sha": "1b26d7549844bae45f6faaa18731f17a7456f88f", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -8,7 +8,7 @@ LL | struct Value(u32);\n    | doesn't satisfy `Value: Hash`\n ...\n LL |     hs.insert(Value(0));\n-   |        ^^^^^^ method cannot be called on `HashSet<Value>` due to unsatisfied trait bounds\n+   |        ^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n            `Value: Eq`"}, {"sha": "943f7748696bc11ab6d26bae9719e75b18f1cafa", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -2,7 +2,7 @@ error[E0599]: the method `as_deref_mut` exists for enum `Option<{integer}>`, but\n   --> $DIR/option-as_deref_mut.rs:2:33\n    |\n LL |     let _result = &mut Some(42).as_deref_mut();\n-   |                                 ^^^^^^^^^^^^ method cannot be called on `Option<{integer}>` due to unsatisfied trait bounds\n+   |                                 ^^^^^^^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`"}, {"sha": "aa771e4c04e85d272956c8179d5b3c7f6762be64", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -2,7 +2,7 @@ error[E0599]: the method `as_deref_mut` exists for enum `Result<{integer}, _>`,\n   --> $DIR/result-as_deref_mut.rs:2:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();\n-   |                               ^^^^^^^^^^^^ method cannot be called on `Result<{integer}, _>` due to unsatisfied trait bounds\n+   |                               ^^^^^^^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`"}, {"sha": "6454b6045e4664ac9c07df9ce169b7e9353e9230", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -45,6 +45,10 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n    |\n LL | use std::str::FromStr;\n    |\n+help: there is an associated function with a similar name\n+   |\n+LL |     let y = u32::from_str_radix(\"33\");\n+   |                  ~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9079e8f2ce7a48eae1f49de86a04e5d9d9be905d", "filename": "src/test/ui/suggestions/suggest-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2dfa23eac2586623bc12a9e43683b9a50874c0b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr?ref=e2dfa23eac2586623bc12a9e43683b9a50874c0b", "patch": "@@ -23,7 +23,7 @@ error[E0599]: no method named `count_o` found for type `u32` in the current scop\n   --> $DIR/suggest-methods.rs:28:19\n    |\n LL |     let _ = 63u32.count_o();\n-   |                   ^^^^^^^ method not found in `u32`\n+   |                   ^^^^^^^ help: there is an associated function with a similar name: `count_ones`\n \n error: aborting due to 4 previous errors\n "}]}