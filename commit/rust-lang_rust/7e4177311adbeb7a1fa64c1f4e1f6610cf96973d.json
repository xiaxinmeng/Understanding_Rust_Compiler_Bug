{"sha": "7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNDE3NzMxMWFkYmViN2ExZmE2NGMxZjRlMWY2NjEwY2Y5Njk3M2Q=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-18T00:31:00Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2019-01-22T22:45:11Z"}, "message": "Don't expose ChainState to Iterator", "tree": {"sha": "2422092f76d094b301bcfee9570ac9820727c55b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2422092f76d094b301bcfee9570ac9820727c55b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "html_url": "https://github.com/rust-lang/rust/commit/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb974df28157f205f81d59ab3fc9cb96d78bf590", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb974df28157f205f81d59ab3fc9cb96d78bf590", "html_url": "https://github.com/rust-lang/rust/commit/fb974df28157f205f81d59ab3fc9cb96d78bf590"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "573b096fb463e6860f905b366f68d62280cd5949", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "patch": "@@ -13,9 +13,14 @@ use super::super::{Iterator, DoubleEndedIterator, FusedIterator, TrustedLen};\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<A, B> {\n-    pub(in super::super) a: A,\n-    pub(in super::super) b: B,\n-    pub(in super::super) state: ChainState,\n+    a: A,\n+    b: B,\n+    state: ChainState,\n+}\n+impl<A, B> Chain<A, B> {\n+    pub(in super::super) fn new(a: A, b: B) -> Chain<A, B> {\n+        Chain { a, b, state: ChainState::Both }\n+    }\n }\n \n // The iterator protocol specifies that iteration ends with the return value\n@@ -32,7 +37,7 @@ pub struct Chain<A, B> {\n //  The fourth state (neither iterator is remaining) only occurs after Chain has\n //  returned None once, so we don't need to store this state.\n #[derive(Clone, Debug)]\n-pub(in super::super) enum ChainState {\n+enum ChainState {\n     // both front and back iterator are remaining\n     Both,\n     // only front is remaining"}, {"sha": "355f86f31ce09d8917130fc2c27dbddd55f017ef", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "patch": "@@ -13,7 +13,6 @@ mod zip;\n pub use self::chain::Chain;\n pub use self::flatten::{FlatMap, Flatten};\n pub use self::zip::Zip;\n-pub(super) use self::chain::ChainState;\n pub(super) use self::flatten::{FlattenCompat, flatten_compat};\n pub(super) use self::zip::ZipImpl;\n pub(crate) use self::zip::TrustedRandomAccess;"}, {"sha": "209cf6d9451da69051cccce790c89b8ef4f57d97", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "patch": "@@ -353,7 +353,7 @@ pub use self::adapters::Flatten;\n #[unstable(feature = \"iter_copied\", issue = \"57127\")]\n pub use self::adapters::Copied;\n \n-use self::adapters::{flatten_compat, ChainState, ZipImpl};\n+use self::adapters::{flatten_compat, ZipImpl};\n pub(crate) use self::adapters::TrustedRandomAccess;\n \n mod range;"}, {"sha": "bb4549dc9031f643e0df0f78de3c607212ebe9f8", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4177311adbeb7a1fa64c1f4e1f6610cf96973d/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=7e4177311adbeb7a1fa64c1f4e1f6610cf96973d", "patch": "@@ -6,7 +6,7 @@ use super::super::{Chain, Cycle, Copied, Cloned, Enumerate, Filter, FilterMap, F\n use super::super::{Flatten, FlatMap, flatten_compat};\n use super::super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile, Rev};\n use super::super::{Zip, Sum, Product};\n-use super::super::{ChainState, FromIterator, ZipImpl};\n+use super::super::{FromIterator, ZipImpl};\n \n fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n \n@@ -425,7 +425,7 @@ pub trait Iterator {\n     fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter> where\n         Self: Sized, U: IntoIterator<Item=Self::Item>,\n     {\n-        Chain{a: self, b: other.into_iter(), state: ChainState::Both}\n+        Chain::new(self, other.into_iter())\n     }\n \n     /// 'Zips up' two iterators into a single iterator of pairs."}]}