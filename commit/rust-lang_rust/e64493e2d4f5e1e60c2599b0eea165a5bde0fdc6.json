{"sha": "e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDQ5M2UyZDRmNWUxZTYwYzI1OTliMGVlYTE2NWE1YmRlMGZkYzY=", "commit": {"author": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-08-02T17:46:09Z"}, "committer": {"name": "bravomikekilo", "email": "bmk1221@126.com", "date": "2019-08-02T17:46:09Z"}, "message": "add new test and add conditional whitespace", "tree": {"sha": "c9c389bcfbab3f85ddaf8f361263b9f1fd50ef1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c389bcfbab3f85ddaf8f361263b9f1fd50ef1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "html_url": "https://github.com/rust-lang/rust/commit/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/comments", "author": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bravomikekilo", "id": 17548436, "node_id": "MDQ6VXNlcjE3NTQ4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/17548436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravomikekilo", "html_url": "https://github.com/bravomikekilo", "followers_url": "https://api.github.com/users/bravomikekilo/followers", "following_url": "https://api.github.com/users/bravomikekilo/following{/other_user}", "gists_url": "https://api.github.com/users/bravomikekilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravomikekilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravomikekilo/subscriptions", "organizations_url": "https://api.github.com/users/bravomikekilo/orgs", "repos_url": "https://api.github.com/users/bravomikekilo/repos", "events_url": "https://api.github.com/users/bravomikekilo/events{/privacy}", "received_events_url": "https://api.github.com/users/bravomikekilo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12c20ccc30aebb2f5c90f04e2209ef12fe8b759", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12c20ccc30aebb2f5c90f04e2209ef12fe8b759", "html_url": "https://github.com/rust-lang/rust/commit/b12c20ccc30aebb2f5c90f04e2209ef12fe8b759"}], "stats": {"total": 823, "additions": 794, "deletions": 29}, "files": [{"sha": "5880e5935031311261a3795753983e15ee4107c9", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 67, "deletions": 28, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "patch": "@@ -15,7 +15,7 @@ use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::symbol::Symbol;\n use syntax::util::parser;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, BytePos};\n \n use rustc::hir;\n \n@@ -353,31 +353,41 @@ declare_lint! {\n declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedParens {\n+\n+    fn is_expr_parens_necessary(inner: &ast::Expr, followed_by_block: bool) -> bool {\n+        followed_by_block && match inner.node {\n+            ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n+            _ => parser::contains_exterior_struct_lit(&inner),\n+        }\n+    }\n+\n     fn check_unused_parens_expr(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Expr,\n-                                msg: &str,\n-                                followed_by_block: bool) {\n+                                     cx: &EarlyContext<'_>,\n+                                     value: &ast::Expr,\n+                                     msg: &str,\n+                                     followed_by_block: bool,\n+                                     left_pos: Option<BytePos>,\n+                                     right_pos: Option<BytePos>) {\n         match value.node {\n             ast::ExprKind::Paren(ref inner) => {\n-                let necessary = followed_by_block && match inner.node {\n-                    ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n-                    _ => parser::contains_exterior_struct_lit(&inner),\n-                };\n-                if !necessary {\n+                if !Self::is_expr_parens_necessary(inner, followed_by_block) {\n                     let expr_text = if let Ok(snippet) = cx.sess().source_map()\n                         .span_to_snippet(value.span) {\n                             snippet\n                         } else {\n                             pprust::expr_to_string(value)\n                         };\n-                    Self::remove_outer_parens(cx, value.span, &expr_text, msg);\n+                    let keep_space = (\n+                        left_pos.map(|s| s >= value.span.lo()).unwrap_or(false),\n+                        right_pos.map(|s| s <= value.span.hi()).unwrap_or(false),\n+                    );\n+                    Self::remove_outer_parens(cx, value.span, &expr_text, msg, keep_space);\n                 }\n             }\n             ast::ExprKind::Let(_, ref expr) => {\n                 // FIXME(#60336): Properly handle `let true = (false && true)`\n                 // actually needing the parenthesis.\n-                self.check_unused_parens_expr(cx, expr, \"`let` head expression\", followed_by_block);\n+                self.check_unused_parens_expr(cx, expr, \"`let` head expression\", followed_by_block, None, None);\n             }\n             _ => {}\n         }\n@@ -394,11 +404,11 @@ impl UnusedParens {\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg);\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n         }\n     }\n \n-    fn remove_outer_parens(cx: &EarlyContext<'_>, span: Span, pattern: &str, msg: &str) {\n+    fn remove_outer_parens(cx: &EarlyContext<'_>, span: Span, pattern: &str, msg: &str, keep_space: (bool, bool)) {\n         let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n         let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n         let mut ate_left_paren = false;\n@@ -427,9 +437,17 @@ impl UnusedParens {\n             });\n \n         let replace = {\n-            let mut replace = String::from(\" \");\n-            replace.push_str(parens_removed);\n-            replace.push(' ');\n+            let mut replace = if keep_space.0 {\n+                let mut s = String::from(\" \");\n+                s.push_str(parens_removed);\n+                s\n+            } else {\n+                String::from(parens_removed)\n+            };\n+\n+            if keep_space.1 {\n+                replace.push(' ');\n+            }\n             replace\n         };\n \n@@ -446,14 +464,35 @@ impl UnusedParens {\n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n-        let (value, msg, followed_by_block) = match e.node {\n-            If(ref cond, ..) => (cond, \"`if` condition\", true),\n-            While(ref cond, ..) => (cond, \"`while` condition\", true),\n-            ForLoop(_, ref cond, ..) => (cond, \"`for` head expression\", true),\n-            Match(ref head, _) => (head, \"`match` head expression\", true),\n-            Ret(Some(ref value)) => (value, \"`return` value\", false),\n-            Assign(_, ref value) => (value, \"assigned value\", false),\n-            AssignOp(.., ref value) => (value, \"assigned value\", false),\n+        let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            If(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(2);\n+                let right = block.span.lo();\n+                (cond, \"`if` condition\", true, Some(left), Some(right))\n+            }\n+\n+            While(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                let right = block.span.lo();\n+                (cond, \"`while` condition\", true, Some(left), Some(right))\n+            },\n+\n+            ForLoop(_, ref cond, ref block, ..) => {\n+                (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n+            }\n+\n+            Match(ref head, _) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                (head, \"`match` head expression\", true, Some(left), None)\n+            }\n+\n+            Ret(Some(ref value)) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(3);\n+                (value, \"`return` value\", false, Some(left), None)\n+            }\n+\n+            Assign(_, ref value) => (value, \"assigned value\", false, None, None),\n+            AssignOp(.., ref value) => (value, \"assigned value\", false, None, None),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n                 let (args_to_check, call_kind) = match *call_or_other {\n@@ -475,12 +514,12 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_expr(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false, None, None);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n+        self.check_unused_parens_expr(cx, &value, msg, followed_by_block, left_pos, right_pos);\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n@@ -500,7 +539,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }"}, {"sha": "396395a17f732b6a8a91f56e78f10d3cad8a4cd7", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "patch": "@@ -81,7 +81,7 @@\n             }\n           ],\n           \"label\": null,\n-          \"suggested_replacement\": \" 1 / (2 + 3) \",\n+          \"suggested_replacement\": \"1 / (2 + 3)\",\n           \"suggestion_applicability\": \"MachineApplicable\",\n           \"expansion\": null\n         }"}, {"sha": "3189606aaa97fb51f848e13b8eddfe672cbcda11", "filename": "src/test/ui/lint/used_parens_remove_json_suggestion.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.rs?ref=e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "patch": "@@ -0,0 +1,60 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+\n+fn main() {\n+\n+    let _b = false;\n+\n+    if (_b) {\n+        println!(\"hello\");\n+    }\n+\n+    f();\n+\n+}\n+\n+fn f() -> bool {\n+    let c = false;\n+\n+    if(c) {\n+        println!(\"next\");\n+    }\n+\n+    if (c){\n+        println!(\"prev\");\n+    }\n+\n+    while (false && true){\n+        if (c) {\n+            println!(\"norm\");\n+        }\n+\n+    }\n+\n+    while(true && false) {\n+        for i in (0 .. 3){\n+            println!(\"e~\")\n+        }\n+    }\n+\n+    for i in (0 .. 3) {\n+        while (true && false) {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}\n\\ No newline at end of file"}, {"sha": "d8b23ae54431852691f255b67e0b21b2d39498e4", "filename": "src/test/ui/lint/used_parens_remove_json_suggestion.stderr", "status": "added", "additions": 666, "deletions": 0, "changes": 666, "blob_url": "https://github.com/rust-lang/rust/blob/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fused_parens_remove_json_suggestion.stderr?ref=e64493e2d4f5e1e60c2599b0eea165a5bde0fdc6", "patch": "@@ -0,0 +1,666 @@\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 478,\n+      \"byte_end\": 482,\n+      \"line_start\": 16,\n+      \"line_end\": 16,\n+      \"column_start\": 8,\n+      \"column_end\": 12,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (_b) {\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 12\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"lint level defined here\",\n+      \"code\": null,\n+      \"level\": \"note\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 420,\n+          \"byte_end\": 433,\n+          \"line_start\": 10,\n+          \"line_end\": 10,\n+          \"column_start\": 9,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"#![warn(unused_parens)]\",\n+              \"highlight_start\": 9,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": null,\n+          \"suggestion_applicability\": null,\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    },\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 478,\n+          \"byte_end\": 482,\n+          \"line_start\": 16,\n+          \"line_end\": 16,\n+          \"column_start\": 8,\n+          \"column_end\": 12,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (_b) {\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 12\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"_b\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:16:8\n+   |\n+LL |     if (_b) {\n+   |        ^^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/used_parens_remove_json_suggestion.rs:10:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 575,\n+      \"byte_end\": 578,\n+      \"line_start\": 27,\n+      \"line_end\": 27,\n+      \"column_start\": 7,\n+      \"column_end\": 10,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if(c) {\",\n+          \"highlight_start\": 7,\n+          \"highlight_end\": 10\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 575,\n+          \"byte_end\": 578,\n+          \"line_start\": 27,\n+          \"line_end\": 27,\n+          \"column_start\": 7,\n+          \"column_end\": 10,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if(c) {\",\n+              \"highlight_start\": 7,\n+              \"highlight_end\": 10\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:27:7\n+   |\n+LL |     if(c) {\n+   |       ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 621,\n+      \"byte_end\": 624,\n+      \"line_start\": 31,\n+      \"line_end\": 31,\n+      \"column_start\": 8,\n+      \"column_end\": 11,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (c){\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 11\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 621,\n+          \"byte_end\": 624,\n+          \"line_start\": 31,\n+          \"line_end\": 31,\n+          \"column_start\": 8,\n+          \"column_end\": 11,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (c){\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 11\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:31:8\n+   |\n+LL |     if (c){\n+   |        ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 669,\n+      \"byte_end\": 684,\n+      \"line_start\": 35,\n+      \"line_end\": 35,\n+      \"column_start\": 11,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while (false && true){\",\n+          \"highlight_start\": 11,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 669,\n+          \"byte_end\": 684,\n+          \"line_start\": 35,\n+          \"line_end\": 35,\n+          \"column_start\": 11,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while (false && true){\",\n+              \"highlight_start\": 11,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"false && true \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:35:11\n+   |\n+LL |     while (false && true){\n+   |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 697,\n+      \"byte_end\": 700,\n+      \"line_start\": 36,\n+      \"line_end\": 36,\n+      \"column_start\": 12,\n+      \"column_end\": 15,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        if (c) {\",\n+          \"highlight_start\": 12,\n+          \"highlight_end\": 15\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 697,\n+          \"byte_end\": 700,\n+          \"line_start\": 36,\n+          \"line_end\": 36,\n+          \"column_start\": 12,\n+          \"column_end\": 15,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        if (c) {\",\n+              \"highlight_start\": 12,\n+              \"highlight_end\": 15\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:36:12\n+   |\n+LL |         if (c) {\n+   |            ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 760,\n+      \"byte_end\": 775,\n+      \"line_start\": 42,\n+      \"line_end\": 42,\n+      \"column_start\": 10,\n+      \"column_end\": 25,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while(true && false) {\",\n+          \"highlight_start\": 10,\n+          \"highlight_end\": 25\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 760,\n+          \"byte_end\": 775,\n+          \"line_start\": 42,\n+          \"line_end\": 42,\n+          \"column_start\": 10,\n+          \"column_end\": 25,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while(true && false) {\",\n+              \"highlight_start\": 10,\n+              \"highlight_end\": 25\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:42:10\n+   |\n+LL |     while(true && false) {\n+   |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 795,\n+      \"byte_end\": 803,\n+      \"line_start\": 43,\n+      \"line_end\": 43,\n+      \"column_start\": 18,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        for i in (0 .. 3){\",\n+          \"highlight_start\": 18,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 795,\n+          \"byte_end\": 803,\n+          \"line_start\": 43,\n+          \"line_end\": 43,\n+          \"column_start\": 18,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        for i in (0 .. 3){\",\n+              \"highlight_start\": 18,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3 \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/used_parens_remove_json_suggestion.rs:43:18\n+   |\n+LL |         for i in (0 .. 3){\n+   |                  ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 862,\n+      \"byte_end\": 870,\n+      \"line_start\": 48,\n+      \"line_end\": 48,\n+      \"column_start\": 14,\n+      \"column_end\": 22,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    for i in (0 .. 3) {\",\n+          \"highlight_start\": 14,\n+          \"highlight_end\": 22\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 862,\n+          \"byte_end\": 870,\n+          \"line_start\": 48,\n+          \"line_end\": 48,\n+          \"column_start\": 14,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    for i in (0 .. 3) {\",\n+              \"highlight_start\": 14,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/used_parens_remove_json_suggestion.rs:48:14\n+   |\n+LL |     for i in (0 .. 3) {\n+   |              ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 887,\n+      \"byte_end\": 902,\n+      \"line_start\": 49,\n+      \"line_end\": 49,\n+      \"column_start\": 15,\n+      \"column_end\": 30,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        while (true && false) {\",\n+          \"highlight_start\": 15,\n+          \"highlight_end\": 30\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/used_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 887,\n+          \"byte_end\": 902,\n+          \"line_start\": 49,\n+          \"line_end\": 49,\n+          \"column_start\": 15,\n+          \"column_end\": 30,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        while (true && false) {\",\n+              \"highlight_start\": 15,\n+              \"highlight_end\": 30\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/used_parens_remove_json_suggestion.rs:49:15\n+   |\n+LL |         while (true && false) {\n+   |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}"}]}