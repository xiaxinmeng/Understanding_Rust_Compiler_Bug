{"sha": "c484c2d1f840a3fd195b951a67745564b51715ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODRjMmQxZjg0MGEzZmQxOTViOTUxYTY3NzQ1NTY0YjUxNzE1YWQ=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-06-23T22:12:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-25T00:22:48Z"}, "message": "Fix #15129\n\nAdd support for unit literals to const_eval.", "tree": {"sha": "7535b0e7cec10e82f947d2b4c9b1232d08793b18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7535b0e7cec10e82f947d2b4c9b1232d08793b18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c484c2d1f840a3fd195b951a67745564b51715ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c484c2d1f840a3fd195b951a67745564b51715ad", "html_url": "https://github.com/rust-lang/rust/commit/c484c2d1f840a3fd195b951a67745564b51715ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c484c2d1f840a3fd195b951a67745564b51715ad/comments", "author": null, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85effb9f3e1f7f6e6e08788494f3ffedcabc7369", "url": "https://api.github.com/repos/rust-lang/rust/commits/85effb9f3e1f7f6e6e08788494f3ffedcabc7369", "html_url": "https://github.com/rust-lang/rust/commit/85effb9f3e1f7f6e6e08788494f3ffedcabc7369"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "629c7f4dab70987f72286b5d21ccc3158ef3016f", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(non_camel_case_types)]\n \n-use middle::const_eval::{compare_const_vals, const_bool, const_float, const_val};\n+use middle::const_eval::{compare_const_vals, const_bool, const_float, const_nil, const_val};\n use middle::const_eval::{eval_const_expr, lookup_const_by_id};\n use middle::def::*;\n use middle::pat_util::*;\n@@ -203,6 +203,7 @@ enum ctor {\n fn const_val_to_expr(value: &const_val) -> Gc<Expr> {\n     let node = match value {\n         &const_bool(b) => LitBool(b),\n+        &const_nil => LitNil,\n         _ => unreachable!()\n     };\n     box(GC) Expr {\n@@ -309,6 +310,9 @@ fn all_constructors(cx: &MatchCheckCtxt, m: &Matrix, left_ty: ty::t) -> Vec<ctor\n         ty::ty_bool =>\n             [true, false].iter().map(|b| val(const_bool(*b))).collect(),\n \n+        ty::ty_nil =>\n+            vec!(val(const_nil)),\n+\n         ty::ty_rptr(_, ty::mt { ty: ty, .. }) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => vec_constructors(m),\n             _ => vec!(single)\n@@ -326,9 +330,6 @@ fn all_constructors(cx: &MatchCheckCtxt, m: &Matrix, left_ty: ty::t) -> Vec<ctor\n         ty::ty_vec(_, Some(n)) =>\n             vec!(vec(n)),\n \n-        ty::ty_nil if !m.iter().all(|r| is_wild(cx, *r.get(0))) =>\n-            vec!(),\n-\n         _ =>\n             vec!(single)\n     }"}, {"sha": "7567e73b01de9337515a664136e5c8738014ecf1", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -299,7 +299,8 @@ pub enum const_val {\n     const_uint(u64),\n     const_str(InternedString),\n     const_binary(Rc<Vec<u8> >),\n-    const_bool(bool)\n+    const_bool(bool),\n+    const_nil\n }\n \n pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> const_val {\n@@ -514,7 +515,7 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n         LitFloat(ref n, _) | LitFloatUnsuffixed(ref n) => {\n             const_float(from_str::<f64>(n.get()).unwrap() as f64)\n         }\n-        LitNil => const_int(0i64),\n+        LitNil => const_nil,\n         LitBool(b) => const_bool(b)\n     }\n }\n@@ -530,6 +531,7 @@ pub fn compare_const_vals(a: &const_val, b: &const_val) -> Option<int> {\n         (&const_str(ref a), &const_str(ref b)) => compare_vals(a, b),\n         (&const_bool(a), &const_bool(b)) => compare_vals(a, b),\n         (&const_binary(ref a), &const_binary(ref b)) => compare_vals(a, b),\n+        (&const_nil, &const_nil) => compare_vals((), ()),\n         _ => None\n     }\n }"}, {"sha": "689a47f1136e33e3be3ec11ad2c4cf35b52fb69f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -4184,6 +4184,12 @@ pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) ->\n                                          repeat count but found binary array\");\n             return 0;\n         }\n+        const_eval::const_nil => {\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found ()\");\n+            return 0;\n+        }\n       },\n       Err(..) => {\n         tcx.ty_ctxt().sess.span_err(count_expr.span,"}, {"sha": "83d7096087ef8ec49839c0761fc58caa0a0f6694", "filename": "src/test/compile-fail/issue-15129.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15129.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum T {\n+    T1(()),\n+    T2(())\n+}\n+\n+pub enum V {\n+    V1(int),\n+    V2(bool)\n+}\n+\n+fn main() {\n+    match (T1(()), V2(true)) {\n+    //~^ ERROR non-exhaustive patterns: `(T1(()), V2(_))` not covered\n+        (T1(()), V1(i)) => (),\n+        (T2(()), V2(b)) => ()\n+    }\n+}"}, {"sha": "7fba306d868607103ed3dd124cca1fd481908d1d", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -67,8 +67,11 @@ fn vectors_with_nested_enums() {\n     }\n }\n \n-fn main() {\n-    struct_with_a_nested_enum_and_vector();\n-    enum_with_multiple_missing_variants();\n-    enum_struct_variant();\n+fn missing_nil() {\n+    match ((), false) {\n+    //~^ ERROR non-exhaustive patterns: `((), false)` not covered\n+        ((), true) => ()\n+    }\n }\n+\n+fn main() {}"}, {"sha": "6d8655fd7d4529942ce7adbfd71e4dca1a9e8a81", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -13,4 +13,10 @@\n fn main() {\n     let n = 1;\n     let a = [0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\n+    let b = [0, ..()]; //~ ERROR expected positive integer for repeat count but found ()\n+    let c = [0, ..true]; //~ ERROR expected positive integer for repeat count but found boolean\n+    let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count but found float\n+    let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count but found string\n+    let f = [0, ..-4];\n+    //~^ ERROR expected positive integer for repeat count but found negative integer\n }"}, {"sha": "fcc392e3779dc9c79b9ee676e26ffea228524653", "filename": "src/test/run-pass/issue-15129.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Frun-pass%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c484c2d1f840a3fd195b951a67745564b51715ad/src%2Ftest%2Frun-pass%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15129.rs?ref=c484c2d1f840a3fd195b951a67745564b51715ad", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum T {\n+    T1(()),\n+    T2(())\n+}\n+\n+pub enum V {\n+    V1(int),\n+    V2(bool)\n+}\n+\n+fn foo(x: (T, V)) -> String {\n+    match x {\n+        (T1(()), V1(i))  => format!(\"T1(()), V1({})\", i),\n+        (T2(()), V2(b))  => format!(\"T2(()), V2({})\", b),\n+        _ => String::new()\n+    }\n+}\n+\n+\n+fn main() {\n+    assert_eq!(foo((T1(()), V1(99))), \"T1(()), V1(99)\".to_string());\n+    assert_eq!(foo((T2(()), V2(true))), \"T2(()), V2(true)\".to_string());\n+}"}]}