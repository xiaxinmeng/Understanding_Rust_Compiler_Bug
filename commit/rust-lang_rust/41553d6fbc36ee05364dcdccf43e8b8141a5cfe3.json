{"sha": "41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTUzZDZmYmMzNmVlMDUzNjRkY2RjY2Y0M2U4YjgxNDFhNWNmZTM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-17T14:46:23Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-28T00:56:46Z"}, "message": "rustc: lower trait type paths as TyTraitObject.", "tree": {"sha": "a61b0c4b6ea5230a182a7b02b6036d9ac4bda3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a61b0c4b6ea5230a182a7b02b6036d9ac4bda3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "html_url": "https://github.com/rust-lang/rust/commit/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9783947c2adfcadba3c0e036548cf6fd3e12553a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9783947c2adfcadba3c0e036548cf6fd3e12553a", "html_url": "https://github.com/rust-lang/rust/commit/9783947c2adfcadba3c0e036548cf6fd3e12553a"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "f7d40350dc93265a6c77bd30a712921439bbb589", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "patch": "@@ -337,7 +337,8 @@ impl<'a> LoweringContext<'a> {\n                     return self.lower_ty(ty);\n                 }\n                 TyKind::Path(ref qself, ref path) => {\n-                    hir::TyPath(self.lower_qpath(t.id, qself, path, ParamMode::Explicit))\n+                    let qpath = self.lower_qpath(t.id, qself, path, ParamMode::Explicit);\n+                    return self.ty_path(t.id, t.span, qpath);\n                 }\n                 TyKind::ImplicitSelf => {\n                     hir::TyPath(hir::QPath::Resolved(None, P(hir::Path {\n@@ -470,7 +471,8 @@ impl<'a> LoweringContext<'a> {\n             // Otherwise, the base path is an implicit `Self` type path,\n             // e.g. `Vec` in `Vec::new` or `<I as Iterator>::Item` in\n             // `<I as Iterator>::Item::default`.\n-            self.ty(p.span, hir::TyPath(hir::QPath::Resolved(qself, path)))\n+            let new_id = self.next_id();\n+            self.ty_path(new_id, p.span, hir::QPath::Resolved(qself, path))\n         };\n \n         // Anything after the base path are associated \"extensions\",\n@@ -493,7 +495,8 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             // Wrap the associated extension in another type node.\n-            ty = self.ty(p.span, hir::TyPath(qpath));\n+            let new_id = self.next_id();\n+            ty = self.ty_path(new_id, p.span, qpath);\n         }\n \n         // Should've returned in the for loop above.\n@@ -2352,12 +2355,33 @@ impl<'a> LoweringContext<'a> {\n         self.expr_block(block, attrs)\n     }\n \n-    fn ty(&mut self, span: Span, node: hir::Ty_) -> P<hir::Ty> {\n-        P(hir::Ty {\n-            id: self.next_id(),\n-            node: node,\n-            span: span,\n-        })\n+    fn ty_path(&mut self, id: NodeId, span: Span, qpath: hir::QPath) -> P<hir::Ty> {\n+        let mut id = id;\n+        let node = match qpath {\n+            hir::QPath::Resolved(None, path) => {\n+                // Turn trait object paths into `TyTraitObject` instead.\n+                if let Def::Trait(_) = path.def {\n+                    let principal = hir::TraitTyParamBound(hir::PolyTraitRef {\n+                        bound_lifetimes: hir_vec![],\n+                        trait_ref: hir::TraitRef {\n+                            path: path.and_then(|path| path),\n+                            ref_id: id,\n+                        },\n+                        span,\n+                    }, hir::TraitBoundModifier::None);\n+\n+                    // The original ID is taken by the `PolyTraitRef`,\n+                    // so the `Ty` itself needs a different one.\n+                    id = self.next_id();\n+\n+                    hir::TyTraitObject(hir_vec![principal])\n+                } else {\n+                    hir::TyPath(hir::QPath::Resolved(None, path))\n+                }\n+            }\n+            _ => hir::TyPath(qpath)\n+        };\n+        P(hir::Ty { id, node, span })\n     }\n \n     fn elided_lifetime(&mut self, span: Span) -> hir::Lifetime {"}, {"sha": "0ff9626ae11a884ada089c11b03a01df8da554ba", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "patch": "@@ -29,6 +29,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n+#![feature(field_init_shorthand)]\n #![feature(libc)]\n #![feature(loop_break_value)]\n #![feature(nonzero)]"}, {"sha": "aa118891d9825d199b1a0cf8212245ee5d00105a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "patch": "@@ -322,24 +322,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_ty(this, ty);\n                 });\n             }\n-            hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n-                // if this path references a trait, then this will resolve to\n-                // a trait ref, which introduces a binding scope.\n-                match path.def {\n-                    Def::Trait(..) => {\n-                        let scope = Scope::Binder {\n-                            lifetimes: FxHashMap(),\n-                            s: self.scope\n-                        };\n-                        self.with(scope, |_, this| {\n-                            this.visit_path(path, ty.id);\n-                        });\n-                    }\n-                    _ => {\n-                        intravisit::walk_ty(self, ty);\n-                    }\n-                }\n-            }\n             _ => {\n                 intravisit::walk_ty(self, ty)\n             }\n@@ -889,7 +871,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         Def::Struct(_) |\n                         Def::Union(_) |\n                         Def::Enum(_) |\n-                        Def::Trait(_) |\n                         Def::PrimTy(_) => return def == path.def,\n                         _ => {}\n                     }\n@@ -970,21 +951,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             fn visit_ty(&mut self, ty: &hir::Ty) {\n-                let delta = match ty.node {\n-                    hir::TyBareFn(_) => 1,\n-                    hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n-                        // if this path references a trait, then this will resolve to\n-                        // a trait ref, which introduces a binding scope.\n-                        match path.def {\n-                            Def::Trait(..) => 1,\n-                            _ => 0\n-                        }\n-                    }\n-                    _ => 0\n-                };\n-                self.binder_depth += delta;\n+                if let hir::TyBareFn(_) = ty.node {\n+                    self.binder_depth += 1;\n+                }\n                 intravisit::walk_ty(self, ty);\n-                self.binder_depth -= delta;\n+                if let hir::TyBareFn(_) = ty.node {\n+                    self.binder_depth -= 1;\n+                }\n             }\n \n             fn visit_poly_trait_ref(&mut self,"}, {"sha": "324d569cb8dcef61e114380c19fc20b7cea9cda0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "patch": "@@ -1151,7 +1151,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                      rscope: &RegionScope,\n                      opt_self_ty: Option<Ty<'tcx>>,\n                      path: &hir::Path,\n-                     path_id: ast::NodeId,\n                      permit_variants: bool)\n                      -> Ty<'tcx> {\n         let tcx = self.tcx();\n@@ -1161,21 +1160,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let span = path.span;\n         match path.def {\n-            Def::Trait(trait_def_id) => {\n-                // N.B. this case overlaps somewhat with\n-                // TyTraitObject, see that fn for details\n-\n-                assert_eq!(opt_self_ty, None);\n-                tcx.prohibit_type_params(path.segments.split_last().unwrap().1);\n-\n-                self.trait_path_to_object_type(rscope,\n-                                               span,\n-                                               trait_def_id,\n-                                               path_id,\n-                                               path.segments.last().unwrap(),\n-                                               span,\n-                                               partition_bounds(&[]))\n-            }\n             Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) | Def::Union(did) => {\n                 assert_eq!(opt_self_ty, None);\n                 tcx.prohibit_type_params(path.segments.split_last().unwrap().1);\n@@ -1421,7 +1405,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let opt_self_ty = maybe_qself.as_ref().map(|qself| {\n                     self.ast_ty_to_ty(rscope, qself)\n                 });\n-                self.def_to_ty(rscope, opt_self_ty, path, ast_ty.id, false)\n+                self.def_to_ty(rscope, opt_self_ty, path, false)\n             }\n             hir::TyPath(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(\"ast_ty_to_ty: qself={:?} segment={:?}\", qself, segment);"}, {"sha": "4d1b2cec32e5f08ab7b55ca7c5d00ae2532862d1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41553d6fbc36ee05364dcdccf43e8b8141a5cfe3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=41553d6fbc36ee05364dcdccf43e8b8141a5cfe3", "patch": "@@ -3976,7 +3976,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match *qpath {\n             hir::QPath::Resolved(ref maybe_qself, ref path) => {\n                 let opt_self_ty = maybe_qself.as_ref().map(|qself| self.to_ty(qself));\n-                let ty = AstConv::def_to_ty(self, self, opt_self_ty, path, node_id, true);\n+                let ty = AstConv::def_to_ty(self, self, opt_self_ty, path, true);\n                 (path.def, ty)\n             }\n             hir::QPath::TypeRelative(ref qself, ref segment) => {"}]}