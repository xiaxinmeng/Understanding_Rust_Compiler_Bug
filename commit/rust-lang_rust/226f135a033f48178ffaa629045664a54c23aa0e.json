{"sha": "226f135a033f48178ffaa629045664a54c23aa0e", "node_id": "C_kwDOAAsO6NoAKDIyNmYxMzVhMDMzZjQ4MTc4ZmZhYTYyOTA0NTY2NGE1NGMyM2FhMGU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T00:27:36Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:32:31Z"}, "message": "Move `PathBufPushOverwrite` into `Methods` lint group", "tree": {"sha": "23d9366c7367c43b792c64b82551dbb542482b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23d9366c7367c43b792c64b82551dbb542482b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226f135a033f48178ffaa629045664a54c23aa0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226f135a033f48178ffaa629045664a54c23aa0e", "html_url": "https://github.com/rust-lang/rust/commit/226f135a033f48178ffaa629045664a54c23aa0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226f135a033f48178ffaa629045664a54c23aa0e/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc01cef304838cf4911d2e0e8dee7842a4b645b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc01cef304838cf4911d2e0e8dee7842a4b645b", "html_url": "https://github.com/rust-lang/rust/commit/0cc01cef304838cf4911d2e0e8dee7842a4b645b"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "5750f914ac5427ec5e5682760f15cf483570ee20", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=226f135a033f48178ffaa629045664a54c23aa0e", "patch": "@@ -344,6 +344,7 @@ store.register_lints(&[\n     methods::OPTION_MAP_OR_NONE,\n     methods::OR_FUN_CALL,\n     methods::OR_THEN_UNWRAP,\n+    methods::PATH_BUF_PUSH_OVERWRITE,\n     methods::RESULT_MAP_OR_INTO_OPTION,\n     methods::SEARCH_IS_SOME,\n     methods::SHOULD_IMPLEMENT_TRAIT,\n@@ -460,7 +461,6 @@ store.register_lints(&[\n     partialeq_to_none::PARTIALEQ_TO_NONE,\n     pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n     pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n-    path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n     pattern_type_mismatch::PATTERN_TYPE_MISMATCH,\n     precedence::PRECEDENCE,\n     ptr::CMP_NULL,"}, {"sha": "dc50816452f351b165232d51c92ed931c53f8b85", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=226f135a033f48178ffaa629045664a54c23aa0e", "patch": "@@ -17,6 +17,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(methods::ITER_ON_EMPTY_COLLECTIONS),\n     LintId::of(methods::ITER_ON_SINGLE_ITEMS),\n     LintId::of(methods::ITER_WITH_DRAIN),\n+    LintId::of(methods::PATH_BUF_PUSH_OVERWRITE),\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n     LintId::of(mutex_atomic::MUTEX_ATOMIC),\n@@ -25,7 +26,6 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n     LintId::of(only_used_in_recursion::ONLY_USED_IN_RECURSION),\n     LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n-    LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n     LintId::of(redundant_pub_crate::REDUNDANT_PUB_CRATE),\n     LintId::of(regex::TRIVIAL_REGEX),\n     LintId::of(strings::STRING_LIT_AS_BYTES),"}, {"sha": "44cfe0d00ec7ff9416b9eefd1daffb7ded1682f2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=226f135a033f48178ffaa629045664a54c23aa0e", "patch": "@@ -324,7 +324,6 @@ mod panic_unimplemented;\n mod partialeq_ne_impl;\n mod partialeq_to_none;\n mod pass_by_ref_or_value;\n-mod path_buf_push_overwrite;\n mod pattern_type_mismatch;\n mod precedence;\n mod ptr;\n@@ -727,7 +726,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n     store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n     store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n-    store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n     store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n     store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));"}, {"sha": "545cf7918af097e59ba49c1de8511e99ea36e4e6", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=226f135a033f48178ffaa629045664a54c23aa0e", "patch": "@@ -63,6 +63,7 @@ mod option_map_or_none;\n mod option_map_unwrap_or;\n mod or_fun_call;\n mod or_then_unwrap;\n+mod path_buf_push_overwrite;\n mod search_is_some;\n mod single_char_add_str;\n mod single_char_insert_string;\n@@ -2701,6 +2702,38 @@ declare_clippy_lint! {\n     \"nonsensical combination of options for opening a file\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///* Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\n+    /// calls on `PathBuf` that can cause overwrites.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `push` with a root path at the start can overwrite the\n+    /// previous defined path.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut x = PathBuf::from(\"/foo\");\n+    /// x.push(\"/bar\");\n+    /// assert_eq!(x, PathBuf::from(\"/bar\"));\n+    /// ```\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut x = PathBuf::from(\"/foo\");\n+    /// x.push(\"bar\");\n+    /// assert_eq!(x, PathBuf::from(\"/foo/bar\"));\n+    /// ```\n+    #[clippy::version = \"1.36.0\"]\n+    pub PATH_BUF_PUSH_OVERWRITE,\n+    nursery,\n+    \"calling `push` with file system root on `PathBuf` can overwrite it\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2814,6 +2847,7 @@ impl_lint_pass!(Methods => [\n     MAP_ERR_IGNORE,\n     MUT_MUTEX_LOCK,\n     NONSENSICAL_OPEN_OPTIONS,\n+    PATH_BUF_PUSH_OVERWRITE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3199,6 +3233,9 @@ impl Methods {\n                         unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");\n                     }\n                 },\n+                (\"push\", [arg]) => {\n+                    path_buf_push_overwrite::check(cx, expr, arg);\n+                },\n                 (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n                     if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                         suspicious_splitn::check(cx, name, expr, recv, count);"}, {"sha": "0cc28c0dcb3d044c7b8a0d0ca86cf637fabbe306", "filename": "clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226f135a033f48178ffaa629045664a54c23aa0e/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=226f135a033f48178ffaa629045664a54c23aa0e", "patch": "@@ -0,0 +1,37 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+use std::path::{Component, Path};\n+\n+use super::PATH_BUF_PUSH_OVERWRITE;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::PathBuf);\n+        if let ExprKind::Lit(ref lit) = arg.kind;\n+        if let LitKind::Str(ref path_lit, _) = lit.node;\n+        if let pushed_path = Path::new(path_lit.as_str());\n+        if let Some(pushed_path_lit) = pushed_path.to_str();\n+        if pushed_path.has_root();\n+        if let Some(root) = pushed_path.components().next();\n+        if root == Component::RootDir;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                PATH_BUF_PUSH_OVERWRITE,\n+                lit.span,\n+                \"calling `push` with '/' or '\\\\' (file system root) will overwrite the previous path definition\",\n+                \"try\",\n+                format!(\"\\\"{}\\\"\", pushed_path_lit.trim_start_matches(|c| c == '/' || c == '\\\\')),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "bc6a918f7035544ace250e7516c78731b1edd98e", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc01cef304838cf4911d2e0e8dee7842a4b645b/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=0cc01cef304838cf4911d2e0e8dee7842a4b645b", "patch": "@@ -1,72 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::sym;\n-use std::path::{Component, Path};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///* Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\n-    /// calls on `PathBuf` that can cause overwrites.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `push` with a root path at the start can overwrite the\n-    /// previous defined path.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::path::PathBuf;\n-    ///\n-    /// let mut x = PathBuf::from(\"/foo\");\n-    /// x.push(\"/bar\");\n-    /// assert_eq!(x, PathBuf::from(\"/bar\"));\n-    /// ```\n-    /// Could be written:\n-    ///\n-    /// ```rust\n-    /// use std::path::PathBuf;\n-    ///\n-    /// let mut x = PathBuf::from(\"/foo\");\n-    /// x.push(\"bar\");\n-    /// assert_eq!(x, PathBuf::from(\"/foo/bar\"));\n-    /// ```\n-    #[clippy::version = \"1.36.0\"]\n-    pub PATH_BUF_PUSH_OVERWRITE,\n-    nursery,\n-    \"calling `push` with file system root on `PathBuf` can overwrite it\"\n-}\n-\n-declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n-\n-impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::MethodCall(path, [recv, get_index_arg], _) = expr.kind;\n-            if path.ident.name == sym!(push);\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv).peel_refs(), sym::PathBuf);\n-            if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n-            if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(path_lit.as_str());\n-            if let Some(pushed_path_lit) = pushed_path.to_str();\n-            if pushed_path.has_root();\n-            if let Some(root) = pushed_path.components().next();\n-            if root == Component::RootDir;\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    PATH_BUF_PUSH_OVERWRITE,\n-                    lit.span,\n-                    \"calling `push` with '/' or '\\\\' (file system root) will overwrite the previous path definition\",\n-                    \"try\",\n-                    format!(\"\\\"{}\\\"\", pushed_path_lit.trim_start_matches(|c| c == '/' || c == '\\\\')),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-    }\n-}"}]}