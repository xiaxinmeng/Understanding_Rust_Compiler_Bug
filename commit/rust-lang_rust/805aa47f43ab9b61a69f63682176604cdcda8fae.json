{"sha": "805aa47f43ab9b61a69f63682176604cdcda8fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNWFhNDdmNDNhYjliNjFhNjlmNjM2ODIxNzY2MDRjZGNkYThmYWU=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-06T06:39:28Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:00Z"}, "message": "move single_char_push_string to its own module", "tree": {"sha": "f25accfa029dc2b211cc172d4aee357b247a59b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25accfa029dc2b211cc172d4aee357b247a59b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/805aa47f43ab9b61a69f63682176604cdcda8fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/805aa47f43ab9b61a69f63682176604cdcda8fae", "html_url": "https://github.com/rust-lang/rust/commit/805aa47f43ab9b61a69f63682176604cdcda8fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/805aa47f43ab9b61a69f63682176604cdcda8fae/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8006dab817e6bfa0a71a593d46c5569e8a98a6b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8006dab817e6bfa0a71a593d46c5569e8a98a6b7", "html_url": "https://github.com/rust-lang/rust/commit/8006dab817e6bfa0a71a593d46c5569e8a98a6b7"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "24d610cf5f8f71e5b419579eae6b3bc3a0273ef2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/805aa47f43ab9b61a69f63682176604cdcda8fae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805aa47f43ab9b61a69f63682176604cdcda8fae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=805aa47f43ab9b61a69f63682176604cdcda8fae", "patch": "@@ -21,6 +21,7 @@ mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_unwrap_or;\n mod single_char_insert_string;\n+mod single_char_push_string;\n mod skip_while_next;\n mod string_extend_chars;\n mod suspicious_map;\n@@ -1778,7 +1779,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n                 if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n-                        lint_single_char_push_string(cx, expr, args);\n+                        single_char_push_string::check(cx, expr, args);\n                     } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n                         single_char_insert_string::check(cx, expr, args);\n                     }\n@@ -3217,25 +3218,6 @@ fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &h\n     }\n }\n \n-/// lint for length-1 `str`s as argument for `push_str`\n-fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n-        let base_string_snippet =\n-            snippet_with_applicability(cx, args[0].span.source_callsite(), \"..\", &mut applicability);\n-        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n-        span_lint_and_sugg(\n-            cx,\n-            SINGLE_CHAR_ADD_STR,\n-            expr.span,\n-            \"calling `push_str()` using a single-character string literal\",\n-            \"consider using `push` with a character literal\",\n-            sugg,\n-            applicability,\n-        );\n-    }\n-}\n-\n /// Checks for the `USELESS_ASREF` lint.\n fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_ref_args: &[hir::Expr<'_>]) {\n     // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\""}, {"sha": "deacc70b713e5ae15d6b571cb9877f8aa9a8fd10", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/805aa47f43ab9b61a69f63682176604cdcda8fae/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805aa47f43ab9b61a69f63682176604cdcda8fae/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=805aa47f43ab9b61a69f63682176604cdcda8fae", "patch": "@@ -0,0 +1,26 @@\n+use crate::methods::get_hint_if_single_char_arg;\n+use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+use super::SINGLE_CHAR_ADD_STR;\n+\n+/// lint for length-1 `str`s as argument for `push_str`\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n+        let base_string_snippet =\n+            snippet_with_applicability(cx, args[0].span.source_callsite(), \"..\", &mut applicability);\n+        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_ADD_STR,\n+            expr.span,\n+            \"calling `push_str()` using a single-character string literal\",\n+            \"consider using `push` with a character literal\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}"}]}