{"sha": "0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "node_id": "C_kwDOAAsO6NoAKDA5NDlkYThmNGUzMDlhYzVlNTAzNTI1MGJkNjYyZGZkYmQ1YzMyYjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-15T22:55:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T01:56:49Z"}, "message": "Install projection from RPITIT to default trait method opaque correctly", "tree": {"sha": "d4143cf7115dc3a2667551d13f6b56a813052c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4143cf7115dc3a2667551d13f6b56a813052c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "html_url": "https://github.com/rust-lang/rust/commit/0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c43407603599f4ff2b217cc09be2cc5f39967d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c43407603599f4ff2b217cc09be2cc5f39967d", "html_url": "https://github.com/rust-lang/rust/commit/c5c43407603599f4ff2b217cc09be2cc5f39967d"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "df0258ff7a36cec30173f64ad6589f211f1dcfe2", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -76,18 +76,26 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n-    // generated the synthesized associate type.\n-    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n-        tcx.opt_rpitit_info(def_id)\n-    {\n-        Some(opaque_def_id)\n-    } else {\n-        None\n-    };\n+    match tcx.opt_rpitit_info(def_id) {\n+        // RPITIT's bounds are the same as opaque type bounds, but with\n+        // a projection self type.\n+        Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n+            let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n+            let opaque_ty = item.expect_opaque_ty();\n+            return opaque_type_bounds(\n+                tcx,\n+                opaque_def_id,\n+                opaque_ty.bounds,\n+                tcx.mk_projection(def_id, ty::InternalSubsts::identity_for_item(tcx, def_id)),\n+                item.span,\n+            );\n+        }\n+        // These should have been fed!\n+        Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n+        None => {}\n+    }\n \n-    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -100,12 +108,12 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => {\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            let item_ty = if *in_trait || rpitit_info.is_some() {\n+            let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 tcx.mk_projection(def_id, substs)\n             } else {\n                 tcx.mk_opaque(def_id, substs)\n             };\n-            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "df4b8543ba60ad6705c04e0318866e2733a33860", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -268,8 +268,6 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) need to project to the opaque, could\n-            // get it via type_of + subst.\n             && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n             && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n@@ -284,11 +282,24 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                     re\n                 }\n             });\n+\n+            // If we're lowering to associated item, install the opaque type which is just\n+            // the `type_of` of the trait's associated item. If we're using the old lowering\n+            // strategy, then just reinterpret the associated type like an opaque :^)\n+            let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n+                self\n+                    .tcx\n+                    .type_of(alias_ty.def_id)\n+                    .subst(self.tcx, alias_ty.substs)\n+            } else {\n+                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+            };\n+\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n                         projection_ty: alias_ty,\n-                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                        term: default_ty.into(),\n                     },\n                     self.bound_vars,\n                 )"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:4:12\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dd1af93d706c43c2a8396e1fafc8316ec8573d19", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:5:12\n+  --> $DIR/default-method-constraint.rs:7:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-constraint.stderr"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-constraint.rs:7:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e85fe3c8626f45e003d6a39d9e7ab3d196cad744", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0949da8f4e309ac5e5035250bd662dfdbd5c32b4/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=0949da8f4e309ac5e5035250bd662dfdbd5c32b4", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n // This didn't work in the previous default RPITIT method hack attempt\n "}]}