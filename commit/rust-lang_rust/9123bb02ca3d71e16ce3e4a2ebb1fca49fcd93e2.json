{"sha": "9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMjNiYjAyY2EzZDcxZTE2Y2UzZTRhMmViYjFmY2E0OWZjZDkzZTI=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-28T22:38:39Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-28T22:38:39Z"}, "message": "fix borrow-splitting", "tree": {"sha": "0aecb647e0992627f50b546b2c028ffabafb8ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aecb647e0992627f50b546b2c028ffabafb8ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "html_url": "https://github.com/rust-lang/rust/commit/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93438f648233ccdc98d80bcba53d78f672522f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93438f648233ccdc98d80bcba53d78f672522f9", "html_url": "https://github.com/rust-lang/rust/commit/b93438f648233ccdc98d80bcba53d78f672522f9"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "aeab8fc727693a5883f1c2f1b47f52de2550ebf6", "filename": "src/doc/tarpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2FSUMMARY.md?ref=9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "patch": "@@ -17,7 +17,7 @@\n \t* [Subtyping and Variance](subtyping.md)\n \t* [Drop Check](dropck.md)\n \t* [PhantomData](phantom-data.md)\n-\t* [Splitting Lifetimes](lifetime-splitting.md)\n+\t* [Splitting Borrows](borrow-splitting.md)\n * [Type Conversions](conversions.md)\n \t* [Coercions](coercions.md)\n \t* [The Dot Operator](dot-operator.md)"}, {"sha": "fe5f2343dec59f19b55e17cd66bbf5c1309b4764", "filename": "src/doc/tarpl/borrow-splitting.md", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md", "raw_url": "https://github.com/rust-lang/rust/raw/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md?ref=9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "patch": "@@ -1,4 +1,4 @@\n-% Splitting Lifetimes\n+% Splitting Borrows\n \n The mutual exclusion property of mutable references can be very limiting when\n working with a composite structure. The borrow checker understands some basic\n@@ -67,9 +67,8 @@ fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n }\n ```\n \n-This is pretty plainly dangerous. We use transmute to duplicate the slice with\n-an *unbounded* lifetime, so that it can be treated as disjoint from the other\n-until we unify them when we return.\n+This is actually a bit subtle. So as to avoid ever making two `&mut`'s to the\n+same value, we explicitly construct brand-new slices through raw pointers.\n \n However more subtle is how iterators that yield mutable references work.\n The iterator trait is defined as follows:", "previous_filename": "src/doc/tarpl/lifetime-splitting.md"}, {"sha": "da9fb294a1eab7f12d41cbdde625c544434a299b", "filename": "src/doc/tarpl/unchecked-uninit.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2Funchecked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2/src%2Fdoc%2Ftarpl%2Funchecked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Funchecked-uninit.md?ref=9123bb02ca3d71e16ce3e4a2ebb1fca49fcd93e2", "patch": "@@ -15,11 +15,11 @@ initialization.\n \n Unfortunately, this opens us up to all kinds of problems. Assignment has a\n different meaning to Rust based on whether it believes that a variable is\n-initialized or not. If it's uninitialized, then Rust will semantically just\n-memcopy the bits over the uninitialized ones, and do nothing else. However if Rust\n-believes a value to be initialized, it will try to `Drop` the old value!\n-Since we've tricked Rust into believing that the value is initialized, we\n-can no longer safely use normal assignment.\n+initialized or not. If it's believed uninitialized, then Rust will semantically\n+just memcopy the bits over the uninitialized ones, and do nothing else. However\n+if Rust believes a value to be initialized, it will try to `Drop` the old value!\n+Since we've tricked Rust into believing that the value is initialized, we can no\n+longer safely use normal assignment.\n \n This is also a problem if you're working with a raw system allocator, which\n returns a pointer to uninitialized memory."}]}