{"sha": "fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "node_id": "C_kwDOAAsO6NoAKGZhMWI3MjBjZmM2MDBlZDA5ZGQyYTYzMTBlY2U1NzI5MWM1YmFlNWI", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-11-04T01:13:53Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-11-04T01:13:53Z"}, "message": "refactor into private functions", "tree": {"sha": "86d6a3bce579e6cd797ede72af3d0d7e62c70c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d6a3bce579e6cd797ede72af3d0d7e62c70c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "html_url": "https://github.com/rust-lang/rust/commit/fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa1b720cfc600ed09dd2a6310ece57291c5bae5b/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "224dff4e15f1195c1cdbd85d9080e13b14a151e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/224dff4e15f1195c1cdbd85d9080e13b14a151e2", "html_url": "https://github.com/rust-lang/rust/commit/224dff4e15f1195c1cdbd85d9080e13b14a151e2"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "eb42cdf80abbeb5de883a9dc009948fc5777f2df", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fa1b720cfc600ed09dd2a6310ece57291c5bae5b/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1b720cfc600ed09dd2a6310ece57291c5bae5b/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "patch": "@@ -3,7 +3,7 @@ use std::num::NonZeroU32;\n \n use rustc_index::vec::Idx;\n \n-use super::sync::EvalContextExtPriv;\n+use super::sync::EvalContextExtPriv as _;\n use super::thread::MachineCallback;\n use super::vector_clock::VClock;\n use crate::*;\n@@ -52,6 +52,43 @@ impl<'mir, 'tcx> VisitTags for InitOnce<'mir, 'tcx> {\n     }\n }\n \n+impl<'mir, 'tcx: 'mir> EvalContextExtPriv<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextExtPriv<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n+    /// Synchronize with the previous initialization attempt of an InitOnce.\n+    #[inline]\n+    fn init_once_observe_attempt(&mut self, id: InitOnceId) {\n+        let this = self.eval_context_mut();\n+        let current_thread = this.get_active_thread();\n+\n+        if let Some(data_race) = &this.machine.data_race {\n+            data_race.validate_lock_acquire(\n+                &this.machine.threads.sync.init_onces[id].data_race,\n+                current_thread,\n+            );\n+        }\n+    }\n+\n+    #[inline]\n+    fn init_once_wake_waiter(\n+        &mut self,\n+        id: InitOnceId,\n+        waiter: InitOnceWaiter<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let current_thread = this.get_active_thread();\n+\n+        this.unblock_thread(waiter.thread);\n+\n+        // Call callback, with the woken-up thread as `current`.\n+        this.set_active_thread(waiter.thread);\n+        this.init_once_observe_attempt(id);\n+        waiter.callback.call(this)?;\n+        this.set_active_thread(current_thread);\n+\n+        Ok(())\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn init_once_get_or_create_id(\n@@ -141,13 +178,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // Wake up everyone.\n         // need to take the queue to avoid having `this` be borrowed multiple times\n         for waiter in std::mem::take(&mut init_once.waiters) {\n-            this.unblock_thread(waiter.thread);\n-\n-            // Call callback, with the woken-up thread as `current`.\n-            this.set_active_thread(waiter.thread);\n-            this.init_once_acquire(id);\n-            waiter.callback.call(this)?;\n-            this.set_active_thread(current_thread);\n+            this.init_once_wake_waiter(id, waiter)?;\n         }\n \n         Ok(())\n@@ -171,13 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         // Wake up one waiting thread, so they can go ahead and try to init this.\n         if let Some(waiter) = init_once.waiters.pop_front() {\n-            this.unblock_thread(waiter.thread);\n-\n-            // Call callback, with the woken-up thread as `current`.\n-            this.set_active_thread(waiter.thread);\n-            this.init_once_acquire(id);\n-            waiter.callback.call(this)?;\n-            this.set_active_thread(current_thread);\n+            this.init_once_wake_waiter(id, waiter)?;\n         } else {\n             // Nobody there to take this, so go back to 'uninit'\n             init_once.status = InitOnceStatus::Uninitialized;\n@@ -186,18 +211,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(())\n     }\n \n-    /// Synchronize with the previous completion or failure of an InitOnce.\n-    /// This is required to prevent data races.\n+    /// Synchronize with the previous completion of an InitOnce.\n+    /// Must only be called after checking that it is complete.\n     #[inline]\n-    fn init_once_acquire(&mut self, id: InitOnceId) {\n+    fn init_once_observe_completed(&mut self, id: InitOnceId) {\n         let this = self.eval_context_mut();\n-        let current_thread = this.get_active_thread();\n \n-        if let Some(data_race) = &this.machine.data_race {\n-            data_race.validate_lock_acquire(\n-                &this.machine.threads.sync.init_onces[id].data_race,\n-                current_thread,\n-            );\n-        }\n+        assert_eq!(\n+            this.init_once_status(id),\n+            InitOnceStatus::Complete,\n+            \"observing the completion of incomplete init once\"\n+        );\n+\n+        this.init_once_observe_attempt(id);\n     }\n }"}, {"sha": "098804626f2f956f9e5f574fe64f675cdf18320c", "filename": "src/tools/miri/src/shims/windows/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa1b720cfc600ed09dd2a6310ece57291c5bae5b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1b720cfc600ed09dd2a6310ece57291c5bae5b/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs?ref=fa1b720cfc600ed09dd2a6310ece57291c5bae5b", "patch": "@@ -178,7 +178,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 )\n             }\n             InitOnceStatus::Complete => {\n-                this.init_once_acquire(id);\n+                this.init_once_observe_completed(id);\n                 this.write_scalar(this.eval_windows(\"c\", \"FALSE\")?, &pending_place)?;\n             }\n         }"}]}