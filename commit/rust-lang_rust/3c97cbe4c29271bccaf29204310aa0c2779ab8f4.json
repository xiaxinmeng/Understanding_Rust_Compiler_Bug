{"sha": "3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTdjYmU0YzI5MjcxYmNjYWYyOTIwNDMxMGFhMGMyNzc5YWI4ZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T09:50:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T09:50:10Z"}, "message": "Auto merge of #39877 - estebank:remove-params, r=petrochenkov\n\nRemove noop method `Substs::params()`\n\nRe: 48b3dd11f59f48819031206ee2b3ab98ceae1550 & 7a8d4822d8eb922f0cd50e92f420b5f1938db64d", "tree": {"sha": "94516e2da9bc61d720cf6c045627d4f0004922f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94516e2da9bc61d720cf6c045627d4f0004922f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "html_url": "https://github.com/rust-lang/rust/commit/3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1762a05830acbb31351b2c5305bc47f53363c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1762a05830acbb31351b2c5305bc47f53363c8", "html_url": "https://github.com/rust-lang/rust/commit/9f1762a05830acbb31351b2c5305bc47f53363c8"}, {"sha": "a7f63d12a701f8d2c7b975ef605a50bb83318b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f63d12a701f8d2c7b975ef605a50bb83318b90", "html_url": "https://github.com/rust-lang/rust/commit/a7f63d12a701f8d2c7b975ef605a50bb83318b90"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "40c62762c3cf3eab68a442ac242e0e59f8680331", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -2547,7 +2547,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 // TyError and ensure they do not affect any other fields.\n                 // This could be checked after type collection for any struct\n                 // with a potentially unsized trailing field.\n-                let params = substs_a.params().iter().enumerate().map(|(i, &k)| {\n+                let params = substs_a.iter().enumerate().map(|(i, &k)| {\n                     if ty_params.contains(i) {\n                         Kind::from(tcx.types.err)\n                     } else {\n@@ -2567,7 +2567,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 // Check that the source structure with the target's\n                 // type parameters is a subtype of the target.\n-                let params = substs_a.params().iter().enumerate().map(|(i, &k)| {\n+                let params = substs_a.iter().enumerate().map(|(i, &k)| {\n                     if ty_params.contains(i) {\n                         Kind::from(substs_b.type_at(i))\n                     } else {"}, {"sha": "2e3009b4ed6dba72b0c814a700ae28dd40cb2475", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -143,7 +143,7 @@ pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n {\n     let tcx = relation.tcx();\n \n-    let params = a_subst.params().iter().zip(b_subst.params()).enumerate().map(|(i, (a, b))| {\n+    let params = a_subst.iter().zip(b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances.map_or(ty::Invariant, |v| v[i]);\n         if let (Some(a_ty), Some(b_ty)) = (a.as_type(), b.as_type()) {\n             Ok(Kind::from(relation.relate_with_variance(variance, &a_ty, &b_ty)?))"}, {"sha": "c0a529b936b0fbde258a5aa22aadc5e93c06e92a", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -254,12 +254,6 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         self.is_empty()\n     }\n \n-    #[inline]\n-    pub fn params(&self) -> &[Kind<'tcx>] {\n-        // FIXME (dikaiosune) this should be removed, and corresponding compilation errors fixed\n-        self\n-    }\n-\n     #[inline]\n     pub fn types(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {\n         self.iter().filter_map(|k| k.as_type())"}, {"sha": "2d90394025d21ad909d2116e3d1a28dd923bea89", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -309,17 +309,17 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // parameters from the type and those from the method.\n         //\n         // FIXME -- permit users to manually specify lifetimes\n-        let supplied_start = substs.params().len() + method_generics.regions.len();\n+        let supplied_start = substs.len() + method_generics.regions.len();\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;\n-            if i < substs.params().len() {\n+            if i < substs.len() {\n                 substs.region_at(i)\n             } else {\n                 self.region_var_for_def(self.span, def)\n             }\n         }, |def, cur_substs| {\n             let i = def.index as usize;\n-            if i < substs.params().len() {\n+            if i < substs.len() {\n                 substs.type_at(i)\n             } else if supplied_method_types.is_empty() {\n                 self.type_var_for_def(self.span, def, cur_substs)"}, {"sha": "fd29ff0be43b44910d5f7860cd1727bd169ec289", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -1326,7 +1326,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         } else {\n             let substs = Substs::for_item(self.tcx, method, |def, _| {\n                 let i = def.index as usize;\n-                if i < substs.params().len() {\n+                if i < substs.len() {\n                     substs.region_at(i)\n                 } else {\n                     // In general, during probe we erase regions. See\n@@ -1335,7 +1335,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 }\n             }, |def, cur_substs| {\n                 let i = def.index as usize;\n-                if i < substs.params().len() {\n+                if i < substs.len() {\n                     substs.type_at(i)\n                 } else {\n                     self.type_var_for_def(self.span, def, cur_substs)"}, {"sha": "a2922270583796ba54520c48a6710315167328dc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c97cbe4c29271bccaf29204310aa0c2779ab8f4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=3c97cbe4c29271bccaf29204310aa0c2779ab8f4", "patch": "@@ -100,7 +100,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n         let gcx = fcx.tcx.global_tcx();\n         let free_substs = fcx.parameter_environment.free_substs;\n-        for (i, k) in free_substs.params().iter().enumerate() {\n+        for (i, k) in free_substs.iter().enumerate() {\n             let r = if let Some(r) = k.as_region() {\n                 r\n             } else {"}]}