{"sha": "968be9875664ba794f27e4a5bfa3b97f09f0582d", "node_id": "C_kwDOAAsO6NoAKDk2OGJlOTg3NTY2NGJhNzk0ZjI3ZTRhNWJmYTNiOTdmMDlmMDU4MmQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T20:29:56Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T20:29:56Z"}, "message": "Allow `clippy::from_mut_ref`\n\nThis pattern is fine for arena allocators.", "tree": {"sha": "5eb4be3d6772049e0ad7a9d547e5affb501702d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb4be3d6772049e0ad7a9d547e5affb501702d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968be9875664ba794f27e4a5bfa3b97f09f0582d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968be9875664ba794f27e4a5bfa3b97f09f0582d", "html_url": "https://github.com/rust-lang/rust/commit/968be9875664ba794f27e4a5bfa3b97f09f0582d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968be9875664ba794f27e4a5bfa3b97f09f0582d/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00366d191cabfbc5a61df07c724cca25a8ec10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00366d191cabfbc5a61df07c724cca25a8ec10d", "html_url": "https://github.com/rust-lang/rust/commit/f00366d191cabfbc5a61df07c724cca25a8ec10d"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "345e058e1134a4a5c1ba516b326f01335addb152", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/968be9875664ba794f27e4a5bfa3b97f09f0582d/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968be9875664ba794f27e4a5bfa3b97f09f0582d/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=968be9875664ba794f27e4a5bfa3b97f09f0582d", "patch": "@@ -22,6 +22,7 @@\n #![feature(strict_provenance)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n+#![allow(clippy::mut_from_ref)] // Arena allocators are one of the places where this pattern is fine.\n \n use smallvec::SmallVec;\n \n@@ -568,7 +569,9 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     }\n \n     pub trait ArenaAllocatable<'tcx, C = rustc_arena::IsNotCopy>: Sized {\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_from_iter<'a>(\n             arena: &'a Arena<'tcx>,\n             iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -578,10 +581,12 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n     impl<'tcx, T: Copy> ArenaAllocatable<'tcx, rustc_arena::IsCopy> for T {\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n             arena.dropless.alloc(self)\n         }\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_from_iter<'a>(\n             arena: &'a Arena<'tcx>,\n             iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -601,6 +606,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n             }\n \n             #[inline]\n+            #[allow(clippy::mut_from_ref)]\n             fn allocate_from_iter<'a>(\n                 arena: &'a Arena<'tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -616,19 +622,22 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n \n     impl<'tcx> Arena<'tcx> {\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc<T: ArenaAllocatable<'tcx, C>, C>(&self, value: T) -> &mut T {\n             value.allocate_on(self)\n         }\n \n         // Any type that impls `Copy` can have slices be arena-allocated in the `DroplessArena`.\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n             if value.is_empty() {\n                 return &mut [];\n             }\n             self.dropless.alloc_slice(value)\n         }\n \n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, C>, C>(\n             &'a self,\n             iter: impl ::std::iter::IntoIterator<Item = T>,"}]}