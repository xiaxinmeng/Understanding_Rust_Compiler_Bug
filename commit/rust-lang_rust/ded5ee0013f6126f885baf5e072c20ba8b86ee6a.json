{"sha": "ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDVlZTAwMTNmNjEyNmY4ODViYWY1ZTA3MmMyMGJhOGI4NmVlNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T20:10:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-13T20:10:54Z"}, "message": "Auto merge of #66170 - ecstatic-morse:hir-const-check, r=Centril,oli-obk\n\nAdd a HIR pass to check consts for `if`, `loop`, etc.\n\nResolves #66125.\n\nThis PR adds a HIR pass to check for high-level control flow constructs that are forbidden in a const-context. The MIR const-checker is unable to provide good spans for these since they are lowered to control flow primitives (e.g., `Goto` and `SwitchInt`), and these often don't map back to the underlying statement as a whole. This PR is intended only to improve diagnostics once `if` and `match` become commonplace in constants (behind a feature flag). The MIR const-checker will continue to operate unchanged, and will catch anything this check might miss.\n\nIn this implementation, the HIR const-checking pass is run much earlier than the MIR one, so it will supersede any errors from the latter. I will need some mentoring if we wish to change this, since I'm not familiar with the diagnostics system. Moving this pass into the same phase as the MIR const-checker could also help keep backwards compatibility for items like `const _: () = loop { break; };`, which are currently (erroneously?) accepted by the MIR const-checker (see #62272).\n\nr? @Centril\ncc @eddyb (since they filed #62272)", "tree": {"sha": "01bfb70673480a89165ef0063a47fc5a3d37be8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01bfb70673480a89165ef0063a47fc5a3d37be8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "html_url": "https://github.com/rust-lang/rust/commit/ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695fe965173795f9242dfcad6d1c07d7a17b106a", "url": "https://api.github.com/repos/rust-lang/rust/commits/695fe965173795f9242dfcad6d1c07d7a17b106a", "html_url": "https://github.com/rust-lang/rust/commit/695fe965173795f9242dfcad6d1c07d7a17b106a"}, {"sha": "7552bd662f89c67c54e61e2f7c1c1979f6b510e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7552bd662f89c67c54e61e2f7c1c1979f6b510e2", "html_url": "https://github.com/rust-lang/rust/commit/7552bd662f89c67c54e61e2f7c1c1979f6b510e2"}], "stats": {"total": 1141, "additions": 784, "deletions": 357}, "files": [{"sha": "83372dd8adefd13c90d9acbd1b2e1be655665328", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -79,6 +79,33 @@ impl<'hir> Entry<'hir> {\n         }\n     }\n \n+    fn fn_sig(&self) -> Option<&'hir FnSig> {\n+        match &self.node {\n+            Node::Item(item) => {\n+                match &item.kind {\n+                    ItemKind::Fn(sig, _, _) => Some(sig),\n+                    _ => None,\n+                }\n+            }\n+\n+            Node::TraitItem(item) => {\n+                match &item.kind {\n+                    TraitItemKind::Method(sig, _) => Some(sig),\n+                    _ => None\n+                }\n+            }\n+\n+            Node::ImplItem(item) => {\n+                match &item.kind {\n+                    ImplItemKind::Method(sig, _) => Some(sig),\n+                    _ => None,\n+                }\n+            }\n+\n+            _ => None,\n+        }\n+    }\n+\n     fn associated_body(self) -> Option<BodyId> {\n         match self.node {\n             Node::Item(item) => {\n@@ -450,6 +477,14 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig> {\n+        if let Some(entry) = self.find_entry(hir_id) {\n+            entry.fn_sig()\n+        } else {\n+            bug!(\"no entry for hir_id `{}`\", hir_id)\n+        }\n+    }\n+\n     /// Returns the `HirId` that corresponds to the definition of\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`."}, {"sha": "9bd2a933c1c694095ac12f276f3ba67c59707761", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -329,6 +329,11 @@ rustc_queries! {\n             desc { |tcx| \"checking for unstable API usage in {}\", key.describe_as_module(tcx) }\n         }\n \n+        /// Checks the const bodies in the module for illegal operations (e.g. `if` or `loop`).\n+        query check_mod_const_bodies(key: DefId) -> () {\n+            desc { |tcx| \"checking consts in {}\", key.describe_as_module(tcx) }\n+        }\n+\n         /// Checks the loops in the module.\n         query check_mod_loops(key: DefId) -> () {\n             desc { |tcx| \"checking loops in {}\", key.describe_as_module(tcx) }"}, {"sha": "83b936dd7aa2c6a09115a79d13244e746b830e89", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -875,6 +875,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                 tcx.ensure().check_mod_loops(local_def_id);\n                 tcx.ensure().check_mod_attrs(local_def_id);\n                 tcx.ensure().check_mod_unstable_api_usage(local_def_id);\n+                tcx.ensure().check_mod_const_bodies(local_def_id);\n             });\n         });\n     });"}, {"sha": "88f16299dc0f7cf3c482d8857570fc1a81dbce64", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -461,7 +461,14 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 self.super_statement(statement, location);\n             }\n             StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _) => {\n-                self.check_op(ops::IfOrMatch);\n+                // FIXME: make this the `emit_error` impl of `ops::IfOrMatch` once the const\n+                // checker is no longer run in compatability mode.\n+                if !self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+                    self.tcx.sess.delay_span_bug(\n+                        self.span,\n+                        \"complex control flow is forbidden in a const context\",\n+                    );\n+                }\n             }\n             // FIXME(eddyb) should these really do nothing?\n             StatementKind::FakeRead(..) |"}, {"sha": "255e71db89d555325ea7a6c1217951db6bc90b87", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -723,8 +723,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                     bb = target;\n                 }\n                 _ => {\n-                    self.not_const(ops::Loop);\n-                    validator.check_op(ops::Loop);\n+                    if !self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+                        self.tcx.sess.delay_span_bug(\n+                            self.span,\n+                            \"complex control flow is forbidden in a const context\",\n+                        );\n+                    }\n                     break;\n                 }\n             }\n@@ -1253,7 +1257,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 self.super_statement(statement, location);\n             }\n             StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _) => {\n-                self.not_const(ops::IfOrMatch);\n+                if !self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+                    self.tcx.sess.delay_span_bug(\n+                        self.span,\n+                        \"complex control flow is forbidden in a const context\",\n+                    );\n+                }\n             }\n             // FIXME(eddyb) should these really do nothing?\n             StatementKind::FakeRead(..) |"}, {"sha": "a6d7eeabc8864ace3017ffd0c27e37e9a2ea5e26", "filename": "src/librustc_passes/check_const.rs", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -0,0 +1,160 @@\n+//! This pass checks HIR bodies that may be evaluated at compile-time (e.g., `const`, `static`,\n+//! `const fn`) for structured control flow (e.g. `if`, `while`), which is forbidden in a const\n+//! context.\n+//!\n+//! By the time the MIR const-checker runs, these high-level constructs have been lowered to\n+//! control-flow primitives (e.g., `Goto`, `SwitchInt`), making it tough to properly attribute\n+//! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n+//! through, but errors for structured control flow in a `const` should be emitted here.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n+use rustc::hir::map::Map;\n+use rustc::hir;\n+use rustc::session::Session;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n+use syntax::ast::Mutability;\n+use syntax::span_err;\n+use syntax_pos::Span;\n+\n+use std::fmt;\n+\n+#[derive(Copy, Clone)]\n+enum ConstKind {\n+    Static,\n+    StaticMut,\n+    ConstFn,\n+    Const,\n+    AnonConst,\n+}\n+\n+impl ConstKind {\n+    fn for_body(body: &hir::Body, hir_map: &Map<'_>) -> Option<Self> {\n+        let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n+\n+        let owner = hir_map.body_owner(body.id());\n+        let const_kind = match hir_map.body_owner_kind(owner) {\n+            hir::BodyOwnerKind::Const => Self::Const,\n+            hir::BodyOwnerKind::Static(Mutability::Mutable) => Self::StaticMut,\n+            hir::BodyOwnerKind::Static(Mutability::Immutable) => Self::Static,\n+\n+            hir::BodyOwnerKind::Fn if is_const_fn(owner) => Self::ConstFn,\n+            hir::BodyOwnerKind::Fn | hir::BodyOwnerKind::Closure => return None,\n+        };\n+\n+        Some(const_kind)\n+    }\n+}\n+\n+impl fmt::Display for ConstKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let s = match self {\n+            Self::Static => \"static\",\n+            Self::StaticMut => \"static mut\",\n+            Self::Const | Self::AnonConst => \"const\",\n+            Self::ConstFn => \"const fn\",\n+        };\n+\n+        write!(f, \"{}\", s)\n+    }\n+}\n+\n+fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+    let mut vis = CheckConstVisitor::new(tcx);\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_const_bodies,\n+        ..*providers\n+    };\n+}\n+\n+#[derive(Copy, Clone)]\n+struct CheckConstVisitor<'tcx> {\n+    sess: &'tcx Session,\n+    hir_map: &'tcx Map<'tcx>,\n+    const_kind: Option<ConstKind>,\n+}\n+\n+impl<'tcx> CheckConstVisitor<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        CheckConstVisitor {\n+            sess: &tcx.sess,\n+            hir_map: tcx.hir(),\n+            const_kind: None,\n+        }\n+    }\n+\n+    /// Emits an error when an unsupported expression is found in a const context.\n+    fn const_check_violated(&self, bad_op: &str, span: Span) {\n+        if self.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+            self.sess.span_warn(span, \"skipping const checks\");\n+            return;\n+        }\n+\n+        let const_kind = self.const_kind\n+            .expect(\"`const_check_violated` may only be called inside a const context\");\n+\n+        span_err!(self.sess, span, E0744, \"`{}` is not allowed in a `{}`\", bad_op, const_kind);\n+    }\n+\n+    /// Saves the parent `const_kind` before calling `f` and restores it afterwards.\n+    fn recurse_into(&mut self, kind: Option<ConstKind>, f: impl FnOnce(&mut Self)) {\n+        let parent_kind = self.const_kind;\n+        self.const_kind = kind;\n+        f(self);\n+        self.const_kind = parent_kind;\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    }\n+\n+    fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n+        let kind = Some(ConstKind::AnonConst);\n+        self.recurse_into(kind, |this| hir::intravisit::walk_anon_const(this, anon));\n+    }\n+\n+    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+        let kind = ConstKind::for_body(body, self.hir_map);\n+        self.recurse_into(kind, |this| hir::intravisit::walk_body(this, body));\n+    }\n+\n+    fn visit_expr(&mut self, e: &'tcx hir::Expr) {\n+        match &e.kind {\n+            // Skip the following checks if we are not currently in a const context.\n+            _ if self.const_kind.is_none() => {}\n+\n+            hir::ExprKind::Loop(_, _, source) => {\n+                self.const_check_violated(source.name(), e.span);\n+            }\n+\n+            hir::ExprKind::Match(_, _, source) => {\n+                use hir::MatchSource::*;\n+\n+                let op = match source {\n+                    Normal => Some(\"match\"),\n+                    IfDesugar { .. } | IfLetDesugar { .. } => Some(\"if\"),\n+                    TryDesugar => Some(\"?\"),\n+                    AwaitDesugar => Some(\".await\"),\n+\n+                    // These are handled by `ExprKind::Loop` above.\n+                    WhileDesugar | WhileLetDesugar | ForLoopDesugar => None,\n+                };\n+\n+                if let Some(op) = op {\n+                    self.const_check_violated(op, e.span);\n+                }\n+            }\n+\n+            _ => {},\n+        }\n+\n+        hir::intravisit::walk_expr(self, e);\n+    }\n+}"}, {"sha": "72cf0c7ed77c8c0ac7603d9c1ba701b5b2fc33ee", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -626,6 +626,28 @@ async fn foo() {}\n Switch to the Rust 2018 edition to use `async fn`.\n \"##,\n \n+E0744: r##\"\n+Control-flow expressions are not allowed inside a const context.\n+\n+At the moment, `if` and `match`, as well as the looping constructs `for`,\n+`while`, and `loop`, are forbidden inside a `const`, `static`, or `const fn`.\n+\n+```compile_fail,E0744\n+const _: i32 = {\n+    let mut x = 0;\n+    loop {\n+        x += 1;\n+        if x == 4 {\n+            break;\n+        }\n+    }\n+\n+    x\n+};\n+```\n+\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}, {"sha": "1cbe6a652af968abddf787195b41e581928b7ff6", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -23,6 +23,7 @@ use rustc::ty::query::Providers;\n pub mod error_codes;\n \n pub mod ast_validation;\n+mod check_const;\n pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n@@ -32,6 +33,7 @@ mod liveness;\n mod intrinsicck;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    check_const::provide(providers);\n     entry::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);"}, {"sha": "4adad16a5701068c6bb558a5a780ada45b48324d", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -7,9 +7,8 @@ const fn f(x: usize) -> usize {\n     for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0017\n-        //~| ERROR E0019\n-        //~| ERROR E0019\n         //~| ERROR E0080\n+        //~| ERROR E0744\n         sum += i;\n     }\n     sum"}, {"sha": "04eecb5687fd903608ff9a0694cc5da1b278791c", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,14 +1,14 @@\n fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+    //~^ ERROR `loop` is not allowed in a `const`\n     [(); loop { break }]; //~ ERROR mismatched types\n+    //~^ ERROR `loop` is not allowed in a `const`\n     [(); {while true {break}; 0}];\n-    //~^ ERROR constant contains unimplemented expression type\n-    //~| ERROR constant contains unimplemented expression type\n+    //~^ ERROR `while` is not allowed in a `const`\n     //~| WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR calls in constants are limited to constant functions\n+    //~| ERROR `for` is not allowed in a `const`\n     //~| ERROR references in constants may only refer to immutable values\n-    //~| ERROR constant contains unimplemented expression type\n-    //~| ERROR constant contains unimplemented expression type\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "8a405edb046550c50a31add622fafe363c658dc9", "filename": "src/test/ui/borrowck/issue-64453.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -2,9 +2,7 @@ struct Project;\n struct Value;\n \n static settings_dir: String = format!(\"\");\n-//~^ ERROR [E0019]\n-//~| ERROR [E0015]\n-//~| ERROR [E0015]\n+//~^ ERROR `match` is not allowed in a `static`\n \n fn from_string(_: String) -> Value {\n     Value\n@@ -13,7 +11,6 @@ fn set_editor(_: Value) {}\n \n fn main() {\n     let settings_data = from_string(settings_dir);\n-    //~^ ERROR cannot move out of static item `settings_dir` [E0507]\n     let args: i32 = 0;\n \n     match args {"}, {"sha": "f437880a1655fbebf73c128fcdc5f1d5ce460726", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,34 +1,11 @@\n-error[E0507]: cannot move out of static item `settings_dir`\n-  --> $DIR/issue-64453.rs:15:37\n-   |\n-LL |     let settings_data = from_string(settings_dir);\n-   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `std::string::String`, which does not implement the `Copy` trait\n-\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/issue-64453.rs:4:31\n-   |\n-LL | static settings_dir: String = format!(\"\");\n-   |                               ^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-64453.rs:4:31\n-   |\n-LL | static settings_dir: String = format!(\"\");\n-   |                               ^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+error[E0744]: `match` is not allowed in a `static`\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019, E0507.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "1e649a556e01de0f3177be8a305a82dd92c77e24", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n+    //~| ERROR: `loop` is not allowed in a `const`\n     //~| ERROR: type annotations needed\n }"}, {"sha": "b4b40336aa92618c9432b3acdba3ec1c8434b229", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -4,12 +4,19 @@ error: invalid label name `'static`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^\n \n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/issue-52437.rs:2:13\n+   |\n+LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0282]: type annotations needed\n   --> $DIR/issue-52437.rs:2:30\n    |\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |                              ^ consider giving this closure parameter a type\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0282, E0744.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "af5e7658d48d2641f572ac9839d48d895d40add4", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -5,10 +5,10 @@ fn main() {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 {\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+        //~^ ERROR `while` is not allowed in a `const`\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n+            //~| ERROR `if` is not allowed in a `const`\n         }\n         n\n     }];"}, {"sha": "2af6af95c5565cd7222288e3c803d5de9b5fc360", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,20 +1,20 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:7:15\n-   |\n-LL |         while n != 0 {\n-   |               ^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n+error[E0744]: `while` is not allowed in a `const`\n   --> $DIR/infinite_loop.rs:7:9\n    |\n LL | /         while n != 0 {\n LL | |\n-LL | |\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n LL | |\n+LL | |\n LL | |         }\n    | |_________^\n \n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/infinite_loop.rs:9:17\n+   |\n+LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n warning: Constant evaluating a complex constant, this might take some time\n   --> $DIR/infinite_loop.rs:4:18\n    |\n@@ -29,12 +29,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:10:20\n+  --> $DIR/infinite_loop.rs:9:20\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0080.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0080, E0744.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "d820c7051612456a128f108dfcdc0aeaa26b00eb", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n     //~^ ERROR casting pointers to integers in constants is unstable\n+    //~| ERROR `loop` is not allowed in a `const`\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "fa2272f8d634df64d97f83ad3d57631e29734e4b", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/issue-52442.rs:2:14\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ];\n+   |              ^^^^^^^^^^^^^^\n+\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-52442.rs:2:13\n    |\n@@ -13,7 +19,7 @@ error[E0080]: evaluation of constant value failed\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0658.\n+Some errors have detailed explanations: E0080, E0658, E0744.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "3788167f4490248f7b87b188bddc2a537b4d9417", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -4,8 +4,7 @@ fn main() {\n         let mut x = &0;\n         let mut n = 0;\n         while n < 5 {\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+        //~^ ERROR `while` is not allowed in a `const`\n             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n             x = &0; // Materialize a new AllocId\n         }"}, {"sha": "b8267f495de9421c87ba64444b1614cec3b45b0a", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,15 +1,8 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52475.rs:6:15\n-   |\n-LL |         while n < 5 {\n-   |               ^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n+error[E0744]: `while` is not allowed in a `const`\n   --> $DIR/issue-52475.rs:6:9\n    |\n LL | /         while n < 5 {\n LL | |\n-LL | |\n LL | |             n = (n + 1) % 5;\n LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n@@ -29,12 +22,12 @@ LL | |     }];\n    | |_____^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:9:17\n+  --> $DIR/issue-52475.rs:8:17\n    |\n LL |             n = (n + 1) % 5;\n    |                 ^^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0019, E0080.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0080, E0744.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "19abd91252db9725abc28b2a6e80bd58383b9625", "filename": "src/test/ui/consts/const-eval/issue-62272.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,9 +1,11 @@\n-// run-pass\n+// `loop`s unconditionally-broken-from used to be allowed in constants, but are now forbidden by\n+// the HIR const-checker.\n+//\n+// See https://github.com/rust-lang/rust/pull/66170 and\n+// https://github.com/rust-lang/rust/issues/62272.\n \n-// Tests that `loop`s unconditionally-broken-from are allowed in constants.\n-\n-const FOO: () = loop { break; };\n+const FOO: () = loop { break; }; //~ ERROR `loop` is not allowed in a `const`\n \n fn main() {\n-    [FOO; { let x; loop { x = 5; break; } x }];\n+    [FOO; { let x; loop { x = 5; break; } x }]; //~ ERROR `loop` is not allowed in a `const`\n }"}, {"sha": "573d04f5e47861b2bf214f47253594cf2e3a216b", "filename": "src/test/ui/consts/const-eval/issue-62272.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -0,0 +1,15 @@\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/issue-62272.rs:7:17\n+   |\n+LL | const FOO: () = loop { break; };\n+   |                 ^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/issue-62272.rs:10:20\n+   |\n+LL |     [FOO; { let x; loop { x = 5; break; } x }];\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "80494d1662987e98efbf5bf12896aeafe35a5887", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n-            //~| ERROR constant contains unimplemented expression type\n+            //~| ERROR `match` is not allowed in a `const`\n             //~| ERROR evaluation of constant value failed\n-            0 => 42, //~ ERROR constant contains unimplemented expression type\n+            0 => 42,\n             n => n,\n         }\n     }];"}, {"sha": "587dca4c1f279344937d0b5bc592555fea9ac14c", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,15 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/match-test-ptr-null.rs:6:9\n+   |\n+LL | /         match &1 as *const i32 as usize {\n+LL | |\n+LL | |\n+LL | |\n+LL | |             0 => 42,\n+LL | |             n => n,\n+LL | |         }\n+   | |_________^\n+\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n@@ -7,25 +19,13 @@ LL |         match &1 as *const i32 as usize {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51910\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:6:15\n-   |\n-LL |         match &1 as *const i32 as usize {\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/match-test-ptr-null.rs:10:13\n-   |\n-LL |             0 => 42,\n-   |             ^\n-\n error[E0080]: evaluation of constant value failed\n   --> $DIR/match-test-ptr-null.rs:6:15\n    |\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0080, E0658.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0080, E0658, E0744.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "94cce60453dcc0178e3e2bb1767f4c1563781abb", "filename": "src/test/ui/consts/const-if.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,5 +1,21 @@\n-const _X: i32 = if true { 5 } else { 6 };\n-//~^ ERROR constant contains unimplemented expression type\n-//~| ERROR constant contains unimplemented expression type\n+const _: i32 = if true { //~ ERROR `if` is not allowed in a `const`\n+    5\n+} else {\n+    6\n+};\n+\n+const _: i32 = match 1 { //~ ERROR `match` is not allowed in a `const`\n+    2 => 3,\n+    4 => 5,\n+    _ => 0,\n+};\n+\n+const fn foo() -> i32 {\n+    if true { 5 } else { 6 } //~ ERROR `if` is not allowed in a `const fn`\n+}\n+\n+const fn bar() -> i32 {\n+    match 0 { 1 => 2, _ => 0 } //~ ERROR `match` is not allowed in a `const fn`\n+}\n \n fn main() {}"}, {"sha": "6fb2a0e150190da8292368b1de4c3b5700fdb0c0", "filename": "src/test/ui/consts/const-if.stderr", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,15 +1,37 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-if.rs:1:20\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-if.rs:1:16\n    |\n-LL | const _X: i32 = if true { 5 } else { 6 };\n-   |                    ^^^^\n+LL |   const _: i32 = if true {\n+   |  ________________^\n+LL | |     5\n+LL | | } else {\n+LL | |     6\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-if.rs:1:17\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-if.rs:7:16\n    |\n-LL | const _X: i32 = if true { 5 } else { 6 };\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |   const _: i32 = match 1 {\n+   |  ________________^\n+LL | |     2 => 3,\n+LL | |     4 => 5,\n+LL | |     _ => 0,\n+LL | | };\n+   | |_^\n \n-error: aborting due to 2 previous errors\n+error[E0744]: `if` is not allowed in a `const fn`\n+  --> $DIR/const-if.rs:14:5\n+   |\n+LL |     if true { 5 } else { 6 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const fn`\n+  --> $DIR/const-if.rs:18:5\n+   |\n+LL |     match 0 { 1 => 2, _ => 0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "45e3cf438888e64344cd353c8e17054d09416e9d", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,10 +1,12 @@\n-// build-pass\n-\n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later.\n //\n // See https://github.com/rust-lang/rust/issues/51350 for more information.\n+//\n+// It is now forbidden by the HIR const-checker.\n+//\n+// See https://github.com/rust-lang/rust/pull/66170.\n \n-const CRASH: () = 'a: while break 'a {};\n+const CRASH: () = 'a: while break 'a {}; //~ ERROR `while` is not allowed in a `const`\n \n fn main() {}"}, {"sha": "ec32386439fdcb23b03e8ce60b318d5b6c7cd165", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -0,0 +1,9 @@\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-labeled-break.rs:10:19\n+   |\n+LL | const CRASH: () = 'a: while break 'a {};\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "b0fe5e320f4a6d759ef3bd9ee11970e80445f90c", "filename": "src/test/ui/consts/const-loop.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,13 +1,47 @@\n+const _: () = loop {}; //~ ERROR `loop` is not allowed in a `const`\n+\n+static FOO: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `static`\n+\n+const fn foo() {\n+    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n+}\n+\n+pub trait Foo {\n+    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n+}\n+\n+impl Foo for () {\n+    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n+}\n+\n+fn non_const_outside() {\n+    const fn const_inside() {\n+        loop {} //~ ERROR `loop` is not allowed in a `const fn`\n+    }\n+}\n+\n+const fn const_outside() {\n+    fn non_const_inside() {\n+        loop {}\n+    }\n+}\n+\n+fn main() {\n+    let x = [0; {\n+        while false {}\n+        //~^ ERROR `while` is not allowed in a `const`\n+        4\n+    }];\n+}\n+\n const _: i32 = {\n     let mut x = 0;\n \n-    while x < 4 {\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+    while x < 4 { //~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n-    while x < 8 {\n+    while x < 8 { //~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n@@ -17,16 +51,11 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    for i in 0..4 {\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n-        //~| ERROR references in constants may only refer to immutable values\n-        //~| ERROR calls in constants are limited to constant functions, tuple\n-        //         structs and tuple variants\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n-    for i in 0..4 {\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n@@ -36,23 +65,26 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    loop {\n+    loop { //~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 4 {\n-            //~^ ERROR constant contains unimplemented expression type\n-            //~| ERROR constant contains unimplemented expression type\n+        if x == 4 { //~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n \n-    loop {\n+    loop { //~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 8 {\n+        if x == 8 { //~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n \n     x\n };\n \n-fn main() {}\n+const _: i32 = {\n+    let mut x = 0;\n+    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n+    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n+    x\n+};"}, {"sha": "2c96d18175983ae41bc9c66f38ec3f774f86e820", "filename": "src/test/ui/consts/const-loop.stderr", "status": "modified", "additions": 103, "deletions": 36, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,60 +1,127 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:4:11\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:1:15\n    |\n-LL |     while x < 4 {\n-   |           ^^^^^\n+LL | const _: () = loop {};\n+   |               ^^^^^^^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:4:5\n+error[E0744]: `loop` is not allowed in a `static`\n+  --> $DIR/const-loop.rs:3:19\n+   |\n+LL | static FOO: i32 = loop { break 4; };\n+   |                   ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/const-loop.rs:6:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/const-loop.rs:19:9\n+   |\n+LL |         loop {}\n+   |         ^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:31:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:40:5\n    |\n LL | /     while x < 4 {\n-LL | |\n-LL | |\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n \n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:44:5\n+   |\n+LL | /     while x < 8 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:54:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:58:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n \n-error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/const-loop.rs:20:14\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:68:5\n    |\n-LL |     for i in 0..4 {\n-   |              ^^^^ constants require immutable values\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:20:9\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:70:9\n    |\n-LL |     for i in 0..4 {\n-   |         ^\n+LL | /         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:41:12\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:75:5\n    |\n-LL |         if x == 4 {\n-   |            ^^^^^^\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 8 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-loop.rs:41:9\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:77:9\n    |\n-LL | /         if x == 4 {\n-LL | |\n-LL | |\n+LL | /         if x == 8 {\n LL | |             break;\n LL | |         }\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:87:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:88:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:10:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/const-loop.rs:14:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n \n-Some errors have detailed explanations: E0015, E0017, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "0482f7f7daeab9db9b0df82c46961b40f9f638d5", "filename": "src/test/ui/consts/const-match-pattern-arm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,17 +1,13 @@\n #![allow(warnings)]\n \n-const x: bool = match Some(true) {\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n+const x: bool = match Some(true) { //~ ERROR `match` is not allowed in a `const`\n     Some(value) => true,\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n     _ => false\n };\n \n const y: bool = {\n-    match Some(true) {\n-    //~^ ERROR: constant contains unimplemented expression type [E0019]\n+    match Some(true) { //~ ERROR `match` is not allowed in a `const`\n         Some(value) => true,\n-        //~^ ERROR: constant contains unimplemented expression type [E0019]\n         _ => false\n     }\n };"}, {"sha": "57ef349a377fdc5055ea25d74d3e1b23d3ce9081", "filename": "src/test/ui/consts/const-match-pattern-arm.stderr", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,27 +1,22 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:3:23\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-match-pattern-arm.rs:3:17\n    |\n-LL | const x: bool = match Some(true) {\n-   |                       ^^^^^^^^^^\n+LL |   const x: bool = match Some(true) {\n+   |  _________________^\n+LL | |     Some(value) => true,\n+LL | |     _ => false\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:5:5\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/const-match-pattern-arm.rs:9:5\n    |\n-LL |     Some(value) => true,\n-   |     ^^^^^^^^^^^\n+LL | /     match Some(true) {\n+LL | |         Some(value) => true,\n+LL | |         _ => false\n+LL | |     }\n+   | |_____^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:11:11\n-   |\n-LL |     match Some(true) {\n-   |           ^^^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-match-pattern-arm.rs:13:9\n-   |\n-LL |         Some(value) => true,\n-   |         ^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "754a1d7c2a3a7bba5c2513fc773f7444d751333e", "filename": "src/test/ui/consts/min_const_fn/loop_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,5 +1,5 @@\n const fn foo() {\n-    loop {} //~ ERROR loops are not allowed in const fn\n+    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n }\n \n fn main() {}"}, {"sha": "87db65fbb7dacd286ab5c4f7fe9223461e9f50fd", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,12 +1,9 @@\n-error[E0723]: loops are not allowed in const fn\n+error[E0744]: `loop` is not allowed in a `const fn`\n   --> $DIR/loop_ice.rs:2:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "c3436d4840ac7066b1d45d91b965e4d4b01186cc", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -97,10 +97,6 @@ const fn foo30_2(x: *mut u32) -> usize { x as usize }\n //~^ ERROR casting pointers to ints is unstable\n const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n //~^ ERROR casting pointers to ints is unstable\n-const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n-//~^ ERROR loops and conditional expressions are not stable in const fn\n-const fn foo30_5(b: bool) { while b { } }\n-//~^ ERROR loops are not allowed in const fn\n const fn foo30_6() -> bool { let x = true; x }\n const fn foo36(a: bool, b: bool) -> bool { a && b }\n //~^ ERROR loops and conditional expressions are not stable in const fn"}, {"sha": "5ce21e378cd1e777c59f9b8229c6c83b8d5dab7d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -161,25 +161,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:100:38\n-   |\n-LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:102:29\n-   |\n-LL | const fn foo30_5(b: bool) { while b { } }\n-   |                             ^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:105:44\n+  --> $DIR/min_const_fn.rs:101:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n@@ -188,7 +170,7 @@ LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/min_const_fn.rs:107:44\n+  --> $DIR/min_const_fn.rs:103:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n@@ -197,7 +179,7 @@ LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:109:14\n+  --> $DIR/min_const_fn.rs:105:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -206,7 +188,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:114:6\n+  --> $DIR/min_const_fn.rs:110:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -215,7 +197,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:119:6\n+  --> $DIR/min_const_fn.rs:115:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -224,7 +206,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:124:6\n+  --> $DIR/min_const_fn.rs:120:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -233,7 +215,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:130:24\n+  --> $DIR/min_const_fn.rs:126:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -242,7 +224,7 @@ LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:34\n+  --> $DIR/min_const_fn.rs:128:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -251,7 +233,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:134:22\n+  --> $DIR/min_const_fn.rs:130:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +242,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:135:23\n+  --> $DIR/min_const_fn.rs:131:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n@@ -269,7 +251,7 @@ LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:136:23\n+  --> $DIR/min_const_fn.rs:132:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -278,7 +260,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:137:32\n+  --> $DIR/min_const_fn.rs:133:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -287,7 +269,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:142:41\n+  --> $DIR/min_const_fn.rs:138:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +278,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:145:21\n+  --> $DIR/min_const_fn.rs:141:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -305,15 +287,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:147:27\n+  --> $DIR/min_const_fn.rs:143:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors have detailed explanations: E0493, E0723.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "d7cdb0babc5c5827699a2576eda83d833a1b28f1", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -20,9 +20,9 @@ const OVERFLOW: usize = {\n         C(WithWraparoundInvalidValues),\n     }\n \n-    let x = Foo::B; //~ WARNING skipping const checks\n-    match x {\n-        Foo::B => 0, //~ WARNING skipping const checks\n+    let x = Foo::B;\n+    match x { //~ WARNING skipping const checks\n+        Foo::B => 0,\n         _ => panic!(),\n     }\n };\n@@ -87,18 +87,20 @@ const MORE_OVERFLOW: usize = {\n \n     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n         //~^ WARNING skipping const checks\n-        //~| WARNING skipping const checks\n         unreachable!()\n     }\n     if let E1::V1 { .. } = (E1::V1 { f: true }) {\n+        //~^ WARNING skipping const checks\n     } else {\n         unreachable!()\n     }\n \n     if let E2::V1 { .. } = E2::V3::<Infallible> {\n+        //~^ WARNING skipping const checks\n         unreachable!()\n     }\n     if let E2::V3 { .. } = E2::V3::<Infallible> {\n+        //~^ WARNING skipping const checks\n     } else {\n         unreachable!()\n     }"}, {"sha": "b7fce223af80a6afc56f94e57a908db85f51d802", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.stderr", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,24 +1,47 @@\n warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:23:13\n+  --> $DIR/enum_discriminants.rs:24:5\n    |\n-LL |     let x = Foo::B;\n-   |             ^^^^^^\n+LL | /     match x {\n+LL | |         Foo::B => 0,\n+LL | |         _ => panic!(),\n+LL | |     }\n+   | |_____^\n \n warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:25:9\n+  --> $DIR/enum_discriminants.rs:88:5\n    |\n-LL |         Foo::B => 0,\n-   |         ^^^^^^\n+LL | /     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+LL | |\n+LL | |         unreachable!()\n+LL | |     }\n+   | |_____^\n \n warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:88:28\n+  --> $DIR/enum_discriminants.rs:92:5\n    |\n-LL |     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n-   |                            ^^^^^^^^^^^^^^^^^^^^\n+LL | /     if let E1::V1 { .. } = (E1::V1 { f: true }) {\n+LL | |\n+LL | |     } else {\n+LL | |         unreachable!()\n+LL | |     }\n+   | |_____^\n \n warning: skipping const checks\n-  --> $DIR/enum_discriminants.rs:88:12\n+  --> $DIR/enum_discriminants.rs:98:5\n    |\n-LL |     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n-   |            ^^^^^^^^^^^^^\n+LL | /     if let E2::V1 { .. } = E2::V3::<Infallible> {\n+LL | |\n+LL | |         unreachable!()\n+LL | |     }\n+   | |_____^\n+\n+warning: skipping const checks\n+  --> $DIR/enum_discriminants.rs:102:5\n+   |\n+LL | /     if let E2::V3 { .. } = E2::V3::<Infallible> {\n+LL | |\n+LL | |     } else {\n+LL | |         unreachable!()\n+LL | |     }\n+   | |_____^\n "}, {"sha": "80a92c4c96558fa5cd295bae68507a7fdfd89c0b", "filename": "src/test/ui/consts/single_variant_match_ice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -2,20 +2,19 @@ enum Foo {\n     Prob,\n }\n \n-const FOO: u32 = match Foo::Prob { //~ ERROR unimplemented expression type\n+const FOO: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n     Foo::Prob => 42,\n };\n \n-const BAR: u32 = match Foo::Prob { //~ ERROR unimplemented expression type\n+const BAR: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n     x => 42,\n };\n \n impl Foo {\n     pub const fn as_val(&self) -> u8 {\n         use self::Foo::*;\n \n-        match *self {\n-            //~^ ERROR loops and conditional expressions are not stable in const fn\n+        match *self { //~ ERROR `match` is not allowed in a `const fn`\n             Prob => 0x1,\n         }\n     }"}, {"sha": "780dd0dcddf492e89af118cf39defdb1949b4da6", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,25 +1,29 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/single_variant_match_ice.rs:5:24\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/single_variant_match_ice.rs:5:18\n    |\n-LL | const FOO: u32 = match Foo::Prob {\n-   |                        ^^^^^^^^^\n+LL |   const FOO: u32 = match Foo::Prob {\n+   |  __________________^\n+LL | |     Foo::Prob => 42,\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/single_variant_match_ice.rs:9:24\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/single_variant_match_ice.rs:9:18\n    |\n-LL | const BAR: u32 = match Foo::Prob {\n-   |                        ^^^^^^^^^\n+LL |   const BAR: u32 = match Foo::Prob {\n+   |  __________________^\n+LL | |     x => 42,\n+LL | | };\n+   | |_^\n \n-error[E0723]: loops and conditional expressions are not stable in const fn\n-  --> $DIR/single_variant_match_ice.rs:17:15\n+error[E0744]: `match` is not allowed in a `const fn`\n+  --> $DIR/single_variant_match_ice.rs:17:9\n    |\n-LL |         match *self {\n-   |               ^^^^^\n-   |\n-   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+LL | /         match *self {\n+LL | |             Prob => 0x1,\n+LL | |         }\n+   | |_________^\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0723.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "e5b271367393d14c7b39fe509d1dd92a4bd9a8e5", "filename": "src/test/ui/issues/issue-46843.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -5,9 +5,8 @@ fn non_const() -> Thing {\n }\n \n pub const Q: i32 = match non_const() {\n-    //~^ ERROR E0015\n-    //~^^ ERROR unimplemented expression type\n-    Thing::This => 1, //~ ERROR unimplemented expression type\n+    //~^ ERROR `match` is not allowed in a `const`\n+    Thing::This => 1,\n     Thing::That => 0\n };\n "}, {"sha": "9d5332978644ed813cf2916f57c02c8bd6441c5b", "filename": "src/test/ui/issues/issue-46843.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,22 +1,14 @@\n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-46843.rs:7:26\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-46843.rs:7:20\n    |\n-LL | pub const Q: i32 = match non_const() {\n-   |                          ^^^^^^^^^^^\n+LL |   pub const Q: i32 = match non_const() {\n+   |  ____________________^\n+LL | |\n+LL | |     Thing::This => 1,\n+LL | |     Thing::That => 0\n+LL | | };\n+   | |_^\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-46843.rs:7:26\n-   |\n-LL | pub const Q: i32 = match non_const() {\n-   |                          ^^^^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-46843.rs:10:5\n-   |\n-LL |     Thing::This => 1,\n-   |     ^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "f3f680e7b8ecdebe9342018e9066aaadd8d13ac3", "filename": "src/test/ui/issues/issue-50577.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -2,5 +2,8 @@ fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n         //~^ ERROR if may be missing an else clause\n+        //~| ERROR `match` is not allowed in a `const`\n+        //~| ERROR `match` is not allowed in a `const`\n+        //~| ERROR `if` is not allowed in a `const`\n     }\n }"}, {"sha": "055a71f468dd283ca6a5593e12f6c76ae1ec005d", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,27 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0744]: `if` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0317]: if may be missing an else clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n@@ -13,6 +37,7 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0317`.\n+Some errors have detailed explanations: E0317, E0744.\n+For more information about an error, try `rustc --explain E0317`."}, {"sha": "2d5c9358752964fe15482ba28ddd3487ac359788", "filename": "src/test/ui/issues/issue-50582.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n     //~^ ERROR cannot add\n+    //~| ERROR `for` is not allowed in a `const`\n }"}, {"sha": "13f6c4d763392a23a6ee3004dd98e0b54392cabd", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/issue-50582.rs:2:20\n+   |\n+LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n+   |                    ^^^^^^^^^^^^^^^^\n+\n error[E0277]: cannot add `()` to `{integer}`\n   --> $DIR/issue-50582.rs:2:18\n    |\n@@ -6,6 +12,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `{integer}`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0744.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "a2f11c98d5a3070536a3db46ad6d6cbc1765c0ad", "filename": "src/test/ui/issues/issue-50585.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     |y: Vec<[(); for x in 0..2 {}]>| {};\n     //~^ ERROR mismatched types\n+    //~| ERROR `for` is not allowed in a `const`\n }"}, {"sha": "8e57c9806e3ee43010e7a1c9601f6c3afe57cf41", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/issue-50585.rs:2:18\n+   |\n+LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n+   |                  ^^^^^^^^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n@@ -7,6 +13,7 @@ LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    = note: expected type `usize`\n               found type `()`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0744.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "e0fd7ff896cd355d725516a1b14ed074bf42f58b", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -10,4 +10,5 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n+    //~| ERROR `while let` is not allowed in a `const`\n }"}, {"sha": "a3b20cf97f87d2f21b4077a0e597b0cddf3127f1", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,3 +1,9 @@\n+error[E0744]: `while let` is not allowed in a `const`\n+  --> $DIR/issue-51714.rs:11:17\n+   |\n+LL |     [(); return while let Some(n) = Some(0) {}];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:2:14\n    |\n@@ -22,6 +28,7 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0572, E0744.\n+For more information about an error, try `rustc --explain E0572`."}, {"sha": "9f3b9651642a2e447cf6e9cd5999267372f51af4", "filename": "src/test/ui/return/return-match-array-const.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,7 +1,13 @@\n fn main() {\n-    [(); return match 0 { n => n }]; //~ ERROR: return statement outside of function body\n+    [(); return match 0 { n => n }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n \n-    [(); return match 0 { 0 => 0 }]; //~ ERROR: return statement outside of function body\n+    [(); return match 0 { 0 => 0 }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n \n-    [(); return match () { 'a' => 0, _ => 0 }]; //~ ERROR: return statement outside of function body\n+    [(); return match () { 'a' => 0, _ => 0 }];\n+    //~^ ERROR: return statement outside of function body\n+    //~| ERROR: `match` is not allowed in a `const`\n }"}, {"sha": "496e9208b6106ff564875f331a4c6766046122d1", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,21 +1,40 @@\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:2:17\n+   |\n+LL |     [(); return match 0 { n => n }];\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:6:17\n+   |\n+LL |     [(); return match 0 { 0 => 0 }];\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/return-match-array-const.rs:10:17\n+   |\n+LL |     [(); return match () { 'a' => 0, _ => 0 }];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0572]: return statement outside of function body\n   --> $DIR/return-match-array-const.rs:2:10\n    |\n LL |     [(); return match 0 { n => n }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:4:10\n+  --> $DIR/return-match-array-const.rs:6:10\n    |\n LL |     [(); return match 0 { 0 => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:6:10\n+  --> $DIR/return-match-array-const.rs:10:10\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0572, E0744.\n+For more information about an error, try `rustc --explain E0572`."}, {"sha": "d5756737f1791cd9c88c221ca4f0f0f6b8f4a176", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -216,20 +216,17 @@ fn inside_const_generic_arguments() {\n \n     if let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     while let A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O = 5 {}\n \n     if A::<{\n         true && let 1 = 1 //~ ERROR `let` expressions are not supported here\n-        //~^ ERROR constant contains unimplemented expression type\n-        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR `match` is not allowed in a `const`\n     }>::O == 5 {}\n \n     // In the cases above we have `ExprKind::Block` to help us out."}, {"sha": "aa7c342819e8030e8ce8760b69a5f291065c146e", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ded5ee0013f6126f885baf5e072c20ba8b86ee6a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,` or `>`, found `&&`\n-  --> $DIR/disallowed-positions.rs:242:14\n+  --> $DIR/disallowed-positions.rs:239:14\n    |\n LL |         true && let 1 = 1\n    |              ^^ expected one of `,` or `>`\n@@ -482,7 +482,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:224:17\n+  --> $DIR/disallowed-positions.rs:223:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -491,7 +491,7 @@ LL |         true && let 1 = 1\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:230:17\n+  --> $DIR/disallowed-positions.rs:228:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n@@ -513,6 +513,24 @@ warning: the feature `let_chains` is incomplete and may cause the compiler to cr\n LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n    |            ^^^^^^^^^^\n \n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:218:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:223:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n+error[E0744]: `match` is not allowed in a `const`\n+  --> $DIR/disallowed-positions.rs:228:17\n+   |\n+LL |         true && let 1 = 1\n+   |                 ^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |\n@@ -953,43 +971,7 @@ LL |         let 0 = 0?;\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::into_result`\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:218:25\n-   |\n-LL |         true && let 1 = 1\n-   |                         ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:218:21\n-   |\n-LL |         true && let 1 = 1\n-   |                     ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:224:25\n-   |\n-LL |         true && let 1 = 1\n-   |                         ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:224:21\n-   |\n-LL |         true && let 1 = 1\n-   |                     ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:230:25\n-   |\n-LL |         true && let 1 = 1\n-   |                         ^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/disallowed-positions.rs:230:21\n-   |\n-LL |         true && let 1 = 1\n-   |                     ^\n-\n-error: aborting due to 109 previous errors\n+error: aborting due to 106 previous errors\n \n-Some errors have detailed explanations: E0019, E0277, E0308, E0600, E0614.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0277, E0308, E0600, E0614, E0744.\n+For more information about an error, try `rustc --explain E0277`."}]}