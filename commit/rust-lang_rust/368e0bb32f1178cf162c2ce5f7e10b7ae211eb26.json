{"sha": "368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "node_id": "C_kwDOAAsO6NoAKDM2OGUwYmIzMmYxMTc4Y2YxNjJjMmNlNWY3ZTEwYjdhZTIxMWViMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T17:07:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T17:07:35Z"}, "message": "Auto merge of #13848 - ian-h-chamberlain:feature/color-compiler-diagnostics, r=ian-h-chamberlain\n\nColorize `cargo check` diagnostics in VSCode via text decorations\n\nFixes #13648\n\n![colored-rustc-diagnostics](https://user-images.githubusercontent.com/11131775/209479884-10eef8ca-37b4-4aae-88f7-3591ac01b25e.gif)\n\nUse ANSI control characters to display text decorations matching the VScode terminal theme, and strip them out when providing text content for rustc diagnostics.\n\nThis adds the small [`anser`](https://www.npmjs.com/package/anser) library (MIT license, no dependencies) to parse the control codes, and it also supports HTML output so it should be fairly easy to switch to a rendered HTML/webview implementation in the future\n\nI also updated the default `cargo check` command to use the rendered ANSI diagnostics, although I'm not sure if it makes sense to put this kind of thing behind a feature flag, or whether it might have any issues on Windows (as I believe ANSI codes are not used for colorization there)?", "tree": {"sha": "c55fc1d7b528679b40aa5cd0abd3cd905ee81715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55fc1d7b528679b40aa5cd0abd3cd905ee81715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "html_url": "https://github.com/rust-lang/rust/commit/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32e20edb99a15d42984ec89f6b3986248845929", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32e20edb99a15d42984ec89f6b3986248845929", "html_url": "https://github.com/rust-lang/rust/commit/f32e20edb99a15d42984ec89f6b3986248845929"}, {"sha": "283dfc45dd8fb1e6bbe78c8b2e90cb5d543f2f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/283dfc45dd8fb1e6bbe78c8b2e90cb5d543f2f06", "html_url": "https://github.com/rust-lang/rust/commit/283dfc45dd8fb1e6bbe78c8b2e90cb5d543f2f06"}], "stats": {"total": 359, "additions": 328, "deletions": 31}, "files": [{"sha": "11f7b068ecb1630fe43763b91428c168e0c2ea55", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -47,6 +47,7 @@ pub enum FlycheckConfig {\n         features: Vec<String>,\n         extra_args: Vec<String>,\n         extra_env: FxHashMap<String, String>,\n+        ansi_color_output: bool,\n     },\n     CustomCommand {\n         command: String,\n@@ -293,12 +294,21 @@ impl FlycheckActor {\n                 extra_args,\n                 features,\n                 extra_env,\n+                ansi_color_output,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n                 cmd.current_dir(&self.root);\n-                cmd.args([\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n-                    .arg(self.root.join(\"Cargo.toml\").as_os_str());\n+                cmd.arg(\"--workspace\");\n+\n+                cmd.arg(if *ansi_color_output {\n+                    \"--message-format=json-diagnostic-rendered-ansi\"\n+                } else {\n+                    \"--message-format=json\"\n+                });\n+\n+                cmd.arg(\"--manifest-path\");\n+                cmd.arg(self.root.join(\"Cargo.toml\").as_os_str());\n \n                 for target in target_triples {\n                     cmd.args([\"--target\", target.as_str()]);"}, {"sha": "b0afbdc9a4265508af0e7c1ea5bf1c63c8ef16f3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -160,7 +160,9 @@ config_data! {\n         check_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = \"null\",\n         /// Override the command rust-analyzer uses instead of `cargo check` for\n         /// diagnostics on save. The command is required to output json and\n-        /// should therefore include `--message-format=json` or a similar option.\n+        /// should therefore include `--message-format=json` or a similar option\n+        /// (if your client supports the `colorDiagnosticOutput` experimental\n+        /// capability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n         ///\n         /// If you're changing this because you're using some tool wrapping\n         /// Cargo, you might also want to change\n@@ -1006,6 +1008,11 @@ impl Config {\n         self.experimental(\"serverStatusNotification\")\n     }\n \n+    /// Whether the client supports colored output for full diagnostics from `checkOnSave`.\n+    pub fn color_diagnostic_output(&self) -> bool {\n+        self.experimental(\"colorDiagnosticOutput\")\n+    }\n+\n     pub fn publish_diagnostics(&self) -> bool {\n         self.data.diagnostics_enable\n     }\n@@ -1204,6 +1211,7 @@ impl Config {\n                 },\n                 extra_args: self.data.check_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n+                ansi_color_output: self.color_diagnostic_output(),\n             },\n         }\n     }"}, {"sha": "a4780af1a261568ba6d49646b273eb5862d3e929", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -792,3 +792,29 @@ export interface ClientCommandOptions {\n     commands: string[];\n }\n ```\n+\n+## Colored Diagnostic Output\n+\n+**Experimental Client Capability:** `{ \"colorDiagnosticOutput\": boolean }`\n+\n+If this capability is set, the \"full compiler diagnostics\" provided by `checkOnSave`\n+will include ANSI color and style codes to render the diagnostic in a similar manner\n+as `cargo`. This is translated into `--message-format=json-diagnostic-rendered-ansi`\n+when flycheck is run, instead of the default `--message-format=json`.\n+\n+The full compiler rendered diagnostics are included in the server response\n+regardless of this capability:\n+\n+```typescript\n+// https://microsoft.github.io/language-server-protocol/specifications/specification-current#diagnostic\n+export interface Diagnostic {\n+    ...\n+    data?: {\n+        /**\n+         * The human-readable compiler output as it would be printed to a terminal.\n+         * Includes ANSI color and style codes if the client has set the experimental\n+         * `colorDiagnosticOutput` capability.\n+         */\n+        rendered?: string;\n+    };\n+}"}, {"sha": "b33a2e79525def361fc8a6be281dfc142f6f216f", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -173,7 +173,9 @@ Whether to pass `--no-default-features` to Cargo. Defaults to\n --\n Override the command rust-analyzer uses instead of `cargo check` for\n diagnostics on save. The command is required to output json and\n-should therefore include `--message-format=json` or a similar option.\n+should therefore include `--message-format=json` or a similar option\n+(if your client supports the `colorDiagnosticOutput` experimental\n+capability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n \n If you're changing this because you're using some tool wrapping\n Cargo, you might also want to change"}, {"sha": "4844837a06f3ca11ff0b35367957e2854518c785", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -9,6 +9,7 @@\n             \"version\": \"0.5.0-dev\",\n             \"license\": \"MIT OR Apache-2.0\",\n             \"dependencies\": {\n+                \"anser\": \"^2.1.1\",\n                 \"d3\": \"^7.6.1\",\n                 \"d3-graphviz\": \"^5.0.2\",\n                 \"vscode-languageclient\": \"^8.0.2\"\n@@ -394,6 +395,11 @@\n                 \"url\": \"https://github.com/sponsors/epoberezkin\"\n             }\n         },\n+        \"node_modules/anser\": {\n+            \"version\": \"2.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/anser/-/anser-2.1.1.tgz\",\n+            \"integrity\": \"sha512-nqLm4HxOTpeLOxcmB3QWmV5TcDFhW9y/fyQ+hivtDFcK4OQ+pQ5fzPnXHM1Mfcm0VkLtvVi1TCPr++Qy0Q/3EQ==\"\n+        },\n         \"node_modules/ansi-regex\": {\n             \"version\": \"5.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n@@ -4096,6 +4102,11 @@\n                 \"uri-js\": \"^4.2.2\"\n             }\n         },\n+        \"anser\": {\n+            \"version\": \"2.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/anser/-/anser-2.1.1.tgz\",\n+            \"integrity\": \"sha512-nqLm4HxOTpeLOxcmB3QWmV5TcDFhW9y/fyQ+hivtDFcK4OQ+pQ5fzPnXHM1Mfcm0VkLtvVi1TCPr++Qy0Q/3EQ==\"\n+        },\n         \"ansi-regex\": {\n             \"version\": \"5.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\","}, {"sha": "930564bd7cabd557c5f0e4c2a6b5581b8f5d2078", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -35,6 +35,7 @@\n         \"test\": \"cross-env TEST_VARIABLE=test node ./out/tests/runTests.js\"\n     },\n     \"dependencies\": {\n+        \"anser\": \"^2.1.1\",\n         \"d3\": \"^7.6.1\",\n         \"d3-graphviz\": \"^5.0.2\",\n         \"vscode-languageclient\": \"^8.0.2\"\n@@ -643,7 +644,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.check.overrideCommand\": {\n-                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option\\n(if your client supports the `colorDiagnosticOutput` experimental\\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\","}, {"sha": "82cdf0390acaa5cf01c5a9ab7d7657a772ffe391", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -1,8 +1,10 @@\n+import * as anser from \"anser\";\n import * as lc from \"vscode-languageclient/node\";\n import * as vscode from \"vscode\";\n import * as ra from \"../src/lsp_ext\";\n import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n+import * as diagnostics from \"./diagnostics\";\n import { WorkspaceEdit } from \"vscode\";\n import { Config, substituteVSCodeVariables } from \"./config\";\n import { randomUUID } from \"crypto\";\n@@ -120,12 +122,12 @@ export async function createClient(\n             },\n             async handleDiagnostics(\n                 uri: vscode.Uri,\n-                diagnostics: vscode.Diagnostic[],\n+                diagnosticList: vscode.Diagnostic[],\n                 next: lc.HandleDiagnosticsSignature\n             ) {\n                 const preview = config.previewRustcOutput;\n                 const errorCode = config.useRustcErrorCode;\n-                diagnostics.forEach((diag, idx) => {\n+                diagnosticList.forEach((diag, idx) => {\n                     // Abuse the fact that VSCode leaks the LSP diagnostics data field through the\n                     // Diagnostic class, if they ever break this we are out of luck and have to go\n                     // back to the worst diagnostics experience ever:)\n@@ -138,9 +140,10 @@ export async function createClient(\n                         ?.rendered;\n                     if (rendered) {\n                         if (preview) {\n+                            const decolorized = anser.ansiToText(rendered);\n                             const index =\n-                                rendered.match(/^(note|help):/m)?.index || rendered.length;\n-                            diag.message = rendered\n+                                decolorized.match(/^(note|help):/m)?.index || rendered.length;\n+                            diag.message = decolorized\n                                 .substring(0, index)\n                                 .replace(/^ -->[^\\n]+\\n/m, \"\");\n                         }\n@@ -154,16 +157,16 @@ export async function createClient(\n                         }\n                         diag.code = {\n                             target: vscode.Uri.from({\n-                                scheme: \"rust-analyzer-diagnostics-view\",\n-                                path: \"/diagnostic message\",\n+                                scheme: diagnostics.URI_SCHEME,\n+                                path: `/diagnostic message [${idx.toString()}]`,\n                                 fragment: uri.toString(),\n                                 query: idx.toString(),\n                             }),\n                             value: value ?? \"Click for full compiler diagnostic\",\n                         };\n                     }\n                 });\n-                return next(uri, diagnostics);\n+                return next(uri, diagnosticList);\n             },\n             async provideHover(\n                 document: vscode.TextDocument,\n@@ -330,6 +333,7 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.codeActionGroup = true;\n         caps.hoverActions = true;\n         caps.serverStatusNotification = true;\n+        caps.colorDiagnosticOutput = true;\n         caps.commands = {\n             commands: [\n                 \"rust-analyzer.runSingle\","}, {"sha": "9695d8bf26d5f38af02c4da5fbd37c0291c74d11", "filename": "editors/code/src/diagnostics.ts", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fdiagnostics.ts", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fdiagnostics.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdiagnostics.ts?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -0,0 +1,212 @@\n+import * as anser from \"anser\";\n+import * as vscode from \"vscode\";\n+import { ProviderResult, Range, TextEditorDecorationType, ThemeColor, window } from \"vscode\";\n+import { Ctx } from \"./ctx\";\n+\n+export const URI_SCHEME = \"rust-analyzer-diagnostics-view\";\n+\n+export class TextDocumentProvider implements vscode.TextDocumentContentProvider {\n+    private _onDidChange = new vscode.EventEmitter<vscode.Uri>();\n+\n+    public constructor(private readonly ctx: Ctx) {}\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this._onDidChange.event;\n+    }\n+\n+    triggerUpdate(uri: vscode.Uri) {\n+        if (uri.scheme === URI_SCHEME) {\n+            this._onDidChange.fire(uri);\n+        }\n+    }\n+\n+    dispose() {\n+        this._onDidChange.dispose();\n+    }\n+\n+    async provideTextDocumentContent(uri: vscode.Uri): Promise<string> {\n+        const contents = getRenderedDiagnostic(this.ctx, uri);\n+        return anser.ansiToText(contents);\n+    }\n+}\n+\n+function getRenderedDiagnostic(ctx: Ctx, uri: vscode.Uri): string {\n+    const diags = ctx.client?.diagnostics?.get(vscode.Uri.parse(uri.fragment, true));\n+    if (!diags) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+\n+    const diag = diags[parseInt(uri.query)];\n+    if (!diag) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+    const rendered = (diag as unknown as { data?: { rendered?: string } }).data?.rendered;\n+\n+    if (!rendered) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+\n+    return rendered;\n+}\n+\n+interface AnserStyle {\n+    fg: string;\n+    bg: string;\n+    fg_truecolor: string;\n+    bg_truecolor: string;\n+    decorations: Array<anser.DecorationName>;\n+}\n+\n+export class AnsiDecorationProvider implements vscode.Disposable {\n+    private _decorationTypes = new Map<AnserStyle, TextEditorDecorationType>();\n+\n+    public constructor(private readonly ctx: Ctx) {}\n+\n+    dispose(): void {\n+        for (const decorationType of this._decorationTypes.values()) {\n+            decorationType.dispose();\n+        }\n+\n+        this._decorationTypes.clear();\n+    }\n+\n+    async provideDecorations(editor: vscode.TextEditor) {\n+        if (editor.document.uri.scheme !== URI_SCHEME) {\n+            return;\n+        }\n+\n+        const decorations = (await this._getDecorations(editor.document.uri)) || [];\n+        for (const [decorationType, ranges] of decorations) {\n+            editor.setDecorations(decorationType, ranges);\n+        }\n+    }\n+\n+    private _getDecorations(\n+        uri: vscode.Uri\n+    ): ProviderResult<[TextEditorDecorationType, Range[]][]> {\n+        const stringContents = getRenderedDiagnostic(this.ctx, uri);\n+        const lines = stringContents.split(\"\\n\");\n+\n+        const result = new Map<TextEditorDecorationType, Range[]>();\n+        // Populate all known decoration types in the result. This forces any\n+        // lingering decorations to be cleared if the text content changes to\n+        // something without ANSI codes for a given decoration type.\n+        for (const decorationType of this._decorationTypes.values()) {\n+            result.set(decorationType, []);\n+        }\n+\n+        for (const [lineNumber, line] of lines.entries()) {\n+            const totalEscapeLength = 0;\n+\n+            // eslint-disable-next-line camelcase\n+            const parsed = anser.ansiToJson(line, { use_classes: true });\n+\n+            let offset = 0;\n+\n+            for (const span of parsed) {\n+                const { content, ...style } = span;\n+\n+                const range = new Range(\n+                    lineNumber,\n+                    offset - totalEscapeLength,\n+                    lineNumber,\n+                    offset + content.length - totalEscapeLength\n+                );\n+\n+                offset += content.length;\n+\n+                const decorationType = this._getDecorationType(style);\n+\n+                if (!result.has(decorationType)) {\n+                    result.set(decorationType, []);\n+                }\n+\n+                result.get(decorationType)!.push(range);\n+            }\n+        }\n+\n+        return [...result];\n+    }\n+\n+    private _getDecorationType(style: AnserStyle): TextEditorDecorationType {\n+        let decorationType = this._decorationTypes.get(style);\n+\n+        if (decorationType) {\n+            return decorationType;\n+        }\n+\n+        const fontWeight = style.decorations.find((s) => s === \"bold\");\n+        const fontStyle = style.decorations.find((s) => s === \"italic\");\n+        const textDecoration = style.decorations.find((s) => s === \"underline\");\n+\n+        decorationType = window.createTextEditorDecorationType({\n+            backgroundColor: AnsiDecorationProvider._convertColor(style.bg, style.bg_truecolor),\n+            color: AnsiDecorationProvider._convertColor(style.fg, style.fg_truecolor),\n+            fontWeight,\n+            fontStyle,\n+            textDecoration,\n+        });\n+\n+        this._decorationTypes.set(style, decorationType);\n+\n+        return decorationType;\n+    }\n+\n+    // NOTE: This could just be a kebab-case to camelCase conversion, but I think it's\n+    // a short enough list to just write these by hand\n+    static readonly _anserToThemeColor: Record<string, ThemeColor> = {\n+        \"ansi-black\": \"ansiBlack\",\n+        \"ansi-white\": \"ansiWhite\",\n+        \"ansi-red\": \"ansiRed\",\n+        \"ansi-green\": \"ansiGreen\",\n+        \"ansi-yellow\": \"ansiYellow\",\n+        \"ansi-blue\": \"ansiBlue\",\n+        \"ansi-magenta\": \"ansiMagenta\",\n+        \"ansi-cyan\": \"ansiCyan\",\n+\n+        \"ansi-bright-black\": \"ansiBrightBlack\",\n+        \"ansi-bright-white\": \"ansiBrightWhite\",\n+        \"ansi-bright-red\": \"ansiBrightRed\",\n+        \"ansi-bright-green\": \"ansiBrightGreen\",\n+        \"ansi-bright-yellow\": \"ansiBrightYellow\",\n+        \"ansi-bright-blue\": \"ansiBrightBlue\",\n+        \"ansi-bright-magenta\": \"ansiBrightMagenta\",\n+        \"ansi-bright-cyan\": \"ansiBrightCyan\",\n+    };\n+\n+    private static _convertColor(\n+        color?: string,\n+        truecolor?: string\n+    ): ThemeColor | string | undefined {\n+        if (!color) {\n+            return undefined;\n+        }\n+\n+        if (color === \"ansi-truecolor\") {\n+            if (!truecolor) {\n+                return undefined;\n+            }\n+            return `rgb(${truecolor})`;\n+        }\n+\n+        const paletteMatch = color.match(/ansi-palette-(.+)/);\n+        if (paletteMatch) {\n+            const paletteColor = paletteMatch[1];\n+            // anser won't return both the RGB and the color name at the same time,\n+            // so just fake a single foreground control char with the palette number:\n+            const spans = anser.ansiToJson(`\\x1b[38;5;${paletteColor}m`);\n+            const rgb = spans[1].fg;\n+\n+            if (rgb) {\n+                return `rgb(${rgb})`;\n+            }\n+        }\n+\n+        const themeColor = AnsiDecorationProvider._anserToThemeColor[color];\n+        if (themeColor) {\n+            return new ThemeColor(\"terminal.\" + themeColor);\n+        }\n+\n+        return undefined;\n+    }\n+}"}, {"sha": "dd439317c709238c230c81f5b0459797a7b5099e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/368e0bb32f1178cf162c2ce5f7e10b7ae211eb26/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=368e0bb32f1178cf162c2ce5f7e10b7ae211eb26", "patch": "@@ -3,6 +3,7 @@ import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n import { CommandFactory, Ctx, fetchWorkspace } from \"./ctx\";\n+import * as diagnostics from \"./diagnostics\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n \n@@ -48,30 +49,52 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n+    const diagnosticProvider = new diagnostics.TextDocumentProvider(ctx);\n     ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\n-            \"rust-analyzer-diagnostics-view\",\n-            new (class implements vscode.TextDocumentContentProvider {\n-                async provideTextDocumentContent(uri: vscode.Uri): Promise<string> {\n-                    const diags = ctx.client?.diagnostics?.get(\n-                        vscode.Uri.parse(uri.fragment, true)\n-                    );\n-                    if (!diags) {\n-                        return \"Unable to find original rustc diagnostic\";\n-                    }\n-\n-                    const diag = diags[parseInt(uri.query)];\n-                    if (!diag) {\n-                        return \"Unable to find original rustc diagnostic\";\n-                    }\n-                    const rendered = (diag as unknown as { data?: { rendered?: string } }).data\n-                        ?.rendered;\n-                    return rendered ?? \"Unable to find original rustc diagnostic\";\n-                }\n-            })()\n+            diagnostics.URI_SCHEME,\n+            diagnosticProvider\n         )\n     );\n \n+    const decorationProvider = new diagnostics.AnsiDecorationProvider(ctx);\n+    ctx.pushExtCleanup(decorationProvider);\n+\n+    async function decorateVisibleEditors(document: vscode.TextDocument) {\n+        for (const editor of vscode.window.visibleTextEditors) {\n+            if (document === editor.document) {\n+                await decorationProvider.provideDecorations(editor);\n+            }\n+        }\n+    }\n+\n+    vscode.workspace.onDidChangeTextDocument(\n+        async (event) => await decorateVisibleEditors(event.document),\n+        null,\n+        ctx.subscriptions\n+    );\n+    vscode.workspace.onDidOpenTextDocument(decorateVisibleEditors, null, ctx.subscriptions);\n+    vscode.window.onDidChangeActiveTextEditor(\n+        async (editor) => {\n+            if (editor) {\n+                diagnosticProvider.triggerUpdate(editor.document.uri);\n+                await decorateVisibleEditors(editor.document);\n+            }\n+        },\n+        null,\n+        ctx.subscriptions\n+    );\n+    vscode.window.onDidChangeVisibleTextEditors(\n+        async (visibleEditors) => {\n+            for (const editor of visibleEditors) {\n+                diagnosticProvider.triggerUpdate(editor.document.uri);\n+                await decorationProvider.provideDecorations(editor);\n+            }\n+        },\n+        null,\n+        ctx.subscriptions\n+    );\n+\n     vscode.workspace.onDidChangeWorkspaceFolders(\n         async (_) => ctx.onWorkspaceFolderChanges(),\n         null,"}]}