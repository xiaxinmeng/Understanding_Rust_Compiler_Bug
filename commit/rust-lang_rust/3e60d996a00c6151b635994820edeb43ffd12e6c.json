{"sha": "3e60d996a00c6151b635994820edeb43ffd12e6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjBkOTk2YTAwYzYxNTFiNjM1OTk0ODIwZWRlYjQzZmZkMTJlNmM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-03T15:22:07Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-08T01:09:32Z"}, "message": "Replace iterator structures with `impl Trait`.", "tree": {"sha": "bbe9ad2092dd498ae2e43eb3467b084b840c3de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe9ad2092dd498ae2e43eb3467b084b840c3de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e60d996a00c6151b635994820edeb43ffd12e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e60d996a00c6151b635994820edeb43ffd12e6c", "html_url": "https://github.com/rust-lang/rust/commit/3e60d996a00c6151b635994820edeb43ffd12e6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e60d996a00c6151b635994820edeb43ffd12e6c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2789b067da2ac921b86199bde21dd231ace1da39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2789b067da2ac921b86199bde21dd231ace1da39", "html_url": "https://github.com/rust-lang/rust/commit/2789b067da2ac921b86199bde21dd231ace1da39"}], "stats": {"total": 103, "additions": 26, "deletions": 77}, "files": [{"sha": "9ce9c738b169c736ad13e74d21feab77283942ce", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 25, "deletions": 77, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/3e60d996a00c6151b635994820edeb43ffd12e6c/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e60d996a00c6151b635994820edeb43ffd12e6c/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=3e60d996a00c6151b635994820edeb43ffd12e6c", "patch": "@@ -196,27 +196,27 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n     // # Iterating over nodes, edges\n \n-    pub fn enumerated_nodes(&self) -> EnumeratedNodes<N> {\n-        EnumeratedNodes {\n-            iter: self.nodes.iter().enumerate()\n-        }\n+    pub fn enumerated_nodes(&self) -> impl Iterator<Item = (NodeIndex, &Node<N>)> {\n+        self.nodes\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, n)| (NodeIndex(idx), n))\n     }\n \n-    pub fn enumerated_edges(&self) -> EnumeratedEdges<E> {\n-        EnumeratedEdges {\n-            iter: self.edges.iter().enumerate()\n-        }\n+    pub fn enumerated_edges(&self) -> impl Iterator<Item = (EdgeIndex, &Edge<E>)> {\n+        self.edges\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, e)| (EdgeIndex(idx), e))\n     }\n \n-    pub fn each_node<'a, F>(&'a self, mut f: F) -> bool\n-        where F: FnMut(NodeIndex, &'a Node<N>) -> bool\n+    pub fn each_node<'a>(&'a self, mut f: impl FnMut(NodeIndex, &'a Node<N>) -> bool) -> bool\n     {\n         //! Iterates over all edges defined in the graph.\n         self.enumerated_nodes().all(|(node_idx, node)| f(node_idx, node))\n     }\n \n-    pub fn each_edge<'a, F>(&'a self, mut f: F) -> bool\n-        where F: FnMut(EdgeIndex, &'a Edge<E>) -> bool\n+    pub fn each_edge<'a>(&'a self, mut f: impl FnMut(EdgeIndex, &'a Edge<E>) -> bool) -> bool\n     {\n         //! Iterates over all edges defined in the graph\n         self.enumerated_edges().all(|(edge_idx, edge)| f(edge_idx, edge))\n@@ -239,11 +239,17 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         }\n     }\n \n-    pub fn successor_nodes(&self, source: NodeIndex) -> AdjacentTargets<N, E> {\n+    pub fn successor_nodes<'a>(\n+        &'a self,\n+        source: NodeIndex,\n+    ) -> impl Iterator<Item = NodeIndex> + 'a {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes(&self, target: NodeIndex) -> AdjacentSources<N, E> {\n+    pub fn predecessor_nodes<'a>(\n+        &'a self,\n+        target: NodeIndex,\n+    ) -> impl Iterator<Item = NodeIndex> + 'a {\n         self.incoming_edges(target).sources()\n     }\n \n@@ -293,34 +299,6 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n \n // # Iterators\n \n-pub struct EnumeratedNodes<'g, N>\n-    where N: 'g,\n-{\n-    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Node<N>>>\n-}\n-\n-impl<'g, N: Debug> Iterator for EnumeratedNodes<'g, N> {\n-    type Item = (NodeIndex, &'g Node<N>);\n-\n-    fn next(&mut self) -> Option<(NodeIndex, &'g Node<N>)> {\n-        self.iter.next().map(|(idx, n)| (NodeIndex(idx), n))\n-    }\n-}\n-\n-pub struct EnumeratedEdges<'g, E>\n-    where E: 'g,\n-{\n-    iter: ::std::iter::Enumerate<::std::slice::Iter<'g, Edge<E>>>\n-}\n-\n-impl<'g, E: Debug> Iterator for EnumeratedEdges<'g, E> {\n-    type Item = (EdgeIndex, &'g Edge<E>);\n-\n-    fn next(&mut self) -> Option<(EdgeIndex, &'g Edge<E>)> {\n-        self.iter.next().map(|(idx, e)| (EdgeIndex(idx), e))\n-    }\n-}\n-\n pub struct AdjacentEdges<'g, N, E>\n     where N: 'g,\n           E: 'g\n@@ -330,13 +308,13 @@ pub struct AdjacentEdges<'g, N, E>\n     next: EdgeIndex,\n }\n \n-impl<'g, N, E> AdjacentEdges<'g, N, E> {\n-    fn targets(self) -> AdjacentTargets<'g, N, E> {\n-        AdjacentTargets { edges: self }\n+impl<'g, N: Debug, E: Debug> AdjacentEdges<'g, N, E> {\n+    fn targets(self) -> impl Iterator<Item = NodeIndex> + 'g {\n+        self.into_iter().map(|(_, edge)| edge.target)\n     }\n \n-    fn sources(self) -> AdjacentSources<'g, N, E> {\n-        AdjacentSources { edges: self }\n+    fn sources(self) -> impl Iterator<Item = NodeIndex> + 'g {\n+        self.into_iter().map(|(_, edge)| edge.source)\n     }\n }\n \n@@ -355,36 +333,6 @@ impl<'g, N: Debug, E: Debug> Iterator for AdjacentEdges<'g, N, E> {\n     }\n }\n \n-pub struct AdjacentTargets<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n-{\n-    edges: AdjacentEdges<'g, N, E>,\n-}\n-\n-impl<'g, N: Debug, E: Debug> Iterator for AdjacentTargets<'g, N, E> {\n-    type Item = NodeIndex;\n-\n-    fn next(&mut self) -> Option<NodeIndex> {\n-        self.edges.next().map(|(_, edge)| edge.target)\n-    }\n-}\n-\n-pub struct AdjacentSources<'g, N, E>\n-    where N: 'g,\n-          E: 'g\n-{\n-    edges: AdjacentEdges<'g, N, E>,\n-}\n-\n-impl<'g, N: Debug, E: Debug> Iterator for AdjacentSources<'g, N, E> {\n-    type Item = NodeIndex;\n-\n-    fn next(&mut self) -> Option<NodeIndex> {\n-        self.edges.next().map(|(_, edge)| edge.source)\n-    }\n-}\n-\n pub struct DepthFirstTraversal<'g, N, E>\n     where N: 'g,\n           E: 'g"}, {"sha": "81246aea1b56e26541ab98414fbc92984927f1ac", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e60d996a00c6151b635994820edeb43ffd12e6c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e60d996a00c6151b635994820edeb43ffd12e6c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=3e60d996a00c6151b635994820edeb43ffd12e6c", "patch": "@@ -34,6 +34,7 @@\n #![feature(underscore_lifetimes)]\n #![feature(macro_vis_matcher)]\n #![feature(allow_internal_unstable)]\n+#![feature(universal_impl_trait)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}]}