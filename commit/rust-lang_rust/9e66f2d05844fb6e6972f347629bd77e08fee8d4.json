{"sha": "9e66f2d05844fb6e6972f347629bd77e08fee8d4", "node_id": "C_kwDOAAsO6NoAKDllNjZmMmQwNTg0NGZiNmU2OTcyZjM0NzYyOWJkNzdlMDhmZWU4ZDQ", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-12T03:33:05Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-12T03:33:05Z"}, "message": "fix", "tree": {"sha": "69b429ef1f40d669ebd9cbc7ff342f3527bc5701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b429ef1f40d669ebd9cbc7ff342f3527bc5701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e66f2d05844fb6e6972f347629bd77e08fee8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e66f2d05844fb6e6972f347629bd77e08fee8d4", "html_url": "https://github.com/rust-lang/rust/commit/9e66f2d05844fb6e6972f347629bd77e08fee8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e66f2d05844fb6e6972f347629bd77e08fee8d4/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "html_url": "https://github.com/rust-lang/rust/commit/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "5a8677f90be413bbdb9052104a7023242e674909", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e66f2d05844fb6e6972f347629bd77e08fee8d4/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e66f2d05844fb6e6972f347629bd77e08fee8d4/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=9e66f2d05844fb6e6972f347629bd77e08fee8d4", "patch": "@@ -142,20 +142,19 @@ fn block_has_safety_comment(cx: &LateContext<'_>, block: &hir::Block<'_>) -> boo\n /// Checks if the lines immediately preceding the item contain a safety comment.\n #[allow(clippy::collapsible_match)]\n fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n-    if span_from_macro_expansion_has_safety_comment(cx, item.span) || span_in_body_has_safety_comment(cx, item.span) {\n+    if span_from_macro_expansion_has_safety_comment(cx, item.span) {\n         return true;\n     }\n \n     if item.span.ctxt() == SyntaxContext::root() {\n         if let Some(parent_node) = get_parent_node(cx.tcx, item.hir_id()) {\n-            let comment_start;\n-            match parent_node {\n+            let comment_start = match parent_node {\n                 Node::Crate(parent_mod) => {\n-                    comment_start = comment_start_before_impl_in_mod(cx, parent_mod, parent_mod.spans.inner_span, item);\n+                    comment_start_before_impl_in_mod(cx, parent_mod, parent_mod.spans.inner_span, item)\n                 },\n                 Node::Item(parent_item) => {\n                     if let ItemKind::Mod(parent_mod) = &parent_item.kind {\n-                        comment_start = comment_start_before_impl_in_mod(cx, parent_mod, parent_item.span, item);\n+                        comment_start_before_impl_in_mod(cx, parent_mod, parent_item.span, item)\n                     } else {\n                         // Doesn't support impls in this position. Pretend a comment was found.\n                         return true;\n@@ -164,24 +163,22 @@ fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n                 Node::Stmt(stmt) => {\n                     if let Some(stmt_parent) = get_parent_node(cx.tcx, stmt.hir_id) {\n                         match stmt_parent {\n-                            Node::Block(block) => {\n-                                comment_start = walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo);\n-                            },\n+                            Node::Block(block) => walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo),\n                             _ => {\n                                 // Doesn't support impls in this position. Pretend a comment was found.\n                                 return true;\n                             },\n                         }\n                     } else {\n-                        // Doesn't support impls in this position. Pretend a comment was found.\n+                        // Problem getting the parent node. Pretend a comment was found.\n                         return true;\n                     }\n                 },\n                 _ => {\n                     // Doesn't support impls in this position. Pretend a comment was found.\n                     return true;\n                 },\n-            }\n+            };\n \n             let source_map = cx.sess().source_map();\n             if let Some(comment_start) = comment_start"}]}