{"sha": "57c6a3183c17e9f889adda1faca894a7cd692b02", "node_id": "C_kwDOAAsO6NoAKDU3YzZhMzE4M2MxN2U5Zjg4OWFkZGExZmFjYTg5NGE3Y2Q2OTJiMDI", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-19T07:50:08Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrashawdev@gmail.com", "date": "2023-05-05T10:40:05Z"}, "message": "tweak \"make mut\" spans (No. 3)", "tree": {"sha": "76564c4f22d04bf1775453a270a2ca0876ff8c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76564c4f22d04bf1775453a270a2ca0876ff8c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c6a3183c17e9f889adda1faca894a7cd692b02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/c15HB+s7bjrqpLmUVbPWEUVCw0FAmRU3QUACgkQUVbPWEUV\nCw3GwxAAhOgW8jeGY7vtcuo2fIKe/lIbhs9MupoojgDe5oHO2LOx4Exi2foX/YVS\nLBeeg4d0RwCIKCu6faZKQ0xgjtnYNPzu9UatgnMHoR91vhuawDlS09tp25mwbK9V\nJlrM8D76OQ8zr2ykJddjCHddkP5WZWUx06+ka3otlrwkV4l8xy52MWFL+m6Hl55j\nEFLgks4khO/Ijmv6xRIAzRe5uLxWxwW7MWGaJkgpUir86vXtfGlbz+KjT3dNOHpa\nex1J4lq+/oDy/yoCbn5pfRQOG+CTdwqayhxTQ+e8Dt+WZVsGmUL5KVmTNUsKdt1j\nwbUrjcXgWoustbn6u/s693hBLInksePDI8WpWeQFpbPSPRlPwj8Rbcj9FFpdvL3V\nDIwc4+MK6dbZ+MeD6WQd+6RjSn++EHwL70zFtV8vdTJ/omCHHmpEVZbLSkPD76iG\nRQdX0bc4DnfNStTWjVPLEf0Wu2mZrT7GbVXyKxSPBJemB0CsMptk4RbYq/tBcY58\nHaUOQlVxkyFBSSCfIwbsVtEpOl6AS8/mgTFz8D5eHmGTuty3z9lLDEYU7KEwFwbY\nM6I7bXF5QqTOIIEa7TD5KrVd3yYIdvyHhtcX8g/Jk1j9cN56Q5ElsQ1sIO9eQzp/\n57HPtsuWQKvI32BQxdQcgrxHn14e3rBU+eKg/o0mLsIk9KsjITc=\n=ch/f\n-----END PGP SIGNATURE-----", "payload": "tree 76564c4f22d04bf1775453a270a2ca0876ff8c3f\nparent 9624d2b08e87995978899f236db1857e85097b37\nauthor Ezra Shaw <ezrasure@outlook.com> 1681890608 +1200\ncommitter Ezra Shaw <ezrashawdev@gmail.com> 1683283205 +1200\n\ntweak \"make mut\" spans (No. 3)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c6a3183c17e9f889adda1faca894a7cd692b02", "html_url": "https://github.com/rust-lang/rust/commit/57c6a3183c17e9f889adda1faca894a7cd692b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c6a3183c17e9f889adda1faca894a7cd692b02/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9624d2b08e87995978899f236db1857e85097b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/9624d2b08e87995978899f236db1857e85097b37", "html_url": "https://github.com/rust-lang/rust/commit/9624d2b08e87995978899f236db1857e85097b37"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "50f9e7095f93bab0a32894bf206a1cac6e6a2a5b", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -1263,6 +1263,10 @@ fn suggest_ampmut<'tcx>(\n     {\n         let span = span.with_lo(span.lo() + BytePos(ws_pos as u32)).shrink_to_lo();\n         (true, span, \" mut\".to_owned())\n+    } else if binding_exists {\n+        // shrink the span to just after the `&` in `&variable`\n+        let span = span.with_lo(span.lo() + BytePos(1)).shrink_to_lo();\n+        (true, span, \"mut \".to_owned())\n     } else {\n         let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n         assert_eq!(ty_mut.mutbl, hir::Mutability::Not);"}, {"sha": "cf0c4127d82f43dfa8fbf2c5eeebb794fa930a30", "filename": "tests/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -6,8 +6,8 @@ LL |     *s.pointer += 1;\n    |\n help: consider changing this to be a mutable reference\n    |\n-LL | fn a(s: &mut S<'_>) {\n-   |         ~~~~~~~~~~\n+LL | fn a(s: &mut S) {\n+   |          +++\n \n error[E0594]: cannot assign to `*s.pointer`, which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n@@ -17,8 +17,8 @@ LL |     *s.pointer += 1;\n    |\n help: consider changing this to be a mutable reference\n    |\n-LL | fn c(s: &mut &mut S<'_>) {\n-   |         ~~~~~~~~~~~~~~~\n+LL | fn c(s: &mut  &mut S) {\n+   |          +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "59ef61b19d50136390e60ca965ca8bc1208e6ecb", "filename": "tests/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -27,8 +27,8 @@ LL |     let x:  &mut isize = &mut **t0;\n    |\n help: consider changing this to be a mutable reference\n    |\n-LL | fn foo4(t0: &mut &mut isize) {\n-   |             ~~~~~~~~~~~~~~~\n+LL | fn foo4(t0: &mut  &mut isize) {\n+   |              +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fb3db4e144635eba623865f27caeb01c16aafd77", "filename": "tests/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -111,7 +111,7 @@ LL |     let _bar1 = &mut foo.bar1;\n help: consider changing this to be a mutable reference\n    |\n LL | fn borrow_mut_from_imm(foo: &mut Foo) {\n-   |                             ~~~~~~~~\n+   |                              +++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "b39e57d70ec65d75b2804a134ef72007cd1b3c69", "filename": "tests/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |     *x = (1,);\n help: consider changing this to be a mutable reference\n    |\n LL | fn named_ref(x: &mut (i32,)) {\n-   |                 ~~~~~~~~~~~\n+   |                  +++\n \n error[E0594]: cannot assign to `x.0`, which is behind a `&` reference\n   --> $DIR/mutability-errors.rs:10:5\n@@ -18,7 +18,7 @@ LL |     x.0 = 1;\n help: consider changing this to be a mutable reference\n    |\n LL | fn named_ref(x: &mut (i32,)) {\n-   |                 ~~~~~~~~~~~\n+   |                  +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/mutability-errors.rs:11:5\n@@ -29,7 +29,7 @@ LL |     &mut *x;\n help: consider changing this to be a mutable reference\n    |\n LL | fn named_ref(x: &mut (i32,)) {\n-   |                 ~~~~~~~~~~~\n+   |                  +++\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n   --> $DIR/mutability-errors.rs:12:5\n@@ -40,7 +40,7 @@ LL |     &mut x.0;\n help: consider changing this to be a mutable reference\n    |\n LL | fn named_ref(x: &mut (i32,)) {\n-   |                 ~~~~~~~~~~~\n+   |                  +++\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:16:5\n@@ -74,8 +74,8 @@ LL |     *x = (1,);\n    |\n help: consider changing this to be a mutable pointer\n    |\n-LL | unsafe fn named_ptr(x: *mut (i32,)) {\n-   |                        ~~~~~~~~~~~\n+LL | unsafe fn named_ptr(x: *mut const (i32,)) {\n+   |                         +++\n \n error[E0594]: cannot assign to `x.0`, which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:24:5\n@@ -85,8 +85,8 @@ LL |     (*x).0 = 1;\n    |\n help: consider changing this to be a mutable pointer\n    |\n-LL | unsafe fn named_ptr(x: *mut (i32,)) {\n-   |                        ~~~~~~~~~~~\n+LL | unsafe fn named_ptr(x: *mut const (i32,)) {\n+   |                         +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:25:5\n@@ -96,8 +96,8 @@ LL |     &mut *x;\n    |\n help: consider changing this to be a mutable pointer\n    |\n-LL | unsafe fn named_ptr(x: *mut (i32,)) {\n-   |                        ~~~~~~~~~~~\n+LL | unsafe fn named_ptr(x: *mut const (i32,)) {\n+   |                         +++\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:26:5\n@@ -107,8 +107,8 @@ LL |     &mut (*x).0;\n    |\n help: consider changing this to be a mutable pointer\n    |\n-LL | unsafe fn named_ptr(x: *mut (i32,)) {\n-   |                        ~~~~~~~~~~~\n+LL | unsafe fn named_ptr(x: *mut const (i32,)) {\n+   |                         +++\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:30:5"}, {"sha": "43647fa562b9a38465a530f694036c0847c6f704", "filename": "tests/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -6,8 +6,8 @@ LL |     f.s.push('x');\n    |\n help: consider changing this to be a mutable reference\n    |\n-LL | fn f(x: usize, f: &mut Foo<'_>) {\n-   |                   ~~~~~~~~~~~~\n+LL | fn f(x: usize, f: &mut Foo) {\n+   |                    +++\n \n error: aborting due to previous error\n "}, {"sha": "8ccb4cbb0c1672d03b2228d7743e6a3413bdeab0", "filename": "tests/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -40,7 +40,7 @@ LL |         let _ = &mut other.x;\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo1(&self, other: &mut Z) {\n-   |                           ~~~~~~\n+   |                            +++\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:25:17\n@@ -62,7 +62,7 @@ LL |         let _ = &mut other.x;\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo2<'a>(&'a self, other: &mut Z) {\n-   |                                  ~~~~~~\n+   |                                   +++\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:30:17\n@@ -84,7 +84,7 @@ LL |         let _ = &mut other.x;\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &mut Z) {\n-   |                                        ~~~~~~\n+   |                                         +++\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:35:17\n@@ -95,7 +95,7 @@ LL |         let _ = &mut other.x;\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo4(other: &mut Z) {\n-   |                    ~~~~~~\n+   |                     +++\n \n error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:41:13\n@@ -117,7 +117,7 @@ LL |     let _ = &mut w.x;\n help: consider changing this to be a mutable reference\n    |\n LL | pub fn with_arg(z: Z, w: &mut Z) {\n-   |                          ~~~~~~\n+   |                           +++\n \n error[E0594]: cannot assign to `*x.0`, which is behind a `&` reference\n   --> $DIR/issue-39544.rs:48:5"}, {"sha": "6062b31d6883cc76715432fa06666001b65915d3", "filename": "tests/ui/nll/issue-57989.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-57989.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |     *x = 0;\n help: consider changing this to be a mutable reference\n    |\n LL | fn f(x: &mut i32) {\n-   |         ~~~~~~~~\n+   |          +++\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-57989.rs:5:5"}, {"sha": "80c5f9da40cea17b391292a9c856f5f1fb27c71a", "filename": "tests/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -18,7 +18,7 @@ LL |     &mut x.y\n help: consider changing this to be a mutable reference\n    |\n LL | fn deref_extend_mut_field1(x: &mut Own<Point>) -> &mut isize {\n-   |                               ~~~~~~~~~~~~~~~\n+   |                                +++\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:78:19\n@@ -82,7 +82,7 @@ LL |     x.y_mut()\n help: consider changing this to be a mutable reference\n    |\n LL | fn deref_extend_mut_method1(x: &mut Own<Point>) -> &mut isize {\n-   |                                ~~~~~~~~~~~~~~~\n+   |                                 +++\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:129:6"}, {"sha": "99c8fa1f932d20665033e2160f1c84a9e5b4d6d5", "filename": "tests/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -19,7 +19,7 @@ LL |     (*f)();\n help: consider changing this to be a mutable reference\n    |\n LL | fn test2<F>(f: &mut F) where F: FnMut() {\n-   |                ~~~~~~\n+   |                 +++\n \n error[E0596]: cannot borrow `f.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n@@ -29,8 +29,8 @@ LL |     f.f.call_mut(())\n    |\n help: consider changing this to be a mutable reference\n    |\n-LL | fn test4(f: &mut Test<'_>) {\n-   |             ~~~~~~~~~~~~~\n+LL | fn test4(f: &mut Test) {\n+   |              +++\n \n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13"}, {"sha": "328197ae9f42945080a8554a33beb0b81affb698", "filename": "tests/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |     x.h();\n help: consider changing this to be a mutable reference\n    |\n LL | fn b(x: &mut Foo) {\n-   |         ~~~~~~~~\n+   |          +++\n \n error: aborting due to previous error\n "}, {"sha": "17fdcc622f776375073da0d5843f48bdf8b52867", "filename": "tests/ui/span/borrowck-fn-in-const-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |         x.push(format!(\"this is broken\"));\n help: consider changing this to be a mutable reference\n    |\n LL |     fn broken(x: &mut Vec<String>) {\n-   |                  ~~~~~~~~~~~~~~~~\n+   |                   +++\n \n error: aborting due to previous error\n "}, {"sha": "805a8034c184a340613b16e14908e0fd52b9f4f9", "filename": "tests/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |     x.borrowed_mut();\n help: consider changing this to be a mutable reference\n    |\n LL | fn borrowed_receiver(x: &mut dyn Foo) {\n-   |                         ~~~~~~~~~~~~\n+   |                          +++\n \n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-object-mutability.rs:18:5"}, {"sha": "06011eac674c1249907a56de0553330e576873bd", "filename": "tests/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -7,7 +7,7 @@ LL |         a.push_str(\"bar\");\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo(mut a: &mut String) {\n-   |                   ~~~~~~~~~~~\n+   |                    +++\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:8:5\n@@ -29,7 +29,7 @@ LL |         a.push_str(\"foo\");\n help: consider changing this to be a mutable reference\n    |\n LL |     pub fn foo(mut a: &mut String) {\n-   |                       ~~~~~~~~~~~\n+   |                        +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "833799081598f9cfca1e20ee3852af41a82b26d7", "filename": "tests/ui/suggestions/issue-68049-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c6a3183c17e9f889adda1faca894a7cd692b02/tests%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-68049-2.stderr?ref=57c6a3183c17e9f889adda1faca894a7cd692b02", "patch": "@@ -6,8 +6,8 @@ LL |       *input = self.0;\n    |\n help: consider changing that to be a mutable reference\n    |\n-LL |   fn example(&self, input: &mut i32); // should suggest here\n-   |                            ~~~~~~~~\n+LL |   fn example(&self, input: mut ); // should suggest here\n+   |                            ~~~\n \n error[E0594]: cannot assign to `self.0`, which is behind a `&` reference\n   --> $DIR/issue-68049-2.rs:17:5"}]}