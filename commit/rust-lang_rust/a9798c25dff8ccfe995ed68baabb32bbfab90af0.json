{"sha": "a9798c25dff8ccfe995ed68baabb32bbfab90af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Nzk4YzI1ZGZmOGNjZmU5OTVlZDY4YmFhYmIzMmJiZmFiOTBhZjA=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-16T06:02:31Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-03-05T02:23:37Z"}, "message": "Rename struct fields with uppercase characters in their names to use lowercase", "tree": {"sha": "1ce2713ad603a33123b454a1682d68d68c797086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce2713ad603a33123b454a1682d68d68c797086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9798c25dff8ccfe995ed68baabb32bbfab90af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9798c25dff8ccfe995ed68baabb32bbfab90af0", "html_url": "https://github.com/rust-lang/rust/commit/a9798c25dff8ccfe995ed68baabb32bbfab90af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9798c25dff8ccfe995ed68baabb32bbfab90af0/comments", "author": null, "committer": null, "parents": [{"sha": "935c912335283bf9637b1f62a2097f822b0ce833", "url": "https://api.github.com/repos/rust-lang/rust/commits/935c912335283bf9637b1f62a2097f822b0ce833", "html_url": "https://github.com/rust-lang/rust/commit/935c912335283bf9637b1f62a2097f822b0ce833"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "bea08366db3926356ade8f5d61acc9f4aa2019f7", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -1868,20 +1868,20 @@ impl TypeNames {\n /* Memory-managed interface to target data. */\n \n pub struct target_data_res {\n-    TD: TargetDataRef,\n+    td: TargetDataRef,\n }\n \n impl Drop for target_data_res {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMDisposeTargetData(self.TD);\n+            llvm::LLVMDisposeTargetData(self.td);\n         }\n     }\n }\n \n pub fn target_data_res(td: TargetDataRef) -> target_data_res {\n     target_data_res {\n-        TD: td\n+        td: td\n     }\n }\n \n@@ -1904,20 +1904,20 @@ pub fn mk_target_data(string_rep: &str) -> TargetData {\n /* Memory-managed interface to pass managers. */\n \n pub struct pass_manager_res {\n-    PM: PassManagerRef,\n+    pm: PassManagerRef,\n }\n \n impl Drop for pass_manager_res {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMDisposePassManager(self.PM);\n+            llvm::LLVMDisposePassManager(self.pm);\n         }\n     }\n }\n \n pub fn pass_manager_res(pm: PassManagerRef) -> pass_manager_res {\n     pass_manager_res {\n-        PM: pm\n+        pm: pm\n     }\n }\n \n@@ -1971,20 +1971,20 @@ impl Drop for ObjectFile {\n /* Memory-managed interface to section iterators. */\n \n pub struct section_iter_res {\n-    SI: SectionIteratorRef,\n+    si: SectionIteratorRef,\n }\n \n impl Drop for section_iter_res {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMDisposeSectionIterator(self.SI);\n+            llvm::LLVMDisposeSectionIterator(self.si);\n         }\n     }\n }\n \n pub fn section_iter_res(si: SectionIteratorRef) -> section_iter_res {\n     section_iter_res {\n-        SI: si\n+        si: si\n     }\n }\n "}, {"sha": "f838bcf9c5ec25406784650ca8e50e3c76ef9581", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -1853,7 +1853,7 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                 llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n             }\n         });\n-        let bld = ccx.builder.B;\n+        let bld = ccx.builder.b;\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n "}, {"sha": "92f2ffa08ecb200f980d78a6a09a99c0bb826746", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -36,7 +36,7 @@ pub fn noname() -> *c_char {\n impl<'a> Builder<'a> {\n     pub fn new(ccx: &'a CrateContext) -> Builder<'a> {\n         Builder {\n-            llbuilder: ccx.builder.B,\n+            llbuilder: ccx.builder.b,\n             ccx: ccx,\n         }\n     }"}, {"sha": "de36074d2e690ce94da4d59ecb01f2e0be3ae073", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -164,20 +164,20 @@ pub struct Stats {\n }\n \n pub struct BuilderRef_res {\n-    B: BuilderRef,\n+    b: BuilderRef,\n }\n \n impl Drop for BuilderRef_res {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMDisposeBuilder(self.B);\n+            llvm::LLVMDisposeBuilder(self.b);\n         }\n     }\n }\n \n pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res {\n     BuilderRef_res {\n-        B: b\n+        b: b\n     }\n }\n "}, {"sha": "fef559698abded4fd3c4c33fc5ff5afb75f9c801", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -2171,7 +2171,7 @@ fn set_debug_location(cx: &CrateContext, debug_location: DebugLocation) {\n     };\n \n     unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(cx.builder.B, metadata_node);\n+        llvm::LLVMSetCurrentDebugLocation(cx.builder.b, metadata_node);\n     }\n \n     debug_context(cx).current_debug_location.set(debug_location);"}, {"sha": "f836a1312c5cca4b7136987c289ccea619e1497a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -499,7 +499,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @CrateContext,\n             \"the block\".with_c_str(\n                 |s| llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llwrapfn, s));\n \n-        let builder = ccx.builder.B;\n+        let builder = ccx.builder.b;\n         llvm::LLVMPositionBuilderAtEnd(builder, the_block);\n \n         // Array for the arguments we will pass to the rust function."}, {"sha": "2741dc285f99a738ddc9f1f28c4bf6b0e973d3a2", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -269,39 +269,39 @@ pub trait Digest {\n // A structure that represents that state of a digest computation for the SHA-2 512 family of digest\n // functions\n struct Engine256State {\n-    H0: u32,\n-    H1: u32,\n-    H2: u32,\n-    H3: u32,\n-    H4: u32,\n-    H5: u32,\n-    H6: u32,\n-    H7: u32,\n+    h0: u32,\n+    h1: u32,\n+    h2: u32,\n+    h3: u32,\n+    h4: u32,\n+    h5: u32,\n+    h6: u32,\n+    h7: u32,\n }\n \n impl Engine256State {\n     fn new(h: &[u32, ..8]) -> Engine256State {\n         return Engine256State {\n-            H0: h[0],\n-            H1: h[1],\n-            H2: h[2],\n-            H3: h[3],\n-            H4: h[4],\n-            H5: h[5],\n-            H6: h[6],\n-            H7: h[7]\n+            h0: h[0],\n+            h1: h[1],\n+            h2: h[2],\n+            h3: h[3],\n+            h4: h[4],\n+            h5: h[5],\n+            h6: h[6],\n+            h7: h[7]\n         };\n     }\n \n     fn reset(&mut self, h: &[u32, ..8]) {\n-        self.H0 = h[0];\n-        self.H1 = h[1];\n-        self.H2 = h[2];\n-        self.H3 = h[3];\n-        self.H4 = h[4];\n-        self.H5 = h[5];\n-        self.H6 = h[6];\n-        self.H7 = h[7];\n+        self.h0 = h[0];\n+        self.h1 = h[1];\n+        self.h2 = h[2];\n+        self.h3 = h[3];\n+        self.h4 = h[4];\n+        self.h5 = h[5];\n+        self.h6 = h[6];\n+        self.h7 = h[7];\n     }\n \n     fn process_block(&mut self, data: &[u8]) {\n@@ -329,14 +329,14 @@ impl Engine256State {\n             ((x >> 17) | (x << 15)) ^ ((x >> 19) | (x << 13)) ^ (x >> 10)\n         }\n \n-        let mut a = self.H0;\n-        let mut b = self.H1;\n-        let mut c = self.H2;\n-        let mut d = self.H3;\n-        let mut e = self.H4;\n-        let mut f = self.H5;\n-        let mut g = self.H6;\n-        let mut h = self.H7;\n+        let mut a = self.h0;\n+        let mut b = self.h1;\n+        let mut c = self.h2;\n+        let mut d = self.h3;\n+        let mut e = self.h4;\n+        let mut f = self.h5;\n+        let mut g = self.h6;\n+        let mut h = self.h7;\n \n         let mut w = [0u32, ..64];\n \n@@ -393,14 +393,14 @@ impl Engine256State {\n             sha2_round!(b, c, d, e, f, g, h, a, K32, t + 7);\n         }\n \n-        self.H0 += a;\n-        self.H1 += b;\n-        self.H2 += c;\n-        self.H3 += d;\n-        self.H4 += e;\n-        self.H5 += f;\n-        self.H6 += g;\n-        self.H7 += h;\n+        self.h0 += a;\n+        self.h1 += b;\n+        self.h2 += c;\n+        self.h3 += d;\n+        self.h4 += e;\n+        self.h5 += f;\n+        self.h6 += g;\n+        self.h7 += h;\n     }\n }\n \n@@ -494,14 +494,14 @@ impl Digest for Sha256 {\n     fn result(&mut self, out: &mut [u8]) {\n         self.engine.finish();\n \n-        write_u32_be(out.mut_slice(0, 4), self.engine.state.H0);\n-        write_u32_be(out.mut_slice(4, 8), self.engine.state.H1);\n-        write_u32_be(out.mut_slice(8, 12), self.engine.state.H2);\n-        write_u32_be(out.mut_slice(12, 16), self.engine.state.H3);\n-        write_u32_be(out.mut_slice(16, 20), self.engine.state.H4);\n-        write_u32_be(out.mut_slice(20, 24), self.engine.state.H5);\n-        write_u32_be(out.mut_slice(24, 28), self.engine.state.H6);\n-        write_u32_be(out.mut_slice(28, 32), self.engine.state.H7);\n+        write_u32_be(out.mut_slice(0, 4), self.engine.state.h0);\n+        write_u32_be(out.mut_slice(4, 8), self.engine.state.h1);\n+        write_u32_be(out.mut_slice(8, 12), self.engine.state.h2);\n+        write_u32_be(out.mut_slice(12, 16), self.engine.state.h3);\n+        write_u32_be(out.mut_slice(16, 20), self.engine.state.h4);\n+        write_u32_be(out.mut_slice(20, 24), self.engine.state.h5);\n+        write_u32_be(out.mut_slice(24, 28), self.engine.state.h6);\n+        write_u32_be(out.mut_slice(28, 32), self.engine.state.h7);\n     }\n \n     fn reset(&mut self) {"}, {"sha": "8eaa86ea707db1e8e393480bf255b6137d686709", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9798c25dff8ccfe995ed68baabb32bbfab90af0/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=a9798c25dff8ccfe995ed68baabb32bbfab90af0", "patch": "@@ -36,7 +36,7 @@ impl UdpSocket {\n     }\n \n     pub fn connect(self, other: SocketAddr) -> UdpStream {\n-        UdpStream { socket: self, connectedTo: other }\n+        UdpStream { socket: self, connected_to: other }\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<SocketAddr> {\n@@ -59,7 +59,7 @@ impl Clone for UdpSocket {\n \n pub struct UdpStream {\n     priv socket: UdpSocket,\n-    priv connectedTo: SocketAddr\n+    priv connected_to: SocketAddr\n }\n \n impl UdpStream {\n@@ -72,7 +72,7 @@ impl UdpStream {\n \n impl Reader for UdpStream {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n-        let peer = self.connectedTo;\n+        let peer = self.connected_to;\n         self.as_socket(|sock| {\n             match sock.recvfrom(buf) {\n                 Ok((_nread, src)) if src != peer => Ok(0),\n@@ -85,7 +85,7 @@ impl Reader for UdpStream {\n \n impl Writer for UdpStream {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        let connected_to = self.connectedTo;\n+        let connected_to = self.connected_to;\n         self.as_socket(|sock| sock.sendto(buf, connected_to))\n     }\n }"}]}