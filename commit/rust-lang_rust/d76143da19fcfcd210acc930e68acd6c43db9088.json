{"sha": "d76143da19fcfcd210acc930e68acd6c43db9088", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjE0M2RhMTlmY2ZjZDIxMGFjYzkzMGU2OGFjZDZjNDNkYjkwODg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-14T10:52:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T10:52:12Z"}, "message": "Merge #7211\n\n7211: Fixed expr meta var after path colons in mbe r=matklad a=edwin0cheng\n\nFixes #7207\r\n\r\nAdded `L_DOLLAR` in `ITEM_RECOVERY_SET` , but I don't know whether it is a good idea.\r\n\r\nr? @matklad \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "0a1aab6dbe05e7a16caad5f58a787fd39abda6b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1aab6dbe05e7a16caad5f58a787fd39abda6b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d76143da19fcfcd210acc930e68acd6c43db9088", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgACJcCRBK7hj4Ov3rIwAAdHIIAB7zWQ2sVW+iJtIwf/mN9Cno\nMhTdPSQGjv5tnVe78M2LaxekbuvJCCVSE5XmvWJGKFJMuBug/jdlK6KkjRHsrOXH\nBN5l/FGtTMo/lHbQij0Z95HC2j7Iq6kZq8uw7jEvkDYbteFp9mShqsDrQmvWooIi\n/ESqTpz8HtavGCaDuAI5sCrXmW1mN5j176ZDrtVA44Z8oG0BzEA8lkTjZ8s/fUSf\nykBHPFK0DOXRKjzy+oPQUa/GPRX/OSx+DPKNLzrQIhY0nBPkas43yRJGyUCUvuhl\nmrxvn3zLu+wCIUaGC8C88s78sQq7AiVk+fjVoQCJPJzs3tld9p2lHscwkVKo5vo=\n=pddX\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a1aab6dbe05e7a16caad5f58a787fd39abda6b8\nparent d635806ea5090426cd4a5a57601a7f823277e84c\nparent 8d62576a9b47922ce58ac757e6e4944d45b223a6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610621532 +0000\ncommitter GitHub <noreply@github.com> 1610621532 +0000\n\nMerge #7211\n\n7211: Fixed expr meta var after path colons in mbe r=matklad a=edwin0cheng\n\nFixes #7207\r\n\r\nAdded `L_DOLLAR` in `ITEM_RECOVERY_SET` , but I don't know whether it is a good idea.\r\n\r\nr? @matklad \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d76143da19fcfcd210acc930e68acd6c43db9088", "html_url": "https://github.com/rust-lang/rust/commit/d76143da19fcfcd210acc930e68acd6c43db9088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d76143da19fcfcd210acc930e68acd6c43db9088/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d635806ea5090426cd4a5a57601a7f823277e84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d635806ea5090426cd4a5a57601a7f823277e84c", "html_url": "https://github.com/rust-lang/rust/commit/d635806ea5090426cd4a5a57601a7f823277e84c"}, {"sha": "8d62576a9b47922ce58ac757e6e4944d45b223a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d62576a9b47922ce58ac757e6e4944d45b223a6", "html_url": "https://github.com/rust-lang/rust/commit/8d62576a9b47922ce58ac757e6e4944d45b223a6"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "9ff901e975010efe1b4b6de7b128de40d532afd6", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d76143da19fcfcd210acc930e68acd6c43db9088/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76143da19fcfcd210acc930e68acd6c43db9088/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=d76143da19fcfcd210acc930e68acd6c43db9088", "patch": "@@ -1,7 +1,11 @@\n use std::fmt::Write;\n \n use ::parser::FragmentKind;\n-use syntax::{ast, AstNode, NodeOrToken, SyntaxKind::IDENT, SyntaxNode, WalkEvent, T};\n+use syntax::{\n+    ast, AstNode, NodeOrToken,\n+    SyntaxKind::{ERROR, IDENT},\n+    SyntaxNode, WalkEvent, T,\n+};\n use test_utils::assert_eq_text;\n \n use super::*;\n@@ -1194,6 +1198,23 @@ macro_rules! foo {\n     );\n }\n \n+#[test]\n+fn test_expr_after_path_colons() {\n+    assert!(parse_macro(\n+        r#\"\n+macro_rules! m {\n+    ($k:expr) => {\n+            f(K::$k);\n+       }\n+}\n+\"#,\n+    )\n+    .expand_statements(r#\"m!(C(\"0\"))\"#)\n+    .descendants()\n+    .find(|token| token.kind() == ERROR)\n+    .is_some());\n+}\n+\n // The following tests are based on real world situations\n #[test]\n fn test_vec() {"}, {"sha": "81e26e009aa0b9b9d7975721580f2bc4a395f63a", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d76143da19fcfcd210acc930e68acd6c43db9088/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76143da19fcfcd210acc930e68acd6c43db9088/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=d76143da19fcfcd210acc930e68acd6c43db9088", "patch": "@@ -7,7 +7,7 @@ use drop_bomb::DropBomb;\n use crate::{\n     event::Event,\n     ParseError,\n-    SyntaxKind::{self, EOF, ERROR, TOMBSTONE},\n+    SyntaxKind::{self, EOF, ERROR, L_DOLLAR, R_DOLLAR, TOMBSTONE},\n     TokenSet, TokenSource, T,\n };\n \n@@ -215,13 +215,23 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        self.err_recover(message, TokenSet::EMPTY);\n+        match self.current() {\n+            L_DOLLAR | R_DOLLAR => {\n+                let m = self.start();\n+                self.error(message);\n+                self.bump_any();\n+                m.complete(self, ERROR);\n+            }\n+            _ => {\n+                self.err_recover(message, TokenSet::EMPTY);\n+            }\n+        }\n     }\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_recover(&mut self, message: &str, recovery: TokenSet) {\n         match self.current() {\n-            T!['{'] | T!['}'] => {\n+            T!['{'] | T!['}'] | L_DOLLAR | R_DOLLAR => {\n                 self.error(message);\n                 return;\n             }"}]}