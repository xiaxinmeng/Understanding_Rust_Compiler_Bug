{"sha": "50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjNlY2YzYmNjMmUzOWE3YTQyZTdmNGI0OWYxOTM5OGQ1Y2M2ODE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T23:18:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T23:18:55Z"}, "message": "rollup merge of #23919: alexcrichton/stabilize-io-error\n\nConflicts:\n\tsrc/libstd/fs/tempdir.rs\n\tsrc/libstd/io/error.rs", "tree": {"sha": "0546f83f5625d11fc4d5d9b2ad215a4ac3ce4778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0546f83f5625d11fc4d5d9b2ad215a4ac3ce4778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "html_url": "https://github.com/rust-lang/rust/commit/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e997adfffa5e8511ff31710649038216028832", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e997adfffa5e8511ff31710649038216028832", "html_url": "https://github.com/rust-lang/rust/commit/85e997adfffa5e8511ff31710649038216028832"}, {"sha": "ac77392f8ab1c201b0c927f6a2d30b632b95acda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac77392f8ab1c201b0c927f6a2d30b632b95acda", "html_url": "https://github.com/rust-lang/rust/commit/ac77392f8ab1c201b0c927f6a2d30b632b95acda"}], "stats": {"total": 180, "additions": 108, "deletions": 72}, "files": [{"sha": "550b25ac3a7cfa00e95ecee31063edf59cd8cf46", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -56,8 +56,10 @@ use core::fmt;\n use core::hash::{self, Hash};\n use core::mem;\n use core::ops::{Deref, DerefMut};\n-use core::ptr::Unique;\n-use core::raw::TraitObject;\n+use core::ptr::{self, Unique};\n+use core::raw::{TraitObject, Slice};\n+\n+use heap;\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -313,3 +315,43 @@ impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n         Box::new(err)\n     }\n }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, E: Error + Send + 'a> From<E> for Box<Error + Send + 'a> {\n+    fn from(err: E) -> Box<Error + Send + 'a> {\n+        Box::new(err)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, 'b> From<&'b str> for Box<Error + Send + 'a> {\n+    fn from(err: &'b str) -> Box<Error + Send + 'a> {\n+        #[derive(Debug)]\n+        struct StringError(Box<str>);\n+        impl Error for StringError {\n+            fn description(&self) -> &str { &self.0 }\n+        }\n+        impl fmt::Display for StringError {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                self.0.fmt(f)\n+            }\n+        }\n+\n+        // Unfortunately `String` is located in libcollections, so we construct\n+        // a `Box<str>` manually here.\n+        unsafe {\n+            let alloc = if err.len() == 0 {\n+                0 as *mut u8\n+            } else {\n+                let ptr = heap::allocate(err.len(), 1);\n+                if ptr.is_null() { ::oom(); }\n+                ptr as *mut u8\n+            };\n+            ptr::copy(err.as_bytes().as_ptr(), alloc, err.len());\n+            Box::new(StringError(mem::transmute(Slice {\n+                data: alloc,\n+                len: err.len(),\n+            })))\n+        }\n+    }\n+}"}, {"sha": "a880ba5cfe4e28d7fcff57a0befaac4e7ad39bc4", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -78,6 +78,7 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(core)]\n #![feature(unique)]\n+#![feature(convert)]\n #![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]"}, {"sha": "878ef04942a429fab2411bc9a43ca726430f53ea", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -862,8 +862,8 @@ pub mod writer {\n         } else if 0x100 <= n && n < NUM_TAGS {\n             w.write_all(&[0xf0 | (n >> 8) as u8, n as u8])\n         } else {\n-            Err(io::Error::new(io::ErrorKind::Other, \"invalid tag\",\n-                               Some(n.to_string())))\n+            Err(io::Error::new(io::ErrorKind::Other,\n+                               &format!(\"invalid tag: {}\", n)[..]))\n         }\n     }\n \n@@ -876,7 +876,7 @@ pub mod writer {\n             4 => w.write_all(&[0x10 | ((n >> 24) as u8), (n >> 16) as u8,\n                             (n >> 8) as u8, n as u8]),\n             _ => Err(io::Error::new(io::ErrorKind::Other,\n-                                    \"isize too big\", Some(n.to_string())))\n+                                    &format!(\"isize too big: {}\", n)[..]))\n         }\n     }\n \n@@ -885,8 +885,8 @@ pub mod writer {\n         if n < 0x4000 { return write_sized_vuint(w, n, 2); }\n         if n < 0x200000 { return write_sized_vuint(w, n, 3); }\n         if n < 0x10000000 { return write_sized_vuint(w, n, 4); }\n-        Err(io::Error::new(io::ErrorKind::Other, \"isize too big\",\n-                           Some(n.to_string())))\n+        Err(io::Error::new(io::ErrorKind::Other,\n+                           &format!(\"isize too big: {}\", n)[..]))\n     }\n \n     impl<'a> Encoder<'a> {\n@@ -1077,8 +1077,8 @@ pub mod writer {\n                 self.wr_tagged_raw_u32(EsSub32 as usize, v)\n             } else {\n                 Err(io::Error::new(io::ErrorKind::Other,\n-                                   \"length or variant id too big\",\n-                                   Some(v.to_string())))\n+                                   &format!(\"length or variant id too big: {}\",\n+                                            v)[..]))\n             }\n         }\n "}, {"sha": "231f6ee3be6adb317f0c5ac4bd6551919047d87d", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -21,9 +21,7 @@ pub fn realpath(original: &Path) -> io::Result<PathBuf> {\n     let old = old_path::Path::new(original.to_str().unwrap());\n     match old_realpath(&old) {\n         Ok(p) => Ok(PathBuf::from(p.as_str().unwrap())),\n-        Err(e) => Err(io::Error::new(io::ErrorKind::Other,\n-                                     \"realpath error\",\n-                                     Some(e.to_string())))\n+        Err(e) => Err(io::Error::new(io::ErrorKind::Other, e))\n     }\n }\n "}, {"sha": "7591ebf67f868e8ee43c71568f8aadc2845fd804", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -36,7 +36,6 @@\n #![feature(collections)]\n #![feature(core)]\n #![feature(old_fs)]\n-#![feature(io)]\n #![feature(old_io)]\n #![feature(old_path)]\n #![feature(rustc_private)]"}, {"sha": "42cbdd7577d8e3b5d27d3b8d9d7d17b6a5dbe90d", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -47,9 +47,10 @@ pub fn get_sdk_root(sdk_name: &str) -> String {\n                               Ok(String::from_utf8(output.stdout).unwrap())\n                           } else {\n                               let error = String::from_utf8(output.stderr);\n+                              let error = format!(\"process exit with error: {}\",\n+                                                  error.unwrap());\n                               Err(io::Error::new(io::ErrorKind::Other,\n-                                                 \"process exit with error\",\n-                                                 error.ok()))\n+                                                 &error[..]))\n                           }\n                       });\n "}, {"sha": "b12732f8794564ded4b09bcb5323db2c895e0d27", "filename": "src/librustc_back/tempdir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -67,8 +67,7 @@ impl TempDir {\n         }\n \n         Err(Error::new(ErrorKind::AlreadyExists,\n-                       \"too many temporary directories already exist\",\n-                       None))\n+                       \"too many temporary directories already exist\"))\n     }\n \n     /// Attempts to make a temporary directory inside of `env::temp_dir()` whose"}, {"sha": "be416327dad3b192f521255d2007790372478f7a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -34,7 +34,6 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(exit_status)]\n-#![feature(io)]\n #![feature(set_stdio)]\n #![feature(unicode)]\n "}, {"sha": "fe55ca3b73bfbedf5566e025eab251bc41fe90d7", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -699,8 +699,8 @@ fn print_flowgraph<W: Write>(variants: Vec<borrowck_dot::Variant>,\n \n     fn expand_err_details(r: io::Result<()>) -> io::Result<()> {\n         r.map_err(|ioerr| {\n-            io::Error::new(io::ErrorKind::Other, \"graphviz::render failed\",\n-                           Some(ioerr.to_string()))\n+            io::Error::new(io::ErrorKind::Other,\n+                           &format!(\"graphviz::render failed: {}\", ioerr)[..])\n         })\n     }\n }"}, {"sha": "de91e5f32683939d5bee102c8739c14a0d6b5e25", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -241,7 +241,7 @@ impl fmt::Display for NulError {\n impl From<NulError> for io::Error {\n     fn from(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n-                       \"data provided contains a nul byte\", None)\n+                       \"data provided contains a nul byte\")\n     }\n }\n "}, {"sha": "4f97ae8f69bba0541d2d54dbeeda74a7c3cae218", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -576,8 +576,7 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n     let to = to.as_ref();\n     if !from.is_file() {\n         return Err(Error::new(ErrorKind::InvalidInput,\n-                              \"the source path is not an existing file\",\n-                              None))\n+                              \"the source path is not an existing file\"))\n     }\n \n     let mut reader = try!(File::open(from));"}, {"sha": "479665c4728da124754d4650f857633217673e78", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -165,7 +165,7 @@ impl<W: Write> BufWriter<W> {\n             match self.inner.as_mut().unwrap().write(&self.buf[written..]) {\n                 Ok(0) => {\n                     ret = Err(Error::new(ErrorKind::WriteZero,\n-                                         \"failed to write the buffered data\", None));\n+                                         \"failed to write the buffered data\"));\n                     break;\n                 }\n                 Ok(n) => written += n,"}, {"sha": "a7b7f96c22b33e5e73ebc8811bf7fbd852b17a69", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -75,8 +75,7 @@ macro_rules! seek {\n \n             if pos < 0 {\n                 Err(Error::new(ErrorKind::InvalidInput,\n-                               \"invalid seek to a negative position\",\n-                               None))\n+                               \"invalid seek to a negative position\"))\n             } else {\n                 self.pos = pos as u64;\n                 Ok(self.pos)"}, {"sha": "b84dcb8fb620616f256927c8d68e69b8567ba0e9", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use boxed::Box;\n+use convert::Into;\n use error;\n use fmt;\n+use marker::Send;\n use option::Option::{self, Some, None};\n use result;\n-use string::String;\n use sys;\n \n /// A type for results generated by I/O related functions where the `Err` type\n@@ -30,23 +31,22 @@ pub type Result<T> = result::Result<T, Error>;\n /// Errors mostly originate from the underlying OS, but custom instances of\n /// `Error` can be created with crafted error messages and a particular value of\n /// `ErrorKind`.\n-#[derive(PartialEq, Eq, Clone, Debug)]\n+#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Error {\n     repr: Repr,\n }\n \n-#[derive(PartialEq, Eq, Clone, Debug)]\n+#[derive(Debug)]\n enum Repr {\n     Os(i32),\n     Custom(Box<Custom>),\n }\n \n-#[derive(PartialEq, Eq, Clone, Debug)]\n+#[derive(Debug)]\n struct Custom {\n     kind: ErrorKind,\n-    desc: &'static str,\n-    detail: Option<String>\n+    error: Box<error::Error+Send>,\n }\n \n /// A list specifying general categories of I/O error.\n@@ -124,18 +124,34 @@ pub enum ErrorKind {\n }\n \n impl Error {\n-    /// Creates a new custom error from a specified kind/description/detail.\n-    #[unstable(feature = \"io\", reason = \"the exact makeup of an Error may\n-                                         change to include `Box<Error>` for \\\n-                                         example\")]\n-    pub fn new(kind: ErrorKind,\n-               description: &'static str,\n-               detail: Option<String>) -> Error {\n+    /// Creates a new I/O error from a known kind of error as well as an\n+    /// arbitrary error payload.\n+    ///\n+    /// This function is used to generically create I/O errors which do not\n+    /// originate from the OS itself. The `error` argument is an arbitrary\n+    /// payload which will be contained in this `Error`. Accessors as well as\n+    /// downcasting will soon be added to this type as well to access the custom\n+    /// information.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// // errors can be created from strings\n+    /// let custom_error = Error::new(ErrorKind::Other, \"oh no!\");\n+    ///\n+    /// // errors can also be created from other errors\n+    /// let custom_error2 = Error::new(ErrorKind::Interrupted, custom_error);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn new<E>(kind: ErrorKind, error: E) -> Error\n+        where E: Into<Box<error::Error+Send>>\n+    {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n                 kind: kind,\n-                desc: description,\n-                detail: detail,\n+                error: error.into(),\n             }))\n         }\n     }\n@@ -161,8 +177,7 @@ impl Error {\n     ///\n     /// If this `Error` was constructed via `last_os_error` then this function\n     /// will return `Some`, otherwise it will return `None`.\n-    #[unstable(feature = \"io\", reason = \"function was just added and the return \\\n-                                         type may become an abstract OS error\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n             Repr::Os(i) => Some(i),\n@@ -188,21 +203,7 @@ impl fmt::Display for Error {\n                 let detail = sys::os::error_string(code);\n                 write!(fmt, \"{} (os error {})\", detail, code)\n             }\n-            Repr::Custom(ref c) => {\n-                match **c {\n-                    Custom {\n-                        kind: ErrorKind::Other,\n-                        desc: \"unknown error\",\n-                        detail: Some(ref detail)\n-                    } => {\n-                        write!(fmt, \"{}\", detail)\n-                    }\n-                    Custom { detail: None, desc, .. } =>\n-                        write!(fmt, \"{}\", desc),\n-                    Custom { detail: Some(ref detail), desc, .. } =>\n-                        write!(fmt, \"{} ({})\", desc, detail)\n-                }\n-            }\n+            Repr::Custom(ref c) => c.error.fmt(fmt),\n         }\n     }\n }\n@@ -212,7 +213,7 @@ impl error::Error for Error {\n     fn description(&self) -> &str {\n         match self.repr {\n             Repr::Os(..) => \"os error\",\n-            Repr::Custom(ref c) => c.desc,\n+            Repr::Custom(ref c) => c.error.description(),\n         }\n     }\n }"}, {"sha": "67bc45d3b62a1fd4d514b238786ccab5be086af8", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -180,7 +180,7 @@ impl<'a> Write for &'a mut [u8] {\n         if try!(self.write(data)) == data.len() {\n             Ok(())\n         } else {\n-            Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\", None))\n+            Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\"))\n         }\n     }\n "}, {"sha": "d72abe8c69bf3741d65036bb8a263ea5e9095a9e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -83,7 +83,7 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n         if str::from_utf8(&g.s[g.len..]).is_err() {\n             ret.and_then(|_| {\n                 Err(Error::new(ErrorKind::InvalidInput,\n-                               \"stream did not contain valid UTF-8\", None))\n+                               \"stream did not contain valid UTF-8\"))\n             })\n         } else {\n             g.len = g.s.len();\n@@ -359,8 +359,7 @@ pub trait Write {\n         while buf.len() > 0 {\n             match self.write(buf) {\n                 Ok(0) => return Err(Error::new(ErrorKind::WriteZero,\n-                                               \"failed to write whole buffer\",\n-                                               None)),\n+                                               \"failed to write whole buffer\")),\n                 Ok(n) => buf = &buf[n..],\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n@@ -782,7 +781,7 @@ pub struct Chars<R> {\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n-#[derive(PartialEq, Clone, Debug)]\n+#[derive(Debug)]\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully"}, {"sha": "eb6cb4416063d096d0d11aea1b0c7fdc49a3a92e", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -435,7 +435,7 @@ impl ToSocketAddrs for str {\n                 match $e {\n                     Some(r) => r,\n                     None => return Err(io::Error::new(io::ErrorKind::InvalidInput,\n-                                                      $msg, None)),\n+                                                      $msg)),\n                 }\n             )\n         }"}, {"sha": "a152b98822a0bead2e9c337d927ca36d21a8fb02", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -72,7 +72,7 @@ fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>\n     }\n     Err(last_err.unwrap_or_else(|| {\n         Error::new(ErrorKind::InvalidInput,\n-                   \"could not resolve to any addresses\", None)\n+                   \"could not resolve to any addresses\")\n     }))\n }\n "}, {"sha": "14b5c974b67786dd393af4cc73a5ecb989691409", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -76,7 +76,7 @@ impl UdpSocket {\n         match try!(addr.to_socket_addrs()).next() {\n             Some(addr) => self.0.send_to(buf, &addr),\n             None => Err(Error::new(ErrorKind::InvalidInput,\n-                                   \"no addresses to send data to\", None)),\n+                                   \"no addresses to send data to\")),\n         }\n     }\n "}, {"sha": "ca25cadb9dc64e547e588940b2dcaf6e44d3372c", "filename": "src/libstd/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -456,7 +456,6 @@ impl Child {\n             return Err(Error::new(\n                 ErrorKind::InvalidInput,\n                 \"invalid argument: can't kill an exited process\",\n-                None\n             ))\n         }\n "}, {"sha": "7d42d65d360f548db50943439b54c8908ffd6854", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -75,7 +75,7 @@ fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             })))\n         }\n         _ => {\n-            Err(Error::new(ErrorKind::InvalidInput, \"invalid argument\", None))\n+            Err(Error::new(ErrorKind::InvalidInput, \"invalid argument\"))\n         }\n     }\n }\n@@ -158,8 +158,7 @@ pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     match from_utf8(data.to_bytes()) {\n         Ok(name) => Ok(name.to_string()),\n         Err(_) => Err(io::Error::new(io::ErrorKind::Other,\n-                                     \"failed to lookup address information\",\n-                                     Some(\"invalid host name\".to_string())))\n+                                     \"failed to lookup address information\"))\n     }\n }\n "}, {"sha": "908136a42ab00a96723bc902d863def68d5f26ef", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "patch": "@@ -35,7 +35,8 @@ pub fn cvt_gai(err: c_int) -> io::Result<()> {\n             .to_string()\n     };\n     Err(io::Error::new(io::ErrorKind::Other,\n-                       \"failed to lookup address information\", Some(detail)))\n+                       &format!(\"failed to lookup address information: {}\",\n+                                detail)[..]))\n }\n \n impl Socket {"}]}