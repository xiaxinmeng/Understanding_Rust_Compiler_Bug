{"sha": "f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzdmMWM1YTI3YjJkODAyMzM0MjE2M2M2YWM1YzM5NGQ5MWMxZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T03:26:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T03:26:36Z"}, "message": "auto merge of #19050 : japaric/rust/moar-dst, r=aturon\n\nr? @aturon \r\ncc #16918", "tree": {"sha": "4333f8b4ea88527bd710be5f8a8b8ea584338ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4333f8b4ea88527bd710be5f8a8b8ea584338ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "html_url": "https://github.com/rust-lang/rust/commit/f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c96a79a74f10bed18b031ce0ac4126c56d6cfb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c96a79a74f10bed18b031ce0ac4126c56d6cfb3", "html_url": "https://github.com/rust-lang/rust/commit/9c96a79a74f10bed18b031ce0ac4126c56d6cfb3"}, {"sha": "d50e80f449b068bc5a239fc6680162ff852cdbfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50e80f449b068bc5a239fc6680162ff852cdbfd", "html_url": "https://github.com/rust-lang/rust/commit/d50e80f449b068bc5a239fc6680162ff852cdbfd"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "cb235c015ff74d92ee56942c6643e2d12e404feb", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "patch": "@@ -62,12 +62,12 @@ impl RegClass {\n     }\n }\n \n-trait ClassList {\n+trait ClassList for Sized? {\n     fn is_pass_byval(&self) -> bool;\n     fn is_ret_bysret(&self) -> bool;\n }\n \n-impl<'a> ClassList for &'a [RegClass] {\n+impl ClassList for [RegClass] {\n     fn is_pass_byval(&self) -> bool {\n         if self.len() == 0 { return false; }\n "}, {"sha": "28e97e0f658b1cfc8ccb3008d340c0e834c44b2d", "filename": "src/librustc/middle/trans/llrepr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs?ref=f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "patch": "@@ -12,11 +12,11 @@ use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n use llvm::ValueRef;\n \n-pub trait LlvmRepr {\n+pub trait LlvmRepr for Sized? {\n     fn llrepr(&self, ccx: &CrateContext) -> String;\n }\n \n-impl<'a, T:LlvmRepr> LlvmRepr for &'a [T] {\n+impl<T:LlvmRepr> LlvmRepr for [T] {\n     fn llrepr(&self, ccx: &CrateContext) -> String {\n         let reprs: Vec<String> = self.iter().map(|t| t.llrepr(ccx)).collect();\n         format!(\"[{}]\", reprs.connect(\",\"))"}, {"sha": "e6015bfc074ec028dae25e92627187fbe88a3037", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "patch": "@@ -37,7 +37,7 @@ use syntax::{ast, ast_util};\n use syntax::owned_slice::OwnedSlice;\n \n /// Produces a string suitable for debugging output.\n-pub trait Repr {\n+pub trait Repr for Sized? {\n     fn repr(&self, tcx: &ctxt) -> String;\n }\n \n@@ -578,9 +578,9 @@ impl Repr for () {\n     }\n }\n \n-impl<'a,T:Repr> Repr for &'a T {\n+impl<'a, Sized? T:Repr> Repr for &'a T {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        (&**self).repr(tcx)\n+        Repr::repr(*self, tcx)\n     }\n }\n \n@@ -600,9 +600,9 @@ fn repr_vec<T:Repr>(tcx: &ctxt, v: &[T]) -> String {\n     vec_map_to_string(v, |t| t.repr(tcx))\n }\n \n-impl<'a, T:Repr> Repr for &'a [T] {\n+impl<T:Repr> Repr for [T] {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        repr_vec(tcx, *self)\n+        repr_vec(tcx, self)\n     }\n }\n "}, {"sha": "ec69175707746693a724479551e5f0f456f20635", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "patch": "@@ -90,14 +90,14 @@ pub mod rt {\n     */\n \n     // FIXME: Move this trait to pprust and get rid of *_to_str?\n-    pub trait ToSource {\n+    pub trait ToSource for Sized? {\n         // Takes a thing and generates a string containing rust code for it.\n         fn to_source(&self) -> String;\n     }\n \n     // FIXME (Issue #16472): This should go away after ToToken impls\n     // are revised to go directly to token-trees.\n-    trait ToSourceWithHygiene : ToSource {\n+    trait ToSourceWithHygiene for Sized? : ToSource {\n         // Takes a thing and generates a string containing rust code\n         // for it, encoding Idents as special byte sequences to\n         // maintain hygiene across serialization and deserialization.\n@@ -150,15 +150,15 @@ pub mod rt {\n \n     macro_rules! impl_to_source_slice(\n         ($t:ty, $sep:expr) => (\n-            impl<'a> ToSource for &'a [$t] {\n+            impl ToSource for [$t] {\n                 fn to_source(&self) -> String {\n-                    slice_to_source($sep, *self)\n+                    slice_to_source($sep, self)\n                 }\n             }\n \n-            impl<'a> ToSourceWithHygiene for &'a [$t] {\n+            impl ToSourceWithHygiene for [$t] {\n                 fn to_source_with_hygiene(&self) -> String {\n-                    slice_to_source_with_hygiene($sep, *self)\n+                    slice_to_source_with_hygiene($sep, self)\n                 }\n             }\n         )\n@@ -200,14 +200,14 @@ pub mod rt {\n         }\n     }\n \n-    impl<'a> ToSource for &'a str {\n+    impl ToSource for str {\n         fn to_source(&self) -> String {\n             let lit = dummy_spanned(ast::LitStr(\n-                    token::intern_and_get_ident(*self), ast::CookedStr));\n+                    token::intern_and_get_ident(self), ast::CookedStr));\n             pprust::lit_to_string(&lit)\n         }\n     }\n-    impl<'a> ToSourceWithHygiene for &'a str {\n+    impl ToSourceWithHygiene for str {\n         fn to_source_with_hygiene(&self) -> String {\n             self.to_source()\n         }"}, {"sha": "5161d1de7eecdbb3ebe2dd162bcab0dbe08ed3b6", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f637f1c5a27b2d8023342163c6ac5c394d91c1fe/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=f637f1c5a27b2d8023342163c6ac5c394d91c1fe", "patch": "@@ -38,7 +38,7 @@ fn local_sort<T: Float>(v: &mut [T]) {\n }\n \n /// Trait that provides simple descriptive statistics on a univariate set of numeric samples.\n-pub trait Stats <T: FloatMath + FromPrimitive>{\n+pub trait Stats <T: FloatMath + FromPrimitive> for Sized? {\n \n     /// Sum of the samples.\n     ///\n@@ -47,24 +47,24 @@ pub trait Stats <T: FloatMath + FromPrimitive>{\n     /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric Predicates\"]\n     /// (http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps)\n     /// *Discrete & Computational Geometry 18*, 3 (Oct 1997), 305-363, Shewchuk J.R.\n-    fn sum(self) -> T;\n+    fn sum(&self) -> T;\n \n     /// Minimum value of the samples.\n-    fn min(self) -> T;\n+    fn min(&self) -> T;\n \n     /// Maximum value of the samples.\n-    fn max(self) -> T;\n+    fn max(&self) -> T;\n \n     /// Arithmetic mean (average) of the samples: sum divided by sample-count.\n     ///\n     /// See: https://en.wikipedia.org/wiki/Arithmetic_mean\n-    fn mean(self) -> T;\n+    fn mean(&self) -> T;\n \n     /// Median of the samples: value separating the lower half of the samples from the higher half.\n     /// Equal to `self.percentile(50.0)`.\n     ///\n     /// See: https://en.wikipedia.org/wiki/Median\n-    fn median(self) -> T;\n+    fn median(&self) -> T;\n \n     /// Variance of the samples: bias-corrected mean of the squares of the differences of each\n     /// sample from the sample mean. Note that this calculates the _sample variance_ rather than the\n@@ -73,21 +73,21 @@ pub trait Stats <T: FloatMath + FromPrimitive>{\n     /// than `n`.\n     ///\n     /// See: https://en.wikipedia.org/wiki/Variance\n-    fn var(self) -> T;\n+    fn var(&self) -> T;\n \n     /// Standard deviation: the square root of the sample variance.\n     ///\n     /// Note: this is not a robust statistic for non-normal distributions. Prefer the\n     /// `median_abs_dev` for unknown distributions.\n     ///\n     /// See: https://en.wikipedia.org/wiki/Standard_deviation\n-    fn std_dev(self) -> T;\n+    fn std_dev(&self) -> T;\n \n     /// Standard deviation as a percent of the mean value. See `std_dev` and `mean`.\n     ///\n     /// Note: this is not a robust statistic for non-normal distributions. Prefer the\n     /// `median_abs_dev_pct` for unknown distributions.\n-    fn std_dev_pct(self) -> T;\n+    fn std_dev_pct(&self) -> T;\n \n     /// Scaled median of the absolute deviations of each sample from the sample median. This is a\n     /// robust (distribution-agnostic) estimator of sample variability. Use this in preference to\n@@ -96,10 +96,10 @@ pub trait Stats <T: FloatMath + FromPrimitive>{\n     /// deviation.\n     ///\n     /// See: http://en.wikipedia.org/wiki/Median_absolute_deviation\n-    fn median_abs_dev(self) -> T;\n+    fn median_abs_dev(&self) -> T;\n \n     /// Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.\n-    fn median_abs_dev_pct(self) -> T;\n+    fn median_abs_dev_pct(&self) -> T;\n \n     /// Percentile: the value below which `pct` percent of the values in `self` fall. For example,\n     /// percentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\n@@ -108,21 +108,21 @@ pub trait Stats <T: FloatMath + FromPrimitive>{\n     /// Calculated by linear interpolation between closest ranks.\n     ///\n     /// See: http://en.wikipedia.org/wiki/Percentile\n-    fn percentile(self, pct: T) -> T;\n+    fn percentile(&self, pct: T) -> T;\n \n     /// Quartiles of the sample: three values that divide the sample into four equal groups, each\n     /// with 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\n     /// function may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\n     /// is otherwise equivalent.\n     ///\n     /// See also: https://en.wikipedia.org/wiki/Quartile\n-    fn quartiles(self) -> (T,T,T);\n+    fn quartiles(&self) -> (T,T,T);\n \n     /// Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\n     /// percentile (3rd quartile). See `quartiles`.\n     ///\n     /// See also: https://en.wikipedia.org/wiki/Interquartile_range\n-    fn iqr(self) -> T;\n+    fn iqr(&self) -> T;\n }\n \n /// Extracted collection of all the summary statistics of a sample set.\n@@ -163,9 +163,9 @@ impl<T: FloatMath + FromPrimitive> Summary<T> {\n     }\n }\n \n-impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n+impl<T: FloatMath + FromPrimitive> Stats<T> for [T] {\n     // FIXME #11059 handle NaN, inf and overflow\n-    fn sum(self) -> T {\n+    fn sum(&self) -> T {\n         let mut partials = vec![];\n \n         for &mut x in self.iter() {\n@@ -198,26 +198,26 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n         partials.iter().fold(zero, |p, q| p + *q)\n     }\n \n-    fn min(self) -> T {\n+    fn min(&self) -> T {\n         assert!(self.len() != 0);\n         self.iter().fold(self[0], |p, q| p.min(*q))\n     }\n \n-    fn max(self) -> T {\n+    fn max(&self) -> T {\n         assert!(self.len() != 0);\n         self.iter().fold(self[0], |p, q| p.max(*q))\n     }\n \n-    fn mean(self) -> T {\n+    fn mean(&self) -> T {\n         assert!(self.len() != 0);\n         self.sum() / FromPrimitive::from_uint(self.len()).unwrap()\n     }\n \n-    fn median(self) -> T {\n+    fn median(&self) -> T {\n         self.percentile(FromPrimitive::from_uint(50).unwrap())\n     }\n \n-    fn var(self) -> T {\n+    fn var(&self) -> T {\n         if self.len() < 2 {\n             Float::zero()\n         } else {\n@@ -235,16 +235,16 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n         }\n     }\n \n-    fn std_dev(self) -> T {\n+    fn std_dev(&self) -> T {\n         self.var().sqrt()\n     }\n \n-    fn std_dev_pct(self) -> T {\n+    fn std_dev_pct(&self) -> T {\n         let hundred = FromPrimitive::from_uint(100).unwrap();\n         (self.std_dev() / self.mean()) * hundred\n     }\n \n-    fn median_abs_dev(self) -> T {\n+    fn median_abs_dev(&self) -> T {\n         let med = self.median();\n         let abs_devs: Vec<T> = self.iter().map(|&v| (med - v).abs()).collect();\n         // This constant is derived by smarter statistics brains than me, but it is\n@@ -253,18 +253,18 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n         abs_devs.as_slice().median() * number\n     }\n \n-    fn median_abs_dev_pct(self) -> T {\n+    fn median_abs_dev_pct(&self) -> T {\n         let hundred = FromPrimitive::from_uint(100).unwrap();\n         (self.median_abs_dev() / self.median()) * hundred\n     }\n \n-    fn percentile(self, pct: T) -> T {\n+    fn percentile(&self, pct: T) -> T {\n         let mut tmp = self.to_vec();\n         local_sort(tmp.as_mut_slice());\n         percentile_of_sorted(tmp.as_slice(), pct)\n     }\n \n-    fn quartiles(self) -> (T,T,T) {\n+    fn quartiles(&self) -> (T,T,T) {\n         let mut tmp = self.to_vec();\n         local_sort(tmp.as_mut_slice());\n         let first = FromPrimitive::from_uint(25).unwrap();\n@@ -276,7 +276,7 @@ impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n         (a,b,c)\n     }\n \n-    fn iqr(self) -> T {\n+    fn iqr(&self) -> T {\n         let (a,_,c) = self.quartiles();\n         c - a\n     }"}]}