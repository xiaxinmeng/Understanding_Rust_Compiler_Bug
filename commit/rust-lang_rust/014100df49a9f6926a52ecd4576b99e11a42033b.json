{"sha": "014100df49a9f6926a52ecd4576b99e11a42033b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDEwMGRmNDlhOWY2OTI2YTUyZWNkNDU3NmI5OWUxMWE0MjAzM2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-25T06:33:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-25T06:33:02Z"}, "message": "Compiletest should parse suggestions from the spans", "tree": {"sha": "dfdb882cd92b57a0bc2e8777b93f40a6edcd7d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfdb882cd92b57a0bc2e8777b93f40a6edcd7d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014100df49a9f6926a52ecd4576b99e11a42033b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlnwMB8ACgkQpp+NIls6\n19mIog//TOGRkGhhKzlH2ySNWKG1gYmPYIxj1cC/XvDQAuWHgrIcROSC1RsyzP6X\noiuCQdNw3Qhh+BaplVdsgUwk2L5KTM80krVJ1DjGewKv9z/9rBxmGDoDaZIFIw33\nhf6OmHBHk40WRAmoxqtsIgATOeU8NPcvK29+cFwWD4W/YE4e7L+kP0pTAPJ162pj\nk+cpPrGe+Ke6EcKKdOFlAAf/Hllb7c0R+MJbpm5R/jRWUbbMHT5tF56223M5oD9D\naxdZ6z3gIatXCeRcbb3Wqb7UWuaY9rE/8wLYyF5Vn2Rh/Vki5LlfcLbZzIciWvS8\nUprTmOPTeHt9w9mGkmNkRrlEosUA8F4XnjUxN0CH/10fsxDY8Ja0zyBEmiLMoNvP\n+zVOB9P1xpvTLo5gJrgCt8noZEpj2s7xPCRDQF5N4QJnScPHpAF2epgx+UhDNCj3\nvJTwYGIZUdPxiBKwtLqoUEpnDY/RafSoGtdcQRcCY1I+Rwu5VHfro1Gm4bxfD9/h\nweNrKeGNHRaB6F8dMxq8GK15RNi04hgXSJ/U/mFRyClpLQtd2jz8UUUq/T4up/TK\nN4QdX3Zu/qtWJcb2kIUEcH+C9HNpq6EGBcivK5+DQyBIp1gk3zMNcaCisZrWBAPi\nT344YndfkRrlqFd9kBXjWLK4VOj/4Q1lGEqjlNcx0HE3IbBPTQ4=\n=ETOY\n-----END PGP SIGNATURE-----", "payload": "tree dfdb882cd92b57a0bc2e8777b93f40a6edcd7d67\nparent 7bb05dbdef8a37dfa6b62d06a257fa9611564c84\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1508913182 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1508913182 +0200\n\nCompiletest should parse suggestions from the spans\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014100df49a9f6926a52ecd4576b99e11a42033b", "html_url": "https://github.com/rust-lang/rust/commit/014100df49a9f6926a52ecd4576b99e11a42033b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014100df49a9f6926a52ecd4576b99e11a42033b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb05dbdef8a37dfa6b62d06a257fa9611564c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb05dbdef8a37dfa6b62d06a257fa9611564c84", "html_url": "https://github.com/rust-lang/rust/commit/7bb05dbdef8a37dfa6b62d06a257fa9611564c84"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "eb28e36dc076e540783104ff4123cca59012e9da", "filename": "src/test/compile-fail/issue-27842.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014100df49a9f6926a52ecd4576b99e11a42033b/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014100df49a9f6926a52ecd4576b99e11a42033b/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs?ref=014100df49a9f6926a52ecd4576b99e11a42033b", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let _ = tup[0];\n     //~^ ERROR cannot index into a value of type\n     //~| HELP to access tuple elements, use\n-    //~| SUGGESTION let _ = tup.0\n+    //~| SUGGESTION tup.0\n \n     // the case where we show just a general hint\n     let i = 0_usize;"}, {"sha": "8e9cd1a12faacf79d96fa2f1bb6b909cf3e9d7f6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/014100df49a9f6926a52ecd4576b99e11a42033b/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014100df49a9f6926a52ecd4576b99e11a42033b/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=014100df49a9f6926a52ecd4576b99e11a42033b", "patch": "@@ -36,6 +36,7 @@ struct DiagnosticSpan {\n     column_end: usize,\n     is_primary: bool,\n     label: Option<String>,\n+    suggested_replacement: Option<String>,\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n \n@@ -164,15 +165,15 @@ fn push_expected_errors(expected_errors: &mut Vec<Error>,\n     }\n \n     // If the message has a suggestion, register that.\n-    if let Some(ref rendered) = diagnostic.rendered {\n-        let start_line = primary_spans.iter().map(|s| s.line_start).min().expect(\"\\\n-            every suggestion should have at least one span\");\n-        for (index, line) in rendered.lines().enumerate() {\n-            expected_errors.push(Error {\n-                line_num: start_line + index,\n-                kind: Some(ErrorKind::Suggestion),\n-                msg: line.to_string(),\n-            });\n+    for span in primary_spans {\n+        if let Some(ref suggested_replacement) = span.suggested_replacement {\n+            for (index, line) in suggested_replacement.lines().enumerate() {\n+                expected_errors.push(Error {\n+                    line_num: span.line_start + index,\n+                    kind: Some(ErrorKind::Suggestion),\n+                    msg: line.to_string(),\n+                });\n+            }\n         }\n     }\n "}]}