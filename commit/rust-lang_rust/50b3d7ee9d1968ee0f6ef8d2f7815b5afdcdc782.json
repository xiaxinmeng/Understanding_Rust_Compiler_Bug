{"sha": "50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjNkN2VlOWQxOTY4ZWUwZjZlZjhkMmY3ODE1YjVhZmRjZGM3ODI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-11T03:24:13Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-11T03:24:13Z"}, "message": "Do not use .sty except for matching on it.", "tree": {"sha": "5c431ccae0b0dd85e8530eec92107d1dd7bdd45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c431ccae0b0dd85e8530eec92107d1dd7bdd45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "html_url": "https://github.com/rust-lang/rust/commit/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ca0e515febb1801d9a898612be51fa6d478e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ca0e515febb1801d9a898612be51fa6d478e8a", "html_url": "https://github.com/rust-lang/rust/commit/e4ca0e515febb1801d9a898612be51fa6d478e8a"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "6112aec7cb6ad2a6d902a7b1402a147b937e8489", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                    expr.span,\n                                    &msg,\n                                    arg.span,\n-                                   &format!(\"argument has type {}\", arg_ty.sty));\n+                                   &format!(\"argument has type {}\", arg_ty));\n             } else if is_copy(cx, arg_ty) {\n                 if match_def_path(cx.tcx, def_id, &paths::DROP) {\n                     lint = DROP_COPY;\n@@ -151,7 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                    expr.span,\n                                    &msg,\n                                    arg.span,\n-                                   &format!(\"argument has type {}\", arg_ty.sty));\n+                                   &format!(\"argument has type {}\", arg_ty));\n             }\n         }}\n     }"}, {"sha": "ce8b8c40555a8e50f4790a3c27acf9ac2a7773ce", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=50b3d7ee9d1968ee0f6ef8d2f7815b5afdcdc782", "patch": "@@ -197,8 +197,7 @@ declare_lint! {\n \n fn check_let_unit(cx: &LateContext, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n-        let bindtype = &cx.tables.pat_ty(&local.pat).sty;\n-        match *bindtype {\n+        match cx.tables.pat_ty(&local.pat).sty {\n             ty::TyTuple(slice, _) if slice.is_empty() => {\n                 if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n                     return;\n@@ -268,8 +267,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n         if let ExprBinary(ref cmp, ref left, _) = expr.node {\n             let op = cmp.node;\n             if op.is_comparison() {\n-                let sty = &cx.tables.expr_ty(left).sty;\n-                match *sty {\n+                match cx.tables.expr_ty(left).sty {\n                     ty::TyTuple(slice, _) if slice.is_empty() => {\n                         let result = match op {\n                             BiEq | BiLe | BiGe => \"true\",\n@@ -910,9 +908,9 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n     use rustc_const_eval::*;\n     use types::ExtremeType::*;\n \n-    let ty = &cx.tables.expr_ty(expr).sty;\n+    let ty = cx.tables.expr_ty(expr);\n \n-    match *ty {\n+    match ty.sty {\n         ty::TyBool | ty::TyInt(_) | ty::TyUint(_) => (),\n         _ => return None,\n     };\n@@ -922,7 +920,7 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         Err(_) => return None,\n     };\n \n-    let which = match (ty, cv) {\n+    let which = match (&ty.sty, cv) {\n         (&ty::TyBool, Bool(false)) |\n         (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MIN)))) |\n         (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MIN)))) |"}]}