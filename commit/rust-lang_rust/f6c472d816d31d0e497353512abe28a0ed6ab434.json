{"sha": "f6c472d816d31d0e497353512abe28a0ed6ab434", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YzQ3MmQ4MTZkMzFkMGU0OTczNTM1MTJhYmUyOGEwZWQ2YWI0MzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T23:40:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T23:40:30Z"}, "message": "rustc: Emit pure native glue; we don't call it yet", "tree": {"sha": "3ee487110a24cce1c6c4bf40bd33c46c575d34a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee487110a24cce1c6c4bf40bd33c46c575d34a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c472d816d31d0e497353512abe28a0ed6ab434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c472d816d31d0e497353512abe28a0ed6ab434", "html_url": "https://github.com/rust-lang/rust/commit/f6c472d816d31d0e497353512abe28a0ed6ab434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c472d816d31d0e497353512abe28a0ed6ab434/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593fb195a4c14252909745e6eec0d48a23061611", "url": "https://api.github.com/repos/rust-lang/rust/commits/593fb195a4c14252909745e6eec0d48a23061611", "html_url": "https://github.com/rust-lang/rust/commit/593fb195a4c14252909745e6eec0d48a23061611"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "fc3bc92e3e8dffeac128fa53f4109d0842cb28d9", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=f6c472d816d31d0e497353512abe28a0ed6ab434", "patch": "@@ -72,6 +72,12 @@ const int n_native_glues = 7;\n const int abi_x86_rustboot_cdecl = 1;\n const int abi_x86_rustc_fastcall = 2;\n \n+tag native_glue_type {\n+    ngt_rust;\n+    ngt_pure_rust;\n+    ngt_cdecl;\n+}\n+\n fn memcpy_glue_name() -> str {\n     ret \"rust_memcpy_glue\";\n }\n@@ -84,11 +90,14 @@ fn vec_append_glue_name() -> str {\n     ret \"rust_vec_append_glue\";\n }\n \n-fn native_glue_name(int n, bool pass_task) -> str {\n-    if (pass_task) {\n-        ret \"rust_native_rust_\" + util.common.istr(n);\n+fn native_glue_name(int n, native_glue_type ngt) -> str {\n+    auto prefix;\n+    alt (ngt) {\n+        case (ngt_rust)         { prefix = \"rust_native_rust_\"; }\n+        case (ngt_pure_rust)    { prefix = \"rust_native_pure_rust_\"; }\n+        case (ngt_cdecl)        { prefix = \"rust_native_cdecl_\"; }\n     }\n-    ret \"rust_native_cdecl_\" + util.common.istr(n);\n+    ret prefix + util.common.istr(n);\n }\n \n fn activate_glue_name() -> str {"}, {"sha": "063afe0350d288698e0eba03b9e045c2c264df2f", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=f6c472d816d31d0e497353512abe28a0ed6ab434", "patch": "@@ -209,7 +209,14 @@ fn rust_yield_glue() -> vec[str] {\n         + vec(\"ret\");\n }\n \n-fn native_glue(int n_args, bool pass_task) -> vec[str] {\n+fn native_glue(int n_args, abi.native_glue_type ngt) -> vec[str] {\n+\n+    let bool pass_task;\n+    alt (ngt) {\n+        case (abi.ngt_rust)         { pass_task = true; }\n+        case (abi.ngt_pure_rust)    { pass_task = true; }\n+        case (abi.ngt_cdecl)        { pass_task = false; }\n+    }\n \n     /*\n      * 0, 4, 8, 12 are callee-saves\n@@ -275,11 +282,12 @@ fn decl_glue(int align, str prefix, str name, vec[str] insns) -> str {\n }\n \n \n-fn decl_native_glue(int align, str prefix, bool pass_task, uint n) -> str {\n+fn decl_native_glue(int align, str prefix, abi.native_glue_type ngt, uint n)\n+        -> str {\n     let int i = n as int;\n     ret decl_glue(align, prefix,\n-                  abi.native_glue_name(i, pass_task),\n-                  native_glue(i, pass_task));\n+                  abi.native_glue_name(i, ngt),\n+                  native_glue(i, ngt));\n }\n \n fn get_symbol_prefix() -> str {\n@@ -305,10 +313,12 @@ fn get_module_asm() -> str {\n                       abi.yield_glue_name(),\n                       rust_yield_glue()))\n \n-        + _vec.init_fn[str](bind decl_native_glue(align, prefix, true, _),\n-                            (abi.n_native_glues + 1) as uint)\n-        + _vec.init_fn[str](bind decl_native_glue(align, prefix, false, _),\n-                            (abi.n_native_glues + 1) as uint);\n+        + _vec.init_fn[str](bind decl_native_glue(align, prefix,\n+            abi.ngt_rust, _), (abi.n_native_glues + 1) as uint)\n+        + _vec.init_fn[str](bind decl_native_glue(align, prefix,\n+            abi.ngt_pure_rust, _), (abi.n_native_glues + 1) as uint)\n+        + _vec.init_fn[str](bind decl_native_glue(align, prefix,\n+            abi.ngt_cdecl, _), (abi.n_native_glues + 1) as uint);\n \n \n     ret _str.connect(glues, \"\\n\\n\");"}, {"sha": "1447c643748b88b8934b86e4b84b7eb581154fcd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c472d816d31d0e497353512abe28a0ed6ab434/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f6c472d816d31d0e497353512abe28a0ed6ab434", "patch": "@@ -57,6 +57,7 @@ type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef yield_glue,\n                     ValueRef exit_task_glue,\n                     vec[ValueRef] native_glues_rust,\n+                    vec[ValueRef] native_glues_pure_rust,\n                     vec[ValueRef] native_glues_cdecl,\n                     ValueRef no_op_type_glue,\n                     ValueRef memcpy_glue,\n@@ -997,17 +998,26 @@ fn decl_glue(ModuleRef llmod, type_names tn, str s) -> ValueRef {\n }\n \n fn decl_native_glue(ModuleRef llmod, type_names tn,\n-                    bool pass_task, uint _n) -> ValueRef {\n+                    abi.native_glue_type ngt, uint _n) -> ValueRef {\n+    let bool pass_task;\n+    alt (ngt) {\n+        case (abi.ngt_rust)         { pass_task = true; }\n+        case (abi.ngt_pure_rust)    { pass_task = true; }\n+        case (abi.ngt_cdecl)        { pass_task = false; }\n+    }\n+\n     // It doesn't actually matter what type we come up with here, at the\n     // moment, as we cast the native function pointers to int before passing\n     // them to the indirect native-invocation glue.  But eventually we'd like\n     // to call them directly, once we have a calling convention worked out.\n     let int n = _n as int;\n-    let str s = abi.native_glue_name(n, pass_task);\n+    let str s = abi.native_glue_name(n, ngt);\n     let vec[TypeRef] args = vec(T_int()); // callee\n+\n     if (!pass_task) {\n         args += vec(T_int()); // taskptr, will not be passed\n     }\n+\n     args += _vec.init_elt[TypeRef](T_int(), n as uint);\n \n     ret decl_fastcall_fn(llmod, s, T_fn(args, T_int()));\n@@ -7610,13 +7620,14 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n                                                  T_void())),\n \n              native_glues_rust =\n-             _vec.init_fn[ValueRef](bind decl_native_glue(llmod, tn, true,\n-                                                          _),\n-                                    abi.n_native_glues + 1 as uint),\n+                 _vec.init_fn[ValueRef](bind decl_native_glue(llmod, tn,\n+                    abi.ngt_rust, _), abi.n_native_glues + 1 as uint),\n+             native_glues_pure_rust =\n+                 _vec.init_fn[ValueRef](bind decl_native_glue(llmod, tn,\n+                    abi.ngt_pure_rust, _), abi.n_native_glues + 1 as uint),\n              native_glues_cdecl =\n-             _vec.init_fn[ValueRef](bind decl_native_glue(llmod, tn, false,\n-                                                          _),\n-                                    abi.n_native_glues + 1 as uint),\n+                 _vec.init_fn[ValueRef](bind decl_native_glue(llmod, tn,\n+                    abi.ngt_cdecl, _), abi.n_native_glues + 1 as uint),\n              no_op_type_glue = decl_no_op_type_glue(llmod, tn),\n              memcpy_glue = decl_memcpy_glue(llmod),\n              bzero_glue = decl_bzero_glue(llmod),"}]}