{"sha": "a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NGQxOWNjMGU4YzFjNDdkZDI1M2I1YmNiNGExYTYxOWM0YWU3ZDM=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-16T21:20:55Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-16T21:20:55Z"}, "message": "Fix error span to play nicely with rustfix", "tree": {"sha": "22ccfa8eaf64c067704baebba1331d68455d498a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22ccfa8eaf64c067704baebba1331d68455d498a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "html_url": "https://github.com/rust-lang/rust/commit/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad164939ed1cdd7164683814f8411d20d49e090b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad164939ed1cdd7164683814f8411d20d49e090b", "html_url": "https://github.com/rust-lang/rust/commit/ad164939ed1cdd7164683814f8411d20d49e090b"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "5ff48a25b1c3fa939d95cfea40051e66427cd236", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "patch": "@@ -9,7 +9,7 @@ use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, BytePos};\n use utils::{get_arg_name, get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_self, is_self_ty,\n             iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n             match_type, method_chain_args, return_ty, remove_blocks, same_tys, single_segment_path, snippet, span_lint,\n@@ -1157,10 +1157,13 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n         then {\n             let right_source = snippet(cx, right_expr.span, \"EXPR\");\n \n+            // Span containing `.fold(...)`\n+            let fold_span = fold_args[0].span.next_point().with_hi(fold_args[2].span.hi() + BytePos(1));\n+\n             span_lint_and_sugg(\n                 cx,\n                 FOLD_ANY,\n-                expr.span,\n+                fold_span,\n                 // TODO: don't suggest .any(|x| f(x)) if we can suggest .any(f)\n                 \"this `.fold` can more succintly be expressed as `.any`\",\n                 \"try\","}, {"sha": "d4f7539cea9ebdfdd257dc215eae674a02abb27e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "patch": "@@ -606,7 +606,7 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n /// --> $DIR/methods.rs:390:13\n ///     |\n /// 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-///     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+///     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// </pre>\n@@ -1055,4 +1055,4 @@ pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n         _ => None,\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d50f8e35fa4b2c7c7837aaf29b24d7321a57b0c5", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "patch": "@@ -400,6 +400,11 @@ fn fold_any_ignores_non_boolean_accumalator() {\n     let _ = (0..3).fold(0, |acc, x| acc + if x > 2 { 1 } else { 0 });\n }\n \n+/// Should trigger the `FOLD_ANY` lint, with the error span including exactly `.fold(...)`\n+fn fold_any_span_for_multi_element_chain() {\n+    let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+}\n+\n #[allow(similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "2c03e077d57256398aab99306bebe3b09cbe05fb", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a64d19cc0e8c1c47dd253b5bcb4a1a619c4ae7d3", "patch": "@@ -494,17 +494,23 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `.fold` can more succintly be expressed as `.any`\n-   --> $DIR/methods.rs:390:13\n+   --> $DIR/methods.rs:390:19\n     |\n 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n     |\n     = note: `-D fold-any` implied by `-D warnings`\n \n+error: this `.fold` can more succintly be expressed as `.any`\n+   --> $DIR/methods.rs:405:34\n+    |\n+405 |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:406:13\n+   --> $DIR/methods.rs:411:13\n     |\n-406 |     let _ = opt.unwrap();\n+411 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}