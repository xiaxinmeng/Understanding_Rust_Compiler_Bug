{"sha": "ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGIyNTdkMmU4YTViMzk2Y2E4ZTg4NDM3NTZhMWQ2NjJjOGE1NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T11:36:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T11:36:35Z"}, "message": "Auto merge of #31911 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31878, #31880, #31883, #31893, #31894, #31896, #31901, #31904\n- Failed merges: #31897", "tree": {"sha": "0dfadb3c34406724a5ea82b7a6a30553760f2c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dfadb3c34406724a5ea82b7a6a30553760f2c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "html_url": "https://github.com/rust-lang/rust/commit/ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09130044ce7429beb95742afa7fd371960dbe607", "url": "https://api.github.com/repos/rust-lang/rust/commits/09130044ce7429beb95742afa7fd371960dbe607", "html_url": "https://github.com/rust-lang/rust/commit/09130044ce7429beb95742afa7fd371960dbe607"}, {"sha": "3c9a26853cca8783892d5b2373e9de63b5f488b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9a26853cca8783892d5b2373e9de63b5f488b5", "html_url": "https://github.com/rust-lang/rust/commit/3c9a26853cca8783892d5b2373e9de63b5f488b5"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "9bc4463922732679067888e23d52a0dfb9966702", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -100,6 +100,10 @@\n #     // Having trouble figuring out which test is failing? Turn off parallel tests\n #     make check-stage1-std RUST_TEST_THREADS=1\n #\n+#     // To make debug!() and other logging calls visible, reconfigure:\n+#     ./configure --enable-debug-assertions\n+#     make ....\n+#\n # If you really feel like getting your hands dirty, then:\n #\n #     run `make nitty-gritty`"}, {"sha": "6262618a030a3f7be0bda63d078e717c39281720", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -236,6 +236,8 @@ following forms:\n * A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072`\n   (`r`), or `U+0074` (`t`), denoting the Unicode values `U+000A` (LF),\n   `U+000D` (CR) or `U+0009` (HT) respectively.\n+* The _null escape_ is the character `U+0030` (`0`) and denotes the Unicode\n+  value `U+0000` (NUL).\n * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n   escaped in order to denote *itself*.\n \n@@ -297,6 +299,8 @@ following forms:\n * A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072`\n   (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF),\n   `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n+* The _null escape_ is the character `U+0030` (`0`) and denotes the byte\n+  value `0x00` (ASCII NUL).\n * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n   escaped in order to denote its ASCII encoding `0x5C`.\n "}, {"sha": "e7d84efdaa2f7a50f1051ff08aaf1dd286699051", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -271,7 +271,7 @@ fn suggest_traits_to_import<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n         for (i, trait_did) in candidates.iter().enumerate() {\n             err.fileline_help(span,\n-                              &format!(\"candidate #{}: use `{}`\",\n+                              &format!(\"candidate #{}: `use {}`\",\n                                         i + 1,\n                                         fcx.tcx().item_path_str(*trait_did)));\n         }"}, {"sha": "3a543a947b53a3fa421f2e1fcc87d71353054c9a", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -442,7 +442,7 @@ impl Error for JoinPathsError {\n ///\n /// match env::home_dir() {\n ///     Some(ref p) => println!(\"{}\", p.display()),\n-///     None => println!(\"Impossible to get your home dir!\")\n+///     None => println!(\"Impossible to get your home dir!\"),\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -482,8 +482,7 @@ pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n }\n \n-/// Returns the filesystem path to the current executable which is running but\n-/// with the executable name.\n+/// Returns the full filesystem path to the current running executable.\n ///\n /// The path returned is not necessarily a \"real path\" to the executable as\n /// there may be intermediate symlinks.\n@@ -492,7 +491,7 @@ pub fn temp_dir() -> PathBuf {\n ///\n /// Acquiring the path to the current executable is a platform-specific operation\n /// that can fail for a good number of reasons. Some errors can include, but not\n-/// be limited to filesystem operations failing or general syscall failures.\n+/// be limited to, filesystem operations failing or general syscall failures.\n ///\n /// # Examples\n ///"}, {"sha": "61334f309249acc4a902d7de4092e67672448a87", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -1055,7 +1055,14 @@ pub trait Write {\n         let mut output = Adaptor { inner: self, error: Ok(()) };\n         match fmt::write(&mut output, fmt) {\n             Ok(()) => Ok(()),\n-            Err(..) => output.error\n+            Err(..) => {\n+                // check if the error came from the underlying `Write` or not\n+                if output.error.is_err() {\n+                    output.error\n+                } else {\n+                    Err(Error::new(ErrorKind::Other, \"formatter error\"))\n+                }\n+            }\n         }\n     }\n "}, {"sha": "94967bfb96ad315c9a860ea3f10efd34ce470c4d", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -226,7 +226,7 @@ mod platform {\n                     }\n                     _ => (),\n                 }\n-            } else if path.len() > 1 && path[1] == b':' {\n+            } else if path.get(1) == Some(& b':') {\n                 // C:\n                 let c = path[0];\n                 if c.is_ascii() && (c as char).is_alphabetic() {\n@@ -393,11 +393,8 @@ fn iter_after<A, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n     loop {\n         let mut iter_next = iter.clone();\n         match (iter_next.next(), prefix.next()) {\n-            (Some(x), Some(y)) => {\n-                if x != y {\n-                    return None;\n-                }\n-            }\n+            (Some(ref x), Some(ref y)) if x == y => (),\n+            (Some(_), Some(_)) => return None,\n             (Some(_), None) => return Some(iter),\n             (None, None) => return Some(iter),\n             (None, Some(_)) => return None,"}, {"sha": "1683db811cf040ec6ab18aa9c5b5d79c1e00872b", "filename": "src/test/compile-fail/no-method-suggested-traits.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -34,31 +34,31 @@ fn main() {\n     1u32.method();\n     //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n     //~^^ ERROR no method named\n-    //~^^^ HELP `foo::Bar`\n-    //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    //~^^^ HELP `use foo::Bar`\n+    //~^^^^ HELP `use no_method_suggested_traits::foo::PubPub`\n     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n     //~^ HELP following traits are implemented but not in scope, perhaps add a `use` for one of them\n     //~^^ ERROR no method named\n-    //~^^^ HELP `foo::Bar`\n-    //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    //~^^^ HELP `use foo::Bar`\n+    //~^^^^ HELP `use no_method_suggested_traits::foo::PubPub`\n \n     'a'.method();\n     //~^ ERROR no method named\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~^^^ HELP `foo::Bar`\n+    //~^^^ HELP `use foo::Bar`\n     std::rc::Rc::new(&mut Box::new(&'a')).method();\n     //~^ ERROR no method named\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~^^^ HELP `foo::Bar`\n+    //~^^^ HELP `use foo::Bar`\n \n     1i32.method();\n     //~^ ERROR no method named\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    //~^^^ HELP `use no_method_suggested_traits::foo::PubPub`\n     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n     //~^ ERROR no method named\n     //~^^ HELP the following trait is implemented but not in scope, perhaps add a `use` for it:\n-    //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n+    //~^^^ HELP `use no_method_suggested_traits::foo::PubPub`\n \n     Foo.method();\n     //~^ ERROR no method named"}, {"sha": "e4439087946c11f610e64f3c6d6e142baf38bf2a", "filename": "src/test/run-pass/write-fmt-errors.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8b257d2e8a5b396ca8e8843756a1d662c8a550/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs?ref=ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::io::{self, Error, Write, sink};\n+\n+struct ErrorDisplay;\n+\n+impl fmt::Display for ErrorDisplay {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        Err(fmt::Error)\n+    }\n+}\n+\n+struct ErrorWriter;\n+\n+const FORMAT_ERROR: io::ErrorKind = io::ErrorKind::Other;\n+const WRITER_ERROR: io::ErrorKind = io::ErrorKind::NotConnected;\n+\n+impl Write for ErrorWriter {\n+    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n+        Err(Error::new(WRITER_ERROR, \"not connected\"))\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+}\n+\n+fn main() {\n+    // Test that the error from the formatter is propagated.\n+    let res = write!(sink(), \"{} {} {}\", 1, ErrorDisplay, \"bar\");\n+    assert!(res.is_err(), \"formatter error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), FORMAT_ERROR);\n+\n+    // Test that an underlying error is propagated\n+    let res = write!(ErrorWriter, \"abc\");\n+    assert!(res.is_err(), \"writer error did not propagate\");\n+\n+    // Writer error\n+    let res = write!(ErrorWriter, \"abc {}\", ErrorDisplay);\n+    assert!(res.is_err(), \"writer error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), WRITER_ERROR);\n+\n+    // Formatter error\n+    let res = write!(ErrorWriter, \"{} abc\", ErrorDisplay);\n+    assert!(res.is_err(), \"formatter error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), FORMAT_ERROR);\n+}"}]}