{"sha": "41c10dde95b447b160a39ae2b7ebfd81faad5e0a", "node_id": "C_kwDOAAsO6NoAKDQxYzEwZGRlOTViNDQ3YjE2MGEzOWFlMmI3ZWJmZDgxZmFhZDVlMGE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-16T21:42:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-27T06:02:24Z"}, "message": "Cut down `associated_item`.\n\nThe part of it dealing with types obfuscates and makes the code less\nconcise. This commit removes that part.", "tree": {"sha": "ef7797aedd1a1da635e15ad287eed9d8c46c8cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef7797aedd1a1da635e15ad287eed9d8c46c8cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41c10dde95b447b160a39ae2b7ebfd81faad5e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41c10dde95b447b160a39ae2b7ebfd81faad5e0a", "html_url": "https://github.com/rust-lang/rust/commit/41c10dde95b447b160a39ae2b7ebfd81faad5e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41c10dde95b447b160a39ae2b7ebfd81faad5e0a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6fa19a3ce9a060373ea4a6d9305745ff92b342f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fa19a3ce9a060373ea4a6d9305745ff92b342f", "html_url": "https://github.com/rust-lang/rust/commit/e6fa19a3ce9a060373ea4a6d9305745ff92b342f"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "12c754682a0ef97eda22f449a541a8609148b788", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/41c10dde95b447b160a39ae2b7ebfd81faad5e0a/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c10dde95b447b160a39ae2b7ebfd81faad5e0a/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=41c10dde95b447b160a39ae2b7ebfd81faad5e0a", "patch": "@@ -5,22 +5,24 @@ use super::*;\n // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.\n use super::client::HandleStore;\n \n-/// Declare an associated item of one of the traits below, optionally\n-/// adjusting it (i.e., adding bounds to types and default bodies to methods).\n-macro_rules! associated_item {\n-    (type FreeFunctions) => (type FreeFunctions: 'static;);\n-    (type TokenStream) => (type TokenStream: 'static + Clone;);\n-    (type TokenStreamBuilder) => (type TokenStreamBuilder: 'static;);\n-    (type TokenStreamIter) => (type TokenStreamIter: 'static + Clone;);\n-    (type Group) => (type Group: 'static + Clone;);\n-    (type Punct) => (type Punct: 'static + Copy + Eq + Hash;);\n-    (type Ident) => (type Ident: 'static + Copy + Eq + Hash;);\n-    (type Literal) => (type Literal: 'static + Clone;);\n-    (type SourceFile) => (type SourceFile: 'static + Clone;);\n-    (type MultiSpan) => (type MultiSpan: 'static;);\n-    (type Diagnostic) => (type Diagnostic: 'static;);\n-    (type Span) => (type Span: 'static + Copy + Eq + Hash;);\n+pub trait Types {\n+    type FreeFunctions: 'static;\n+    type TokenStream: 'static + Clone;\n+    type TokenStreamBuilder: 'static;\n+    type TokenStreamIter: 'static + Clone;\n+    type Group: 'static + Clone;\n+    type Punct: 'static + Copy + Eq + Hash;\n+    type Ident: 'static + Copy + Eq + Hash;\n+    type Literal: 'static + Clone;\n+    type SourceFile: 'static + Clone;\n+    type MultiSpan: 'static;\n+    type Diagnostic: 'static;\n+    type Span: 'static + Copy + Eq + Hash;\n+}\n \n+/// Declare an associated fn of one of the traits below, adding necessary\n+/// default bodies.\n+macro_rules! associated_fn {\n     (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>\n         (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });\n \n@@ -34,12 +36,8 @@ macro_rules! declare_server_traits {\n     ($($name:ident {\n         $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*\n     }),* $(,)?) => {\n-        pub trait Types {\n-            $(associated_item!(type $name);)*\n-        }\n-\n         $(pub trait $name: Types {\n-            $(associated_item!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)?);)*\n+            $(associated_fn!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)?);)*\n         })*\n \n         pub trait Server: Types $(+ $name)* {}"}]}