{"sha": "b35a50cb10c193bf991b91503f77a513adac08ed", "node_id": "C_kwDOAAsO6NoAKGIzNWE1MGNiMTBjMTkzYmY5OTFiOTE1MDNmNzdhNTEzYWRhYzA4ZWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-04T18:07:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-04T18:07:18Z"}, "message": "fix: Fix self keyword not being tagged as such in highlighting properly", "tree": {"sha": "fde48aa7740476625d935046c40e97011b9a774c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde48aa7740476625d935046c40e97011b9a774c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b35a50cb10c193bf991b91503f77a513adac08ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b35a50cb10c193bf991b91503f77a513adac08ed", "html_url": "https://github.com/rust-lang/rust/commit/b35a50cb10c193bf991b91503f77a513adac08ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b35a50cb10c193bf991b91503f77a513adac08ed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3472105ad9cef06d7a3a032047bcbf06bc80fe26", "url": "https://api.github.com/repos/rust-lang/rust/commits/3472105ad9cef06d7a3a032047bcbf06bc80fe26", "html_url": "https://github.com/rust-lang/rust/commit/3472105ad9cef06d7a3a032047bcbf06bc80fe26"}], "stats": {"total": 118, "additions": 57, "deletions": 61}, "files": [{"sha": "88c469df2655fe59126cd1beb7d400ae04c48a22", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 55, "deletions": 61, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=b35a50cb10c193bf991b91503f77a513adac08ed", "patch": "@@ -244,77 +244,71 @@ fn highlight_name_ref(\n     name_ref: ast::NameRef,\n ) -> Highlight {\n     let db = sema.db;\n-    highlight_method_call_by_name_ref(sema, krate, &name_ref).unwrap_or_else(|| {\n-        let name_class = match NameRefClass::classify(sema, &name_ref) {\n-            Some(name_kind) => name_kind,\n-            None => {\n-                return if syntactic_name_ref_highlighting {\n-                    highlight_name_ref_by_syntax(name_ref, sema, krate)\n-                } else {\n-                    // FIXME: Workaround for https://github.com/rust-analyzer/rust-analyzer/issues/10708\n-                    //\n-                    // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n-                    // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n-                    // within a function with a self param, pretend to still be `self`, rather than\n-                    // an unresolved reference.\n-                    if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) {\n-                        SymbolKind::SelfParam.into()\n-                    } else {\n-                        HlTag::UnresolvedReference.into()\n-                    }\n-                };\n-            }\n-        };\n-        let mut h = match name_class {\n-            NameRefClass::Definition(def) => {\n-                if let Definition::Local(local) = &def {\n-                    if let Some(name) = local.name(db) {\n-                        let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n-                        *binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n-                    }\n-                };\n+    if let Some(res) = highlight_method_call_by_name_ref(sema, krate, &name_ref) {\n+        return res;\n+    }\n \n-                let mut h = highlight_def(sema, krate, def);\n+    let name_class = match NameRefClass::classify(sema, &name_ref) {\n+        Some(name_kind) => name_kind,\n+        None if syntactic_name_ref_highlighting => {\n+            return highlight_name_ref_by_syntax(name_ref, sema, krate)\n+        }\n+        // FIXME: Workaround for https://github.com/rust-analyzer/rust-analyzer/issues/10708\n+        //\n+        // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n+        // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n+        // within a function with a self param, pretend to still be `self`, rather than\n+        // an unresolved reference.\n+        None if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) => {\n+            return SymbolKind::SelfParam.into()\n+        }\n+        None => return HlTag::UnresolvedReference.into(),\n+    };\n+    let mut h = match name_class {\n+        NameRefClass::Definition(def) => {\n+            if let Definition::Local(local) = &def {\n+                if let Some(name) = local.name(db) {\n+                    let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n+                    *binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n+                }\n+            };\n+\n+            let mut h = highlight_def(sema, krate, def);\n \n-                match def {\n-                    Definition::Local(local)\n-                        if is_consumed_lvalue(name_ref.syntax(), &local, db) =>\n+            match def {\n+                Definition::Local(local) if is_consumed_lvalue(name_ref.syntax(), &local, db) => {\n+                    h |= HlMod::Consuming;\n+                }\n+                Definition::Trait(trait_) if trait_.is_unsafe(db) => {\n+                    if ast::Impl::for_trait_name_ref(&name_ref)\n+                        .map_or(false, |impl_| impl_.unsafe_token().is_some())\n                     {\n-                        h |= HlMod::Consuming;\n+                        h |= HlMod::Unsafe;\n                     }\n-                    Definition::Trait(trait_) if trait_.is_unsafe(db) => {\n-                        if ast::Impl::for_trait_name_ref(&name_ref)\n-                            .map_or(false, |impl_| impl_.unsafe_token().is_some())\n-                        {\n-                            h |= HlMod::Unsafe;\n-                        }\n-                    }\n-                    Definition::Field(field) => {\n-                        if let Some(parent) = name_ref.syntax().parent() {\n-                            if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n-                                if let hir::VariantDef::Union(_) = field.parent_def(db) {\n-                                    h |= HlMod::Unsafe;\n-                                }\n+                }\n+                Definition::Field(field) => {\n+                    if let Some(parent) = name_ref.syntax().parent() {\n+                        if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n+                            if let hir::VariantDef::Union(_) = field.parent_def(db) {\n+                                h |= HlMod::Unsafe;\n                             }\n                         }\n                     }\n-                    _ => (),\n                 }\n-\n-                h\n-            }\n-            NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n-        };\n-        if h.tag == HlTag::Symbol(SymbolKind::Module) {\n-            if name_ref.self_token().is_some() {\n-                return SymbolKind::SelfParam.into();\n-            }\n-            if name_ref.crate_token().is_some() || name_ref.super_token().is_some() {\n-                h.tag = HlTag::Keyword;\n+                _ => (),\n             }\n+\n+            h\n         }\n-        h\n-    })\n+        NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n+    };\n+    if name_ref.self_token().is_some() {\n+        h.tag = HlTag::Symbol(SymbolKind::SelfParam);\n+    }\n+    if name_ref.crate_token().is_some() || name_ref.super_token().is_some() {\n+        h.tag = HlTag::Keyword;\n+    }\n+    h\n }\n \n fn highlight_name("}, {"sha": "5de621ce078cf4cc61fcb38a3778d3c4920340fd", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=b35a50cb10c193bf991b91503f77a513adac08ed", "patch": "@@ -87,6 +87,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>"}, {"sha": "c5834e1942192f7ee13b0830bc6feeeecf54e73e", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35a50cb10c193bf991b91503f77a513adac08ed/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b35a50cb10c193bf991b91503f77a513adac08ed", "patch": "@@ -60,6 +60,7 @@ impl Foo {\n     }\n }\n \n+use self::FooCopy::{self as BarCopy};\n #[derive(Copy)]\n struct FooCopy {\n     x: u32,"}]}