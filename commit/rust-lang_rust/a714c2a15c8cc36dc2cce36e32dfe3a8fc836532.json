{"sha": "a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTRjMmExNWM4Y2MzNmRjMmNjZTM2ZTMyZGZlM2E4ZmM4MzY1MzI=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-17T21:03:40Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-19T12:55:34Z"}, "message": "Add TypedArena::alloc_slice.", "tree": {"sha": "9b3bb3ce2a860634b1b7ad5f7b3a458a84b461b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3bb3ce2a860634b1b7ad5f7b3a458a84b461b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "html_url": "https://github.com/rust-lang/rust/commit/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c429872a32c3005cf2b347025163361218634a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c429872a32c3005cf2b347025163361218634a4", "html_url": "https://github.com/rust-lang/rust/commit/0c429872a32c3005cf2b347025163361218634a4"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "cfbd29571f7b28132f3b292b6704005d9a53f1dd", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a714c2a15c8cc36dc2cce36e32dfe3a8fc836532/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=a714c2a15c8cc36dc2cce36e32dfe3a8fc836532", "patch": "@@ -46,6 +46,7 @@ use std::intrinsics;\n use std::marker::{PhantomData, Send};\n use std::mem;\n use std::ptr;\n+use std::slice;\n \n use alloc::heap;\n use alloc::raw_vec::RawVec;\n@@ -133,7 +134,7 @@ impl<T> TypedArena<T> {\n     #[inline]\n     pub fn alloc(&self, object: T) -> &mut T {\n         if self.ptr == self.end {\n-            self.grow()\n+            self.grow(1)\n         }\n \n         unsafe {\n@@ -154,24 +155,56 @@ impl<T> TypedArena<T> {\n         }\n     }\n \n+    /// Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable\n+    /// reference to it. Will panic if passed a zero-sized types.\n+    #[inline]\n+    pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n+        where T: Copy {\n+        assert!(mem::size_of::<T>() != 0);\n+        if slice.len() == 0 {\n+            return unsafe { slice::from_raw_parts_mut(heap::EMPTY as *mut T, 0) };\n+        }\n+\n+        let available_capacity_bytes = self.end.get() as usize - self.ptr.get() as usize;\n+        let at_least_bytes = slice.len() * mem::size_of::<T>();\n+        if available_capacity_bytes < at_least_bytes {\n+            self.grow(slice.len());\n+        }\n+\n+        unsafe {\n+            let start_ptr = self.ptr.get();\n+            let arena_slice = slice::from_raw_parts_mut(start_ptr, slice.len());\n+            self.ptr.set(start_ptr.offset(arena_slice.len() as isize));\n+            arena_slice.copy_from_slice(slice);\n+            arena_slice\n+        }\n+    }\n+\n     /// Grows the arena.\n     #[inline(never)]\n     #[cold]\n-    fn grow(&self) {\n+    fn grow(&self, n: usize) {\n         unsafe {\n             let mut chunks = self.chunks.borrow_mut();\n-            let (chunk, new_capacity);\n+            let (chunk, mut new_capacity);\n             if let Some(last_chunk) = chunks.last_mut() {\n-                if last_chunk.storage.double_in_place() {\n+                let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n+                let currently_used_cap = used_bytes / mem::size_of::<T>();\n+                if last_chunk.storage.reserve_in_place(currently_used_cap, n) {\n                     self.end.set(last_chunk.end());\n                     return;\n                 } else {\n                     let prev_capacity = last_chunk.storage.cap();\n-                    new_capacity = prev_capacity.checked_mul(2).unwrap();\n+                    loop {\n+                        new_capacity = prev_capacity.checked_mul(2).unwrap();\n+                        if new_capacity >= currently_used_cap + n {\n+                            break;\n+                        }\n+                    }\n                 }\n             } else {\n                 let elem_size = cmp::max(1, mem::size_of::<T>());\n-                new_capacity = cmp::max(1, PAGE / elem_size);\n+                new_capacity = cmp::max(n, PAGE / elem_size);\n             }\n             chunk = TypedArenaChunk::<T>::new(new_capacity);\n             self.ptr.set(chunk.start());"}]}