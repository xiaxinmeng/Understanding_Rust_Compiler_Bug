{"sha": "e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MmJkYzU1ZWYwNWJhZThlNjQ3YTVhMGE5ZjhjMzYwNWM0Y2RkMzQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-16T18:27:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-16T18:27:08Z"}, "message": "Implement ast::AstNode for NameLike and move it to node_ext", "tree": {"sha": "9204791d0e03e6407072d806737aa0ffd3a6d332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9204791d0e03e6407072d806737aa0ffd3a6d332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "html_url": "https://github.com/rust-lang/rust/commit/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80f9618f3775d22fddbfa6fac041aed6519eca4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80f9618f3775d22fddbfa6fac041aed6519eca4e", "html_url": "https://github.com/rust-lang/rust/commit/80f9618f3775d22fddbfa6fac041aed6519eca4e"}], "stats": {"total": 203, "additions": 102, "deletions": 101}, "files": [{"sha": "55f95ebae8854d2482d483d292e290265fecffbf", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "patch": "@@ -101,29 +101,21 @@ fn find_def(\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> Option<Definition> {\n-    if let Some(name) = sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, position.offset)\n-    {\n-        let class = NameClass::classify(sema, &name)?;\n-        Some(class.referenced_or_defined(sema.db))\n-    } else if let Some(lifetime) =\n-        sema.find_node_at_offset_with_descend::<ast::Lifetime>(&syntax, position.offset)\n-    {\n-        let def = if let Some(def) =\n-            NameRefClass::classify_lifetime(sema, &lifetime).map(|class| class.referenced(sema.db))\n-        {\n-            def\n-        } else {\n-            NameClass::classify_lifetime(sema, &lifetime)?.referenced_or_defined(sema.db)\n-        };\n-        Some(def)\n-    } else if let Some(name_ref) =\n-        sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)\n-    {\n-        let class = NameRefClass::classify(sema, &name_ref)?;\n-        Some(class.referenced(sema.db))\n-    } else {\n-        None\n-    }\n+    let def = match sema.find_node_at_offset_with_descend(syntax, position.offset)? {\n+        ast::NameLike::NameRef(name_ref) => {\n+            NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n+        }\n+        ast::NameLike::Name(name) => {\n+            NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n+        }\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+            .map(|class| class.referenced(sema.db))\n+            .or_else(|| {\n+                NameClass::classify_lifetime(sema, &lifetime)\n+                    .map(|class| class.referenced_or_defined(sema.db))\n+            })?,\n+    };\n+    Some(def)\n }\n \n fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {"}, {"sha": "175ddd759ca8511c163a4f6fd0fb940262482a52", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "patch": "@@ -6,7 +6,7 @@ use hir::{HasSource, InFile, Module, ModuleDef, ModuleSource, Semantics};\n use ide_db::{\n     base_db::{AnchoredPathBuf, FileId},\n     defs::{Definition, NameClass, NameRefClass},\n-    search::{FileReference, NameLike},\n+    search::FileReference,\n     RootDatabase,\n };\n use stdx::never;\n@@ -47,12 +47,13 @@ pub(crate) fn prepare_rename(\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n-    let range = match &find_name_like(&sema, &syntax, position)\n+    let range = match &sema\n+        .find_node_at_offset_with_descend(&syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?\n     {\n-        NameLike::Name(it) => it.syntax(),\n-        NameLike::NameRef(it) => it.syntax(),\n-        NameLike::Lifetime(it) => it.syntax(),\n+        ast::NameLike::Name(it) => it.syntax(),\n+        ast::NameLike::NameRef(it) => it.syntax(),\n+        ast::NameLike::Lifetime(it) => it.syntax(),\n     }\n     .text_range();\n     Ok(RangeInfo::new(range, ()))\n@@ -121,50 +122,28 @@ fn check_identifier(new_name: &str) -> RenameResult<IdentifierKind> {\n     }\n }\n \n-fn find_name_like(\n-    sema: &Semantics<RootDatabase>,\n-    syntax: &SyntaxNode,\n-    position: FilePosition,\n-) -> Option<NameLike> {\n-    let namelike = if let Some(name_ref) =\n-        sema.find_node_at_offset_with_descend::<ast::NameRef>(syntax, position.offset)\n-    {\n-        NameLike::NameRef(name_ref)\n-    } else if let Some(name) =\n-        sema.find_node_at_offset_with_descend::<ast::Name>(syntax, position.offset)\n-    {\n-        NameLike::Name(name)\n-    } else if let Some(lifetime) =\n-        sema.find_node_at_offset_with_descend::<ast::Lifetime>(syntax, position.offset)\n-    {\n-        NameLike::Lifetime(lifetime)\n-    } else {\n-        return None;\n-    };\n-    Some(namelike)\n-}\n-\n fn find_definition(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> RenameResult<Definition> {\n-    match find_name_like(sema, syntax, position)\n+    match sema\n+        .find_node_at_offset_with_descend(syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?\n     {\n         // renaming aliases would rename the item being aliased as the HIR doesn't track aliases yet\n-        NameLike::Name(name)\n+        ast::NameLike::Name(name)\n             if name.syntax().parent().map_or(false, |it| ast::Rename::can_cast(it.kind())) =>\n         {\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n-        NameLike::Name(name) => {\n+        ast::NameLike::Name(name) => {\n             NameClass::classify(sema, &name).map(|class| class.referenced_or_defined(sema.db))\n         }\n-        NameLike::NameRef(name_ref) => {\n+        ast::NameLike::NameRef(name_ref) => {\n             NameRefClass::classify(sema, &name_ref).map(|class| class.referenced(sema.db))\n         }\n-        NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| NameRefClass::referenced(class, sema.db))\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n@@ -187,10 +166,12 @@ fn source_edit_from_references(\n             // if the ranges differ then the node is inside a macro call, we can't really attempt\n             // to make special rewrites like shorthand syntax and such, so just rename the node in\n             // the macro input\n-            NameLike::NameRef(name_ref) if name_ref.syntax().text_range() == reference.range => {\n+            ast::NameLike::NameRef(name_ref)\n+                if name_ref.syntax().text_range() == reference.range =>\n+            {\n                 source_edit_from_name_ref(name_ref, new_name, def)\n             }\n-            NameLike::Name(name) if name.syntax().text_range() == reference.range => {\n+            ast::NameLike::Name(name) if name.syntax().text_range() == reference.range => {\n                 source_edit_from_name(name, new_name)\n             }\n             _ => None,"}, {"sha": "ba8bea00208a9d0f3c57a0b11a66f5eee67e85e3", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "patch": "@@ -52,34 +52,10 @@ impl IntoIterator for UsageSearchResult {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub enum NameLike {\n-    NameRef(ast::NameRef),\n-    Name(ast::Name),\n-    Lifetime(ast::Lifetime),\n-}\n-\n-impl NameLike {\n-    pub fn as_name_ref(&self) -> Option<&ast::NameRef> {\n-        match self {\n-            NameLike::NameRef(name_ref) => Some(name_ref),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-mod __ {\n-    use super::{\n-        ast::{Lifetime, Name, NameRef},\n-        NameLike,\n-    };\n-    stdx::impl_from!(NameRef, Name, Lifetime for NameLike);\n-}\n-\n #[derive(Debug, Clone)]\n pub struct FileReference {\n     pub range: TextRange,\n-    pub name: NameLike,\n+    pub name: ast::NameLike,\n     pub access: Option<ReferenceAccess>,\n }\n \n@@ -300,6 +276,7 @@ impl<'a> FindUsages<'a> {\n     pub fn in_scope(self, scope: SearchScope) -> FindUsages<'a> {\n         self.set_scope(Some(scope))\n     }\n+\n     pub fn set_scope(mut self, scope: Option<SearchScope>) -> FindUsages<'a> {\n         assert!(self.scope.is_none());\n         self.scope = scope;\n@@ -355,18 +332,23 @@ impl<'a> FindUsages<'a> {\n                     continue;\n                 }\n \n-                if let Some(name_ref) = sema.find_node_at_offset_with_descend(&tree, offset) {\n-                    if self.found_name_ref(&name_ref, sink) {\n-                        return;\n-                    }\n-                } else if let Some(name) = sema.find_node_at_offset_with_descend(&tree, offset) {\n-                    if self.found_name(&name, sink) {\n-                        return;\n-                    }\n-                } else if let Some(lifetime) = sema.find_node_at_offset_with_descend(&tree, offset)\n-                {\n-                    if self.found_lifetime(&lifetime, sink) {\n-                        return;\n+                if let Some(name) = sema.find_node_at_offset_with_descend(&tree, offset) {\n+                    match name {\n+                        ast::NameLike::NameRef(name_ref) => {\n+                            if self.found_name_ref(&name_ref, sink) {\n+                                return;\n+                            }\n+                        }\n+                        ast::NameLike::Name(name) => {\n+                            if self.found_name(&name, sink) {\n+                                return;\n+                            }\n+                        }\n+                        ast::NameLike::Lifetime(lifetime) => {\n+                            if self.found_lifetime(&lifetime, sink) {\n+                                return;\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -383,7 +365,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(lifetime.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::Lifetime(lifetime.clone()),\n+                    name: ast::NameLike::Lifetime(lifetime.clone()),\n                     access: None,\n                 };\n                 sink(file_id, reference)\n@@ -402,7 +384,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::NameRef(name_ref.clone()),\n+                    name: ast::NameLike::NameRef(name_ref.clone()),\n                     access: reference_access(&def, &name_ref),\n                 };\n                 sink(file_id, reference)\n@@ -412,12 +394,12 @@ impl<'a> FindUsages<'a> {\n                 let reference = match self.def {\n                     Definition::Field(_) if &field == self.def => FileReference {\n                         range,\n-                        name: NameLike::NameRef(name_ref.clone()),\n+                        name: ast::NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&field, &name_ref),\n                     },\n                     Definition::Local(l) if &local == l => FileReference {\n                         range,\n-                        name: NameLike::NameRef(name_ref.clone()),\n+                        name: ast::NameLike::NameRef(name_ref.clone()),\n                         access: reference_access(&Definition::Local(local), &name_ref),\n                     },\n                     _ => return false, // not a usage\n@@ -441,7 +423,7 @@ impl<'a> FindUsages<'a> {\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n                 let reference = FileReference {\n                     range,\n-                    name: NameLike::Name(name.clone()),\n+                    name: ast::NameLike::Name(name.clone()),\n                     // FIXME: mutable patterns should have `Write` access\n                     access: Some(ReferenceAccess::Read),\n                 };"}, {"sha": "b3a24d39d8bae073065302b8e7d3ae0063d998f0", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "patch": "@@ -19,7 +19,7 @@ pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n-        AttrKind, FieldKind, Macro, NameOrNameRef, PathSegmentKind, SelfParamKind,\n+        AttrKind, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind, SelfParamKind,\n         SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n     token_ext::*,"}, {"sha": "2fa7b8c1e1b4c2d7bb8562e53cf4416e88220c82", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=e52bdc55ef05bae8e647a5a0a9f8c3605c4cdd34", "patch": "@@ -297,6 +297,52 @@ impl ast::RecordExprField {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub enum NameLike {\n+    NameRef(ast::NameRef),\n+    Name(ast::Name),\n+    Lifetime(ast::Lifetime),\n+}\n+\n+impl NameLike {\n+    pub fn as_name_ref(&self) -> Option<&ast::NameRef> {\n+        match self {\n+            NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl ast::AstNode for NameLike {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        matches!(kind, SyntaxKind::NAME | SyntaxKind::NAME_REF | SyntaxKind::LIFETIME)\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            SyntaxKind::NAME => NameLike::Name(ast::Name { syntax }),\n+            SyntaxKind::NAME_REF => NameLike::NameRef(ast::NameRef { syntax }),\n+            SyntaxKind::LIFETIME => NameLike::Lifetime(ast::Lifetime { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            NameLike::NameRef(it) => it.syntax(),\n+            NameLike::Name(it) => it.syntax(),\n+            NameLike::Lifetime(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n+mod __ {\n+    use super::{\n+        ast::{Lifetime, Name, NameRef},\n+        NameLike,\n+    };\n+    stdx::impl_from!(NameRef, Name, Lifetime for NameLike);\n+}\n+\n #[derive(Debug, Clone, PartialEq)]\n pub enum NameOrNameRef {\n     Name(ast::Name),"}]}