{"sha": "010fb40b4454a2dc278cbb8a636590d081f10295", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMGZiNDBiNDQ1NGEyZGMyNzhjYmI4YTYzNjU5MGQwODFmMTAyOTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-28T15:55:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-28T15:55:09Z"}, "message": "Rollup merge of #49400 - Diggsey:shrink-to, r=joshtriplett\n\nImplement `shrink_to` method on collections\n\nFixes #49385", "tree": {"sha": "264e28d5735f108f5c77186d6675ddd470a0d2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264e28d5735f108f5c77186d6675ddd470a0d2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/010fb40b4454a2dc278cbb8a636590d081f10295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJau7rdCRBK7hj4Ov3rIwAAdHIIAJVUyZqGzy7ZPk9bmH0+wxLB\nYPrzL/r5UbT5n/Sdnce8cYdExlv4wRlaauO1j9P60wXvXqMXoS4zW4mwzqfsA1B8\niEhTzP7uigr+V+rdkbKjw4itbNDfcN5578UvTgVle/tHCF+prJd8j5thfy8NXozL\n3n5qlvqCHxIRvCZdVgfCajcEhntwoVsQUSOPuIBS4PgvecKqg0S2dj1/f1WLnbVu\nwlDnjZGusIr/N56MyUwP0dZyS5OhITHwbXiCXj/rr57H/78Wrlbmu9AhgGcIRJK+\nJLpqvmO1Ld1o+Ewrf2svBwJz/ElDG4k3nFWNuUZQnncvaXlL2e0fjx1yGVQCJ1k=\n=b3fZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 264e28d5735f108f5c77186d6675ddd470a0d2a1\nparent 0214304b5aa74fd6beaefb2474d6ba90ea423a43\nparent 04f6692aaf78809c041ba6145bde2dcbeec9725e\nauthor kennytm <kennytm@gmail.com> 1522252509 +0200\ncommitter GitHub <noreply@github.com> 1522252509 +0200\n\nRollup merge of #49400 - Diggsey:shrink-to, r=joshtriplett\n\nImplement `shrink_to` method on collections\n\nFixes #49385\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/010fb40b4454a2dc278cbb8a636590d081f10295", "html_url": "https://github.com/rust-lang/rust/commit/010fb40b4454a2dc278cbb8a636590d081f10295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/010fb40b4454a2dc278cbb8a636590d081f10295/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0214304b5aa74fd6beaefb2474d6ba90ea423a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0214304b5aa74fd6beaefb2474d6ba90ea423a43", "html_url": "https://github.com/rust-lang/rust/commit/0214304b5aa74fd6beaefb2474d6ba90ea423a43"}, {"sha": "04f6692aaf78809c041ba6145bde2dcbeec9725e", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f6692aaf78809c041ba6145bde2dcbeec9725e", "html_url": "https://github.com/rust-lang/rust/commit/04f6692aaf78809c041ba6145bde2dcbeec9725e"}], "stats": {"total": 239, "additions": 237, "deletions": 2}, "files": [{"sha": "f6a666b599b0984d0aa54b6f70a03d0ec5dfe650", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -509,6 +509,31 @@ impl<T: Ord> BinaryHeap<T> {\n         self.data.shrink_to_fit();\n     }\n \n+    /// Discards capacity with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n+    ///\n+    /// assert!(heap.capacity() >= 100);\n+    /// heap.shrink_to(10);\n+    /// assert!(heap.capacity() >= 10);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.data.shrink_to(min_capacity)\n+    }\n+\n     /// Removes the greatest item from the binary heap and returns it, or `None` if it\n     /// is empty.\n     ///"}, {"sha": "23c12bef3aa7cc2166a21bde49d97920f71c7180", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -1015,6 +1015,34 @@ impl String {\n         self.vec.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of this `String` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// let mut s = String::from(\"foo\");\n+    ///\n+    /// s.reserve(100);\n+    /// assert!(s.capacity() >= 100);\n+    ///\n+    /// s.shrink_to(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// s.shrink_to(0);\n+    /// assert!(s.capacity() >= 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.vec.shrink_to(min_capacity)\n+    }\n+\n     /// Appends the given [`char`] to the end of this `String`.\n     ///\n     /// [`char`]: ../../std/primitive.char.html"}, {"sha": "c9c6cf1cb66912f0592f300c2935cdbe7f888532", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -66,7 +66,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::Ordering;\n+use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n@@ -586,6 +586,31 @@ impl<T> Vec<T> {\n         self.buf.shrink_to_fit(self.len);\n     }\n \n+    /// Shrinks the capacity of the vector with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// let mut vec = Vec::with_capacity(10);\n+    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// assert_eq!(vec.capacity(), 10);\n+    /// vec.shrink_to(4);\n+    /// assert!(vec.capacity() >= 4);\n+    /// vec.shrink_to(0);\n+    /// assert!(vec.capacity() >= 3);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n+    }\n+\n     /// Converts the vector into [`Box<[T]>`][owned slice].\n     ///\n     /// Note that this will drop any excess capacity."}, {"sha": "be6e8d0f22f07bea2c6e5e299e478311d2209852", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -676,9 +676,42 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn shrink_to_fit(&mut self) {\n+        self.shrink_to(0);\n+    }\n+\n+    /// Shrinks the capacity of the `VecDeque` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::with_capacity(15);\n+    /// buf.extend(0..4);\n+    /// assert_eq!(buf.capacity(), 15);\n+    /// buf.shrink_to(6);\n+    /// assert!(buf.capacity() >= 6);\n+    /// buf.shrink_to(0);\n+    /// assert!(buf.capacity() >= 4);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n+\n         // +1 since the ringbuffer always leaves one space empty\n         // len + 1 can't overflow for an existing, well-formed ringbuffer.\n-        let target_cap = cmp::max(self.len() + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n+        let target_cap = cmp::max(\n+            cmp::max(min_capacity, self.len()) + 1,\n+            MINIMUM_CAPACITY + 1\n+        ).next_power_of_two();\n+\n         if target_cap < self.cap() {\n             // There are three cases of interest:\n             //   All elements are out of desired bounds"}, {"sha": "474999a6646df687cd91ec5c8566443feff5efd6", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -910,6 +910,46 @@ impl<K, V, S> HashMap<K, V, S>\n         }\n     }\n \n+    /// Shrinks the capacity of the map with a lower limit. It will drop\n+    /// down no lower than the supplied limit while maintaining the internal rules\n+    /// and possibly leaving some space in accordance with the resize policy.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\n+    /// map.insert(1, 2);\n+    /// map.insert(3, 4);\n+    /// assert!(map.capacity() >= 100);\n+    /// map.shrink_to(10);\n+    /// assert!(map.capacity() >= 10);\n+    /// map.shrink_to(0);\n+    /// assert!(map.capacity() >= 2);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n+\n+        let new_raw_cap = self.resize_policy.raw_capacity(max(self.len(), min_capacity));\n+        if self.raw_capacity() != new_raw_cap {\n+            let old_table = replace(&mut self.table, RawTable::new(new_raw_cap));\n+            let old_size = old_table.size();\n+\n+            // Shrink the table. Naive algorithm for resizing:\n+            for (h, k, v) in old_table.into_iter() {\n+                self.insert_hashed_nocheck(h, k, v);\n+            }\n+\n+            debug_assert_eq!(self.table.size(), old_size);\n+        }\n+    }\n+\n     /// Insert a pre-hashed key-value pair, without first checking\n     /// that there's enough room in the buckets. Returns a reference to the\n     /// newly insert value."}, {"sha": "855563a5cb8db8c07479eaa990068d76b1ed0581", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -292,6 +292,34 @@ impl<T, S> HashSet<T, S>\n         self.map.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of the set with a lower limit. It will drop\n+    /// down no lower than the supplied limit while maintaining the internal rules\n+    /// and possibly leaving some space in accordance with the resize policy.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::with_capacity(100);\n+    /// set.insert(1);\n+    /// set.insert(2);\n+    /// assert!(set.capacity() >= 100);\n+    /// set.shrink_to(10);\n+    /// assert!(set.capacity() >= 10);\n+    /// set.shrink_to(0);\n+    /// assert!(set.capacity() >= 2);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.map.shrink_to(min_capacity)\n+    }\n+\n     /// An iterator visiting all elements in arbitrary order.\n     /// The iterator element type is `&'a T`.\n     ///"}, {"sha": "7520121a8c2900f51506920814679790e61707ff", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -295,6 +295,36 @@ impl OsString {\n         self.inner.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of the `OsString` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"foo\");\n+    ///\n+    /// s.reserve(100);\n+    /// assert!(s.capacity() >= 100);\n+    ///\n+    /// s.shrink_to(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// s.shrink_to(0);\n+    /// assert!(s.capacity() >= 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     /// Converts this `OsString` into a boxed [`OsStr`].\n     ///\n     /// [`OsStr`]: struct.OsStr.html"}, {"sha": "68d3b946d9ef55af8b27318091d46915da396a9e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -298,6 +298,7 @@\n #![feature(raw)]\n #![feature(rustc_attrs)]\n #![feature(stdsimd)]\n+#![feature(shrink_to)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]"}, {"sha": "da27787babb97d63a14953027d39714c37b79d70", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "e43bc6da5f1f8219b3e99bace02be04f8813a492", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "84f560af69beca53db1c17bf5e18d0f1923953ac", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "bcc66b9954b895c97b0db3bc9c57ab864c5f9052", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -113,6 +113,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     #[inline]\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_box()) }"}, {"sha": "dda4e1bab3b42f2b916de2ca7c2379443c2b78e4", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010fb40b4454a2dc278cbb8a636590d081f10295/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=010fb40b4454a2dc278cbb8a636590d081f10295", "patch": "@@ -253,6 +253,11 @@ impl Wtf8Buf {\n         self.bytes.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.bytes.shrink_to(min_capacity)\n+    }\n+\n     /// Returns the number of bytes that this string buffer can hold without reallocating.\n     #[inline]\n     pub fn capacity(&self) -> usize {"}]}