{"sha": "068db466e889d73c65007dc04a05a760e3d9f766", "node_id": "C_kwDOAAsO6NoAKDA2OGRiNDY2ZTg4OWQ3M2M2NTAwN2RjMDRhMDVhNzYwZTNkOWY3NjY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-22T05:23:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:55Z"}, "message": "Use `ThinVec` in `ast::WhereClause`.", "tree": {"sha": "589c591bd79c3451de5c5d770928bc4befe45e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589c591bd79c3451de5c5d770928bc4befe45e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068db466e889d73c65007dc04a05a760e3d9f766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068db466e889d73c65007dc04a05a760e3d9f766", "html_url": "https://github.com/rust-lang/rust/commit/068db466e889d73c65007dc04a05a760e3d9f766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068db466e889d73c65007dc04a05a760e3d9f766/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614", "html_url": "https://github.com/rust-lang/rust/commit/dd7aff5cc5d3eba6dd0301ba6b33d3e178f91614"}], "stats": {"total": 168, "additions": 92, "deletions": 76}, "files": [{"sha": "9ed451f13b256aa8a0c6a6a1785487d7b48f1377", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -403,13 +403,13 @@ pub struct WhereClause {\n     /// if we parsed no predicates (e.g. `struct Foo where {}`).\n     /// This allows us to pretty-print accurately.\n     pub has_where_token: bool,\n-    pub predicates: Vec<WherePredicate>,\n+    pub predicates: ThinVec<WherePredicate>,\n     pub span: Span,\n }\n \n impl Default for WhereClause {\n     fn default() -> WhereClause {\n-        WhereClause { has_where_token: false, predicates: Vec::new(), span: DUMMY_SP }\n+        WhereClause { has_where_token: false, predicates: ThinVec::new(), span: DUMMY_SP }\n     }\n }\n \n@@ -3115,15 +3115,15 @@ mod size_asserts {\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 72);\n     static_assert_size!(ExprKind, 40);\n-    static_assert_size!(Fn, 168);\n+    static_assert_size!(Fn, 152);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericArg, 24);\n     static_assert_size!(GenericBound, 56);\n-    static_assert_size!(Generics, 56);\n-    static_assert_size!(Impl, 168);\n-    static_assert_size!(Item, 168);\n-    static_assert_size!(ItemKind, 96);\n+    static_assert_size!(Generics, 40);\n+    static_assert_size!(Impl, 152);\n+    static_assert_size!(Item, 152);\n+    static_assert_size!(ItemKind, 80);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(MetaItemLit, 40);"}, {"sha": "a22e8638f7397eaf31e50cab28703e65eab12b7d", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -17,10 +17,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n-\n use smallvec::{smallvec, Array, SmallVec};\n use std::ops::DerefMut;\n use std::{panic, ptr};\n+use thin_vec::ThinVec;\n \n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n@@ -335,6 +335,17 @@ where\n     }\n }\n \n+// No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n+#[inline]\n+pub fn visit_thin_vec<T, F>(elems: &mut ThinVec<T>, mut visit_elem: F)\n+where\n+    F: FnMut(&mut T),\n+{\n+    for elem in elems {\n+        visit_elem(elem);\n+    }\n+}\n+\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n #[inline]\n pub fn visit_opt<T, F>(opt: &mut Option<T>, mut visit_elem: F)\n@@ -917,7 +928,7 @@ pub fn noop_visit_generics<T: MutVisitor>(generics: &mut Generics, vis: &mut T)\n \n pub fn noop_visit_where_clause<T: MutVisitor>(wc: &mut WhereClause, vis: &mut T) {\n     let WhereClause { has_where_token: _, predicates, span } = wc;\n-    visit_vec(predicates, |predicate| vis.visit_where_predicate(predicate));\n+    visit_thin_vec(predicates, |predicate| vis.visit_where_predicate(predicate));\n     vis.visit_span(span);\n }\n "}, {"sha": "694d688bf1fe0190f557f367c1bd2fd58d7c4065", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -1724,7 +1724,7 @@ impl<'a> State<'a> {\n             params: ThinVec::new(),\n             where_clause: ast::WhereClause {\n                 has_where_token: false,\n-                predicates: Vec::new(),\n+                predicates: ThinVec::new(),\n                 span: DUMMY_SP,\n             },\n             span: DUMMY_SP,"}, {"sha": "8314d59d845bc8ec3ab96c8f4c99fd95dbca8697", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -9,6 +9,7 @@ use rustc_expand::base::ExtCtxt;\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n /// A path, e.g., `::std::option::Option::<i32>` (global). Has support\n /// for type parameters.\n@@ -185,7 +186,11 @@ impl Bounds {\n \n         Generics {\n             params,\n-            where_clause: ast::WhereClause { has_where_token: false, predicates: Vec::new(), span },\n+            where_clause: ast::WhereClause {\n+                has_where_token: false,\n+                predicates: ThinVec::new(),\n+                span,\n+            },\n             span,\n         }\n     }"}, {"sha": "04b7703ff042ceb8fd7573309f97e84233fbd85a", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -258,7 +258,7 @@ impl<'a> Parser<'a> {\n             params,\n             where_clause: WhereClause {\n                 has_where_token: false,\n-                predicates: Vec::new(),\n+                predicates: ThinVec::new(),\n                 span: self.prev_token.span.shrink_to_hi(),\n             },\n             span,\n@@ -288,7 +288,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, (WhereClause, Option<Vec<ast::FieldDef>>)> {\n         let mut where_clause = WhereClause {\n             has_where_token: false,\n-            predicates: Vec::new(),\n+            predicates: ThinVec::new(),\n             span: self.prev_token.span.shrink_to_hi(),\n         };\n         let mut tuple_struct_body = None;"}, {"sha": "47d3382fc6463948730488ef38a42e517d976214", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/068db466e889d73c65007dc04a05a760e3d9f766/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/068db466e889d73c65007dc04a05a760e3d9f766/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=068db466e889d73c65007dc04a05a760e3d9f766", "patch": "@@ -8,52 +8,52 @@ ast-stats-1 GenericArgs               56 ( 0.8%)             1            56\n ast-stats-1 - AngleBracketed            56 ( 0.8%)             1\n ast-stats-1 Crate                     56 ( 0.8%)             1            56\n ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n-ast-stats-1 - Normal                    32 ( 0.4%)             1\n-ast-stats-1 - DocComment                32 ( 0.4%)             1\n+ast-stats-1 - Normal                    32 ( 0.5%)             1\n+ast-stats-1 - DocComment                32 ( 0.5%)             1\n ast-stats-1 Local                     72 ( 1.0%)             1            72\n-ast-stats-1 Arm                       96 ( 1.3%)             2            48\n-ast-stats-1 ForeignItem               96 ( 1.3%)             1            96\n-ast-stats-1 - Fn                        96 ( 1.3%)             1\n-ast-stats-1 FieldDef                 160 ( 2.2%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.2%)             5            32\n-ast-stats-1 - Local                     32 ( 0.4%)             1\n-ast-stats-1 - MacCall                   32 ( 0.4%)             1\n-ast-stats-1 - Expr                      96 ( 1.3%)             3\n-ast-stats-1 Param                    160 ( 2.2%)             4            40\n+ast-stats-1 Arm                       96 ( 1.4%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.4%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.4%)             1\n+ast-stats-1 FieldDef                 160 ( 2.3%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.3%)             5            32\n+ast-stats-1 - Local                     32 ( 0.5%)             1\n+ast-stats-1 - MacCall                   32 ( 0.5%)             1\n+ast-stats-1 - Expr                      96 ( 1.4%)             3\n+ast-stats-1 Param                    160 ( 2.3%)             4            40\n ast-stats-1 FnDecl                   200 ( 2.8%)             5            40\n-ast-stats-1 GenericBound             224 ( 3.1%)             4            56\n-ast-stats-1 - Trait                    224 ( 3.1%)             4\n-ast-stats-1 Variant                  240 ( 3.3%)             2           120\n-ast-stats-1 Block                    288 ( 4.0%)             6            48\n-ast-stats-1 AssocItem                416 ( 5.8%)             4           104\n-ast-stats-1 - Type                     208 ( 2.9%)             2\n-ast-stats-1 - Fn                       208 ( 2.9%)             2\n-ast-stats-1 GenericParam             480 ( 6.7%)             5            96\n-ast-stats-1 Expr                     576 ( 8.0%)             8            72\n+ast-stats-1 GenericBound             224 ( 3.2%)             4            56\n+ast-stats-1 - Trait                    224 ( 3.2%)             4\n+ast-stats-1 Variant                  240 ( 3.4%)             2           120\n+ast-stats-1 Block                    288 ( 4.1%)             6            48\n+ast-stats-1 AssocItem                416 ( 5.9%)             4           104\n+ast-stats-1 - Type                     208 ( 3.0%)             2\n+ast-stats-1 - Fn                       208 ( 3.0%)             2\n+ast-stats-1 GenericParam             480 ( 6.8%)             5            96\n+ast-stats-1 Expr                     576 ( 8.2%)             8            72\n ast-stats-1 - Path                      72 ( 1.0%)             1\n ast-stats-1 - Match                     72 ( 1.0%)             1\n ast-stats-1 - Struct                    72 ( 1.0%)             1\n ast-stats-1 - Lit                      144 ( 2.0%)             2\n-ast-stats-1 - Block                    216 ( 3.0%)             3\n-ast-stats-1 Pat                      616 ( 8.6%)             7            88\n+ast-stats-1 - Block                    216 ( 3.1%)             3\n+ast-stats-1 Pat                      616 ( 8.7%)             7            88\n ast-stats-1 - Struct                    88 ( 1.2%)             1\n ast-stats-1 - Wild                      88 ( 1.2%)             1\n-ast-stats-1 - Ident                    440 ( 6.1%)             5\n-ast-stats-1 PathSegment              720 (10.0%)            30            24\n-ast-stats-1 Ty                       896 (12.5%)            14            64\n+ast-stats-1 - Ident                    440 ( 6.2%)             5\n+ast-stats-1 PathSegment              720 (10.2%)            30            24\n+ast-stats-1 Ty                       896 (12.7%)            14            64\n ast-stats-1 - Ptr                       64 ( 0.9%)             1\n ast-stats-1 - Ref                       64 ( 0.9%)             1\n ast-stats-1 - ImplicitSelf             128 ( 1.8%)             2\n-ast-stats-1 - Path                     640 ( 8.9%)            10\n-ast-stats-1 Item                   1_512 (21.0%)             9           168\n-ast-stats-1 - Trait                    168 ( 2.3%)             1\n-ast-stats-1 - Enum                     168 ( 2.3%)             1\n-ast-stats-1 - ForeignMod               168 ( 2.3%)             1\n-ast-stats-1 - Impl                     168 ( 2.3%)             1\n-ast-stats-1 - Fn                       336 ( 4.7%)             2\n-ast-stats-1 - Use                      504 ( 7.0%)             3\n+ast-stats-1 - Path                     640 ( 9.1%)            10\n+ast-stats-1 Item                   1_368 (19.4%)             9           152\n+ast-stats-1 - Trait                    152 ( 2.2%)             1\n+ast-stats-1 - Enum                     152 ( 2.2%)             1\n+ast-stats-1 - ForeignMod               152 ( 2.2%)             1\n+ast-stats-1 - Impl                     152 ( 2.2%)             1\n+ast-stats-1 - Fn                       304 ( 4.3%)             2\n+ast-stats-1 - Use                      456 ( 6.5%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  7_192\n+ast-stats-1 Total                  7_048\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n@@ -68,52 +68,52 @@ ast-stats-2 Local                     72 ( 0.9%)             1            72\n ast-stats-2 Arm                       96 ( 1.2%)             2            48\n ast-stats-2 ForeignItem               96 ( 1.2%)             1            96\n ast-stats-2 - Fn                        96 ( 1.2%)             1\n-ast-stats-2 InlineAsm                120 ( 1.5%)             1           120\n-ast-stats-2 Attribute                128 ( 1.6%)             4            32\n+ast-stats-2 InlineAsm                120 ( 1.6%)             1           120\n+ast-stats-2 Attribute                128 ( 1.7%)             4            32\n ast-stats-2 - DocComment                32 ( 0.4%)             1\n ast-stats-2 - Normal                    96 ( 1.2%)             3\n-ast-stats-2 FieldDef                 160 ( 2.0%)             2            80\n-ast-stats-2 Stmt                     160 ( 2.0%)             5            32\n+ast-stats-2 FieldDef                 160 ( 2.1%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.1%)             5            32\n ast-stats-2 - Local                     32 ( 0.4%)             1\n ast-stats-2 - Semi                      32 ( 0.4%)             1\n ast-stats-2 - Expr                      96 ( 1.2%)             3\n-ast-stats-2 Param                    160 ( 2.0%)             4            40\n-ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n+ast-stats-2 Param                    160 ( 2.1%)             4            40\n+ast-stats-2 FnDecl                   200 ( 2.6%)             5            40\n ast-stats-2 GenericBound             224 ( 2.9%)             4            56\n ast-stats-2 - Trait                    224 ( 2.9%)             4\n ast-stats-2 Variant                  240 ( 3.1%)             2           120\n-ast-stats-2 Block                    288 ( 3.7%)             6            48\n-ast-stats-2 AssocItem                416 ( 5.3%)             4           104\n-ast-stats-2 - Type                     208 ( 2.6%)             2\n-ast-stats-2 - Fn                       208 ( 2.6%)             2\n-ast-stats-2 GenericParam             480 ( 6.1%)             5            96\n-ast-stats-2 Pat                      616 ( 7.8%)             7            88\n+ast-stats-2 Block                    288 ( 3.8%)             6            48\n+ast-stats-2 AssocItem                416 ( 5.4%)             4           104\n+ast-stats-2 - Type                     208 ( 2.7%)             2\n+ast-stats-2 - Fn                       208 ( 2.7%)             2\n+ast-stats-2 GenericParam             480 ( 6.2%)             5            96\n+ast-stats-2 Pat                      616 ( 8.0%)             7            88\n ast-stats-2 - Struct                    88 ( 1.1%)             1\n ast-stats-2 - Wild                      88 ( 1.1%)             1\n-ast-stats-2 - Ident                    440 ( 5.6%)             5\n-ast-stats-2 Expr                     648 ( 8.2%)             9            72\n+ast-stats-2 - Ident                    440 ( 5.7%)             5\n+ast-stats-2 Expr                     648 ( 8.4%)             9            72\n ast-stats-2 - Path                      72 ( 0.9%)             1\n ast-stats-2 - Match                     72 ( 0.9%)             1\n ast-stats-2 - Struct                    72 ( 0.9%)             1\n ast-stats-2 - InlineAsm                 72 ( 0.9%)             1\n-ast-stats-2 - Lit                      144 ( 1.8%)             2\n-ast-stats-2 - Block                    216 ( 2.7%)             3\n-ast-stats-2 PathSegment              792 (10.1%)            33            24\n-ast-stats-2 Ty                       896 (11.4%)            14            64\n+ast-stats-2 - Lit                      144 ( 1.9%)             2\n+ast-stats-2 - Block                    216 ( 2.8%)             3\n+ast-stats-2 PathSegment              792 (10.3%)            33            24\n+ast-stats-2 Ty                       896 (11.7%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.8%)             1\n ast-stats-2 - Ref                       64 ( 0.8%)             1\n-ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n-ast-stats-2 - Path                     640 ( 8.1%)            10\n-ast-stats-2 Item                   1_848 (23.5%)            11           168\n-ast-stats-2 - Trait                    168 ( 2.1%)             1\n-ast-stats-2 - Enum                     168 ( 2.1%)             1\n-ast-stats-2 - ExternCrate              168 ( 2.1%)             1\n-ast-stats-2 - ForeignMod               168 ( 2.1%)             1\n-ast-stats-2 - Impl                     168 ( 2.1%)             1\n-ast-stats-2 - Fn                       336 ( 4.3%)             2\n-ast-stats-2 - Use                      672 ( 8.6%)             4\n+ast-stats-2 - ImplicitSelf             128 ( 1.7%)             2\n+ast-stats-2 - Path                     640 ( 8.3%)            10\n+ast-stats-2 Item                   1_672 (21.8%)            11           152\n+ast-stats-2 - Trait                    152 ( 2.0%)             1\n+ast-stats-2 - Enum                     152 ( 2.0%)             1\n+ast-stats-2 - ExternCrate              152 ( 2.0%)             1\n+ast-stats-2 - ForeignMod               152 ( 2.0%)             1\n+ast-stats-2 - Impl                     152 ( 2.0%)             1\n+ast-stats-2 - Fn                       304 ( 4.0%)             2\n+ast-stats-2 - Use                      608 ( 7.9%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_856\n+ast-stats-2 Total                  7_680\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}