{"sha": "e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2VlOWRmYTI4ZTJjMDkzY2M3OWUwZThkNzI5OTQ1YzQzZjNjODE=", "commit": {"author": {"name": "flw", "email": "flw@cpan.org", "date": "2020-09-26T05:02:09Z"}, "committer": {"name": "flw", "email": "flw@cpan.org", "date": "2020-09-29T11:47:18Z"}, "message": "Add hover config `linksInHover` to suppress links", "tree": {"sha": "633e533ce5aa3c10337bafc240e1f4911e4ecb65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633e533ce5aa3c10337bafc240e1f4911e4ecb65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJBBAABCAArFiEEZfCcFyWGpWFKHbonx816felr18IFAl9zHsYNHGZsd0BjcGFu\nLm9yZwAKCRDHzXp96WvXwk5yEACn10hEsURcixu4+hi/iHVtn4s8vcHRGOmB2Ay8\nwnQ1wEYguasVHmvujcUG2oUXREXC3DojHfcmfr6sxdZ7r6LHOa9rUeWsP0Zh8sCj\nstnbr11ZaWpOqpM0r98r3UaDUUX3f+l19U7Nlwo/z1poonK7kxS4IyHHvqxPUcmK\nV4jjuR6vbwHvV5FPng0oDeXG6YP4Tw8aan9IT6xgI1L2FCxB0h/UrL1VVvsn5DFy\njr10CMEJRRSDBxU1Jrjj+/PMWpP3n5QV8E/y2TnFkKRI6CnbK6q9xfGEiXxg+NTd\n36evM538e52DALGvfmb6roM0cB+Wcs9LwQkPi/OMIwZ2v0+Kw+Rz6I2dQ8+h7ZlJ\nN2UcgNA7Lw8YVQU6HMIGiOjl0EFz8vTm1ihpNc2/HWnTBoMfECEJhgZYOlkyh4RI\nUvqWB7mMRK0GkoNmeJahqSMS9eo3mfIOiSxnM1EnzGsRwXcySViLzirLUuDwKkdn\nZjeVk6CHW5ODNlI0WXERnsHHwVb/goGNiBz2kvvw0+iGf94oY8m+vj+e7edrYElg\nTTLzHuwGXSqj3sxrJx8b3nn7XnaWe0Cds4Hgv351pf1QSHcaFsmvNoh9siCzVLCh\nAc9zIcUaUHMKfatl6pRJbouWIqdLagx2tIWmwjcLO0ZqF6fWDPyC4OP4nE+Zhgrx\nBgrW6Q==\n=Pyo5\n-----END PGP SIGNATURE-----", "payload": "tree 633e533ce5aa3c10337bafc240e1f4911e4ecb65\nparent 18c62c8a39d95ce3bb10ff5446bb589b1128a090\nauthor flw <flw@cpan.org> 1601096529 +0800\ncommitter flw <flw@cpan.org> 1601380038 +0800\n\nAdd hover config `linksInHover` to suppress links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "html_url": "https://github.com/rust-lang/rust/commit/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/comments", "author": {"login": "flw-cn", "id": 5546718, "node_id": "MDQ6VXNlcjU1NDY3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5546718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flw-cn", "html_url": "https://github.com/flw-cn", "followers_url": "https://api.github.com/users/flw-cn/followers", "following_url": "https://api.github.com/users/flw-cn/following{/other_user}", "gists_url": "https://api.github.com/users/flw-cn/gists{/gist_id}", "starred_url": "https://api.github.com/users/flw-cn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flw-cn/subscriptions", "organizations_url": "https://api.github.com/users/flw-cn/orgs", "repos_url": "https://api.github.com/users/flw-cn/repos", "events_url": "https://api.github.com/users/flw-cn/events{/privacy}", "received_events_url": "https://api.github.com/users/flw-cn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flw-cn", "id": 5546718, "node_id": "MDQ6VXNlcjU1NDY3MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5546718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flw-cn", "html_url": "https://github.com/flw-cn", "followers_url": "https://api.github.com/users/flw-cn/followers", "following_url": "https://api.github.com/users/flw-cn/following{/other_user}", "gists_url": "https://api.github.com/users/flw-cn/gists{/gist_id}", "starred_url": "https://api.github.com/users/flw-cn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flw-cn/subscriptions", "organizations_url": "https://api.github.com/users/flw-cn/orgs", "repos_url": "https://api.github.com/users/flw-cn/repos", "events_url": "https://api.github.com/users/flw-cn/events{/privacy}", "received_events_url": "https://api.github.com/users/flw-cn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c62c8a39d95ce3bb10ff5446bb589b1128a090", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c62c8a39d95ce3bb10ff5446bb589b1128a090", "html_url": "https://github.com/rust-lang/rust/commit/18c62c8a39d95ce3bb10ff5446bb589b1128a090"}], "stats": {"total": 162, "additions": 149, "deletions": 13}, "files": [{"sha": "bb9f12cd37ec8bab00f4ab8f6ede45bd2168b12d", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 104, "deletions": 9, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "patch": "@@ -14,7 +14,7 @@ use test_utils::mark;\n \n use crate::{\n     display::{macro_label, ShortLabel, ToNav, TryToNav},\n-    link_rewrite::rewrite_links,\n+    link_rewrite::{remove_links, rewrite_links},\n     markup::Markup,\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n@@ -26,17 +26,29 @@ pub struct HoverConfig {\n     pub run: bool,\n     pub debug: bool,\n     pub goto_type_def: bool,\n+    pub links_in_hover: bool,\n }\n \n impl Default for HoverConfig {\n     fn default() -> Self {\n-        Self { implementations: true, run: true, debug: true, goto_type_def: true }\n+        Self {\n+            implementations: true,\n+            run: true,\n+            debug: true,\n+            goto_type_def: true,\n+            links_in_hover: true,\n+        }\n     }\n }\n \n impl HoverConfig {\n-    pub const NO_ACTIONS: Self =\n-        Self { implementations: false, run: false, debug: false, goto_type_def: false };\n+    pub const NO_ACTIONS: Self = Self {\n+        implementations: false,\n+        run: false,\n+        debug: false,\n+        goto_type_def: false,\n+        links_in_hover: true,\n+    };\n \n     pub fn any(&self) -> bool {\n         self.implementations || self.runnable() || self.goto_type_def\n@@ -75,7 +87,11 @@ pub struct HoverResult {\n //\n // Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n // Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n-pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n+pub(crate) fn hover(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    links_in_hover: bool,\n+) -> Option<RangeInfo<HoverResult>> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best(file.token_at_offset(position.offset))?;\n@@ -93,7 +109,11 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     };\n     if let Some(definition) = definition {\n         if let Some(markup) = hover_for_definition(db, definition) {\n-            let markup = rewrite_links(db, &markup.as_str(), &definition);\n+            let markup = if links_in_hover {\n+                rewrite_links(db, &markup.as_str(), &definition)\n+            } else {\n+                remove_links(&markup.as_str())\n+            };\n             res.markup = Markup::from(markup);\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n@@ -363,12 +383,23 @@ mod tests {\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n-        assert!(analysis.hover(position).unwrap().is_none());\n+        assert!(analysis.hover(position, true).unwrap().is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n-        let hover = analysis.hover(position).unwrap().unwrap();\n+        let hover = analysis.hover(position, true).unwrap().unwrap();\n+\n+        let content = analysis.db.file_text(position.file_id);\n+        let hovered_element = &content[hover.range];\n+\n+        let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n+        expect.assert_eq(&actual)\n+    }\n+\n+    fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let hover = analysis.hover(position, false).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -379,7 +410,7 @@ mod tests {\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n-        let hover = analysis.hover(position).unwrap().unwrap();\n+        let hover = analysis.hover(position, true).unwrap().unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n \n@@ -1809,6 +1840,70 @@ struct S {\n         );\n     }\n \n+    #[test]\n+    fn test_hover_no_links() {\n+        check_hover_no_links(\n+            r#\"\n+/// Test cases:\n+/// case 1.  bare URL: https://www.example.com/\n+/// case 2.  inline URL with title: [example](https://www.example.com/)\n+/// case 3.  code refrence: [`Result`]\n+/// case 4.  code refrence but miss footnote: [`String`]\n+/// case 5.  autolink: <http://www.example.com/>\n+/// case 6.  email address: <test@example.com>\n+/// case 7.  refrence: [example][example]\n+/// case 8.  collapsed link: [example][]\n+/// case 9.  shortcut link: [example]\n+/// case 10. inline without URL: [example]()\n+/// case 11. refrence: [foo][foo]\n+/// case 12. refrence: [foo][bar]\n+/// case 13. collapsed link: [foo][]\n+/// case 14. shortcut link: [foo]\n+/// case 15. inline without URL: [foo]()\n+/// case 16. just escaped text: \\[foo]\n+/// case 17. inline link: [Foo](foo::Foo)\n+///\n+/// [`Result`]: ../../std/result/enum.Result.html\n+/// [^example]: https://www.example.com/\n+pub fn fo<|>o() {}\n+\"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub fn foo()\n+                ```\n+\n+                ---\n+\n+                Test cases:\n+                case 1.  bare URL: https://www.example.com/\n+                case 2.  inline URL with title: [example](https://www.example.com/)\n+                case 3.  code refrence: `Result`\n+                case 4.  code refrence but miss footnote: `String`\n+                case 5.  autolink: http://www.example.com/\n+                case 6.  email address: test@example.com\n+                case 7.  refrence: example\n+                case 8.  collapsed link: example\n+                case 9.  shortcut link: example\n+                case 10. inline without URL: example\n+                case 11. refrence: foo\n+                case 12. refrence: foo\n+                case 13. collapsed link: foo\n+                case 14. shortcut link: foo\n+                case 15. inline without URL: foo\n+                case 16. just escaped text: \\[foo]\n+                case 17. inline link: Foo\n+\n+                [^example]: https://www.example.com/\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_comment() {\n         mark::check!(hover_macro_generated_struct_fn_doc_comment);"}, {"sha": "4763c0aac3a77bf1ce869e813171f5cc4ceacf51", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "patch": "@@ -370,8 +370,12 @@ impl Analysis {\n     }\n \n     /// Returns a short text describing element at position.\n-    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position))\n+    pub fn hover(\n+        &self,\n+        position: FilePosition,\n+        links_in_hover: bool,\n+    ) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n+        self.with_db(|db| hover::hover(db, position, links_in_hover))\n     }\n \n     /// Computes parameter information for the given call expression."}, {"sha": "107787bb91b987fae269e21e56e05ebfc474ecce", "filename": "crates/ide/src/link_rewrite.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flink_rewrite.rs?ref=e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "patch": "@@ -4,7 +4,7 @@\n \n use hir::{Adt, Crate, HasAttrs, ModuleDef};\n use ide_db::{defs::Definition, RootDatabase};\n-use pulldown_cmark::{CowStr, Event, Options, Parser, Tag};\n+use pulldown_cmark::{CowStr, Event, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use url::Url;\n \n@@ -45,6 +45,41 @@ pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition)\n     out\n }\n \n+/// Remove all links in markdown documentation.\n+pub fn remove_links(markdown: &str) -> String {\n+    let mut drop_link = false;\n+\n+    let mut opts = Options::empty();\n+    opts.insert(Options::ENABLE_FOOTNOTES);\n+\n+    let doc = Parser::new_with_broken_link_callback(\n+        markdown,\n+        opts,\n+        Some(&|_, _| Some((String::new(), String::new()))),\n+    );\n+    let doc = doc.filter_map(move |evt| match evt {\n+        Event::Start(Tag::Link(link_type, ref target, ref title)) => {\n+            if link_type == LinkType::Inline && target.contains(\"://\") {\n+                Some(Event::Start(Tag::Link(link_type, target.clone(), title.clone())))\n+            } else {\n+                drop_link = true;\n+                None\n+            }\n+        }\n+        Event::End(_) if drop_link => {\n+            drop_link = false;\n+            None\n+        }\n+        _ => Some(evt),\n+    });\n+\n+    let mut out = String::new();\n+    let mut options = CmarkOptions::default();\n+    options.code_block_backticks = 3;\n+    cmark_with_options(doc, &mut out, None, options).ok();\n+    out\n+}\n+\n fn rewrite_intra_doc_link(\n     db: &RootDatabase,\n     def: Definition,"}, {"sha": "fab15f86009cd78626cc1ec4f4571a57b2e327d1", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "patch": "@@ -307,6 +307,7 @@ impl Config {\n             run: data.hoverActions_enable && data.hoverActions_run,\n             debug: data.hoverActions_enable && data.hoverActions_debug,\n             goto_type_def: data.hoverActions_enable && data.hoverActions_gotoTypeDef,\n+            links_in_hover: data.hoverActions_linksInHover,\n         };\n \n         log::info!(\"Config::update() = {:#?}\", self);\n@@ -451,6 +452,7 @@ config_data! {\n         hoverActions_gotoTypeDef: bool     = true,\n         hoverActions_implementations: bool = true,\n         hoverActions_run: bool             = true,\n+        hoverActions_linksInHover: bool    = true,\n \n         inlayHints_chainingHints: bool      = true,\n         inlayHints_maxLength: Option<usize> = None,"}, {"sha": "f7c7a378a14ae7fccde779a101dfcfeddb71d3d9", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73ee9dfa28e2c093cc79e0e8d729945c43f3c81/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e73ee9dfa28e2c093cc79e0e8d729945c43f3c81", "patch": "@@ -597,7 +597,7 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let info = match snap.analysis.hover(position)? {\n+    let info = match snap.analysis.hover(position, snap.config.hover.links_in_hover)? {\n         None => return Ok(None),\n         Some(info) => info,\n     };"}]}