{"sha": "4a0bb3d7c53c2a914649087bf206d52ed5768576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMGJiM2Q3YzUzYzJhOTE0NjQ5MDg3YmYyMDZkNTJlZDU3Njg1NzY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-07T08:32:39Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-07T15:34:44Z"}, "message": "Add support for goto definition and hover on Self\n\nThis fixes #943", "tree": {"sha": "f51670df82dfc0df68e6fda77d40878297af2ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51670df82dfc0df68e6fda77d40878297af2ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a0bb3d7c53c2a914649087bf206d52ed5768576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0bb3d7c53c2a914649087bf206d52ed5768576", "html_url": "https://github.com/rust-lang/rust/commit/4a0bb3d7c53c2a914649087bf206d52ed5768576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a0bb3d7c53c2a914649087bf206d52ed5768576/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a41d8e140ca65cb87bf6e69a35c3e86410aba374", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41d8e140ca65cb87bf6e69a35c3e86410aba374", "html_url": "https://github.com/rust-lang/rust/commit/a41d8e140ca65cb87bf6e69a35c3e86410aba374"}], "stats": {"total": 216, "additions": 190, "deletions": 26}, "files": [{"sha": "4a9921a85220304855ecbbd35baff63953d1b882", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=4a0bb3d7c53c2a914649087bf206d52ed5768576", "patch": "@@ -205,19 +205,8 @@ pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> R\n                         // TODO const/static/array length\n                         None\n                     }\n-                } else if let Some(module) = ast::Module::cast(node) {\n-                    Some(module_from_declaration(db, file_id, module)?.resolver(db))\n-                } else if let Some(_) = ast::SourceFile::cast(node) {\n-                    Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n-                } else if let Some(s) = ast::StructDef::cast(node) {\n-                    let module = module_from_child_node(db, file_id, s.syntax())?;\n-                    Some(struct_from_module(db, module, s).resolver(db))\n-                } else if let Some(e) = ast::EnumDef::cast(node) {\n-                    let module = module_from_child_node(db, file_id, e.syntax())?;\n-                    Some(enum_from_module(db, module, e).resolver(db))\n                 } else {\n-                    // TODO add missing cases\n-                    None\n+                    try_get_resolver_for_node(db, file_id, node)\n                 }\n             })\n         })\n@@ -236,20 +225,32 @@ pub fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNo\n                     // TODO const/static/array length\n                     None\n                 }\n-            } else if let Some(module) = ast::Module::cast(node) {\n-                Some(module_from_declaration(db, file_id, module)?.resolver(db))\n-            } else if let Some(_) = ast::SourceFile::cast(node) {\n-                Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n-            } else if let Some(s) = ast::StructDef::cast(node) {\n-                let module = module_from_child_node(db, file_id, s.syntax())?;\n-                Some(struct_from_module(db, module, s).resolver(db))\n-            } else if let Some(e) = ast::EnumDef::cast(node) {\n-                let module = module_from_child_node(db, file_id, e.syntax())?;\n-                Some(enum_from_module(db, module, e).resolver(db))\n             } else {\n-                // TODO add missing cases\n-                None\n+                try_get_resolver_for_node(db, file_id, node)\n             }\n         })\n         .unwrap_or_default()\n }\n+\n+fn try_get_resolver_for_node(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Option<Resolver> {\n+    if let Some(module) = ast::Module::cast(node) {\n+        Some(module_from_declaration(db, file_id, module)?.resolver(db))\n+    } else if let Some(_) = ast::SourceFile::cast(node) {\n+        Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n+    } else if let Some(s) = ast::StructDef::cast(node) {\n+        let module = module_from_child_node(db, file_id, s.syntax())?;\n+        Some(struct_from_module(db, module, s).resolver(db))\n+    } else if let Some(e) = ast::EnumDef::cast(node) {\n+        let module = module_from_child_node(db, file_id, e.syntax())?;\n+        Some(enum_from_module(db, module, e).resolver(db))\n+    } else if let Some(f) = ast::FnDef::cast(node) {\n+        function_from_source(db, file_id, f).map(|f| f.resolver(db))\n+    } else {\n+        // TODO add missing cases\n+        None\n+    }\n+}"}, {"sha": "d4e10b69ca72d469ba2b5740a788a86f9316ee38", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=4a0bb3d7c53c2a914649087bf206d52ed5768576", "patch": "@@ -121,8 +121,12 @@ pub(crate) fn reference_definition(\n             Some(Resolution::GenericParam(..)) => {\n                 // TODO: go to the generic param def\n             }\n-            Some(Resolution::SelfType(_impl_block)) => {\n-                // TODO: go to the implemented type\n+            Some(Resolution::SelfType(impl_block)) => {\n+                let ty = impl_block.target_ty(db);\n+\n+                if let hir::Ty::Adt { def_id, .. } = ty {\n+                    return Exact(NavigationTarget::from_adt_def(db, def_id));\n+                }\n             }\n             None => {\n                 // If we failed to resolve then check associated items\n@@ -337,6 +341,94 @@ mod tests {\n             \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n         );\n     }\n+    #[test]\n+    fn goto_definition_on_self() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            impl Foo {\n+                pub fn new() -> Self {\n+                    Self<|> {}\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            impl Foo {\n+                pub fn new() -> Self<|> {\n+                    Self {}\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo { A }\n+            impl Foo {\n+                pub fn new() -> Self<|> {\n+                    Foo::A\n+                }\n+            }\n+            \",\n+            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            enum Foo { A }\n+            impl Foo {\n+                pub fn thing(a: &Self<|>) {\n+                }\n+            }\n+            \",\n+            \"Foo ENUM_DEF FileId(1) [0; 14) [5; 8)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_definition_on_self_in_trait_impl() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            trait Make {\n+                fn new() -> Self;\n+            }\n+            impl Make for Foo {\n+                fn new() -> Self {\n+                    Self<|> {}\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            trait Make {\n+                fn new() -> Self;\n+            }\n+            impl Make for Foo {\n+                fn new() -> Self<|> {\n+                    Self{}\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n \n     #[test]\n     fn goto_definition_works_when_used_on_definition_name_itself() {"}, {"sha": "f14001e849c7257409828f7a6ed18aaeb8af2977", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=4a0bb3d7c53c2a914649087bf206d52ed5768576", "patch": "@@ -557,4 +557,62 @@ mod tests {\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_self() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct Thing { x: u32 };\n+            impl Thing {\n+                fn new() -> Self {\n+                    Self<|> { x: 0 }\n+                }\n+            }\n+        \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct Thing { x: u32 };\n+            impl Thing {\n+                fn new() -> Self<|> {\n+                    Self { x: 0 }\n+                }\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"struct Thing\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            enum Thing { A };\n+            impl Thing {\n+                pub fn new() -> Self<|> {\n+                    Thing::A\n+                }\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            enum Thing { A };\n+            impl Thing {\n+                pub fn thing(a: Self<|>) {\n+                }\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}, {"sha": "f6d7f31929f49b40489482d4a830dc1cdae4b709", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0bb3d7c53c2a914649087bf206d52ed5768576/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=4a0bb3d7c53c2a914649087bf206d52ed5768576", "patch": "@@ -126,6 +126,19 @@ impl NavigationTarget {\n         }\n     }\n \n+    pub(crate) fn from_adt_def(db: &RootDatabase, adt_def: hir::AdtDef) -> NavigationTarget {\n+        match adt_def {\n+            hir::AdtDef::Struct(s) => {\n+                let (file_id, node) = s.source(db);\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            hir::AdtDef::Enum(s) => {\n+                let (file_id, node) = s.source(db);\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+        }\n+    }\n+\n     pub(crate) fn from_def(db: &RootDatabase, module_def: hir::ModuleDef) -> NavigationTarget {\n         match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),"}]}