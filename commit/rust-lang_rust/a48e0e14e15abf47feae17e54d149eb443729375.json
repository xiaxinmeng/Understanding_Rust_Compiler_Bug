{"sha": "a48e0e14e15abf47feae17e54d149eb443729375", "node_id": "C_kwDOAAsO6NoAKGE0OGUwZTE0ZTE1YWJmNDdmZWFlMTdlNTRkMTQ5ZWI0NDM3MjkzNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T14:49:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T14:49:38Z"}, "message": "Auto merge of #11557 - bruno-ortiz:rust-dependencies, r=bruno-ortiz\n\nCreating rust dependencies tree explorer\n\nHello!\n\nI tried to implement a tree view that shows the dependencies of a project.\n\nIt allows to see all dependencies to the project and it uses `cargo tree` for it. Also it allows to click and open the files, the viewtree tries its best to follow the openned file in the editor.\n\nHere is an example:\n![image](https://user-images.githubusercontent.com/5748995/155822183-1e227c7b-7929-4fc8-8eed-29ccfc5e14fe.png)\n\nAny feedback is welcome since i have basically no professional experience with TS.", "tree": {"sha": "dfc55edf778735df9e4f3f276c75e707075204a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc55edf778735df9e4f3f276c75e707075204a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a48e0e14e15abf47feae17e54d149eb443729375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a48e0e14e15abf47feae17e54d149eb443729375", "html_url": "https://github.com/rust-lang/rust/commit/a48e0e14e15abf47feae17e54d149eb443729375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a48e0e14e15abf47feae17e54d149eb443729375/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cffc402c058f9d4d0675ed20bd920fa700c361ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cffc402c058f9d4d0675ed20bd920fa700c361ec", "html_url": "https://github.com/rust-lang/rust/commit/cffc402c058f9d4d0675ed20bd920fa700c361ec"}, {"sha": "ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfe7c04888a9c2567773370b127d2e6e1cdaa22", "html_url": "https://github.com/rust-lang/rust/commit/ecfe7c04888a9c2567773370b127d2e6e1cdaa22"}], "stats": {"total": 535, "additions": 522, "deletions": 13}, "files": [{"sha": "d326b7c2ccc9dd2106a1205b3c0c319bd2612624", "filename": "crates/ide/src/fetch_crates.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffetch_crates.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -0,0 +1,37 @@\n+use ide_db::{\n+    base_db::{CrateOrigin, FileId, SourceDatabase},\n+    FxIndexSet, RootDatabase,\n+};\n+\n+#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct CrateInfo {\n+    pub name: Option<String>,\n+    pub version: Option<String>,\n+    pub root_file_id: FileId,\n+}\n+\n+// Feature: Show Dependency Tree\n+//\n+// Shows a view tree with all the dependencies of this project\n+//\n+// |===\n+// image::https://user-images.githubusercontent.com/5748995/229394139-2625beab-f4c9-484b-84ed-ad5dee0b1e1a.png[]\n+pub(crate) fn fetch_crates(db: &RootDatabase) -> FxIndexSet<CrateInfo> {\n+    let crate_graph = db.crate_graph();\n+    crate_graph\n+        .iter()\n+        .map(|crate_id| &crate_graph[crate_id])\n+        .filter(|&data| !matches!(data.origin, CrateOrigin::Local { .. }))\n+        .map(|data| crate_info(data))\n+        .collect()\n+}\n+\n+fn crate_info(data: &ide_db::base_db::CrateData) -> CrateInfo {\n+    let crate_name = crate_name(data);\n+    let version = data.version.clone();\n+    CrateInfo { name: crate_name, version, root_file_id: data.root_file_id }\n+}\n+\n+fn crate_name(data: &ide_db::base_db::CrateData) -> Option<String> {\n+    data.display_name.as_ref().map(|it| it.canonical_name().to_owned())\n+}"}, {"sha": "24e2aed65a5beebe2391c00ca976bba5028d22cf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -59,16 +59,18 @@ mod view_mir;\n mod interpret_function;\n mod view_item_tree;\n mod shuffle_crate_graph;\n+mod fetch_crates;\n \n use std::sync::Arc;\n \n use cfg::CfgOptions;\n+use fetch_crates::CrateInfo;\n use ide_db::{\n     base_db::{\n         salsa::{self, ParallelDatabase},\n         CrateOrigin, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n     },\n-    symbol_index, FxHashMap, LineIndexDatabase,\n+    symbol_index, FxHashMap, FxIndexSet, LineIndexDatabase,\n };\n use syntax::SourceFile;\n \n@@ -331,6 +333,10 @@ impl Analysis {\n         self.with_db(|db| view_crate_graph::view_crate_graph(db, full))\n     }\n \n+    pub fn fetch_crates(&self) -> Cancellable<FxIndexSet<CrateInfo>> {\n+        self.with_db(|db| fetch_crates::fetch_crates(db))\n+    }\n+\n     pub fn expand_macro(&self, position: FilePosition) -> Cancellable<Option<ExpandedMacro>> {\n         self.with_db(|db| expand_macro::expand_macro(db, position))\n     }"}, {"sha": "083dfcf43d969607ec1801e8bf2d5a86241596fa", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -184,6 +184,13 @@ impl AbsPath {\n         self.0.ends_with(&suffix.0)\n     }\n \n+    pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n+        Some((\n+            self.file_stem()?.to_str()?,\n+            self.extension().and_then(|extension| extension.to_str()),\n+        ))\n+    }\n+\n     // region:delegate-methods\n \n     // Note that we deliberately don't implement `Deref<Target = Path>` here."}, {"sha": "c3c654ddb6f5eef549dfb319828a557abeb1731c", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -102,6 +102,18 @@ fn replace_root(s: &mut String, direction: bool) {\n     }\n }\n \n+fn replace_fake_sys_root(s: &mut String) {\n+    let fake_sysroot_path = get_test_path(\"fake-sysroot\");\n+    let fake_sysroot_path = if cfg!(windows) {\n+        let normalized_path =\n+            fake_sysroot_path.to_str().expect(\"expected str\").replace(r#\"\\\"#, r#\"\\\\\"#);\n+        format!(r#\"{}\\\\\"#, normalized_path)\n+    } else {\n+        format!(\"{}/\", fake_sysroot_path.to_str().expect(\"expected str\"))\n+    };\n+    *s = s.replace(&fake_sysroot_path, \"$FAKESYSROOT$\")\n+}\n+\n fn get_test_path(file: &str) -> PathBuf {\n     let base = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     base.join(\"test_data\").join(file)\n@@ -140,6 +152,7 @@ fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacro\n fn check_crate_graph(crate_graph: CrateGraph, expect: ExpectFile) {\n     let mut crate_graph = format!(\"{crate_graph:#?}\");\n     replace_root(&mut crate_graph, false);\n+    replace_fake_sys_root(&mut crate_graph);\n     expect.assert_eq(&crate_graph);\n }\n "}, {"sha": "c19be1965444a0a858d5b99b5b6c4ba13be05ab8", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -3,7 +3,8 @@\n //! `ide` crate.\n \n use ide::AssistResolveStrategy;\n-use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString};\n+use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString, Url};\n+\n use vfs::FileId;\n \n use crate::{global_state::GlobalStateSnapshot, to_proto, Result};\n@@ -27,7 +28,7 @@ pub(crate) fn publish_diagnostics(\n             severity: Some(to_proto::diagnostic_severity(d.severity)),\n             code: Some(NumberOrString::String(d.code.as_str().to_string())),\n             code_description: Some(lsp_types::CodeDescription {\n-                href: lsp_types::Url::parse(&format!(\n+                href: Url::parse(&format!(\n                     \"https://rust-analyzer.github.io/manual.html#{}\",\n                     d.code.as_str()\n                 ))"}, {"sha": "f25dc74a142b84e5cd99a90e9efac9aa2d8b9e53", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -2,6 +2,7 @@\n //! Protocol. This module specifically handles requests.\n \n use std::{\n+    fs,\n     io::Write as _,\n     process::{self, Stdio},\n     sync::Arc,\n@@ -29,7 +30,7 @@ use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n-use vfs::{AbsPath, AbsPathBuf};\n+use vfs::{AbsPath, AbsPathBuf, VfsPath};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -38,7 +39,10 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n-    lsp_ext::{self, PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams},\n+    lsp_ext::{\n+        self, CrateInfoResult, FetchDependencyListParams, FetchDependencyListResult,\n+        PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n+    },\n     lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n };\n@@ -1881,3 +1885,52 @@ fn run_rustfmt(\n         Ok(Some(to_proto::text_edit_vec(&line_index, diff(&file, &new_text))))\n     }\n }\n+\n+pub(crate) fn fetch_dependency_list(\n+    state: GlobalStateSnapshot,\n+    _params: FetchDependencyListParams,\n+) -> Result<FetchDependencyListResult> {\n+    let crates = state.analysis.fetch_crates()?;\n+    let crate_infos = crates\n+        .into_iter()\n+        .filter_map(|it| {\n+            let root_file_path = state.file_id_to_file_path(it.root_file_id);\n+            crate_path(root_file_path).and_then(to_url).map(|path| CrateInfoResult {\n+                name: it.name,\n+                version: it.version,\n+                path,\n+            })\n+        })\n+        .collect();\n+    Ok(FetchDependencyListResult { crates: crate_infos })\n+}\n+\n+/// Searches for the directory of a Rust crate given this crate's root file path.\n+///\n+/// # Arguments\n+///\n+/// * `root_file_path`: The path to the root file of the crate.\n+///\n+/// # Returns\n+///\n+/// An `Option` value representing the path to the directory of the crate with the given\n+/// name, if such a crate is found. If no crate with the given name is found, this function\n+/// returns `None`.\n+fn crate_path(root_file_path: VfsPath) -> Option<VfsPath> {\n+    let mut current_dir = root_file_path.parent();\n+    while let Some(path) = current_dir {\n+        let cargo_toml_path = path.join(\"../Cargo.toml\")?;\n+        if fs::metadata(cargo_toml_path.as_path()?).is_ok() {\n+            let crate_path = cargo_toml_path.parent()?;\n+            return Some(crate_path);\n+        }\n+        current_dir = path.parent();\n+    }\n+    None\n+}\n+\n+fn to_url(path: VfsPath) -> Option<Url> {\n+    let path = path.as_path()?;\n+    let str_path = path.as_os_str().to_str()?;\n+    Url::from_file_path(str_path).ok()\n+}"}, {"sha": "69e7d824680fe3e1bb5b5c98d27e4b2c9e91dd6a", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -4,11 +4,11 @@ use std::{collections::HashMap, path::PathBuf};\n \n use ide_db::line_index::WideEncoding;\n use lsp_types::request::Request;\n-use lsp_types::PositionEncodingKind;\n use lsp_types::{\n     notification::Notification, CodeActionKind, DocumentOnTypeFormattingParams,\n     PartialResultParams, Position, Range, TextDocumentIdentifier, WorkDoneProgressParams,\n };\n+use lsp_types::{PositionEncodingKind, Url};\n use serde::{Deserialize, Serialize};\n \n use crate::line_index::PositionEncoding;\n@@ -27,6 +27,31 @@ pub struct AnalyzerStatusParams {\n     pub text_document: Option<TextDocumentIdentifier>,\n }\n \n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct CrateInfoResult {\n+    pub name: Option<String>,\n+    pub version: Option<String>,\n+    pub path: Url,\n+}\n+pub enum FetchDependencyList {}\n+\n+impl Request for FetchDependencyList {\n+    type Params = FetchDependencyListParams;\n+    type Result = FetchDependencyListResult;\n+    const METHOD: &'static str = \"rust-analyzer/fetchDependencyList\";\n+}\n+\n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct FetchDependencyListParams {}\n+\n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct FetchDependencyListResult {\n+    pub crates: Vec<CrateInfoResult>,\n+}\n+\n pub enum MemoryUsage {}\n \n impl Request for MemoryUsage {\n@@ -359,6 +384,7 @@ impl Request for CodeActionRequest {\n }\n \n pub enum CodeActionResolveRequest {}\n+\n impl Request for CodeActionResolveRequest {\n     type Params = CodeAction;\n     type Result = CodeAction;"}, {"sha": "d3cfc5e40d63b0df9126d30a6b1ae9fe84883e9b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -660,6 +660,7 @@ impl GlobalState {\n             .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)\n             .on_sync::<lsp_ext::MatchingBrace>(handlers::handle_matching_brace)\n+            .on::<lsp_ext::FetchDependencyList>(handlers::fetch_dependency_list)\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ViewHir>(handlers::handle_view_hir)"}, {"sha": "d327f2edf14441e04ecefa6d9204324d5e808060", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -107,10 +107,7 @@ impl VfsPath {\n     /// Returns `self`'s base name and file extension.\n     pub fn name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         match &self.0 {\n-            VfsPathRepr::PathBuf(p) => Some((\n-                p.file_stem()?.to_str()?,\n-                p.extension().and_then(|extension| extension.to_str()),\n-            )),\n+            VfsPathRepr::PathBuf(p) => p.name_and_extension(),\n             VfsPathRepr::VirtualPath(p) => p.name_and_extension(),\n         }\n     }"}, {"sha": "a4ad3e5a553ce7200a671c05265ce5e898d443f4", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 31ca513a249753ab\n+lsp_ext.rs hash: fdf1afd34548abbc\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -851,3 +851,26 @@ export interface Diagnostic {\n         rendered?: string;\n     };\n }\n+```\n+\n+## Dependency Tree\n+\n+**Method:** `rust-analyzer/fetchDependencyList`\n+\n+**Request:**\n+\n+```typescript\n+export interface FetchDependencyListParams {}\n+```\n+\n+**Response:** \n+```typescript\n+export interface FetchDependencyListResult {\n+    crates: {\n+        name: string;\n+        version: string;\n+        path: string;\n+    }[];\n+}\n+```\n+Returns all crates from this workspace, so it can be used create a viewTree to help navigate the dependency tree.\n\\ No newline at end of file"}, {"sha": "ca00da9f361ef2727afc072625f2f69c0ee74dd5", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -284,6 +284,14 @@\n                 \"command\": \"rust-analyzer.clearFlycheck\",\n                 \"title\": \"Clear flycheck diagnostics\",\n                 \"category\": \"rust-analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.revealDependency\",\n+                \"title\": \"Reveal File\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.revealDependency\",\n+                \"title\": \"Reveal File\"\n             }\n         ],\n         \"keybindings\": [\n@@ -1956,6 +1964,14 @@\n                 }\n             ]\n         },\n+        \"views\": {\n+            \"explorer\": [\n+                {\n+                    \"id\": \"rustDependencies\",\n+                    \"name\": \"Rust Dependencies\"\n+                }\n+            ]\n+        },\n         \"jsonValidation\": [\n             {\n                 \"fileMatch\": \"rust-project.json\","}, {"sha": "98ccd50dc0406ca1bf54662acd93084f870a07bb", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -8,10 +8,18 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from \"./util\";\n+import {\n+    isRustDocument,\n+    isCargoTomlDocument,\n+    sleep,\n+    isRustEditor,\n+    RustEditor,\n+    RustDocument,\n+} from \"./util\";\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";\n+import { DependencyId } from \"./dependencies_provider\";\n \n export * from \"./ast_inspector\";\n export * from \"./run\";\n@@ -266,6 +274,71 @@ export function openCargoToml(ctx: CtxInit): Cmd {\n     };\n }\n \n+export function revealDependency(ctx: CtxInit): Cmd {\n+    return async (editor: RustEditor) => {\n+        if (!ctx.dependencies?.isInitialized()) {\n+            return;\n+        }\n+        const documentPath = editor.document.uri.fsPath;\n+        const dep = ctx.dependencies?.getDependency(documentPath);\n+        if (dep) {\n+            await ctx.treeView?.reveal(dep, { select: true, expand: true });\n+        } else {\n+            await revealParentChain(editor.document, ctx);\n+        }\n+    };\n+}\n+\n+/**\n+ * This function calculates the parent chain of a given file until it reaches it crate root contained in ctx.dependencies.\n+ * This is need because the TreeView is Lazy, so at first it only has the root dependencies: For example if we have the following crates:\n+ * - core\n+ * - alloc\n+ * - std\n+ *\n+ * if I want to reveal alloc/src/str.rs, I have to:\n+\n+ * 1. reveal every children of alloc\n+ * - core\n+ * - alloc\\\n+ * &emsp;|-beches\\\n+ * &emsp;|-src\\\n+ * &emsp;|- ...\n+ * - std\n+ * 2. reveal every children of src:\n+ * core\n+ * alloc\\\n+ * &emsp;|-beches\\\n+ * &emsp;|-src\\\n+ * &emsp;&emsp;|- lib.rs\\\n+ * &emsp;&emsp;|- str.rs <------- FOUND IT!\\\n+ * &emsp;&emsp;|- ...\\\n+ * &emsp;|- ...\\\n+ * std\n+ */\n+async function revealParentChain(document: RustDocument, ctx: CtxInit) {\n+    let documentPath = document.uri.fsPath;\n+    const maxDepth = documentPath.split(path.sep).length - 1;\n+    const parentChain: DependencyId[] = [{ id: documentPath.toLowerCase() }];\n+    do {\n+        documentPath = path.dirname(documentPath);\n+        parentChain.push({ id: documentPath.toLowerCase() });\n+        if (parentChain.length >= maxDepth) {\n+            // this is an odd case that can happen when we change a crate version but we'd still have\n+            // a open file referencing the old version\n+            return;\n+        }\n+    } while (!ctx.dependencies?.contains(documentPath));\n+    parentChain.reverse();\n+    for (const idx in parentChain) {\n+        await ctx.treeView?.reveal(parentChain[idx], { select: true, expand: true });\n+    }\n+}\n+\n+export async function execRevealDependency(e: RustEditor): Promise<void> {\n+    await vscode.commands.executeCommand(\"rust-analyzer.revealDependency\", e);\n+}\n+\n export function ssr(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;"}, {"sha": "8bed74b88eaa667f61282ff98abff1314b02f9bb", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -7,13 +7,21 @@ import { Config, prepareVSCodeConfig } from \"./config\";\n import { createClient } from \"./client\";\n import {\n     executeDiscoverProject,\n+    isDocumentInWorkspace,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n     log,\n     RustEditor,\n } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n+import {\n+    Dependency,\n+    DependencyFile,\n+    RustDependenciesProvider,\n+    DependencyId,\n+} from \"./dependencies_provider\";\n+import { execRevealDependency } from \"./commands\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n import { ExecOptions } from \"child_process\";\n@@ -84,11 +92,21 @@ export class Ctx {\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n     private unlinkedFiles: vscode.Uri[];\n+    private _dependencies: RustDependenciesProvider | undefined;\n+    private _treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId> | undefined;\n \n     get client() {\n         return this._client;\n     }\n \n+    get treeView() {\n+        return this._treeView;\n+    }\n+\n+    get dependencies() {\n+        return this._dependencies;\n+    }\n+\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n@@ -101,7 +119,6 @@ export class Ctx {\n         this.commandDisposables = [];\n         this.commandFactories = commandFactories;\n         this.unlinkedFiles = [];\n-\n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n \n@@ -246,6 +263,53 @@ export class Ctx {\n         }\n         await client.start();\n         this.updateCommands();\n+        this.prepareTreeDependenciesView(client);\n+    }\n+\n+    private prepareTreeDependenciesView(client: lc.LanguageClient) {\n+        const ctxInit: CtxInit = {\n+            ...this,\n+            client: client,\n+        };\n+        this._dependencies = new RustDependenciesProvider(ctxInit);\n+        this._treeView = vscode.window.createTreeView(\"rustDependencies\", {\n+            treeDataProvider: this._dependencies,\n+            showCollapseAll: true,\n+        });\n+\n+        this.pushExtCleanup(this._treeView);\n+        vscode.window.onDidChangeActiveTextEditor(async (e) => {\n+            // we should skip documents that belong to the current workspace\n+            if (this.shouldRevealDependency(e)) {\n+                try {\n+                    await execRevealDependency(e);\n+                } catch (reason) {\n+                    await vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n+                }\n+            }\n+        });\n+\n+        this.treeView?.onDidChangeVisibility(async (e) => {\n+            if (e.visible) {\n+                const activeEditor = vscode.window.activeTextEditor;\n+                if (this.shouldRevealDependency(activeEditor)) {\n+                    try {\n+                        await execRevealDependency(activeEditor);\n+                    } catch (reason) {\n+                        await vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private shouldRevealDependency(e: vscode.TextEditor | undefined): e is RustEditor {\n+        return (\n+            e !== undefined &&\n+            isRustEditor(e) &&\n+            !isDocumentInWorkspace(e.document) &&\n+            (this.treeView?.visible || false)\n+        );\n     }\n \n     async restart() {\n@@ -348,6 +412,7 @@ export class Ctx {\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n                 statusBar.command = \"rust-analyzer.stopServer\";\n+                this.dependencies?.refresh();\n                 break;\n             case \"warning\":\n                 if (status.message) {\n@@ -410,4 +475,5 @@ export class Ctx {\n export interface Disposable {\n     dispose(): void;\n }\n+\n export type Cmd = (...args: any[]) => unknown;"}, {"sha": "74fbacbb3cd7833a2e3423049ba8d6a1442abb3b", "filename": "editors/code/src/dependencies_provider.ts", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -0,0 +1,144 @@\n+import * as vscode from \"vscode\";\n+import * as fspath from \"path\";\n+import * as fs from \"fs\";\n+import { CtxInit } from \"./ctx\";\n+import * as ra from \"./lsp_ext\";\n+import { FetchDependencyListResult } from \"./lsp_ext\";\n+\n+export class RustDependenciesProvider\n+    implements vscode.TreeDataProvider<Dependency | DependencyFile>\n+{\n+    dependenciesMap: { [id: string]: Dependency | DependencyFile };\n+    ctx: CtxInit;\n+\n+    constructor(ctx: CtxInit) {\n+        this.dependenciesMap = {};\n+        this.ctx = ctx;\n+    }\n+\n+    private _onDidChangeTreeData: vscode.EventEmitter<\n+        Dependency | DependencyFile | undefined | null | void\n+    > = new vscode.EventEmitter<Dependency | undefined | null | void>();\n+\n+    readonly onDidChangeTreeData: vscode.Event<\n+        Dependency | DependencyFile | undefined | null | void\n+    > = this._onDidChangeTreeData.event;\n+\n+    getDependency(filePath: string): Dependency | DependencyFile | undefined {\n+        return this.dependenciesMap[filePath.toLowerCase()];\n+    }\n+\n+    contains(filePath: string): boolean {\n+        return filePath.toLowerCase() in this.dependenciesMap;\n+    }\n+\n+    isInitialized(): boolean {\n+        return Object.keys(this.dependenciesMap).length !== 0;\n+    }\n+\n+    refresh(): void {\n+        this.dependenciesMap = {};\n+        this._onDidChangeTreeData.fire();\n+    }\n+\n+    getParent?(\n+        element: Dependency | DependencyFile\n+    ): vscode.ProviderResult<Dependency | DependencyFile> {\n+        if (element instanceof Dependency) return undefined;\n+        return element.parent;\n+    }\n+\n+    getTreeItem(element: Dependency | DependencyFile): vscode.TreeItem | Thenable<vscode.TreeItem> {\n+        if (element.id! in this.dependenciesMap) return this.dependenciesMap[element.id!];\n+        return element;\n+    }\n+\n+    getChildren(\n+        element?: Dependency | DependencyFile\n+    ): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n+        return new Promise((resolve, _reject) => {\n+            if (!vscode.workspace.workspaceFolders) {\n+                void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n+                return Promise.resolve([]);\n+            }\n+            if (element) {\n+                const files = fs.readdirSync(element.dependencyPath).map((fileName) => {\n+                    const filePath = fspath.join(element.dependencyPath, fileName);\n+                    const collapsibleState = fs.lstatSync(filePath).isDirectory()\n+                        ? vscode.TreeItemCollapsibleState.Collapsed\n+                        : vscode.TreeItemCollapsibleState.None;\n+                    const dep = new DependencyFile(fileName, filePath, element, collapsibleState);\n+                    this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+                    return dep;\n+                });\n+                return resolve(files);\n+            } else {\n+                return resolve(this.getRootDependencies());\n+            }\n+        });\n+    }\n+\n+    private async getRootDependencies(): Promise<Dependency[]> {\n+        const dependenciesResult: FetchDependencyListResult = await this.ctx.client.sendRequest(\n+            ra.fetchDependencyList,\n+            {}\n+        );\n+        const crates = dependenciesResult.crates;\n+\n+        return crates.map((crate) => {\n+            const dep = this.toDep(crate.name || \"unknown\", crate.version || \"\", crate.path);\n+            this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n+            return dep;\n+        });\n+    }\n+\n+    private toDep(moduleName: string, version: string, path: string): Dependency {\n+        return new Dependency(\n+            moduleName,\n+            version,\n+            vscode.Uri.parse(path).fsPath,\n+            vscode.TreeItemCollapsibleState.Collapsed\n+        );\n+    }\n+}\n+\n+export class Dependency extends vscode.TreeItem {\n+    constructor(\n+        public readonly label: string,\n+        private version: string,\n+        readonly dependencyPath: string,\n+        public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+    ) {\n+        super(label, collapsibleState);\n+        this.resourceUri = vscode.Uri.file(dependencyPath);\n+        this.id = this.resourceUri.fsPath.toLowerCase();\n+        this.description = this.version;\n+        if (this.version) {\n+            this.tooltip = `${this.label}-${this.version}`;\n+        } else {\n+            this.tooltip = this.label;\n+        }\n+    }\n+}\n+\n+export class DependencyFile extends vscode.TreeItem {\n+    constructor(\n+        readonly label: string,\n+        readonly dependencyPath: string,\n+        readonly parent: Dependency | DependencyFile,\n+        public readonly collapsibleState: vscode.TreeItemCollapsibleState\n+    ) {\n+        super(vscode.Uri.file(dependencyPath), collapsibleState);\n+        this.id = this.resourceUri!.fsPath.toLowerCase();\n+        const isDir = fs.lstatSync(this.resourceUri!.fsPath).isDirectory();\n+        if (!isDir) {\n+            this.command = {\n+                command: \"vscode.open\",\n+                title: \"Open File\",\n+                arguments: [this.resourceUri],\n+            };\n+        }\n+    }\n+}\n+\n+export type DependencyId = { id: string };"}, {"sha": "b72804e510ce4d8ffe9650090592898a1d3d79d5", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -70,6 +70,38 @@ export const viewItemTree = new lc.RequestType<ViewItemTreeParams, string, void>\n \n export type AnalyzerStatusParams = { textDocument?: lc.TextDocumentIdentifier };\n \n+export interface FetchDependencyListParams {}\n+\n+export interface FetchDependencyListResult {\n+    crates: {\n+        name: string | undefined;\n+        version: string | undefined;\n+        path: string;\n+    }[];\n+}\n+\n+export const fetchDependencyList = new lc.RequestType<\n+    FetchDependencyListParams,\n+    FetchDependencyListResult,\n+    void\n+>(\"rust-analyzer/fetchDependencyList\");\n+\n+export interface FetchDependencyGraphParams {}\n+\n+export interface FetchDependencyGraphResult {\n+    crates: {\n+        name: string;\n+        version: string;\n+        path: string;\n+    }[];\n+}\n+\n+export const fetchDependencyGraph = new lc.RequestType<\n+    FetchDependencyGraphParams,\n+    FetchDependencyGraphResult,\n+    void\n+>(\"rust-analyzer/fetchDependencyGraph\");\n+\n export type ExpandMacroParams = {\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position;"}, {"sha": "be9bc9d363ce6635d40c5be5a8cf1ac6b0a8ffd6", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -190,5 +190,6 @@ function createCommands(): Record<string, CommandFactory> {\n         showReferences: { enabled: commands.showReferences },\n         triggerParameterHints: { enabled: commands.triggerParameterHints },\n         openLogs: { enabled: commands.openLogs },\n+        revealDependency: { enabled: commands.revealDependency },\n     };\n }"}, {"sha": "b6b779e2660132ab8cfd54ef127edef756e8c1cd", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a48e0e14e15abf47feae17e54d149eb443729375/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=a48e0e14e15abf47feae17e54d149eb443729375", "patch": "@@ -112,6 +112,19 @@ export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }\n \n+export function isDocumentInWorkspace(document: RustDocument): boolean {\n+    const workspaceFolders = vscode.workspace.workspaceFolders;\n+    if (!workspaceFolders) {\n+        return false;\n+    }\n+    for (const folder of workspaceFolders) {\n+        if (document.uri.fsPath.startsWith(folder.uri.fsPath)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n export function isValidExecutable(path: string): boolean {\n     log.debug(\"Checking availability of a binary at\", path);\n "}]}