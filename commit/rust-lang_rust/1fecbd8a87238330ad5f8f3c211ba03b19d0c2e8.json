{"sha": "1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZWNiZDhhODcyMzgzMzBhZDVmOGYzYzIxMWJhMDNiMTlkMGMyZTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T07:42:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T07:42:08Z"}, "message": "macos does not have pthread_condattr_setclock/getclock", "tree": {"sha": "db2f34d46d1f822c2be993cc9d174e039a2ae6d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db2f34d46d1f822c2be993cc9d174e039a2ae6d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "html_url": "https://github.com/rust-lang/rust/commit/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe030dea4e777c6861e0e9e3704fc0b952576ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe030dea4e777c6861e0e9e3704fc0b952576ad", "html_url": "https://github.com/rust-lang/rust/commit/bfe030dea4e777c6861e0e9e3704fc0b952576ad"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1652a3a1b5454c5e4c870052af20ab3a73c07fdc", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "patch": "@@ -335,16 +335,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.pthread_condattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"pthread_condattr_setclock\" => {\n-                let &[attr, clock_id] = check_arg_count(args)?;\n-                let result = this.pthread_condattr_setclock(attr, clock_id)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n-            \"pthread_condattr_getclock\" => {\n-                let &[attr, clock_id] = check_arg_count(args)?;\n-                let result = this.pthread_condattr_getclock(attr, clock_id)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n             \"pthread_condattr_destroy\" => {\n                 let &[attr] = check_arg_count(args)?;\n                 let result = this.pthread_condattr_destroy(attr)?;"}, {"sha": "323418f39ba0231e5b4d442a469096a07314775d", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=1fecbd8a87238330ad5f8f3c211ba03b19d0c2e8", "patch": "@@ -90,6 +90,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.prctl(option, arg2, arg3, arg4, arg5)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"pthread_condattr_setclock\" => {\n+                let &[attr, clock_id] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_setclock(attr, clock_id)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+            \"pthread_condattr_getclock\" => {\n+                let &[attr, clock_id] = check_arg_count(args)?;\n+                let result = this.pthread_condattr_getclock(attr, clock_id)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Dynamically invoked syscalls\n             \"syscall\" => {"}]}