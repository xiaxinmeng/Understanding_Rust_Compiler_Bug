{"sha": "f459d2ed99f446a95dff044b980582895bd8782a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTlkMmVkOTlmNDQ2YTk1ZGZmMDQ0Yjk4MDU4Mjg5NWJkODc4MmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T10:51:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T10:51:04Z"}, "message": "Rollup merge of #69422 - JohnTitor:remove-unwrap, r=Xanewok\n\nRemove use of `unwrap()` from save-analysis\n\nFix #69409, fix #69416", "tree": {"sha": "3f2ad7be617da853a0cdb7393c92896ec10510a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2ad7be617da853a0cdb7393c92896ec10510a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f459d2ed99f446a95dff044b980582895bd8782a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZM4ZCRBK7hj4Ov3rIwAAdHIIAGwu5iITH+tjHgIz2t8mtTQl\nvGyMHwUL4VVuCAvCEaPvdVVOCG4RL42GSyuT2eEXEKADwzIlH04qt08x2YR7eyMZ\nyLH7dBJqJDwXnhLFXoym6u53ZsE13K2Z/+cYAJmW3+YhLkjV+eDg/15Pwh/Jwgh+\nlBjUt0xf85Ob2Khe8YJnJSv735y499hW8Jw+PIysLrR9U4PWwrBjyF/v+qQcMTFz\n66vf6Xm7T8UTp+dB8yQsP53qedyj/1GJmpnr8Cqa/cf0qhOysezxj3CjuBd5hmZs\n3sj+sZLR2uSGrB9FBoEAngYiA5AUuG8mNuZZ5jKcG61jYjFCIk2s566F7AtQwNg=\n=AP1N\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f2ad7be617da853a0cdb7393c92896ec10510a4\nparent f943349eafaa75a60c05b0c84dcdb771d0eae8c9\nparent 5307edce6faa5c675dc57a1dd3b4fdcbf1ebdc7d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583664664 +0100\ncommitter GitHub <noreply@github.com> 1583664664 +0100\n\nRollup merge of #69422 - JohnTitor:remove-unwrap, r=Xanewok\n\nRemove use of `unwrap()` from save-analysis\n\nFix #69409, fix #69416\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f459d2ed99f446a95dff044b980582895bd8782a", "html_url": "https://github.com/rust-lang/rust/commit/f459d2ed99f446a95dff044b980582895bd8782a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f459d2ed99f446a95dff044b980582895bd8782a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "html_url": "https://github.com/rust-lang/rust/commit/f943349eafaa75a60c05b0c84dcdb771d0eae8c9"}, {"sha": "5307edce6faa5c675dc57a1dd3b4fdcbf1ebdc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5307edce6faa5c675dc57a1dd3b4fdcbf1ebdc7d", "html_url": "https://github.com/rust-lang/rust/commit/5307edce6faa5c675dc57a1dd3b4fdcbf1ebdc7d"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "88bfe7661e20320938047bb94898fe2dba7874c6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f459d2ed99f446a95dff044b980582895bd8782a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459d2ed99f446a95dff044b980582895bd8782a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f459d2ed99f446a95dff044b980582895bd8782a", "patch": "@@ -532,13 +532,16 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 match self.tables.expr_ty_adjusted(&hir_node).kind {\n                     ty::Adt(def, _) if !def.is_enum() => {\n                         let variant = &def.non_enum_variant();\n-                        let index = self.tcx.find_field_index(ident, variant).unwrap();\n                         filter!(self.span_utils, ident.span);\n                         let span = self.span_from_span(ident.span);\n                         return Some(Data::RefData(Ref {\n                             kind: RefKind::Variable,\n                             span,\n-                            ref_id: id_from_def_id(variant.fields[index].did),\n+                            ref_id: self\n+                                .tcx\n+                                .find_field_index(ident, variant)\n+                                .map(|index| id_from_def_id(variant.fields[index].did))\n+                                .unwrap_or_else(|| null_id()),\n                         }));\n                     }\n                     ty::Tuple(..) => None,"}, {"sha": "95f066c382c8d8d00b5b084e4f286411c644a286", "filename": "src/test/ui/assign-to-method.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,22 +0,0 @@\n-struct Cat {\n-  meows : usize,\n-\n-  how_hungry : isize,\n-}\n-\n-impl Cat {\n-    pub fn speak(&self) { self.meows += 1; }\n-}\n-\n-fn cat(in_x : usize, in_y : isize) -> Cat {\n-    Cat {\n-        meows: in_x,\n-        how_hungry: in_y\n-    }\n-}\n-\n-fn main() {\n-  let nyan : Cat = cat(52, 99);\n-  nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n-  nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n-}"}, {"sha": "3494df37fe7f107f2a50543fc904a5b3c320569b", "filename": "src/test/ui/issues/issue-3763.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.rs?ref=f459d2ed99f446a95dff044b980582895bd8782a", "patch": "@@ -1,3 +1,6 @@\n+// compile-flags: -Zsave-analysis\n+// Also regression test for #69416\n+\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: isize"}, {"sha": "873f69d390e678fe504ee01a0032b03434080edb", "filename": "src/test/ui/issues/issue-3763.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr?ref=f459d2ed99f446a95dff044b980582895bd8782a", "patch": "@@ -1,29 +1,29 @@\n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:15:19\n+  --> $DIR/issue-3763.rs:18:19\n    |\n LL |     let _woohoo = (&my_struct).priv_field;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:18:19\n+  --> $DIR/issue-3763.rs:21:19\n    |\n LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0624]: method `happyfun` is private\n-  --> $DIR/issue-3763.rs:21:18\n+  --> $DIR/issue-3763.rs:24:18\n    |\n LL |     (&my_struct).happyfun();\n    |                  ^^^^^^^^\n \n error[E0624]: method `happyfun` is private\n-  --> $DIR/issue-3763.rs:23:27\n+  --> $DIR/issue-3763.rs:26:27\n    |\n LL |     (Box::new(my_struct)).happyfun();\n    |                           ^^^^^^^^\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:24:16\n+  --> $DIR/issue-3763.rs:27:16\n    |\n LL |     let nope = my_struct.priv_field;\n    |                ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "85beaee8df0a18d68dd844089c41d6d720bb2500", "filename": "src/test/ui/methods/assign-to-method.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.rs?ref=f459d2ed99f446a95dff044b980582895bd8782a", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zsave-analysis\n+// Also regression test for #69409\n+\n+struct Cat {\n+    meows : usize,\n+    how_hungry : isize,\n+}\n+\n+impl Cat {\n+    pub fn speak(&self) { self.meows += 1; }\n+}\n+\n+fn cat(in_x : usize, in_y : isize) -> Cat {\n+    Cat {\n+        meows: in_x,\n+        how_hungry: in_y\n+    }\n+}\n+\n+fn main() {\n+    let nyan : Cat = cat(52, 99);\n+    nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+    nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n+}"}, {"sha": "c0dd529b6818ff9c7d9e3f02ece636c7fe8c9ca1", "filename": "src/test/ui/methods/assign-to-method.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f459d2ed99f446a95dff044b980582895bd8782a/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr?ref=f459d2ed99f446a95dff044b980582895bd8782a", "patch": "@@ -1,16 +1,16 @@\n error[E0615]: attempted to take value of method `speak` on type `Cat`\n-  --> $DIR/assign-to-method.rs:20:8\n+  --> $DIR/assign-to-method.rs:22:10\n    |\n-LL |   nyan.speak = || println!(\"meow\");\n-   |        ^^^^^\n+LL |     nyan.speak = || println!(\"meow\");\n+   |          ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to\n \n error[E0615]: attempted to take value of method `speak` on type `Cat`\n-  --> $DIR/assign-to-method.rs:21:8\n+  --> $DIR/assign-to-method.rs:23:10\n    |\n-LL |   nyan.speak += || println!(\"meow\");\n-   |        ^^^^^\n+LL |     nyan.speak += || println!(\"meow\");\n+   |          ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to\n ", "previous_filename": "src/test/ui/assign-to-method.stderr"}]}