{"sha": "e8ebc902e8973700002bd0e9e7e366f3244be948", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZWJjOTAyZTg5NzM3MDAwMDJiZDBlOWU3ZTM2NmYzMjQ0YmU5NDg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-04T10:38:48Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-16T13:53:27Z"}, "message": "Migrated some code out of `dataflow::drop_flag_effects` and into its parent module.\n\n(This code is more general purpose than just supporting drop flag elaboration.)", "tree": {"sha": "dcbe9de4674cb24b5851a0cb0f1df4fa63f8f957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbe9de4674cb24b5851a0cb0f1df4fa63f8f957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ebc902e8973700002bd0e9e7e366f3244be948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ebc902e8973700002bd0e9e7e366f3244be948", "html_url": "https://github.com/rust-lang/rust/commit/e8ebc902e8973700002bd0e9e7e366f3244be948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ebc902e8973700002bd0e9e7e366f3244be948/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6ef669d607928078ab931120386c22bdb907bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6ef669d607928078ab931120386c22bdb907bc", "html_url": "https://github.com/rust-lang/rust/commit/9f6ef669d607928078ab931120386c22bdb907bc"}], "stats": {"total": 145, "additions": 71, "deletions": 74}, "files": [{"sha": "bd41bce67da8ead21670beefeba21af6ba57b5a3", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 2, "deletions": 70, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e8ebc902e8973700002bd0e9e7e366f3244be948/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ebc902e8973700002bd0e9e7e366f3244be948/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=e8ebc902e8973700002bd0e9e7e366f3244be948", "patch": "@@ -8,84 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast::{self, MetaItem};\n use syntax_pos::DUMMY_SP;\n \n-\n-use rustc::mir::{self, Mir, BasicBlock, Location};\n-use rustc::session::Session;\n+use rustc::mir::{self, Mir, Location};\n use rustc::ty::{self, TyCtxt};\n use util::elaborate_drops::DropFlagState;\n-use rustc_data_structures::indexed_set::{IdxSet};\n-\n-use std::fmt;\n \n-use super::{Dataflow, DataflowBuilder, DataflowAnalysis};\n-use super::{BitDenotation, DataflowOperator, DataflowResults};\n+use super::{MoveDataParamEnv};\n use super::indexes::MovePathIndex;\n use super::move_paths::{MoveData, LookupResult};\n \n-pub(crate) fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> {\n-    for attr in attrs {\n-        if attr.check_name(\"rustc_mir\") {\n-            let items = attr.meta_item_list();\n-            for item in items.iter().flat_map(|l| l.iter()) {\n-                match item.meta_item() {\n-                    Some(mi) if mi.check_name(name) => return Some(mi.clone()),\n-                    _ => continue\n-                }\n-            }\n-        }\n-    }\n-    return None;\n-}\n-\n-pub struct MoveDataParamEnv<'tcx> {\n-    pub(crate) move_data: MoveData<'tcx>,\n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n-}\n-\n-pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                mir: &Mir<'tcx>,\n-                                node_id: ast::NodeId,\n-                                attributes: &[ast::Attribute],\n-                                dead_unwinds: &IdxSet<BasicBlock>,\n-                                bd: BD,\n-                                p: P)\n-                                -> DataflowResults<BD>\n-    where BD: BitDenotation<Idx=MovePathIndex> + DataflowOperator,\n-          P: Fn(&BD, BD::Idx) -> &fmt::Debug\n-{\n-    let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n-        if let Some(item) = has_rustc_mir_with(attrs, name) {\n-            if let Some(s) = item.value_str() {\n-                return Some(s.to_string())\n-            } else {\n-                sess.span_err(\n-                    item.span,\n-                    &format!(\"{} attribute requires a path\", item.name()));\n-                return None;\n-            }\n-        }\n-        return None;\n-    };\n-\n-    let print_preflow_to =\n-        name_found(tcx.sess, attributes, \"borrowck_graphviz_preflow\");\n-    let print_postflow_to =\n-        name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n-\n-    let mut mbcx = DataflowBuilder {\n-        node_id,\n-        print_preflow_to,\n-        print_postflow_to,\n-        flow_state: DataflowAnalysis::new(tcx, mir, dead_unwinds, bd),\n-    };\n-\n-    mbcx.dataflow(p);\n-    mbcx.flow_state.results()\n-}\n-\n pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n                                         path: MovePathIndex,\n                                         mut cond: F)"}, {"sha": "eb040284cfa33e473716baf71d2e529c55610db7", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e8ebc902e8973700002bd0e9e7e366f3244be948/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ebc902e8973700002bd0e9e7e366f3244be948/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e8ebc902e8973700002bd0e9e7e366f3244be948", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast;\n+use syntax::ast::{self, MetaItem};\n \n use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n \n-use rustc::ty::{TyCtxt};\n-use rustc::mir::{self, Mir, Location};\n+use rustc::ty::{self, TyCtxt};\n+use rustc::mir::{self, Mir, BasicBlock, Location};\n+use rustc::session::Session;\n \n-use std::fmt::Debug;\n+use std::fmt::{self, Debug};\n use std::io;\n use std::mem;\n use std::path::PathBuf;\n@@ -28,6 +29,9 @@ pub use self::impls::{DefinitelyInitializedLvals, MovingOutStatements};\n pub use self::impls::borrows::{Borrows, BorrowData, BorrowIndex};\n pub(crate) use self::drop_flag_effects::*;\n \n+use self::move_paths::MoveData;\n+use self::indexes::MovePathIndex;\n+\n mod drop_flag_effects;\n mod graphviz;\n mod impls;\n@@ -58,6 +62,67 @@ impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD>\n     }\n }\n \n+pub(crate) fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> {\n+    for attr in attrs {\n+        if attr.check_name(\"rustc_mir\") {\n+            let items = attr.meta_item_list();\n+            for item in items.iter().flat_map(|l| l.iter()) {\n+                match item.meta_item() {\n+                    Some(mi) if mi.check_name(name) => return Some(mi.clone()),\n+                    _ => continue\n+                }\n+            }\n+        }\n+    }\n+    return None;\n+}\n+\n+pub struct MoveDataParamEnv<'tcx> {\n+    pub(crate) move_data: MoveData<'tcx>,\n+    pub(crate) param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                mir: &Mir<'tcx>,\n+                                node_id: ast::NodeId,\n+                                attributes: &[ast::Attribute],\n+                                dead_unwinds: &IdxSet<BasicBlock>,\n+                                bd: BD,\n+                                p: P)\n+                                -> DataflowResults<BD>\n+    where BD: BitDenotation<Idx=MovePathIndex> + DataflowOperator,\n+          P: Fn(&BD, BD::Idx) -> &fmt::Debug\n+{\n+    let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n+        if let Some(item) = has_rustc_mir_with(attrs, name) {\n+            if let Some(s) = item.value_str() {\n+                return Some(s.to_string())\n+            } else {\n+                sess.span_err(\n+                    item.span,\n+                    &format!(\"{} attribute requires a path\", item.name()));\n+                return None;\n+            }\n+        }\n+        return None;\n+    };\n+\n+    let print_preflow_to =\n+        name_found(tcx.sess, attributes, \"borrowck_graphviz_preflow\");\n+    let print_postflow_to =\n+        name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n+\n+    let mut mbcx = DataflowBuilder {\n+        node_id,\n+        print_preflow_to,\n+        print_postflow_to,\n+        flow_state: DataflowAnalysis::new(tcx, mir, dead_unwinds, bd),\n+    };\n+\n+    mbcx.dataflow(p);\n+    mbcx.flow_state.results()\n+}\n+\n struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>\n     where O: 'b + BitDenotation\n {"}]}