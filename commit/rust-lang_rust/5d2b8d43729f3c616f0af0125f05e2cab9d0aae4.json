{"sha": "5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMmI4ZDQzNzI5ZjNjNjE2ZjBhZjAxMjVmMDVlMmNhYjlkMGFhZTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-29T19:00:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-30T21:23:45Z"}, "message": "std: Remove PlatformThread spawn mode. Obsolete", "tree": {"sha": "d15b0a2d4408137619a1b39b5e682bda5e048112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15b0a2d4408137619a1b39b5e682bda5e048112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "html_url": "https://github.com/rust-lang/rust/commit/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8", "html_url": "https://github.com/rust-lang/rust/commit/85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8"}], "stats": {"total": 68, "additions": 2, "deletions": 66}, "files": [{"sha": "c14926ba5a4dee3ee61f67a47e98735fe452f23b", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "patch": "@@ -96,13 +96,6 @@ pub enum SchedMode {\n     CurrentScheduler,\n     /// Run task on a specific scheduler\n     ExistingScheduler(Scheduler),\n-    /**\n-     * Tasks are scheduled on the main OS thread\n-     *\n-     * The main OS thread is the thread used to launch the runtime which,\n-     * in most cases, is the process's initial thread as created by the OS.\n-     */\n-    PlatformThread,\n     /// All tasks run in the same OS thread\n     SingleThreaded,\n }\n@@ -1094,17 +1087,6 @@ fn test_avoid_copying_the_body_unlinked() {\n     }\n }\n \n-#[test]\n-fn test_platform_thread() {\n-    let (po, ch) = stream();\n-    let mut builder = task();\n-    builder.sched_mode(PlatformThread);\n-    do builder.spawn {\n-        ch.send(());\n-    }\n-    po.recv();\n-}\n-\n #[test]\n #[ignore(cfg(windows))]\n #[should_fail]"}, {"sha": "1e4d781c5d248751d8b9637a02f54af040ca5bc6", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b8d43729f3c616f0af0125f05e2cab9d0aae4/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=5d2b8d43729f3c616f0af0125f05e2cab9d0aae4", "patch": "@@ -84,7 +84,7 @@ use local_data;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;\n use task::rt;\n-use task::{Failure, PlatformThread, SchedOpts, SingleThreaded};\n+use task::{Failure, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult};\n use task::{ExistingScheduler, SchedulerHandle};\n use task::unkillable;\n@@ -808,16 +808,14 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n         let num_threads = match opts.mode {\n             DefaultScheduler\n             | CurrentScheduler\n-            | ExistingScheduler(*)\n-            | PlatformThread => 0u, /* Won't be used */\n+            | ExistingScheduler(*) => 0u, /* Won't be used */\n             SingleThreaded => 1u,\n         };\n \n         unsafe {\n             let sched_id = match opts.mode {\n                 CurrentScheduler => rt::rust_get_sched_id(),\n                 ExistingScheduler(SchedulerHandle(id)) => id,\n-                PlatformThread => rt::rust_osmain_sched_id(),\n                 _ => rt::rust_new_sched(num_threads)\n             };\n             rt::rust_new_task_in_sched(sched_id)"}, {"sha": "8569cd30cf5133592d1a2812e07c31a018aafeaa", "filename": "src/test/run-pass/platform_thread.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplatform_thread.rs?ref=85fd75ac47a2a70ac9ccdddbe2d1de6425e99be8", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Jump back and forth between the OS main thread and a new scheduler.\n-// The OS main scheduler should continue to be available and not terminate\n-// while it is not in use.\n-\n-use std::task;\n-\n-pub fn main() {\n-    run(100);\n-}\n-\n-fn run(i: int) {\n-\n-    info!(i);\n-\n-    if i == 0 {\n-        return;\n-    }\n-\n-    let mut builder = task::task();\n-    builder.sched_mode(task::PlatformThread);\n-    builder.unlinked();\n-    do builder.spawn {\n-        task::yield();\n-        let mut builder = task::task();\n-        builder.sched_mode(task::SingleThreaded);\n-        builder.unlinked();\n-        do builder.spawn {\n-            task::yield();\n-            run(i - 1);\n-            task::yield();\n-        }\n-        task::yield();\n-    }\n-}"}]}