{"sha": "8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWM1Nzg1ZDU4ZjQzNWQyZDZlNmU0MDhlMjBjNWMwYjAyYThlNDE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-10T00:05:50Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-10T04:58:14Z"}, "message": "Remove needless `pub`s", "tree": {"sha": "e6f59619078128537254a939bfafa2147880950e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f59619078128537254a939bfafa2147880950e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41", "html_url": "https://github.com/rust-lang/rust/commit/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed8d70ac5177e6f378d08318f77499231e24e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed8d70ac5177e6f378d08318f77499231e24e32", "html_url": "https://github.com/rust-lang/rust/commit/eed8d70ac5177e6f378d08318f77499231e24e32"}], "stats": {"total": 162, "additions": 81, "deletions": 81}, "files": [{"sha": "40f6fddf10970aa93e409fe07f7f493e37568ca4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8d5c5785d58f435d2d6e6e408e20c5c0b02a8e41", "patch": "@@ -138,18 +138,18 @@ impl<'a> LoweringContext<'a> {\n     }\n }\n \n-pub fn lower_ident(_lctx: &mut LoweringContext, ident: Ident) -> hir::Ident {\n+fn lower_ident(_lctx: &mut LoweringContext, ident: Ident) -> hir::Ident {\n     hir::Ident {\n         name: mtwt::resolve(ident),\n         unhygienic_name: ident.name,\n     }\n }\n \n-pub fn lower_attrs(_lctx: &mut LoweringContext, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n+fn lower_attrs(_lctx: &mut LoweringContext, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n     attrs.clone().into()\n }\n \n-pub fn lower_view_path(lctx: &mut LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n+fn lower_view_path(lctx: &mut LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n     P(Spanned {\n         node: match view_path.node {\n             ViewPathSimple(ident, ref path) => {\n@@ -186,7 +186,7 @@ fn lower_path_list_item(path_list_ident: &PathListItem) -> hir::PathListItem {\n     }\n }\n \n-pub fn lower_arm(lctx: &mut LoweringContext, arm: &Arm) -> hir::Arm {\n+fn lower_arm(lctx: &mut LoweringContext, arm: &Arm) -> hir::Arm {\n     hir::Arm {\n         attrs: lower_attrs(lctx, &arm.attrs),\n         pats: arm.pats.iter().map(|x| lower_pat(lctx, x)).collect(),\n@@ -195,7 +195,7 @@ pub fn lower_arm(lctx: &mut LoweringContext, arm: &Arm) -> hir::Arm {\n     }\n }\n \n-pub fn lower_decl(lctx: &mut LoweringContext, d: &Decl) -> P<hir::Decl> {\n+fn lower_decl(lctx: &mut LoweringContext, d: &Decl) -> P<hir::Decl> {\n     match d.node {\n         DeclKind::Local(ref l) => P(Spanned {\n             node: hir::DeclLocal(lower_local(lctx, l)),\n@@ -208,7 +208,7 @@ pub fn lower_decl(lctx: &mut LoweringContext, d: &Decl) -> P<hir::Decl> {\n     }\n }\n \n-pub fn lower_ty_binding(lctx: &mut LoweringContext, b: &TypeBinding) -> hir::TypeBinding {\n+fn lower_ty_binding(lctx: &mut LoweringContext, b: &TypeBinding) -> hir::TypeBinding {\n     hir::TypeBinding {\n         id: b.id,\n         name: b.ident.name,\n@@ -217,7 +217,7 @@ pub fn lower_ty_binding(lctx: &mut LoweringContext, b: &TypeBinding) -> hir::Typ\n     }\n }\n \n-pub fn lower_ty(lctx: &mut LoweringContext, t: &Ty) -> P<hir::Ty> {\n+fn lower_ty(lctx: &mut LoweringContext, t: &Ty) -> P<hir::Ty> {\n     use syntax::ast::TyKind::*;\n     P(hir::Ty {\n         id: t.id,\n@@ -267,14 +267,14 @@ pub fn lower_ty(lctx: &mut LoweringContext, t: &Ty) -> P<hir::Ty> {\n     })\n }\n \n-pub fn lower_foreign_mod(lctx: &mut LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n+fn lower_foreign_mod(lctx: &mut LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n     hir::ForeignMod {\n         abi: fm.abi,\n         items: fm.items.iter().map(|x| lower_foreign_item(lctx, x)).collect(),\n     }\n }\n \n-pub fn lower_variant(lctx: &mut LoweringContext, v: &Variant) -> hir::Variant {\n+fn lower_variant(lctx: &mut LoweringContext, v: &Variant) -> hir::Variant {\n     Spanned {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n@@ -289,7 +289,7 @@ pub fn lower_variant(lctx: &mut LoweringContext, v: &Variant) -> hir::Variant {\n // Path segments are usually unhygienic, hygienic path segments can occur only in\n // identifier-like paths originating from `ExprPath`.\n // Make life simpler for rustc_resolve by renaming only such segments.\n-pub fn lower_path_full(lctx: &mut LoweringContext, p: &Path, maybe_hygienic: bool) -> hir::Path {\n+fn lower_path_full(lctx: &mut LoweringContext, p: &Path, maybe_hygienic: bool) -> hir::Path {\n     let maybe_hygienic = maybe_hygienic && !p.global && p.segments.len() == 1;\n     hir::Path {\n         global: p.global,\n@@ -310,13 +310,13 @@ pub fn lower_path_full(lctx: &mut LoweringContext, p: &Path, maybe_hygienic: boo\n     }\n }\n \n-pub fn lower_path(lctx: &mut LoweringContext, p: &Path) -> hir::Path {\n+fn lower_path(lctx: &mut LoweringContext, p: &Path) -> hir::Path {\n     lower_path_full(lctx, p, false)\n }\n \n-pub fn lower_path_parameters(lctx: &mut LoweringContext,\n-                             path_parameters: &PathParameters)\n-                             -> hir::PathParameters {\n+fn lower_path_parameters(lctx: &mut LoweringContext,\n+                         path_parameters: &PathParameters)\n+                         -> hir::PathParameters {\n     match *path_parameters {\n         PathParameters::AngleBracketed(ref data) =>\n             hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(lctx, data)),\n@@ -325,9 +325,9 @@ pub fn lower_path_parameters(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_angle_bracketed_parameter_data(lctx: &mut LoweringContext,\n-                                            data: &AngleBracketedParameterData)\n-                                            -> hir::AngleBracketedParameterData {\n+fn lower_angle_bracketed_parameter_data(lctx: &mut LoweringContext,\n+                                        data: &AngleBracketedParameterData)\n+                                        -> hir::AngleBracketedParameterData {\n     let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings } = data;\n     hir::AngleBracketedParameterData {\n         lifetimes: lower_lifetimes(lctx, lifetimes),\n@@ -336,9 +336,9 @@ pub fn lower_angle_bracketed_parameter_data(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_parenthesized_parameter_data(lctx: &mut LoweringContext,\n-                                          data: &ParenthesizedParameterData)\n-                                          -> hir::ParenthesizedParameterData {\n+fn lower_parenthesized_parameter_data(lctx: &mut LoweringContext,\n+                                      data: &ParenthesizedParameterData)\n+                                      -> hir::ParenthesizedParameterData {\n     let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n     hir::ParenthesizedParameterData {\n         inputs: inputs.iter().map(|ty| lower_ty(lctx, ty)).collect(),\n@@ -347,7 +347,7 @@ pub fn lower_parenthesized_parameter_data(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_local(lctx: &mut LoweringContext, l: &Local) -> P<hir::Local> {\n+fn lower_local(lctx: &mut LoweringContext, l: &Local) -> P<hir::Local> {\n     P(hir::Local {\n         id: l.id,\n         ty: l.ty.as_ref().map(|t| lower_ty(lctx, t)),\n@@ -358,9 +358,9 @@ pub fn lower_local(lctx: &mut LoweringContext, l: &Local) -> P<hir::Local> {\n     })\n }\n \n-pub fn lower_explicit_self_underscore(lctx: &mut LoweringContext,\n-                                      es: &SelfKind)\n-                                      -> hir::ExplicitSelf_ {\n+fn lower_explicit_self_underscore(lctx: &mut LoweringContext,\n+                                  es: &SelfKind)\n+                                  -> hir::ExplicitSelf_ {\n     match *es {\n         SelfKind::Static => hir::SelfStatic,\n         SelfKind::Value(v) => hir::SelfValue(v.name),\n@@ -375,29 +375,29 @@ pub fn lower_explicit_self_underscore(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_mutability(_lctx: &mut LoweringContext, m: Mutability) -> hir::Mutability {\n+fn lower_mutability(_lctx: &mut LoweringContext, m: Mutability) -> hir::Mutability {\n     match m {\n         Mutability::Mutable => hir::MutMutable,\n         Mutability::Immutable => hir::MutImmutable,\n     }\n }\n \n-pub fn lower_explicit_self(lctx: &mut LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n+fn lower_explicit_self(lctx: &mut LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n     Spanned {\n         node: lower_explicit_self_underscore(lctx, &s.node),\n         span: s.span,\n     }\n }\n \n-pub fn lower_arg(lctx: &mut LoweringContext, arg: &Arg) -> hir::Arg {\n+fn lower_arg(lctx: &mut LoweringContext, arg: &Arg) -> hir::Arg {\n     hir::Arg {\n         id: arg.id,\n         pat: lower_pat(lctx, &arg.pat),\n         ty: lower_ty(lctx, &arg.ty),\n     }\n }\n \n-pub fn lower_fn_decl(lctx: &mut LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n+fn lower_fn_decl(lctx: &mut LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     P(hir::FnDecl {\n         inputs: decl.inputs.iter().map(|x| lower_arg(lctx, x)).collect(),\n         output: match decl.output {\n@@ -409,7 +409,7 @@ pub fn lower_fn_decl(lctx: &mut LoweringContext, decl: &FnDecl) -> P<hir::FnDecl\n     })\n }\n \n-pub fn lower_ty_param_bound(lctx: &mut LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n+fn lower_ty_param_bound(lctx: &mut LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ref ty, modifier) => {\n             hir::TraitTyParamBound(lower_poly_trait_ref(lctx, ty),\n@@ -421,7 +421,7 @@ pub fn lower_ty_param_bound(lctx: &mut LoweringContext, tpb: &TyParamBound) -> h\n     }\n }\n \n-pub fn lower_ty_param(lctx: &mut LoweringContext, tp: &TyParam) -> hir::TyParam {\n+fn lower_ty_param(lctx: &mut LoweringContext, tp: &TyParam) -> hir::TyParam {\n     hir::TyParam {\n         id: tp.id,\n         name: tp.ident.name,\n@@ -431,53 +431,53 @@ pub fn lower_ty_param(lctx: &mut LoweringContext, tp: &TyParam) -> hir::TyParam\n     }\n }\n \n-pub fn lower_ty_params(lctx: &mut LoweringContext,\n-                       tps: &P<[TyParam]>)\n-                       -> hir::HirVec<hir::TyParam> {\n+fn lower_ty_params(lctx: &mut LoweringContext,\n+                   tps: &P<[TyParam]>)\n+                   -> hir::HirVec<hir::TyParam> {\n     tps.iter().map(|tp| lower_ty_param(lctx, tp)).collect()\n }\n \n-pub fn lower_lifetime(_lctx: &mut LoweringContext, l: &Lifetime) -> hir::Lifetime {\n+fn lower_lifetime(_lctx: &mut LoweringContext, l: &Lifetime) -> hir::Lifetime {\n     hir::Lifetime {\n         id: l.id,\n         name: l.name,\n         span: l.span,\n     }\n }\n \n-pub fn lower_lifetime_def(lctx: &mut LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n+fn lower_lifetime_def(lctx: &mut LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n     hir::LifetimeDef {\n         lifetime: lower_lifetime(lctx, &l.lifetime),\n         bounds: lower_lifetimes(lctx, &l.bounds),\n     }\n }\n \n-pub fn lower_lifetimes(lctx: &mut LoweringContext, lts: &Vec<Lifetime>)\n+fn lower_lifetimes(lctx: &mut LoweringContext, lts: &Vec<Lifetime>)\n                        -> hir::HirVec<hir::Lifetime> {\n     lts.iter().map(|l| lower_lifetime(lctx, l)).collect()\n }\n \n-pub fn lower_lifetime_defs(lctx: &mut LoweringContext,\n-                           lts: &Vec<LifetimeDef>)\n-                           -> hir::HirVec<hir::LifetimeDef> {\n+fn lower_lifetime_defs(lctx: &mut LoweringContext,\n+                       lts: &Vec<LifetimeDef>)\n+                       -> hir::HirVec<hir::LifetimeDef> {\n     lts.iter().map(|l| lower_lifetime_def(lctx, l)).collect()\n }\n \n-pub fn lower_opt_lifetime(lctx: &mut LoweringContext,\n-                          o_lt: &Option<Lifetime>)\n-                          -> Option<hir::Lifetime> {\n+fn lower_opt_lifetime(lctx: &mut LoweringContext,\n+                      o_lt: &Option<Lifetime>)\n+                      -> Option<hir::Lifetime> {\n     o_lt.as_ref().map(|lt| lower_lifetime(lctx, lt))\n }\n \n-pub fn lower_generics(lctx: &mut LoweringContext, g: &Generics) -> hir::Generics {\n+fn lower_generics(lctx: &mut LoweringContext, g: &Generics) -> hir::Generics {\n     hir::Generics {\n         ty_params: lower_ty_params(lctx, &g.ty_params),\n         lifetimes: lower_lifetime_defs(lctx, &g.lifetimes),\n         where_clause: lower_where_clause(lctx, &g.where_clause),\n     }\n }\n \n-pub fn lower_where_clause(lctx: &mut LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n+fn lower_where_clause(lctx: &mut LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n     hir::WhereClause {\n         id: wc.id,\n         predicates: wc.predicates\n@@ -487,9 +487,9 @@ pub fn lower_where_clause(lctx: &mut LoweringContext, wc: &WhereClause) -> hir::\n     }\n }\n \n-pub fn lower_where_predicate(lctx: &mut LoweringContext,\n-                             pred: &WherePredicate)\n-                             -> hir::WherePredicate {\n+fn lower_where_predicate(lctx: &mut LoweringContext,\n+                         pred: &WherePredicate)\n+                         -> hir::WherePredicate {\n     match *pred {\n         WherePredicate::BoundPredicate(WhereBoundPredicate{ ref bound_lifetimes,\n                                                             ref bounded_ty,\n@@ -525,7 +525,7 @@ pub fn lower_where_predicate(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_variant_data(lctx: &mut LoweringContext, vdata: &VariantData) -> hir::VariantData {\n+fn lower_variant_data(lctx: &mut LoweringContext, vdata: &VariantData) -> hir::VariantData {\n     match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n@@ -545,24 +545,24 @@ pub fn lower_variant_data(lctx: &mut LoweringContext, vdata: &VariantData) -> hi\n     }\n }\n \n-pub fn lower_trait_ref(lctx: &mut LoweringContext, p: &TraitRef) -> hir::TraitRef {\n+fn lower_trait_ref(lctx: &mut LoweringContext, p: &TraitRef) -> hir::TraitRef {\n     hir::TraitRef {\n         path: lower_path(lctx, &p.path),\n         ref_id: p.ref_id,\n     }\n }\n \n-pub fn lower_poly_trait_ref(lctx: &mut LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n+fn lower_poly_trait_ref(lctx: &mut LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n     hir::PolyTraitRef {\n         bound_lifetimes: lower_lifetime_defs(lctx, &p.bound_lifetimes),\n         trait_ref: lower_trait_ref(lctx, &p.trait_ref),\n         span: p.span,\n     }\n }\n \n-pub fn lower_struct_field(lctx: &mut LoweringContext,\n-                          (index, f): (usize, &StructField))\n-                          -> hir::StructField {\n+fn lower_struct_field(lctx: &mut LoweringContext,\n+                      (index, f): (usize, &StructField))\n+                      -> hir::StructField {\n     hir::StructField {\n         span: f.span,\n         id: f.id,\n@@ -573,15 +573,15 @@ pub fn lower_struct_field(lctx: &mut LoweringContext,\n     }\n }\n \n-pub fn lower_field(lctx: &mut LoweringContext, f: &Field) -> hir::Field {\n+fn lower_field(lctx: &mut LoweringContext, f: &Field) -> hir::Field {\n     hir::Field {\n         name: respan(f.ident.span, f.ident.node.name),\n         expr: lower_expr(lctx, &f.expr),\n         span: f.span,\n     }\n }\n \n-pub fn lower_mt(lctx: &mut LoweringContext, mt: &MutTy) -> hir::MutTy {\n+fn lower_mt(lctx: &mut LoweringContext, mt: &MutTy) -> hir::MutTy {\n     hir::MutTy {\n         ty: lower_ty(lctx, &mt.ty),\n         mutbl: lower_mutability(lctx, mt.mutbl),\n@@ -592,7 +592,7 @@ fn lower_bounds(lctx: &mut LoweringContext, bounds: &TyParamBounds) -> hir::TyPa\n     bounds.iter().map(|bound| lower_ty_param_bound(lctx, bound)).collect()\n }\n \n-pub fn lower_block(lctx: &mut LoweringContext, b: &Block) -> P<hir::Block> {\n+fn lower_block(lctx: &mut LoweringContext, b: &Block) -> P<hir::Block> {\n     P(hir::Block {\n         id: b.id,\n         stmts: b.stmts.iter().map(|s| lower_stmt(lctx, s)).collect(),\n@@ -602,7 +602,7 @@ pub fn lower_block(lctx: &mut LoweringContext, b: &Block) -> P<hir::Block> {\n     })\n }\n \n-pub fn lower_item_kind(lctx: &mut LoweringContext, i: &ItemKind) -> hir::Item_ {\n+fn lower_item_kind(lctx: &mut LoweringContext, i: &ItemKind) -> hir::Item_ {\n     match *i {\n         ItemKind::ExternCrate(string) => hir::ItemExternCrate(string),\n         ItemKind::Use(ref view_path) => {\n@@ -670,7 +670,7 @@ pub fn lower_item_kind(lctx: &mut LoweringContext, i: &ItemKind) -> hir::Item_ {\n     }\n }\n \n-pub fn lower_trait_item(lctx: &mut LoweringContext, i: &TraitItem) -> hir::TraitItem {\n+fn lower_trait_item(lctx: &mut LoweringContext, i: &TraitItem) -> hir::TraitItem {\n     lctx.with_parent_def(i.id, |lctx| {\n         hir::TraitItem {\n             id: i.id,\n@@ -695,7 +695,7 @@ pub fn lower_trait_item(lctx: &mut LoweringContext, i: &TraitItem) -> hir::Trait\n     })\n }\n \n-pub fn lower_impl_item(lctx: &mut LoweringContext, i: &ImplItem) -> hir::ImplItem {\n+fn lower_impl_item(lctx: &mut LoweringContext, i: &ImplItem) -> hir::ImplItem {\n     lctx.with_parent_def(i.id, |lctx| {\n         hir::ImplItem {\n             id: i.id,\n@@ -718,7 +718,7 @@ pub fn lower_impl_item(lctx: &mut LoweringContext, i: &ImplItem) -> hir::ImplIte\n     })\n }\n \n-pub fn lower_mod(lctx: &mut LoweringContext, m: &Mod) -> hir::Mod {\n+fn lower_mod(lctx: &mut LoweringContext, m: &Mod) -> hir::Mod {\n     hir::Mod {\n         inner: m.inner,\n         item_ids: m.items.iter().map(|x| lower_item_id(lctx, x)).collect(),\n@@ -754,7 +754,7 @@ pub fn lower_crate(lctx: &mut LoweringContext, c: &Crate) -> hir::Crate {\n     }\n }\n \n-pub fn lower_macro_def(lctx: &mut LoweringContext, m: &MacroDef) -> hir::MacroDef {\n+fn lower_macro_def(lctx: &mut LoweringContext, m: &MacroDef) -> hir::MacroDef {\n     hir::MacroDef {\n         name: m.ident.name,\n         attrs: lower_attrs(lctx, &m.attrs),\n@@ -768,7 +768,7 @@ pub fn lower_macro_def(lctx: &mut LoweringContext, m: &MacroDef) -> hir::MacroDe\n     }\n }\n \n-pub fn lower_item_id(_lctx: &mut LoweringContext, i: &Item) -> hir::ItemId {\n+fn lower_item_id(_lctx: &mut LoweringContext, i: &Item) -> hir::ItemId {\n     hir::ItemId { id: i.id }\n }\n \n@@ -787,7 +787,7 @@ pub fn lower_item(lctx: &mut LoweringContext, i: &Item) -> hir::Item {\n     }\n }\n \n-pub fn lower_foreign_item(lctx: &mut LoweringContext, i: &ForeignItem) -> hir::ForeignItem {\n+fn lower_foreign_item(lctx: &mut LoweringContext, i: &ForeignItem) -> hir::ForeignItem {\n     lctx.with_parent_def(i.id, |lctx| {\n         hir::ForeignItem {\n             id: i.id,\n@@ -807,7 +807,7 @@ pub fn lower_foreign_item(lctx: &mut LoweringContext, i: &ForeignItem) -> hir::F\n     })\n }\n \n-pub fn lower_method_sig(lctx: &mut LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n+fn lower_method_sig(lctx: &mut LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n     hir::MethodSig {\n         generics: lower_generics(lctx, &sig.generics),\n         abi: sig.abi,\n@@ -818,29 +818,29 @@ pub fn lower_method_sig(lctx: &mut LoweringContext, sig: &MethodSig) -> hir::Met\n     }\n }\n \n-pub fn lower_unsafety(_lctx: &mut LoweringContext, u: Unsafety) -> hir::Unsafety {\n+fn lower_unsafety(_lctx: &mut LoweringContext, u: Unsafety) -> hir::Unsafety {\n     match u {\n         Unsafety::Unsafe => hir::Unsafety::Unsafe,\n         Unsafety::Normal => hir::Unsafety::Normal,\n     }\n }\n \n-pub fn lower_constness(_lctx: &mut LoweringContext, c: Constness) -> hir::Constness {\n+fn lower_constness(_lctx: &mut LoweringContext, c: Constness) -> hir::Constness {\n     match c {\n         Constness::Const => hir::Constness::Const,\n         Constness::NotConst => hir::Constness::NotConst,\n     }\n }\n \n-pub fn lower_unop(_lctx: &mut LoweringContext, u: UnOp) -> hir::UnOp {\n+fn lower_unop(_lctx: &mut LoweringContext, u: UnOp) -> hir::UnOp {\n     match u {\n         UnOp::Deref => hir::UnDeref,\n         UnOp::Not => hir::UnNot,\n         UnOp::Neg => hir::UnNeg,\n     }\n }\n \n-pub fn lower_binop(_lctx: &mut LoweringContext, b: BinOp) -> hir::BinOp {\n+fn lower_binop(_lctx: &mut LoweringContext, b: BinOp) -> hir::BinOp {\n     Spanned {\n         node: match b.node {\n             BinOpKind::Add => hir::BiAdd,\n@@ -866,7 +866,7 @@ pub fn lower_binop(_lctx: &mut LoweringContext, b: BinOp) -> hir::BinOp {\n     }\n }\n \n-pub fn lower_pat(lctx: &mut LoweringContext, p: &Pat) -> P<hir::Pat> {\n+fn lower_pat(lctx: &mut LoweringContext, p: &Pat) -> P<hir::Pat> {\n     P(hir::Pat {\n         id: p.id,\n         node: match p.node {\n@@ -931,7 +931,7 @@ pub fn lower_pat(lctx: &mut LoweringContext, p: &Pat) -> P<hir::Pat> {\n     })\n }\n \n-pub fn lower_expr(lctx: &mut LoweringContext, e: &Expr) -> P<hir::Expr> {\n+fn lower_expr(lctx: &mut LoweringContext, e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n         id: e.id,\n         node: match e.node {\n@@ -1612,7 +1612,7 @@ pub fn lower_expr(lctx: &mut LoweringContext, e: &Expr) -> P<hir::Expr> {\n     })\n }\n \n-pub fn lower_stmt(lctx: &mut LoweringContext, s: &Stmt) -> hir::Stmt {\n+fn lower_stmt(lctx: &mut LoweringContext, s: &Stmt) -> hir::Stmt {\n     match s.node {\n         StmtKind::Decl(ref d, id) => {\n             Spanned {\n@@ -1636,14 +1636,14 @@ pub fn lower_stmt(lctx: &mut LoweringContext, s: &Stmt) -> hir::Stmt {\n     }\n }\n \n-pub fn lower_capture_clause(_lctx: &mut LoweringContext, c: CaptureBy) -> hir::CaptureClause {\n+fn lower_capture_clause(_lctx: &mut LoweringContext, c: CaptureBy) -> hir::CaptureClause {\n     match c {\n         CaptureBy::Value => hir::CaptureByValue,\n         CaptureBy::Ref => hir::CaptureByRef,\n     }\n }\n \n-pub fn lower_visibility(lctx: &mut LoweringContext, v: &Visibility) -> hir::Visibility {\n+fn lower_visibility(lctx: &mut LoweringContext, v: &Visibility) -> hir::Visibility {\n     match *v {\n         Visibility::Public => hir::Public,\n         Visibility::Crate(_) => hir::Visibility::Crate,\n@@ -1653,44 +1653,44 @@ pub fn lower_visibility(lctx: &mut LoweringContext, v: &Visibility) -> hir::Visi\n     }\n }\n \n-pub fn lower_defaultness(_lctx: &mut LoweringContext, d: Defaultness) -> hir::Defaultness {\n+fn lower_defaultness(_lctx: &mut LoweringContext, d: Defaultness) -> hir::Defaultness {\n     match d {\n         Defaultness::Default => hir::Defaultness::Default,\n         Defaultness::Final => hir::Defaultness::Final,\n     }\n }\n \n-pub fn lower_block_check_mode(lctx: &mut LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n+fn lower_block_check_mode(lctx: &mut LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n         BlockCheckMode::Default => hir::DefaultBlock,\n         BlockCheckMode::Unsafe(u) => hir::UnsafeBlock(lower_unsafe_source(lctx, u)),\n     }\n }\n \n-pub fn lower_binding_mode(lctx: &mut LoweringContext, b: &BindingMode) -> hir::BindingMode {\n+fn lower_binding_mode(lctx: &mut LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n         BindingMode::ByRef(m) => hir::BindByRef(lower_mutability(lctx, m)),\n         BindingMode::ByValue(m) => hir::BindByValue(lower_mutability(lctx, m)),\n     }\n }\n \n-pub fn lower_unsafe_source(_lctx: &mut LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n+fn lower_unsafe_source(_lctx: &mut LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n     match u {\n         CompilerGenerated => hir::CompilerGenerated,\n         UserProvided => hir::UserProvided,\n     }\n }\n \n-pub fn lower_impl_polarity(_lctx: &mut LoweringContext, i: ImplPolarity) -> hir::ImplPolarity {\n+fn lower_impl_polarity(_lctx: &mut LoweringContext, i: ImplPolarity) -> hir::ImplPolarity {\n     match i {\n         ImplPolarity::Positive => hir::ImplPolarity::Positive,\n         ImplPolarity::Negative => hir::ImplPolarity::Negative,\n     }\n }\n \n-pub fn lower_trait_bound_modifier(_lctx: &mut LoweringContext,\n-                                  f: TraitBoundModifier)\n-                                  -> hir::TraitBoundModifier {\n+fn lower_trait_bound_modifier(_lctx: &mut LoweringContext,\n+                              f: TraitBoundModifier)\n+                              -> hir::TraitBoundModifier {\n     match f {\n         TraitBoundModifier::None => hir::TraitBoundModifier::None,\n         TraitBoundModifier::Maybe => hir::TraitBoundModifier::Maybe,"}]}