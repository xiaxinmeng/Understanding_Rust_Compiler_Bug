{"sha": "7fe95977752251934b28516185d9b5d92445a778", "node_id": "C_kwDOAAsO6NoAKDdmZTk1OTc3NzUyMjUxOTM0YjI4NTE2MTg1ZDliNWQ5MjQ0NWE3Nzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-04T10:38:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-04T10:38:51Z"}, "message": "Rollup merge of #105123 - BlackHoleFox:fixing-the-macos-deployment, r=oli-obk\n\nFix passing MACOSX_DEPLOYMENT_TARGET to the linker\n\nI messed up in https://github.com/rust-lang/rust/pull/103929 when merging the two base files together and as a result, started ignoring `MACOSX_DEPLOYMENT_TARGET` at the linker level. This ended up being the cause of nighty builds not running on older macOS versions.\n\nMy original hope with the previous PR was that CI would have caught something like that but there were only tests checking the compiler target definitions in codegen tests. Because of how badly this sucks to break, I put together a new test via `run-make` that actually confirms the deployment target set makes it to the linker instead of just LLVM.\n\nCloses https://github.com/rust-lang/rust/issues/104570 (for real this time)", "tree": {"sha": "becfec3d21cf876b87c2ffb69b96409c9e5601e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/becfec3d21cf876b87c2ffb69b96409c9e5601e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe95977752251934b28516185d9b5d92445a778", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjHi7CRBK7hj4Ov3rIwAAAzQIAKy8Hx7/q9E+flqaI659sjV0\nwki3tQpa6fqDMkuAtF54TOO+z5SzXrd4Jhja9ZdpfgTx6eXO6APbw6JIJ/Cs9lJN\nsNLkWMHmfQGrWkZDr11owzutg1ORIP2aT0a29dmjF22yNeG1Q7uGB6xSTJGeojI4\nDxpBYTrIJmmOMH1tG6NwsVoCH5csPxkNdJ2SAlPSTjUrX3YGOMtM0nm/fF5VWomQ\n6qV09RRrnNik66CK4YMOrSsLlpFU7AunqwbG6ASLTac9aGVd7lm1wu3jzNYNSSqD\n/Qp++fHo2mM+NIO4YBWpX8/aDGzNJzfMzYfytscXk0TKckSMWMrf5YNX2emiVTs=\n=GwYx\n-----END PGP SIGNATURE-----\n", "payload": "tree becfec3d21cf876b87c2ffb69b96409c9e5601e4\nparent 785b47d92a0519e4bcc1a9dd2c0c28067e082ff1\nparent 56592d310f36166c370ce54109c13f05890d680f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670150331 +0100\ncommitter GitHub <noreply@github.com> 1670150331 +0100\n\nRollup merge of #105123 - BlackHoleFox:fixing-the-macos-deployment, r=oli-obk\n\nFix passing MACOSX_DEPLOYMENT_TARGET to the linker\n\nI messed up in https://github.com/rust-lang/rust/pull/103929 when merging the two base files together and as a result, started ignoring `MACOSX_DEPLOYMENT_TARGET` at the linker level. This ended up being the cause of nighty builds not running on older macOS versions.\n\nMy original hope with the previous PR was that CI would have caught something like that but there were only tests checking the compiler target definitions in codegen tests. Because of how badly this sucks to break, I put together a new test via `run-make` that actually confirms the deployment target set makes it to the linker instead of just LLVM.\n\nCloses https://github.com/rust-lang/rust/issues/104570 (for real this time)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe95977752251934b28516185d9b5d92445a778", "html_url": "https://github.com/rust-lang/rust/commit/7fe95977752251934b28516185d9b5d92445a778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe95977752251934b28516185d9b5d92445a778/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1", "html_url": "https://github.com/rust-lang/rust/commit/785b47d92a0519e4bcc1a9dd2c0c28067e082ff1"}, {"sha": "56592d310f36166c370ce54109c13f05890d680f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56592d310f36166c370ce54109c13f05890d680f", "html_url": "https://github.com/rust-lang/rust/commit/56592d310f36166c370ce54109c13f05890d680f"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "e72cab629ff19058cd332c33689fc851ee263cc4", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,8 +10,6 @@ pub fn target() -> Target {\n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n-\n     Target {\n         // Clang automatically chooses a more specific target based on\n         // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "3c90a5e7e93ea74ca2ae33ac230ad3522d10f841", "filename": "compiler/rustc_target/src/spec/apple/tests.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::{\n-    aarch64_apple_ios_sim, aarch64_apple_watchos_sim, x86_64_apple_ios, x86_64_apple_tvos,\n-    x86_64_apple_watchos_sim,\n+    aarch64_apple_darwin, aarch64_apple_ios_sim, aarch64_apple_watchos_sim, i686_apple_darwin,\n+    x86_64_apple_darwin, x86_64_apple_ios, x86_64_apple_tvos, x86_64_apple_watchos_sim,\n };\n \n #[test]\n@@ -18,3 +18,18 @@ fn simulator_targets_set_abi() {\n         assert_eq!(target.abi, \"sim\")\n     }\n }\n+\n+#[test]\n+fn macos_link_environment_unmodified() {\n+    let all_macos_targets = [\n+        aarch64_apple_darwin::target(),\n+        i686_apple_darwin::target(),\n+        x86_64_apple_darwin::target(),\n+    ];\n+\n+    for target in all_macos_targets {\n+        // macOS targets should only remove information for cross-compiling, but never\n+        // for the host.\n+        assert_eq!(target.link_env_remove, crate::spec::cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"]);\n+    }\n+}"}, {"sha": "7f8160b5dec62d7ce4ed0b5a4ff5113cfb4da9ac", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -72,16 +72,6 @@ impl Arch {\n             Arm64_sim => \"apple-a12\",\n         }\n     }\n-\n-    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n-        match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n-                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-            }\n-            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-        }\n-    }\n }\n \n fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n@@ -140,7 +130,7 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n         abi: abi.into(),\n         os: os.into(),\n         cpu: arch.target_cpu().into(),\n-        link_env_remove: arch.link_env_remove(),\n+        link_env_remove: link_env_remove(arch, os),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -211,20 +201,38 @@ pub fn macos_llvm_target(arch: Arch) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n-pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n-    let mut env_remove = Vec::with_capacity(2);\n-    // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n-    // may occur when we're linking a custom build script while targeting iOS for example.\n-    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n-        if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n-            env_remove.push(\"SDKROOT\".into())\n+fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]> {\n+    // Apple platforms only officially support macOS as a host for any compilation.\n+    //\n+    // If building for macOS, we go ahead and remove any erronous environment state\n+    // that's only applicable to cross-OS compilation. Always leave anything for the\n+    // host OS alone though.\n+    if os == \"macos\" {\n+        let mut env_remove = Vec::with_capacity(2);\n+        // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+        // may occur when we're linking a custom build script while targeting iOS for example.\n+        if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n+            if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\")\n+            {\n+                env_remove.push(\"SDKROOT\".into())\n+            }\n+        }\n+        // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n+        // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n+        // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n+        env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n+        env_remove.into()\n+    } else {\n+        // Otherwise if cross-compiling for a different OS/SDK, remove any part\n+        // of the linking environment that's wrong and reversed.\n+        match arch {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n         }\n     }\n-    // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n-    // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n-    // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n-    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n-    env_remove\n }\n \n fn ios_deployment_target() -> (u32, u32) {"}, {"sha": "ad22467ba9c8970ad4cdf13b804d648b307f6cfb", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +7,6 @@ pub fn target() -> Target {\n     let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n "}, {"sha": "9a3e7a8050025c01cc63e69238ad78756b736213", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n@@ -8,7 +8,6 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;"}, {"sha": "70fca04365378e4af715d7948589000a591399e4", "filename": "src/test/run-make/macos-deployment-target/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -0,0 +1,21 @@\n+# only-macos\n+#\n+# Check that a set deployment target actually makes it to the linker.\n+# This is important since its a compatibility hazard. The linker will\n+# generate load commands differently based on what minimum OS it can assume.\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(strip $(shell uname -m)),arm64)\n+\tGREP_PATTERN = \"minos 11.0\"\n+else\n+ \tGREP_PATTERN = \"version 10.9\"\n+endif\n+\n+OUT_FILE=$(TMPDIR)/with_deployment_target.dylib\n+all:\n+\tenv MACOSX_DEPLOYMENT_TARGET=10.9 $(RUSTC) with_deployment_target.rs -o $(OUT_FILE)\n+# XXX: The check is for either the x86_64 minimum OR the aarch64 minimum (M1 starts at macOS 11).\n+# They also use different load commands, so we let that change with each too. The aarch64 check\n+# isn't as robust as the x86 one, but testing both seems unneeded.\n+\tvtool -show-build $(OUT_FILE) | $(CGREP) -e $(GREP_PATTERN)"}, {"sha": "342fe0ecbcfcd20085014a4b62278cfe2b762cbc", "filename": "src/test/run-make/macos-deployment-target/with_deployment_target.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fe95977752251934b28516185d9b5d92445a778/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe95977752251934b28516185d9b5d92445a778/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs?ref=7fe95977752251934b28516185d9b5d92445a778", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"cdylib\"]\n+\n+#[allow(dead_code)]\n+fn something_and_nothing() {}"}]}