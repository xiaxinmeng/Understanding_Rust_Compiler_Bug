{"sha": "4aca54001865435c799757c6fcb8595c23ff6c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhY2E1NDAwMTg2NTQzNWM3OTk3NTdjNmZjYjg1OTVjMjNmZjZjNzc=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2017-02-25T21:16:27Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-15T02:04:53Z"}, "message": "Implement RFC 1268\n\nThis patch allows overlap to occur between any two impls of a trait for\ntraits which have no associated items.\n\nSeveral compile-fail tests around coherence had to be changed to add at\nleast one item to the trait they test against.\n\nRef #29864", "tree": {"sha": "3412c88a03f0a86f1cba581b4476ca694cce6542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3412c88a03f0a86f1cba581b4476ca694cce6542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aca54001865435c799757c6fcb8595c23ff6c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aca54001865435c799757c6fcb8595c23ff6c77", "html_url": "https://github.com/rust-lang/rust/commit/4aca54001865435c799757c6fcb8595c23ff6c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aca54001865435c799757c6fcb8595c23ff6c77/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ca5d4bad07a4fc8497bd9766cdadaee1bd0ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ca5d4bad07a4fc8497bd9766cdadaee1bd0ac6", "html_url": "https://github.com/rust-lang/rust/commit/f0ca5d4bad07a4fc8497bd9766cdadaee1bd0ac6"}], "stats": {"total": 85, "additions": 64, "deletions": 21}, "files": [{"sha": "6455de48a299dfe54568d554d48110e4274d2aa0", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -155,6 +155,11 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return r;\n     }\n \n+    if tcx.impl_always_allowed_to_overlap(impl1_def_id)\n+        && tcx.impl_always_allowed_to_overlap(impl2_def_id) {\n+        return true;\n+    }\n+\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&"}, {"sha": "87abe681d39380491bc761cd3c78aefb96e3fd9a", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -113,6 +113,11 @@ impl<'a, 'gcx, 'tcx> Children {\n                                                         possible_sibling,\n                                                         impl_def_id);\n                 if let Some(impl_header) = overlap {\n+                    if tcx.impl_always_allowed_to_overlap(impl_def_id)\n+                        && tcx.impl_always_allowed_to_overlap(possible_sibling) {\n+                        return Ok((true, true));\n+                    }\n+\n                     let le = specializes(tcx, impl_def_id, possible_sibling);\n                     let ge = specializes(tcx, possible_sibling, impl_def_id);\n "}, {"sha": "9fdabd38d4ab448cf5569ac5fcebb909e0b6262c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -2227,6 +2227,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         queries::impl_trait_ref::get(self, DUMMY_SP, id)\n     }\n \n+    /// Returns true if the impl is positive and is for a triat which contains\n+    /// no items\n+    pub fn impl_always_allowed_to_overlap(self, def_id: DefId) -> bool {\n+        self.trait_impl_polarity(def_id) == hir::ImplPolarity::Positive\n+            && self.impl_trait_ref(def_id)\n+                .map_or(false, |trait_ref| {\n+                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+                })\n+    }\n+\n     // Returns `ty::VariantDef` if `def` refers to a struct,\n     // or variant or their constructors, panics otherwise.\n     pub fn expect_variant_def(self, def: Def) -> &'tcx VariantDef {"}, {"sha": "80cc0d2680f7c5a7456d22ade460122aaf963eeb", "filename": "src/test/compile-fail/E0120.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0120.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl Drop for MyTrait {\n               //~^ ERROR E0120"}, {"sha": "d841e8c41d984e0b40fd2347d6a185621c4123ad", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -20,8 +20,8 @@ impl<T: MyTrait> !Send for TestType<T> {}\n //~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n unsafe impl<T:'static> Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n impl !Send for TestType<i32> {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n fn main() {}"}, {"sha": "e6bf068156c2b037fcf4d99a987cfc8a2e6c9c74", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl MyTrait for .. {}\n //~^ ERROR redundant default implementations of trait `MyTrait`"}, {"sha": "d0e6bc6a1c699264b016d9acb994098f494f3cd8", "filename": "src/test/compile-fail/coherence-impls-send.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-send.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -34,7 +34,6 @@ unsafe impl Send for [MyType] {}\n \n unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR E0117\n-//~| ERROR E0119\n \n fn main() {\n }"}, {"sha": "47026cd32d411a6f51033000677c775d1e657c7f", "filename": "src/test/compile-fail/coherence-no-direct-lifetime-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -10,7 +10,7 @@\n \n // Test that you cannot *directly* dispatch on lifetime requirements\n \n-trait MyTrait {}\n+trait MyTrait { fn foo() {} }\n \n impl<T> MyTrait for T {}\n impl<T: 'static> MyTrait for T {} //~ ERROR E0119"}, {"sha": "1fad608db6c3b1a3e52c5c1e62d0f7746a22ad0d", "filename": "src/test/compile-fail/coherence-overlap-all-t-and-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-all-t-and-tuple.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -17,6 +17,7 @@\n // Seems pretty basic, but then there was issue #24241. :)\n \n trait From<U> {\n+    fn foo() {}\n }\n \n impl <T> From<T> for T {"}, {"sha": "a10deeafbe67e267f3b7100f3584436696b61cb9", "filename": "src/test/compile-fail/coherence-overlap-messages.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -8,22 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo { fn foo() {} }\n \n impl<T> Foo for T {}\n impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n \n-trait Bar {}\n+trait Bar { fn bar() {} }\n \n impl<T> Bar for (T, u8) {}\n impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n \n-trait Baz<T> {}\n+trait Baz<T> { fn baz() {} }\n \n impl<T> Baz<u8> for T {}\n impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n \n-trait Quux<U, V> {}\n+trait Quux<U, V> { fn quux() {} }\n \n impl<T, U, V> Quux<U, V> for T {}\n impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:"}, {"sha": "784ff0cd5e0aa72982f288efcfbaf92cd34d88bc", "filename": "src/test/compile-fail/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -15,7 +15,7 @@\n // due to the orphan rules. Therefore, `A::Item` may yet turn out to\n // be `i32`.\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n pub trait Bar {\n     type Output: 'static;"}, {"sha": "120d9046389a18fb3a5d834c39b132049b3cb401", "filename": "src/test/compile-fail/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -13,7 +13,7 @@\n \n use std::marker::PhantomData;\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n "}, {"sha": "3c32ab38b93dc15da014d66ad612824a6a4c012f", "filename": "src/test/compile-fail/coherence-projection-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -10,7 +10,7 @@\n \n use std::marker::PhantomData;\n \n-pub trait Foo<P> {}\n+pub trait Foo<P> { fn foo() {} }\n \n pub trait Bar {\n     type Output: 'static;"}, {"sha": "9fbb7aa4cb1a7f70a180821a46bd137fdda6503a", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -20,7 +20,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "2f6dca4f3c2715ae4915cab7ea847f7dc1f401a6", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -20,7 +20,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyFundamentalStruct` is declared fundamental, so we can test that"}, {"sha": "f424e8872010f25d5d4414a5ff07d1e3d636f48f", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -19,7 +19,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n \n impl<T: lib::MyCopy> MyTrait for T { }\n "}, {"sha": "04262e65c5a2afe8d2ff72e4113ce08165ef35ae", "filename": "src/test/compile-fail/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -17,7 +17,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // `MyStruct` is not declared fundamental, therefore this would"}, {"sha": "378a70864f0eedb93cf06ff9988b8ff55eabccc8", "filename": "src/test/compile-fail/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -17,7 +17,7 @@ extern crate coherence_copy_like_lib as lib;\n \n struct MyType { x: i32 }\n \n-trait MyTrait { }\n+trait MyTrait { fn foo() {} }\n impl<T: lib::MyCopy> MyTrait for T { }\n \n // Tuples are not fundamental, therefore this would require that"}, {"sha": "ff12a82db5b7dff2ded854e7a4de119bd7800cd4", "filename": "src/test/compile-fail/specialization/specialization-overlap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -10,19 +10,19 @@\n \n #![feature(specialization)]\n \n-trait Foo {}\n+trait Foo { fn foo() {} }\n impl<T: Clone> Foo for T {}\n impl<T> Foo for Vec<T> {} //~ ERROR E0119\n \n-trait Bar {}\n+trait Bar { fn bar() {} }\n impl<T> Bar for (T, u8) {}\n impl<T> Bar for (u8, T) {} //~ ERROR E0119\n \n-trait Baz<U> {}\n+trait Baz<U> { fn baz() {} }\n impl<T> Baz<T> for u8 {}\n impl<T> Baz<u8> for T {} //~ ERROR E0119\n \n-trait Qux {}\n+trait Qux { fn qux() {} }\n impl<T: Clone> Qux for T {}\n impl<T: Eq> Qux for T {} //~ ERROR E0119\n "}, {"sha": "66c45e6718331d7909b47c163eb05c2bf41d17df", "filename": "src/test/run-pass/overlap-permitted-for-marker-traits.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aca54001865435c799757c6fcb8595c23ff6c77/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-marker-traits.rs?ref=4aca54001865435c799757c6fcb8595c23ff6c77", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait MyMarker {}\n+\n+impl<T: Copy> MyMarker for T {}\n+impl<T: Eq> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    assert_eq!(1, foo(1));\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}]}