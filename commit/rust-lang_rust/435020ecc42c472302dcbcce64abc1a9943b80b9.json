{"sha": "435020ecc42c472302dcbcce64abc1a9943b80b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTAyMGVjYzQyYzQ3MjMwMmRjYmNjZTY0YWJjMWE5OTQzYjgwYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T13:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T13:56:06Z"}, "message": "auto merge of #8491 : robertknight/rust/7722-reservoir_sampling, r=graydon\n\nFixes #7722\r\n\r\nI had a couple of queries:\r\n- Should this return an array or an iterator?\r\n- Should this be a method on iterators or on the rng? I implemented it in RngUtils as it seemed to belong with shuffle().", "tree": {"sha": "c0b61f72985bd9b917fa4a7609220b6d934f6344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b61f72985bd9b917fa4a7609220b6d934f6344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435020ecc42c472302dcbcce64abc1a9943b80b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435020ecc42c472302dcbcce64abc1a9943b80b9", "html_url": "https://github.com/rust-lang/rust/commit/435020ecc42c472302dcbcce64abc1a9943b80b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435020ecc42c472302dcbcce64abc1a9943b80b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77739a70849293f67aba8ce3379e050cd319d1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/77739a70849293f67aba8ce3379e050cd319d1ce", "html_url": "https://github.com/rust-lang/rust/commit/77739a70849293f67aba8ce3379e050cd319d1ce"}, {"sha": "11b3d76fb6ae627aea1b2a3a3de2807c21f9e720", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b3d76fb6ae627aea1b2a3a3de2807c21f9e720", "html_url": "https://github.com/rust-lang/rust/commit/11b3d76fb6ae627aea1b2a3a3de2807c21f9e720"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "bd2ea1d6ac6af9e099c7f5bb97ed11f3f0eba81d", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/435020ecc42c472302dcbcce64abc1a9943b80b9/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435020ecc42c472302dcbcce64abc1a9943b80b9/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=435020ecc42c472302dcbcce64abc1a9943b80b9", "patch": "@@ -461,6 +461,26 @@ pub trait RngUtil {\n      * ~~~\n      */\n     fn shuffle_mut<T>(&mut self, values: &mut [T]);\n+\n+    /**\n+     * Sample up to `n` values from an iterator.\n+     *\n+     * # Example\n+     *\n+     * ~~~ {.rust}\n+     *\n+     * use std::rand;\n+     * use std::rand::RngUtil;\n+     *\n+     * fn main() {\n+     *     let mut rng = rand::rng();\n+     *     let vals = range(1, 100).to_owned_vec();\n+     *     let sample = rng.sample(vals.iter(), 5);\n+     *     printfln!(sample);\n+     * }\n+     * ~~~\n+     */\n+    fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> ~[A];\n }\n \n /// Extension methods for random number generators\n@@ -607,6 +627,23 @@ impl<R: Rng> RngUtil for R {\n             values.swap(i, self.gen_uint_range(0u, i + 1u));\n         }\n     }\n+\n+    /// Randomly sample up to `n` elements from an iterator\n+    fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> ~[A] {\n+        let mut reservoir : ~[A] = vec::with_capacity(n);\n+        for (i, elem) in iter.enumerate() {\n+            if i < n {\n+                reservoir.push(elem);\n+                loop\n+            }\n+\n+            let k = self.gen_uint_range(0, i + 1);\n+            if k < reservoir.len() {\n+                reservoir[k] = elem\n+            }\n+        }\n+        reservoir\n+    }\n }\n \n /// Create a random number generator with a default algorithm and seed.\n@@ -914,6 +951,7 @@ pub fn random<T: Rand>() -> T {\n \n #[cfg(test)]\n mod test {\n+    use iterator::{Iterator, range};\n     use option::{Option, Some};\n     use super::*;\n \n@@ -1130,6 +1168,24 @@ mod test {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn test_sample() {\n+        let MIN_VAL = 1;\n+        let MAX_VAL = 100;\n+\n+        let mut r = rng();\n+        let vals = range(MIN_VAL, MAX_VAL).to_owned_vec();\n+        let small_sample = r.sample(vals.iter(), 5);\n+        let large_sample = r.sample(vals.iter(), vals.len() + 5);\n+\n+        assert_eq!(small_sample.len(), 5);\n+        assert_eq!(large_sample.len(), vals.len());\n+\n+        assert!(small_sample.iter().all(|e| {\n+            **e >= MIN_VAL && **e <= MAX_VAL\n+        }));\n+    }\n }\n \n #[cfg(test)]"}]}