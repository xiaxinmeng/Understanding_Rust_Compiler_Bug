{"sha": "02e4d0b3b5a510b2275480cb79c28d0d48bba720", "node_id": "C_kwDOAAsO6NoAKDAyZTRkMGIzYjVhNTEwYjIyNzU0ODBjYjc5YzI4ZDBkNDhiYmE3MjA", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-08-15T00:49:08Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-10-18T18:17:05Z"}, "message": "Make all proc-macro back-compat lints deny-by-default\n\nThe affected crates have had plenty of time to update.\nBy keeping these as lints rather than making them hard errors,\nwe ensure that downstream crates will still be able to compile,\neven if they transitive depend on broken versions of the affected\ncrates.\n\nThis should hopefully discourage anyone from writing any\nnew code which relies on the backwards-compatibility behavior.", "tree": {"sha": "8a51d04c15689876723379e598e8de2c55a26c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a51d04c15689876723379e598e8de2c55a26c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e4d0b3b5a510b2275480cb79c28d0d48bba720", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmFtuiIACgkQtAh+UQ6Y\nsWT2aBAAqeTul2gn+zp7gGwK3zFhJ+eDZdwd2iSwu7Snu+cO3c92+Q1ASzIX1QWK\nvP4pvlttPTdGW/jn53R5v0vIHUN6ZS7MnOwvcGlwjwvLbPILrYte6bXbFUA3bP3o\nFcOOY1JVE+09yJTX7C8gBew2R8wMkHgJSffIS7+Ro4Bm9D0chEwF06J7pDCX6s9B\nG7PSCKD08dFSOr88QWpAdRB3l/C6cIOVZzpen9k3fDsfHD5bGXNpxYJ3fW6SeDZL\nMIaleKtYb/JnLv/1veYzGv300mW7w6U6BEfB9wQNbLfxLRfkpvDMzt5jOGTYHngV\n6wcOPjt/0ZfKESrfROflX15KiU5DfB16wBeyqoBvD3n0CxJq9QYW1acdjpURuW7V\nYbyjCNPEDa/im8le/FXkl/rjrAgVnk4DgQhxI50DYie5S6UZ0PS+ywC81YYgGzWO\nKxOaHYdPkrJSuGEIsaQfq8FcH6RdS3qDE06C8nyUaLmxCZ0IKTq1ZUt5/PdR8wy2\niu8L4Btm5/IFw439JCIZTw1gsSp49ly4KSs2CD6pZBjbpE8OpED1j08Bs8O9sWi2\nJEvlLYOWSIcOnDevtPBKG5jG0oA5+tquHGjbUU6DH3sIJpsPc9mdGqTNaohbJ1Mb\n5wCfku1K94YYlm/JueQf8aHLr5fWmESa5KhhcuUJAyOdVNLMFB8=\n=cWwB\n-----END PGP SIGNATURE-----", "payload": "tree 8a51d04c15689876723379e598e8de2c55a26c3b\nparent 5dab47dcd8267b8769421b46532414ec36d625e3\nauthor Aaron Hill <aa1ronham@gmail.com> 1628988548 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1634581025 -0500\n\nMake all proc-macro back-compat lints deny-by-default\n\nThe affected crates have had plenty of time to update.\nBy keeping these as lints rather than making them hard errors,\nwe ensure that downstream crates will still be able to compile,\neven if they transitive depend on broken versions of the affected\ncrates.\n\nThis should hopefully discourage anyone from writing any\nnew code which relies on the backwards-compatibility behavior.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e4d0b3b5a510b2275480cb79c28d0d48bba720", "html_url": "https://github.com/rust-lang/rust/commit/02e4d0b3b5a510b2275480cb79c28d0d48bba720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e4d0b3b5a510b2275480cb79c28d0d48bba720/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dab47dcd8267b8769421b46532414ec36d625e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dab47dcd8267b8769421b46532414ec36d625e3", "html_url": "https://github.com/rust-lang/rust/commit/5dab47dcd8267b8769421b46532414ec36d625e3"}], "stats": {"total": 174, "additions": 86, "deletions": 88}, "files": [{"sha": "f35ca2659fd65661eae69ac75c8aa58e4f886729", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1957,7 +1957,7 @@ declare_lint! {\n     /// [issue #50504]: https://github.com/rust-lang/rust/issues/50504\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-    Warn,\n+    Deny,\n     \"detects proc macro derives using inaccessible names from parent modules\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n@@ -3253,7 +3253,7 @@ declare_lint! {\n     /// [issue #83125]: https://github.com/rust-lang/rust/issues/83125\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub PROC_MACRO_BACK_COMPAT,\n-    Warn,\n+    Deny,\n     \"detects usage of old versions of certain proc-macro crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\","}, {"sha": "471f317edf96479f64ac9bbc3beadf5d934aaf71", "filename": "src/test/ui/proc-macro/generate-mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -13,15 +13,15 @@ generate_mod::check!(); //~ ERROR cannot find type `FromOutside` in this scope\n                             //~| ERROR cannot find type `OuterAttr` in this scope\n struct S;\n \n-#[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n-                                     //~| WARN cannot find type `OuterDerive` in this scope\n+#[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n+                                     //~| ERROR cannot find type `OuterDerive` in this scope\n                                      //~| WARN this was previously accepted\n                                      //~| WARN this was previously accepted\n struct Z;\n \n fn inner_block() {\n-    #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n-                                        //~| WARN cannot find type `OuterDerive` in this scope\n+    #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n+                                        //~| ERROR cannot find type `OuterDerive` in this scope\n                                         //~| WARN this was previously accepted\n                                         //~| WARN this was previously accepted\n     struct InnerZ;"}, {"sha": "a2c1b82b15f6872f9aff80a4b3346048543db653", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -38,94 +38,94 @@ LL | #[generate_mod::check_attr]\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors; 4 warnings emitted\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0412`.\n Future incompatibility report: Future breakage diagnostic:\n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `FromOutside` in this scope\n+error: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: cannot find type `OuterDerive` in this scope\n+error: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:23:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n warning: cannot find type `FromOutside` in this scope"}, {"sha": "3a2a6fa2253fae3901fd15ac8308e6663d56dded", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n // aux-build:pin-project-internal-0.4.0.rs\n // compile-flags: -Z span-debug\n \n@@ -24,7 +23,7 @@ mod no_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo); //~ WARN  using an old version\n+    impl_macros!(Foo); //~ ERROR  using an old version\n                        //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n@@ -41,9 +40,9 @@ mod with_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo); //~  WARN using an old version\n+    impl_macros!(Foo); //~  ERROR using an old version\n                        //~| WARN this was previously\n-    arrays!(Foo); //~  WARN using an old version\n+    arrays!(Foo); //~  ERROR using an old version\n                   //~| WARN this was previously\n     other!(Foo);\n }\n@@ -52,15 +51,15 @@ mod actix_web_test {\n     include!(\"actix-web/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo); //~ WARN using an old version\n+    tuple_from_req!(Foo); //~ ERROR using an old version\n     //~| WARN this was previously\n }\n \n mod actix_web_version_test {\n     include!(\"actix-web-2.0.0/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo); //~ WARN using an old version\n+    tuple_from_req!(Foo); //~ ERROR using an old version\n     //~| WARN this was previously\n }\n "}, {"sha": "bd9ba6a09fce5cc0b40ab46d4050c43dfd9cc74b", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1,169 +1,169 @@\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:27:5\n+  ::: $DIR/group-compat-hack.rs:26:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:44:5\n+  ::: $DIR/group-compat-hack.rs:43:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `js-sys`\n+error: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:46:5\n+  ::: $DIR/group-compat-hack.rs:45:5\n    |\n LL |     arrays!(Foo);\n    |     ------------ in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:55:5\n+  ::: $DIR/group-compat-hack.rs:54:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:63:5\n+  ::: $DIR/group-compat-hack.rs:62:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 5 warnings emitted\n+error: aborting due to 5 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:27:5\n+  ::: $DIR/group-compat-hack.rs:26:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `time-macros-impl`\n+error: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:44:5\n+  ::: $DIR/group-compat-hack.rs:43:5\n    |\n LL |     impl_macros!(Foo);\n    |     ----------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `js-sys`\n+error: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n    |\n-  ::: $DIR/group-compat-hack.rs:46:5\n+  ::: $DIR/group-compat-hack.rs:45:5\n    |\n LL |     arrays!(Foo);\n    |     ------------ in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:55:5\n+  ::: $DIR/group-compat-hack.rs:54:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n-warning: using an old version of `actix-web`\n+error: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n    |\n-  ::: $DIR/group-compat-hack.rs:63:5\n+  ::: $DIR/group-compat-hack.rs:62:5\n    |\n LL |     tuple_from_req!(Foo);\n    |     -------------------- in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "51312b10ad17616bb7e4d4c187ee469f39e49073", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1,11 +1,11 @@\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:30:12: 30:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:18: 44:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:48:12: 48:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:55:21: 55:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:63:21: 63:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:71:21: 71:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:78:21: 78:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:84:13: 84:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:26:18: 26:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:25: 21:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:32: 21:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:38: 21:43 (#14) }], span: $DIR/group-compat-hack.rs:21:37: 21:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:44: 21:45 (#14) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:13: 45:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:62:21: 62:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:70:21: 70:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:77:21: 77:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:83:13: 83:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]"}, {"sha": "113235051b2b92dfb46504782a0f526ac55df1c6", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.rs?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1,11 +1,10 @@\n-// check-pass\n // aux-build:test-macros.rs\n \n #[macro_use]\n extern crate test_macros;\n \n #[derive(Print)]\n-enum ProceduralMasqueradeDummyType { //~ WARN using\n+enum ProceduralMasqueradeDummyType { //~ ERROR using\n //~| WARN this was previously\n     Input\n }"}, {"sha": "dff71c9eacd4d8d24f6527e670e63caa61386294", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -1,24 +1,24 @@\n-warning: using `procedural-masquerade` crate\n-  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+error: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:7:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n Future incompatibility report: Future breakage diagnostic:\n-warning: using `procedural-masquerade` crate\n-  --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n+error: using `procedural-masquerade` crate\n+  --> $DIR/issue-73933-procedural-masquerade.rs:7:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = note: `#[deny(proc_macro_back_compat)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling."}, {"sha": "8a8fbf0682470d90f59dc95beeb67b551cf5569a", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/02e4d0b3b5a510b2275480cb79c28d0d48bba720/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stdout?ref=02e4d0b3b5a510b2275480cb79c28d0d48bba720", "patch": "@@ -3,20 +3,20 @@ PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: #0 bytes(100..104),\n+        span: #0 bytes(86..90),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: #0 bytes(105..134),\n+        span: #0 bytes(91..120),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: #0 bytes(186..191),\n+                span: #0 bytes(173..178),\n             },\n         ],\n-        span: #0 bytes(135..193),\n+        span: #0 bytes(121..180),\n     },\n ]"}]}