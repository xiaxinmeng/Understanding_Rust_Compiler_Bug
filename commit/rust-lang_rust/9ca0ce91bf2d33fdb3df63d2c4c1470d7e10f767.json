{"sha": "9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYTBjZTkxYmYyZDMzZmRiM2RmNjNkMmM0YzE0NzBkN2UxMGY3Njc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-23T01:04:40Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-26T19:30:14Z"}, "message": "Initial implementation of typestate for closures.\n\nThere are still things not handled properly: relying on other preconditions\nof upvars is likely to cause bad things to happen. We probably want to\ndisallow it.", "tree": {"sha": "df96a8d3465d0d4d4915cb714f60f8982bafbbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df96a8d3465d0d4d4915cb714f60f8982bafbbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "html_url": "https://github.com/rust-lang/rust/commit/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166d4f5fe98aa58666322fe6413ca3b7bee832aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/166d4f5fe98aa58666322fe6413ca3b7bee832aa", "html_url": "https://github.com/rust-lang/rust/commit/166d4f5fe98aa58666322fe6413ca3b7bee832aa"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "e129fda3c90fc976f08056f77f5980658c5777a3", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "patch": "@@ -486,6 +486,15 @@ fn constraints_expr(&ty::ctxt cx, @expr e) -> (@ty::constr)[] {\n     }\n }\n \n+fn node_id_to_def_upvar_strict(&fn_ctxt cx, node_id id) -> def {\n+    alt (freevars::def_lookup(cx.ccx.tcx, cx.id, id)) {\n+        case (none) {\n+            log_err \"node_id_to_def: node_id \" + int::str(id) + \" has no def\";\n+            fail;\n+        }\n+        case (some(?d)) { ret d; }\n+    }\n+}\n fn node_id_to_def_strict(&ty::ctxt cx, node_id id) -> def {\n     alt (cx.def_map.find(id)) {\n         case (none) {"}, {"sha": "4082502d03a96a0ec44d18d5c50e772cee1fa547", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "patch": "@@ -299,6 +299,18 @@ fn handle_update(&fn_ctxt fcx, &@expr parent,\n     }\n }\n \n+fn handle_var(&fn_ctxt fcx, &pre_and_post rslt, node_id id, ident name) {\n+    auto df = node_id_to_def_upvar_strict(fcx, id);\n+    alt (df) {\n+        case (def_local(?d_id)) {\n+            auto i = bit_num(fcx, ninit(d_id.node, name));\n+            use_var(fcx, d_id.node);\n+            require_and_preserve(i, rslt);\n+        }\n+        case (_) {/* nothing to check */ }\n+    }\n+}\n+\n /* Fills in annotations as a side effect. Does not rebuild the expr */\n fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n     auto enclosing = fcx.enclosing;\n@@ -337,17 +349,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n         case (expr_path(?p)) {\n             auto rslt = expr_pp(fcx.ccx, e);\n             clear_pp(rslt);\n-            auto df = node_id_to_def_strict(fcx.ccx.tcx, e.id);\n-            alt (df) {\n-                case (def_local(?d_id)) {\n-                    auto i =\n-                        bit_num(fcx,\n-                          ninit(d_id.node, path_to_ident(fcx.ccx.tcx, p)));\n-                    use_var(fcx, d_id.node);\n-                    require_and_preserve(i, rslt);\n-                }\n-                case (_) {/* nothing to check */ }\n-            }\n+            handle_var(fcx, rslt, e.id, path_to_ident(fcx.ccx.tcx, p));\n         }\n         case (expr_self_method(?v)) { clear_pp(expr_pp(fcx.ccx, e)); }\n         case (expr_log(_, ?arg)) {\n@@ -367,7 +369,14 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n                 case (none) { clear_pp(expr_pp(fcx.ccx, e)); }\n             }\n         }\n-        case (expr_fn(?f)) { clear_pp(expr_pp(fcx.ccx, e)); }\n+        case (expr_fn(?f)) {\n+            auto rslt = expr_pp(fcx.ccx, e);\n+            clear_pp(rslt);\n+            auto upvars = freevars::get_freevar_uses(fcx.ccx.tcx, e.id);\n+            for (node_id id in *upvars) {\n+                handle_var(fcx, rslt, id, \"upvar\");\n+            }\n+        }\n         case (expr_block(?b)) {\n             find_pre_post_block(fcx, b);\n             auto p = block_pp(fcx.ccx, b);"}, {"sha": "bc9864aa59c3c7d85b416079ab0c3df882c32ecb", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=9ca0ce91bf2d33fdb3df63d2c4c1470d7e10f767", "patch": "@@ -208,7 +208,7 @@ fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n fn gen_if_local(&fn_ctxt fcx, &poststate p, &@expr e) -> bool {\n     alt (e.node) {\n         case (expr_path(?pth)) {\n-            alt (node_id_to_def(fcx.ccx, e.id)) {\n+            alt (freevars::def_lookup(fcx.ccx.tcx, fcx.id, e.id)) {\n                 case (some(def_local(?loc))) {\n                     ret set_in_poststate_ident(fcx, loc.node,\n                            path_to_ident(fcx.ccx.tcx, pth), p);"}]}