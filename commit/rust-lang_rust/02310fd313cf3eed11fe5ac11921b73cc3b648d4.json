{"sha": "02310fd313cf3eed11fe5ac11921b73cc3b648d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMzEwZmQzMTNjZjNlZWQxMWZlNWFjMTE5MjFiNzNjYzNiNjQ4ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-19T22:41:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-19T22:41:42Z"}, "message": "Auto merge of #32362 - bluss:float-fast-math, r=eddyb\n\nFix floating point fast-math intrinsics\n\nThe implementation did not handle the case where both operands were constants, which caused an llvm assertion:\n\n```\nrustc: //buildslave//rust-buildbot//slave//nightly-dist-rustc-musl-linux//build//src//llvm//include/llvm/Support/Casting.h:237:\ntypename llvm::cast_retty<X, Y*>::ret_type llvm::cast(Y*) [with X = llvm::Instruction; Y = llvm::Value; typename llvm::cast_retty<X, Y*>::ret_type = llvm::Instruction*]:\nAssertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n```", "tree": {"sha": "1993add0adf2c378c5071eff9f57dde930de0b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1993add0adf2c378c5071eff9f57dde930de0b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02310fd313cf3eed11fe5ac11921b73cc3b648d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02310fd313cf3eed11fe5ac11921b73cc3b648d4", "html_url": "https://github.com/rust-lang/rust/commit/02310fd313cf3eed11fe5ac11921b73cc3b648d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02310fd313cf3eed11fe5ac11921b73cc3b648d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eeb5062d115b846a66685e73ce29697f7eeee11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eeb5062d115b846a66685e73ce29697f7eeee11", "html_url": "https://github.com/rust-lang/rust/commit/8eeb5062d115b846a66685e73ce29697f7eeee11"}, {"sha": "ba89b255e86817e0a2f43198a6b802dafbc6ae9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba89b255e86817e0a2f43198a6b802dafbc6ae9e", "html_url": "https://github.com/rust-lang/rust/commit/ba89b255e86817e0a2f43198a6b802dafbc6ae9e"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "33174c1e9dfe36abdb0c91aa82000320b8e7c6a6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02310fd313cf3eed11fe5ac11921b73cc3b648d4/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/02310fd313cf3eed11fe5ac11921b73cc3b648d4/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=02310fd313cf3eed11fe5ac11921b73cc3b648d4", "patch": "@@ -165,8 +165,10 @@ extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, co\n }\n \n // enable fpmath flag UnsafeAlgebra\n-extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef Instr) {\n-    unwrap<Instruction>(Instr)->setHasUnsafeAlgebra(true);\n+extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n+    if (auto I = dyn_cast<Instruction>(unwrap<Value>(V))) {\n+        I->setHasUnsafeAlgebra(true);\n+    }\n }\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,"}, {"sha": "c1b4b55bd3723fca5f4c7ae882b6dac689c8823e", "filename": "src/test/run-pass/float_math.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02310fd313cf3eed11fe5ac11921b73cc3b648d4/src%2Ftest%2Frun-pass%2Ffloat_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02310fd313cf3eed11fe5ac11921b73cc3b648d4/src%2Ftest%2Frun-pass%2Ffloat_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat_math.rs?ref=02310fd313cf3eed11fe5ac11921b73cc3b648d4", "patch": "@@ -12,13 +12,19 @@\n \n use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n \n-fn main() {\n+#[inline(never)]\n+pub fn test_operations(a: f64, b: f64) {\n     // make sure they all map to the correct operation\n     unsafe {\n-        assert_eq!(fadd_fast(1., 2.), 1. + 2.);\n-        assert_eq!(fsub_fast(1., 2.), 1. - 2.);\n-        assert_eq!(fmul_fast(2., 3.), 2. * 3.);\n-        assert_eq!(fdiv_fast(10., 5.), 10. / 5.);\n-        assert_eq!(frem_fast(10., 5.), 10. % 5.);\n+        assert_eq!(fadd_fast(a, b), a + b);\n+        assert_eq!(fsub_fast(a, b), a - b);\n+        assert_eq!(fmul_fast(a, b), a * b);\n+        assert_eq!(fdiv_fast(a, b), a / b);\n+        assert_eq!(frem_fast(a, b), a % b);\n     }\n }\n+\n+fn main() {\n+    test_operations(1., 2.);\n+    test_operations(10., 5.);\n+}"}]}