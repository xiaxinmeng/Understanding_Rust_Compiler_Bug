{"sha": "8497061a49cde5b70c416f2c964d1f252d82a7a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTcwNjFhNDljZGU1YjcwYzQxNmYyYzk2NGQxZjI1MmQ4MmE3YTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-25T01:46:38Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-25T05:52:08Z"}, "message": "Hygienize `librustc_privacy`.", "tree": {"sha": "f929ed9b4a8169dae5eac5f5db121be7ee713182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f929ed9b4a8169dae5eac5f5db121be7ee713182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8497061a49cde5b70c416f2c964d1f252d82a7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8497061a49cde5b70c416f2c964d1f252d82a7a0", "html_url": "https://github.com/rust-lang/rust/commit/8497061a49cde5b70c416f2c964d1f252d82a7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8497061a49cde5b70c416f2c964d1f252d82a7a0/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfa2ef62a1d283eea2779ce0a4676a855536bfcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa2ef62a1d283eea2779ce0a4676a855536bfcd", "html_url": "https://github.com/rust-lang/rust/commit/bfa2ef62a1d283eea2779ce0a4676a855536bfcd"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "f5c8d11caaae46925229289c3278510c059fa993", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8497061a49cde5b70c416f2c964d1f252d82a7a0", "patch": "@@ -1515,18 +1515,23 @@ impl<'a> LoweringContext<'a> {\n \n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n         let mut name = i.ident.name;\n+        let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n         if let ItemKind::MacroDef(ref def) = i.node {\n             if !def.legacy || i.attrs.iter().any(|attr| attr.path == \"macro_export\") {\n-                let (body, legacy) = (def.stream(), def.legacy);\n                 self.exported_macros.push(hir::MacroDef {\n-                    name: name, attrs: attrs, id: i.id, span: i.span, body: body, legacy: legacy,\n+                    name: name,\n+                    vis: vis,\n+                    attrs: attrs,\n+                    id: i.id,\n+                    span: i.span,\n+                    body: def.stream(),\n+                    legacy: def.legacy,\n                 });\n             }\n             return None;\n         }\n \n-        let mut vis = self.lower_visibility(&i.vis, None);\n         let node = self.with_parent_def(i.id, |this| {\n             this.lower_item_kind(i.id, &mut name, &attrs, &mut vis, &i.node)\n         });"}, {"sha": "74a47b4e5b986e21b249394b27099cab2eabf16d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8497061a49cde5b70c416f2c964d1f252d82a7a0", "patch": "@@ -532,6 +532,7 @@ impl Crate {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MacroDef {\n     pub name: Name,\n+    pub vis: Visibility,\n     pub attrs: HirVec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,"}, {"sha": "86965723f30e34b9e170743bf1dbec66fc6e98bd", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=8497061a49cde5b70c416f2c964d1f252d82a7a0", "patch": "@@ -329,6 +329,7 @@ impl_stable_hash_for!(enum hir::QPath {\n \n impl_stable_hash_for!(struct hir::MacroDef {\n     name,\n+    vis,\n     attrs,\n     id,\n     span,"}, {"sha": "153da91db68f8a93de720b475fa9cf8cbdae5963", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8497061a49cde5b70c416f2c964d1f252d82a7a0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8497061a49cde5b70c416f2c964d1f252d82a7a0", "patch": "@@ -28,7 +28,7 @@ extern crate syntax_pos;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n+use rustc::hir::def_id::{LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::lint;\n@@ -37,7 +37,8 @@ use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::NodeSet;\n-use syntax::ast;\n+use syntax::ast::{self, CRATE_NODE_ID, Ident};\n+use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n use std::cmp;\n@@ -344,7 +345,35 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        self.update(md.id, Some(AccessLevel::Public));\n+        if md.legacy {\n+            self.update(md.id, Some(AccessLevel::Public));\n+            return\n+        }\n+\n+        let module_did = ty::DefIdTree::parent(self.tcx, self.tcx.hir.local_def_id(md.id)).unwrap();\n+        let mut module_id = self.tcx.hir.as_local_node_id(module_did).unwrap();\n+        let level = if md.vis == hir::Public { self.get(module_id) } else { None };\n+        let level = self.update(md.id, level);\n+        if level.is_none() {\n+            return\n+        }\n+\n+        loop {\n+            let module = if module_id == ast::CRATE_NODE_ID {\n+                &self.tcx.hir.krate().module\n+            } else if let hir::ItemMod(ref module) = self.tcx.hir.expect_item(module_id).node {\n+                module\n+            } else {\n+                unreachable!()\n+            };\n+            for id in &module.item_ids {\n+                self.update(id.id, level);\n+            }\n+            if module_id == ast::CRATE_NODE_ID {\n+                break\n+            }\n+            module_id = self.tcx.hir.get_parent_node(module_id);\n+        }\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n@@ -425,13 +454,15 @@ impl<'b, 'a, 'tcx> TypeVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'b\n struct NamePrivacyVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    current_item: DefId,\n+    current_item: ast::NodeId,\n }\n \n impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n     // Checks that a field is accessible.\n     fn check_field(&mut self, span: Span, def: &'tcx ty::AdtDef, field: &'tcx ty::FieldDef) {\n-        if !def.is_enum() && !field.vis.is_accessible_from(self.current_item, self.tcx) {\n+        let ident = Ident { ctxt: span.ctxt.modern(), ..keywords::Invalid.ident() };\n+        let def_id = self.tcx.adjust_ident(ident, def.did, self.current_item).1;\n+        if !def.is_enum() && !field.vis.is_accessible_from(def_id, self.tcx) {\n             struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of {} `{}` is private\",\n                              field.name, def.variant_descr(), self.tcx.item_path_str(def.did))\n                 .span_label(span, format!(\"field `{}` is private\", field.name))\n@@ -455,7 +486,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let orig_current_item = replace(&mut self.current_item, self.tcx.hir.local_def_id(item.id));\n+        let orig_current_item = replace(&mut self.current_item, item.id);\n         intravisit::walk_item(self, item);\n         self.current_item = orig_current_item;\n     }\n@@ -1182,7 +1213,7 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut visitor = NamePrivacyVisitor {\n         tcx: tcx,\n         tables: &ty::TypeckTables::empty(),\n-        current_item: DefId::local(CRATE_DEF_INDEX),\n+        current_item: CRATE_NODE_ID,\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}]}