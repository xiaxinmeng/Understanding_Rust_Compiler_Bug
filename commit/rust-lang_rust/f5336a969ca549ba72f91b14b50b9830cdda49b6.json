{"sha": "f5336a969ca549ba72f91b14b50b9830cdda49b6", "node_id": "C_kwDOAAsO6NoAKGY1MzM2YTk2OWNhNTQ5YmE3MmY5MWIxNGI1MGI5ODMwY2RkYTQ5YjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-09T21:39:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T02:06:19Z"}, "message": "Standardize arg suggestions between typeck and trait selection", "tree": {"sha": "0b4348407e14cd7fffb81663fab2722832e9fc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b4348407e14cd7fffb81663fab2722832e9fc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5336a969ca549ba72f91b14b50b9830cdda49b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5336a969ca549ba72f91b14b50b9830cdda49b6", "html_url": "https://github.com/rust-lang/rust/commit/f5336a969ca549ba72f91b14b50b9830cdda49b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5336a969ca549ba72f91b14b50b9830cdda49b6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3edd9f775b734deb215f05269e7af0b6102c50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3edd9f775b734deb215f05269e7af0b6102c50a", "html_url": "https://github.com/rust-lang/rust/commit/b3edd9f775b734deb215f05269e7af0b6102c50a"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "429f068c91b06431925a2881d9e3d4b1f0c557e2", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5336a969ca549ba72f91b14b50b9830cdda49b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5336a969ca549ba72f91b14b50b9830cdda49b6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=f5336a969ca549ba72f91b14b50b9830cdda49b6", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if ty.is_suggestable(self.tcx, false) {\n                                 format!(\"/* {ty} */\")\n                             } else {\n-                                \"\".to_string()\n+                                \"/* value */\".to_string()\n                             }\n                         })\n                         .collect::<Vec<_>>()"}, {"sha": "316afe28a0a9d199ec2afbe388a32e6895d475ec", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f5336a969ca549ba72f91b14b50b9830cdda49b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5336a969ca549ba72f91b14b50b9830cdda49b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f5336a969ca549ba72f91b14b50b9830cdda49b6", "patch": "@@ -21,14 +21,15 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n     GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, IsSuggestable,\n     ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n@@ -814,80 +815,85 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // Skipping binder here, remapping below\n         let self_ty = trait_pred.self_ty().skip_binder();\n \n-        let (def_id, output_ty, callable) = match *self_ty.kind() {\n-            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n-            ty::FnDef(def_id, _) => (\n-                def_id,\n-                self_ty.fn_sig(self.tcx).output(),\n-                match self.tcx.def_kind(def_id) {\n-                    DefKind::Ctor(..) => \"constructor\",\n-                    _ => \"function\",\n-                },\n-            ),\n+        let (def_id, inputs, output, kind) = match *self_ty.kind() {\n+            ty::Closure(def_id, substs) => {\n+                let sig = substs.as_closure().sig();\n+                (def_id, sig.inputs().map_bound(|inputs| &inputs[1..]), sig.output(), \"closure\")\n+            }\n+            ty::FnDef(def_id, _) => {\n+                let sig = self_ty.fn_sig(self.tcx);\n+                (\n+                    def_id,\n+                    sig.inputs(),\n+                    sig.output(),\n+                    match self.tcx.def_kind(def_id) {\n+                        DefKind::Ctor(..) => \"constructor\",\n+                        _ => \"function\",\n+                    },\n+                )\n+            }\n             _ => return false,\n         };\n-        let msg = format!(\"use parentheses to call the {}\", callable);\n-\n-        // \"We should really create a single list of bound vars from the combined vars\n-        // from the predicate and function, but instead we just liberate the function bound vars\"\n-        let output_ty = self.tcx.liberate_late_bound_regions(def_id, output_ty);\n+        let output = self.replace_bound_vars_with_fresh_vars(\n+            obligation.cause.span,\n+            LateBoundRegionConversionTime::FnCall,\n+            output,\n+        );\n+        let inputs = inputs.skip_binder().iter().map(|ty| {\n+            self.replace_bound_vars_with_fresh_vars(\n+                obligation.cause.span,\n+                LateBoundRegionConversionTime::FnCall,\n+                inputs.rebind(*ty),\n+            )\n+        });\n \n         // Remapping bound vars here\n-        let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output_ty));\n+        let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output));\n \n         let new_obligation =\n             self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred_and_self);\n-\n         if !self.predicate_must_hold_modulo_regions(&new_obligation) {\n             return false;\n         }\n \n-        let hir = self.tcx.hir();\n         // Get the name of the callable and the arguments to be used in the suggestion.\n-        let (snippet, sugg) = match hir.get_if_local(def_id) {\n+        let hir = self.tcx.hir();\n+\n+        let msg = format!(\"use parentheses to call the {}\", kind);\n+\n+        let args = inputs\n+            .map(|ty| {\n+                if ty.is_suggestable(self.tcx, false) {\n+                    format!(\"/* {ty} */\")\n+                } else {\n+                    \"/* value */\".to_string()\n+                }\n+            })\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        let name = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(hir::Closure { fn_decl, fn_decl_span, .. }),\n+                kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n                 ..\n             })) => {\n                 err.span_label(*fn_decl_span, \"consider calling this closure\");\n                 let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n                     return false;\n                 };\n-                let args = fn_decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                let sugg = format!(\"({})\", args);\n-                (format!(\"{}{}\", name, sugg), sugg)\n+                name.to_string()\n             }\n-            Some(hir::Node::Item(hir::Item {\n-                ident,\n-                kind: hir::ItemKind::Fn(.., body_id),\n-                ..\n-            })) => {\n+            Some(hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(..), .. })) => {\n                 err.span_label(ident.span, \"consider calling this function\");\n-                let body = hir.body(*body_id);\n-                let args = body\n-                    .params\n-                    .iter()\n-                    .map(|arg| match &arg.pat.kind {\n-                        hir::PatKind::Binding(_, _, ident, None)\n-                        // FIXME: provide a better suggestion when encountering `SelfLower`, it\n-                        // should suggest a method call.\n-                        if ident.name != kw::SelfLower => ident.to_string(),\n-                        _ => \"_\".to_string(),\n-                    })\n-                    .collect::<Vec<_>>()\n-                    .join(\", \");\n-                let sugg = format!(\"({})\", args);\n-                (format!(\"{}{}\", ident, sugg), sugg)\n+                ident.to_string()\n             }\n-            Some(hir::Node::Ctor(data)) => {\n+            Some(hir::Node::Ctor(..)) => {\n                 let name = self.tcx.def_path_str(def_id);\n                 err.span_label(\n                     self.tcx.def_span(def_id),\n                     format!(\"consider calling the constructor for `{}`\", name),\n                 );\n-                let args = data.fields().iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                let sugg = format!(\"({})\", args);\n-                (format!(\"{name}{sugg}\"), sugg)\n+                name\n             }\n             _ => return false,\n         };\n@@ -901,11 +907,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             err.span_suggestion_verbose(\n                 obligation.cause.span.shrink_to_hi(),\n                 &msg,\n-                sugg,\n+                format!(\"({args})\"),\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n-            err.help(&format!(\"{}: `{}`\", msg, snippet));\n+            err.help(&format!(\"{msg}: `{name}({args})`\"));\n         }\n         true\n     }"}, {"sha": "cacea71ac97d5759e2414a1cd852e862eb97076f", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5336a969ca549ba72f91b14b50b9830cdda49b6/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5336a969ca549ba72f91b14b50b9830cdda49b6/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=f5336a969ca549ba72f91b14b50b9830cdda49b6", "patch": "@@ -19,7 +19,7 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'a> fn(&'a i32) -> &'a i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for fn item `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n-   = help: use parentheses to call the function: `foo(s)`\n+   = help: use parentheses to call the function: `foo(/* &i32 */)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "8ffdff2a4a3272914e6b95e488f2fecc76c71097", "filename": "src/test/ui/suggestions/call-on-unimplemented-ctor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5336a969ca549ba72f91b14b50b9830cdda49b6/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5336a969ca549ba72f91b14b50b9830cdda49b6/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr?ref=f5336a969ca549ba72f91b14b50b9830cdda49b6", "patch": "@@ -16,8 +16,8 @@ LL | fn insert_resource<R: Resource>(resource: R) {}\n    |                       ^^^^^^^^ required by this bound in `insert_resource`\n help: use parentheses to call the constructor\n    |\n-LL |     insert_resource(Time(_));\n-   |                         +++\n+LL |     insert_resource(Time(/* u32 */));\n+   |                         +++++++++++\n \n error: aborting due to previous error\n "}]}