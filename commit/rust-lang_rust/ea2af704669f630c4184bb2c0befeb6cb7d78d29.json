{"sha": "ea2af704669f630c4184bb2c0befeb6cb7d78d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMmFmNzA0NjY5ZjYzMGM0MTg0YmIyYzBiZWZlYjZjYjdkNzhkMjk=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-18T06:38:11Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "Update with comments\n\nA bunch of nits fixed, and a new test for pretty printing the AST.", "tree": {"sha": "46c29de5cd49cd5482bbfea8cd7e5bded86c6e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c29de5cd49cd5482bbfea8cd7e5bded86c6e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea2af704669f630c4184bb2c0befeb6cb7d78d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2af704669f630c4184bb2c0befeb6cb7d78d29", "html_url": "https://github.com/rust-lang/rust/commit/ea2af704669f630c4184bb2c0befeb6cb7d78d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea2af704669f630c4184bb2c0befeb6cb7d78d29/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565", "html_url": "https://github.com/rust-lang/rust/commit/9fe793ae5df4bc9ea73c8e55c66616bd6e5fe565"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "aa9c255c6331c832edffab7ac616cc162888c25d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -2660,11 +2660,10 @@ impl<'a> State<'a> {\n                     s.print_type(ty);\n                     s.print_type_bounds(\":\", &param.bounds);\n                     // FIXME(const_generic_defaults)\n-                    if let Some(ref _default) = default {\n-                        // FIXME(const_generics_defaults): print the `default` value here\n+                    if let Some(ref default) = default {\n                         s.s.space();\n                         s.word_space(\"=\");\n-                        // s.print_anon_const(&default);\n+                        s.print_expr(&default.value);\n                     }\n                 }\n             }"}, {"sha": "f4717fc08c78dd0ee5521868e8f917040a3837b1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -963,10 +963,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .rev()\n             .filter_map(|param| match param.kind {\n                 ty::GenericParamDefKind::Lifetime => None,\n-                ty::GenericParamDefKind::Const { has_default }\n-                | ty::GenericParamDefKind::Type { has_default, .. } => {\n+                ty::GenericParamDefKind::Type { has_default, .. } => {\n                     Some((param.def_id, has_default))\n                 }\n+                // FIXME(const_generics:defaults)\n+                ty::GenericParamDefKind::Const { has_default: _has_default } => None,\n             })\n             .peekable();\n         let has_default = {"}, {"sha": "e10041a2971425e5f5aa2def8cd99bda181761d4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -122,7 +122,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }\n-    const_param_default => { tcx.arena.alloc(cdata.get_const_param_default(tcx, def_id.index)) }\n+    const_param_default => { tcx.mk_const(cdata.get_const_param_default(tcx, def_id.index)) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "7cfb051e703c59640947e17db82e6dfe1f30d2d2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -307,14 +307,14 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     mir_abstract_consts: Table<DefIndex, Lazy!(&'tcx [mir::abstract_const::Node<'tcx>])>,\n+    const_defaults: Table<DefIndex, Lazy<rustc_middle::ty::Const<'tcx>>>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a\n     // `DefPathTable`. This allows us to avoid deserializing an entire\n     // `DefPathTable` up front, since we may only ever use a few\n     // definitions from any given crate.\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n     def_path_hashes: Table<DefIndex, Lazy<DefPathHash>>,\n-    const_defaults: Table<DefIndex, Lazy<rustc_middle::ty::Const<'tcx>>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "343438e975e042957d220ba15d49db298afc9c05", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -206,8 +206,7 @@ impl<'tcx> Const<'tcx> {\n pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Const<'tcx> {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let default_def_id = match tcx.hir().get(hir_id) {\n-        hir::Node::AnonConst(ac)\n-        | hir::Node::GenericParam(hir::GenericParam {\n+        hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n             ..\n         }) => tcx.hir().local_def_id(ac.hir_id),"}, {"sha": "d30a8693959f39a17a7c381fb702fa8bcc9792be", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -120,10 +120,12 @@ impl<'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => (),\n-                GenericParamDefKind::Type { has_default, .. }\n-                | GenericParamDefKind::Const { has_default } => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     own_defaults.types += has_default as usize;\n                 }\n+                GenericParamDefKind::Const { has_default } => {\n+                    own_defaults.consts += has_default as usize;\n+                }\n             }\n         }\n "}, {"sha": "e092bb845ffacb874fbe6ecc54e7a71d1d278fde", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -931,10 +931,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n                 GenericParamDefKind::Const { has_default, .. } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n-                        // FIXME(const_generic_defaults)\n-                        // how should the error case be handled here?\n-                        // let default_const = self.ev.tcx.const_eval_poly(param.def_id).unwrap();\n-                        // self.visit(default_const);\n+                        self.visit(self.ev.tcx.const_param_default(param.def_id));\n                     }\n                 }\n             }\n@@ -1747,6 +1744,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n                         self.visit(self.tcx.type_of(param.def_id));\n                     }\n                 }\n+                // FIXME(const_evaluatable_checked): May want to look inside const here\n                 GenericParamDefKind::Const { .. } => {\n                     self.visit(self.tcx.type_of(param.def_id));\n                 }"}, {"sha": "cb0eea1b7067c7585eeb47dd51847904f2711f0c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -258,9 +258,9 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n                     if let Some(default) = default {\n-                        let def_id = self.tcx.hir().local_def_id(default.hir_id);\n+                        let default_def_id = self.tcx.hir().local_def_id(default.hir_id);\n                         // need to store default and type of default\n-                        self.tcx.ensure().type_of(def_id);\n+                        self.tcx.ensure().type_of(default_def_id);\n                         self.tcx.ensure().const_param_default(def_id);\n                     }\n                 }"}, {"sha": "e6e8d732beef3c436b498d83e73a831752cd7a21", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(staged_api)]\n+\n+#![feature(const_generics)]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+#![stable(feature = \"const_default_test\", since=\"none\")]\n+\n+\n+#[unstable(feature = \"const_default_stable\", issue=\"none\")]\n+pub struct ConstDefaultUnstable<const N: usize = 3>;\n+\n+#[stable(feature = \"const_default_unstable\", since=\"none\")]\n+pub struct ConstDefaultStable<const N: usize = {\n+  #[stable(feature = \"const_default_unstable_val\", since=\"none\")]\n+  3\n+}>;\n+\n+fn main() {}"}, {"sha": "a25d4baca1a978bb5895f6079f9ddc53cc78cc32", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.rs?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -0,0 +1,13 @@\n+// Test the AST pretty printer correctly handles default values for const generics\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+trait Foo<const KIND: bool = true> {}\n+\n+fn foo<const SIZE: usize = 5>() {}\n+\n+struct Range<const FROM: usize = 0, const LEN: usize = 0, const TO: usize = {FROM + LEN}>;"}, {"sha": "f7a1d2ca4b2ef6b3184a74a9c3dce7e883368190", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ea2af704669f630c4184bb2c0befeb6cb7d78d29/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=ea2af704669f630c4184bb2c0befeb6cb7d78d29", "patch": "@@ -0,0 +1,20 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+// Test the AST pretty printer correctly handles default values for const generics\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n+#![allow(incomplete_features)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+trait Foo<const KIND : bool = true> { }\n+\n+fn foo<const SIZE : usize = 5>() { }\n+\n+struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n+             { FROM + LEN }>;"}]}