{"sha": "2ecc2ac864739cff6aed2609021e2467dedb117a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlY2MyYWM4NjQ3MzljZmY2YWVkMjYwOTAyMWUyNDY3ZGVkYjExN2E=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-20T22:07:56Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-20T22:42:11Z"}, "message": "unit-arg - improve suggestion", "tree": {"sha": "f9eda722f4e968725698227c3312ad399fc65ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9eda722f4e968725698227c3312ad399fc65ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ecc2ac864739cff6aed2609021e2467dedb117a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ecc2ac864739cff6aed2609021e2467dedb117a", "html_url": "https://github.com/rust-lang/rust/commit/2ecc2ac864739cff6aed2609021e2467dedb117a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ecc2ac864739cff6aed2609021e2467dedb117a/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6220dff504b1ac1a949e34562db47fd058378f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6220dff504b1ac1a949e34562db47fd058378f5d", "html_url": "https://github.com/rust-lang/rust/commit/6220dff504b1ac1a949e34562db47fd058378f5d"}], "stats": {"total": 227, "additions": 115, "deletions": 112}, "files": [{"sha": "3f5b3a5bcd5d79c2fb96f0e203a89ccbeac350f0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 50, "deletions": 38, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2ecc2ac864739cff6aed2609021e2467dedb117a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ecc2ac864739cff6aed2609021e2467dedb117a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2ecc2ac864739cff6aed2609021e2467dedb117a", "patch": "@@ -11,8 +11,8 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, QPath, Stmt, StmtKind, TraitFn,\n-    TraitItem, TraitItemKind, TyKind, UnOp,\n+    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n+    TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -29,10 +29,10 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n-    qpath_res, sext, snippet, snippet_block_with_applicability, snippet_opt, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    qpath_res, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -844,43 +844,54 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                         Applicability::MaybeIncorrect,\n                     );\n                     or = \"or \";\n+                    applicability = Applicability::MaybeIncorrect;\n                 });\n-            let sugg = args_to_recover\n+\n+            let arg_snippets: Vec<String> = args_to_recover\n+                .iter()\n+                .filter_map(|arg| snippet_opt(cx, arg.span))\n+                .collect();\n+            let arg_snippets_without_empty_blocks: Vec<String> = args_to_recover\n                 .iter()\n                 .filter(|arg| !is_empty_block(arg))\n-                .enumerate()\n-                .map(|(i, arg)| {\n-                    let indent = if i == 0 {\n-                        0\n-                    } else {\n-                        indent_of(cx, expr.span).unwrap_or(0)\n-                    };\n-                    format!(\n-                        \"{}{};\",\n-                        \" \".repeat(indent),\n-                        snippet_block_with_applicability(cx, arg.span, \"..\", Some(expr.span), &mut applicability)\n-                    )\n-                })\n-                .collect::<Vec<String>>();\n-            let mut and = \"\";\n-            if !sugg.is_empty() {\n-                let plural = if sugg.len() > 1 { \"s\" } else { \"\" };\n-                db.span_suggestion(\n-                    expr.span.with_hi(expr.span.lo()),\n-                    &format!(\"{}move the expression{} in front of the call...\", or, plural),\n-                    format!(\"{}\\n\", sugg.join(\"\\n\")),\n-                    applicability,\n-                );\n-                and = \"...and \"\n+                .filter_map(|arg| snippet_opt(cx, arg.span))\n+                .collect();\n+\n+            if let Some(mut sugg) = snippet_opt(cx, expr.span) {\n+                arg_snippets.iter().for_each(|arg| {\n+                    sugg = sugg.replacen(arg, \"()\", 1);\n+                });\n+                sugg = format!(\"{}{}{}\", arg_snippets_without_empty_blocks.join(\"; \"), \"; \", sugg);\n+                let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(expr.hir_id));\n+                if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n+                    // expr is not in a block statement or result expression position, wrap in a block\n+                    sugg = format!(\"{{ {} }}\", sugg);\n+                }\n+\n+                if arg_snippets_without_empty_blocks.is_empty() {\n+                    db.multipart_suggestion(\n+                        &format!(\"use {}unit literal{} instead\", singular, plural),\n+                        args_to_recover\n+                            .iter()\n+                            .map(|arg| (arg.span, \"()\".to_string()))\n+                            .collect::<Vec<_>>(),\n+                        applicability,\n+                    );\n+                } else {\n+                    let plural = arg_snippets_without_empty_blocks.len() > 1;\n+                    let empty_or_s = if plural { \"s\" } else { \"\" };\n+                    let it_or_them = if plural { \"them\" } else { \"it\" };\n+                    db.span_suggestion(\n+                        expr.span,\n+                        &format!(\n+                            \"{}move the expression{} in front of the call and replace {} with the unit literal `()`\",\n+                            or, empty_or_s, it_or_them\n+                        ),\n+                        sugg,\n+                        applicability,\n+                    );\n+                }\n             }\n-            db.multipart_suggestion(\n-                &format!(\"{}use {}unit literal{} instead\", and, singular, plural),\n-                args_to_recover\n-                    .iter()\n-                    .map(|arg| (arg.span, \"()\".to_string()))\n-                    .collect::<Vec<_>>(),\n-                applicability,\n-            );\n         },\n     );\n }\n@@ -2055,6 +2066,7 @@ impl PartialOrd for FullInt {\n         })\n     }\n }\n+\n impl Ord for FullInt {\n     #[must_use]\n     fn cmp(&self, other: &Self) -> Ordering {"}, {"sha": "2e2bd054e42aa027231c3f9ebe8a376f214079c1", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=2ecc2ac864739cff6aed2609021e2467dedb117a", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n+#![allow(clippy::no_effect, unused_must_use, unused_variables, clippy::unused_unit)]\n \n use std::fmt::Debug;\n \n@@ -47,6 +47,11 @@ fn bad() {\n             foo(3);\n         },\n     );\n+    // here Some(foo(2)) isn't the top level statement expression, wrap the suggestion in a block\n+    None.or(Some(foo(2)));\n+    // in this case, the suggestion can be inlined, no need for a surrounding block\n+    // foo(()); foo(()) instead of { foo(()); foo(()) }\n+    foo(foo(()))\n }\n \n fn ok() {"}, {"sha": "2a0cc1f18e27cf04878fc3ca1c56932e7a5e5e2c", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 53, "deletions": 58, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=2ecc2ac864739cff6aed2609021e2467dedb117a", "patch": "@@ -11,31 +11,23 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         1\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         1;\n-LL |     };\n+LL |     }; foo(());\n    |\n-help: ...and use a unit literal instead\n-   |\n-LL |     foo(());\n-   |         ^^\n \n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:26:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n-   |\n-LL |     foo(1);\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-help: ...and use a unit literal instead\n-   |\n-LL |     foo(());\n-   |         ^^\n+LL |     foo(1); foo(());\n+   |     ^^^^^^^^^^^^^^^\n \n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:27:5\n@@ -50,17 +42,13 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         foo(2)\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         foo(1);\n LL |         foo(2);\n-LL |     };\n-   |\n-help: ...and use a unit literal instead\n+LL |     }; foo(());\n    |\n-LL |     foo(());\n-   |         ^^\n \n error: passing a unit value to a function\n   --> $DIR/unit_arg.rs:32:5\n@@ -74,32 +62,23 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         1\n    |\n-help: or move the expression in front of the call...\n+help: or move the expression in front of the call and replace it with the unit literal `()`\n    |\n LL |     {\n LL |         1;\n-LL |     };\n+LL |     }; b.bar(());\n    |\n-help: ...and use a unit literal instead\n-   |\n-LL |     b.bar(());\n-   |           ^^\n \n error: passing unit values to a function\n   --> $DIR/unit_arg.rs:35:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expressions in front of the call...\n-   |\n-LL |     foo(0);\n-LL |     foo(1);\n-   |\n-help: ...and use unit literals instead\n+help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     taking_multiple_units((), ());\n-   |                           ^^  ^^\n+LL |     foo(0); foo(1); taking_multiple_units((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: passing unit values to a function\n   --> $DIR/unit_arg.rs:36:5\n@@ -114,18 +93,13 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |         foo(2)\n    |\n-help: or move the expressions in front of the call...\n+help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     foo(0);\n-LL |     {\n+LL |     foo(0); {\n LL |         foo(1);\n LL |         foo(2);\n-LL |     };\n-   |\n-help: ...and use unit literals instead\n+LL |     }; taking_multiple_units((), ());\n    |\n-LL |     taking_multiple_units((), ());\n-   |                           ^^  ^^\n \n error: passing unit values to a function\n   --> $DIR/unit_arg.rs:40:5\n@@ -147,35 +121,56 @@ help: remove the semicolon from the last statement in the block\n    |\n LL |             foo(3)\n    |\n-help: or move the expressions in front of the call...\n+help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     {\n-LL |         foo(0);\n-LL |         foo(1);\n-LL |     };\n-LL |     {\n-LL |         foo(2);\n+LL |             foo(0);\n+LL |             foo(1);\n+LL |         }; {\n+LL |             foo(2);\n+LL |             foo(3);\n  ...\n-help: ...and use unit literals instead\n+\n+error: use of `or` followed by a function call\n+  --> $DIR/unit_arg.rs:51:10\n    |\n-LL |         (),\n-LL |         (),\n+LL |     None.or(Some(foo(2)));\n+   |          ^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(foo(2)))`\n    |\n+   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:82:5\n+  --> $DIR/unit_arg.rs:51:13\n    |\n-LL |     Some(foo(1))\n+LL |     None.or(Some(foo(2)));\n+   |             ^^^^^^^^^^^^\n+   |\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     None.or({ foo(2); Some(()) });\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:54:5\n+   |\n+LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n+help: move the expression in front of the call and replace it with the unit literal `()`\n+   |\n+LL |     foo(()); foo(())\n+   |\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:87:5\n+   |\n+LL |     Some(foo(1))\n+   |     ^^^^^^^^^^^^\n    |\n-LL |     foo(1);\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-help: ...and use a unit literal instead\n+LL |     foo(1); Some(())\n    |\n-LL |     Some(())\n-   |          ^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "4cbbc8b8cd43ed2c5c465d9617e7785faf23546c", "filename": "tests/ui/unit_arg_empty_blocks.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ecc2ac864739cff6aed2609021e2467dedb117a/tests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.stderr?ref=2ecc2ac864739cff6aed2609021e2467dedb117a", "patch": "@@ -22,30 +22,21 @@ error: passing unit values to a function\n LL |     taking_two_units({}, foo(0));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expression in front of the call...\n+help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(0);\n-   |\n-help: ...and use unit literals instead\n-   |\n-LL |     taking_two_units((), ());\n-   |                      ^^  ^^\n+LL |     foo(0); taking_two_units((), ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: passing unit values to a function\n   --> $DIR/unit_arg_empty_blocks.rs:18:5\n    |\n LL |     taking_three_units({}, foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: move the expressions in front of the call...\n-   |\n-LL |     foo(0);\n-LL |     foo(1);\n-   |\n-help: ...and use unit literals instead\n+help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     taking_three_units((), (), ());\n-   |                        ^^  ^^  ^^\n+LL |     foo(0); foo(1); taking_three_units((), (), ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}]}