{"sha": "d1a784e7b9c4cfe9ce216eb89c362726ff890ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTc4NGU3YjljNGNmZTljZTIxNmViODljMzYyNzI2ZmY4OTBlYTA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-17T22:18:05Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-18T13:21:20Z"}, "message": "Treat string literals separately from other constants", "tree": {"sha": "21a4460dae29c73aba7d08b8ee8ac60778d0c22c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21a4460dae29c73aba7d08b8ee8ac60778d0c22c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0", "html_url": "https://github.com/rust-lang/rust/commit/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4172076ea9b886fefadafda6e479ab6c574bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4172076ea9b886fefadafda6e479ab6c574bff", "html_url": "https://github.com/rust-lang/rust/commit/aa4172076ea9b886fefadafda6e479ab6c574bff"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "31ec83a22baf485b140f1d34f2ab905598562fe3", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a784e7b9c4cfe9ce216eb89c362726ff890ea0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=d1a784e7b9c4cfe9ce216eb89c362726ff890ea0", "patch": "@@ -827,6 +827,8 @@ enum Constructor<'tcx> {\n     IntRange(IntRange<'tcx>),\n     /// Ranges of floating-point literal values (`2.0..=5.2`).\n     FloatRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),\n+    /// String literals. Strings are not quite the same as `&[u8]` so we treat them separately.\n+    Str(&'tcx ty::Const<'tcx>),\n     /// Array and slice patterns.\n     Slice(Slice),\n     /// Fake extra constructor for enums that aren't allowed to be matched exhaustively.\n@@ -863,7 +865,7 @@ impl<'tcx> Constructor<'tcx> {\n \n         match self {\n             // Those constructors can only match themselves.\n-            Single | Variant(_) | ConstantValue(..) | FloatRange(..) => {\n+            Single | Variant(_) | ConstantValue(..) | Str(..) | FloatRange(..) => {\n                 if other_ctors.iter().any(|c| c == self) { vec![] } else { vec![self.clone()] }\n             }\n             &Slice(slice) => {\n@@ -1013,6 +1015,7 @@ impl<'tcx> Constructor<'tcx> {\n                 }\n             },\n             &ConstantValue(value) => PatKind::Constant { value },\n+            &Str(value) => PatKind::Constant { value },\n             &FloatRange(lo, hi, end) => PatKind::Range(PatRange { lo, hi, end }),\n             IntRange(range) => return range.to_pat(cx.tcx),\n             NonExhaustive => PatKind::Wild,\n@@ -1167,7 +1170,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                 }\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", constructor, ty),\n             },\n-            ConstantValue(..) | FloatRange(..) | IntRange(..) | NonExhaustive => Fields::empty(),\n+            ConstantValue(..) | Str(..) | FloatRange(..) | IntRange(..) | NonExhaustive => {\n+                Fields::empty()\n+            }\n         };\n         debug!(\"Fields::wildcards({:?}, {:?}) = {:#?}\", constructor, ty, ret);\n         ret\n@@ -2106,6 +2111,7 @@ fn pat_constructor<'tcx>(\n             } else {\n                 match value.ty.kind() {\n                     ty::Float(_) => Some(FloatRange(value, value, RangeEnd::Included)),\n+                    ty::Ref(_, t, _) if t.is_str() => Some(Str(value)),\n                     _ => Some(ConstantValue(value)),\n                 }\n             }\n@@ -2508,7 +2514,7 @@ fn specialize_one_pattern<'p, 'tcx>(\n                         return None;\n                     }\n                 }\n-                ConstantValue(ctor_value) => {\n+                ConstantValue(ctor_value) | Str(ctor_value) => {\n                     let pat_value = match *pat.kind {\n                         PatKind::Constant { value } => value,\n                         _ => span_bug!("}]}