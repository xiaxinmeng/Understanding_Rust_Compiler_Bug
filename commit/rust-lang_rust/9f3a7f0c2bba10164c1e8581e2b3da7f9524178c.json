{"sha": "9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmM2E3ZjBjMmJiYTEwMTY0YzFlODU4MWUyYjNkYTdmOTUyNDE3OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T06:25:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T06:25:58Z"}, "message": "Auto merge of #25525 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25465, #25469, #25472, #25474, #25476, #25484, #25490, #25493, #25503, #25506, #25508, #25510, #25516, #25522\n- Failed merges:", "tree": {"sha": "4822093f18d67cd2acbbded5d23c2f1b1eeeacfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4822093f18d67cd2acbbded5d23c2f1b1eeeacfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "html_url": "https://github.com/rust-lang/rust/commit/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2", "html_url": "https://github.com/rust-lang/rust/commit/4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2"}, {"sha": "a0815c8c747eb63adec7b863047c0f176eafce94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0815c8c747eb63adec7b863047c0f176eafce94", "html_url": "https://github.com/rust-lang/rust/commit/a0815c8c747eb63adec7b863047c0f176eafce94"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "6e2ed39f875ce430b7ebd014f92610028412b244", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -8,7 +8,7 @@ Aaron Raimist <aaron@aaronraimist.com>\n Aaron Todd <github@opprobrio.us>\n Aaron Turon <aturon@mozilla.com>\n Aaron Weiss <aaronweiss74@gmail.com>\n-Abhishek Chanda <abhishek@cloudscaling.com>\n+Abhishek Chanda <abhishek.becs@gmail.com>\n Adam Bozanich <adam.boz@gmail.com>\n Adam Jacob <adam@opscode.com>\n Adam Roben <adam@roben.org>"}, {"sha": "4d7862788fb2a819b2bf30b9736f35be1ba92c09", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -5,8 +5,8 @@\n There aren't many large programs yet. The Rust [compiler][rustc], 60,000+ lines at the time of writing, is written in Rust. As the oldest body of Rust code it has gone through many iterations of the language, and some parts are nicer to look at than others. It may not be the best code to learn from, but [borrowck] and [resolve] were written recently.\n \n [rustc]: https://github.com/rust-lang/rust/tree/master/src/librustc\n-[resolve]: https://github.com/rust-lang/rust/blob/master/src/librustc/middle/resolve.rs\n-[borrowck]: https://github.com/rust-lang/rust/blob/master/src/librustc/middle/borrowck/\n+[resolve]: https://github.com/rust-lang/rust/tree/master/src/librustc_resolve\n+[borrowck]: https://github.com/rust-lang/rust/tree/master/src/librustc_borrowck/borrowck\n \n A research browser engine called [Servo][servo], currently 30,000+ lines across more than a dozen crates, will be exercising a lot of Rust's distinctive type-system and concurrency features, and integrating many native libraries.\n \n@@ -20,8 +20,8 @@ Some examples that demonstrate different aspects of the language:\n * The standard library's [json] module. Enums and pattern matching\n \n [sprocketnes]: https://github.com/pcwalton/sprocketnes\n-[hash]: https://github.com/rust-lang/rust/blob/master/src/libstd/hash/mod.rs\n-[HashMap]: https://github.com/rust-lang/rust/blob/master/src/libcollections/hashmap.rs\n+[hash]: https://github.com/rust-lang/rust/tree/master/src/libcore/hash\n+[HashMap]: https://github.com/rust-lang/rust/tree/master/src/libstd/collections/hash\n [json]: https://github.com/rust-lang/rust/blob/master/src/libserialize/json.rs\n \n You may also be interested in browsing [trending Rust repositories][github-rust] on GitHub."}, {"sha": "035f4de9da2a36a74b6b9538b67a4ded9a66ddc0", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -320,7 +320,7 @@ from the standard library, and so we need to `use` it.\n We now print out two messages, with a `sleep_ms()` in the middle. This will\n simulate the time it takes a philosopher to eat.\n \n-If you run this program, You should see each philosopher eat in turn:\n+If you run this program, you should see each philosopher eat in turn:\n \n ```text\n Baruch Spinoza is eating.\n@@ -480,7 +480,7 @@ struct Table {\n }\n ```\n \n-This `Table` has an vector of `Mutex`es. A mutex is a way to control\n+This `Table` has a vector of `Mutex`es. A mutex is a way to control\n concurrency: only one thread can access the contents at once. This is exactly\n the property we need with our forks. We use an empty tuple, `()`, inside the\n mutex, since we\u2019re not actually going to use the value, just hold onto it."}, {"sha": "b182ac745b8f485803097e7b3d18b3028ffcf9d6", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -23,8 +23,8 @@ $ sh rustup.sh\n If you're on Windows, please download either the [32-bit installer][win32] or\n the [64-bit installer][win64] and run it.\n \n-[win32]: https://static.rust-lang.org/dist/rust-1.0.0-beta-i686-pc-windows-gnu.msi\n-[win64]: https://static.rust-lang.org/dist/rust-1.0.0-beta-x86_64-pc-windows-gnu.msi\n+[win32]: https://static.rust-lang.org/dist/rust-1.0.0-i686-pc-windows-gnu.msi\n+[win64]: https://static.rust-lang.org/dist/rust-1.0.0-x86_64-pc-windows-gnu.msi\n \n ## Uninstalling\n \n@@ -74,7 +74,7 @@ $ rustc --version\n You should see the version number, commit hash, commit date and build date:\n \n ```bash\n-rustc 1.0.0-beta (9854143cb 2015-04-02) (built 2015-04-02)\n+rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)\n ```\n \n If you did, Rust has been installed successfully! Congrats!"}, {"sha": "868034ab23a31d6661f1fd9acf261f9623567ff8", "filename": "src/doc/trpl/rust-inside-other-languages.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Frust-inside-other-languages.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Frust-inside-other-languages.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Frust-inside-other-languages.md?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -104,7 +104,7 @@ fn process() {\n     let handles: Vec<_> = (0..10).map(|_| {\n         thread::spawn(|| {\n             let mut _x = 0;\n-            for _ in (0..5_000_001) {\n+            for _ in (0..5_000_000) {\n                 _x += 1\n             }\n         })"}, {"sha": "ece2c390be3b719a775a27e1b33512e08c1ae83a", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -16,11 +16,11 @@ Rust has two main types of strings: `&str` and `String`. Let\u2019s talk about\n `&'static str`:\n \n ```rust\n-let string = \"Hello there.\"; // string: &'static str\n+let greeting = \"Hello there.\"; // greeting: &'static str\n ```\n \n This string is statically allocated, meaning that it\u2019s saved inside our\n-compiled program, and exists for the entire duration it runs. The `string`\n+compiled program, and exists for the entire duration it runs. The `greeting`\n binding is a reference to this statically allocated string. String slices\n have a fixed size, and cannot be mutated.\n "}, {"sha": "1f2443d9771800272e567b9103e45178444bdb04", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -433,7 +433,7 @@ impl String {\n     ///\n     /// ```\n     /// let mut s = String::new();\n-    /// s.reserve(10);\n+    /// s.reserve_exact(10);\n     /// assert!(s.capacity() >= 10);\n     /// ```\n     #[inline]"}, {"sha": "a5fbc4374e0b91317e23de594b057c7ab9635d23", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -539,7 +539,7 @@ impl<K, V, S> HashMap<K, V, S>\n {\n     /// Creates an empty hashmap which will use the given hasher to hash keys.\n     ///\n-    /// The creates map has the default initial capacity.\n+    /// The created map has the default initial capacity.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b83a8efe1d0832a3bfc455d6538a80253edca70d", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -53,8 +53,7 @@ use vec::Vec;\n ///     fn my_printer(s: *const libc::c_char);\n /// }\n ///\n-/// let to_print = &b\"Hello, world!\"[..];\n-/// let c_to_print = CString::new(to_print).unwrap();\n+/// let c_to_print = CString::new(\"Hello, world!\").unwrap();\n /// unsafe {\n ///     my_printer(c_to_print.as_ptr());\n /// }"}, {"sha": "481d9e69abd533e3a8adef732fdd16dcdbd32c57", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -1099,20 +1099,19 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(path_ext)]\n /// use std::io;\n-/// use std::fs::{self, PathExt, DirEntry};\n+/// use std::fs::{self, DirEntry};\n /// use std::path::Path;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n-/// fn visit_dirs(dir: &Path, cb: &mut FnMut(DirEntry)) -> io::Result<()> {\n-///     if dir.is_dir() {\n+/// fn visit_dirs(dir: &Path, cb: &Fn(&DirEntry)) -> io::Result<()> {\n+///     if try!(fs::metadata(dir)).is_dir() {\n ///         for entry in try!(fs::read_dir(dir)) {\n ///             let entry = try!(entry);\n-///             if entry.path().is_dir() {\n+///             if try!(fs::metadata(entry.path())).is_dir() {\n ///                 try!(visit_dirs(&entry.path(), cb));\n ///             } else {\n-///                 cb(entry);\n+///                 cb(&entry);\n ///             }\n ///         }\n ///     }"}, {"sha": "a79a451305dafb6893e8aa56536ceb59858620ef", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -19,7 +19,7 @@ use sys_common::net as net_imp;\n \n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n-pub use self::tcp::{TcpStream, TcpListener};\n+pub use self::tcp::{TcpStream, TcpListener, Incoming};\n pub use self::udp::UdpSocket;\n pub use self::parser::AddrParseError;\n "}, {"sha": "6732af556e0f1d8cba29213ccda259cb446a8821", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -1485,7 +1485,7 @@ impl Path {\n         iter_after(self.components().rev(), child.as_ref().components().rev()).is_some()\n     }\n \n-    /// Extracts the stem (non-extension) portion of `self.file()`.\n+    /// Extracts the stem (non-extension) portion of `self.file_name()`.\n     ///\n     /// The stem is:\n     ///\n@@ -1508,7 +1508,7 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n-    /// Extracts the extension of `self.file()`, if possible.\n+    /// Extracts the extension of `self.file_name()`, if possible.\n     ///\n     /// The extension is:\n     ///"}, {"sha": "cfa75ff9763e91bbeb0700d63b07af4371830e32", "filename": "src/test/compile-fail/gated-associated_consts.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -11,13 +11,11 @@\n trait MyTrait {\n     const C: bool;\n     //~^ associated constants are experimental\n-    //~| add #![feature(associated_consts)] to the crate attributes to enable\n }\n \n struct Foo;\n \n impl Foo {\n     const C: bool = true;\n     //~^ associated constants are experimental\n-    //~| add #![feature(associated_consts)] to the crate attributes to enable\n }"}, {"sha": "f4266fada32fc712a280994ecfe945fa28428ea2", "filename": "src/test/run-pass/issue18173.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Ftest%2Frun-pass%2Fissue18173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3a7f0c2bba10164c1e8581e2b3da7f9524178c/src%2Ftest%2Frun-pass%2Fissue18173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue18173.rs?ref=9f3a7f0c2bba10164c1e8581e2b3da7f9524178c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    type T;\n+}\n+\n+// should be able to use a trait with an associated type without specifying it as an argument\n+trait Bar<F: Foo> {\n+    fn bar(foo: &F);\n+}\n+\n+pub fn main() {\n+}"}]}