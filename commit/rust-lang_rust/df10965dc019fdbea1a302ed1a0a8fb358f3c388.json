{"sha": "df10965dc019fdbea1a302ed1a0a8fb358f3c388", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTA5NjVkYzAxOWZkYmVhMWEzMDJlZDFhMGE4ZmIzNThmM2MzODg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T19:15:13Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T19:15:13Z"}, "message": "Prevent ICE in const-prop array oob check", "tree": {"sha": "9a8ce132250844c4f4d532daa00a4b3b7caf6267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8ce132250844c4f4d532daa00a4b3b7caf6267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df10965dc019fdbea1a302ed1a0a8fb358f3c388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df10965dc019fdbea1a302ed1a0a8fb358f3c388", "html_url": "https://github.com/rust-lang/rust/commit/df10965dc019fdbea1a302ed1a0a8fb358f3c388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df10965dc019fdbea1a302ed1a0a8fb358f3c388/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d834550d54e4c5211f03f877c1756425f24be98", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d834550d54e4c5211f03f877c1756425f24be98", "html_url": "https://github.com/rust-lang/rust/commit/1d834550d54e4c5211f03f877c1756425f24be98"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "885d70dc4304dee3e3cd02c3118df7555aab58b6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=df10965dc019fdbea1a302ed1a0a8fb358f3c388", "patch": "@@ -591,8 +591,8 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n             if let Some(value) = self.eval_operand(cond, source_info) {\n                 trace!(\"assertion on {:?} should be {:?}\", value, expected);\n-                let expected = Immediate::Scalar(Scalar::from_bool(*expected).into());\n-                if expected != value.0.to_immediate() {\n+                let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n+                if expected != self.ecx.read_scalar(value.0).unwrap() {\n                     // poison all places this operand references so that further code\n                     // doesn't use the invalid value\n                     match cond {\n@@ -628,20 +628,20 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             let len = self\n                                 .eval_operand(len, source_info)\n                                 .expect(\"len must be const\");\n-                            let len = match len.0.to_immediate() {\n-                                Immediate::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                            let len = match self.ecx.read_scalar(len.0) {\n+                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n                                     bits, ..\n                                 })) => bits,\n-                                _ => bug!(\"const len not primitive: {:?}\", len),\n+                                other => bug!(\"const len not primitive: {:?}\", other),\n                             };\n                             let index = self\n                                 .eval_operand(index, source_info)\n                                 .expect(\"index must be const\");\n-                            let index = match index.0.to_immediate() {\n-                                Immediate::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits {\n+                            let index = match self.ecx.read_scalar(index.0) {\n+                                Ok(ScalarMaybeUndef::Scalar(Scalar::Bits {\n                                     bits, ..\n                                 })) => bits,\n-                                _ => bug!(\"const index not primitive: {:?}\", index),\n+                                other => bug!(\"const index not primitive: {:?}\", other),\n                             };\n                             format!(\n                                 \"index out of bounds: \\"}, {"sha": "17880adc7af2f96025165922209c4df87451cd12", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=df10965dc019fdbea1a302ed1a0a8fb358f3c388", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+}\n\\ No newline at end of file"}, {"sha": "749ef952b5ddbee40f4bf382809dd21241788aac", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df10965dc019fdbea1a302ed1a0a8fb358f3c388/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=df10965dc019fdbea1a302ed1a0a8fb358f3c388", "patch": "@@ -0,0 +1,10 @@\n+error: index out of bounds: the len is 3 but the index is 3\n+  --> $DIR/const-prop-ice.rs:2:5\n+   |\n+LL |     [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}]}