{"sha": "0848d1c6a5908a9c3e6545e8a527027b164c7d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NDhkMWM2YTU5MDhhOWMzZTY1NDVlOGE1MjcwMjdiMTY0YzdkMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T15:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T15:50:13Z"}, "message": "Auto merge of #25135 - alexcrichton:generalize-env-set-var, r=aturon\n\nMany bounds are currently of the form `T: ?Sized + AsRef<OsStr>` where the\r\nargument is `&T`, but the pattern elsewhere (primarily `std::fs`) has been to\r\nremove the `?Sized` bound and take `T` instead (allowing usage with both\r\nreferences and owned values). This commit generalizes the possible apis in\r\n`std::env` from `&T` to `T` in this fashion.\r\n\r\nThe `split_paths` function remains the same as the return value borrows the\r\ninput value, so ta borrowed reference is required.", "tree": {"sha": "fa7cdab9a5eea0c262fad656336d42e5f91fe70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7cdab9a5eea0c262fad656336d42e5f91fe70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0848d1c6a5908a9c3e6545e8a527027b164c7d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0848d1c6a5908a9c3e6545e8a527027b164c7d05", "html_url": "https://github.com/rust-lang/rust/commit/0848d1c6a5908a9c3e6545e8a527027b164c7d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0848d1c6a5908a9c3e6545e8a527027b164c7d05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a83fa271d9ea85bca163c26dc8896ac394976e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a83fa271d9ea85bca163c26dc8896ac394976e4", "html_url": "https://github.com/rust-lang/rust/commit/5a83fa271d9ea85bca163c26dc8896ac394976e4"}, {"sha": "9b88cd1c691626bb38c243c1996d1d2d045bbeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b88cd1c691626bb38c243c1996d1d2d045bbeda", "html_url": "https://github.com/rust-lang/rust/commit/9b88cd1c691626bb38c243c1996d1d2d045bbeda"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "fe379208774a5ec081bd862692e620d2f661485f", "filename": "src/libstd/env.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0848d1c6a5908a9c3e6545e8a527027b164c7d05/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0848d1c6a5908a9c3e6545e8a527027b164c7d05/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=0848d1c6a5908a9c3e6545e8a527027b164c7d05", "patch": "@@ -66,7 +66,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn set_current_dir<P: AsRef<Path> + ?Sized>(p: &P) -> io::Result<()> {\n+pub fn set_current_dir<P: AsRef<Path>>(p: P) -> io::Result<()> {\n     os_imp::chdir(p.as_ref())\n }\n \n@@ -175,7 +175,7 @@ impl Iterator for VarsOs {\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsRef<OsStr> {\n+pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {\n     match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n         None => Err(VarError::NotPresent)\n@@ -197,7 +197,7 @@ pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsRef<OsStr>\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn var_os<K: ?Sized>(key: &K) -> Option<OsString> where K: AsRef<OsStr> {\n+pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n     let _g = ENV_LOCK.lock();\n     os_imp::getenv(key.as_ref())\n }\n@@ -253,9 +253,7 @@ impl Error for VarError {\n /// assert_eq!(env::var(key), Ok(\"VALUE\".to_string()));\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n-    where K: AsRef<OsStr>, V: AsRef<OsStr>\n-{\n+pub fn set_var<K: AsRef<OsStr>, V: AsRef<OsStr>>(k: K, v: V) {\n     let _g = ENV_LOCK.lock();\n     os_imp::setenv(k.as_ref(), v.as_ref())\n }\n@@ -275,7 +273,7 @@ pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n /// assert!(env::var(key).is_err());\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n-pub fn remove_var<K: ?Sized>(k: &K) where K: AsRef<OsStr> {\n+pub fn remove_var<K: AsRef<OsStr>>(k: K) {\n     let _g = ENV_LOCK.lock();\n     os_imp::unsetenv(k.as_ref())\n }"}]}