{"sha": "9041db962decfe6fa719d3f801b3f985f8027110", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDFkYjk2MmRlY2ZlNmZhNzE5ZDNmODAxYjNmOTg1ZjgwMjcxMTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-11T15:06:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-11T15:06:18Z"}, "message": "Fix it", "tree": {"sha": "d68409ec78eb08780f194488b40bfe0977178ba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d68409ec78eb08780f194488b40bfe0977178ba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9041db962decfe6fa719d3f801b3f985f8027110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9041db962decfe6fa719d3f801b3f985f8027110", "html_url": "https://github.com/rust-lang/rust/commit/9041db962decfe6fa719d3f801b3f985f8027110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9041db962decfe6fa719d3f801b3f985f8027110/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1538f7488e370f380aa5832f2d23f7010c1809f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1538f7488e370f380aa5832f2d23f7010c1809f2", "html_url": "https://github.com/rust-lang/rust/commit/1538f7488e370f380aa5832f2d23f7010c1809f2"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "fc1049684b940f460010f9245d1ea5a4387bb0c2", "filename": "src/driver.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9041db962decfe6fa719d3f801b3f985f8027110/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9041db962decfe6fa719d3f801b3f985f8027110/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=9041db962decfe6fa719d3f801b3f985f8027110", "patch": "@@ -59,16 +59,7 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n         for &(cnum, _) in &crate_info.used_crates_dynamic {\n             let src = &crate_info.used_crate_source[&cnum];\n             match data[cnum.as_usize() - 1] {\n-                _ if crate_info.profiler_runtime == Some(cnum) =>  unimplemented!(),\n-                _ if crate_info.sanitizer_runtime == Some(cnum) => unimplemented!(),\n-\n-                // compiler-builtins are always placed last to ensure that they're\n-                // linked correctly.\n-                _ if crate_info.compiler_builtins == Some(cnum) => {\n-                    unimplemented!();\n-                }\n-                Linkage::NotLinked |\n-                Linkage::IncludedFromDylib => {}\n+                Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n                 Linkage::Static => {\n                     let name = tcx.crate_name(cnum);\n                     let mut err = tcx.sess.struct_fatal(&format!(\"Can't load static lib {}\", name.as_str()));\n@@ -101,7 +92,8 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n         std::mem::forget(lib)\n     }\n \n-    let mut jit_builder = SimpleJITBuilder::new(\n+    let mut jit_builder = SimpleJITBuilder::with_isa(\n+        crate::build_isa(tcx.sess, false),\n         cranelift_module::default_libcall_names(),\n     );\n     jit_builder.symbols(imported_symbols);\n@@ -159,7 +151,7 @@ fn run_aot(\n     let new_module = |name: String| {\n         let module: Module<FaerieBackend> = Module::new(\n             FaerieBuilder::new(\n-                crate::build_isa(tcx.sess),\n+                crate::build_isa(tcx.sess, true),\n                 name + \".o\",\n                 FaerieTrapCollection::Disabled,\n                 cranelift_module::default_libcall_names(),\n@@ -231,7 +223,7 @@ fn run_aot(\n             .to_string();\n \n         let mut metadata_artifact =\n-            faerie::Artifact::new(crate::build_isa(tcx.sess).triple().clone(), metadata_cgu_name.clone());\n+            faerie::Artifact::new(crate::build_isa(tcx.sess, true).triple().clone(), metadata_cgu_name.clone());\n         crate::metadata::write_metadata(tcx, &mut metadata_artifact);\n \n         let tmp_file = tcx"}, {"sha": "e0cd46eea3c8aef123caf68dcb21c8c548c0dba8", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9041db962decfe6fa719d3f801b3f985f8027110/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9041db962decfe6fa719d3f801b3f985f8027110/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9041db962decfe6fa719d3f801b3f985f8027110", "patch": "@@ -239,10 +239,14 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     target.parse().unwrap()\n }\n \n-fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n-    flags_builder.enable(\"is_pic\").unwrap();\n-    flags_builder.set(\"probestack_enabled\", \"false\").unwrap(); // ___cranelift_probestack is not provided\n+    if enable_pic {\n+        flags_builder.enable(\"is_pic\").unwrap();\n+    } else {\n+        flags_builder.set(\"is_pic\", \"false\").unwrap();\n+    }\n+    flags_builder.set(\"probestack_enabled\", \"false\").unwrap(); // __cranelift_probestack is not provided\n         flags_builder.set(\"enable_verifier\", if cfg!(debug_assertions) {\n         \"true\"\n     } else {"}, {"sha": "4d05659a060e945cf63b95b4a656cfa9dd06c227", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9041db962decfe6fa719d3f801b3f985f8027110/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9041db962decfe6fa719d3f801b3f985f8027110/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=9041db962decfe6fa719d3f801b3f985f8027110", "patch": "@@ -218,7 +218,7 @@ pub fn write_clif_file<'tcx>(\n         &mut clif,\n         &func,\n         &DisplayFunctionAnnotations {\n-            isa: Some(&*crate::build_isa(tcx.sess)),\n+            isa: Some(&*crate::build_isa(tcx.sess, true /* PIC doesn't matter here */)),\n             value_ranges,\n         },\n     )"}]}