{"sha": "482b77a1470681da08748f1461c598eb8e48615b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MmI3N2ExNDcwNjgxZGEwODc0OGYxNDYxYzU5OGViOGU0ODYxNWI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-07T22:48:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-14T19:45:18Z"}, "message": "Refactor structure of ExternEntry", "tree": {"sha": "c046e8c056b225b7dbb0497a32ad79448948e761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c046e8c056b225b7dbb0497a32ad79448948e761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482b77a1470681da08748f1461c598eb8e48615b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlyzjc4ACgkQtAh+UQ6Y\nsWRmmA//f63b6O7ildiOGZ0Jpg2AU6FtnSxzd1vuyhvIU9yOSF5rUbQSpnuBQ5JE\nkiENhCzVsTvgu7OBjwPZq3yxGPigULQdY1hsS9iqa3haC5GItc4vvsYEeCw+WRmq\ntSEgjOVe8U2II+EV3kon0zCEeDfpPf4PrZUuPbJtT0ImfQt9Dd3NZgPum8jWAll4\nMPRc7Iaa4au1mTbVv/1Kr/oK7epZlfcssj8unKpVEQ6PUus/FXlDR33xPb6g/xGq\n0G2shnllFL1G/co1PNKqt6ph4JcpsGhAaiLCm+3ZKz6kqV0CAc2L3Czs+3ThvRmX\nWK+byA41aUcZW8Wn9aorseSXqWNbPvPEysno31Xcqby9Ea72IGjd+7PjCNQ6A0Bx\nXe04BI10MY4qP4HvNeZYXWHdymFhJS+k7E7RX40YX/NBM/FZvX1Kda/0oiztym0m\n2x7GWgX1zdpqtsPh7BiNf+HhMsYBfgFlBSTl8nPAN1qPNpeVu/btwv9XJ455HQAw\ns6Btk6LAb1/XYdUCOKobBSqw+/QvVPl0O0flz493OhkKhVVj1lIJwX1H0YUG6Gua\nPtvg2qdGOWT+XygBLHcyzgnzkLb4T1YQWsQUmGJHJ3QDj8zYhZe1Ir9v7PeHP/+O\n68wj9E+ULM/BQ2qTNzz9NHg7jSE3TdZg42ui9u9cMY+XE5AoK8A=\n=TaHb\n-----END PGP SIGNATURE-----", "payload": "tree c046e8c056b225b7dbb0497a32ad79448948e761\nparent b23a8830f97f70aad44c63c813fd1d9083900537\nauthor Aaron Hill <aa1ronham@gmail.com> 1554677320 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1555271118 -0400\n\nRefactor structure of ExternEntry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482b77a1470681da08748f1461c598eb8e48615b", "html_url": "https://github.com/rust-lang/rust/commit/482b77a1470681da08748f1461c598eb8e48615b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482b77a1470681da08748f1461c598eb8e48615b/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b23a8830f97f70aad44c63c813fd1d9083900537", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23a8830f97f70aad44c63c813fd1d9083900537", "html_url": "https://github.com/rust-lang/rust/commit/b23a8830f97f70aad44c63c813fd1d9083900537"}], "stats": {"total": 99, "additions": 40, "deletions": 59}, "files": [{"sha": "9bc9c7cbbe3f003adb9c833fbe9ce713487fe80a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=482b77a1470681da08748f1461c598eb8e48615b", "patch": "@@ -283,26 +283,24 @@ impl OutputTypes {\n // DO NOT switch BTreeMap or BTreeSet out for an unsorted container type! That\n // would break dependency tracking for command-line arguments.\n #[derive(Clone, Hash)]\n-pub struct Externs(BTreeMap<String, BTreeSet<ExternEntry>>);\n+pub struct Externs(BTreeMap<String, ExternEntry>);\n \n #[derive(Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug)]\n pub struct ExternEntry {\n-    pub location: Option<String>,\n-    pub public: bool\n+    pub locations: BTreeSet<Option<String>>,\n+    pub is_private_dep: bool\n }\n \n-\n-\n impl Externs {\n-    pub fn new(data: BTreeMap<String, BTreeSet<ExternEntry>>) -> Externs {\n+    pub fn new(data: BTreeMap<String, ExternEntry>) -> Externs {\n         Externs(data)\n     }\n \n-    pub fn get(&self, key: &str) -> Option<&BTreeSet<ExternEntry>> {\n+    pub fn get(&self, key: &str) -> Option<&ExternEntry> {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<ExternEntry>> {\n+    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, ExternEntry> {\n         self.0.iter()\n     }\n }\n@@ -2323,9 +2321,9 @@ pub fn build_session_options_and_crate_config(\n     // and later convert it into a BTreeSet<(Option<String>, bool)>\n     // This allows to modify entries in-place to set their correct\n     // 'public' value\n-    let mut externs: BTreeMap<_, BTreeMap<Option<String>, bool>> = BTreeMap::new();\n-    for (arg, public) in matches.opt_strs(\"extern\").into_iter().map(|v| (v, true))\n-        .chain(matches.opt_strs(\"extern-private\").into_iter().map(|v| (v, false))) {\n+    let mut externs: BTreeMap<String, ExternEntry> = BTreeMap::new();\n+    for (arg, private) in matches.opt_strs(\"extern\").into_iter().map(|v| (v, false))\n+        .chain(matches.opt_strs(\"extern-private\").into_iter().map(|v| (v, true))) {\n \n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().unwrap_or_else(||\n@@ -2340,36 +2338,26 @@ pub fn build_session_options_and_crate_config(\n         };\n \n \n-        // Extern crates start out public,\n-        // and become private if we later see\n-        // an '--extern-private' key. They never\n-        // go back to being public once we've seen\n-        // '--extern-private', so we logical-AND\n-        // their current and new 'public' value together\n-\n         externs\n             .entry(name.to_owned())\n-            .or_default()\n-            .entry(location)\n-            .and_modify(|e| *e &= public)\n-            .or_insert(public);\n-    }\n+            .and_modify(|e| {\n+                e.locations.insert(location.clone());\n+\n+                // Crates start out being not private,\n+                // and go to being private if we see an '--extern-private'\n+                // flag\n+                e.is_private_dep |= private;\n+            })\n+            .or_insert_with(|| {\n+                let mut locations = BTreeSet::new();\n+                locations.insert(location);\n \n-    // Now that we've determined the 'public' status of each extern,\n-    // collect them into a set of ExternEntry\n-    let externs: BTreeMap<String, BTreeSet<ExternEntry>> = externs.into_iter()\n-        .map(|(k, v)| {\n-            let values =v.into_iter().map(|(location, public)| {\n                 ExternEntry {\n-                    location,\n-                    public\n+                    locations: locations,\n+                    is_private_dep: private\n                 }\n-            }).collect::<BTreeSet<ExternEntry>>();\n-            (k, values)\n-        })\n-        .collect();\n-\n-\n+            });\n+    }\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n@@ -2699,9 +2687,11 @@ mod tests {\n \n     impl ExternEntry {\n         fn new_public(location: Option<String>) -> ExternEntry {\n+            let mut locations = BTreeSet::new();\n+            locations.insert(location);\n             ExternEntry {\n-                location,\n-                public: true\n+                locations,\n+                is_private_dep: false\n             }\n         }\n     }"}, {"sha": "160d4c30c0bad24f513cd53b57636e0e17a3c77e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=482b77a1470681da08748f1461c598eb8e48615b", "patch": "@@ -131,9 +131,9 @@ impl<'a> CrateLoader<'a> {\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n             let source = &self.cstore.get_crate_data(cnum).source;\n-            if let Some(locs) = self.sess.opts.externs.get(&*name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(&*name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n-                let found = locs.iter().filter_map(|l| l.location.as_ref()).any(|l| {\n+                let found = entry.locations.iter().filter_map(|l| l.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();\n                     source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n                     source.rlib.as_ref().map(|p| &p.0) == l.as_ref()\n@@ -201,19 +201,9 @@ impl<'a> CrateLoader<'a> {\n         let crate_root = lib.metadata.get_root();\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n-        let mut private_dep = false;\n-        if let Some(s) = self.sess.opts.externs.get(&name.as_str()) {\n-            for entry in s {\n-                let p = entry.location.as_ref().map(|s| s.as_str());\n-                if p == lib.dylib.as_ref().and_then(|r| r.0.to_str()) ||\n-                    p == lib.rlib.as_ref().and_then(|r| r.0.to_str()) {\n-\n-                    private_dep = !entry.public;\n-                    break;\n-                }\n-            }\n-        }\n-\n+        let private_dep = self.sess.opts.externs.get(&name.as_str())\n+            .map(|e| e.is_private_dep)\n+            .unwrap_or(false);\n \n         info!(\"register crate `extern crate {} as {}` (private_dep = {})\",\n             crate_root.name, ident, private_dep);"}, {"sha": "116042c53fb9e2455e2c00bea4bde81fdc6ea256", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=482b77a1470681da08748f1461c598eb8e48615b", "patch": "@@ -442,11 +442,11 @@ impl<'a> Context<'a> {\n         // must be loaded via -L plus some filtering.\n         if self.hash.is_none() {\n             self.should_match_name = false;\n-            if let Some(s) = self.sess.opts.externs.get(&self.crate_name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(&self.crate_name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n-                if s.iter().any(|l| l.location.is_some()) {\n+                if entry.locations.iter().any(|l| l.is_some()) {\n                     return self.find_commandline_library(\n-                        s.iter().filter_map(|l| l.location.as_ref()),\n+                        entry.locations.iter().filter_map(|l| l.as_ref()),\n                     );\n                 }\n             }"}, {"sha": "401d7457517e6373fad1351b2cd3e67a9750b452", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482b77a1470681da08748f1461c598eb8e48615b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=482b77a1470681da08748f1461c598eb8e48615b", "patch": "@@ -176,7 +176,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n+pub fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -241,7 +241,7 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n     }\n }\n \n-fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n+pub fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -298,7 +298,7 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId)\n     }\n }\n \n-fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+pub fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),"}, {"sha": "64882c603bad3c8cbf697100e489f9c09902e339", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482b77a1470681da08748f1461c598eb8e48615b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482b77a1470681da08748f1461c598eb8e48615b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=482b77a1470681da08748f1461c598eb8e48615b", "patch": "@@ -288,6 +288,7 @@ pub struct TestProps {\n     pub aux_builds: Vec<String>,\n     // A list of crates to pass '--extern-private name:PATH' flags for\n     // This should be a subset of 'aux_build'\n+    // FIXME: Replace this with a better solution: https://github.com/rust-lang/rust/pull/54020\n     pub extern_private: Vec<String>,\n     // Environment settings to use for compiling\n     pub rustc_env: Vec<(String, String)>,"}]}