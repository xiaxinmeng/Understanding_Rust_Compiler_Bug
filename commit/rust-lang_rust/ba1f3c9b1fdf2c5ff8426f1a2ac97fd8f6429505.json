{"sha": "ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMWYzYzliMWZkZjJjNWZmODQyNmYxYTJhYzk3ZmQ4ZjY0Mjk1MDU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-04-22T11:17:25Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-04-22T11:17:25Z"}, "message": "Convert to C string inside WriteOutputFile", "tree": {"sha": "9b6cc31b260e02b7a0dd66e0ac485dbc5e4e94bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6cc31b260e02b7a0dd66e0ac485dbc5e4e94bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "html_url": "https://github.com/rust-lang/rust/commit/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3830040a89297dd55f920ec26ab97fb2e33c7a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/3830040a89297dd55f920ec26ab97fb2e33c7a00", "html_url": "https://github.com/rust-lang/rust/commit/3830040a89297dd55f920ec26ab97fb2e33c7a00"}], "stats": {"total": 99, "additions": 42, "deletions": 57}, "files": [{"sha": "3d2b46eb51abdc35502ee8548c3016b6ae320e55", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 42, "deletions": 57, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=ba1f3c9b1fdf2c5ff8426f1a2ac97fd8f6429505", "patch": "@@ -61,23 +61,28 @@ pub fn llvm_err(sess: Session, msg: ~str) -> ! {\n \n pub fn WriteOutputFile(sess: Session,\n         PM: lib::llvm::PassManagerRef, M: ModuleRef,\n-        Triple: *c_char,\n+        Triple: &str,\n+        Output: &str,\n         // FIXME: When #2334 is fixed, change\n         // c_uint to FileType\n-        Output: *c_char, FileType: c_uint,\n+        FileType: c_uint,\n         OptLevel: c_int,\n         EnableSegmentedStacks: bool) {\n     unsafe {\n-        let result = llvm::LLVMRustWriteOutputFile(\n-                PM,\n-                M,\n-                Triple,\n-                Output,\n-                FileType,\n-                OptLevel,\n-                EnableSegmentedStacks);\n-        if (!result) {\n-            llvm_err(sess, ~\"Could not write output\");\n+        do str::as_c_str(Triple) |Triple| {\n+            do str::as_c_str(Output) |Output| {\n+                let result = llvm::LLVMRustWriteOutputFile(\n+                        PM,\n+                        M,\n+                        Triple,\n+                        Output,\n+                        FileType,\n+                        OptLevel,\n+                        EnableSegmentedStacks);\n+                if (!result) {\n+                    llvm_err(sess, ~\"Could not write output\");\n+                }\n+            }\n         }\n     }\n }\n@@ -310,66 +315,46 @@ pub mod write {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf)\n                     });\n                     pm = mk_pass_manager();\n-                    // Save the assembly file if -S is used\n \n+                    // Save the assembly file if -S is used\n                     if output_type == output_type_assembly {\n-                        let _: () = str::as_c_str(\n+                        WriteOutputFile(\n+                            sess,\n+                            pm.llpm,\n+                            llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n-                            |buf_t| {\n-                                str::as_c_str(output.to_str(), |buf_o| {\n-                                    WriteOutputFile(\n-                                        sess,\n-                                        pm.llpm,\n-                                        llmod,\n-                                        buf_t,\n-                                        buf_o,\n-                                        lib::llvm::AssemblyFile as c_uint,\n-                                        CodeGenOptLevel,\n-                                        true)\n-                                })\n-                            });\n+                            output.to_str(),\n+                            lib::llvm::AssemblyFile as c_uint,\n+                            CodeGenOptLevel,\n+                            true);\n                     }\n \n-\n                     // Save the object file for -c or --save-temps alone\n                     // This .o is needed when an exe is built\n                     if output_type == output_type_object ||\n                            output_type == output_type_exe {\n-                        let _: () = str::as_c_str(\n+                        WriteOutputFile(\n+                            sess,\n+                            pm.llpm,\n+                            llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n-                            |buf_t| {\n-                                str::as_c_str(output.to_str(), |buf_o| {\n-                                    WriteOutputFile(\n-                                        sess,\n-                                        pm.llpm,\n-                                        llmod,\n-                                        buf_t,\n-                                        buf_o,\n-                                        lib::llvm::ObjectFile as c_uint,\n-                                        CodeGenOptLevel,\n-                                        true)\n-                                })\n-                            });\n+                            output.to_str(),\n+                            lib::llvm::ObjectFile as c_uint,\n+                            CodeGenOptLevel,\n+                            true);\n                     }\n                 } else {\n                     // If we aren't saving temps then just output the file\n                     // type corresponding to the '-c' or '-S' flag used\n-\n-                    let _: () = str::as_c_str(\n+                    WriteOutputFile(\n+                        sess,\n+                        pm.llpm,\n+                        llmod,\n                         sess.targ_cfg.target_strs.target_triple,\n-                        |buf_t| {\n-                            str::as_c_str(output.to_str(), |buf_o| {\n-                                WriteOutputFile(\n-                                    sess,\n-                                    pm.llpm,\n-                                    llmod,\n-                                    buf_t,\n-                                    buf_o,\n-                                    FileType as c_uint,\n-                                    CodeGenOptLevel,\n-                                    true)\n-                            })\n-                        });\n+                        output.to_str(),\n+                        FileType as c_uint,\n+                        CodeGenOptLevel,\n+                        true);\n                 }\n                 // Clean up and return\n "}]}