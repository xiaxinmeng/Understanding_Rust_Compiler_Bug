{"sha": "b7d9de72ac8834357224216e7a5b84d7894b57c9", "node_id": "C_kwDOAAsO6NoAKGI3ZDlkZTcyYWM4ODM0MzU3MjI0MjE2ZTdhNWI4NGQ3ODk0YjU3Yzk", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-09-25T14:06:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-25T14:06:39Z"}, "message": "Rollup merge of #102194 - fee1-dead-contrib:improve-const-drop, r=oli-obk\n\nNote the type when unable to drop values in compile time", "tree": {"sha": "7a4540c0e21531e5ca34b804855303993f48031f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4540c0e21531e5ca34b804855303993f48031f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d9de72ac8834357224216e7a5b84d7894b57c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMGBvCRBK7hj4Ov3rIwAAOxQIAFWYaapGEqCYQhjGuup1OF4z\nX9i6aFRr/X+D9x/q1lpmTI7axLkjWl86IFY53sKI7x+jlNcPCFJ+1K5f1Ztj0IFb\njzR8qLBwIZqiUSiX2x3LaXZk7qnlMFO4FU5lSdAQaQStX8/GIqxkw0ccRDy3jExL\nYknthBBv7SFv27XkI17VWR52cy2b5JUdt18wKoQdqlSZNkfDThM8/XlEzKK5nmpz\nixP4DxQc9Z7rltDcUtJ/0AxS9Q4ze3ETaTXUW7jhUeBbo8qe73mh2owGsQidVJz9\nET5njjYCFlmkxm6BtbuhcMND4PdwZHtfKOqX1H0JmtbenFnD0QUtFjnY9UTvSao=\n=97QJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a4540c0e21531e5ca34b804855303993f48031f\nparent 07467c530850446e6888f447ad313d75d33c4e19\nparent 2ce1cd511f0d1152054936def739184b20c0e64f\nauthor fee1-dead <ent3rm4n@gmail.com> 1664114799 +0800\ncommitter GitHub <noreply@github.com> 1664114799 +0800\n\nRollup merge of #102194 - fee1-dead-contrib:improve-const-drop, r=oli-obk\n\nNote the type when unable to drop values in compile time\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d9de72ac8834357224216e7a5b84d7894b57c9", "html_url": "https://github.com/rust-lang/rust/commit/b7d9de72ac8834357224216e7a5b84d7894b57c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d9de72ac8834357224216e7a5b84d7894b57c9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07467c530850446e6888f447ad313d75d33c4e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/07467c530850446e6888f447ad313d75d33c4e19", "html_url": "https://github.com/rust-lang/rust/commit/07467c530850446e6888f447ad313d75d33c4e19"}, {"sha": "2ce1cd511f0d1152054936def739184b20c0e64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce1cd511f0d1152054936def739184b20c0e64f", "html_url": "https://github.com/rust-lang/rust/commit/2ce1cd511f0d1152054936def739184b20c0e64f"}], "stats": {"total": 308, "additions": 158, "deletions": 150}, "files": [{"sha": "b0dcbf76b01b0a62c4f53280d4e35eaeaf24e913", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1009,7 +1009,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                 if needs_non_const_drop {\n                     self.check_op_spanned(\n-                        ops::LiveDrop { dropped_at: Some(terminator.source_info.span) },\n+                        ops::LiveDrop {\n+                            dropped_at: Some(terminator.source_info.span),\n+                            dropped_ty: ty_of_dropped_place,\n+                        },\n                         err_span,\n                     );\n                 }"}, {"sha": "b56b230201ed406336aa145065b8086e445a4ccd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -422,10 +422,11 @@ impl<'tcx> NonConstOp<'tcx> for InlineAsm {\n }\n \n #[derive(Debug)]\n-pub struct LiveDrop {\n+pub struct LiveDrop<'tcx> {\n     pub dropped_at: Option<Span>,\n+    pub dropped_ty: Ty<'tcx>,\n }\n-impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n+impl<'tcx> NonConstOp<'tcx> for LiveDrop<'tcx> {\n     fn build_error(\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n@@ -435,9 +436,13 @@ impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n             ccx.tcx.sess,\n             span,\n             E0493,\n-            \"destructors cannot be evaluated at compile-time\"\n+            \"destructor of `{}` cannot be evaluated at compile-time\",\n+            self.dropped_ty,\n+        );\n+        err.span_label(\n+            span,\n+            format!(\"the destructor for this type cannot be evaluated in {}s\", ccx.const_kind()),\n         );\n-        err.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n         if let Some(span) = self.dropped_at {\n             err.span_label(span, \"value is dropped here\");\n         }"}, {"sha": "d4570c59889145e3b885b41e5939649f7246ac4c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,6 +1,6 @@\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Location};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::{symbol::sym, Span};\n \n use super::check::Qualifs;\n@@ -58,9 +58,9 @@ impl<'mir, 'tcx> std::ops::Deref for CheckLiveDrops<'mir, 'tcx> {\n     }\n }\n \n-impl CheckLiveDrops<'_, '_> {\n-    fn check_live_drop(&self, span: Span) {\n-        ops::LiveDrop { dropped_at: None }.build_error(self.ccx, span).emit();\n+impl<'tcx> CheckLiveDrops<'_, 'tcx> {\n+    fn check_live_drop(&self, span: Span, dropped_ty: Ty<'tcx>) {\n+        ops::LiveDrop { dropped_at: None, dropped_ty }.build_error(self.ccx, span).emit();\n     }\n }\n \n@@ -90,7 +90,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 }\n \n                 if dropped_place.is_indirect() {\n-                    self.check_live_drop(terminator.source_info.span);\n+                    self.check_live_drop(terminator.source_info.span, dropped_ty);\n                     return;\n                 }\n \n@@ -101,7 +101,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 if self.qualifs.needs_non_const_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;\n-                    self.check_live_drop(span);\n+                    self.check_live_drop(span, dropped_ty);\n                 }\n             }\n "}, {"sha": "f6a577d0d9c934aca8ae792ef43668a8cbb40877", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -63,7 +63,7 @@ static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n // This example should fail because field1 in the base struct is not safe\n static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n                                         ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n                                                      field2: SafeEnum::Variant1}};\n \n struct UnsafeStruct;"}, {"sha": "31939f7f6db5d9fd098d716a62bce8ebb6c8dee0", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,4 +1,4 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `SafeStruct` cannot be evaluated at compile-time\n   --> $DIR/check-static-values-constraints.rs:65:43\n    |\n LL |                                           ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n@@ -7,7 +7,7 @@ LL | |\n LL | |                                                      field2: SafeEnum::Variant1}};\n    | |                                                                                ^- value is dropped here\n    | |________________________________________________________________________________|\n-   |                                                                                  statics cannot evaluate destructors\n+   |                                                                                  the destructor for this type cannot be evaluated in statics\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:79:33"}, {"sha": "1e2bcc55b6b102c09d93f86d2c47cf16f884aefc", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -14,16 +14,16 @@ const X2: FakeNeedsDrop = { let x; x = FakeNeedsDrop; x };\n \n // error\n const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of"}, {"sha": "63442f55718cb0d17ea14ccf88591055287a04ff", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,34 +1,34 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `FakeNeedsDrop` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:16:32\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                ^^^^^                  - value is dropped here\n    |                                |\n-   |                                constants cannot evaluate destructors\n+   |                                the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `FakeNeedsDrop` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:20:33\n    |\n LL | const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                 ^^^^^                     - value is dropped here\n    |                                 |\n-   |                                 constants cannot evaluate destructors\n+   |                                 the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<FakeNeedsDrop>` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:24:21\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                     ^^^^^                                  - value is dropped here\n    |                     |\n-   |                     constants cannot evaluate destructors\n+   |                     the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<FakeNeedsDrop>` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:28:22\n    |\n LL | const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n    |                      ^^^^^                                     - value is dropped here\n    |                      |\n-   |                      constants cannot evaluate destructors\n+   |                      the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e6639826cb26a97c302bbd8a03cf472503d76725", "filename": "src/test/ui/consts/const-eval/issue-65394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -4,7 +4,7 @@\n // We will likely have to change this behavior before we allow `&mut` in a `const`.\n \n const _: Vec<i32> = {\n-    let mut x = Vec::<i32>::new(); //~ ERROR destructors cannot be evaluated at compile-time\n+    let mut x = Vec::<i32>::new(); //~ ERROR destructor of\n     let r = &mut x; //~ ERROR mutable references are not allowed in constants\n     let y = x;\n     y"}, {"sha": "ae6f0e937168072df1bc72dd814280ced87443f9", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -7,11 +7,11 @@ LL |     let r = &mut x;\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Vec<i32>` cannot be evaluated at compile-time\n   --> $DIR/issue-65394.rs:7:9\n    |\n LL |     let mut x = Vec::<i32>::new();\n-   |         ^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here"}, {"sha": "543f1f0ecee24478caeecdcb950afb4a8857a2f0", "filename": "src/test/ui/consts/const-eval/livedrop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,6 +1,6 @@\n const _: Option<Vec<i32>> = {\n     let mut never_returned = Some(Vec::new());\n-    let mut always_returned = None; //~ ERROR destructors cannot be evaluated at compile-time\n+    let mut always_returned = None; //~ ERROR destructor of\n \n     let mut i = 0;\n     loop {"}, {"sha": "d04fdb70ed30b84c7c28e3a0e00edce8d9f2b4ec", "filename": "src/test/ui/consts/const-eval/livedrop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/livedrop.rs:3:9\n    |\n LL |     let mut always_returned = None;\n-   |         ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^^^^^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL |         always_returned = never_returned;\n    |         --------------- value is dropped here"}, {"sha": "93b5f257efb773a3703e74649bf73b2f3748898e", "filename": "src/test/ui/consts/control-flow/drop-fail.precise.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,14 +1,14 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n-   |         ^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^ the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41341f3121e2bbcd5676fe258bc16c0ab30c59ad", "filename": "src/test/ui/consts/control-flow/drop-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -6,7 +6,7 @@\n const _: Option<Vec<i32>> = {\n     let y: Option<Vec<i32>> = None;\n     let x = Some(Vec::new());\n-    //[stock,precise]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock,precise]~^ ERROR destructor of\n \n     if true {\n         x\n@@ -19,15 +19,15 @@ const _: Option<Vec<i32>> = {\n // existing analysis.\n const _: Vec<i32> = {\n     let vec_tuple = (Vec::new(),);\n-    //[stock]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock]~^ ERROR destructor of\n \n     vec_tuple.0\n };\n \n // This applies to single-field enum variants as well.\n const _: Vec<i32> = {\n     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n-    //[stock]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock]~^ ERROR destructor of\n \n     match x {\n         Ok(x) | Err(x) => x,\n@@ -37,7 +37,7 @@ const _: Vec<i32> = {\n const _: Option<Vec<i32>> = {\n     let mut some = Some(Vec::new());\n     let mut tmp = None;\n-    //[stock,precise]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock,precise]~^ ERROR destructor of\n \n     let mut i = 0;\n     while i < 10 {"}, {"sha": "2cc8568026eb5c599747970fed1a891063ce160f", "filename": "src/test/ui/consts/control-flow/drop-fail.stock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,35 +1,35 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Vec<i32>,)` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:21:9\n    |\n LL |     let vec_tuple = (Vec::new(),);\n-   |         ^^^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Result<Vec<i32>, Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:29:9\n    |\n LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n-   |         ^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here"}, {"sha": "6799741307869140815c0cbf96b3101e10811100", "filename": "src/test/ui/consts/drop_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,4 +1,4 @@\n const fn f<T>(_: Box<T>) {}\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main() {}"}, {"sha": "62324939b08af3d0d2365e3147e3352bb12ffbc7", "filename": "src/test/ui/consts/drop_box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Box<T>` cannot be evaluated at compile-time\n   --> $DIR/drop_box.rs:1:15\n    |\n LL | const fn f<T>(_: Box<T>) {}\n    |               ^           - value is dropped here\n    |               |\n-   |               constant functions cannot evaluate destructors\n+   |               the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to previous error\n "}, {"sha": "37758a4cbda64cb03831d0c0278aa18176eb0290", "filename": "src/test/ui/consts/drop_zst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `S` cannot be evaluated at compile-time\n   --> $DIR/drop_zst.rs:14:9\n    |\n LL |     let s = S;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to previous error\n "}, {"sha": "c2891488c7f1bf962b1ee28548c7c9ea464e1826", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -34,7 +34,7 @@ const fn foo35(a: bool, b: bool) -> bool { a ^ b }\n struct Foo<T: ?Sized>(T);\n impl<T> Foo<T> {\n     const fn new(t: T) -> Self { Foo(t) }\n-    const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn into_inner(self) -> T { self.0 } //~ destructor of\n     const fn get(&self) -> &T { &self.0 }\n     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n@@ -43,7 +43,7 @@ impl<T> Foo<T> {\n }\n impl<'a, T> Foo<T> {\n     const fn new_lt(t: T) -> Self { Foo(t) }\n-    const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn into_inner_lt(self) -> T { self.0 } //~ destructor of\n     const fn get_lt(&'a self) -> &T { &self.0 }\n     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n@@ -52,7 +52,7 @@ impl<'a, T> Foo<T> {\n }\n impl<T: Sized> Foo<T> {\n     const fn new_s(t: T) -> Self { Foo(t) }\n-    const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+    const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructor\n     const fn get_s(&self) -> &T { &self.0 }\n     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references"}, {"sha": "11c79e8e2d6a99ad779c5f7a96eaec79c88fe571", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:37:25\n    |\n LL |     const fn into_inner(self) -> T { self.0 }\n    |                         ^^^^                - value is dropped here\n    |                         |\n-   |                         constant functions cannot evaluate destructors\n+   |                         the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:39:22\n@@ -33,13 +33,13 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:46:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^                - value is dropped here\n    |                            |\n-   |                            constant functions cannot evaluate destructors\n+   |                            the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:48:25\n@@ -68,13 +68,13 @@ LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:55:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^                - value is dropped here\n    |                           |\n-   |                           constant functions cannot evaluate destructors\n+   |                           the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:57:24\n@@ -191,21 +191,21 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `AlanTuring<impl std::fmt::Debug>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:122:19\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                   ^^                                     - value is dropped here\n    |                   |\n-   |                   constant functions cannot evaluate destructors\n+   |                   the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `impl std::fmt::Debug` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:124:18\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                  ^^                         - value is dropped here\n    |                  |\n-   |                  constant functions cannot evaluate destructors\n+   |                  the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to 24 previous errors\n "}, {"sha": "4466f097ef4a1bf0fc23256d487190f747727fc5", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -8,7 +8,7 @@ trait Foo<T> {\n }\n \n trait Bar<T, U: Foo<T>> {\n-    const F: u32 = (U::X, 42).1; //~ ERROR destructors cannot be evaluated at compile-time\n+    const F: u32 = (U::X, 42).1; //~ ERROR destructor of\n }\n \n impl Foo<u32> for () {"}, {"sha": "c91c72d1fbf16fce9e62a21e6a2cce89078e0495", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(T, u32)` cannot be evaluated at compile-time\n   --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:11:20\n    |\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^ - value is dropped here\n    |                    |\n-   |                    constants cannot evaluate destructors\n+   |                    the destructor for this type cannot be evaluated in constants\n \n error: aborting due to previous error\n "}, {"sha": "a6d2934044ac7a3685d0b7b3dfb8eec482855383", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -6,13 +6,13 @@\n \n // Mutable borrow of a field with drop impl.\n pub const fn f() {\n-    let mut a: (u32, Option<String>) = (0, None); //~ ERROR destructors cannot be evaluated\n+    let mut a: (u32, Option<String>) = (0, None); //~ ERROR destructor of\n     let _ = &mut a.1;\n }\n \n // Mutable borrow of a type with drop impl.\n pub const A1: () = {\n-    let mut x = None; //~ ERROR destructors cannot be evaluated\n+    let mut x = None; //~ ERROR destructor of\n     let mut y = Some(String::new());\n     let a = &mut x;\n     let b = &mut y;\n@@ -28,37 +28,37 @@ pub const A2: () = {\n     let b = &mut y;\n     std::mem::swap(a, b);\n     std::mem::forget(y);\n-    let _z = x; //~ ERROR destructors cannot be evaluated\n+    let _z = x; //~ ERROR destructor of\n };\n \n // Shared borrow of a type that might be !Freeze and Drop.\n pub const fn g1<T>() {\n-    let x: Option<T> = None; //~ ERROR destructors cannot be evaluated\n+    let x: Option<T> = None; //~ ERROR destructor of\n     let _ = x.is_some();\n }\n \n // Shared borrow of a type that might be !Freeze and Drop.\n pub const fn g2<T>() {\n     let x: Option<T> = None;\n     let _ = x.is_some();\n-    let _y = x; //~ ERROR destructors cannot be evaluated\n+    let _y = x; //~ ERROR destructor of\n }\n \n // Mutable raw reference to a Drop type.\n pub const fn address_of_mut() {\n-    let mut x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let mut x: Option<String> = None; //~ ERROR destructor of\n     &raw mut x;\n \n-    let mut y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let mut y: Option<String> = None; //~ ERROR destructor of\n     std::ptr::addr_of_mut!(y);\n }\n \n // Const raw reference to a Drop type. Conservatively assumed to allow mutation\n // until resolution of https://github.com/rust-lang/rust/issues/56604.\n pub const fn address_of_const() {\n-    let x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let x: Option<String> = None; //~ ERROR destructor of\n     &raw const x;\n \n-    let y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let y: Option<String> = None; //~ ERROR destructor of\n     std::ptr::addr_of!(y);\n }"}, {"sha": "6379c00e4b434cd7e62935b96f43fd01feb1ea00", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,56 +1,56 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(u32, Option<String>)` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:9:9\n    |\n LL |     let mut a: (u32, Option<String>) = (0, None);\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:15:9\n    |\n LL |     let mut x = None;\n-   |         ^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:31:9\n    |\n LL |     let _z = x;\n-   |         ^^ constants cannot evaluate destructors\n+   |         ^^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<T>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:36:9\n    |\n LL |     let x: Option<T> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<T>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:44:9\n    |\n LL |     let _y = x;\n-   |         ^^ constant functions cannot evaluate destructors\n+   |         ^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:52:9\n    |\n LL |     let mut y: Option<String> = None;\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:49:9\n    |\n LL |     let mut x: Option<String> = None;\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:62:9\n    |\n LL |     let y: Option<String> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:59:9\n    |\n LL |     let x: Option<String> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to 9 previous errors\n "}, {"sha": "7cd3dbec931499c5af94c1752d3fc52cf144967d", "filename": "src/test/ui/consts/stable-precise-live-drops-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -11,7 +11,7 @@ impl<T> Either<T, T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\n     pub const fn unwrap(self) -> T {\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         match self {\n             Self::Left(t) => t,\n             Self::Right(t) => t,"}, {"sha": "5f70391eec248795781bc7d55de6423234a23da2", "filename": "src/test/ui/consts/stable-precise-live-drops-in-libcore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Either<T, T>` cannot be evaluated at compile-time\n   --> $DIR/stable-precise-live-drops-in-libcore.rs:13:25\n    |\n LL |     pub const fn unwrap(self) -> T {\n-   |                         ^^^^ constant functions cannot evaluate destructors\n+   |                         ^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "ca4ed8f0b471cfa5de99b7204332e262c80e51c4", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -15,8 +15,8 @@ impl<T> Opt<T> {\n     #[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n-    //~| ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n+    //~| ERROR destructor of\n         match self {\n             Opt::Some(t) => t,\n             Opt::None => f(),"}, {"sha": "e5b00dd07abeeed44dbc3f80c73f40a71cf1c953", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,17 +1,17 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `F` cannot be evaluated at compile-time\n   --> $DIR/unstable-const-fn-in-libcore.rs:17:60\n    |\n LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-   |                                                            ^ constant functions cannot evaluate destructors\n+   |                                                            ^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Opt<T>` cannot be evaluated at compile-time\n   --> $DIR/unstable-const-fn-in-libcore.rs:17:54\n    |\n LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-   |                                                      ^^^^ constant functions cannot evaluate destructors\n+   |                                                      ^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "3cfacea5e17f46a1cb1c6c21cf2f633bda631809", "filename": "src/test/ui/drop/repeat-drop-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -5,7 +5,7 @@ fn borrowck_catch() {\n }\n \n const _: [String; 0] = [String::new(); 0];\n-//~^ ERROR destructors cannot be evaluated at compile-time [E0493]\n+//~^ ERROR destructor of `String` cannot be evaluated at compile-time [E0493]\n \n fn must_be_init() {\n     let x: u8;"}, {"sha": "adfaed739735b07eb1c52930f7b1f0b8fd2ce3fb", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -8,13 +8,13 @@ LL |     let _bar = foo;\n LL |     let _baz = [foo; 0];\n    |                 ^^^ value used here after move\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/repeat-drop-2.rs:7:25\n    |\n LL | const _: [String; 0] = [String::new(); 0];\n    |                        -^^^^^^^^^^^^^----\n    |                        ||\n-   |                        |constants cannot evaluate destructors\n+   |                        |the destructor for this type cannot be evaluated in constants\n    |                        value is dropped here\n \n error[E0381]: used binding `x` isn't initialized"}, {"sha": "9ee1ba3d3b4865fa704fb4e100a92b20e97aae68", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -12,7 +12,7 @@ struct Bug {\n         }\n         let f: F = async { 1 };\n         //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n+        //~| ERROR destructor of\n         1\n     }],\n }"}, {"sha": "a96994f5a7fb85954a4259ebf098d205aabd762b", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -7,11 +7,11 @@ LL |         let f: F = async { 1 };\n    = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n    = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `F` cannot be evaluated at compile-time\n   --> $DIR/issue-78722.rs:13:13\n    |\n LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n+   |             ^ the destructor for this type cannot be evaluated in constants\n ...\n LL |     }],\n    |     - value is dropped here"}, {"sha": "624b464ecef25f690215f79b47de94c6749e4934", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -3,9 +3,9 @@\n \n static A: () = {\n     let a: [String; 1];\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n     a[0] = String::new();\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n     //~| ERROR binding `a` isn't initialized\n };\n \n@@ -14,9 +14,9 @@ struct B<T>([T; 1]);\n impl<T> B<T> {\n     pub const fn f(mut self, other: T) -> Self {\n         let _this = self;\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         self.0[0] = other;\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         //~| ERROR use of moved value\n         self\n     }"}, {"sha": "c06a6238a90264e35011bcdb205e683389c876bd", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,17 +1,17 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n    |\n LL |     a[0] = String::new();\n    |     ^^^^\n    |     |\n-   |     statics cannot evaluate destructors\n+   |     the destructor for this type cannot be evaluated in statics\n    |     value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `[String; 1]` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:5:9\n    |\n LL |     let a: [String; 1];\n-   |         ^ statics cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in statics\n ...\n LL | };\n    | - value is dropped here\n@@ -25,20 +25,20 @@ LL |\n LL |     a[0] = String::new();\n    |     ^^^^ `a` used here but it isn't initialized\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `T` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9\n    |\n LL |         self.0[0] = other;\n    |         ^^^^^^^^^\n    |         |\n-   |         constant functions cannot evaluate destructors\n+   |         the destructor for this type cannot be evaluated in constant functions\n    |         value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `B<T>` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:16:13\n    |\n LL |         let _this = self;\n-   |             ^^^^^ constant functions cannot evaluate destructors\n+   |             ^^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "625da25a7c2cad9a01a2f5fd920889c9e230efb5", "filename": "src/test/ui/span/E0493.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -15,7 +15,7 @@ impl Drop for Bar {\n }\n \n const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n-//~^ destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main() {\n }"}, {"sha": "9db627562d6eb2926f37f7e9e44bfbdb650a3f2a", "filename": "src/test/ui/span/E0493.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Foo, Foo)` cannot be evaluated at compile-time\n   --> $DIR/E0493.rs:17:17\n    |\n LL | const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - value is dropped here\n    |                 |\n-   |                 constants cannot evaluate destructors\n+   |                 the destructor for this type cannot be evaluated in constants\n \n error: aborting due to previous error\n "}, {"sha": "34afa9873a388a6ee3701383f61a1e9df9e336d3", "filename": "src/test/ui/static/static-drop-scope.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -5,33 +5,33 @@ impl Drop for WithDtor {\n }\n \n static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n //~| ERROR temporary value dropped while borrowed\n \n const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n //~| ERROR temporary value dropped while borrowed\n \n static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const fn const_drop<T>(_: T) {}\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const fn const_drop2<T>(x: T) {\n     (x, ()).1\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n }\n \n const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const HELPER: Option<WithDtor> = Some(WithDtor);\n \n const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main () {}"}, {"sha": "112bfc003048d0c7b885a5ae22d9f8ce17cb6509", "filename": "src/test/ui/static/static-drop-scope.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7d9de72ac8834357224216e7a5b84d7894b57c9/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr?ref=b7d9de72ac8834357224216e7a5b84d7894b57c9", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `WithDtor` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:7:60\n    |\n LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                            ^^^^^^^^- value is dropped here\n    |                                                            |\n-   |                                                            statics cannot evaluate destructors\n+   |                                                            the destructor for this type cannot be evaluated in statics\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:7:60\n@@ -16,13 +16,13 @@ LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                      |     creates a temporary which is freed while still in use\n    |                                                      using this value as a static requires that borrow lasts for `'static`\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `WithDtor` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:11:59\n    |\n LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                           ^^^^^^^^- value is dropped here\n    |                                                           |\n-   |                                                           constants cannot evaluate destructors\n+   |                                                           the destructor for this type cannot be evaluated in constants\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:11:59\n@@ -34,54 +34,54 @@ LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                     |     creates a temporary which is freed while still in use\n    |                                                     using this value as a constant requires that borrow lasts for `'static`\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(WithDtor, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:15:28\n    |\n LL | static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n    |                            ^^^^^^^^^^^^^ - value is dropped here\n    |                            |\n-   |                            statics cannot evaluate destructors\n+   |                            the destructor for this type cannot be evaluated in statics\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(WithDtor, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:18:27\n    |\n LL | const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n    |                           ^^^^^^^^^^^^^ - value is dropped here\n    |                           |\n-   |                           constants cannot evaluate destructors\n+   |                           the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `T` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:21:24\n    |\n LL | const fn const_drop<T>(_: T) {}\n    |                        ^      - value is dropped here\n    |                        |\n-   |                        constant functions cannot evaluate destructors\n+   |                        the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(T, ())` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:25:5\n    |\n LL |     (x, ()).1\n-   |     ^^^^^^^ constant functions cannot evaluate destructors\n+   |     ^^^^^^^ the destructor for this type cannot be evaluated in constant functions\n LL |\n LL | }\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Option<WithDtor>, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:29:34\n    |\n LL | const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n    |                                  ^^^^^^^^^^^^^^^^^^^ - value is dropped here\n    |                                  |\n-   |                                  constants cannot evaluate destructors\n+   |                                  the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Option<WithDtor>, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:34:43\n    |\n LL | const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n    |                                           ^^^^^^^^^^^ - value is dropped here\n    |                                           |\n-   |                                           constants cannot evaluate destructors\n+   |                                           the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 10 previous errors\n "}]}