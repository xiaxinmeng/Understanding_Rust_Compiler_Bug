{"sha": "381b778d27e74e4fc8cc161af5a45d7bee572f47", "node_id": "C_kwDOAAsO6NoAKDM4MWI3NzhkMjdlNzRlNGZjOGNjMTYxYWY1YTQ1ZDdiZWU1NzJmNDc", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-05-29T12:54:48Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-05-29T12:54:48Z"}, "message": "Make struct layout not depend on unsizeable tail", "tree": {"sha": "faddb9bb92bafeb27ffac4dd761d36c85e967042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faddb9bb92bafeb27ffac4dd761d36c85e967042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/381b778d27e74e4fc8cc161af5a45d7bee572f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/381b778d27e74e4fc8cc161af5a45d7bee572f47", "html_url": "https://github.com/rust-lang/rust/commit/381b778d27e74e4fc8cc161af5a45d7bee572f47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/381b778d27e74e4fc8cc161af5a45d7bee572f47/comments", "author": null, "committer": null, "parents": [{"sha": "70e04bd88d85cab8ed110ace5a278fab106d0ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e04bd88d85cab8ed110ace5a278fab106d0ef5", "html_url": "https://github.com/rust-lang/rust/commit/70e04bd88d85cab8ed110ace5a278fab106d0ef5"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "6f22345617d3e2478bc7fc692a4a19a300dbc7d9", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/381b778d27e74e4fc8cc161af5a45d7bee572f47/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381b778d27e74e4fc8cc161af5a45d7bee572f47/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=381b778d27e74e4fc8cc161af5a45d7bee572f47", "patch": "@@ -828,6 +828,7 @@ fn univariant(\n     if optimize && fields.len() > 1 {\n         let end = if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n         let optimizing = &mut inverse_memory_index.raw[..end];\n+        let fields_excluding_tail = &fields.raw[..end];\n \n         // If `-Z randomize-layout` was enabled for the type definition we can shuffle\n         // the field ordering to try and catch some code making assumptions about layouts\n@@ -844,8 +845,11 @@ fn univariant(\n             }\n             // Otherwise we just leave things alone and actually optimize the type's fields\n         } else {\n-            let max_field_align = fields.iter().map(|f| f.align().abi.bytes()).max().unwrap_or(1);\n-            let largest_niche_size = fields\n+            // To allow unsizing `&Foo<Type>` -> `&Foo<dyn Trait>`, the layout of the struct must\n+            // not depend on the layout of the tail.\n+            let max_field_align =\n+                fields_excluding_tail.iter().map(|f| f.align().abi.bytes()).max().unwrap_or(1);\n+            let largest_niche_size = fields_excluding_tail\n                 .iter()\n                 .filter_map(|f| f.largest_niche())\n                 .map(|n| n.available(dl))"}, {"sha": "ebc4b9e98b7ab4a5067ea22422b8eef2c61d4d14", "filename": "tests/ui/layout/issue-112048-unsizing-field-order.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/381b778d27e74e4fc8cc161af5a45d7bee572f47/tests%2Fui%2Flayout%2Fissue-112048-unsizing-field-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381b778d27e74e4fc8cc161af5a45d7bee572f47/tests%2Fui%2Flayout%2Fissue-112048-unsizing-field-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fissue-112048-unsizing-field-order.rs?ref=381b778d27e74e4fc8cc161af5a45d7bee572f47", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+\n+// Check that unsizing doesn't reorder fields.\n+\n+#![allow(dead_code)]\n+\n+use std::fmt::Debug;\n+\n+#[derive(Debug)]\n+struct GcNode<T: ?Sized> {\n+    gets_swapped_with_next: usize,\n+    next: Option<&'static GcNode<dyn Debug>>,\n+    tail: T,\n+}\n+\n+fn main() {\n+    let node: Box<GcNode<dyn Debug>> = Box::new(GcNode {\n+        gets_swapped_with_next: 42,\n+        next: None,\n+        tail: Box::new(1),\n+    });\n+\n+    assert_eq!(node.gets_swapped_with_next, 42);\n+    assert!(node.next.is_none());\n+}"}]}