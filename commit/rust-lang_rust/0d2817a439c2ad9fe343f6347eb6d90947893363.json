{"sha": "0d2817a439c2ad9fe343f6347eb6d90947893363", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjgxN2E0MzljMmFkOWZlMzQzZjYzNDdlYjZkOTA5NDc4OTMzNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T13:34:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T13:34:05Z"}, "message": "Auto merge of #65939 - anp:incremental-rustfmt-rollout, r=Mark-Simulacrum\n\nEnable incremental rustfmt adoption\n\nEnables an incremental rollout of rustfmt usage within the compiler via a granular ignore configuration and automated enforcement. The decision to format the repository was approved in https://github.com/rust-lang/compiler-team/issues/80#issuecomment-491324079.\n\nThis PR includes:\n\n* an `[ignore]` section to `rustfmt.toml` including most of the repository\n* `./x.py` downloads rustfmt from a specific nightly (we do not pin to beta or stable as we need unstable features)\n* an `./x.py fmt [--check]` command which runs cargo-fmt\n* `./x.py fmt --check` runs during the same test step as `src/tools/tidy`, on master, but not on beta or stable as we don't want to depend on nightly rustfmt there.\n* a commit to format `src/librustc_fs_util` as an initial target and to ensure enforcement is working from the start", "tree": {"sha": "a15bf7cfccfe914a2d3e39fd14a8aa0036d31d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15bf7cfccfe914a2d3e39fd14a8aa0036d31d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d2817a439c2ad9fe343f6347eb6d90947893363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2817a439c2ad9fe343f6347eb6d90947893363", "html_url": "https://github.com/rust-lang/rust/commit/0d2817a439c2ad9fe343f6347eb6d90947893363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d2817a439c2ad9fe343f6347eb6d90947893363/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26286c7ad0e8a5efc1e6a8ef88ffd64723112ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/26286c7ad0e8a5efc1e6a8ef88ffd64723112ae8", "html_url": "https://github.com/rust-lang/rust/commit/26286c7ad0e8a5efc1e6a8ef88ffd64723112ae8"}, {"sha": "b9e4174d8cf03fdcd0f9f128422b1f565d6b6607", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e4174d8cf03fdcd0f9f128422b1f565d6b6607", "html_url": "https://github.com/rust-lang/rust/commit/b9e4174d8cf03fdcd0f9f128422b1f565d6b6607"}], "stats": {"total": 299, "additions": 267, "deletions": 32}, "files": [{"sha": "4c819e88809b207bedb3080ee46338a2ed7daaa8", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -192,6 +192,7 @@ dependencies = [\n  \"cmake\",\n  \"filetime\",\n  \"getopts\",\n+ \"ignore\",\n  \"lazy_static 1.3.0\",\n  \"libc\",\n  \"num_cpus\",\n@@ -1525,9 +1526,9 @@ checksum = \"c3360c7b59e5ffa2653671fb74b4741a5d343c03f331c0a4aeda42b5c2b0ec7d\"\n \n [[package]]\n name = \"ignore\"\n-version = \"0.4.7\"\n+version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8dc57fa12805f367736a38541ac1a9fc6a52812a0ca959b1d4d4b640a89eb002\"\n+checksum = \"0ec16832258409d571aaef8273f3c3cc5b060d784e159d1a0f3b0017308f84a7\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"globset\","}, {"sha": "4e38aace15d1bc00d65bb37e0d739a93b6e359f3", "filename": "rustfmt.toml", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -4,3 +4,86 @@\n # be picked up automatically).\n version = \"Two\"\n use_small_heuristics = \"Max\"\n+\n+# by default we ignore everything in the repository\n+# tidy only checks files which are not ignored, each entry follows gitignore style\n+ignore = [\n+    # remove directories below, or opt out their subdirectories, as they are formatted\n+    \"src/bootstrap/\",\n+    \"src/build_helper/\",\n+    \"src/liballoc/\",\n+    \"src/libarena/\",\n+    \"src/libcore/\",\n+    \"src/libfmt_macros/\",\n+    \"src/libgraphviz/\",\n+    \"src/libpanic_abort/\",\n+    \"src/libpanic_unwind/\",\n+    \"src/libproc_macro/\",\n+    \"src/libprofiler_builtins/\",\n+    \"src/librustc/\",\n+    \"src/librustc_apfloat/\",\n+    \"src/librustc_asan/\",\n+    \"src/librustc_codegen_llvm/\",\n+    \"src/librustc_codegen_ssa/\",\n+    \"src/librustc_codegen_utils/\",\n+    \"src/librustc_data_structures/\",\n+    \"src/librustc_driver/\",\n+    \"src/librustc_errors/\",\n+    \"src/librustc_feature/\",\n+    \"src/librustc_incremental/\",\n+    \"src/librustc_index/\",\n+    \"src/librustc_interface/\",\n+    \"src/librustc_lexer/\",\n+    \"src/librustc_lint/\",\n+    \"src/librustc_llvm/\",\n+    \"src/librustc_lsan/\",\n+    \"src/librustc_macros/\",\n+    \"src/librustc_metadata/\",\n+    \"src/librustc_mir/\",\n+    \"src/librustc_msan/\",\n+    \"src/librustc_parse/\",\n+    \"src/librustc_passes/\",\n+    \"src/librustc_plugin/\",\n+    \"src/librustc_plugin_impl/\",\n+    \"src/librustc_privacy/\",\n+    \"src/librustc_resolve/\",\n+    \"src/librustc_save_analysis/\",\n+    \"src/librustc_session/\",\n+    \"src/librustc_target/\",\n+    \"src/librustc_traits/\",\n+    \"src/librustc_tsan/\",\n+    \"src/librustc_typeck/\",\n+    \"src/librustdoc/\",\n+    \"src/libserialize/\",\n+    \"src/libstd/\",\n+    \"src/libsyntax/\",\n+    \"src/libsyntax_expand/\",\n+    \"src/libsyntax_ext/\",\n+    \"src/libsyntax_pos/\",\n+    \"src/libterm/\",\n+    \"src/libtest/\",\n+    \"src/libunwind/\",\n+    \"src/rtstartup/\",\n+    \"src/rustc/\",\n+    \"src/rustllvm/\",\n+    \"src/test/\",\n+    \"src/tools/\",\n+    \"src/etc\",\n+\n+    # do not format submodules\n+    \"src/doc/book\",\n+    \"src/doc/edition-guide\",\n+    \"src/doc/embedded-book\",\n+    \"src/doc/nomicon\",\n+    \"src/doc/reference\",\n+    \"src/doc/rust-by-example\",\n+    \"src/doc/rustc-guide\",\n+    \"src/llvm-project\",\n+    \"src/stdarch\",\n+    \"src/tools/cargo\",\n+    \"src/tools/clippy\",\n+    \"src/tools/miri\",\n+    \"src/tools/rls\",\n+    \"src/tools/rust-installer\",\n+    \"src/tools/rustfmt\",\n+]"}, {"sha": "3ab00a6e147fc5b5342ab97b87aa730fff6a9cb8", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -47,6 +47,7 @@ serde_json = \"1.0.2\"\n toml = \"0.5\"\n lazy_static = \"1.3.0\"\n time = \"0.1\"\n+ignore = \"0.4.10\"\n \n [dev-dependencies]\n pretty_assertions = \"0.5\""}, {"sha": "6737086f6e5b0fab8016be51f10defbafbf4ae9a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -322,6 +322,7 @@ def __init__(self):\n         self.date = ''\n         self._download_url = ''\n         self.rustc_channel = ''\n+        self.rustfmt_channel = ''\n         self.build = ''\n         self.build_dir = os.path.join(os.getcwd(), \"build\")\n         self.clean = False\n@@ -344,6 +345,7 @@ def download_stage0(self):\n         \"\"\"\n         rustc_channel = self.rustc_channel\n         cargo_channel = self.cargo_channel\n+        rustfmt_channel = self.rustfmt_channel\n \n         def support_xz():\n             try:\n@@ -393,13 +395,29 @@ def support_xz():\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n-    def _download_stage0_helper(self, filename, pattern, tarball_suffix):\n+        if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n+            not os.path.exists(self.rustfmt())\n+            or self.program_out_of_date(self.rustfmt_stamp())\n+        ):\n+            if rustfmt_channel:\n+                tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+                [channel, date] = rustfmt_channel.split('-', 1)\n+                filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n+                self._download_stage0_helper(filename, \"rustfmt-preview\", tarball_suffix, date)\n+                self.fix_executable(\"{}/bin/rustfmt\".format(self.bin_root()))\n+                self.fix_executable(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n+                with output(self.rustfmt_stamp()) as rustfmt_stamp:\n+                    rustfmt_stamp.write(self.date)\n+\n+    def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n+        if date is None:\n+            date = self.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.date)\n+        rustc_cache = os.path.join(cache_dst, date)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        url = \"{}/dist/{}\".format(self._download_url, self.date)\n+        url = \"{}/dist/{}\".format(self._download_url, date)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n@@ -493,6 +511,16 @@ def cargo_stamp(self):\n         \"\"\"\n         return os.path.join(self.bin_root(), '.cargo-stamp')\n \n+    def rustfmt_stamp(self):\n+        \"\"\"Return the path for .rustfmt-stamp\n+\n+        >>> rb = RustBuild()\n+        >>> rb.build_dir = \"build\"\n+        >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n+        True\n+        \"\"\"\n+        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n+\n     def program_out_of_date(self, stamp_path):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n@@ -565,6 +593,12 @@ def rustc(self):\n         \"\"\"Return config path for rustc\"\"\"\n         return self.program_config('rustc')\n \n+    def rustfmt(self):\n+        \"\"\"Return config path for rustfmt\"\"\"\n+        if not self.rustfmt_channel:\n+            return None\n+        return self.program_config('rustfmt')\n+\n     def program_config(self, program):\n         \"\"\"Return config path for the given program\n \n@@ -868,6 +902,9 @@ def bootstrap(help_triggered):\n     build.rustc_channel = data['rustc']\n     build.cargo_channel = data['cargo']\n \n+    if \"rustfmt\" in data:\n+        build.rustfmt_channel = data['rustfmt']\n+\n     if 'dev' in data:\n         build.set_dev_environment()\n     else:\n@@ -895,6 +932,8 @@ def bootstrap(help_triggered):\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     env[\"CARGO\"] = build.cargo()\n     env[\"RUSTC\"] = build.rustc()\n+    if build.rustfmt():\n+        env[\"RUSTFMT\"] = build.rustfmt()\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "0e941e13676684d8c7b4f8dcfa94500486cba740", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -20,14 +20,14 @@ def setUp(self):\n         os.mkdir(os.path.join(self.rust_root, \"src\"))\n         with open(os.path.join(self.rust_root, \"src\",\n                                \"stage0.txt\"), \"w\") as stage0:\n-            stage0.write(\"#ignore\\n\\ndate: 2017-06-15\\nrustc: beta\\ncargo: beta\")\n+            stage0.write(\"#ignore\\n\\ndate: 2017-06-15\\nrustc: beta\\ncargo: beta\\nrustfmt: beta\")\n \n     def tearDown(self):\n         rmtree(self.rust_root)\n \n     def test_stage0_data(self):\n         \"\"\"Extract data from stage0.txt\"\"\"\n-        expected = {\"date\": \"2017-06-15\", \"rustc\": \"beta\", \"cargo\": \"beta\"}\n+        expected = {\"date\": \"2017-06-15\", \"rustc\": \"beta\", \"cargo\": \"beta\", \"rustfmt\": \"beta\"}\n         data = bootstrap.stage0_data(self.rust_root)\n         self.assertDictEqual(data, expected)\n "}, {"sha": "bd0462fca6dfe51784b3fab95378d9946ead29d4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -314,6 +314,7 @@ pub enum Kind {\n     Check,\n     Clippy,\n     Fix,\n+    Format,\n     Test,\n     Bench,\n     Dist,\n@@ -353,7 +354,7 @@ impl<'a> Builder<'a> {\n                 tool::Miri,\n                 native::Lld\n             ),\n-            Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n+            Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => describe!(\n                 check::Std,\n                 check::Rustc,\n                 check::Rustdoc\n@@ -514,7 +515,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n-            Subcommand::Clean { .. } => panic!(),\n+            Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n         let builder = Builder {"}, {"sha": "3e67734e690781d586aa543d16d84b01962e752d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -5,6 +5,7 @@\n \n use std::collections::{HashMap, HashSet};\n use std::env;\n+use std::ffi::OsString;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process;\n@@ -149,6 +150,7 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+    pub initial_rustfmt: Option<PathBuf>,\n     pub out: PathBuf,\n }\n \n@@ -348,12 +350,16 @@ struct TomlTarget {\n impl Config {\n     fn path_from_python(var_key: &str) -> PathBuf {\n         match env::var_os(var_key) {\n-            // Do not trust paths from Python and normalize them slightly (#49785).\n-            Some(var_val) => Path::new(&var_val).components().collect(),\n+            Some(var_val) => Self::normalize_python_path(var_val),\n             _ => panic!(\"expected '{}' to be set\", var_key),\n         }\n     }\n \n+    /// Normalizes paths from Python slightly. We don't trust paths from Python (#49785).\n+    fn normalize_python_path(path: OsString) -> PathBuf {\n+        Path::new(&path).components().collect()\n+    }\n+\n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n@@ -380,6 +386,7 @@ impl Config {\n \n         config.initial_rustc = Config::path_from_python(\"RUSTC\");\n         config.initial_cargo = Config::path_from_python(\"CARGO\");\n+        config.initial_rustfmt = env::var_os(\"RUSTFMT\").map(Config::normalize_python_path);\n \n         config\n     }"}, {"sha": "b98e2c1bf24664f3add859f527018dcd932d417a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -53,6 +53,9 @@ pub enum Subcommand {\n     Fix {\n         paths: Vec<PathBuf>,\n     },\n+    Format {\n+        check: bool,\n+    },\n     Doc {\n         paths: Vec<PathBuf>,\n     },\n@@ -102,6 +105,7 @@ Subcommands:\n     check       Compile either the compiler or libraries, using cargo check\n     clippy      Run clippy\n     fix         Run cargo fix\n+    fmt         Run rustfmt\n     test        Build and run some test suites\n     bench       Build and run some benchmarks\n     doc         Build documentation\n@@ -160,6 +164,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                 || (s == \"check\")\n                 || (s == \"clippy\")\n                 || (s == \"fix\")\n+                || (s == \"fmt\")\n                 || (s == \"test\")\n                 || (s == \"bench\")\n                 || (s == \"doc\")\n@@ -222,6 +227,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n             \"clean\" => {\n                 opts.optflag(\"\", \"all\", \"clean all build artifacts\");\n             }\n+            \"fmt\" => {\n+                opts.optflag(\"\", \"check\", \"check formatting instead of applying.\");\n+            }\n             _ => {}\n         };\n \n@@ -323,6 +331,17 @@ Arguments:\n         ./x.py fix src/libcore src/libproc_macro\",\n                 );\n             }\n+            \"fmt\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand optionally accepts a `--check` flag which succeeds if formatting is correct and\n+    fails if it is not. For example:\n+\n+        ./x.py fmt\n+        ./x.py fmt --check\",\n+                );\n+            }\n             \"test\" => {\n                 subcommand_help.push_str(\n                     \"\\n\n@@ -388,7 +407,7 @@ Arguments:\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n             extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());\n-        } else if subcommand.as_str() != \"clean\" {\n+        } else if !(subcommand.as_str() == \"clean\" || subcommand.as_str() == \"fmt\") {\n             extra_help.push_str(\n                 format!(\n                     \"Run `./x.py {} -h -v` to see a list of available paths.\",\n@@ -439,6 +458,11 @@ Arguments:\n                     all: matches.opt_present(\"all\"),\n                 }\n             }\n+            \"fmt\" => {\n+                Subcommand::Format {\n+                    check: matches.opt_present(\"check\"),\n+                }\n+            }\n             \"dist\" => Subcommand::Dist { paths },\n             \"install\" => Subcommand::Install { paths },\n             _ => {"}, {"sha": "c8ae2f4e6888c6065f950c2a3f637cb635d5fe03", "filename": "src/bootstrap/format.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -0,0 +1,64 @@\n+//! Runs rustfmt on the repository.\n+\n+use crate::Build;\n+use std::process::Command;\n+use ignore::WalkBuilder;\n+use std::path::Path;\n+use build_helper::t;\n+\n+fn rustfmt(build: &Build, path: &Path, check: bool) {\n+    let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {\n+        eprintln!(\"./x.py fmt is not supported on this channel\");\n+        std::process::exit(1);\n+    });\n+\n+    let mut cmd = Command::new(&rustfmt_path);\n+    // avoid the submodule config paths from coming into play,\n+    // we only allow a single global config for the workspace for now\n+    cmd.arg(\"--config-path\").arg(&build.src.canonicalize().unwrap());\n+    cmd.arg(\"--unstable-features\");\n+    cmd.arg(\"--skip-children\");\n+    if check {\n+        cmd.arg(\"--check\");\n+    }\n+    cmd.arg(&path);\n+    let cmd_debug = format!(\"{:?}\", cmd);\n+    let status = cmd.status().expect(\"executing rustfmt\");\n+    assert!(status.success(), \"running {} successful\", cmd_debug);\n+}\n+\n+#[derive(serde::Deserialize)]\n+struct RustfmtConfig {\n+    ignore: Vec<String>,\n+}\n+\n+pub fn format(build: &Build, check: bool) {\n+    let mut builder = ignore::types::TypesBuilder::new();\n+    builder.add_defaults();\n+    builder.select(\"rust\");\n+    let matcher = builder.build().unwrap();\n+    let rustfmt_config = build.src.join(\"rustfmt.toml\");\n+    if !rustfmt_config.exists() {\n+        eprintln!(\"Not running formatting checks; rustfmt.toml does not exist.\");\n+        eprintln!(\"This may happen in distributed tarballs.\");\n+        return;\n+    }\n+    let rustfmt_config = t!(std::fs::read_to_string(&rustfmt_config));\n+    let rustfmt_config: RustfmtConfig = t!(toml::from_str(&rustfmt_config));\n+    let mut ignore_fmt = ignore::overrides::OverrideBuilder::new(&build.src);\n+    for ignore in rustfmt_config.ignore {\n+        ignore_fmt.add(&format!(\"!{}\", ignore)).expect(&ignore);\n+    }\n+    let ignore_fmt = ignore_fmt.build().unwrap();\n+\n+    let walker = WalkBuilder::new(&build.src)\n+        .types(matcher)\n+        .overrides(ignore_fmt)\n+        .build();\n+    for entry in walker {\n+        let entry = t!(entry);\n+        if entry.file_type().map_or(false, |t| t.is_file()) {\n+            rustfmt(build, &entry.path(), check);\n+        }\n+    }\n+}"}, {"sha": "ff9a55afa295750e0bb892b7587cd748b4485904", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -147,6 +147,7 @@ mod builder;\n mod cache;\n mod tool;\n mod toolstate;\n+mod format;\n \n #[cfg(windows)]\n mod job;\n@@ -421,6 +422,10 @@ impl Build {\n             job::setup(self);\n         }\n \n+        if let Subcommand::Format { check } = self.config.cmd {\n+            return format::format(self, check);\n+        }\n+\n         if let Subcommand::Clean { all } = self.config.cmd {\n             return clean::clean(self, all);\n         }"}, {"sha": "17aea17e69e0bd739ce9765c89ed8e9fa58f0498", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -779,6 +779,9 @@ impl Step for Tidy {\n     /// This tool in `src/tools` checks up on various bits and pieces of style and\n     /// otherwise just implements a few lint-like checks that are specific to the\n     /// compiler itself.\n+    ///\n+    /// Once tidy passes, this step also runs `fmt --check` if tests are being run\n+    /// for the `dev` or `nightly` channels.\n     fn run(self, builder: &Builder<'_>) {\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(builder.src.join(\"src\"));\n@@ -792,6 +795,11 @@ impl Step for Tidy {\n \n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n+\n+        if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n+            builder.info(\"fmt check\");\n+            crate::format::format(&builder.build, true);\n+        }\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}, {"sha": "289b9f30c3bbb631c67d8741f1f112104c8e0401", "filename": "src/librustc_fs_util/lib.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Flibrustc_fs_util%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Flibrustc_fs_util%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2Flib.rs?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -1,7 +1,7 @@\n-use std::path::{Path, PathBuf};\n use std::ffi::CString;\n use std::fs;\n use std::io;\n+use std::path::{Path, PathBuf};\n \n // Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n // verbatim paths under the hood to non-verbatim paths! This manifests itself as\n@@ -21,8 +21,8 @@ use std::io;\n //   https://github.com/rust-lang/rust/issues/25505#issuecomment-102876737\n #[cfg(windows)]\n pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n-    use std::path;\n     use std::ffi::OsString;\n+    use std::path;\n     let mut components = p.components();\n     let prefix = match components.next() {\n         Some(path::Component::Prefix(p)) => p,\n@@ -68,12 +68,10 @@ pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<Li\n \n     match fs::hard_link(p, q) {\n         Ok(()) => Ok(LinkOrCopy::Link),\n-        Err(_) => {\n-            match fs::copy(p, q) {\n-                Ok(_) => Ok(LinkOrCopy::Copy),\n-                Err(e) => Err(e),\n-            }\n-        }\n+        Err(_) => match fs::copy(p, q) {\n+            Ok(_) => Ok(LinkOrCopy::Copy),\n+            Err(e) => Err(e),\n+        },\n     }\n }\n \n@@ -86,29 +84,28 @@ pub enum RenameOrCopyRemove {\n /// Rename `p` into `q`, preferring to use `rename` if possible.\n /// If `rename` fails (rename may fail for reasons such as crossing\n /// filesystem), fallback to copy & remove\n-pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(p: P,\n-                                                             q: Q)\n-                                                             -> io::Result<RenameOrCopyRemove> {\n+pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(\n+    p: P,\n+    q: Q,\n+) -> io::Result<RenameOrCopyRemove> {\n     let p = p.as_ref();\n     let q = q.as_ref();\n     match fs::rename(p, q) {\n         Ok(()) => Ok(RenameOrCopyRemove::Rename),\n-        Err(_) => {\n-            match fs::copy(p, q) {\n-                Ok(_) => {\n-                    fs::remove_file(p)?;\n-                    Ok(RenameOrCopyRemove::CopyRemove)\n-                }\n-                Err(e) => Err(e),\n+        Err(_) => match fs::copy(p, q) {\n+            Ok(_) => {\n+                fs::remove_file(p)?;\n+                Ok(RenameOrCopyRemove::CopyRemove)\n             }\n-        }\n+            Err(e) => Err(e),\n+        },\n     }\n }\n \n #[cfg(unix)]\n pub fn path_to_c_string(p: &Path) -> CString {\n-    use std::os::unix::ffi::OsStrExt;\n     use std::ffi::OsStr;\n+    use std::os::unix::ffi::OsStrExt;\n     let p: &OsStr = p.as_ref();\n     CString::new(p.as_bytes()).unwrap()\n }"}, {"sha": "494944720d9e801def4701eef1c5d28025f3f639", "filename": "src/stage0.txt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0d2817a439c2ad9fe343f6347eb6d90947893363/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=0d2817a439c2ad9fe343f6347eb6d90947893363", "patch": "@@ -16,6 +16,11 @@ date: 2019-12-18\n rustc: beta\n cargo: beta\n \n+# We use a nightly rustfmt to format the source because it solves some bootstrapping\n+# issues with use of new syntax in this repo. If you're looking at the beta/stable branch, this key should be omitted,\n+# as we don't want to depend on rustfmt from nightly there.\n+rustfmt: nightly-2019-12-18\n+\n # When making a stable release the process currently looks like:\n #\n #   1. Produce stable build, upload it to dev-static"}]}