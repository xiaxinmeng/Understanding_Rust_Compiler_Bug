{"sha": "871d588ec44ec21008df54233dc60615a76e2638", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWQ1ODhlYzQ0ZWMyMTAwOGRmNTQyMzNkYzYwNjE1YTc2ZTI2Mzg=", "commit": {"author": {"name": "Adam Greig", "email": "adam@adamgreig.com", "date": "2021-07-19T21:18:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T21:18:29Z"}, "message": "Add 32-bit SIMD types i/u16x2 and i/u8x4. (#145)\n\nThese types are useful for the \"SIMD32\" instructions available on ARMv6\r\n(except M-class), ARMv7 (M-class with DSP), and ARMv8.", "tree": {"sha": "bdbbac42ddbf9a154e0f5a6db10a62397e88fe1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbbac42ddbf9a154e0f5a6db10a62397e88fe1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871d588ec44ec21008df54233dc60615a76e2638", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9ewlCRBK7hj4Ov3rIwAAn08IADpnGbKAURObWn5rqZofq69I\nmF4XgJNkiZ51/IgUyUrDw4afkLe58mj/04SJDASuQ37G+xLjK+U3rAuHSoV/rtwA\n2KPm6NdaLyzeiQClV3D9WtEtHngm4V6/fLWZTSx7fokFmwQ/b5OgJtQTpatCt1mW\n7EI+diHrinPkQ0vx05DRhCx1LspRXM5ZPSE+Ez2jh89z/yKwc5LV8LqfMFCbWIgQ\ncgtMbpJrnN+U+mWo4HHFNbNlHGXVAsyb0ag7joncCYXq2IZD9TbtYLmbGwVMDKOb\nPWGC3+IoGyFjHnKwOIts/bbKDs7qOVbgKHfyPK6WdIOwG7RQE3VXuvWqkQUsgg0=\n=dUD4\n-----END PGP SIGNATURE-----\n", "payload": "tree bdbbac42ddbf9a154e0f5a6db10a62397e88fe1e\nparent 715f9ac4e36ee303c3d464121ebb65df8f92416e\nauthor Adam Greig <adam@adamgreig.com> 1626729509 +0100\ncommitter GitHub <noreply@github.com> 1626729509 -0700\n\nAdd 32-bit SIMD types i/u16x2 and i/u8x4. (#145)\n\nThese types are useful for the \"SIMD32\" instructions available on ARMv6\r\n(except M-class), ARMv7 (M-class with DSP), and ARMv8."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871d588ec44ec21008df54233dc60615a76e2638", "html_url": "https://github.com/rust-lang/rust/commit/871d588ec44ec21008df54233dc60615a76e2638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871d588ec44ec21008df54233dc60615a76e2638/comments", "author": {"login": "adamgreig", "id": 47219, "node_id": "MDQ6VXNlcjQ3MjE5", "avatar_url": "https://avatars.githubusercontent.com/u/47219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgreig", "html_url": "https://github.com/adamgreig", "followers_url": "https://api.github.com/users/adamgreig/followers", "following_url": "https://api.github.com/users/adamgreig/following{/other_user}", "gists_url": "https://api.github.com/users/adamgreig/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgreig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgreig/subscriptions", "organizations_url": "https://api.github.com/users/adamgreig/orgs", "repos_url": "https://api.github.com/users/adamgreig/repos", "events_url": "https://api.github.com/users/adamgreig/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgreig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715f9ac4e36ee303c3d464121ebb65df8f92416e", "url": "https://api.github.com/repos/rust-lang/rust/commits/715f9ac4e36ee303c3d464121ebb65df8f92416e", "html_url": "https://github.com/rust-lang/rust/commit/715f9ac4e36ee303c3d464121ebb65df8f92416e"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "75b75d7a15c0d812abcfc1abade2c983bed46e73", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/871d588ec44ec21008df54233dc60615a76e2638/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871d588ec44ec21008df54233dc60615a76e2638/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=871d588ec44ec21008df54233dc60615a76e2638", "patch": "@@ -136,6 +136,9 @@ pub type isizex4 = SimdIsize<4>;\n /// Vector of eight `isize` values\n pub type isizex8 = SimdIsize<8>;\n \n+/// Vector of two `i16` values\n+pub type i16x2 = SimdI16<2>;\n+\n /// Vector of four `i16` values\n pub type i16x4 = SimdI16<4>;\n \n@@ -169,6 +172,9 @@ pub type i64x4 = SimdI64<4>;\n /// Vector of eight `i64` values\n pub type i64x8 = SimdI64<8>;\n \n+/// Vector of four `i8` values\n+pub type i8x4 = SimdI8<4>;\n+\n /// Vector of eight `i8` values\n pub type i8x8 = SimdI8<8>;\n "}, {"sha": "e7d0fa79c70eb9833afdfec6379c636eaf517cc7", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/871d588ec44ec21008df54233dc60615a76e2638/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871d588ec44ec21008df54233dc60615a76e2638/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=871d588ec44ec21008df54233dc60615a76e2638", "patch": "@@ -105,6 +105,9 @@ pub type usizex4 = SimdUsize<4>;\n /// Vector of eight `usize` values\n pub type usizex8 = SimdUsize<8>;\n \n+/// Vector of two `u16` values\n+pub type u16x2 = SimdU16<2>;\n+\n /// Vector of four `u16` values\n pub type u16x4 = SimdU16<4>;\n \n@@ -138,6 +141,9 @@ pub type u64x4 = SimdU64<4>;\n /// Vector of eight `u64` values\n pub type u64x8 = SimdU64<8>;\n \n+/// Vector of four `u8` values\n+pub type u8x4 = SimdU8<4>;\n+\n /// Vector of eight `u8` values\n pub type u8x8 = SimdU8<8>;\n "}]}