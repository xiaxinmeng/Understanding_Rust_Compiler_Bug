{"sha": "e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Yzg3Yzc3N2M4OGQzNmI3Y2U4YWVlMWVmMTNkNTc0NGY5MGRhM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T15:18:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T15:18:47Z"}, "message": "`!(a == b)` --> `a != b`", "tree": {"sha": "87020173c7d8d3c7b2e8212971ffc05cb31d9b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87020173c7d8d3c7b2e8212971ffc05cb31d9b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "html_url": "https://github.com/rust-lang/rust/commit/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988", "html_url": "https://github.com/rust-lang/rust/commit/b05dd13f2c5199bc2e97a5b5e6910b1cde4be988"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "74a10faa070cd16279eb3a884941ab50c6e48553", "filename": "src/booleans.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "patch": "@@ -129,18 +129,10 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n-macro_rules! brackets {\n-    ($val:expr => $($name:ident),*) => {\n-        match $val {\n-            $($name(_) => true,)*\n-            _ => false,\n-        }\n-    }\n-}\n-\n fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n     fn recurse(brackets: bool, cx: &LateContext, suggestion: &Bool, terminals: &[&Expr], mut s: String) -> String {\n         use quine_mc_cluskey::Bool::*;\n+        let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n         match *suggestion {\n             True => {\n                 s.push_str(\"true\");\n@@ -151,17 +143,59 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                 s\n             },\n             Not(ref inner) => {\n-                s.push('!');\n-                recurse(brackets!(**inner => And, Or, Term), cx, inner, terminals, s)\n+                match **inner {\n+                    And(_) | Or(_) => {\n+                        s.push('!');\n+                        recurse(true, cx, inner, terminals, s)\n+                    },\n+                    Term(n) => {\n+                        match terminals[n as usize].node {\n+                            ExprBinary(binop, ref lhs, ref rhs) => {\n+                                let op = match binop.node {\n+                                    BiEq => \" != \",\n+                                    BiNe => \" == \",\n+                                    BiLt => \" >= \",\n+                                    BiGt => \" <= \",\n+                                    BiLe => \" > \",\n+                                    BiGe => \" < \",\n+                                    _ => {\n+                                        s.push('!');\n+                                        return recurse(true, cx, inner, terminals, s)\n+                                    },\n+                                };\n+                                s.push_str(&snip(lhs));\n+                                s.push_str(op);\n+                                s.push_str(&snip(rhs));\n+                                s\n+                            },\n+                            _ => {\n+                                s.push('!');\n+                                recurse(false, cx, inner, terminals, s)\n+                            },\n+                        }\n+                    },\n+                    _ => {\n+                        s.push('!');\n+                        recurse(false, cx, inner, terminals, s)\n+                    },\n+                }\n             },\n             And(ref v) => {\n                 if brackets {\n                     s.push('(');\n                 }\n-                s = recurse(brackets!(v[0] => Or), cx, &v[0], terminals, s);\n+                if let Or(_) = v[0] {\n+                    s = recurse(true, cx, &v[0], terminals, s);\n+                } else {\n+                    s = recurse(false, cx, &v[0], terminals, s);\n+                }\n                 for inner in &v[1..] {\n                     s.push_str(\" && \");\n-                    s = recurse(brackets!(*inner => Or), cx, inner, terminals, s);\n+                    if let Or(_) = *inner {\n+                        s = recurse(true, cx, inner, terminals, s);\n+                    } else {\n+                        s = recurse(false, cx, inner, terminals, s);\n+                    }\n                 }\n                 if brackets {\n                     s.push(')');\n@@ -188,7 +222,7 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                         s.push('(');\n                     }\n                 }\n-                s.push_str(&snippet_opt(cx, terminals[n as usize].span).expect(\"don't try to improve booleans created by macros\"));\n+                s.push_str(&snip(&terminals[n as usize]));\n                 if brackets {\n                     if let ExprBinary(..) = terminals[n as usize].node {\n                         s.push(')');"}, {"sha": "aba55f0b8b486f3dc73edf5aae1075a6030e1016", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c87c777c88d36b7ce8aee1ef13d5744f90da3d/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=e9c87c777c88d36b7ce8aee1ef13d5744f90da3d", "patch": "@@ -66,7 +66,7 @@ fn equality_stuff() {\n     //~| HELP for further information visit\n     //~| SUGGESTION let _ = a == b && c == 5;\n     //~| HELP try\n-    //~| SUGGESTION let _ = !(!(c == 5) || !(a == b));\n+    //~| SUGGESTION let _ = !(c != 5 || a != b);\n     let _ = a < b && a >= b; //~ ERROR this boolean expression contains a logic bug\n     //~| HELP for further information visit\n     //~| HELP this expression can be optimized out\n@@ -81,7 +81,7 @@ fn equality_stuff() {\n \n     let _ = a != b || !(a != b || c == d); //~ ERROR this boolean expression can be simplified\n     //~| HELP for further information visit\n-    //~| SUGGESTION let _ = !(c == d) || a != b;\n+    //~| SUGGESTION let _ = c != d || a != b;\n     //~| HELP try\n-    //~| SUGGESTION let _ = !(!(a != b) && c == d);\n+    //~| SUGGESTION let _ = !(a == b && c == d);\n }"}]}