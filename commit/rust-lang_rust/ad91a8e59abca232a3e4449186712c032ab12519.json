{"sha": "ad91a8e59abca232a3e4449186712c032ab12519", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTFhOGU1OWFiY2EyMzJhM2U0NDQ5MTg2NzEyYzAzMmFiMTI1MTk=", "commit": {"author": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T09:38:15Z"}, "committer": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T09:38:15Z"}, "message": "improve style", "tree": {"sha": "b201d99f9724332d96860531418eeaecf50a5bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b201d99f9724332d96860531418eeaecf50a5bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad91a8e59abca232a3e4449186712c032ab12519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad91a8e59abca232a3e4449186712c032ab12519", "html_url": "https://github.com/rust-lang/rust/commit/ad91a8e59abca232a3e4449186712c032ab12519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad91a8e59abca232a3e4449186712c032ab12519/comments", "author": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb099dc786c1bee7116fecb4965d34ad5e0a4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb099dc786c1bee7116fecb4965d34ad5e0a4a5", "html_url": "https://github.com/rust-lang/rust/commit/5fb099dc786c1bee7116fecb4965d34ad5e0a4a5"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "72573af9c40ab809613a961f1af22f2af1a3a922", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad91a8e59abca232a3e4449186712c032ab12519/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad91a8e59abca232a3e4449186712c032ab12519/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ad91a8e59abca232a3e4449186712c032ab12519", "patch": "@@ -425,38 +425,35 @@ mod tests {\n             let tts: &[TokenTree] = &tts[..];\n \n             match tts {\n-               &[TokenTree::Token(Token {kind: token::Ident(name_macro_rules, false), ..}),\n-                 TokenTree::Token(Token { kind: token::Not, .. }),\n-                 TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }),\n-                 TokenTree::Delimited(_, macro_delim, ref macro_tts)\n+                &[\n+                    TokenTree::Token(Token {kind: token::Ident(name_macro_rules, false), ..}),\n+                    TokenTree::Token(Token {kind: token::Not, ..}),\n+                    TokenTree::Token(Token {kind: token::Ident(name_zip, false), ..}),\n+                    TokenTree::Delimited(_, macro_delim, ref macro_tts)\n                 ]\n                 if name_macro_rules == sym::macro_rules && name_zip.as_str() == \"zip\" => {\n                     let tts = &macro_tts.trees().collect::<Vec<_>>();\n                     match tts {\n                         &[\n                             TokenTree::Delimited(_, first_delim, ref first_tts),\n-                            TokenTree::Token(Token { kind: token::FatArrow, .. }),\n+                            TokenTree::Token(Token {kind: token::FatArrow, ..}),\n                             TokenTree::Delimited(_, second_delim, ref second_tts),\n                         ]\n                         if macro_delim == token::Paren => {\n                             let tts = &first_tts.trees().collect::<Vec<_>>();\n                             match tts {\n                                 &[\n-                                    TokenTree::Token(Token { kind: token::Dollar, .. }),\n-                                    TokenTree::Token(Token {\n-                                        kind: token::Ident(name, false), ..\n-                                    }),\n+                                    TokenTree::Token(Token {kind: token::Dollar, ..}),\n+                                    TokenTree::Token(Token {kind: token::Ident(name, false), ..}),\n                                 ]\n                                 if first_delim == token::Paren && name.as_str() == \"a\" => {},\n                                 _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                             }\n                             let tts = &second_tts.trees().collect::<Vec<_>>();\n                             match tts {\n                                 &[\n-                                    TokenTree::Token(Token { kind: token::Dollar, .. }),\n-                                    TokenTree::Token(Token {\n-                                        kind: token::Ident(name, false), ..\n-                                    }),\n+                                    TokenTree::Token(Token {kind: token::Dollar, ..}),\n+                                    TokenTree::Token(Token {kind: token::Ident(name, false), ..}),\n                                 ]\n                                 if second_delim == token::Paren && name.as_str() == \"a\" => {},\n                                 _ => panic!(\"value 4: {:?} {:?}\", second_delim, second_tts),"}]}