{"sha": "22251a87be74865cc977f3fdcc995c1c467361c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjUxYTg3YmU3NDg2NWNjOTc3ZjNmZGNjOTk1YzFjNDY3MzYxYzc=", "commit": {"author": {"name": "Alexander Ronald Altman", "email": "alexanderaltman@me.com", "date": "2019-01-17T02:10:18Z"}, "committer": {"name": "Alexander Ronald Altman", "email": "alexanderaltman@me.com", "date": "2019-01-17T02:10:18Z"}, "message": "Enhance `Pin` impl applicability for `PartialEq` and `PartialOrd`.", "tree": {"sha": "cf6d45791c6b02b1449435bf8d29745bd11bd080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6d45791c6b02b1449435bf8d29745bd11bd080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22251a87be74865cc977f3fdcc995c1c467361c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22251a87be74865cc977f3fdcc995c1c467361c7", "html_url": "https://github.com/rust-lang/rust/commit/22251a87be74865cc977f3fdcc995c1c467361c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22251a87be74865cc977f3fdcc995c1c467361c7/comments", "author": {"login": "pthariensflame", "id": 1847577, "node_id": "MDQ6VXNlcjE4NDc1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/1847577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pthariensflame", "html_url": "https://github.com/pthariensflame", "followers_url": "https://api.github.com/users/pthariensflame/followers", "following_url": "https://api.github.com/users/pthariensflame/following{/other_user}", "gists_url": "https://api.github.com/users/pthariensflame/gists{/gist_id}", "starred_url": "https://api.github.com/users/pthariensflame/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pthariensflame/subscriptions", "organizations_url": "https://api.github.com/users/pthariensflame/orgs", "repos_url": "https://api.github.com/users/pthariensflame/repos", "events_url": "https://api.github.com/users/pthariensflame/events{/privacy}", "received_events_url": "https://api.github.com/users/pthariensflame/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pthariensflame", "id": 1847577, "node_id": "MDQ6VXNlcjE4NDc1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/1847577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pthariensflame", "html_url": "https://github.com/pthariensflame", "followers_url": "https://api.github.com/users/pthariensflame/followers", "following_url": "https://api.github.com/users/pthariensflame/following{/other_user}", "gists_url": "https://api.github.com/users/pthariensflame/gists{/gist_id}", "starred_url": "https://api.github.com/users/pthariensflame/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pthariensflame/subscriptions", "organizations_url": "https://api.github.com/users/pthariensflame/orgs", "repos_url": "https://api.github.com/users/pthariensflame/repos", "events_url": "https://api.github.com/users/pthariensflame/events{/privacy}", "received_events_url": "https://api.github.com/users/pthariensflame/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb2512144d1fc26330e85fb9d41c22ba1866259", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb2512144d1fc26330e85fb9d41c22ba1866259", "html_url": "https://github.com/rust-lang/rust/commit/ceb2512144d1fc26330e85fb9d41c22ba1866259"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "022481f463514db7ac815e8738dbe2eed91cb3f6", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/22251a87be74865cc977f3fdcc995c1c467361c7/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22251a87be74865cc977f3fdcc995c1c467361c7/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=22251a87be74865cc977f3fdcc995c1c467361c7", "patch": "@@ -99,6 +99,7 @@\n \n use fmt;\n use marker::{Sized, Unpin};\n+use cmp::{self, PartialEq, PartialOrd};\n use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n /// A pinned pointer.\n@@ -112,16 +113,59 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html\n //\n-// Note: the derives below are allowed because they all only use `&P`, so they\n-// cannot move the value behind `pointer`.\n+// Note: the derives below, and the explicit `PartialEq` and `PartialOrd`\n+// implementations, are allowed because they all only use `&P`, so they cannot move\n+// the value behind `pointer`.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[fundamental]\n #[repr(transparent)]\n-#[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(Copy, Clone, Hash, Eq, Ord)]\n pub struct Pin<P> {\n     pointer: P,\n }\n \n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialEq<Pin<Q>> for Pin<P>\n+where\n+    P: PartialEq<Q>,\n+{\n+    \n+    fn eq(&self, other: &Pin<Q>) -> bool {\n+        self.pointer == other.pointer\n+    }\n+\n+    fn ne(&self, other: &Pin<Q>) -> bool {\n+        self.pointer != other.pointer\n+    }\n+}\n+\n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialOrd<Pin<Q>> for Pin<P>\n+where\n+    P: PartialOrd<Q>,\n+{\n+    \n+    fn partial_cmp(&self, other: &Pin<Q>) -> Option<cmp::Ordering> {\n+        self.pointer.partial_cmp(&other.pointer)\n+    }\n+\n+    fn lt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer < other.pointer\n+    }\n+\n+    fn le(&self, other: &Pin<Q>) -> bool {\n+        self.pointer <= other.pointer\n+    }\n+\n+    fn gt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer > other.pointer\n+    }\n+\n+    fn ge(&self, other: &Pin<Q>) -> bool {\n+        self.pointer >= other.pointer\n+    }\n+}\n+\n impl<P: Deref> Pin<P>\n where\n     P::Target: Unpin,"}]}