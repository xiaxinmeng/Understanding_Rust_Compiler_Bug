{"sha": "51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjAwYjA4ZWJiZmI4YjY4NjZjODU1ZmRlZjhjNjYzZWQ1YzUyYmM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T03:40:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-26T19:23:42Z"}, "message": "Remove unused `attrs` field from `keywords`", "tree": {"sha": "0836c7f429d0b507e368af055ef297fdd80254ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0836c7f429d0b507e368af055ef297fdd80254ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "html_url": "https://github.com/rust-lang/rust/commit/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3e808730922d0509f0ede7addbf257f28424cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e808730922d0509f0ede7addbf257f28424cfd", "html_url": "https://github.com/rust-lang/rust/commit/e3e808730922d0509f0ede7addbf257f28424cfd"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "03fda94a6dfc539ef395295a6fed80cb81382d34", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "patch": "@@ -177,7 +177,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                         }\n                     }\n                 }\n-                return keyword.map(|p| (def_id, p, attrs));\n+                return keyword.map(|p| (def_id, p));\n             }\n             None\n         };\n@@ -199,8 +199,8 @@ impl Clean<ExternalCrate> for CrateNum {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_keyword(path.res).map(|(_, prim, attrs)| {\n-                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim, attrs)\n+                            as_keyword(path.res).map(|(_, prim)| {\n+                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim)\n                             })\n                         }\n                         _ => None,"}, {"sha": "2283b71a94fefa2dbc5207a2454ab563d7f82946", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "patch": "@@ -33,8 +33,8 @@ use smallvec::{smallvec, SmallVec};\n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n use crate::clean::inline;\n-use crate::clean::Clean;\n use crate::clean::types::Type::{QPath, ResolvedPath};\n+use crate::clean::Clean;\n use crate::core::DocContext;\n use crate::doctree;\n use crate::formats::cache::cache;\n@@ -69,7 +69,7 @@ crate struct ExternalCrate {\n     crate src: FileName,\n     crate attrs: Attributes,\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n-    crate keywords: Vec<(DefId, String, Attributes)>,\n+    crate keywords: Vec<(DefId, String)>,\n }\n \n /// Anything with a source location and set of attributes and, optionally, a\n@@ -121,7 +121,12 @@ impl Item {\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name.clean(cx), kind, cx)\n+        Item::from_def_id_and_parts(\n+            cx.tcx.hir().local_def_id(hir_id).to_def_id(),\n+            name.clean(cx),\n+            kind,\n+            cx,\n+        )\n     }\n \n     pub fn from_def_id_and_parts("}, {"sha": "1b22d26f49bd80b7787748151a2dea0d4d964b0a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f00b08ebbfb8b6866c855fdef8c663ed5c52bc/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=51f00b08ebbfb8b6866c855fdef8c663ed5c52bc", "patch": "@@ -1,10 +1,10 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n-    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemKind, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    TypeKind, WherePredicate,\n+    inline, Clean, Crate, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg, GenericArgs,\n+    GenericBound, Generics, GetDefId, ImportSource, Item, ItemKind, Lifetime, MacroKind, Path,\n+    PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding, TypeKind,\n+    WherePredicate,\n };\n use crate::core::DocContext;\n \n@@ -73,20 +73,9 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n                 cx,\n             )\n         }));\n-        m.items.extend(keywords.into_iter()\n-            .map(|(def_id, kw, _)| Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n-        ));\n-        /*\n-            source: Span::empty(),\n-            name: Some(kw.clone()),\n-            attrs,\n-            visibility: Visibility::Public,\n-            stability: get_stability(cx, def_id),\n-            deprecation: get_deprecation(cx, def_id),\n-            def_id,\n-            kind: ItemKind::KeywordItem(kw),\n+        m.items.extend(keywords.into_iter().map(|(def_id, kw)| {\n+            Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n         }));\n-        */\n     }\n \n     Crate {"}]}