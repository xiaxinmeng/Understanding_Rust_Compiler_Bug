{"sha": "7de90d5b6506f702c36ea20f46f92c3f8808668a", "node_id": "C_kwDOAAsO6NoAKDdkZTkwZDViNjUwNmY3MDJjMzZlYTIwZjQ2ZjkyYzNmODgwODY2OGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T05:58:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T05:58:30Z"}, "message": "Rollup merge of #93214 - ibraheemdev:issue-93210, r=davidtwco\n\nRespect doc(hidden) when suggesting available fields\n\nResolves #93210", "tree": {"sha": "fafc334005c17a5beb829d4cf3e82b5b5a839104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fafc334005c17a5beb829d4cf3e82b5b5a839104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de90d5b6506f702c36ea20f46f92c3f8808668a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93qGCRBK7hj4Ov3rIwAAipoIAHBkby0VAlabXeds+AewAChO\n/DXpm6/TxwsYalLBxdoHArG7EYawU1ebQ8TH17aWKe3vD+c7H1nw9jpNxQHJFQJS\ngFdkbH6nErOmAZa+/o/+NxeYt9XtS8gcgZTcDzAkUWLSzB/Ufv8OSD0/TLcHEvtg\nEQyRs/PySSvg1U+2yBrwi5U84JhNxh05eZXNXn0JW//Dgg1NR2i4mPeVJVp2/rYF\ntaIPjZvgzPvLHsrB/2Mdf9g0XypXinZPUckqaWtJ4qZH8WAh5Y2nhC9ecJjALtqB\n3S4ACPoJcLDWbeiMQ8+rJy2/VWN3+4egZBuLVsWEOYJoL2cn/pkFJqlJe5Ye0Co=\n=1zf6\n-----END PGP SIGNATURE-----\n", "payload": "tree fafc334005c17a5beb829d4cf3e82b5b5a839104\nparent 1cb22e4138ad977c51d66744e40ce2a22d7cd528\nparent b734abcbaeaec78828d00596c008d05d6c03c1b3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608710 +0100\ncommitter GitHub <noreply@github.com> 1643608710 +0100\n\nRollup merge of #93214 - ibraheemdev:issue-93210, r=davidtwco\n\nRespect doc(hidden) when suggesting available fields\n\nResolves #93210\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de90d5b6506f702c36ea20f46f92c3f8808668a", "html_url": "https://github.com/rust-lang/rust/commit/7de90d5b6506f702c36ea20f46f92c3f8808668a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de90d5b6506f702c36ea20f46f92c3f8808668a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb22e4138ad977c51d66744e40ce2a22d7cd528", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb22e4138ad977c51d66744e40ce2a22d7cd528", "html_url": "https://github.com/rust-lang/rust/commit/1cb22e4138ad977c51d66744e40ce2a22d7cd528"}, {"sha": "b734abcbaeaec78828d00596c008d05d6c03c1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b734abcbaeaec78828d00596c008d05d6c03c1b3", "html_url": "https://github.com/rust-lang/rust/commit/b734abcbaeaec78828d00596c008d05d6c03c1b3"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "0e1dbc53806ffe511bf4ae2e7d45cad784d5e72e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7de90d5b6506f702c36ea20f46f92c3f8808668a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de90d5b6506f702c36ea20f46f92c3f8808668a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=7de90d5b6506f702c36ea20f46f92c3f8808668a", "patch": "@@ -35,6 +35,7 @@ use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n+use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::error::TypeError::{FieldMisMatch, Sorts};\n@@ -1720,9 +1721,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|x| x.ident.name);\n-                if let Some(field_name) =\n-                    Self::suggest_field_name(variant, field.ident.name, skip_fields.collect())\n-                {\n+                if let Some(field_name) = self.suggest_field_name(\n+                    variant,\n+                    field.ident.name,\n+                    skip_fields.collect(),\n+                    expr_span,\n+                ) {\n                     err.span_suggestion(\n                         field.ident.span,\n                         \"a field with a similar name exists\",\n@@ -1743,7 +1747,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     format!(\"`{}` does not have this field\", ty),\n                                 );\n                             }\n-                            let available_field_names = self.available_field_names(variant);\n+                            let available_field_names =\n+                                self.available_field_names(variant, expr_span);\n                             if !available_field_names.is_empty() {\n                                 err.note(&format!(\n                                     \"available fields are: {}\",\n@@ -1759,19 +1764,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    // Return an hint about the closest match in field names\n+    // Return a hint about the closest match in field names\n     fn suggest_field_name(\n+        &self,\n         variant: &'tcx ty::VariantDef,\n         field: Symbol,\n         skip: Vec<Symbol>,\n+        // The span where stability will be checked\n+        span: Span,\n     ) -> Option<Symbol> {\n         let names = variant\n             .fields\n             .iter()\n             .filter_map(|field| {\n                 // ignore already set fields and private fields from non-local crates\n+                // and unstable fields.\n                 if skip.iter().any(|&x| x == field.name)\n                     || (!variant.def_id.is_local() && !field.vis.is_public())\n+                    || matches!(\n+                        self.tcx.eval_stability(field.did, None, span, None),\n+                        stability::EvalResult::Deny { .. }\n+                    )\n                 {\n                     None\n                 } else {\n@@ -1783,7 +1796,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         find_best_match_for_name(&names, field, None)\n     }\n \n-    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<Symbol> {\n+    fn available_field_names(\n+        &self,\n+        variant: &'tcx ty::VariantDef,\n+        access_span: Span,\n+    ) -> Vec<Symbol> {\n         variant\n             .fields\n             .iter()\n@@ -1793,7 +1810,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .adjust_ident_and_get_scope(field.ident(self.tcx), variant.def_id, self.body_id)\n                     .1;\n                 field.vis.is_accessible_from(def_scope, self.tcx)\n+                    && !matches!(\n+                        self.tcx.eval_stability(field.did, None, access_span, None),\n+                        stability::EvalResult::Deny { .. }\n+                    )\n             })\n+            .filter(|field| !self.tcx.is_doc_hidden(field.did))\n             .map(|field| field.name)\n             .collect()\n     }\n@@ -1958,7 +1980,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.suggest_first_deref_field(&mut err, expr, base, field);\n             }\n             ty::Adt(def, _) if !def.is_enum() => {\n-                self.suggest_fields_on_recordish(&mut err, def, field);\n+                self.suggest_fields_on_recordish(&mut err, def, field, expr.span);\n             }\n             ty::Param(param_ty) => {\n                 self.point_at_param_definition(&mut err, param_ty);\n@@ -2121,9 +2143,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         def: &'tcx ty::AdtDef,\n         field: Ident,\n+        access_span: Span,\n     ) {\n         if let Some(suggested_field_name) =\n-            Self::suggest_field_name(def.non_enum_variant(), field.name, vec![])\n+            self.suggest_field_name(def.non_enum_variant(), field.name, vec![], access_span)\n         {\n             err.span_suggestion(\n                 field.span,\n@@ -2134,7 +2157,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             err.span_label(field.span, \"unknown field\");\n             let struct_variant_def = def.non_enum_variant();\n-            let field_names = self.available_field_names(struct_variant_def);\n+            let field_names = self.available_field_names(struct_variant_def, access_span);\n             if !field_names.is_empty() {\n                 err.note(&format!(\n                     \"available fields are: {}\","}, {"sha": "0efc7daa3e17b0ad28e4d4d9cc3ad89dc451a499", "filename": "src/test/ui/did_you_mean/issue-93210-ignore-doc-hidden.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7de90d5b6506f702c36ea20f46f92c3f8808668a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de90d5b6506f702c36ea20f46f92c3f8808668a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs?ref=7de90d5b6506f702c36ea20f46f92c3f8808668a", "patch": "@@ -0,0 +1,24 @@\n+#[derive(Default)]\n+pub struct A {\n+    #[doc(hidden)]\n+    pub hello: i32,\n+    pub bye: i32,\n+}\n+\n+#[derive(Default)]\n+pub struct B {\n+    pub hello: i32,\n+    pub bye: i32,\n+}\n+\n+fn main() {\n+    A::default().hey;\n+    //~^ ERROR no field `hey` on type `A`\n+    //~| NOTE unknown field\n+    //~| NOTE available fields are: `bye`\n+\n+    B::default().hey;\n+    //~^ ERROR no field `hey` on type `B`\n+    //~| NOTE unknown field\n+    //~| NOTE available fields are: `hello`, `bye`\n+}"}, {"sha": "784986d3b95fbd2ae2425babb034880071da55e2", "filename": "src/test/ui/did_you_mean/issue-93210-ignore-doc-hidden.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7de90d5b6506f702c36ea20f46f92c3f8808668a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7de90d5b6506f702c36ea20f46f92c3f8808668a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr?ref=7de90d5b6506f702c36ea20f46f92c3f8808668a", "patch": "@@ -0,0 +1,19 @@\n+error[E0609]: no field `hey` on type `A`\n+  --> $DIR/issue-93210-ignore-doc-hidden.rs:15:18\n+   |\n+LL |     A::default().hey;\n+   |                  ^^^ unknown field\n+   |\n+   = note: available fields are: `bye`\n+\n+error[E0609]: no field `hey` on type `B`\n+  --> $DIR/issue-93210-ignore-doc-hidden.rs:20:18\n+   |\n+LL |     B::default().hey;\n+   |                  ^^^ unknown field\n+   |\n+   = note: available fields are: `hello`, `bye`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}]}