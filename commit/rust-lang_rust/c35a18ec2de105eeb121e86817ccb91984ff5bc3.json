{"sha": "c35a18ec2de105eeb121e86817ccb91984ff5bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNWExOGVjMmRlMTA1ZWViMTIxZTg2ODE3Y2NiOTE5ODRmZjViYzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-14T15:21:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-14T15:21:21Z"}, "message": "remove MaybeUninit::into_inner", "tree": {"sha": "fe227e44a07fc0c58a035e9107a4e92091260369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe227e44a07fc0c58a035e9107a4e92091260369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c35a18ec2de105eeb121e86817ccb91984ff5bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c35a18ec2de105eeb121e86817ccb91984ff5bc3", "html_url": "https://github.com/rust-lang/rust/commit/c35a18ec2de105eeb121e86817ccb91984ff5bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c35a18ec2de105eeb121e86817ccb91984ff5bc3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4ab1eca643762be78724767b1f0b86950afde2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4ab1eca643762be78724767b1f0b86950afde2", "html_url": "https://github.com/rust-lang/rust/commit/1e4ab1eca643762be78724767b1f0b86950afde2"}], "stats": {"total": 8, "additions": 0, "deletions": 8}, "files": [{"sha": "ce856628318b8e435b015d592d5294f1f234bd20", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c35a18ec2de105eeb121e86817ccb91984ff5bc3/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c35a18ec2de105eeb121e86817ccb91984ff5bc3/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c35a18ec2de105eeb121e86817ccb91984ff5bc3", "patch": "@@ -1149,14 +1149,6 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n-    /// Deprecated alternative to `into_initialized`. Will never get stabilized.\n-    /// Exists only to transition stdsimd to `into_initialized`.\n-    #[inline(always)]\n-    #[allow(unused)]\n-    pub(crate) unsafe fn into_inner(self) -> T {\n-        self.into_initialized()\n-    }\n-\n     /// Gets a reference to the contained value.\n     ///\n     /// # Unsafety"}]}