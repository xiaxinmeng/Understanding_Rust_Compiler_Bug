{"sha": "5965af701090591edad308e9877d72bbe2221b48", "node_id": "C_kwDOAAsO6NoAKDU5NjVhZjcwMTA5MDU5MWVkYWQzMDhlOTg3N2Q3MmJiZTIyMjFiNDg", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-02T14:10:36Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-04T18:34:36Z"}, "message": "rustdoc: render late-bound lifetimes in generic parameter list of cross-crate functions and methods", "tree": {"sha": "4a2b2924501987659d0e99d954d1132e0966d776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2b2924501987659d0e99d954d1132e0966d776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5965af701090591edad308e9877d72bbe2221b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5965af701090591edad308e9877d72bbe2221b48", "html_url": "https://github.com/rust-lang/rust/commit/5965af701090591edad308e9877d72bbe2221b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5965af701090591edad308e9877d72bbe2221b48/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6330c27ae24ec1556cf2b97eeac333dc23391686", "url": "https://api.github.com/repos/rust-lang/rust/commits/6330c27ae24ec1556cf2b97eeac333dc23391686", "html_url": "https://github.com/rust-lang/rust/commit/6330c27ae24ec1556cf2b97eeac333dc23391686"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "bfbe143c202a6251daf327b811bc27b93f8234f8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5965af701090591edad308e9877d72bbe2221b48", "patch": "@@ -243,10 +243,22 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<clean::Function> {\n     let sig = cx.tcx.fn_sig(did);\n \n-    let predicates = cx.tcx.predicates_of(did);\n+    let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+        ty::BoundVariableKind::Region(ty::BrNamed(_, name)) if name != kw::UnderscoreLifetime => {\n+            Some(clean::GenericParamDef {\n+                name,\n+                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n+            })\n+        }\n+        _ => None,\n+    });\n+\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n-        let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        let mut generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        // FIXME: This does not place parameters in source order (late-bound ones come last)\n+        generics.params.extend(late_bound_regions);\n         let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });"}, {"sha": "a179bd3c39f9055b90db0441e16c39ffd4aa3097", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5965af701090591edad308e9877d72bbe2221b48", "patch": "@@ -1144,12 +1144,28 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n         }\n         ty::AssocKind::Fn => {\n-            let generics = clean_ty_generics(\n+            let sig = tcx.fn_sig(assoc_item.def_id);\n+\n+            let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+                ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n+                    if name != kw::UnderscoreLifetime =>\n+                {\n+                    Some(GenericParamDef {\n+                        name,\n+                        kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n+                    })\n+                }\n+                _ => None,\n+            });\n+\n+            let mut generics = clean_ty_generics(\n                 cx,\n                 tcx.generics_of(assoc_item.def_id),\n                 tcx.explicit_predicates_of(assoc_item.def_id),\n             );\n-            let sig = tcx.fn_sig(assoc_item.def_id);\n+            // FIXME: This does not place parameters in source order (late-bound ones come last)\n+            generics.params.extend(late_bound_regions);\n+\n             let mut decl = clean_fn_decl_from_did_and_sig(cx, Some(assoc_item.def_id), sig);\n \n             if assoc_item.fn_has_self_parameter {"}, {"sha": "cd9dab1b1d5705dd821afb86196f91dc1a8d4082", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965af701090591edad308e9877d72bbe2221b48/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=5965af701090591edad308e9877d72bbe2221b48", "patch": "@@ -99,9 +99,8 @@ pub(crate) fn merge_bounds(\n         let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");\n \n         trait_ref.generic_params.append(&mut bound_params);\n-        // Since the parameters (probably) originate from `tcx.collect_*_late_bound_regions` which\n-        // returns a hash set, sort them alphabetically to guarantee a stable and deterministic\n-        // output (and to fully deduplicate them).\n+        // Sort parameters (likely) originating from a hashset alphabetically to\n+        // produce predictable output (and to allow for full deduplication).\n         trait_ref.generic_params.sort_unstable_by(|p, q| p.name.as_str().cmp(q.name.as_str()));\n         trait_ref.generic_params.dedup_by_key(|p| p.name);\n "}, {"sha": "c1a98cd57daf8cc66e452bf5fee3991e0e8cacb5", "filename": "src/test/rustdoc/issue-20727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5965af701090591edad308e9877d72bbe2221b48/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5965af701090591edad308e9877d72bbe2221b48/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727.rs?ref=5965af701090591edad308e9877d72bbe2221b48", "patch": "@@ -19,6 +19,6 @@ pub mod reexport {\n     // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n     // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n     // @has - '//*[@class=\"rust trait\"]' \\\n-    //      \"fn deref(&'a self) -> &'a Self::Target;\"\n+    //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}]}