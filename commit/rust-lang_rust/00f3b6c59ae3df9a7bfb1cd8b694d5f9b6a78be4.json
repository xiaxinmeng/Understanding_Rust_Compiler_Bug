{"sha": "00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZjNiNmM1OWFlM2RmOWE3YmZiMWNkOGI2OTRkNWY5YjZhNzhiZTQ=", "commit": {"author": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-13T13:06:42Z"}, "committer": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-13T13:07:44Z"}, "message": "Correctly fill default type parameters", "tree": {"sha": "847a60e19f55dd8da4e819bd1a76b23588fb9f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847a60e19f55dd8da4e819bd1a76b23588fb9f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEOrvX5g4uaJk/ZAnkk9Q25ma/D+4FAl678SAACgkQk9Q25ma/\nD+4v0Av+IerYxW8WhGKJCGmLXpMhWOCcojtUE63PN+Tk9DSuUI/9U383sU1W9jWK\noFYch2sucuUgVWasph/H+vRpGkYrN1QfPOmiOoZrsKoPxRhK7A/MMFDqW6udr8w4\n7ARe9ybWuIgNV35tNn5EJzvonaxaJWi6aJlz4i0M/IcSYs4s+yPRAN3sBDmyVSG6\nICaW/ohwFVTseQ8Vt1eFKomlKbIJkQMcCOr+5uwv/AIoq10rzVZlif62ArLzTupv\nOQT3mpy8jR1X9/PPbevsVZwEFSqWFkRhf7+i+Wvseg0RH6mmVgQW+ZoIOvrnqmpW\ncupBShKa8+nti0Fg2zNA5v1IUj6AxIPPYWbZTpRjf1RcO5A4IISwGc2y8qtH1A6Q\neLvzYk1apN20I1MdYNjvy0sN7FUYQE77tKaypkfd6O6NQvKMZhXyBZobVmnEUToN\nqJxOQWfRdVaMxgwc5BK9FaCEc3oZzaPDW+8CotfCQfBvHajQct8IxMxaA6nDYhyN\nbjD/O0mo\n=I4nH\n-----END PGP SIGNATURE-----", "payload": "tree 847a60e19f55dd8da4e819bd1a76b23588fb9f76\nparent 88d3959c33c3b8729cecbe062cff8474516df29f\nauthor Fedor Sakharov <fedor.sakharov@gmail.com> 1589375202 +0300\ncommitter Fedor Sakharov <fedor.sakharov@gmail.com> 1589375264 +0300\n\nCorrectly fill default type parameters\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "html_url": "https://github.com/rust-lang/rust/commit/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/comments", "author": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d3959c33c3b8729cecbe062cff8474516df29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d3959c33c3b8729cecbe062cff8474516df29f", "html_url": "https://github.com/rust-lang/rust/commit/88d3959c33c3b8729cecbe062cff8474516df29f"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "b28c6d98b832dfa2beff7183028043b01e4b1388", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -936,6 +936,7 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n+ \"ra_hir_def\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\","}, {"sha": "488ab7bc87f07616f886dc3787422520a6cccda1", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -21,4 +21,5 @@ ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "d81218bc80ef48246d3336b925ad150d16869ed0", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -2,6 +2,7 @@\n use rustc_hash::FxHashMap;\n \n use hir::{PathResolution, SemanticsScope};\n+use hir_def::type_ref::TypeRef;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::SyntaxRewriter,\n@@ -51,7 +52,24 @@ impl<'a> SubstituteTypeParams<'a> {\n             .into_iter()\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n-            .zip(substs.into_iter())\n+            // The actual list of trait type parameters may be longer than the one\n+            // used in the `impl` block due to trailing default type parametrs.\n+            // For that case we extend the `substs` with an empty iterator so we\n+            // can still hit those trailing values and check if they actually have\n+            // a default type. If they do, go for that type from `hir` to `ast` so\n+            // the resulting change can be applied correctly.\n+            .zip(substs.into_iter().map(Some).chain(std::iter::repeat(None)))\n+            .filter_map(|(k, v)| match v {\n+                Some(v) => Some((k, v)),\n+                None => match k.default(source_scope.db)? {\n+                    TypeRef::Path(path) => Some((\n+                        k,\n+                        ast::make::type_arg(&format!(\"{}\", path.mod_path().as_ident()?))\n+                            .type_ref()?,\n+                    )),\n+                    _ => None,\n+                },\n+            })\n             .collect();\n         return SubstituteTypeParams {\n             source_scope,"}, {"sha": "22e1156d2a165da00dfe7de854b4ccc6a5df879b", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -615,6 +615,56 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>fn valid(some: u32) -> bool { false }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generic_single_default_parameter() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo<T = Self> {\n+    fn bar(&self, other: &T);\n+}\n+\n+struct S;\n+impl Foo for S { <|> }\"#,\n+            r#\"\n+trait Foo<T = Self> {\n+    fn bar(&self, other: &T);\n+}\n+\n+struct S;\n+impl Foo for S {\n+    <|>fn bar(&self, other: &Self) {\n+        todo!()\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generic_default_parameter_is_second() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Foo<T1, T2 = Self> {\n+    fn bar(&self, this: &T1, that: &T2);\n+}\n+\n+struct S<T>;\n+impl Foo<T> for S<T> { <|> }\"#,\n+            r#\"\n+trait Foo<T1, T2 = Self> {\n+    fn bar(&self, this: &T1, that: &T2);\n+}\n+\n+struct S<T>;\n+impl Foo<T> for S<T> {\n+    <|>fn bar(&self, this: &T, that: &Self) {\n+        todo!()\n+    }\n }\"#,\n         )\n     }"}, {"sha": "3c56f39c13882c4f822f2cb465d810c7efd28a60", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -989,6 +989,11 @@ impl TypeParam {\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n+\n+    pub fn default(self, db: &dyn HirDatabase) -> Option<TypeRef> {\n+        let params = db.generic_params(self.id.parent);\n+        params.types[self.id.local_id].default.clone()\n+    }\n }\n \n // FIXME: rename from `ImplDef` to `Impl`"}, {"sha": "8981cbe339834d3272c83557d7b676cd8bb241fe", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=00f3b6c59ae3df9a7bfb1cd8b694d5f9b6a78be4", "patch": "@@ -13,6 +13,10 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n \n+pub fn type_arg(text: &str) -> ast::TypeArg {\n+    ast_from_text(&format!(\"impl F<{}> for G {{}}\", text))\n+}\n+\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"use {};\", name_ref))\n }"}]}