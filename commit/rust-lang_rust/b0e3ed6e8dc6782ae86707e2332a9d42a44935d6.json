{"sha": "b0e3ed6e8dc6782ae86707e2332a9d42a44935d6", "node_id": "C_kwDOAAsO6NoAKGIwZTNlZDZlOGRjNjc4MmFlODY3MDdlMjMzMmE5ZDQyYTQ0OTM1ZDY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-08-11T09:09:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-08-12T08:53:08Z"}, "message": "[debuginfo] Use IndexMap instead of FxHashMap while generating cpp-like generator debuginfo.", "tree": {"sha": "b968e209c829f325382ff58ad2c577edb465b10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b968e209c829f325382ff58ad2c577edb465b10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6", "html_url": "https://github.com/rust-lang/rust/commit/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d75914788aaae88930701f3c419257adbf8288", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d75914788aaae88930701f3c419257adbf8288", "html_url": "https://github.com/rust-lang/rust/commit/95d75914788aaae88930701f3c419257adbf8288"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "daec9303b2c67edbf6f009ec9492bc81a8c02f68", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e3ed6e8dc6782ae86707e2332a9d42a44935d6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=b0e3ed6e8dc6782ae86707e2332a9d42a44935d6", "patch": "@@ -5,7 +5,8 @@ use rustc_codegen_ssa::{\n     debuginfo::{type_names::compute_debuginfo_type_name, wants_c_like_enum_debuginfo},\n     traits::ConstMethods,\n };\n-use rustc_data_structures::fx::FxHashMap;\n+\n+use rustc_index::vec::IndexVec;\n use rustc_middle::{\n     bug,\n     ty::{\n@@ -680,6 +681,7 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n \n     let common_upvar_names = closure_saved_names_of_captured_variables(cx.tcx, generator_def_id);\n     let variant_range = generator_substs.variant_range(generator_def_id, cx.tcx);\n+    let variant_count = (variant_range.start.as_u32()..variant_range.end.as_u32()).len();\n \n     let tag_base_type = tag_base_type(cx, generator_type_and_layout);\n \n@@ -691,10 +693,17 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n             .map(|variant_index| (variant_index, GeneratorSubsts::variant_name(variant_index))),\n     );\n \n-    let discriminants: FxHashMap<VariantIdx, DiscrResult> = generator_substs\n-        .discriminants(generator_def_id, cx.tcx)\n-        .map(|(variant_index, discr)| (variant_index, DiscrResult::Value(discr.val)))\n-        .collect();\n+    let discriminants: IndexVec<VariantIdx, DiscrResult> = {\n+        let discriminants_iter = generator_substs.discriminants(generator_def_id, cx.tcx);\n+        let mut discriminants: IndexVec<VariantIdx, DiscrResult> =\n+            IndexVec::with_capacity(variant_count);\n+        for (variant_index, discr) in discriminants_iter {\n+            // Assert that the index in the IndexMap matches up with the given VariantIdx.\n+            assert_eq!(variant_index, discriminants.next_index());\n+            discriminants.push(DiscrResult::Value(discr.val));\n+        }\n+        discriminants\n+    };\n \n     // Build the type node for each field.\n     let variant_field_infos: SmallVec<VariantFieldInfo<'ll>> = variant_range\n@@ -721,7 +730,7 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n                 variant_index,\n                 variant_struct_type_di_node,\n                 source_info,\n-                discr: discriminants[&variant_index],\n+                discr: discriminants[variant_index],\n             }\n         })\n         .collect();"}]}