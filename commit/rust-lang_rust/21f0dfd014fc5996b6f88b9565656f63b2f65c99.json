{"sha": "21f0dfd014fc5996b6f88b9565656f63b2f65c99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjBkZmQwMTRmYzU5OTZiNmY4OGI5NTY1NjU2ZjYzYjJmNjVjOTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-11T19:49:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Monomorphize locals", "tree": {"sha": "dab891b505eeb77a4775bff3c599d251e727cdba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab891b505eeb77a4775bff3c599d251e727cdba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f0dfd014fc5996b6f88b9565656f63b2f65c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f0dfd014fc5996b6f88b9565656f63b2f65c99", "html_url": "https://github.com/rust-lang/rust/commit/21f0dfd014fc5996b6f88b9565656f63b2f65c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f0dfd014fc5996b6f88b9565656f63b2f65c99/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a962835685d0cc02b9749bd8f1f89236796f55a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a962835685d0cc02b9749bd8f1f89236796f55a9", "html_url": "https://github.com/rust-lang/rust/commit/a962835685d0cc02b9749bd8f1f89236796f55a9"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "ed587bf739d5b67fc88b2b0bbd45f297a7a052a8", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f0dfd014fc5996b6f88b9565656f63b2f65c99/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f0dfd014fc5996b6f88b9565656f63b2f65c99/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=21f0dfd014fc5996b6f88b9565656f63b2f65c99", "patch": "@@ -17,7 +17,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut debug_context = cx\n         .debug_context\n         .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(debug_context, mir, func_id, &name, &sig));\n+        .map(|debug_context| FunctionDebugContext::new(debug_context, instance, func_id, &name, &sig));\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n@@ -92,7 +92,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let isa = cx.module.isa();\n     debug_context\n         .as_mut()\n-        .map(|x| x.define(tcx, context, isa, &source_info_set));\n+        .map(|x| x.define(context, isa, &source_info_set));\n \n     // Clear context to make it usable for the next function\n     context.clear();"}, {"sha": "8de7ab673849d1b59472322733c153447dcae967", "filename": "src/debuginfo.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21f0dfd014fc5996b6f88b9565656f63b2f65c99/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f0dfd014fc5996b6f88b9565656f63b2f65c99/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=21f0dfd014fc5996b6f88b9565656f63b2f65c99", "patch": "@@ -260,18 +260,20 @@ pub struct FunctionDebugContext<'a, 'tcx> {\n     debug_context: &'a mut DebugContext<'tcx>,\n     entry_id: UnitEntryId,\n     symbol: usize,\n-    mir_span: Span,\n-    local_decls: rustc_index::vec::IndexVec<mir::Local, mir::LocalDecl<'tcx>>,\n+    instance: Instance<'tcx>,\n+    mir: &'tcx mir::Body<'tcx>,\n }\n \n impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub fn new(\n         debug_context: &'a mut DebugContext<'tcx>,\n-        mir: &'tcx Body,\n+        instance: Instance<'tcx>,\n         func_id: FuncId,\n         name: &str,\n         _sig: &Signature,\n     ) -> Self {\n+        let mir = debug_context.tcx.instance_mir(instance.def);\n+\n         let (symbol, _) = debug_context.symbols.insert_full(func_id, name.to_string());\n \n         // FIXME: add to appropriate scope intead of root\n@@ -299,18 +301,19 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             debug_context,\n             entry_id,\n             symbol,\n-            mir_span: mir.span,\n-            local_decls: mir.local_decls.clone(),\n+            instance,\n+            mir,\n         }\n     }\n \n     pub fn define(\n         &mut self,\n-        tcx: TyCtxt,\n         context: &Context,\n         isa: &dyn cranelift::codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n     ) {\n+        let tcx = self.debug_context.tcx;\n+\n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n         line_program.begin_sequence(Some(Address::Symbol {\n@@ -351,7 +354,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n                     create_row_for_span(line_program, source_info.0);\n                 } else {\n-                    create_row_for_span(line_program, self.mir_span);\n+                    create_row_for_span(line_program, self.mir.span);\n                 }\n                 end = offset + size;\n             }\n@@ -386,7 +389,12 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 );\n                 let live_ranges_id = self.debug_context.dwarf.unit.ranges.add(live_ranges);\n \n-                let local_type = self.debug_context.dwarf_ty(self.local_decls[mir::Local::from_u32(value_label.as_u32())].ty);\n+                let local_ty = tcx.subst_and_normalize_erasing_regions(\n+                    self.instance.substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &self.mir.local_decls[mir::Local::from_u32(value_label.as_u32())].ty,\n+                );\n+                let local_type = self.debug_context.dwarf_ty(local_ty);\n \n                 let var_id = self\n                     .debug_context"}]}