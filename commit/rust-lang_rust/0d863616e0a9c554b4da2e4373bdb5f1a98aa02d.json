{"sha": "0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODYzNjE2ZTBhOWM1NTRiNGRhMmU0MzczYmRiNWYxYTk4YWEwMmQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-06-25T10:42:52Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Add EmptyToAny adjustment", "tree": {"sha": "8ed23eb359b00b532e8157c3737ccd82ca40eb0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed23eb359b00b532e8157c3737ccd82ca40eb0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "html_url": "https://github.com/rust-lang/rust/commit/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a9acd783aec3449f5d8d772bc1bd4e59276cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a9acd783aec3449f5d8d772bc1bd4e59276cc8", "html_url": "https://github.com/rust-lang/rust/commit/b0a9acd783aec3449f5d8d772bc1bd4e59276cc8"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "4980b3abc63fe5aa3020d169f7971128929b614a", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -717,6 +717,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let adj = infcx.adjustments().get(&expr.id).map(|x| x.clone());\n         if let Some(adjustment) = adj {\n             match adjustment {\n+                adjustment::AdjustEmptyToAny(..) |\n                 adjustment::AdjustReifyFnPointer |\n                 adjustment::AdjustUnsafeFnPointer |\n                 adjustment::AdjustMutToConstPointer => {"}, {"sha": "9589687cf26932e01617cbf24d57c013494ed26b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -451,6 +451,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         self.cat_expr_autoderefd(expr, autoderefs)\n                     }\n \n+                    adjustment::AdjustEmptyToAny(..) |\n                     adjustment::AdjustReifyFnPointer |\n                     adjustment::AdjustUnsafeFnPointer |\n                     adjustment::AdjustMutToConstPointer |"}, {"sha": "95b3a8bd42efd3f104664d12ac7e34a259f1c7d5", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -11,7 +11,7 @@\n pub use self::AutoAdjustment::*;\n pub use self::AutoRef::*;\n \n-use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeVariants};\n use ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;\n@@ -21,9 +21,10 @@ use hir;\n \n #[derive(Copy, Clone)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustReifyFnPointer,    // go from a fn-item type to a fn-pointer type\n-    AdjustUnsafeFnPointer,   // go from a safe fn pointer to an unsafe fn pointer\n-    AdjustMutToConstPointer, // go from a mut raw pointer to a const raw pointer\n+    AdjustEmptyToAny(Ty<'tcx>), // go from ! to any type\n+    AdjustReifyFnPointer,       // go from a fn-item type to a fn-pointer type\n+    AdjustUnsafeFnPointer,      // go from a safe fn pointer to an unsafe fn pointer\n+    AdjustMutToConstPointer,    // go from a mut raw pointer to a const raw pointer\n     AdjustDerefRef(AutoDerefRef<'tcx>),\n }\n \n@@ -106,6 +107,10 @@ pub struct AutoDerefRef<'tcx> {\n impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n+            AdjustEmptyToAny(ref ty) => match ty.sty {\n+                TypeVariants::TyEmpty => true,\n+                _ => false,\n+            },\n             AdjustReifyFnPointer |\n             AdjustUnsafeFnPointer |\n             AdjustMutToConstPointer => false,\n@@ -154,6 +159,8 @@ impl<'a, 'gcx, 'tcx> ty::TyS<'tcx> {\n         return match adjustment {\n             Some(adjustment) => {\n                 match *adjustment {\n+                    AdjustEmptyToAny(ref ty) => ty,\n+\n                     AdjustReifyFnPointer => {\n                         match self.sty {\n                             ty::TyFnDef(_, _, f) => tcx.mk_fn_ptr(f),"}, {"sha": "b7851f9879d41e2cb87f93f34970ecc811811a6f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -429,6 +429,9 @@ impl<'tcx, 'container> fmt::Debug for ty::AdtDefData<'tcx, 'container> {\n impl<'tcx> fmt::Debug for ty::adjustment::AutoAdjustment<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n+            ty::adjustment::AdjustEmptyToAny(ref target) => {\n+                write!(f, \"AdjustEmptyToAny({:?})\", target)\n+            }\n             ty::adjustment::AdjustReifyFnPointer => {\n                 write!(f, \"AdjustReifyFnPointer\")\n             }"}, {"sha": "99d5758076fdfdf67d24e23e72aa4f9e7e9dc2d3", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -644,6 +644,12 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                             |this| Ok(this.emit_auto_deref_ref(ecx, auto_deref_ref)))\n                     })\n                 }\n+\n+                adjustment::AdjustEmptyToAny(ref ty) => {\n+                    this.emit_enum_variant(\"AdjustEmptyToAny\", 5, 1, |this| {\n+                        this.emit_enum_variant_arg(0, |this| Ok(this.emit_ty(ecx, ty)))\n+                    })\n+                }\n             }\n         });\n     }\n@@ -1017,7 +1023,8 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                     -> adjustment::AutoAdjustment<'tcx> {\n         self.read_enum(\"AutoAdjustment\", |this| {\n             let variants = [\"AdjustReifyFnPointer\", \"AdjustUnsafeFnPointer\",\n-                            \"AdjustMutToConstPointer\", \"AdjustDerefRef\"];\n+                            \"AdjustMutToConstPointer\", \"AdjustDerefRef\",\n+                            \"AdjustEmptyToAny\"];\n             this.read_enum_variant(&variants, |this, i| {\n                 Ok(match i {\n                     1 => adjustment::AdjustReifyFnPointer,\n@@ -1030,6 +1037,13 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n                         adjustment::AdjustDerefRef(auto_deref_ref)\n                     }\n+                    5 => {\n+                        let ty: Ty<'tcx> = this.read_enum_variant_arg(0, |this| {\n+                            Ok(this.read_ty(dcx))\n+                        }).unwrap();\n+\n+                        adjustment::AdjustEmptyToAny(ty)\n+                    }\n                     _ => bug!(\"bad enum variant for adjustment::AutoAdjustment\")\n                 })\n             })"}, {"sha": "420147d037c5e189591e572cf63c31f7c4437825", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -96,6 +96,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::LogicalOp { .. } |\n             ExprKind::Box { .. } |\n             ExprKind::Cast { .. } |\n+            ExprKind::EmptyToAny { .. } |\n             ExprKind::ReifyFnPointer { .. } |\n             ExprKind::UnsafeFnPointer { .. } |\n             ExprKind::Unsize { .. } |"}, {"sha": "5cf00a195dc20ef0753f7bedc94f868b1ac9c84a", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -219,6 +219,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Block { .. } |\n             ExprKind::Match { .. } |\n             ExprKind::If { .. } |\n+            ExprKind::EmptyToAny { .. } |\n             ExprKind::Loop { .. } |\n             ExprKind::LogicalOp { .. } |\n             ExprKind::Call { .. } |"}, {"sha": "fb5be8e7d1cb063abbc3e96fb84af09293d8e44c", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -56,6 +56,7 @@ impl Category {\n             ExprKind::LogicalOp { .. } |\n             ExprKind::If { .. } |\n             ExprKind::Match { .. } |\n+            ExprKind::EmptyToAny { .. } |\n             ExprKind::Call { .. } =>\n                 Some(Category::Rvalue(RvalueFunc::Into)),\n "}, {"sha": "2610dc71ef4a002f896aada67b38d57bec6f78ce", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -45,6 +45,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Match { discriminant, arms } => {\n                 this.match_expr(destination, expr_span, block, discriminant, arms)\n             }\n+            ExprKind::EmptyToAny { source } => {\n+                // TODO(canndrew): Do we need to do this?\n+                unpack!(block = this.as_rvalue(block, source));\n+\n+                this.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n+                let end_block = this.cfg.start_new_block();\n+                end_block.unit()\n+            }\n             ExprKind::If { condition: cond_expr, then: then_expr, otherwise: else_expr } => {\n                 let operand = unpack!(block = this.as_operand(block, cond_expr));\n "}, {"sha": "28a23e2a499eaeca6498823e6fde7fb9044f36be", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -60,6 +60,15 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     kind: ExprKind::UnsafeFnPointer { source: expr.to_ref() },\n                 };\n             }\n+            Some(&ty::adjustment::AdjustEmptyToAny(..)) => {\n+                let adjusted_ty = cx.tcx.expr_ty_adjusted(self);\n+                expr = Expr {\n+                    temp_lifetime: temp_lifetime,\n+                    ty: adjusted_ty,\n+                    span: self.span,\n+                    kind: ExprKind::EmptyToAny { source: expr.to_ref() },\n+                };\n+            }\n             Some(&ty::adjustment::AdjustMutToConstPointer) => {\n                 let adjusted_ty = cx.tcx.expr_ty_adjusted(self);\n                 expr = Expr {"}, {"sha": "14c3f0e580d0f11565ff4a481b9b1a2dce89ab4e", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -139,6 +139,9 @@ pub enum ExprKind<'tcx> {\n     Cast {\n         source: ExprRef<'tcx>,\n     },\n+    EmptyToAny {\n+        source: ExprRef<'tcx>,\n+    },\n     ReifyFnPointer {\n         source: ExprRef<'tcx>,\n     },"}, {"sha": "9cd955b1cafdc676e33012b7324d54acf47474ff", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -632,6 +632,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) {\n     match v.tcx.tables.borrow().adjustments.get(&e.id) {\n         None |\n+        Some(&ty::adjustment::AdjustEmptyToAny(..)) |\n         Some(&ty::adjustment::AdjustReifyFnPointer) |\n         Some(&ty::adjustment::AdjustUnsafeFnPointer) |\n         Some(&ty::adjustment::AdjustMutToConstPointer) => {}"}, {"sha": "95af6db0260d2171cc12abf55c35bff61ada9f68", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -34,7 +34,7 @@ use type_of;\n use value::Value;\n use Disr;\n use rustc::ty::subst::Substs;\n-use rustc::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n+use rustc::ty::adjustment::{AdjustEmptyToAny, AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::cast::{CastTy,IntTy};\n@@ -348,6 +348,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                             &cx.tcx().expr_ty_adjusted(e));\n     let opt_adj = cx.tcx().tables.borrow().adjustments.get(&e.id).cloned();\n     match opt_adj {\n+        Some(AdjustEmptyToAny(..)) => span_bug!(e.span, \"const expression of type ! encountered\"),\n         Some(AdjustReifyFnPointer) => {\n             match ety.sty {\n                 ty::TyFnDef(def_id, substs, _) => {"}, {"sha": "eed543aa31c40d7357506e45a81780d4abd433ac", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -69,7 +69,7 @@ use tvec;\n use type_of;\n use value::Value;\n use Disr;\n-use rustc::ty::adjustment::{AdjustDerefRef, AdjustReifyFnPointer};\n+use rustc::ty::adjustment::{AdjustEmptyToAny, AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -348,6 +348,7 @@ fn adjustment_required<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     match adjustment {\n+        AdjustEmptyToAny(..) => true,\n         AdjustReifyFnPointer => true,\n         AdjustUnsafeFnPointer | AdjustMutToConstPointer => {\n             // purely a type-level thing\n@@ -380,6 +381,12 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debug!(\"unadjusted datum for expr {:?}: {:?} adjustment={:?}\",\n            expr, datum, adjustment);\n     match adjustment {\n+        AdjustEmptyToAny(..) => {\n+            let const_ty = expr_ty(bcx, expr);\n+            let llty = type_of::type_of(bcx.ccx(), const_ty);\n+            let dummy = C_undef(llty.ptr_to());\n+            datum = Datum::new(dummy, const_ty, Rvalue::new(ByRef)).to_expr_datum();\n+        }\n         AdjustReifyFnPointer => {\n             match datum.ty.sty {\n                 ty::TyFnDef(def_id, substs, _) => {"}, {"sha": "5fe9b8742d7ea46acb1f979d203aee0d18bf39c2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d863616e0a9c554b4da2e4373bdb5f1a98aa02d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0d863616e0a9c554b4da2e4373bdb5f1a98aa02d", "patch": "@@ -378,6 +378,10 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n             Some(adjustment) => {\n                 let resolved_adjustment = match adjustment {\n+                    adjustment::AdjustEmptyToAny(ty) => {\n+                        adjustment::AdjustEmptyToAny(self.resolve(&ty, reason))\n+                    }\n+\n                     adjustment::AdjustReifyFnPointer => {\n                         adjustment::AdjustReifyFnPointer\n                     }"}]}