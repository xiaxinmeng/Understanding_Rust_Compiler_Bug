{"sha": "87af2324bb43ca5fa2689da0560d116399b3456a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YWYyMzI0YmI0M2NhNWZhMjY4OWRhMDU2MGQxMTYzOTliMzQ1NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-23T09:10:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-23T09:10:28Z"}, "message": "Auto merge of #37325 - newpavlov:master, r=frewsxcv\n\nlibcore documentation for builtin macros\n\nFixes: #36272\n\nAdditionally I've edited docstring for `include!` a bit. (related PR #36404)\n\nUnfortunately it seems there is no sane way to reexport empty macros definitions for their docstrings. To avoid copying the whole documentation for builtin macros I've only copied description and added links to `std` macro pages.", "tree": {"sha": "47c5712039c65a52320813bc973c41e7747d5b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c5712039c65a52320813bc973c41e7747d5b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87af2324bb43ca5fa2689da0560d116399b3456a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87af2324bb43ca5fa2689da0560d116399b3456a", "html_url": "https://github.com/rust-lang/rust/commit/87af2324bb43ca5fa2689da0560d116399b3456a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87af2324bb43ca5fa2689da0560d116399b3456a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f79ba8c99ca7d9935182eadb89443df86f72bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f79ba8c99ca7d9935182eadb89443df86f72bf", "html_url": "https://github.com/rust-lang/rust/commit/40f79ba8c99ca7d9935182eadb89443df86f72bf"}, {"sha": "34576da9355b5de993e3d08a317f00240f53c5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/34576da9355b5de993e3d08a317f00240f53c5b1", "html_url": "https://github.com/rust-lang/rust/commit/34576da9355b5de993e3d08a317f00240f53c5b1"}], "stats": {"total": 159, "additions": 152, "deletions": 7}, "files": [{"sha": "5142b18dca113a11aa54e1ea756e9fff15baeab8", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/87af2324bb43ca5fa2689da0560d116399b3456a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87af2324bb43ca5fa2689da0560d116399b3456a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=87af2324bb43ca5fa2689da0560d116399b3456a", "patch": "@@ -509,3 +509,143 @@ macro_rules! unreachable {\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"))\n }\n+\n+/// Built-in macros to the compiler itself.\n+///\n+/// These macros do not have any corresponding definition with a `macro_rules!`\n+/// macro, but are documented here. Their implementations can be found hardcoded\n+/// into libsyntax itself.\n+///\n+/// For more information, see documentation for `std`'s macros.\n+#[cfg(dox)]\n+pub mod builtin {\n+    /// The core macro for formatted string creation & output.\n+    ///\n+    /// For more information, see the documentation for [`std::format_args!`].\n+    ///\n+    /// [`std::format_args!`]: ../std/macro.format_args.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n+        /* compiler built-in */\n+    }) }\n+\n+    /// Inspect an environment variable at compile time.\n+    ///\n+    /// For more information, see the documentation for [`std::env!`].\n+    ///\n+    /// [`std::env!`]: ../std/macro.env.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Optionally inspect an environment variable at compile time.\n+    ///\n+    /// For more information, see the documentation for [`std::option_env!`].\n+    ///\n+    /// [`std::option_env!`]: ../std/macro.option_env.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Concatenate identifiers into one identifier.\n+    ///\n+    /// For more information, see the documentation for [`std::concat_idents!`].\n+    ///\n+    /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n+    #[unstable(feature = \"concat_idents\", issue = \"29599\")]\n+    #[macro_export]\n+    macro_rules! concat_idents {\n+        ($($e:ident),*) => ({ /* compiler built-in */ })\n+    }\n+\n+    /// Concatenates literals into a static string slice.\n+    ///\n+    /// For more information, see the documentation for [`std::concat!`].\n+    ///\n+    /// [`std::concat!`]: ../std/macro.concat.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the line number on which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::line!`].\n+    ///\n+    /// [`std::line!`]: ../std/macro.line.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! line { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the column number on which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::column!`].\n+    ///\n+    /// [`std::column!`]: ../std/macro.column.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! column { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the file name from which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::file!`].\n+    ///\n+    /// [`std::file!`]: ../std/macro.file.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! file { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which stringifies its argument.\n+    ///\n+    /// For more information, see the documentation for [`std::stringify!`].\n+    ///\n+    /// [`std::stringify!`]: ../std/macro.stringify.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! stringify { ($t:tt) => ({ /* compiler built-in */ }) }\n+\n+    /// Includes a utf8-encoded file as a string.\n+    ///\n+    /// For more information, see the documentation for [`std::include_str!`].\n+    ///\n+    /// [`std::include_str!`]: ../std/macro.include_str.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Includes a file as a reference to a byte array.\n+    ///\n+    /// For more information, see the documentation for [`std::include_bytes!`].\n+    ///\n+    /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Expands to a string that represents the current module path.\n+    ///\n+    /// For more information, see the documentation for [`std::module_path!`].\n+    ///\n+    /// [`std::module_path!`]: ../std/macro.module_path.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n+\n+    /// Boolean evaluation of configuration flags.\n+    ///\n+    /// For more information, see the documentation for [`std::cfg!`].\n+    ///\n+    /// [`std::cfg!`]: ../std/macro.cfg.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n+\n+    /// Parse a file as an expression or an item according to the context.\n+    ///\n+    /// For more information, see the documentation for [`std::include!`].\n+    ///\n+    /// [`std::include!`]: ../std/macro.include.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }\n+}"}, {"sha": "d801fa028cc0dd212302af38e8c2901feb8a77a7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87af2324bb43ca5fa2689da0560d116399b3456a/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87af2324bb43ca5fa2689da0560d116399b3456a/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=87af2324bb43ca5fa2689da0560d116399b3456a", "patch": "@@ -381,9 +381,11 @@ pub mod builtin {\n \n     /// Includes a utf8-encoded file as a string.\n     ///\n+    /// The file is located relative to the current file. (similarly to how\n+    /// modules are found)\n+    ///\n     /// This macro will yield an expression of type `&'static str` which is the\n-    /// contents of the filename specified. The file is located relative to the\n-    /// current file (similarly to how modules are found),\n+    /// contents of the file.\n     ///\n     /// # Examples\n     ///\n@@ -396,9 +398,11 @@ pub mod builtin {\n \n     /// Includes a file as a reference to a byte array.\n     ///\n+    /// The file is located relative to the current file. (similarly to how\n+    /// modules are found)\n+    ///\n     /// This macro will yield an expression of type `&'static [u8; N]` which is\n-    /// the contents of the filename specified. The file is located relative to\n-    /// the current file (similarly to how modules are found),\n+    /// the contents of the file.\n     ///\n     /// # Examples\n     ///\n@@ -452,9 +456,10 @@ pub mod builtin {\n     #[macro_export]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n-    /// Parse the file provided in the argument as an expression or an\n-    /// item according to the context. This file is located relative\n-    /// to the current file (similarly to how modules are found).\n+    /// Parse a file as an expression or an item according to the context.\n+    ///\n+    /// The file is located relative to the current file. (similarly to how\n+    /// modules are found)\n     ///\n     /// Using this macro is often a bad idea, because if the file is\n     /// parsed as an expression, it is going to be placed in the"}]}