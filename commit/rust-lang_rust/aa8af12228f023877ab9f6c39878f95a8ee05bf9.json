{"sha": "aa8af12228f023877ab9f6c39878f95a8ee05bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOGFmMTIyMjhmMDIzODc3YWI5ZjZjMzk4NzhmOTVhOGVlMDViZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-17T03:56:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-17T03:56:33Z"}, "message": "auto merge of #4995 : sethpink/rust/obsolete-capture-clause, r=graydon\n\nRemove capture clause use. I think I got them all.", "tree": {"sha": "b3a6e8629f16bf2cfb8503886baf6f20fe5cc9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a6e8629f16bf2cfb8503886baf6f20fe5cc9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa8af12228f023877ab9f6c39878f95a8ee05bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8af12228f023877ab9f6c39878f95a8ee05bf9", "html_url": "https://github.com/rust-lang/rust/commit/aa8af12228f023877ab9f6c39878f95a8ee05bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa8af12228f023877ab9f6c39878f95a8ee05bf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945ac428b8d254368521ab3a3f7fb63482dc3aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/945ac428b8d254368521ab3a3f7fb63482dc3aa0", "html_url": "https://github.com/rust-lang/rust/commit/945ac428b8d254368521ab3a3f7fb63482dc3aa0"}, {"sha": "60bd4a5385ae39085d82a89ac6bc7bb9cd9b200b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bd4a5385ae39085d82a89ac6bc7bb9cd9b200b", "html_url": "https://github.com/rust-lang/rust/commit/60bd4a5385ae39085d82a89ac6bc7bb9cd9b200b"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e992c2a3af74714259f0b2431086dfedd8679d10", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -821,7 +821,7 @@ fn encode_side_tables_for_ii(ecx: @e::encode_ctxt,\n         let ebml_w = copy ebml_w;\n         ast_util::visit_ids_for_inlined_item(\n             ii,\n-            fn@(id: ast::node_id, copy ebml_w) {\n+            fn@(id: ast::node_id) {\n                 // Note: this will cause a copy of ebml_w, which is bad as\n                 // it has mut fields.  But I believe it's harmless since\n                 // we generate balanced EBML."}, {"sha": "b9dbe523fdd331ec06842bfb057ae91214f23ccb", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -76,7 +76,7 @@ fn apply_to_sections(\n     op: NominalOp<Op>,\n     sections: ~[doc::Section]\n ) -> ~[doc::Section] {\n-    sections.map(|section, copy op| doc::Section {\n+    sections.map(|section| doc::Section {\n         header: (op.op)(copy section.header),\n         body: (op.op)(copy section.body)\n     })\n@@ -89,7 +89,7 @@ fn fold_enum(\n     let fold_copy = copy *fold;\n \n     doc::EnumDoc {\n-        variants: do doc.variants.map |variant, copy fold_copy| {\n+        variants: do doc.variants.map |variant| {\n             doc::VariantDoc {\n                 desc: maybe_apply_op(copy fold_copy.ctxt, &variant.desc),\n                 .. copy *variant"}, {"sha": "b39cee875251aae0b188553b07ba2184b4450066", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -137,7 +137,7 @@ fn fold_enum(\n         variants: do vec::map(doc.variants) |variant| {\n             let sig = {\n                 let variant = copy *variant;\n-                do astsrv::exec(srv.clone()) |copy variant, ctxt| {\n+                do astsrv::exec(srv.clone()) |ctxt| {\n                     match ctxt.ast_map.get(&doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n@@ -198,7 +198,7 @@ fn get_method_sig(\n     item_id: doc::AstId,\n     method_name: ~str\n ) -> Option<~str> {\n-    do astsrv::exec(srv) |copy method_name, ctxt| {\n+    do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(&item_id) {\n           ast_map::node_item(@ast::item {\n             node: ast::item_trait(_, _, ref methods), _"}, {"sha": "cd479aadb256183be5d0b9f053c5640891107098", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -368,7 +368,7 @@ fn run_line(repl: &mut Repl, in: io::Reader, out: io::Writer, line: ~str)\n     }\n \n     let r = *repl;\n-    let result = do task::try |copy r| {\n+    let result = do task::try {\n         run(r, line)\n     };\n "}, {"sha": "ff81393a914db527d90d1c8c191f92cd059e27c3", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -202,7 +202,7 @@ pub mod test {\n     #[test]\n     pub fn test_sendable_future() {\n         let expected = ~\"schlorf\";\n-        let f = do spawn |copy expected| { copy expected };\n+        let f = do spawn { copy expected };\n         do task::spawn || {\n             let actual = f.get();\n             assert actual == expected;"}, {"sha": "c48f56dd143bbe76486c7a1de5416708c8243670", "filename": "src/libstd/par.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -107,7 +107,7 @@ pub fn mapi<A: Copy Owned, B: Copy Owned>(\n {\n     let slices = map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A], copy f) -> ~[B] {\n+        fn~(base: uint, slice : &[A]) -> ~[B] {\n             vec::mapi(slice, |i, x| {\n                 f(i + base, x)\n             })\n@@ -126,7 +126,7 @@ pub fn alli<A: Copy Owned>(\n {\n     do vec::all(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A], copy f) -> bool {\n+        fn~(base: uint, slice : &[A]) -> bool {\n             vec::alli(slice, |i, x| {\n                 f(i + base, x)\n             })\n@@ -140,7 +140,7 @@ pub fn any<A: Copy Owned>(\n     fn_factory: &fn() -> ~fn(&A) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(_base : uint, slice: &[A], copy f) -> bool {\n+        fn~(_base : uint, slice: &[A]) -> bool {\n             vec::any(slice, |x| f(x))\n         }\n     })) |x| { *x }"}, {"sha": "70a2b8f680a5c5f5025e7d3c1460d0dbeaff8d8e", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -12,7 +12,7 @@ use core::pipes::*;\n \n pub fn foo<T: Owned Copy>(x: T) -> Port<T> {\n     let (p, c) = stream();\n-    do task::spawn() |copy x| {\n+    do task::spawn() {\n         c.send(x);\n     }\n     p"}, {"sha": "397b0f682d62cd796b3bdb3a04e7b1f1f666a514", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -13,6 +13,6 @@ fn foo(_x: @uint) {}\n fn main() {\n     let x = @3u;\n     let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~(copy x) { foo(x); }; //~ ERROR value has non-owned type `@uint`\n+    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n     let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n }"}, {"sha": "b77e91c8d212c65ea828faf17ff63b3b366fefcf", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -28,7 +28,7 @@ use core::pipes::*;\n \n fn foo(&&x: ()) -> Port<()> {\n     let (p, c) = stream::<()>();\n-    do task::spawn() |copy x| {\n+    do task::spawn() {\n         c.send(x);\n     }\n     p"}, {"sha": "6eb540c4737267fc0203bdebf24f9b3c363f7216", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8af12228f023877ab9f6c39878f95a8ee05bf9/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=aa8af12228f023877ab9f6c39878f95a8ee05bf9", "patch": "@@ -12,7 +12,6 @@ enum Msg\n \n fn foo(name: ~str, samples_chan: Chan<Msg>) {\n     do task::spawn\n-    |copy name|\n     {\n         let callback: SamplesFn =\n             |buffer|"}]}