{"sha": "0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "node_id": "C_kwDOAAsO6NoAKDBhODk1OThkYmRmODMwZWQxNjIwNGEyNDBlN2I0Zjk1YzI2ZjdhYjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-15T22:49:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-18T20:52:59Z"}, "message": "Add some comments.\n\nAlso use `Default::default()` in one `TypedArena::default()`, for\nconsistency with `DroplessArena::default()`.", "tree": {"sha": "9aea23a3a6e439d6d61222e5cb04a36deca669ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aea23a3a6e439d6d61222e5cb04a36deca669ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "html_url": "https://github.com/rust-lang/rust/commit/0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552073701f0c20c26b8579b7b6810bbeb6595f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/552073701f0c20c26b8579b7b6810bbeb6595f26", "html_url": "https://github.com/rust-lang/rust/commit/552073701f0c20c26b8579b7b6810bbeb6595f26"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "6f9ecb9cd21e094afbc71354b6dcac6e1565a517", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "patch": "@@ -111,7 +111,7 @@ impl<T> Default for TypedArena<T> {\n             // alloc() will trigger a grow().\n             ptr: Cell::new(ptr::null_mut()),\n             end: Cell::new(ptr::null_mut()),\n-            chunks: RefCell::new(vec![]),\n+            chunks: Default::default(),\n             _own: PhantomData,\n         }\n     }\n@@ -325,13 +325,17 @@ unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n \n unsafe impl<T: Send> Send for TypedArena<T> {}\n \n+/// An arena that can hold objects of multiple different types that impl `Copy`\n+/// and/or satisfy `!mem::needs_drop`.\n pub struct DroplessArena {\n     /// A pointer to the start of the free space.\n     start: Cell<*mut u8>,\n \n     /// A pointer to the end of free space.\n     ///\n-    /// The allocation proceeds from the end of the chunk towards the start.\n+    /// The allocation proceeds downwards from the end of the chunk towards the\n+    /// start. (This is slightly simpler and faster than allocating upwards,\n+    /// see <https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html>.)\n     /// When this pointer crosses the start pointer, a new chunk is allocated.\n     end: Cell<*mut u8>,\n \n@@ -516,6 +520,10 @@ impl DroplessArena {\n     }\n }\n \n+// Declare an `Arena` containing one dropless arena and many typed arenas (the\n+// types of the typed arenas are specified by the arguments). The dropless\n+// arena will be used for any types that impl `Copy`, and also for any of the\n+// specified types that satisfy `!mem::needs_drop`.\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     #[derive(Default)]\n@@ -532,6 +540,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n         ) -> &'a mut [Self];\n     }\n \n+    // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n     impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n         #[inline]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n@@ -544,7 +553,6 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n         ) -> &'a mut [Self] {\n             arena.dropless.alloc_from_iter(iter)\n         }\n-\n     }\n     $(\n         impl<'tcx> ArenaAllocatable<'tcx, $ty> for $ty {\n@@ -577,6 +585,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n             value.allocate_on(self)\n         }\n \n+        // Any type that impls `Copy` can have slices be arena-allocated in the `DroplessArena`.\n         #[inline]\n         pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n             if value.is_empty() {"}, {"sha": "f19ca497d8bf257f4a8853302366a54ad6c70dc7", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "patch": "@@ -1,4 +1,4 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]`,\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro."}, {"sha": "ee2e190e7cd44b7e698956f795101075a0f2423c", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a89598dbdf830ed16204a240e7b4f95c26f7ab4/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=0a89598dbdf830ed16204a240e7b4f95c26f7ab4", "patch": "@@ -1,4 +1,4 @@\n-/// This declares a list of types which can be allocated by `Arena`.\n+/// This higher-order macro declares a list of types which can be allocated by `Arena`.\n ///\n /// Specifying the `decode` modifier will add decode impls for `&T` and `&[T]` where `T` is the type\n /// listed. These impls will appear in the implement_ty_decoder! macro."}]}