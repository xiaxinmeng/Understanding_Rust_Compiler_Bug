{"sha": "28267e3839fd59d40e014d1287c85359db91c0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MjY3ZTM4MzlmZDU5ZDQwZTAxNGQxMjg3Yzg1MzU5ZGI5MWMwYjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-25T02:39:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-25T02:39:48Z"}, "message": "Rollup merge of #80340 - jyn514:less-modules-attrs, r=GuillaumeGomez\n\nDon't unnecessarily override attrs for Module\n\nThey were never changed from the default, which you can get with `tcx.get_attrs()`.", "tree": {"sha": "c76837f022716f754a2074a7679ac72b920cb754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76837f022716f754a2074a7679ac72b920cb754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28267e3839fd59d40e014d1287c85359db91c0b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5VD0CRBK7hj4Ov3rIwAAdHIIADB+EkKa/nL/6sRjfXmzKSy/\nxdE5tLS0v37w58bRy04eYkCqdZYvuuekQZZSlrd8/NlsZmTh1S23vjmEjWy4rAfG\nMty09ZbEbeC0Ekn5DF4pi959LOWvK4mXc6Tr72oZ4uSsnDusu9Wz2oOSx9hnrxo5\nVmdVTgB+INh++xFtTLZrBFkRh55uZVr86oJjdUsO+ELZJfLQ9TMb3Rn03nXd7snx\nPKLSlmfpG3HxfHQ5dqerKLyFnz8F11QAFVEripSF6XtBZ+rCeoko+ODg4tlDShkV\nNg+EFBkuWgGC7aaufu63lavNy7VoH388ynaCyqVamWTxznILNEDVOaNij0wJI4o=\n=5kTV\n-----END PGP SIGNATURE-----\n", "payload": "tree c76837f022716f754a2074a7679ac72b920cb754\nparent 704f81e3cb635af0745b8f706860ac5d6a99bb9a\nparent 6dc4f7a9d430e1b7d9a2a4032905fd96677e7846\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608863988 +0100\ncommitter GitHub <noreply@github.com> 1608863988 +0100\n\nRollup merge of #80340 - jyn514:less-modules-attrs, r=GuillaumeGomez\n\nDon't unnecessarily override attrs for Module\n\nThey were never changed from the default, which you can get with `tcx.get_attrs()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28267e3839fd59d40e014d1287c85359db91c0b6", "html_url": "https://github.com/rust-lang/rust/commit/28267e3839fd59d40e014d1287c85359db91c0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28267e3839fd59d40e014d1287c85359db91c0b6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704f81e3cb635af0745b8f706860ac5d6a99bb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/704f81e3cb635af0745b8f706860ac5d6a99bb9a", "html_url": "https://github.com/rust-lang/rust/commit/704f81e3cb635af0745b8f706860ac5d6a99bb9a"}, {"sha": "6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846", "html_url": "https://github.com/rust-lang/rust/commit/6dc4f7a9d430e1b7d9a2a4032905fd96677e7846"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "dd96178cdb700d496dc06e222914297fd52496e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=28267e3839fd59d40e014d1287c85359db91c0b6", "patch": "@@ -218,11 +218,6 @@ impl Clean<ExternalCrate> for CrateNum {\n \n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        // maintain a stack of mod ids, for doc comment path resolution\n-        // but we also need to resolve the module's own docs based on whether its docs were written\n-        // inside or outside the module, so check for that\n-        let attrs = self.attrs.clean(cx);\n-\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n@@ -251,7 +246,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item { attrs, source: span.clean(cx), ..what_rustc_thinks }\n+        Item { source: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n "}, {"sha": "bc9f1cf8806ab47a10b3cc03492b222870e220c9", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=28267e3839fd59d40e014d1287c85359db91c0b6", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n \n crate struct Module<'hir> {\n     crate name: Option<Symbol>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate where_outer: Span,\n     crate where_inner: Span,\n     crate imports: Vec<Import<'hir>>,\n@@ -23,13 +22,12 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Option<Symbol>, attrs: &'hir [ast::Attribute]) -> Module<'hir> {\n+    crate fn new(name: Option<Symbol>) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,\n             where_outer: rustc_span::DUMMY_SP,\n             where_inner: rustc_span::DUMMY_SP,\n-            attrs,\n             imports: Vec::new(),\n             mods: Vec::new(),\n             items: Vec::new(),"}, {"sha": "3c0aeaad43e5da5322b73755d323c5ae1e5d9e48", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28267e3839fd59d40e014d1287c85359db91c0b6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=28267e3839fd59d40e014d1287c85359db91c0b6", "patch": "@@ -1,7 +1,6 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -64,7 +63,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n             krate.item.span,\n-            krate.item.attrs,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n@@ -82,13 +80,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_mod_contents(\n         &mut self,\n         span: Span,\n-        attrs: &'tcx [ast::Attribute],\n         vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name, attrs);\n+        let mut om = Module::new(name);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n         om.id = id;\n@@ -292,7 +289,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 om.mods.push(self.visit_mod_contents(\n                     item.span,\n-                    &item.attrs,\n                     &item.vis,\n                     item.hir_id,\n                     m,"}]}