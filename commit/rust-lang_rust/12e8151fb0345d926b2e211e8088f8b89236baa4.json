{"sha": "12e8151fb0345d926b2e211e8088f8b89236baa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTgxNTFmYjAzNDVkOTI2YjJlMjExZTgwODhmOGI4OTIzNmJhYTQ=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-30T02:13:14Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:16:56Z"}, "message": "RIMOV, round 4\n\nfind ./ -type f -name \"*.rs\" -exec sed -i \"s/let mut \\(.*\\)\\[mut[\n]\\?/let mut \\1\\[/g\" {} \\;", "tree": {"sha": "ec986fae9b9ea778d173227246d232eda819b8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec986fae9b9ea778d173227246d232eda819b8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e8151fb0345d926b2e211e8088f8b89236baa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e8151fb0345d926b2e211e8088f8b89236baa4", "html_url": "https://github.com/rust-lang/rust/commit/12e8151fb0345d926b2e211e8088f8b89236baa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e8151fb0345d926b2e211e8088f8b89236baa4/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5577ce635f5d2a7a773d08d403cb707001064742", "url": "https://api.github.com/repos/rust-lang/rust/commits/5577ce635f5d2a7a773d08d403cb707001064742", "html_url": "https://github.com/rust-lang/rust/commit/5577ce635f5d2a7a773d08d403cb707001064742"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "eee82f4626fa8f07b036cd9fd68672f4b69054bf", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -252,7 +252,7 @@ pub pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n     // Enough room to hold any number in any radix.\n     // Worst case: 64-bit number, binary-radix, with\n     // a leading negative sign = 65 bytes.\n-    let mut buf : [mut u8 * 65] = [0u8, ..65];\n+    let mut buf : [u8 * 65] = [0u8, ..65];\n     let len = buf.len();\n \n     let mut i = len;"}, {"sha": "f18d72c0d88613df64cd5a31678740b871df1232", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -3155,7 +3155,7 @@ mod tests {\n \n     #[test]\n     fn reverse_and_reversed() {\n-        let mut v: ~[mut int] = ~[10, 20];\n+        let mut v: ~[int] = ~[10, 20];\n         assert (v[0] == 10);\n         assert (v[1] == 20);\n         reverse(v);\n@@ -3170,7 +3170,7 @@ mod tests {\n \n         let v4 = reversed::<int>(~[]);\n         assert (v4 == ~[]);\n-        let mut v3: ~[mut int] = ~[];\n+        let mut v3: ~[int] = ~[];\n         reverse::<int>(v3);\n     }\n "}, {"sha": "62401b4b434f4ad47c8bb4010c6c7f62bffecbf5", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -68,7 +68,7 @@ fn nop<T>(_x: T) { }\n \n fn test_cycles(r : rand::rng, k: uint, n: uint)\n {\n-    let mut v : ~[mut @pointy] = ~[];\n+    let mut v : ~[@pointy] = ~[];\n \n     // Create a graph with no edges\n     range(0u, vlen) {|_i|"}, {"sha": "fab98f5d571c28883cd624fd2938134fd88dfce7", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -1163,7 +1163,7 @@ pub mod node {\n         }\n \n         pub fn empty() -> T {\n-            let mut stack : ~[mut @Node] = ~[];\n+            let mut stack : ~[@Node] = ~[];\n             T { stack: stack, stackpos: -1 }\n         }\n "}, {"sha": "648b07ae0241bb64fed8cfa7363ad2f3bc3d1afc", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -750,11 +750,11 @@ mod test_qsort3 {\n             check_sort(v1, v2);\n         }\n         {\n-            let mut v1: ~[mut int] = ~[];\n-            let mut v2: ~[mut int] = ~[];\n+            let mut v1: ~[int] = ~[];\n+            let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];\n@@ -797,11 +797,11 @@ mod test_qsort {\n             check_sort(v1, v2);\n         }\n         {\n-            let mut v1: ~[mut int] = ~[];\n-            let mut v2: ~[mut int] = ~[];\n+            let mut v1: ~[int] = ~[];\n+            let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];\n@@ -947,11 +947,11 @@ mod test_tim_sort {\n             check_sort(v1, v2);\n         }\n         {\n-            let mut v1: ~[mut int] = ~[];\n-            let mut v2: ~[mut int] = ~[];\n+            let mut v1: ~[int] = ~[];\n+            let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];"}, {"sha": "8734ef8c0aaed4157127c8ae70abd3c10b7e75b0", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -11,7 +11,7 @@\n fn two_args<T>(x: T, y: T) { }\n \n fn main() {\n-    let mut x: ~[mut int] = ~[3];\n+    let mut x: ~[int] = ~[3];\n     let y: ~[int] = ~[3];\n     let a: @mut int = @mut 3;\n     let b: @int = @3;"}, {"sha": "93f734b39abc3e060288268d2b9a4cffc04ca18b", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let mut v: ~[mut ~[int]] = ~[~[0]];\n+    let mut v: ~[~[int]] = ~[~[0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n         v[0] = ~[mut 3]"}, {"sha": "be3f28a440f9cd166ab78e89c36718a5504322d9", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let mut v: ~[mut ~[mut int]] = ~[mut ~[0]];\n+    let mut v: ~[mut ~[mut int]] = ~[~[0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n         v[0] = ~[3]"}, {"sha": "eaf10e314ae82afcbffba98cfba0873f0292da44", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let mut v: ~[mut ~[mut ~[int]]] = ~[mut ~[~[0]]];\n+    let mut v: ~[mut ~[mut ~[int]]] = ~[~[~[0]]];\n \n     fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n         v[0][1] = ~[mut 3]"}, {"sha": "046f6b71d0089a2a5cea55bf7b10d053db955845", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -14,8 +14,8 @@ fn main() {\n     // but we do express conflicting requirements:\n \n     let mut v = ~[~[0]];\n-    let mut w = ~[mut ~[0]];\n-    let mut x = ~[mut ~[0]];\n+    let mut w = ~[~[0]];\n+    let mut x = ~[~[0]];\n \n     fn f(&&v: ~[mut ~[int]]) {\n         v[0] = ~[3]"}, {"sha": "7ab10a0b3e9d5217d78f864f89b2ea18a45d7eaf", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let mut v: ~[mut int] = ~[]; }\n+fn main() { let mut v: ~[int] = ~[]; }"}, {"sha": "958910376947692093c5fdf904b82b32cbbb27fa", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -15,7 +15,7 @@\n fn two(it: fn(int)) { it(0); it(1); }\n \n fn main() {\n-    let mut a: ~[mut int] = ~[-1, -1, -1, -1];\n+    let mut a: ~[int] = ~[-1, -1, -1, -1];\n     let mut p: int = 0;\n     do two |i| {\n         do two |j| { a[p] = 10 * i + j; p += 1; }"}, {"sha": "a9e3f9d026179b98aa08d365c7e2c24e1e40176b", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -20,7 +20,7 @@ struct Smallintmap<T> {mut v: ~[mut option<T>]}\n struct V<T> { v: ~[mut option<T>] }\n \n fn mk<T>() -> @Smallintmap<T> {\n-    let mut v: ~[mut option<T>] = ~[];\n+    let mut v: ~[option<T>] = ~[];\n     return @Smallintmap {mut v: move v};\n }\n "}, {"sha": "09360e0ec94af2a491a5bd732717e8858320fd24", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e8151fb0345d926b2e211e8088f8b89236baa4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=12e8151fb0345d926b2e211e8088f8b89236baa4", "patch": "@@ -11,7 +11,7 @@\n fn swap<T>(v: &[mut T], i: int, j: int) { v[i] <-> v[j]; }\n \n fn main() {\n-    let mut a: ~[mut int] = ~[0, 1, 2, 3, 4, 5, 6];\n+    let mut a: ~[int] = ~[0, 1, 2, 3, 4, 5, 6];\n     swap(a, 2, 4);\n     assert (a[2] == 4);\n     assert (a[4] == 2);"}]}