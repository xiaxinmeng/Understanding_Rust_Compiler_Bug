{"sha": "b3267dcb3171f3a6b20eaceea254ab696609b922", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjY3ZGNiMzE3MWYzYTZiMjBlYWNlZWEyNTRhYjY5NjYwOWI5MjI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T17:22:14Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:53:15Z"}, "message": "Normalize variants of Passes to standard style", "tree": {"sha": "28e5276811a531582abe3ba3285e85052298c294", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e5276811a531582abe3ba3285e85052298c294"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3267dcb3171f3a6b20eaceea254ab696609b922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3267dcb3171f3a6b20eaceea254ab696609b922", "html_url": "https://github.com/rust-lang/rust/commit/b3267dcb3171f3a6b20eaceea254ab696609b922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3267dcb3171f3a6b20eaceea254ab696609b922/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "html_url": "https://github.com/rust-lang/rust/commit/2a9344206be8ecd1cd2106bd93cccf46892fc2e5"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "7d4508e0eea2a96fc14c4029425bf57089dea106", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3267dcb3171f3a6b20eaceea254ab696609b922/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3267dcb3171f3a6b20eaceea254ab696609b922/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b3267dcb3171f3a6b20eaceea254ab696609b922", "patch": "@@ -12,7 +12,6 @@\n //! command line options.\n \n pub use self::EntryFnType::*;\n-pub use self::Passes::*;\n pub use self::DebugInfoLevel::*;\n \n use std::str::FromStr;\n@@ -679,15 +678,15 @@ pub enum CrateType {\n \n #[derive(Clone, Hash)]\n pub enum Passes {\n-    SomePasses(Vec<String>),\n-    AllPasses,\n+    Some(Vec<String>),\n+    All,\n }\n \n impl Passes {\n     pub fn is_empty(&self) -> bool {\n         match *self {\n-            SomePasses(ref v) => v.is_empty(),\n-            AllPasses => false,\n+            Passes::Some(ref v) => v.is_empty(),\n+            Passes::All => false,\n         }\n     }\n }\n@@ -822,8 +821,7 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto,\n-                    CrossLangLto};\n+        use super::{$struct_name, Passes, Sanitizer, Lto, CrossLangLto};\n         use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -934,13 +932,13 @@ macro_rules! options {\n         fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"all\") => {\n-                    *slot = AllPasses;\n+                    *slot = Passes::All;\n                     true\n                 }\n                 v => {\n                     let mut passes = vec![];\n                     if parse_list(&mut passes, v) {\n-                        *slot = SomePasses(passes);\n+                        *slot = Passes::Some(passes);\n                         true\n                     } else {\n                         false\n@@ -1103,7 +1101,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n-    remark: Passes = (SomePasses(Vec::new()), parse_passes, [UNTRACKED],\n+    remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n         \"the --no-stack-check flag is deprecated and does nothing\"),\n@@ -2946,7 +2944,7 @@ mod tests {\n         opts.cg.codegen_units = Some(42);\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-        opts.cg.remark = super::SomePasses(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n+        opts.cg.remark = super::Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts.cg.save_temps = true;"}, {"sha": "aec43be0795b17c68e366443049a3c6d596f0c99", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3267dcb3171f3a6b20eaceea254ab696609b922/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3267dcb3171f3a6b20eaceea254ab696609b922/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b3267dcb3171f3a6b20eaceea254ab696609b922", "patch": "@@ -20,8 +20,7 @@ use consts;\n use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir};\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n-use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePasses,\n-                             AllPasses, Sanitizer, Lto};\n+use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Sanitizer, Lto};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n@@ -461,8 +460,8 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n         llvm::diagnostic::Optimization(opt) => {\n             let enabled = match cgcx.remark {\n-                AllPasses => true,\n-                SomePasses(ref v) => v.iter().any(|s| *s == opt.pass_name),\n+                Passes::All => true,\n+                Passes::Some(ref v) => v.iter().any(|s| *s == opt.pass_name),\n             };\n \n             if enabled {"}]}