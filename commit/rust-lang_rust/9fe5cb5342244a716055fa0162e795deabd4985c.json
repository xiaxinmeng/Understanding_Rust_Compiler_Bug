{"sha": "9fe5cb5342244a716055fa0162e795deabd4985c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTVjYjUzNDIyNDRhNzE2MDU1ZmEwMTYyZTc5NWRlYWJkNDk4NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T07:12:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T07:12:19Z"}, "message": "Auto merge of #56161 - RalfJung:vecdeque-stacked-borrows, r=SimonSapin\n\nVecDeque: fix for stacked borrows\n\n`VecDeque` violates a version of stacked borrows where creating a shared reference is not enough to make a location *mutably accessible* from raw pointers (and I think that is the version we want).  There are two problems:\n\n* Creating a `NonNull<T>` from `&mut T` goes through `&T` (inferred for a `_`), then `*const T`, then `NonNull<T>`. That means in this stricter version of Stacked Borrows, we cannot actually write to such a `NonNull` because it was created from a shared reference! This PR fixes that by going from `&mut T` to `*mut T` to `*const T`.\n* `VecDeque::drain` creates the `Drain` struct by *first* creating a `NonNull` from `self` (which is an `&mut VecDeque`), and *then* calling `self.buffer_as_mut_slice()`. The latter reborrows `self`, asserting that `self` is currently the unique pointer to access this `VecDeque`, and hence invalidating the `NonNull` that was created earlier. This PR fixes that by instead using `self.buffer_as_slice()`, which only performs read accesses and creates only shared references, meaning the raw pointer (`NonNull`) remains valid.\n\nIt is possible that other methods on `VecDeque` do something similar, miri's test coverage of `VecDeque` is sparse to say the least.\n\nCc @nikomatsakis @Gankro", "tree": {"sha": "f2a928470eca9ca49926eb634de4dee78d0a2189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a928470eca9ca49926eb634de4dee78d0a2189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe5cb5342244a716055fa0162e795deabd4985c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe5cb5342244a716055fa0162e795deabd4985c", "html_url": "https://github.com/rust-lang/rust/commit/9fe5cb5342244a716055fa0162e795deabd4985c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe5cb5342244a716055fa0162e795deabd4985c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced7cc5c6523ff478599ed9188df37e91fd96c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced7cc5c6523ff478599ed9188df37e91fd96c68", "html_url": "https://github.com/rust-lang/rust/commit/ced7cc5c6523ff478599ed9188df37e91fd96c68"}, {"sha": "feb775c834361f635df9e3824f9d2ae9582becbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb775c834361f635df9e3824f9d2ae9582becbb", "html_url": "https://github.com/rust-lang/rust/commit/feb775c834361f635df9e3824f9d2ae9582becbb"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "0c5926fbaf1dcf7623fdc29ff49fc14a69382b16", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fe5cb5342244a716055fa0162e795deabd4985c/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe5cb5342244a716055fa0162e795deabd4985c/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=9fe5cb5342244a716055fa0162e795deabd4985c", "patch": "@@ -1026,7 +1026,10 @@ impl<T> VecDeque<T> {\n             iter: Iter {\n                 tail: drain_tail,\n                 head: drain_head,\n-                ring: unsafe { self.buffer_as_mut_slice() },\n+                // Crucially, we only create shared references from `self` here and read from\n+                // it.  We do not write to `self` nor reborrow to a mutable reference.\n+                // Hence the raw pointer we created above, for `deque`, remains valid.\n+                ring: unsafe { self.buffer_as_slice() },\n             },\n         }\n     }"}, {"sha": "f61e582f7641b21e3fb0bd07cc53b59b0e134042", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fe5cb5342244a716055fa0162e795deabd4985c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe5cb5342244a716055fa0162e795deabd4985c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9fe5cb5342244a716055fa0162e795deabd4985c", "patch": "@@ -2848,14 +2848,14 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Unique { pointer: unsafe { NonZero(reference as _) }, _marker: PhantomData }\n+        Unique { pointer: unsafe { NonZero(reference as *mut T) }, _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        Unique { pointer: unsafe { NonZero(reference as _) }, _marker: PhantomData }\n+        Unique { pointer: unsafe { NonZero(reference as *const T) }, _marker: PhantomData }\n     }\n }\n \n@@ -3058,14 +3058,14 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n-        NonNull { pointer: unsafe { NonZero(reference as _) } }\n+        NonNull { pointer: unsafe { NonZero(reference as *mut T) } }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n-        NonNull { pointer: unsafe { NonZero(reference as _) } }\n+        NonNull { pointer: unsafe { NonZero(reference as *const T) } }\n     }\n }"}]}