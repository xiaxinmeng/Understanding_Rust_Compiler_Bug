{"sha": "62bae0ad42e9245ba0583adcfc368833d24c5c51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmFlMGFkNDJlOTI0NWJhMDU4M2FkY2ZjMzY4ODMzZDI0YzVjNTE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-07-06T23:13:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-06T23:13:06Z"}, "message": "Rollup merge of #34277 - ollie27:docs_num, r=steveklabnik\n\nAdd/improve num const docs\n\nThis adds short summaries to all num consts.\n\nr? @steveklabnik", "tree": {"sha": "fd0cd9fa2b26b64f5a609bf61454b7dcce854fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0cd9fa2b26b64f5a609bf61454b7dcce854fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62bae0ad42e9245ba0583adcfc368833d24c5c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62bae0ad42e9245ba0583adcfc368833d24c5c51", "html_url": "https://github.com/rust-lang/rust/commit/62bae0ad42e9245ba0583adcfc368833d24c5c51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62bae0ad42e9245ba0583adcfc368833d24c5c51/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef10e6cfc3bf40b8470ad7c6ef939e4a385dbde", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef10e6cfc3bf40b8470ad7c6ef939e4a385dbde", "html_url": "https://github.com/rust-lang/rust/commit/eef10e6cfc3bf40b8470ad7c6ef939e4a385dbde"}, {"sha": "2dcfa628768af55b07931c8717e92ddf2f70940d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcfa628768af55b07931c8717e92ddf2f70940d", "html_url": "https://github.com/rust-lang/rust/commit/2dcfa628768af55b07931c8717e92ddf2f70940d"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "07b05f91f489f9ecfa3752b2175e5f0bc35a3251", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=62bae0ad42e9245ba0583adcfc368833d24c5c51", "patch": "@@ -20,121 +20,121 @@ use mem;\n use num::Float;\n use num::FpCategory as Fp;\n \n+/// The radix or base of the internal representation of `f32`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n+/// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 24;\n+/// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const DIGITS: u32 = 6;\n \n+/// Difference between `1.0` and the next largest representable number.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n-/// Smallest finite f32 value\n+/// Smallest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = -3.40282347e+38_f32;\n-/// Smallest positive, normalized f32 value\n+/// Smallest positive normal `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n-/// Largest finite f32 value\n+/// Largest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = 3.40282347e+38_f32;\n \n+/// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -125;\n+/// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 128;\n \n+/// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -37;\n+/// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 38;\n \n+/// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NAN: f32 = 0.0_f32/0.0_f32;\n+/// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n+/// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    /// Archimedes' constant\n+    /// Archimedes' constant (\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n-    /// pi/2.0\n+    /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n-    /// pi/3.0\n+    /// \u03c0/3\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_3: f32 = 1.04719755119659774615421446109316763_f32;\n \n-    /// pi/4.0\n+    /// \u03c0/4\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n-    /// pi/6.0\n+    /// \u03c0/6\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_6: f32 = 0.52359877559829887307710723054658381_f32;\n \n-    /// pi/8.0\n+    /// \u03c0/8\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_8: f32 = 0.39269908169872415480783042290993786_f32;\n \n-    /// 1.0/pi\n+    /// 1/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_PI: f32 = 0.318309886183790671537767526745028724_f32;\n \n-    /// 2.0/pi\n+    /// 2/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_PI: f32 = 0.636619772367581343075535053490057448_f32;\n \n-    /// 2.0/sqrt(pi)\n+    /// 2/sqrt(\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_SQRT_PI: f32 = 1.12837916709551257389615890312154517_f32;\n \n-    /// sqrt(2.0)\n+    /// sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const SQRT_2: f32 = 1.41421356237309504880168872420969808_f32;\n \n-    /// 1.0/sqrt(2.0)\n+    /// 1/sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_SQRT_2: f32 = 0.707106781186547524400844362104849039_f32;\n \n-    /// Euler's number\n+    /// Euler's number (e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const E: f32 = 2.71828182845904523536028747135266250_f32;\n \n-    /// log2(e)\n+    /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n \n-    /// log10(e)\n+    /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n \n-    /// ln(2.0)\n+    /// ln(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n-    /// ln(10.0)\n+    /// ln(10)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }"}, {"sha": "82a09e599e027a49065a342fcaac64fd31da2a79", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=62bae0ad42e9245ba0583adcfc368833d24c5c51", "patch": "@@ -20,121 +20,121 @@ use mem;\n use num::FpCategory as Fp;\n use num::Float;\n \n+/// The radix or base of the internal representation of `f64`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n+/// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 53;\n+/// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const DIGITS: u32 = 15;\n \n+/// Difference between `1.0` and the next largest representable number.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n-/// Smallest finite f64 value\n+/// Smallest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = -1.7976931348623157e+308_f64;\n-/// Smallest positive, normalized f64 value\n+/// Smallest positive normal `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n-/// Largest finite f64 value\n+/// Largest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = 1.7976931348623157e+308_f64;\n \n+/// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -1021;\n+/// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 1024;\n \n+/// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -307;\n+/// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 308;\n \n+/// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NAN: f64 = 0.0_f64/0.0_f64;\n+/// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n+/// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    /// Archimedes' constant\n+    /// Archimedes' constant (\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f64 = 3.14159265358979323846264338327950288_f64;\n \n-    /// pi/2.0\n+    /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n-    /// pi/3.0\n+    /// \u03c0/3\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_3: f64 = 1.04719755119659774615421446109316763_f64;\n \n-    /// pi/4.0\n+    /// \u03c0/4\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n-    /// pi/6.0\n+    /// \u03c0/6\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_6: f64 = 0.52359877559829887307710723054658381_f64;\n \n-    /// pi/8.0\n+    /// \u03c0/8\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_8: f64 = 0.39269908169872415480783042290993786_f64;\n \n-    /// 1.0/pi\n+    /// 1/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_PI: f64 = 0.318309886183790671537767526745028724_f64;\n \n-    /// 2.0/pi\n+    /// 2/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_PI: f64 = 0.636619772367581343075535053490057448_f64;\n \n-    /// 2.0/sqrt(pi)\n+    /// 2/sqrt(\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_SQRT_PI: f64 = 1.12837916709551257389615890312154517_f64;\n \n-    /// sqrt(2.0)\n+    /// sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const SQRT_2: f64 = 1.41421356237309504880168872420969808_f64;\n \n-    /// 1.0/sqrt(2.0)\n+    /// 1/sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_SQRT_2: f64 = 0.707106781186547524400844362104849039_f64;\n \n-    /// Euler's number\n+    /// Euler's number (e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const E: f64 = 2.71828182845904523536028747135266250_f64;\n \n-    /// log2(e)\n+    /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n \n-    /// log10(e)\n+    /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f64 = 0.434294481903251827651128918916605082_f64;\n \n-    /// ln(2.0)\n+    /// ln(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n-    /// ln(10.0)\n+    /// ln(10)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }"}, {"sha": "e74c30d5e5af8db76279a044e1051269f2354bbf", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=62bae0ad42e9245ba0583adcfc368833d24c5c51", "patch": "@@ -12,11 +12,11 @@\n \n macro_rules! int_module { ($T:ident, $bits:expr) => (\n \n+/// The smallest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN: $T = $T::min_value();\n+/// The largest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX: $T = $T::max_value();\n \n ) }"}, {"sha": "b41ef7984bbab5c3131ba0bd9a84a20a307cdfb1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=62bae0ad42e9245ba0583adcfc368833d24c5c51", "patch": "@@ -11,7 +11,6 @@\n //! Numeric traits and functions for the built-in numeric types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![allow(missing_docs)]\n \n use char::CharExt;\n use cmp::PartialOrd;"}, {"sha": "cc9256ab6bf4ee34fd5e2126eb8f9e66e77461b5", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62bae0ad42e9245ba0583adcfc368833d24c5c51/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=62bae0ad42e9245ba0583adcfc368833d24c5c51", "patch": "@@ -12,11 +12,11 @@\n \n macro_rules! uint_module { ($T:ident, $bits:expr) => (\n \n+/// The smallest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN: $T = $T::min_value();\n+/// The largest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX: $T = $T::max_value();\n \n ) }"}]}