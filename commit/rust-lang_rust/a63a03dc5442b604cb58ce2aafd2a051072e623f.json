{"sha": "a63a03dc5442b604cb58ce2aafd2a051072e623f", "node_id": "C_kwDOAAsO6NoAKGE2M2EwM2RjNTQ0MmI2MDRjYjU4Y2UyYWFmZDJhMDUxMDcyZTYyM2Y", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-27T19:27:04Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-27T19:27:04Z"}, "message": "rustdoc: remove `clean::TraitWithExtraInfo`\n\nInstead, it gathers the extra info later, when it's actually requested.", "tree": {"sha": "40dd9bcd5ac3c195141eee0c30006916310e5cdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40dd9bcd5ac3c195141eee0c30006916310e5cdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63a03dc5442b604cb58ce2aafd2a051072e623f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63a03dc5442b604cb58ce2aafd2a051072e623f", "html_url": "https://github.com/rust-lang/rust/commit/a63a03dc5442b604cb58ce2aafd2a051072e623f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63a03dc5442b604cb58ce2aafd2a051072e623f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "7893429f26f80ca0261389d684ecf6c3aa66d1f0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -718,10 +718,6 @@ pub(crate) fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n-    let trait_ = clean::TraitWithExtraInfo {\n-        trait_,\n-        is_notable: clean::utils::has_doc_flag(cx.tcx, did, sym::notable_trait),\n-    };\n     cx.external_traits.borrow_mut().insert(did, trait_);\n     cx.active_extern_traits.remove(&did);\n }"}, {"sha": "1e63d0e46bde11f43e86bb52f8c7668ad4720b00", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -37,7 +37,7 @@ use crate::clean::cfg::Cfg;\n use crate::clean::clean_visibility;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n-use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n+use crate::clean::utils::{has_doc_flag, is_literal_expr, print_const_expr, print_evaluated_const};\n use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -119,7 +119,7 @@ pub(crate) struct Crate {\n     pub(crate) module: Item,\n     pub(crate) primitives: ThinVec<(DefId, PrimitiveType)>,\n     /// Only here so that they can be filtered through the rustdoc passes.\n-    pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n+    pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n }\n \n impl Crate {\n@@ -132,13 +132,6 @@ impl Crate {\n     }\n }\n \n-/// This struct is used to wrap additional information added by rustdoc on a `trait` item.\n-#[derive(Clone, Debug)]\n-pub(crate) struct TraitWithExtraInfo {\n-    pub(crate) trait_: Trait,\n-    pub(crate) is_notable: bool,\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct ExternalCrate {\n     pub(crate) crate_num: CrateNum,\n@@ -1530,6 +1523,9 @@ impl Trait {\n     pub(crate) fn is_auto(&self, tcx: TyCtxt<'_>) -> bool {\n         tcx.trait_is_auto(self.def_id)\n     }\n+    pub(crate) fn is_notable_trait(&self, tcx: TyCtxt<'_>) -> bool {\n+        has_doc_flag(tcx, self.def_id, sym::notable_trait)\n+    }\n     pub(crate) fn unsafety(&self, tcx: TyCtxt<'_>) -> hir::Unsafety {\n         tcx.trait_def(self.def_id).unsafety\n     }"}, {"sha": "f00dff9828dd282cfda423bd3777d8674c92bbfd", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -25,7 +25,7 @@ use std::rc::Rc;\n use std::sync::LazyLock;\n \n use crate::clean::inline::build_external_trait;\n-use crate::clean::{self, ItemId, TraitWithExtraInfo};\n+use crate::clean::{self, ItemId};\n use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::collect_intra_doc_links::PreprocessedMarkdownLink;\n@@ -58,7 +58,7 @@ pub(crate) struct DocContext<'tcx> {\n     /// Most of this logic is copied from rustc_lint::late.\n     pub(crate) param_env: ParamEnv<'tcx>,\n     /// Later on moved through `clean::Crate` into `cache`\n-    pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, clean::TraitWithExtraInfo>>>,\n+    pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     pub(crate) active_extern_traits: FxHashSet<DefId>,\n@@ -388,9 +388,7 @@ pub(crate) fn run_global_ctxt(\n     // Note that in case of `#![no_core]`, the trait is not available.\n     if let Some(sized_trait_did) = ctxt.tcx.lang_items().sized_trait() {\n         let sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n-        ctxt.external_traits\n-            .borrow_mut()\n-            .insert(sized_trait_did, TraitWithExtraInfo { trait_: sized_trait, is_notable: false });\n+        ctxt.external_traits.borrow_mut().insert(sized_trait_did, sized_trait);\n     }\n \n     debug!(\"crate: {:?}\", tcx.hir().krate());"}, {"sha": "c6f1f9de51a49a4745516e4f7a31cf59b8c1543a", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -94,7 +94,7 @@ pub(crate) trait DocFolder: Sized {\n \n         let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n         for (k, mut v) in external_traits {\n-            v.trait_.items = v.trait_.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n+            v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n             c.external_traits.borrow_mut().insert(k, v);\n         }\n "}, {"sha": "2e428cfddcf0a343571e442a06be370e2045d0c0", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::{sym, Symbol};\n+use rustc_span::Symbol;\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate, ItemId, PrimitiveType};\n use crate::core::DocContext;\n@@ -62,7 +62,7 @@ pub(crate) struct Cache {\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    pub(crate) traits: FxHashMap<DefId, clean::TraitWithExtraInfo>,\n+    pub(crate) traits: FxHashMap<DefId, clean::Trait>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n@@ -225,12 +225,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // Propagate a trait method's documentation to all implementors of the\n         // trait.\n         if let clean::TraitItem(ref t) = *item.kind {\n-            self.cache.traits.entry(item.item_id.expect_def_id()).or_insert_with(|| {\n-                clean::TraitWithExtraInfo {\n-                    trait_: *t.clone(),\n-                    is_notable: item.attrs.has_doc_flag(sym::notable_trait),\n-                }\n-            });\n+            self.cache.traits.entry(item.item_id.expect_def_id()).or_insert_with(|| (**t).clone());\n         }\n \n         // Collect all the implementors of traits."}, {"sha": "aa9788fad2b6cb643082e7f3f541d7e105c855a5", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -1294,7 +1294,12 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n                 if let Some(trait_) = &impl_.trait_ {\n                     let trait_did = trait_.def_id();\n \n-                    if cx.cache().traits.get(&trait_did).map_or(false, |t| t.is_notable) {\n+                    if cx\n+                        .cache()\n+                        .traits\n+                        .get(&trait_did)\n+                        .map_or(false, |t| t.is_notable_trait(cx.tcx()))\n+                    {\n                         if out.is_empty() {\n                             write!(\n                                 &mut out,\n@@ -1598,7 +1603,7 @@ fn render_impl(\n             link,\n             render_mode,\n             false,\n-            trait_.map(|t| &t.trait_),\n+            trait_,\n             rendering_params,\n         );\n     }\n@@ -1658,7 +1663,7 @@ fn render_impl(\n                 &mut default_impl_items,\n                 &mut impl_items,\n                 cx,\n-                &t.trait_,\n+                t,\n                 i.inner_impl(),\n                 &i.impl_item,\n                 parent,"}, {"sha": "d13efe6c113beaf4961bceda28f9c8b03fde3f9f", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -108,7 +108,6 @@ impl<'tcx> JsonRenderer<'tcx> {\n             .filter_map(|(&id, trait_item)| {\n                 // only need to synthesize items for external traits\n                 if !id.is_local() {\n-                    let trait_item = &trait_item.trait_;\n                     for item in &trait_item.items {\n                         trace!(\"Adding subitem to {id:?}: {:?}\", item.item_id);\n                         self.item(item.clone()).unwrap();"}, {"sha": "d29ceead4f3a549026a519f8ee83a83695ae6c0b", "filename": "src/librustdoc/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63a03dc5442b604cb58ce2aafd2a051072e623f/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=a63a03dc5442b604cb58ce2aafd2a051072e623f", "patch": "@@ -65,7 +65,7 @@ pub(crate) trait DocVisitor: Sized {\n         // FIXME: make this a simple by-ref for loop once external_traits is cleaned up\n         let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n         for (k, v) in external_traits {\n-            v.trait_.items.iter().for_each(|i| self.visit_item(i));\n+            v.items.iter().for_each(|i| self.visit_item(i));\n             c.external_traits.borrow_mut().insert(k, v);\n         }\n     }"}]}