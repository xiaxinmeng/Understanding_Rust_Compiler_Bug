{"sha": "4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2ZiYzM2YzY3MmYwZjMwMTc2YTMxYzVhNmU1MjliZWJkNmZiY2M=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-12T13:14:47Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-12T13:14:47Z"}, "message": "speed up mem::swap", "tree": {"sha": "78629ca780bd383b275fe14c297cf72f87699de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78629ca780bd383b275fe14c297cf72f87699de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc", "html_url": "https://github.com/rust-lang/rust/commit/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84a5174833e39ca779fa7e49b34190e100e2e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a5174833e39ca779fa7e49b34190e100e2e49", "html_url": "https://github.com/rust-lang/rust/commit/f84a5174833e39ca779fa7e49b34190e100e2e49"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "a7c5d29c5a516f465990ef198a7e242a1cf908c7", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4bcfbc36c672f0f30176a31c5a6e529bebd6fbcc", "patch": "@@ -109,7 +109,7 @@ pub use intrinsics::transmute;\n /// [`Clone`][clone]. You need the value's destructor to run only once,\n /// because a double `free` is undefined behavior.\n ///\n-/// An example is the definition of [`mem::swap`][swap] in this module:\n+/// An example is the (old) definition of [`mem::swap`][swap] in this module:\n ///\n /// ```\n /// use std::mem;\n@@ -447,18 +447,15 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n-        // Give ourselves some scratch space to work with\n-        let mut t: T = uninitialized();\n+        let x = x as *mut T as *mut u8;\n+        let y = y as *mut T as *mut u8;\n \n-        // Perform the swap, `&mut` pointers never alias\n-        ptr::copy_nonoverlapping(&*x, &mut t, 1);\n-        ptr::copy_nonoverlapping(&*y, x, 1);\n-        ptr::copy_nonoverlapping(&t, y, 1);\n-\n-        // y and t now point to the same thing, but we need to completely\n-        // forget `t` because we do not want to run the destructor for `T`\n-        // on its value, which is still owned somewhere outside this function.\n-        forget(t);\n+        // use an xor-swap as x & y are guaranteed to never alias\n+        for i in 0..size_of::<T>() as isize {\n+            *x.offset(i) ^= *y.offset(i);\n+            *y.offset(i) ^= *x.offset(i);\n+            *x.offset(i) ^= *y.offset(i);\n+        }\n     }\n }\n "}]}