{"sha": "48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTViYzE5ODgyOWUyM2VmODVhODdmNGVmMmNiNWM3ZmRmMzUzZjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-09T04:31:53Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-09T04:31:53Z"}, "message": "Reorder config options\n\ncc #1974", "tree": {"sha": "11a6c4bef1b331cd024678fbdeb4fd3c02e96614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a6c4bef1b331cd024678fbdeb4fd3c02e96614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9", "html_url": "https://github.com/rust-lang/rust/commit/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7822d0c921af16dafa6134b00a20fdf49e63f99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7822d0c921af16dafa6134b00a20fdf49e63f99c", "html_url": "https://github.com/rust-lang/rust/commit/7822d0c921af16dafa6134b00a20fdf49e63f99c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "6680c76aa64779f0c28e7b68a5c02aa848ace4e8", "filename": "src/config/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=48e5bc198829e23ef85a87f4ef2cb5c7fdf353f9", "patch": "@@ -43,19 +43,19 @@ create_config! {\n     hard_tabs: bool, false, true, \"Use tab characters for indentation, spaces for alignment\";\n     tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n     newline_style: NewlineStyle, NewlineStyle::Unix, true, \"Unix or Windows line endings\";\n-    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n     use_small_heuristics: bool, true, false, \"Whether to use different formatting for items and \\\n         expressions if they satisfy a heuristic notion of 'small'.\";\n+    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n \n-    // strings and comments\n-    format_strings: bool, false, false, \"Format string literals where necessary\";\n+    // Comments and strings\n     wrap_comments: bool, false, true, \"Break comments to fit on the line\";\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, true, \"Convert /* */ comments to // comments where possible\";\n     license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n+    format_strings: bool, false, false, \"Format string literals where necessary\";\n \n-    // Single line expressions and items.\n+    // Single line expressions and items\n     empty_item_single_line: bool, true, false,\n         \"Put empty-body functions and impls on a single line\";\n     struct_lit_single_line: bool, true, false,\n@@ -78,22 +78,22 @@ create_config! {\n     reorder_impl_items: bool, false, false, \"Reorder impl items\";\n \n     // Spaces around punctuation\n-    binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n-        \"Where to put a binary operator when a binary expression goes multiline.\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide, false,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     space_before_colon: bool, false, false, \"Leave a space before the colon\";\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";\n     spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n     spaces_within_parens_and_brackets: bool, false, false,\n         \"Put spaces within non-empty parentheses or brackets\";\n+    binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n+        \"Where to put a binary operator when a binary expression goes multiline.\";\n \n     // Misc.\n+    remove_blank_lines_at_start_or_end_of_block: bool, true, false,\n+        \"Remove blank lines at start or end of a block\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n                                              threshold.\";\n-    remove_blank_lines_at_start_or_end_of_block: bool, true, false,\n-        \"Remove blank lines at start or end of a block\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n         the same line with the pattern of arms\";\n     force_multiline_blocks: bool, false, false,\n@@ -102,10 +102,10 @@ create_config! {\n     brace_style: BraceStyle, BraceStyle::SameLineWhere, false, \"Brace style for items\";\n     control_brace_style: ControlBraceStyle, ControlBraceStyle::AlwaysSameLine, false,\n         \"Brace style for control flow constructs\";\n-    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n-        \"How to handle trailing commas for lists\";\n     trailing_semicolon: bool, true, false,\n         \"Add trailing semicolon after break, continue and return\";\n+    trailing_comma: SeparatorTactic, SeparatorTactic::Vertical, false,\n+        \"How to handle trailing commas for lists\";\n     match_block_trailing_comma: bool, false, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n     blank_lines_upper_bound: usize, 1, false,\n@@ -145,7 +145,7 @@ create_config! {\n     ignore: IgnoreList, IgnoreList::default(), false,\n         \"Skip formatting the specified files and directories.\";\n \n-    // Not user-facing.\n+    // Not user-facing\n     verbose: bool, false, false, \"Use verbose output\";\n     file_lines: FileLines, FileLines::all(), false,\n         \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\"}]}