{"sha": "184fb08037d0349b715d6926af7ec54595607151", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGZiMDgwMzdkMDM0OWI3MTVkNjkyNmFmN2VjNTQ1OTU2MDcxNTE=", "commit": {"author": {"name": "Sam Elliott", "email": "selliott@lowrisc.org", "date": "2019-08-02T14:39:43Z"}, "committer": {"name": "Sam Elliott", "email": "selliott@lowrisc.org", "date": "2019-08-02T14:39:43Z"}, "message": "rustbuild: RISC-V is no longer an experimental LLVM target\n\nThis commit moves RISC-V from the experimental LLVM targets to the\nregular LLVM targets. RISC-V was made non-experimental in\nhttps://reviews.llvm.org/rL366399\n\nI have also sorted the list of LLVM targets, and changed the code\naround setting llvm_exp_targets (and its default) to match the code\nsetting llvm_targets (and its default), ensuring future changes to\nthe defaults, as LLVM targets become stable, affect as few places as\npossible.", "tree": {"sha": "03126b50302e2ad330fb0ca208b099316e785482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03126b50302e2ad330fb0ca208b099316e785482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184fb08037d0349b715d6926af7ec54595607151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184fb08037d0349b715d6926af7ec54595607151", "html_url": "https://github.com/rust-lang/rust/commit/184fb08037d0349b715d6926af7ec54595607151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184fb08037d0349b715d6926af7ec54595607151/comments", "author": {"login": "lenary", "id": 14548, "node_id": "MDQ6VXNlcjE0NTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/14548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenary", "html_url": "https://github.com/lenary", "followers_url": "https://api.github.com/users/lenary/followers", "following_url": "https://api.github.com/users/lenary/following{/other_user}", "gists_url": "https://api.github.com/users/lenary/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenary/subscriptions", "organizations_url": "https://api.github.com/users/lenary/orgs", "repos_url": "https://api.github.com/users/lenary/repos", "events_url": "https://api.github.com/users/lenary/events{/privacy}", "received_events_url": "https://api.github.com/users/lenary/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lenary", "id": 14548, "node_id": "MDQ6VXNlcjE0NTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/14548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenary", "html_url": "https://github.com/lenary", "followers_url": "https://api.github.com/users/lenary/followers", "following_url": "https://api.github.com/users/lenary/following{/other_user}", "gists_url": "https://api.github.com/users/lenary/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenary/subscriptions", "organizations_url": "https://api.github.com/users/lenary/orgs", "repos_url": "https://api.github.com/users/lenary/repos", "events_url": "https://api.github.com/users/lenary/events{/privacy}", "received_events_url": "https://api.github.com/users/lenary/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5", "html_url": "https://github.com/rust-lang/rust/commit/fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "a1917031e4eb42fbc5a9b4dc263f61bd5c95f88f", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/184fb08037d0349b715d6926af7ec54595607151/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/184fb08037d0349b715d6926af7ec54595607151/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=184fb08037d0349b715d6926af7ec54595607151", "patch": "@@ -57,14 +57,14 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;MSP430;Sparc;NVPTX;Hexagon\"\n+#targets = \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;X86\"\n \n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them. By default the\n-# `WebAssembly` and `RISCV` targets are enabled when compiling LLVM from scratch.\n-#experimental-targets = \"WebAssembly;RISCV\"\n+# `WebAssembly` target is enabled when compiling LLVM from scratch.\n+#experimental-targets = \"WebAssembly\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "5a5f4ac72520444c44812996bf6a0a582f673665", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/184fb08037d0349b715d6926af7ec54595607151/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184fb08037d0349b715d6926af7ec54595607151/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=184fb08037d0349b715d6926af7ec54595607151", "patch": "@@ -75,7 +75,7 @@ pub struct Config {\n     pub llvm_link_shared: bool,\n     pub llvm_clang_cl: Option<String>,\n     pub llvm_targets: Option<String>,\n-    pub llvm_experimental_targets: String,\n+    pub llvm_experimental_targets: Option<String>,\n     pub llvm_link_jobs: Option<u32>,\n     pub llvm_version_suffix: Option<String>,\n     pub llvm_use_linker: Option<String>,\n@@ -524,8 +524,7 @@ impl Config {\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n             set(&mut config.llvm_link_shared, llvm.link_shared);\n             config.llvm_targets = llvm.targets.clone();\n-            config.llvm_experimental_targets = llvm.experimental_targets.clone()\n-                .unwrap_or_else(|| \"WebAssembly;RISCV\".to_string());\n+            config.llvm_experimental_targets = llvm.experimental_targets.clone();\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();"}, {"sha": "9405ae4b15535bde5ef384eb322f48718dba4d5f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/184fb08037d0349b715d6926af7ec54595607151/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184fb08037d0349b715d6926af7ec54595607151/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=184fb08037d0349b715d6926af7ec54595607151", "patch": "@@ -125,14 +125,17 @@ impl Step for Llvm {\n         } else {\n             match builder.config.llvm_targets {\n                 Some(ref s) => s,\n-                None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;MSP430;Sparc;NVPTX;Hexagon\",\n+                None => \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;X86\",\n             }\n         };\n \n         let llvm_exp_targets = if self.emscripten {\n             \"\"\n         } else {\n-            &builder.config.llvm_experimental_targets[..]\n+            match builder.config.llvm_experimental_targets {\n+                Some(ref s) => s,\n+                None => \"WebAssembly\",\n+            }\n         };\n \n         let assertions = if builder.config.llvm_assertions {\"ON\"} else {\"OFF\"};"}]}