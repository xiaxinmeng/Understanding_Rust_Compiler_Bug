{"sha": "0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGFhNzdkOTU4ZDkxYTZkMTMyOGI0MzhjYTRlMTU3NThmYmM2ZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T17:35:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T17:35:21Z"}, "message": "Auto merge of #6941 - ThibsG:suggMatchSingleBinding, r=llogiq\n\nFix bad suggestion for `match_single_binding` lint\n\nFix a bad suggestion that needs curly braces when the target `match` is the body of an arm.\n\nFixes #6572\n\nchangelog: none", "tree": {"sha": "22b9ffab8075bdd50d8c7baf62d16c362ced3208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b9ffab8075bdd50d8c7baf62d16c362ced3208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "html_url": "https://github.com/rust-lang/rust/commit/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478f2581b1383b24500dc9a3edaef7b247dd793c", "url": "https://api.github.com/repos/rust-lang/rust/commits/478f2581b1383b24500dc9a3edaef7b247dd793c", "html_url": "https://github.com/rust-lang/rust/commit/478f2581b1383b24500dc9a3edaef7b247dd793c"}, {"sha": "7d45d8a29a55aad636c00108854c15be134870d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d45d8a29a55aad636c00108854c15be134870d3", "html_url": "https://github.com/rust-lang/rust/commit/7d45d8a29a55aad636c00108854c15be134870d3"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "1a8ec9c6ec3a447abfe09302c06371e1939ac5be", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "patch": "@@ -1353,6 +1353,7 @@ fn find_bool_lit(ex: &ExprKind<'_>, desugared: bool) -> Option<bool> {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if in_macro(expr.span) || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n@@ -1427,7 +1428,18 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n                         indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n                         cbrace_start = format!(\"{{\\n{}\", indent);\n                     }\n-                };\n+                }\n+                // If the parent is already an arm, and the body is another match statement,\n+                // we need curly braces around suggestion\n+                let parent_node_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n+                if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+                    if let ExprKind::Match(..) = arm.body.kind {\n+                        cbrace_end = format!(\"\\n{}}}\", indent);\n+                        // Fix body indent due to the match\n+                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+                        cbrace_start = format!(\"{{\\n{}\", indent);\n+                    }\n+                }\n                 (\n                     expr.span,\n                     format!("}, {"sha": "e73a85b73d7c67b3a74882b04a1cc66d32c88848", "filename": "tests/ui/match_single_binding2.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.fixed?ref=0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_single_binding)]\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => {\n+                let (min, max) = iter.size_hint();\n+                (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            let (a, b) = get_tup();\n+            println!(\"a {:?} and b {:?}\", a, b);\n+        },\n+        None => println!(\"nothing\"),\n+    }\n+}"}, {"sha": "7362cb390e5e8ad44539d29ff6ebb3503fe7c72e", "filename": "tests/ui/match_single_binding2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.rs?ref=0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_single_binding)]\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    // Lint (additional curly braces needed, see #6572)\n+    struct AppendIter<I>\n+    where\n+        I: Iterator,\n+    {\n+        inner: Option<(I, <I as Iterator>::Item)>,\n+    }\n+\n+    #[allow(dead_code)]\n+    fn size_hint<I: Iterator>(iter: &AppendIter<I>) -> (usize, Option<usize>) {\n+        match &iter.inner {\n+            Some((iter, _item)) => match iter.size_hint() {\n+                (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+            },\n+            None => (0, Some(0)),\n+        }\n+    }\n+\n+    // Lint (no additional curly braces needed)\n+    let opt = Some((5, 2));\n+    let get_tup = || -> (i32, i32) { (1, 2) };\n+    match opt {\n+        #[rustfmt::skip]\n+        Some((first, _second)) => {\n+            match get_tup() {\n+                (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+            }\n+        },\n+        None => println!(\"nothing\"),\n+    }\n+}"}, {"sha": "bc18d191aa3f8effc55934d108ec1387faf4bd74", "filename": "tests/ui/match_single_binding2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bdaa77d958d91a6d1328b438ca4e15758fbc6ed/tests%2Fui%2Fmatch_single_binding2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.stderr?ref=0bdaa77d958d91a6d1328b438ca4e15758fbc6ed", "patch": "@@ -0,0 +1,34 @@\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding2.rs:18:36\n+   |\n+LL |               Some((iter, _item)) => match iter.size_hint() {\n+   |  ____________________________________^\n+LL | |                 (min, max) => (min.saturating_add(1), max.and_then(|max| max.checked_add(1))),\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::match-single-binding` implied by `-D warnings`\n+help: consider using `let` statement\n+   |\n+LL |             Some((iter, _item)) => {\n+LL |                 let (min, max) = iter.size_hint();\n+LL |                 (min.saturating_add(1), max.and_then(|max| max.checked_add(1)))\n+LL |             },\n+   |\n+\n+error: this match could be written as a `let` statement\n+  --> $DIR/match_single_binding2.rs:31:13\n+   |\n+LL | /             match get_tup() {\n+LL | |                 (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n+LL | |             }\n+   | |_____________^\n+   |\n+help: consider using `let` statement\n+   |\n+LL |             let (a, b) = get_tup();\n+LL |             println!(\"a {:?} and b {:?}\", a, b);\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}]}