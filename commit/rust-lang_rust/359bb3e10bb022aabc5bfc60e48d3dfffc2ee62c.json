{"sha": "359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWJiM2UxMGJiMDIyYWFiYzViZmM2MGU0OGQzZGZmZmMyZWU2MmM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-03T05:49:50Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:37:04Z"}, "message": "core: convert vec::{head,head_opt} to return references", "tree": {"sha": "9d07692401079d56e4ac81a34fd908f615b0e223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d07692401079d56e4ac81a34fd908f615b0e223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "html_url": "https://github.com/rust-lang/rust/commit/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431e756fd72df1c092e71f6e605e82385a9c6881", "url": "https://api.github.com/repos/rust-lang/rust/commits/431e756fd72df1c092e71f6e605e82385a9c6881", "html_url": "https://github.com/rust-lang/rust/commit/431e756fd72df1c092e71f6e605e82385a9c6881"}], "stats": {"total": 99, "additions": 68, "deletions": 31}, "files": [{"sha": "20aadd79d12efebf3d07245faa97178337fa92b3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -211,7 +211,16 @@ pub pure fn build_sized_opt<A>(size: Option<uint>,\n // Accessors\n \n /// Returns the first element of a vector\n-pub pure fn head<T:Copy>(v: &[const T]) -> T { v[0] }\n+pub pure fn head<T>(v: &r/[T]) -> &r/T {\n+    if v.len() == 0 { fail!(~\"last_unsafe: empty vector\") }\n+    &v[0]\n+}\n+\n+/// Returns `Some(x)` where `x` is the first element of the slice `v`,\n+/// or `None` if the vector is empty.\n+pub pure fn head_opt<T>(v: &r/[T]) -> Option<&r/T> {\n+    if v.len() == 0 { None } else { Some(&v[0]) }\n+}\n \n /// Returns a vector containing all but the first element of a slice\n pub pure fn tail<T:Copy>(v: &[const T]) -> ~[T] {\n@@ -1692,7 +1701,6 @@ impl<T> Container for &[const T] {\n }\n \n pub trait CopyableVector<T> {\n-    pure fn head(&self) -> T;\n     pure fn init(&self) -> ~[T];\n     pure fn last(&self) -> T;\n     pure fn slice(&self, start: uint, end: uint) -> ~[T];\n@@ -1701,10 +1709,6 @@ pub trait CopyableVector<T> {\n \n /// Extension methods for vectors\n impl<T:Copy> CopyableVector<T> for &[const T] {\n-    /// Returns the first element of a vector\n-    #[inline]\n-    pure fn head(&self) -> T { head(*self) }\n-\n     /// Returns all but the last elemnt of a vector\n     #[inline]\n     pure fn init(&self) -> ~[T] { init(*self) }\n@@ -1726,7 +1730,9 @@ impl<T:Copy> CopyableVector<T> for &[const T] {\n \n pub trait ImmutableVector<T> {\n     pure fn view(&self, start: uint, end: uint) -> &self/[T];\n-    pure fn foldr<U:Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U;\n+    pure fn head(&self) -> &self/T;\n+    pure fn head_opt(&self) -> Option<&self/T>;\n+    pure fn foldr<U: Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U;\n     pure fn map<U>(&self, f: fn(t: &T) -> U) -> ~[U];\n     pure fn mapi<U>(&self, f: fn(uint, t: &T) -> U) -> ~[U];\n     fn map_r<U>(&self, f: fn(x: &T) -> U) -> ~[U];\n@@ -1743,6 +1749,14 @@ impl<T> ImmutableVector<T> for &[T] {\n         slice(*self, start, end)\n     }\n \n+    /// Returns the first element of a vector, failing if the vector is empty.\n+    #[inline]\n+    pure fn head(&self) -> &self/T { head(*self) }\n+\n+    /// Returns the first element of a vector\n+    #[inline]\n+    pure fn head_opt(&self) -> Option<&self/T> { head_opt(*self) }\n+\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U:Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U {\n@@ -2570,8 +2584,28 @@ mod tests {\n \n     #[test]\n     fn test_head() {\n-        let a = ~[11, 12];\n-        assert (head(a) == 11);\n+        let mut a = ~[11];\n+        assert a.head() == &11;\n+        a = ~[11, 12];\n+        assert a.head() == &11;\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn test_head_empty() {\n+        let a: ~[int] = ~[];\n+        a.head();\n+    }\n+\n+    #[test]\n+    fn test_head_opt() {\n+        let mut a = ~[];\n+        assert a.head_opt() == None;\n+        a = ~[11];\n+        assert a.head_opt().unwrap() == &11;\n+        a = ~[11, 12];\n+        assert a.head_opt().unwrap() == &11;\n     }\n \n     #[test]"}, {"sha": "235ed6412a356d624057942affb6faeafa2c5e4b", "filename": "src/librust/rust.rc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -130,7 +130,7 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n                     UsgExec(commandline) => {\n                         let words = str::words(commandline);\n                         let (prog, args) = (words.head(), words.tail());\n-                        run::run_program(prog, args);\n+                        run::run_program(*prog, args);\n                     }\n                 }\n                 Valid\n@@ -186,7 +186,10 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n         Exec(commandline) => {\n             let words = str::words(commandline);\n             let (prog, prog_args) = (words.head(), words.tail());\n-            let exitstatus = run::run_program(prog, prog_args + args);\n+            let exitstatus = run::run_program(\n+                *prog,\n+                vec::append(vec::from_slice(prog_args), args)\n+            );\n             os::set_exit_status(exitstatus);\n             Valid\n         }\n@@ -221,11 +224,12 @@ fn usage() {\n }\n \n pub fn main() {\n-    let args = os::args().tail();\n+    let os_args = os::args();\n+    let args = os_args.tail();\n \n     if !args.is_empty() {\n         for commands.each |command| {\n-            if command.cmd == args.head() {\n+            if command.cmd == *args.head() {\n                 let result = do_command(command, args.tail());\n                 if result.is_valid() { return; }\n             }"}, {"sha": "58316110b64edbde92a68dfba33299e7623a509f", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -132,7 +132,7 @@ pub fn parse_config_(\n     match getopts::getopts(args, opts) {\n         result::Ok(matches) => {\n             if matches.free.len() == 1 {\n-                let input_crate = Path(vec::head(matches.free));\n+                let input_crate = Path(copy *matches.free.head());\n                 config_from_opts(&input_crate, &matches, program_output)\n             } else if matches.free.is_empty() {\n                 result::Err(~\"no crates specified\")"}, {"sha": "3a4cd9e1379f9c994e671eac573c3897d56eb21f", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -144,14 +144,14 @@ fn parse_desc(desc: ~str) -> Option<~str> {\n fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n     if !paras.is_empty() {\n-        let first_para = vec::head(paras);\n-        Some(str::replace(first_sentence_(first_para), ~\"\\n\", ~\" \"))\n+        let first_para = paras.head();\n+        Some(str::replace(first_sentence_(*first_para), ~\"\\n\", ~\" \"))\n     } else {\n         None\n     }\n }\n \n-fn first_sentence_(s: ~str) -> ~str {\n+fn first_sentence_(s: &str) -> ~str {\n     let mut dotcount = 0;\n     // The index of the character following a single dot. This allows\n     // Things like [0..1) to appear in the brief description\n@@ -169,16 +169,16 @@ fn first_sentence_(s: ~str) -> ~str {\n         }\n     };\n     match idx {\n-      Some(idx) if idx > 2u => {\n-        str::slice(s, 0u, idx - 1u)\n-      }\n-      _ => {\n-        if str::ends_with(s, ~\".\") {\n-            str::slice(s, 0u, str::len(s))\n-        } else {\n-            copy s\n+        Some(idx) if idx > 2u => {\n+            str::from_slice(str::view(s, 0, idx - 1))\n+        }\n+        _ => {\n+            if str::ends_with(s, ~\".\") {\n+                str::from_slice(s)\n+            } else {\n+                str::from_slice(s)\n+            }\n         }\n-      }\n     }\n }\n "}, {"sha": "5fafcf392bec62f77ee1e567bd2af8538dee665c", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -78,7 +78,7 @@ fn unindent(s: &str) -> ~str {\n     };\n \n     if !lines.is_empty() {\n-        let unindented = ~[str::trim(vec::head(lines))]\n+        let unindented = ~[lines.head().trim()]\n             + do vec::tail(lines).map |line| {\n             if str::is_whitespace(*line) {\n                 copy *line"}, {"sha": "29b58cd643115cd62d2f8f90d7464144faa2b229", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=359bb3e10bb022aabc5bfc60e48d3dfffc2ee62c", "patch": "@@ -10,7 +10,6 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-use core::vec::{head, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;\n@@ -33,8 +32,8 @@ pub fn main() {\n     let chars = enum_chars(a, j);\n     let ints = enum_uints(k, l);\n \n-    let ps = zip(chars, ints);\n+    let ps = vec::zip(chars, ints);\n \n-    assert (head(ps) == ('a', 1u));\n-    assert (last(ps) == (j as char, 10u));\n+    assert (ps.head() == &('a', 1u));\n+    assert (ps.last() == (j as char, 10u));\n }"}]}