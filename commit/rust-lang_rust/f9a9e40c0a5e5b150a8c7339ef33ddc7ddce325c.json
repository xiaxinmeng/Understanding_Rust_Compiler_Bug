{"sha": "f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "node_id": "C_kwDOAAsO6NoAKGY5YTllNDBjMGE1ZTViMTUwYThjNzMzOWVmMzNkZGM3ZGRjZTMyNWM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-04T08:02:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-06-04T08:02:11Z"}, "message": "Update builtin attribute list", "tree": {"sha": "58c66ba541a46451369d9dd01473f734e0e1a99f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c66ba541a46451369d9dd01473f734e0e1a99f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "html_url": "https://github.com/rust-lang/rust/commit/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f8799bf1f120c8ae7d0b87dee85b5d85d1ff59", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f8799bf1f120c8ae7d0b87dee85b5d85d1ff59", "html_url": "https://github.com/rust-lang/rust/commit/48f8799bf1f120c8ae7d0b87dee85b5d85d1ff59"}], "stats": {"total": 177, "additions": 115, "deletions": 62}, "files": [{"sha": "3050cf764a4c5c2e87e9d549901c78d5ee915317", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "patch": "@@ -1,6 +1,7 @@\n [workspace]\n members = [\"xtask/\", \"lib/*\", \"crates/*\"]\n exclude = [\"crates/proc-macro-test/imp\"]\n+resolver = \"2\"\n \n [workspace.package]\n rust-version = \"1.66\""}, {"sha": "b232cb12bc871a7f609a8f355ce39fbbae98f1d0", "filename": "crates/hir-def/src/attr/builtin.rs", "status": "modified", "additions": 104, "deletions": 62, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Fhir-def%2Fsrc%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Fhir-def%2Fsrc%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr%2Fbuiltin.rs?ref=f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "patch": "@@ -2,7 +2,7 @@\n //!\n //! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.\n //!\n-//! It was last synchronized with upstream commit c1a2db3372a4d6896744919284f3287650a38ab7.\n+//! It was last synchronized with upstream commit e29821ff85a2a3000d226f99f62f89464028d5d6.\n //!\n //! The macros were adjusted to only expand to the attribute name, since that is all we need to do\n //! name resolution, and `BUILTIN_ATTRIBUTES` is almost entirely unchanged from the original, to\n@@ -108,7 +108,7 @@ macro_rules! experimental {\n     };\n }\n \n-/// \"Inert\" built-in attributes that have a special meaning to rustc or rustdoc.\n+/// Attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n@@ -123,7 +123,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing),\n     ungated!(\n         should_panic, Normal,\n-        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"), FutureWarnFollowing,\n+        template!(Word, List: r#\"expected = \"reason\"\"#, NameValueStr: \"reason\"), FutureWarnFollowing,\n     ),\n     // FIXME(Centril): This can be used on stable but shouldn't.\n     ungated!(reexport_test_harness_main, CrateLevel, template!(NameValueStr: \"name\"), ErrorFollowing),\n@@ -142,20 +142,24 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Lints:\n     ungated!(\n-        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n-        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     gated!(\n         expect, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk,\n         lint_reasons, experimental!(expect)\n     ),\n     ungated!(\n-        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n-        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\"), FutureWarnFollowing),\n     gated!(\n@@ -181,16 +185,17 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ABI, linking, symbols, and FFI\n     ungated!(\n         link, Normal,\n-        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\"\"#),\n+        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\"\"#),\n         DuplicatesOk,\n     ),\n     ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_link, Normal, template!(Word), WarnFollowing),\n-    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk, @only_local: true),\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing, @only_local: true),\n     ungated!(used, Normal, template!(Word, List: \"compiler|linker\"), WarnFollowing, @only_local: true),\n+    ungated!(link_ordinal, Normal, template!(List: \"ordinal\"), ErrorPreceding),\n \n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n@@ -205,6 +210,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Entry point:\n+    gated!(unix_sigpipe, Normal, template!(Word, NameValueStr: \"inherit|sig_ign|sig_dfl\"), ErrorFollowing, experimental!(unix_sigpipe)),\n     ungated!(start, Normal, template!(Word), WarnFollowing),\n     ungated!(no_start, CrateLevel, template!(Word), WarnFollowing),\n     ungated!(no_main, CrateLevel, template!(Word), WarnFollowing),\n@@ -226,11 +232,15 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(inline, Normal, template!(Word, List: \"always|never\"), FutureWarnFollowing, @only_local: true),\n     ungated!(cold, Normal, template!(Word), WarnFollowing, @only_local: true),\n     ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing),\n-    ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        target_feature, Normal, template!(List: r#\"enable = \"name\"\"#),\n+        DuplicatesOk, @only_local: true,\n+    ),\n     ungated!(track_caller, Normal, template!(Word), WarnFollowing),\n+    ungated!(instruction_set, Normal, template!(List: \"set\"), ErrorPreceding),\n     gated!(\n         no_sanitize, Normal,\n-        template!(List: \"address, memory, thread\"), DuplicatesOk,\n+        template!(List: \"address, kcfi, memory, thread\"), DuplicatesOk,\n         experimental!(no_sanitize)\n     ),\n     gated!(no_coverage, Normal, template!(Word), WarnFollowing, experimental!(no_coverage)),\n@@ -239,25 +249,23 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), DuplicatesOk\n     ),\n \n+    // Debugging\n+    ungated!(\n+        debugger_visualizer, Normal,\n+        template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#), DuplicatesOk\n+    ),\n+\n     // ==========================================================================\n     // Unstable attributes:\n     // ==========================================================================\n \n-    // RFC #3191: #[debugger_visualizer] support\n-    gated!(\n-        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#),\n-        DuplicatesOk, experimental!(debugger_visualizer)\n-    ),\n-\n     // Linking:\n-    gated!(naked, Normal, template!(Word), WarnFollowing, @only_local: true, naked_functions, experimental!(naked)),\n     gated!(\n-        link_ordinal, Normal, template!(List: \"ordinal\"), ErrorPreceding, raw_dylib,\n-        experimental!(link_ordinal)\n+        naked, Normal, template!(Word), WarnFollowing, @only_local: true,\n+        naked_functions, experimental!(naked)\n     ),\n \n     // Plugins:\n-    // XXX Modified for use in rust-analyzer\n     // BuiltinAttribute {\n     //     name: sym::plugin,\n     //     only_local: false,\n@@ -274,10 +282,6 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     //         cfg_fn!(plugin)\n     //     ),\n     // },\n-    BuiltinAttribute {\n-        name: \"plugin\",\n-        template: template!(List: \"name\"),\n-    },\n \n     // Testing:\n     gated!(\n@@ -286,7 +290,8 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // RFC #1268\n     gated!(\n-        marker, Normal, template!(Word), WarnFollowing, marker_trait_attr, experimental!(marker)\n+        marker, Normal, template!(Word), WarnFollowing, @only_local: true,\n+        marker_trait_attr, experimental!(marker)\n     ),\n     gated!(\n         thread_local, Normal, template!(Word), WarnFollowing,\n@@ -298,21 +303,12 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         optimize, Normal, template!(List: \"size|speed\"), ErrorPreceding, optimize_attribute,\n         experimental!(optimize),\n     ),\n-    // RFC 2867\n-    gated!(\n-        instruction_set, Normal, template!(List: \"set\"), ErrorPreceding,\n-        isa_attribute, experimental!(instruction_set)\n-    ),\n \n     gated!(\n         ffi_returns_twice, Normal, template!(Word), WarnFollowing, experimental!(ffi_returns_twice)\n     ),\n     gated!(ffi_pure, Normal, template!(Word), WarnFollowing, experimental!(ffi_pure)),\n     gated!(ffi_const, Normal, template!(Word), WarnFollowing, experimental!(ffi_const)),\n-    gated!(\n-        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"), DuplicatesOk,\n-        experimental!(register_attr),\n-    ),\n     gated!(\n         register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"), DuplicatesOk,\n         experimental!(register_tool),\n@@ -325,7 +321,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // RFC 2632\n     gated!(\n         const_trait, Normal, template!(Word), WarnFollowing, const_trait_impl,\n-        \"`const` is a temporary placeholder for marking a trait that is suitable for `const` \\\n+        \"`const_trait` is a temporary placeholder for marking a trait that is suitable for `const` \\\n         `impls` and all default bodies as `const`, which may be removed or renamed in the \\\n         future.\"\n     ),\n@@ -335,22 +331,47 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         experimental!(deprecated_safe),\n     ),\n \n+    // `#[collapse_debuginfo]`\n+    gated!(\n+        collapse_debuginfo, Normal, template!(Word), WarnFollowing,\n+        experimental!(collapse_debuginfo)\n+    ),\n+\n+    // RFC 2397\n+    gated!(do_not_recommend, Normal, template!(Word), WarnFollowing, experimental!(do_not_recommend)),\n+\n+    // `#[cfi_encoding = \"\"]`\n+    gated!(\n+        cfi_encoding, Normal, template!(NameValueStr: \"encoding\"), ErrorPreceding,\n+        experimental!(cfi_encoding)\n+    ),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // ==========================================================================\n \n-    ungated!(feature, CrateLevel, template!(List: \"name1, name2, ...\"), DuplicatesOk),\n+    ungated!(\n+        feature, CrateLevel,\n+        template!(List: \"name1, name2, ...\"), DuplicatesOk, @only_local: true,\n+    ),\n     // DuplicatesOk since it has its own validation\n     ungated!(\n-        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk,\n+        stable, Normal,\n+        template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n         unstable, Normal,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk,\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n-    ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n-    ungated!(rustc_safe_intrinsic, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        rustc_const_stable, Normal,\n+        template!(List: r#\"feature = \"name\"\"#), DuplicatesOk, @only_local: true,\n+    ),\n+    ungated!(\n+        rustc_default_body_unstable, Normal,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk\n+    ),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\",\n@@ -364,6 +385,10 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n+    ungated!(rustc_safe_intrinsic, Normal, template!(Word), DuplicatesOk),\n+    rustc_attr!(rustc_allowed_through_unstable_modules, Normal, template!(Word), WarnFollowing,\n+    \"rustc_allowed_through_unstable_modules special cases accidental stabilizations of stable items \\\n+    through unstable paths\"),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:\n@@ -381,10 +406,9 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    gated!(\n-        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n-        experimental!(alloc_error_handler)\n-    ),\n+    rustc_attr!(rustc_reallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_deallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_zeroed, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     gated!(\n         default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),\n@@ -465,6 +489,12 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Used by the `rustc::untranslatable_diagnostic` and `rustc::diagnostic_outside_of_impl` lints\n     // to assist in changes to diagnostic APIs.\n     rustc_attr!(rustc_lint_diagnostics, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n+    // Used by the `rustc::bad_opt_access` lint to identify `DebuggingOptions` and `CodegenOptions`\n+    // types (as well as any others in future).\n+    rustc_attr!(rustc_lint_opt_ty, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n+    // Used by the `rustc::bad_opt_access` lint on fields\n+    // types (as well as any others in future).\n+    rustc_attr!(rustc_lint_opt_deny_field_access, Normal, template!(List: \"message\"), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:\n@@ -508,18 +538,25 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"language items are subject to change\",\n     ),\n     rustc_attr!(\n-        rustc_pass_by_value, Normal,\n-        template!(Word), ErrorFollowing,\n+        rustc_pass_by_value, Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     rustc_attr!(\n         rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing, @only_local: true,\n         \"#![rustc_coherence_is_core] allows inherent methods on builtin types, only intended to be used in `core`.\"\n     ),\n+    rustc_attr!(\n+        rustc_coinductive, AttributeType::Normal, template!(Word), WarnFollowing, @only_local: true,\n+        \"#![rustc_coinductive] changes a trait to be coinductive, allowing cycles in the trait solver.\"\n+    ),\n     rustc_attr!(\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n     ),\n+    rustc_attr!(\n+        rustc_deny_explicit_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: false,\n+        \"#[rustc_deny_explicit_impl] enforces that a trait can have no user-provided impls\"\n+    ),\n     rustc_attr!(\n         rustc_has_incoherent_inherent_impls, AttributeType::Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\\n@@ -531,24 +568,20 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         and it is only intended to be used in `alloc`.\"\n     ),\n \n-    // modified for r-a\n-    // BuiltinAttribute {\n-    //     name: sym::rustc_diagnostic_item,\n-    //     // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`.\n-    //     only_local: false,\n-    //     type_: Normal,\n-    //     template: template!(NameValueStr: \"name\"),\n-    //     duplicates: ErrorFollowing,\n-    //     gate: Gated(\n-    //         Stability::Unstable,\n-    //         sym::rustc_attrs,\n-    //         \"diagnostic items compiler internal support for linting\",\n-    //         cfg_fn!(rustc_attrs),\n-    //     ),\n-    // },\n     BuiltinAttribute {\n+        // name: sym::rustc_diagnostic_item,\n         name: \"rustc_diagnostic_item\",\n+        // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`.\n+        // only_local: false,\n+        // type_: Normal,\n         template: template!(NameValueStr: \"name\"),\n+        // duplicates: ErrorFollowing,\n+        // gate: Gated(\n+            // Stability::Unstable,\n+            // sym::rustc_attrs,\n+            // \"diagnostic items compiler internal support for linting\",\n+            // cfg_fn!(rustc_attrs),\n+        // ),\n     },\n     gated!(\n         // Used in resolve:\n@@ -572,7 +605,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n          for reserving for `for<T> From<!> for T` impl\"\n     ),\n     rustc_attr!(\n-        rustc_test_marker, Normal, template!(Word), WarnFollowing,\n+        rustc_test_marker, Normal, template!(NameValueStr: \"name\"), WarnFollowing,\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n     ),\n     rustc_attr!(\n@@ -598,11 +631,16 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         definition of a trait, it's currently in experimental form and should be changed before \\\n         being exposed outside of the std\"\n     ),\n+    rustc_attr!(\n+        rustc_doc_primitive, Normal, template!(NameValueStr: \"primitive name\"), ErrorFollowing,\n+        r#\"`rustc_doc_primitive` is a rustc internal attribute\"#,\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n+    rustc_attr!(TEST, rustc_effective_visibility, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),\n@@ -643,6 +681,10 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_def_path, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_mir, Normal, template!(List: \"arg1, arg2, ...\"), DuplicatesOk),\n+    gated!(\n+        custom_mir, Normal, template!(List: r#\"dialect = \"...\", phase = \"...\"\"#),\n+        ErrorFollowing, \"the `#[custom_mir]` attribute is just used for the Rust test suite\",\n+    ),\n     rustc_attr!(TEST, rustc_dump_program_clauses, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_dump_env_program_clauses, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_object_lifetime_default, Normal, template!(Word), WarnFollowing),"}, {"sha": "12bc638929d667a5610c292be26690632d6bf686", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "patch": "@@ -798,6 +798,7 @@ impl GlobalState {\n         // so we run them on a latency sensitive thread.\n         self.task_pool.handle.spawn(stdx::thread::ThreadIntent::LatencySensitive, move || {\n             let _p = profile::span(\"publish_diagnostics\");\n+            let _ctx = stdx::panic_context::enter(\"publish_diagnostics\".to_owned());\n             let diagnostics = subscriptions\n                 .into_iter()\n                 .filter_map(|file_id| {"}, {"sha": "c79b4e966d67e357577d7fa056030cd2beea3c66", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=f9a9e40c0a5e5b150a8c7339ef33ddc7ddce325c", "patch": "@@ -29,6 +29,7 @@\n //!     future: pin\n //!     generator: pin\n //!     hash:\n+//!     include:\n //!     index: sized\n //!     infallible:\n //!     iterator: option\n@@ -1274,6 +1275,14 @@ mod macros {\n         }\n     }\n     // endregion:derive\n+\n+    // region:include\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! include {\n+        ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n+    }\n+    // endregion:include\n }\n \n // region:non_zero"}]}