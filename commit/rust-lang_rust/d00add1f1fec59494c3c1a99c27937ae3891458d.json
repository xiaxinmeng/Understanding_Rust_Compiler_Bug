{"sha": "d00add1f1fec59494c3c1a99c27937ae3891458d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMGFkZDFmMWZlYzU5NDk0YzNjMWE5OWMyNzkzN2FlMzg5MTQ1OGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T14:57:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T16:28:02Z"}, "message": "Introduce assists utils", "tree": {"sha": "06c2bf44b0f9967f5e5f4cdddcec743d896478e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c2bf44b0f9967f5e5f4cdddcec743d896478e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d00add1f1fec59494c3c1a99c27937ae3891458d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d00add1f1fec59494c3c1a99c27937ae3891458d", "html_url": "https://github.com/rust-lang/rust/commit/d00add1f1fec59494c3c1a99c27937ae3891458d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d00add1f1fec59494c3c1a99c27937ae3891458d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "561b4b11ff1d87ea1ff2477dcba6ae1f396573a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/561b4b11ff1d87ea1ff2477dcba6ae1f396573a3", "html_url": "https://github.com/rust-lang/rust/commit/561b4b11ff1d87ea1ff2477dcba6ae1f396573a3"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "239807e2431de32bd2a67c24a5321f4913398c0d", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=d00add1f1fec59494c3c1a99c27937ae3891458d", "patch": "@@ -1,7 +1,6 @@\n-use super::invert_if::invert_boolean_expression;\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{utils::invert_boolean_expression, Assist, AssistCtx, AssistId};\n \n // Assist: apply_demorgan\n //"}, {"sha": "22f88884f4a17774671c516e251f8f7c031ddf84", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=d00add1f1fec59494c3c1a99c27937ae3891458d", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n-    handlers::invert_if::invert_boolean_expression,\n+    utils::invert_boolean_expression,\n     AssistId,\n };\n "}, {"sha": "a594e7e0c38ac049ef30d1d50a8490f61c213a6b", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=d00add1f1fec59494c3c1a99c27937ae3891458d", "patch": "@@ -1,7 +1,7 @@\n-use ra_syntax::ast::{self, make, AstNode};\n+use ra_syntax::ast::{self, AstNode};\n use ra_syntax::T;\n \n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{utils::invert_boolean_expression, Assist, AssistCtx, AssistId};\n \n // Assist: invert_if\n //\n@@ -51,27 +51,6 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     None\n }\n \n-pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n-    if let Some(expr) = invert_special_case(&expr) {\n-        return expr;\n-    }\n-    make::expr_prefix(T![!], expr)\n-}\n-\n-pub(crate) fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n-    match expr {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n-            ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n-            _ => None,\n-        },\n-        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n-        // FIXME:\n-        // ast::Expr::Literal(true | false )\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "eca6dec4b0f854c27c08fcd4c3d6c49332c20561", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d00add1f1fec59494c3c1a99c27937ae3891458d", "patch": "@@ -9,6 +9,7 @@ mod assist_ctx;\n mod marks;\n #[cfg(test)]\n mod doc_tests;\n+mod utils;\n pub mod ast_transform;\n \n use std::cmp::Ordering;"}, {"sha": "0d57222956f02c7e84d0007b857e26b78c6bc449", "filename": "crates/ra_assists/src/utils.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00add1f1fec59494c3c1a99c27937ae3891458d/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=d00add1f1fec59494c3c1a99c27937ae3891458d", "patch": "@@ -0,0 +1,27 @@\n+//! Assorted functions shared by several assists.\n+\n+use ra_syntax::{\n+    ast::{self, make},\n+    T,\n+};\n+\n+pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n+    if let Some(expr) = invert_special_case(&expr) {\n+        return expr;\n+    }\n+    make::expr_prefix(T![!], expr)\n+}\n+\n+fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n+    match expr {\n+        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n+            ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n+            ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n+            _ => None,\n+        },\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n+        // FIXME:\n+        // ast::Expr::Literal(true | false )\n+        _ => None,\n+    }\n+}"}]}