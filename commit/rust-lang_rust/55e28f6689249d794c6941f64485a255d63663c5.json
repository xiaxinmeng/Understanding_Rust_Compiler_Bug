{"sha": "55e28f6689249d794c6941f64485a255d63663c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZTI4ZjY2ODkyNDlkNzk0YzY5NDFmNjQ0ODVhMjU1ZDYzNjYzYzU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-09T23:06:41Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-10T00:44:46Z"}, "message": "Remove the tt macro demo.", "tree": {"sha": "a7cb78d8a59f54f80a5af3920c967e0e2ed149ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cb78d8a59f54f80a5af3920c967e0e2ed149ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e28f6689249d794c6941f64485a255d63663c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e28f6689249d794c6941f64485a255d63663c5", "html_url": "https://github.com/rust-lang/rust/commit/55e28f6689249d794c6941f64485a255d63663c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e28f6689249d794c6941f64485a255d63663c5/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54741b9427541df4508a3a7423102a677ba3dce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/54741b9427541df4508a3a7423102a677ba3dce9", "html_url": "https://github.com/rust-lang/rust/commit/54741b9427541df4508a3a7423102a677ba3dce9"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "261ffdb6651e982f2b63984cca7051547511ab2c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/55e28f6689249d794c6941f64485a255d63663c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e28f6689249d794c6941f64485a255d63663c5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=55e28f6689249d794c6941f64485a255d63663c5", "patch": "@@ -935,14 +935,6 @@ class parser {\n                 |p| p.parse_expr());\n             hi = self.span.hi;\n             ex = expr_vec(es, mutbl);\n-        } else if self.token == token::POUND\n-            && self.look_ahead(1u) == token::POUND {\n-            self.bump(); self.bump();\n-            //let macname = self.parse_path_without_tps();\n-            //let macbody = self.parse_token_tree();\n-            //ret pexpr(self.mk_mac_expr(lo, self.span.hi,\n-            //                           mac_invoc_tt(macname, macbody)));\n-            ret pexpr(self.parse_tt_mac_demo());\n         } else if self.token == token::POUND\n             && self.look_ahead(1u) == token::LT {\n             self.bump(); self.bump();\n@@ -1259,39 +1251,6 @@ class parser {\n                            |p| p.parse_matcher(name_idx)).node;\n     }\n \n-    /* temporary */\n-    fn parse_tt_mac_demo() -> @expr {\n-        import ext::tt::earley_parser::{parse,success,failure};\n-        let ms = self.parse_matchers();\n-        self.quote_depth += 1u;\n-        let tt_rhs= self.parse_token_tree();\n-        self.quote_depth -= 1u;\n-        let tt_readme = self.parse_token_tree();\n-        alt (tt_readme, tt_rhs) {\n-          (tt_delim(tts), tt_delim(tts_rhs)) {\n-            let rdr = lexer::new_tt_reader(self.reader.span_diag(),\n-                                           self.reader.interner(), none, tts)\n-                as reader;\n-\n-            let matches = alt parse(self.sess, self.cfg, rdr, ms) {\n-                  success(m) { m }\n-                  failure(sp, msg) { self.span_fatal(sp,msg); }\n-                };\n-\n-            let transcriber = ext::tt::transcribe::new_tt_reader\n-                (self.reader.span_diag(), self.reader.interner(),\n-                 some(matches), tts_rhs);\n-            let res_parser = parser(self.sess, self.cfg,\n-                                    transcriber as reader,\n-                                    SOURCE_FILE);\n-\n-            ret res_parser.parse_expr();\n-          }\n-          _ { fail; }\n-        }\n-\n-    }\n-\n     fn parse_matcher(name_idx: @mut uint) -> matcher {\n         let lo = self.span.lo;\n "}]}