{"sha": "e36cb0d5c1176f8dcb3538e545c86631d5619f00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNmNiMGQ1YzExNzZmOGRjYjM1MzhlNTQ1Yzg2NjMxZDU2MTlmMDA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-24T00:48:46Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-25T08:18:44Z"}, "message": "syntax: parse inner attributes on impls.\n\nFixes #3614.", "tree": {"sha": "7f849e7136a3cf416b5d58cf6d2210543fbdf3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f849e7136a3cf416b5d58cf6d2210543fbdf3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36cb0d5c1176f8dcb3538e545c86631d5619f00", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36cb0d5c1176f8dcb3538e545c86631d5619f00", "html_url": "https://github.com/rust-lang/rust/commit/e36cb0d5c1176f8dcb3538e545c86631d5619f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36cb0d5c1176f8dcb3538e545c86631d5619f00/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb279aa02a7ff2ed069791f60a5159d73c8ed993", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb279aa02a7ff2ed069791f60a5159d73c8ed993", "html_url": "https://github.com/rust-lang/rust/commit/fb279aa02a7ff2ed069791f60a5159d73c8ed993"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "29ccb235f07137c29b458c77080ad6c25b798e20", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e36cb0d5c1176f8dcb3538e545c86631d5619f00", "patch": "@@ -3871,9 +3871,14 @@ impl Parser {\n          Some(inner_attrs))\n     }\n \n-    // parse a method in a trait impl\n-    fn parse_method(&self) -> @method {\n-        let attrs = self.parse_outer_attributes();\n+    // parse a method in a trait impl, starting with `attrs` attributes.\n+    fn parse_method(&self, already_parsed_attrs: Option<~[Attribute]>) -> @method {\n+        let next_attrs = self.parse_outer_attributes();\n+        let attrs = match already_parsed_attrs {\n+            Some(mut a) => { a.push_all_move(next_attrs); a }\n+            None => next_attrs\n+        };\n+\n         let lo = self.span.lo;\n \n         let visa = self.parse_visibility();\n@@ -3966,16 +3971,21 @@ impl Parser {\n         };\n \n         let mut meths = ~[];\n-        if self.eat(&token::SEMI) {\n+        let inner_attrs = if self.eat(&token::SEMI) {\n             self.obsolete(*self.last_span, ObsoleteEmptyImpl);\n+            None\n         } else {\n             self.expect(&token::LBRACE);\n+            let (inner_attrs, next) = self.parse_inner_attrs_and_next();\n+            let mut method_attrs = Some(next);\n             while !self.eat(&token::RBRACE) {\n-                meths.push(self.parse_method());\n+                meths.push(self.parse_method(method_attrs));\n+                method_attrs = None;\n             }\n-        }\n+            Some(inner_attrs)\n+        };\n \n-        (ident, item_impl(generics, opt_trait, ty, meths), None)\n+        (ident, item_impl(generics, opt_trait, ty, meths), inner_attrs)\n     }\n \n     // parse a::B<~str,int>"}, {"sha": "c41460485da67cb3b58ffbec43255626a55e6e05", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e36cb0d5c1176f8dcb3538e545c86631d5619f00", "patch": "@@ -596,6 +596,7 @@ pub fn print_item(s: @ps, item: &ast::item) {\n \n         space(s.s);\n         bopen(s);\n+        print_inner_attributes(s, item.attrs);\n         for meth in methods.iter() {\n            print_method(s, *meth);\n         }"}, {"sha": "69ae9d34385c19855ce6859d1fe1739c47fb20ae", "filename": "src/test/run-pass/inner-attrs-on-impl.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36cb0d5c1176f8dcb3538e545c86631d5619f00/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs?ref=e36cb0d5c1176f8dcb3538e545c86631d5619f00", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[cfg(cfg_that_surely_doesnt_exist)];\n+\n+    fn method(&self) -> bool { false }\n+}\n+\n+impl Foo {\n+    #[cfg(not(cfg_that_surely_doesnt_exist))];\n+\n+    // check that we don't eat attributes too eagerly.\n+    #[cfg(cfg_that_surely_doesnt_exist)]\n+    fn method(&self) -> bool { false }\n+\n+    fn method(&self) -> bool { true }\n+}\n+\n+\n+pub fn main() {\n+    assert!(Foo.method());\n+}"}]}