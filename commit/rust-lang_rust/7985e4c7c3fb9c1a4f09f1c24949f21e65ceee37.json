{"sha": "7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODVlNGM3YzNmYjljMWE0ZjA5ZjFjMjQ5NDlmMjFlNjVjZWVlMzc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-28T09:28:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-28T09:28:23Z"}, "message": "Rollup merge of #87524 - FabianWolff:issue-87495, r=Aaron1011\n\nFix ICE in `diagnostic_hir_wf_check`\n\nFixes #87495. The [documentation for `ObligationCauseCode::WellFormed`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/traits/enum.ObligationCauseCode.html#variant.WellFormed) says that\n\n> it is always correct [...] to specify `WellFormed(None)`\n\ninstead of `WellFormed(Some(...))`, which seems to have caused the issue here, as `diagnostic_hir_wf_check` does not expect to be called with an associated constant and will ICE:\n\nhttps://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler/rustc_typeck/src/hir_wf_check.rs#L131-L134\n\nTherefore, I have changed `check_associated_item()` to pass a `WellFormed(None)` for associated constants.\n\nr? ``@Aaron1011``", "tree": {"sha": "bd3d35943e13d2cfcf54fdbf688dc2c9cb3f4aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3d35943e13d2cfcf54fdbf688dc2c9cb3f4aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhASM4CRBK7hj4Ov3rIwAA6okIAB7d10MXxJKK+C7cLSdUx6oG\ntZFT2Ox6PmPfD9cfssr3B6hzWQILmcsKBWU3zGGB/FhIj3gsLxaUn+ctiKVAHj1+\nXyPDDJ10Ng1zGyM0xa4JQGkFeH9JgVx0LvWRW+a/fetAgSKkngSl+L2wxo8Q2wlJ\nqtLkYZ9MraAHxXxVgf0UTSKMhmLLu650ppoLXf3Wp05RTRwgsqlc22o6TtWOscAo\nnlbydAHDHfszEMQYvTr8rDWi1PQticWhX/SzZHQhHSdk+85FmmBIgH5k1JIa9MdR\n3EvEfv9K2bRHL4a378O0aoSpgzVthe7eoxR7hVuOrcYI8JuMJvoDZgdSTOlbq7g=\n=Jx+2\n-----END PGP SIGNATURE-----\n", "payload": "tree bd3d35943e13d2cfcf54fdbf688dc2c9cb3f4aad\nparent 4ae529688a5166f7a7cc5366b95599893e232c91\nparent dbd0fd2c2a6c0c5ea649dfb4d2a1b3d09e725ca0\nauthor Yuki Okushi <jtitor@2k36.org> 1627464503 +0900\ncommitter GitHub <noreply@github.com> 1627464503 +0900\n\nRollup merge of #87524 - FabianWolff:issue-87495, r=Aaron1011\n\nFix ICE in `diagnostic_hir_wf_check`\n\nFixes #87495. The [documentation for `ObligationCauseCode::WellFormed`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/traits/enum.ObligationCauseCode.html#variant.WellFormed) says that\n\n> it is always correct [...] to specify `WellFormed(None)`\n\ninstead of `WellFormed(Some(...))`, which seems to have caused the issue here, as `diagnostic_hir_wf_check` does not expect to be called with an associated constant and will ICE:\n\nhttps://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler/rustc_typeck/src/hir_wf_check.rs#L131-L134\n\nTherefore, I have changed `check_associated_item()` to pass a `WellFormed(None)` for associated constants.\n\nr? ``@Aaron1011``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "html_url": "https://github.com/rust-lang/rust/commit/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae529688a5166f7a7cc5366b95599893e232c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae529688a5166f7a7cc5366b95599893e232c91", "html_url": "https://github.com/rust-lang/rust/commit/4ae529688a5166f7a7cc5366b95599893e232c91"}, {"sha": "dbd0fd2c2a6c0c5ea649dfb4d2a1b3d09e725ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd0fd2c2a6c0c5ea649dfb4d2a1b3d09e725ca0", "html_url": "https://github.com/rust-lang/rust/commit/dbd0fd2c2a6c0c5ea649dfb4d2a1b3d09e725ca0"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "c134af44992de8e96a6655e633f26c9168f77235", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "patch": "@@ -240,8 +240,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n-                // If this obligation was generated as a result of well-formed checking, see if we\n-                // can get a better error message by performing HIR-based well formed checking.\n+                // If this obligation was generated as a result of well-formedness checking, see if we\n+                // can get a better error message by performing HIR-based well-formedness checking.\n                 if let ObligationCauseCode::WellFormed(Some(wf_loc)) =\n                     root_obligation.cause.code.peel_derives()\n                 {"}, {"sha": "b7ede0e4bf25175ea966b2816a29da71401bd5b8", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "patch": "@@ -38,20 +38,20 @@ fn diagnostic_hir_wf_check<'tcx>(\n     // given the type `Option<MyStruct<u8>>`, we will check\n     // `Option<MyStruct<u8>>`, `MyStruct<u8>`, and `u8`.\n     // For each type, we perform a well-formed check, and see if we get\n-    // an erorr that matches our expected predicate. We keep save\n+    // an error that matches our expected predicate. We save\n     // the `ObligationCause` corresponding to the *innermost* type,\n     // which is the most specific type that we can point to.\n     // In general, the different components of an `hir::Ty` may have\n-    // completely differentr spans due to macro invocations. Pointing\n+    // completely different spans due to macro invocations. Pointing\n     // to the most accurate part of the type can be the difference\n     // between a useless span (e.g. the macro invocation site)\n-    // and a useful span (e.g. a user-provided type passed in to the macro).\n+    // and a useful span (e.g. a user-provided type passed into the macro).\n     //\n     // This approach is quite inefficient - we redo a lot of work done\n     // by the normal WF checker. However, this code is run at most once\n     // per reported error - it will have no impact when compilation succeeds,\n-    // and should only have an impact if a very large number of errors are\n-    // displaydd to the user.\n+    // and should only have an impact if a very large number of errors is\n+    // displayed to the user.\n     struct HirWfCheck<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         predicate: ty::Predicate<'tcx>,\n@@ -126,10 +126,12 @@ fn diagnostic_hir_wf_check<'tcx>(\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n                 hir::ImplItemKind::TyAlias(ty) => Some(ty),\n+                hir::ImplItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },\n             hir::Node::TraitItem(item) => match item.kind {\n                 hir::TraitItemKind::Type(_, ty) => ty,\n+                hir::TraitItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {"}, {"sha": "5aab7431134bab94564098761cc928e5215e1495", "filename": "src/test/ui/wf/issue-87495.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/src%2Ftest%2Fui%2Fwf%2Fissue-87495.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/src%2Ftest%2Fui%2Fwf%2Fissue-87495.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-87495.rs?ref=7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "patch": "@@ -0,0 +1,8 @@\n+// Regression test for the ICE described in #87495.\n+\n+trait T {\n+    const CONST: (bool, dyn T);\n+    //~^ ERROR: the trait `T` cannot be made into an object [E0038]\n+}\n+\n+fn main() {}"}, {"sha": "010200b5ded1f40faf3355bf3b6e09b834c152f9", "filename": "src/test/ui/wf/issue-87495.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr?ref=7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "patch": "@@ -0,0 +1,18 @@\n+error[E0038]: the trait `T` cannot be made into an object\n+  --> $DIR/issue-87495.rs:4:25\n+   |\n+LL |     const CONST: (bool, dyn T);\n+   |                         ^^^^^ `T` cannot be made into an object\n+   |\n+   = help: consider moving `CONST` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-87495.rs:4:11\n+   |\n+LL | trait T {\n+   |       - this trait cannot be made into an object...\n+LL |     const CONST: (bool, dyn T);\n+   |           ^^^^^ ...because it contains this associated `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}