{"sha": "1facbb8578e2ae10d180418e6f89fae5fa960850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWNiYjg1NzhlMmFlMTBkMTgwNDE4ZTZmODlmYWU1ZmE5NjA4NTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-20T19:18:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T19:18:52Z"}, "message": "Rollup merge of #69305 - estebank:consider-lt, r=Dylan-DPC\n\nTweak binding lifetime suggestion text\n\nWe already have a structured suggestion, but the wording made it seem like that wasn't the case.\n\nFix #65286. r? @varkor", "tree": {"sha": "c9fb1611415653117521703a99ae2556139b974b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9fb1611415653117521703a99ae2556139b974b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1facbb8578e2ae10d180418e6f89fae5fa960850", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTtucCRBK7hj4Ov3rIwAAdHIIABwFvnAZjdZnF/9X1fd5RWxZ\nSCxZktHwFXwX4RFBS5Ekgvl+gFx6yk9KZTvunjZYmiz68XcArAAEidC0Bo1jCifg\n/OzU1HiXVIxGy0RhxCp002GqrK3xksOQc9gvieAHbPOM5WJoJmfN4Os35cPvP4/q\nkHOgTUEKnfmfpnKIxHmzs/JcjvzXEehv0NYOxaBmbLgABITozuExFMfxW7G0dgZg\ncrDd4tKTfx2e2pjyREeuS8MxyIl6g2OSGrH0Md6cgEKJ+OfP2vZmD27Y6UF5R9Rj\n/7M+jvz1aVNmXC29GxCqbTDLH6iKz7TIcoenWaXfP3rZxFOfDY/NhLHiv3pgnj8=\n=i86v\n-----END PGP SIGNATURE-----\n", "payload": "tree c9fb1611415653117521703a99ae2556139b974b\nparent d237e0fc6c57b189e71fcbb66a332c7912da9eac\nparent c816430f9901b93aa7895a789685f012d7043697\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582226332 +0100\ncommitter GitHub <noreply@github.com> 1582226332 +0100\n\nRollup merge of #69305 - estebank:consider-lt, r=Dylan-DPC\n\nTweak binding lifetime suggestion text\n\nWe already have a structured suggestion, but the wording made it seem like that wasn't the case.\n\nFix #65286. r? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1facbb8578e2ae10d180418e6f89fae5fa960850", "html_url": "https://github.com/rust-lang/rust/commit/1facbb8578e2ae10d180418e6f89fae5fa960850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1facbb8578e2ae10d180418e6f89fae5fa960850/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d237e0fc6c57b189e71fcbb66a332c7912da9eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d237e0fc6c57b189e71fcbb66a332c7912da9eac", "html_url": "https://github.com/rust-lang/rust/commit/d237e0fc6c57b189e71fcbb66a332c7912da9eac"}, {"sha": "c816430f9901b93aa7895a789685f012d7043697", "url": "https://api.github.com/repos/rust-lang/rust/commits/c816430f9901b93aa7895a789685f012d7043697", "html_url": "https://github.com/rust-lang/rust/commit/c816430f9901b93aa7895a789685f012d7043697"}], "stats": {"total": 123, "additions": 62, "deletions": 61}, "files": [{"sha": "1ed890962da586087deec3fb226759206bc7ec71", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -1781,28 +1781,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n         ) {\n-            let consider = format!(\n-                \"consider adding an explicit lifetime bound {}\",\n-                if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n-                    format!(\" `{}` to `{}`...\", sub, bound_kind)\n-                } else {\n-                    format!(\"`{}: {}`...\", bound_kind, sub)\n-                },\n-            );\n+            let msg = \"consider adding an explicit lifetime bound\";\n             if let Some((sp, has_lifetimes, is_impl_trait)) = type_param_span {\n                 let suggestion = if is_impl_trait {\n                     format!(\"{} + {}\", bound_kind, sub)\n                 } else {\n                     let tail = if has_lifetimes { \" + \" } else { \"\" };\n                     format!(\"{}: {}{}\", bound_kind, sub, tail)\n                 };\n-                err.span_suggestion_short(\n+                err.span_suggestion(\n                     sp,\n-                    &consider,\n+                    &format!(\"{}...\", msg),\n                     suggestion,\n                     Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n+                let consider = format!(\n+                    \"{} {}...\",\n+                    msg,\n+                    if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n+                        format!(\" `{}` to `{}`\", sub, bound_kind)\n+                    } else {\n+                        format!(\"`{}: {}`\", bound_kind, sub)\n+                    },\n+                );\n                 err.help(&consider);\n             }\n         }"}, {"sha": "999a5839ba6902cd736b248c4b29ed188f00e0df", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -4,7 +4,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | impl <T: Sync> Foo for T { }\n    |       --       ^^^\n    |       |\n-   |       help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       help: consider adding an explicit lifetime bound...: `T: 'static +`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/builtin-superkinds-self-type.rs:10:16"}, {"sha": "fbc4e8abc42fd642693a709434743b76e0b193c6", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:5\n    |\n LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound `U: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "cffa5ee8f146131a0aeaca2fca487807f465842e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -67,7 +67,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^\n    |                                 |\n-   |                                 help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:51"}, {"sha": "34f0f7f1d731c5eb80e4c0099bf5cb90b49fa63b", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -4,7 +4,7 @@ error[E0310]: the parameter type `T` may not live long enough\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |        -           ^^^^^^^^^^^^^^^^^^\n    |        |\n-   |        help: consider adding an explicit lifetime bound `T: 'static`...\n+   |        help: consider adding an explicit lifetime bound...: `T: 'static`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/type_parameters_captured.rs:7:20"}, {"sha": "e60c461743c8fbe3605b8aa868d8d3c4db48499f", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:19:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL | trait X<K>: Sized {\n-   |         - help: consider adding an explicit lifetime bound `K: 'a`...\n+   |         - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n    |                   ^^^^^^^^^^^^^^^^\n    |\n@@ -45,7 +45,7 @@ error[E0309]: the parameter type `L` may not live long enough\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n    |                -     ^^^^^^^^^^^^^^^^\n    |                |\n-   |                help: consider adding an explicit lifetime bound `L: 'a`...\n+   |                help: consider adding an explicit lifetime bound...: `L: 'a`\n    |\n note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n@@ -57,7 +57,7 @@ error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL | impl<K> Nested<K> {\n-   |      - help: consider adding an explicit lifetime bound `K: 'a`...\n+   |      - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n    |                                 ^^^^^^^^^^^^^^^^\n    |\n@@ -71,7 +71,7 @@ error[E0309]: the parameter type `M` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound `M: 'a`...\n+   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound...: `M: 'a +`\n    |\n note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36"}, {"sha": "14727000b2c2404992dec9d9662744695508cdce", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |     ^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^\n@@ -47,7 +47,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n@@ -62,7 +62,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n@@ -77,7 +77,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n@@ -92,7 +92,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |           ^^^"}, {"sha": "ed9a604e717dd617199cc127bef35345bab87833", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n    |\n LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound `A: 'static`...\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n    |\n LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound `A: 'static`...\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -30,7 +30,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n    |\n LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound `A: 'b`...\n+   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^\n    |\n@@ -44,7 +44,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n    |\n LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound `A: 'b`...\n+   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "3b1a89d9ced77b1e5be4698699d45188bceacd5c", "filename": "src/test/ui/regions/regions-close-param-into-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:6:5\n    |\n LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n    |\n LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n    |\n LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -47,7 +47,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n    |\n LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^"}, {"sha": "297fcb088d2bf0114f283e96ba6819f98ceb034a", "filename": "src/test/ui/regions/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:18:18\n    |\n LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n    |\n LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n    |\n LL |   enum RefDouble<'a, 'b, T> {\n-   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |   ^                      - help: consider adding an explicit lifetime bound...: `T: 'b`\n    |  _|\n    | |\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n@@ -52,7 +52,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "2f1a4cea8e9ac6f672f90d8343590724ed4d1865", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n-   |             -- help: consider adding an explicit lifetime bound `T: 'x`...\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n LL | {\n LL |     wf::<&'x T>();\n    |          ^^^^^"}, {"sha": "a5a0ff52fac126c8012671a9693ab099346546a8", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:33:5\n    |\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n-   |            - help: consider adding an explicit lifetime bound `A: 'a`...\n+   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n-   |               -- help: consider adding an explicit lifetime bound `A: 'a`...\n+   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "c3cfc5a4d97c82953f97e0eb558d87244cb4d09b", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/dont-infer-static.rs:8:5\n    |\n LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound `U: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |"}, {"sha": "297fcb088d2bf0114f283e96ba6819f98ceb034a", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:18:18\n    |\n LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>)\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:23:25\n    |\n LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:1\n    |\n LL |   enum RefDouble<'a, 'b, T> {\n-   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |   ^                      - help: consider adding an explicit lifetime bound...: `T: 'b`\n    |  _|\n    | |\n LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n@@ -52,7 +52,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:36:23\n    |\n LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "f6658891fa622182e4080ff376fd856224adfe9f", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:13:5\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:21:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "589ee1a474ad6e2f5bf4e834c6ceeac4d54989d8", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -3,7 +3,7 @@\n use std::fmt::Debug;\n \n fn foo(d: impl Debug + 'static) {\n-//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+//~^ HELP consider adding an explicit lifetime bound...\n     bar(d);\n //~^ ERROR the parameter type `impl Debug` may not live long enough\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds"}, {"sha": "9a87129fbf28ad2ff402e081d9a4f312f05f088b", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -3,7 +3,7 @@\n use std::fmt::Debug;\n \n fn foo(d: impl Debug) {\n-//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+//~^ HELP consider adding an explicit lifetime bound...\n     bar(d);\n //~^ ERROR the parameter type `impl Debug` may not live long enough\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds"}, {"sha": "b6e6c0bbf32df95ec3753bb5ce9c59665a860924", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -1,6 +1,9 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n+LL | fn foo(d: impl Debug) {\n+   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n+LL |\n LL |     bar(d);\n    |     ^^^\n    |\n@@ -9,10 +12,6 @@ note: ...so that the type `impl Debug` will meet its required lifetime bounds\n    |\n LL |     bar(d);\n    |     ^^^\n-help: consider adding an explicit lifetime bound  `'static` to `impl Debug`...\n-   |\n-LL | fn foo(d: impl Debug + 'static) {\n-   |           ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "22e2391f8380bc89c900c92bb427c97dbd4057b5", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -25,7 +25,7 @@ LL | type WrongGeneric<T> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/generic_type_does_not_live_long_enough.rs:9:1"}, {"sha": "9942c80effe4b25744674217935ed7e65bf0a022", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-impl-associated-type-region.rs:10:5\n    |\n LL | impl<'a, T> Foo<'a> for T {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n    |     ^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "7dc8f5a96611b9d43f84b0e4d5aa4fb1b42b8e9b", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:13:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n    |     ^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:18:5\n    |\n LL | struct Bar<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "32c3198d55be4b17c1a1d5d7460399debb4361b0", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-obj-type-static.rs:14:5\n    |\n LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "52786fb3bca96e1034449427b0a47f30ef6446fd", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1facbb8578e2ae10d180418e6f89fae5fa960850/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=1facbb8578e2ae10d180418e6f89fae5fa960850", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:5\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -16,7 +16,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}]}