{"sha": "aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMTIzNGUwMmIxMTY2YzU3ZGQyYTNjZDI3ZmQwYjBiM2M2Y2JhN2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T11:07:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-07T11:14:33Z"}, "message": "Generalize invert_if to just always work", "tree": {"sha": "f3f9d08b204ddef33054c06e7eff26dfcf1bb0b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f9d08b204ddef33054c06e7eff26dfcf1bb0b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "html_url": "https://github.com/rust-lang/rust/commit/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aba5a756a19a54d5c4edd51d8055db36182688b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aba5a756a19a54d5c4edd51d8055db36182688b", "html_url": "https://github.com/rust-lang/rust/commit/5aba5a756a19a54d5c4edd51d8055db36182688b"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "ba08a8223b95ff36cd4da25a5223c7a1a356982c", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "patch": "@@ -31,12 +31,14 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx) -> Option<Assist> {\n     if !cursor_in_range {\n         return None;\n     }\n+\n     let lhs = expr.lhs()?;\n     let lhs_range = lhs.syntax().text_range();\n+    let not_lhs = invert_boolean_expression(lhs);\n+\n     let rhs = expr.rhs()?;\n     let rhs_range = rhs.syntax().text_range();\n-    let not_lhs = invert_boolean_expression(&lhs)?;\n-    let not_rhs = invert_boolean_expression(&rhs)?;\n+    let not_rhs = invert_boolean_expression(rhs);\n \n     ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", |edit| {\n         edit.target(op_range);\n@@ -77,12 +79,12 @@ mod tests {\n     }\n \n     #[test]\n-    fn demorgan_doesnt_apply_with_cursor_not_on_op() {\n-        check_assist_not_applicable(apply_demorgan, \"fn f() { <|> !x || !x }\")\n+    fn demorgan_general_case() {\n+        check_assist(apply_demorgan, \"fn f() { x ||<|> x }\", \"fn f() { !(!x &&<|> !x) }\")\n     }\n \n     #[test]\n-    fn demorgan_doesnt_apply_when_operands_arent_negated_already() {\n-        check_assist_not_applicable(apply_demorgan, \"fn f() { x ||<|> x }\")\n+    fn demorgan_doesnt_apply_with_cursor_not_on_op() {\n+        check_assist_not_applicable(apply_demorgan, \"fn f() { <|> !x || !x }\")\n     }\n }"}, {"sha": "983392f21ee3039143894576bc744cee698719eb", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::ast::{self, make, AstNode};\n use ra_syntax::T;\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -35,8 +35,8 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     let then_node = expr.then_branch()?.syntax().clone();\n \n     if let ast::ElseBranch::Block(else_block) = expr.else_branch()? {\n-        let flip_cond = invert_boolean_expression(&cond)?;\n         let cond_range = cond.syntax().text_range();\n+        let flip_cond = invert_boolean_expression(cond);\n         let else_node = else_block.syntax();\n         let else_range = else_node.text_range();\n         let then_range = then_node.text_range();\n@@ -51,16 +51,23 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     None\n }\n \n-pub(crate) fn invert_boolean_expression(expr: &ast::Expr) -> Option<ast::Expr> {\n+pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n+    if let Some(expr) = invert_special_case(&expr) {\n+        return expr;\n+    }\n+    make::expr_prefix(T![!], expr)\n+}\n+\n+pub(crate) fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n         ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n             ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n+            ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n             _ => None,\n         },\n-        ast::Expr::PrefixExpr(pe) => match pe.op_kind()? {\n-            ast::PrefixOp::Not => pe.expr(),\n-            _ => None,\n-        },\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n+        // FIXME:\n+        // ast::Expr::Literal(true | false )\n         _ => None,\n     }\n }\n@@ -90,12 +97,16 @@ mod tests {\n     }\n \n     #[test]\n-    fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n-        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond { 3 * 2 } else { 1 } }\")\n+    fn invert_if_general_case() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\",\n+            \"fn f() { i<|>f !cond { 1 } else { 3 * 2 } }\",\n+        )\n     }\n \n     #[test]\n-    fn invert_if_doesnt_apply_without_negated() {\n-        check_assist_not_applicable(invert_if, \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\")\n+    fn invert_if_doesnt_apply_with_cursor_not_on_if() {\n+        check_assist_not_applicable(invert_if, \"fn f() { if !<|>cond { 3 * 2 } else { 1 } }\")\n     }\n }"}, {"sha": "982a7bcdc3ecabea354bfd46db93632c396424d9", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=aa1234e02b1166c57dd2a3cd27fd0b0b3c6cba7e", "patch": "@@ -62,6 +62,10 @@ pub fn expr_return() -> ast::Expr {\n pub fn expr_match(expr: ast::Expr, match_arm_list: ast::MatchArmList) -> ast::Expr {\n     expr_from_text(&format!(\"match {} {}\", expr.syntax(), match_arm_list.syntax()))\n }\n+pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n+    let token = token(op);\n+    expr_from_text(&format!(\"{}{}\", token, expr.syntax()))\n+}\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }\n@@ -203,7 +207,7 @@ pub mod tokens {\n     use once_cell::sync::Lazy;\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n-        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2)\\n;\"));\n+        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2, !true)\\n;\"));\n \n     pub fn comma() -> SyntaxToken {\n         SOURCE_FILE"}]}