{"sha": "c4aaff65f0cac8fe4375423f36d544440e47878b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWFmZjY1ZjBjYWM4ZmU0Mzc1NDIzZjM2ZDU0NDQ0MGU0Nzg3OGI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-27T11:52:44Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rust-analysis to use Tarball", "tree": {"sha": "ddcf3282ab8342dbfba6e43cdc703381778e4bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddcf3282ab8342dbfba6e43cdc703381778e4bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4aaff65f0cac8fe4375423f36d544440e47878b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjfUACgkQPgar6Auq\n8ZywJRAAnWX8DhoIfPqY1bPcbEocI/1OGYdEFPivrJIRPPOmAXjA1qbn76SvYJqm\ncVgvtyxRBaGIm2ereCdtl33roGB/t2y6C9xqudyt/EQh5ntt+j3N5GOufzpozS2x\nLkyPayGBQUOmQmONlCc4+/EZoNKgpkSLz/Xqta7ODHVoafWxkxT3kFCqAaIxRMtJ\nkHvndIBJg+8KubfO6GM1xUQZPywiBlKvIge9gQ7TdJzr2ypn/bN+6cptaUmwlivH\njTF516bDbzZmYlk4KsWea9rT9ZgaB4dFtWf5rrZ8TAcOAoGednVTysb8T15C5FEv\nPbHorAJpf73LhPp1IyrY1Y318SoRnxupz1rAY+kiYsJ7/AVQQh3VQS7IX2MTXa8y\nofzYSSl1vQHFaBfnrRNxmbF0U+0eELKPv3fqme+SK0ly9jXkaUwLGyJWiaiymOHl\npbPlLxNyErAX6RmXqMV7A9zlDbmUIjxb1BS5ntnEcb/hUXwm6yl8x2UZHmN8i1Lc\nYrfsaI1P58wNucqs0Z56xBbN+UAt9vkUr4Qsc0SEbZnSVkq5JYFihss5dV7KD437\nHN7kK4ZZFNs/W9F3PRWD7lFrG05G4zuACKtiWLgtUmOOJoGyDyhdrTEa+zLCnhin\nM1cuNOlAfnHOdFjx+qINf1XRfjMUmnQNiIAgshlKRYyXCHC5E6I=\n=j6Xi\n-----END PGP SIGNATURE-----", "payload": "tree ddcf3282ab8342dbfba6e43cdc703381778e4bf5\nparent c0cadc9eb72e6147647bd1b7995851e371167f24\nauthor Pietro Albini <pietro@pietroalbini.org> 1606477964 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rust-analysis to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4aaff65f0cac8fe4375423f36d544440e47878b", "html_url": "https://github.com/rust-lang/rust/commit/c4aaff65f0cac8fe4375423f36d544440e47878b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4aaff65f0cac8fe4375423f36d544440e47878b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0cadc9eb72e6147647bd1b7995851e371167f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0cadc9eb72e6147647bd1b7995851e371167f24", "html_url": "https://github.com/rust-lang/rust/commit/c0cadc9eb72e6147647bd1b7995851e371167f24"}], "stats": {"total": 48, "additions": 12, "deletions": 36}, "files": [{"sha": "e342c0ddf639bf07b3f19ee812240d268726035f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c4aaff65f0cac8fe4375423f36d544440e47878b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4aaff65f0cac8fe4375423f36d544440e47878b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c4aaff65f0cac8fe4375423f36d544440e47878b", "patch": "@@ -664,7 +664,7 @@ pub struct Analysis {\n }\n \n impl Step for Analysis {\n-    type Output = PathBuf;\n+    type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -687,52 +687,26 @@ impl Step for Analysis {\n     }\n \n     /// Creates a tarball of save-analysis metadata, if available.\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n-        let name = pkgname(builder, \"rust-analysis\");\n-\n         if compiler.host != builder.config.build {\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n+            return None;\n         }\n \n         builder.ensure(compile::Std { compiler, target });\n-\n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n-\n         let src = builder\n             .stage_out(compiler, Mode::Std)\n             .join(target.triple)\n             .join(builder.cargo_dir())\n-            .join(\"deps\");\n-\n-        let image_src = src.join(\"save-analysis\");\n-        let dst = image.join(\"lib/rustlib\").join(target.triple).join(\"analysis\");\n-        t!(fs::create_dir_all(&dst));\n-        builder.info(&format!(\"image_src: {:?}, dst: {:?}\", image_src, dst));\n-        builder.cp_r(&image_src, &dst);\n-\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=save-analysis-saved.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n-            .arg(format!(\"--component-name=rust-analysis-{}\", target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+            .join(\"deps\")\n+            .join(\"save-analysis\");\n \n-        builder.info(\"Dist analysis\");\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n+        let mut tarball = Tarball::new(builder, \"rust-analysis\", &target.triple);\n+        tarball.include_target_in_component_name(true);\n+        tarball.add_dir(src, format!(\"lib/rustlib/{}/analysis\", target.triple));\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1652,7 +1626,9 @@ impl Step for Extended {\n         tarballs.extend(miri_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n         tarballs.extend(llvm_tools_installer);\n-        tarballs.push(analysis_installer);\n+        if let Some(analysis_installer) = analysis_installer {\n+            tarballs.push(analysis_installer);\n+        }\n         tarballs.push(std_installer.expect(\"missing std\"));\n         if let Some(docs_installer) = docs_installer {\n             tarballs.push(docs_installer);"}]}