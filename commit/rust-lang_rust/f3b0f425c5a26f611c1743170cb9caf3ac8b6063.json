{"sha": "f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjBmNDI1YzVhMjZmNjExYzE3NDMxNzBjYjljYWYzYWM4YjYwNjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-07T12:54:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T08:37:16Z"}, "message": "Don't deduplicate vtables between functions", "tree": {"sha": "b5cfd656309fe9c10a59f387cb2b20c4200397e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cfd656309fe9c10a59f387cb2b20c4200397e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "html_url": "https://github.com/rust-lang/rust/commit/f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f7e71c1dd201c11ac85151d5918cb519a7a4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f7e71c1dd201c11ac85151d5918cb519a7a4f8", "html_url": "https://github.com/rust-lang/rust/commit/b6f7e71c1dd201c11ac85151d5918cb519a7a4f8"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "1bd303b2db7ee401c539b238811d0201064fd6be", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -18,9 +18,9 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n     let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n-    let name = tcx.symbol_name(instance).name.to_string();\n+    let symbol_name = tcx.symbol_name(instance);\n     let sig = get_function_sig(tcx, cx.module.isa().triple(), instance);\n-    let func_id = cx.module.declare_function(&name, Linkage::Local, &sig).unwrap();\n+    let func_id = cx.module.declare_function(symbol_name.name, Linkage::Local, &sig).unwrap();\n \n     cx.cached_context.clear();\n \n@@ -46,8 +46,10 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n         cx,\n         tcx,\n         pointer_type,\n+        vtables: FxHashMap::default(),\n \n         instance,\n+        symbol_name,\n         mir,\n         fn_abi: Some(FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n \n@@ -151,7 +153,7 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n             debug_context.define_function(\n                 instance,\n                 func_id,\n-                &name,\n+                symbol_name.name,\n                 isa,\n                 context,\n                 &source_info_set,"}, {"sha": "64618dcf3309c20689cadaf8fa6380aac5e039ea", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n@@ -230,8 +231,10 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx> {\n     pub(crate) cx: &'clif mut crate::CodegenCx<'m, 'tcx>,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) pointer_type: Type, // Cached from module\n+    pub(crate) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n \n     pub(crate) instance: Instance<'tcx>,\n+    pub(crate) symbol_name: SymbolName<'tcx>,\n     pub(crate) mir: &'tcx Body<'tcx>,\n     pub(crate) fn_abi: Option<FnAbi<'tcx, Ty<'tcx>>>,\n "}, {"sha": "7187bc785e46d3af7d045b078d6e85fa912d548a", "filename": "src/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -92,8 +92,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n \n     let inline_asm_index = fx.inline_asm_index;\n     fx.inline_asm_index += 1;\n-    let asm_name =\n-        format!(\"{}__inline_asm_{}\", fx.tcx.symbol_name(fx.instance).name, inline_asm_index);\n+    let asm_name = format!(\"{}__inline_asm_{}\", fx.symbol_name, inline_asm_index);\n \n     let generated_asm = generate_asm_wrapper(\n         &asm_name,"}, {"sha": "b79c8c7806beac893e8c633e92de383535b6995f", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -125,7 +125,6 @@ struct CodegenCx<'m, 'tcx: 'm> {\n     global_asm: String,\n     constants_cx: ConstantCx,\n     cached_context: Context,\n-    vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n     debug_context: Option<DebugContext<'tcx>>,\n     unwind_context: UnwindContext<'tcx>,\n }\n@@ -150,7 +149,6 @@ impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n             global_asm: String::new(),\n             constants_cx: ConstantCx::default(),\n             cached_context: Context::new(),\n-            vtables: FxHashMap::default(),\n             debug_context,\n             unwind_context,\n         }"}, {"sha": "4e52fb161211c7b3f760d0dc14b699228d9e97cb", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -21,8 +21,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n         fx.add_comment(puts, \"puts\");\n     }\n \n-    let symbol_name = fx.tcx.symbol_name(fx.instance);\n-    let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg);\n+    let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, fx.symbol_name, msg);\n     let msg_ptr = fx.anonymous_str(\"trap\", &real_msg);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }"}, {"sha": "60bc53024a7e3ff02504e450a30ae152ac7b590c", "filename": "src/vtable.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b0f425c5a26f611c1743170cb9caf3ac8b6063/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=f3b0f425c5a26f611c1743170cb9caf3ac8b6063", "patch": "@@ -72,11 +72,11 @@ pub(crate) fn get_vtable<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n-    let data_id = if let Some(data_id) = fx.cx.vtables.get(&(layout.ty, trait_ref)) {\n+    let data_id = if let Some(data_id) = fx.vtables.get(&(layout.ty, trait_ref)) {\n         *data_id\n     } else {\n         let data_id = build_vtable(fx, layout, trait_ref);\n-        fx.cx.vtables.insert((layout.ty, trait_ref), data_id);\n+        fx.vtables.insert((layout.ty, trait_ref), data_id);\n         data_id\n     };\n \n@@ -139,27 +139,9 @@ fn build_vtable<'tcx>(\n \n     data_ctx.set_align(fx.tcx.data_layout.pointer_align.pref.bytes());\n \n-    let data_id = fx\n-        .cx\n-        .module\n-        .declare_data(\n-            &format!(\n-                \"__vtable.{}.for.{:?}.{}\",\n-                trait_ref\n-                    .as_ref()\n-                    .map(|trait_ref| format!(\"{:?}\", trait_ref.skip_binder()).into())\n-                    .unwrap_or(std::borrow::Cow::Borrowed(\"???\")),\n-                layout.ty,\n-                fx.cx.vtables.len(),\n-            ),\n-            Linkage::Local,\n-            false,\n-            false,\n-        )\n-        .unwrap();\n-\n-    // FIXME don't duplicate definitions in lazy jit mode\n-    let _ = fx.cx.module.define_data(data_id, &data_ctx);\n+    let data_id = fx.cx.module.declare_anonymous_data(false, false).unwrap();\n+\n+    fx.cx.module.define_data(data_id, &data_ctx).unwrap();\n \n     data_id\n }"}]}