{"sha": "227bc0b6d478564c45f49cb47dac963d9c37a528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyN2JjMGI2ZDQ3ODU2NGM0NWY0OWNiNDdkYWM5NjNkOWMzN2E1Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-08T10:39:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-08T10:39:16Z"}, "message": "add try_conv_with_to_vec", "tree": {"sha": "413a8bdd3690dc27c570b85d0e50c97d860c6bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413a8bdd3690dc27c570b85d0e50c97d860c6bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227bc0b6d478564c45f49cb47dac963d9c37a528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227bc0b6d478564c45f49cb47dac963d9c37a528", "html_url": "https://github.com/rust-lang/rust/commit/227bc0b6d478564c45f49cb47dac963d9c37a528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227bc0b6d478564c45f49cb47dac963d9c37a528/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "html_url": "https://github.com/rust-lang/rust/commit/5ce2b4819ec37faa6b7ac1afe006ae03865ad544"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "fc01b1c0e485dd6eaa8bad15c41e71b014c5f9be", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/227bc0b6d478564c45f49cb47dac963d9c37a528/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227bc0b6d478564c45f49cb47dac963d9c37a528/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=227bc0b6d478564c45f49cb47dac963d9c37a528", "patch": "@@ -384,27 +384,32 @@ impl TryConvWith for &NavigationTarget {\n     }\n }\n \n-pub fn to_location_link(\n-    target: &RangeInfo<NavigationTarget>,\n-    world: &WorldSnapshot,\n-    // line index for original range file\n-    line_index: &LineIndex,\n-) -> Result<LocationLink> {\n-    let target_uri = target.info.file_id().try_conv_with(world)?;\n-    let tgt_line_index = world.analysis().file_line_index(target.info.file_id());\n-\n-    let target_range = target.info.full_range().conv_with(&tgt_line_index);\n-\n-    let target_selection_range =\n-        target.info.focus_range().map(|it| it.conv_with(&tgt_line_index)).unwrap_or(target_range);\n-\n-    let res = LocationLink {\n-        origin_selection_range: Some(target.range.conv_with(line_index)),\n-        target_uri,\n-        target_range,\n-        target_selection_range,\n-    };\n-    Ok(res)\n+impl TryConvWith for (FileId, RangeInfo<NavigationTarget>) {\n+    type Ctx = WorldSnapshot;\n+    type Output = LocationLink;\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<LocationLink> {\n+        let (src_file_id, target) = self;\n+\n+        let target_uri = target.info.file_id().try_conv_with(world)?;\n+        let src_line_index = world.analysis().file_line_index(src_file_id);\n+        let tgt_line_index = world.analysis().file_line_index(target.info.file_id());\n+\n+        let target_range = target.info.full_range().conv_with(&tgt_line_index);\n+\n+        let target_selection_range = target\n+            .info\n+            .focus_range()\n+            .map(|it| it.conv_with(&tgt_line_index))\n+            .unwrap_or(target_range);\n+\n+        let res = LocationLink {\n+            origin_selection_range: Some(target.range.conv_with(&src_line_index)),\n+            target_uri,\n+            target_range,\n+            target_selection_range,\n+        };\n+        Ok(res)\n+    }\n }\n \n pub fn to_location(\n@@ -452,3 +457,23 @@ where\n         self.iter.next().map(|item| item.conv_with(self.ctx))\n     }\n }\n+\n+pub trait TryConvWithToVec<'a>: Sized + 'a {\n+    type Ctx;\n+    type Output;\n+\n+    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>>;\n+}\n+\n+impl<'a, I> TryConvWithToVec<'a> for I\n+where\n+    I: Iterator + 'a,\n+    I::Item: TryConvWith,\n+{\n+    type Ctx = <I::Item as TryConvWith>::Ctx;\n+    type Output = <I::Item as TryConvWith>::Output;\n+\n+    fn try_conv_with_to_vec(self, ctx: &'a Self::Ctx) -> Result<Vec<Self::Output>> {\n+        self.map(|it| it.try_conv_with(ctx)).collect()\n+    }\n+}"}, {"sha": "8f07f502772cbbd0680e43d59b9ab57b3f3d826a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/227bc0b6d478564c45f49cb47dac963d9c37a528/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227bc0b6d478564c45f49cb47dac963d9c37a528/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=227bc0b6d478564c45f49cb47dac963d9c37a528", "patch": "@@ -21,7 +21,7 @@ use url_serde::Ser;\n \n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n-    conv::{to_location, to_location_link, Conv, ConvWith, MapConvWith, TryConvWith},\n+    conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith, TryConvWithToVec},\n     req::{self, Decoration},\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -263,7 +263,6 @@ pub fn handle_goto_definition(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n     let nav_info = match world.analysis().goto_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -272,9 +271,8 @@ pub fn handle_goto_definition(\n     let res = nav_info\n         .info\n         .into_iter()\n-        .map(|nav| RangeInfo::new(nav_range, nav))\n-        .map(|nav| to_location_link(&nav, &world, &line_index))\n-        .collect::<Result<Vec<_>>>()?;\n+        .map(|nav| (position.file_id, RangeInfo::new(nav_range, nav)))\n+        .try_conv_with_to_vec(&world)?;\n     Ok(Some(res.into()))\n }\n \n@@ -283,7 +281,6 @@ pub fn handle_goto_implementation(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoImplementationResponse>> {\n     let position = params.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n     let nav_info = match world.analysis().goto_implementation(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -292,9 +289,8 @@ pub fn handle_goto_implementation(\n     let res = nav_info\n         .info\n         .into_iter()\n-        .map(|nav| RangeInfo::new(nav_range, nav))\n-        .map(|nav| to_location_link(&nav, &world, &line_index))\n-        .collect::<Result<Vec<_>>>()?;\n+        .map(|nav| (position.file_id, RangeInfo::new(nav_range, nav)))\n+        .try_conv_with_to_vec(&world)?;\n     Ok(Some(res.into()))\n }\n \n@@ -303,7 +299,6 @@ pub fn handle_goto_type_definition(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoTypeDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n     let nav_info = match world.analysis().goto_type_definition(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -312,9 +307,8 @@ pub fn handle_goto_type_definition(\n     let res = nav_info\n         .info\n         .into_iter()\n-        .map(|nav| RangeInfo::new(nav_range, nav))\n-        .map(|nav| to_location_link(&nav, &world, &line_index))\n-        .collect::<Result<Vec<_>>>()?;\n+        .map(|nav| (position.file_id, RangeInfo::new(nav_range, nav)))\n+        .try_conv_with_to_vec(&world)?;\n     Ok(Some(res.into()))\n }\n \n@@ -323,12 +317,7 @@ pub fn handle_parent_module(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Vec<Location>> {\n     let position = params.try_conv_with(&world)?;\n-    world\n-        .analysis()\n-        .parent_module(position)?\n-        .into_iter()\n-        .map(|nav| nav.try_conv_with(&world))\n-        .collect::<Result<Vec<_>>>()\n+    world.analysis().parent_module(position)?.iter().try_conv_with_to_vec(&world)\n }\n \n pub fn handle_runnables("}]}