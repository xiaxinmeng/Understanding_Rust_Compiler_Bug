{"sha": "bad58f27916e7e233cc2916dcc9167708077e792", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZDU4ZjI3OTE2ZTdlMjMzY2MyOTE2ZGNjOTE2NzcwODA3N2U3OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T03:53:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-26T03:53:46Z"}, "message": "Auto merge of #43226 - alexcrichton:aarch64-ci, r=aidanhs\n\nAdd a disabled builder for aarch64 emulated tests\n\nThis commit adds a disabled builder which will run all tests for the standard\nlibrary for aarch64 in a QEMU instance. Once we get enough capacity to run this\non Travis this can be used to boost our platform coverage of AArch64", "tree": {"sha": "bf77c09bafe759f7538cb721d8571590d2ed4214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf77c09bafe759f7538cb721d8571590d2ed4214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bad58f27916e7e233cc2916dcc9167708077e792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bad58f27916e7e233cc2916dcc9167708077e792", "html_url": "https://github.com/rust-lang/rust/commit/bad58f27916e7e233cc2916dcc9167708077e792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bad58f27916e7e233cc2916dcc9167708077e792/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e8a8ef97abef8a69a9c72de74fed779b401d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e8a8ef97abef8a69a9c72de74fed779b401d73", "html_url": "https://github.com/rust-lang/rust/commit/b5e8a8ef97abef8a69a9c72de74fed779b401d73"}, {"sha": "8ef3f69ffb03f8b5c83c44a6300bdfc8f73f6296", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef3f69ffb03f8b5c83c44a6300bdfc8f73f6296", "html_url": "https://github.com/rust-lang/rust/commit/8ef3f69ffb03f8b5c83c44a6300bdfc8f73f6296"}], "stats": {"total": 3256, "additions": 3240, "deletions": 16}, "files": [{"sha": "2b82b5e405b67c8930776113132d94e723315e5c", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/configure", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -490,6 +490,7 @@ valopt musl-root-armhf \"\" \"arm-unknown-linux-musleabihf install directory\"\n valopt musl-root-armv7 \"\" \"armv7-unknown-linux-musleabihf install directory\"\n valopt extra-filename \"\" \"Additional data that is hashed and passed to the -C extra-filename flag\"\n valopt qemu-armhf-rootfs \"\" \"rootfs in qemu testing, you probably don't want to use this\"\n+valopt qemu-aarch64-rootfs \"\" \"rootfs in qemu testing, you probably don't want to use this\"\n valopt experimental-targets \"\" \"experimental LLVM targets to build\"\n \n if [ -e ${CFG_SRC_DIR}.git ]"}, {"sha": "7b8af436d5a7395aa1748cb366381a1cfc7365a5", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -636,6 +636,11 @@ impl Config {\n                     let target = self.target_config.entry(target).or_insert(Target::default());\n                     target.qemu_rootfs = Some(parse_configure_path(value));\n                 }\n+                \"CFG_QEMU_AARCH64_ROOTFS\" if value.len() > 0 => {\n+                    let target = INTERNER.intern_str(\"aarch64-unknown-linux-gnu\");\n+                    let target = self.target_config.entry(target).or_insert(Target::default());\n+                    target.qemu_rootfs = Some(parse_configure_path(value));\n+                }\n                 _ => {}\n             }\n         }"}, {"sha": "14785b706fb151fee67fde9615c9b4c18371e14a", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -63,11 +63,11 @@ RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-bas\n \n # Copy over our init script, which starts up our test server and also a few\n # other misc tasks.\n-COPY armhf-gnu/rcS rootfs/etc/init.d/rcS\n+COPY scripts/qemu-bare-bones-rcS rootfs/etc/init.d/rcS\n RUN chmod +x rootfs/etc/init.d/rcS\n \n # Helper to quickly fill the entropy pool in the kernel.\n-COPY armhf-gnu/addentropy.c /tmp/\n+COPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\n RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!"}, {"sha": "e468b1abdfb5cd719094ad1bd778ca541dd66f72", "filename": "src/ci/docker/disabled/aarch64-gnu/Dockerfile", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -0,0 +1,85 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update -y && apt-get install -y --no-install-recommends \\\n+      bc \\\n+      bzip2 \\\n+      ca-certificates \\\n+      cmake \\\n+      cpio \\\n+      curl \\\n+      file \\\n+      g++ \\\n+      gcc-aarch64-linux-gnu \\\n+      git \\\n+      libc6-dev \\\n+      libc6-dev-arm64-cross \\\n+      make \\\n+      python2.7 \\\n+      qemu-system-aarch64 \\\n+      xz-utils\n+\n+ENV ARCH=arm64 \\\n+    CROSS_COMPILE=aarch64-linux-gnu-\n+\n+WORKDIR /build\n+\n+# Compile the kernel that we're going to run and be emulating with. This is\n+# basically just done to be compatible with the QEMU target that we're going\n+# to be using when running tests. If any other kernel works or if any\n+# other QEMU target works with some other stock kernel, we can use that too!\n+#\n+# The `config` config file was a previously generated config file for\n+# the kernel. This file was generated by running `make defconfig`\n+# followed by `make menuconfig` and then enabling the IPv6 protocol page.\n+COPY disabled/aarch64-gnu/config /build/.config\n+RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n+      tar xJf - && \\\n+      cd /build/linux-4.4.42 && \\\n+      cp /build/.config . && \\\n+      make -j$(nproc) all && \\\n+      cp arch/arm64/boot/Image /tmp && \\\n+      cd /build &&  \\\n+      rm -rf linux-4.4.42\n+\n+# Compile an instance of busybox as this provides a lightweight system and init\n+# binary which we will boot into. Only trick here is configuring busybox to\n+# build static binaries.\n+RUN curl https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - && \\\n+      cd busybox-1.21.1 && \\\n+      make defconfig && \\\n+      sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      mv _install /tmp/rootfs && \\\n+      cd /build && \\\n+      rm -rf busybox-1.12.1\n+\n+# Download the ubuntu rootfs, which we'll use as a chroot for all our tests.\n+WORKDIR /tmp\n+RUN mkdir rootfs/ubuntu\n+RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04-core-arm64.tar.gz | \\\n+      tar xzf - -C rootfs/ubuntu && \\\n+      cd rootfs && mkdir proc sys dev etc etc/init.d\n+\n+# Copy over our init script, which starts up our test server and also a few\n+# other misc tasks.\n+COPY scripts/qemu-bare-bones-rcS rootfs/etc/init.d/rcS\n+RUN chmod +x rootfs/etc/init.d/rcS\n+\n+# Helper to quickly fill the entropy pool in the kernel.\n+COPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\n+RUN aarch64-linux-gnu-gcc addentropy.c -o rootfs/addentropy -static\n+\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --target=aarch64-unknown-linux-gnu \\\n+      --qemu-aarch64-rootfs=/tmp/rootfs\n+ENV SCRIPT python2.7 ../x.py test --target aarch64-unknown-linux-gnu\n+ENV NO_CHANGE_USER=1"}, {"sha": "a1792532392f43e7012d0d45dfb66750ddb08741", "filename": "src/ci/docker/disabled/aarch64-gnu/config", "status": "added", "additions": 3100, "deletions": 0, "changes": 3100, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2Fconfig?ref=bad58f27916e7e233cc2916dcc9167708077e792"}, {"sha": "8975739e3c030d58fd4e3c3218a11ea8e314c314", "filename": "src/ci/docker/scripts/qemu-bare-bones-addentropy.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-addentropy.c", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-addentropy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-addentropy.c?ref=bad58f27916e7e233cc2916dcc9167708077e792", "previous_filename": "src/ci/docker/armhf-gnu/addentropy.c"}, {"sha": "3c29bedc13c997797cf6a69d769c34d4dcfc7b88", "filename": "src/ci/docker/scripts/qemu-bare-bones-rcS", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fqemu-bare-bones-rcS?ref=bad58f27916e7e233cc2916dcc9167708077e792", "previous_filename": "src/ci/docker/armhf-gnu/rcS"}, {"sha": "839e2d88d6a0003cf89fab6251e215bfec7df6f2", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -469,6 +469,7 @@ mod tests {\n     // although the reason isn't very clear as to why. For now this test is\n     // ignored there.\n     #[cfg_attr(target_arch = \"arm\", ignore)]\n+    #[cfg_attr(target_arch = \"aarch64\", ignore)]\n     fn test_process_mask() {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited."}, {"sha": "40113d164df55739526b8db93289ddecc4ba77e3", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -533,9 +533,17 @@ mod tests {\n         assert!(b > a);\n         assert_eq!(b - a, Duration::new(1, 0));\n \n-        // let's assume that we're all running computers later than 2000\n         let thirty_years = Duration::new(1, 0) * 60 * 60 * 24 * 365 * 30;\n-        assert!(a > thirty_years);\n+\n+        // Right now for CI this test is run in an emulator, and apparently the\n+        // aarch64 emulator's sense of time is that we're still living in the\n+        // 70s.\n+        //\n+        // Otherwise let's assume that we're all running computers later than\n+        // 2000.\n+        if !cfg!(target_arch = \"aarch64\") {\n+            assert!(a > thirty_years);\n+        }\n \n         // let's assume that we're all running computers earlier than 2090.\n         // Should give us ~70 years to fix this!"}, {"sha": "5b26dade9aff06f4f0c264ebab519ac63063186b", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -11,6 +11,7 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-powerpc\n+// ignore-aarch64\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows"}, {"sha": "2f5275bb5be934671d4e70e84fde646a3f677cc4", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bad58f27916e7e233cc2916dcc9167708077e792/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bad58f27916e7e233cc2916dcc9167708077e792/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=bad58f27916e7e233cc2916dcc9167708077e792", "patch": "@@ -66,7 +66,7 @@ fn spawn_emulator(target: &str,\n         start_android_emulator(server);\n     } else {\n         let rootfs = rootfs.as_ref().expect(\"need rootfs on non-android\");\n-        start_qemu_emulator(rootfs, server, tmpdir);\n+        start_qemu_emulator(target, rootfs, server, tmpdir);\n     }\n \n     // Wait for the emulator to come online\n@@ -120,7 +120,10 @@ fn start_android_emulator(server: &Path) {\n                     .unwrap();\n }\n \n-fn start_qemu_emulator(rootfs: &Path, server: &Path, tmpdir: &Path) {\n+fn start_qemu_emulator(target: &str,\n+                       rootfs: &Path,\n+                       server: &Path,\n+                       tmpdir: &Path) {\n     // Generate a new rootfs image now that we've updated the test server\n     // executable. This is the equivalent of:\n     //\n@@ -143,16 +146,36 @@ fn start_qemu_emulator(rootfs: &Path, server: &Path, tmpdir: &Path) {\n     assert!(t!(child.wait()).success());\n \n     // Start up the emulator, in the background\n-    let mut cmd = Command::new(\"qemu-system-arm\");\n-    cmd.arg(\"-M\").arg(\"vexpress-a15\")\n-       .arg(\"-m\").arg(\"1024\")\n-       .arg(\"-kernel\").arg(\"/tmp/zImage\")\n-       .arg(\"-initrd\").arg(&rootfs_img)\n-       .arg(\"-dtb\").arg(\"/tmp/vexpress-v2p-ca15-tc1.dtb\")\n-       .arg(\"-append\").arg(\"console=ttyAMA0 root=/dev/ram rdinit=/sbin/init init=/sbin/init\")\n-       .arg(\"-nographic\")\n-       .arg(\"-redir\").arg(\"tcp:12345::12345\");\n-    t!(cmd.spawn());\n+    match target {\n+        \"arm-unknown-linux-gnueabihf\" => {\n+            let mut cmd = Command::new(\"qemu-system-arm\");\n+            cmd.arg(\"-M\").arg(\"vexpress-a15\")\n+               .arg(\"-m\").arg(\"1024\")\n+               .arg(\"-kernel\").arg(\"/tmp/zImage\")\n+               .arg(\"-initrd\").arg(&rootfs_img)\n+               .arg(\"-dtb\").arg(\"/tmp/vexpress-v2p-ca15-tc1.dtb\")\n+               .arg(\"-append\")\n+               .arg(\"console=ttyAMA0 root=/dev/ram rdinit=/sbin/init init=/sbin/init\")\n+               .arg(\"-nographic\")\n+               .arg(\"-redir\").arg(\"tcp:12345::12345\");\n+            t!(cmd.spawn());\n+        }\n+        \"aarch64-unknown-linux-gnu\" => {\n+            let mut cmd = Command::new(\"qemu-system-aarch64\");\n+            cmd.arg(\"-machine\").arg(\"virt\")\n+               .arg(\"-cpu\").arg(\"cortex-a57\")\n+               .arg(\"-m\").arg(\"1024\")\n+               .arg(\"-kernel\").arg(\"/tmp/Image\")\n+               .arg(\"-initrd\").arg(&rootfs_img)\n+               .arg(\"-append\")\n+               .arg(\"console=ttyAMA0 root=/dev/ram rdinit=/sbin/init init=/sbin/init\")\n+               .arg(\"-nographic\")\n+               .arg(\"-netdev\").arg(\"user,id=net0,hostfwd=tcp::12345-:12345\")\n+               .arg(\"-device\").arg(\"virtio-net-device,netdev=net0,mac=00:00:00:00:00:00\");\n+            t!(cmd.spawn());\n+        }\n+        _ => panic!(\"cannot start emulator for: {}\"< target),\n+    }\n \n     fn add_files(w: &mut Write, root: &Path, cur: &Path) {\n         for entry in t!(cur.read_dir()) {"}]}