{"sha": "e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "node_id": "C_kwDOAAsO6NoAKGUyNDQyOWYzMWIzZThkZDc1ZjMyMjI0YzE2MWE4MWZjNmQzYmJiMjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-13T12:41:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T12:41:25Z"}, "message": "Merge #10536\n\n10536: minor: Make AssistContext::frange private r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "82440b73028906e2e6f3219409bf8e433816f384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82440b73028906e2e6f3219409bf8e433816f384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZtP1CRBK7hj4Ov3rIwAAkIkIAF0cE91pFLoh3wJGZRbBye/Q\nKvnCwkMhXTNekX8AU+ObDMhMmdAmIvvnB9mWteIoy7CoFgkVJilNQ7lQSSB9O3Lf\nqf0n/BzsUUJSmW3QIemlI4qzrao3cLDAawZSZsMRGMx1ZjMrd+P9tS7uPKNdl2Yh\nBkvJJ/liVPyivApJTfLuzcR/5qboio4KHjGsc0aPVJbm6ccOvxkavmuBXP2bP3ZM\nebbTHgPHfoDbiGkD2WkYw2Lz1pM8HGwEGGpvb4y9MgGx0A6ROFHqnfNFOwbvCpyM\ngsjGhXdMa5JU1q2lkUYK7zmJzQ8xKl4H9R9LyT28i408Mx0k/Y7y9ilhJ/UDrcs=\n=UkGJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 82440b73028906e2e6f3219409bf8e433816f384\nparent 137ac67f5dd10d8a5e83e9eeb7600993e9886c8a\nparent ccad89a2db105acf5619fe9dbb9d837d4cb41b5f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634128885 +0000\ncommitter GitHub <noreply@github.com> 1634128885 +0000\n\nMerge #10536\n\n10536: minor: Make AssistContext::frange private r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "html_url": "https://github.com/rust-lang/rust/commit/e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137ac67f5dd10d8a5e83e9eeb7600993e9886c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/137ac67f5dd10d8a5e83e9eeb7600993e9886c8a", "html_url": "https://github.com/rust-lang/rust/commit/137ac67f5dd10d8a5e83e9eeb7600993e9886c8a"}, {"sha": "ccad89a2db105acf5619fe9dbb9d837d4cb41b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccad89a2db105acf5619fe9dbb9d837d4cb41b5f", "html_url": "https://github.com/rust-lang/rust/commit/ccad89a2db105acf5619fe9dbb9d837d4cb41b5f"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "1181adb8d54ecca8bf40492dc077335a94c4dcb2", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -56,7 +56,7 @@ use crate::{\n pub(crate) struct AssistContext<'a> {\n     pub(crate) config: &'a AssistConfig,\n     pub(crate) sema: Semantics<'a, RootDatabase>,\n-    pub(crate) frange: FileRange,\n+    frange: FileRange,\n     trimmed_range: TextRange,\n     source_file: SourceFile,\n }\n@@ -98,6 +98,14 @@ impl<'a> AssistContext<'a> {\n         self.frange.range.start()\n     }\n \n+    pub(crate) fn file_id(&self) -> FileId {\n+        self.frange.file_id\n+    }\n+\n+    pub(crate) fn has_empty_selection(&self) -> bool {\n+        self.trimmed_range.is_empty()\n+    }\n+\n     /// Returns the selected range trimmed for whitespace tokens, that is the range will be snapped\n     /// to the nearest enclosed token.\n     pub(crate) fn selection_trimmed(&self) -> TextRange {\n@@ -125,7 +133,6 @@ impl<'a> AssistContext<'a> {\n     /// Returns the element covered by the selection range, this excludes trailing whitespace in the selection.\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         self.source_file.syntax().covering_element(self.selection_trimmed())\n-        // self.source_file.syntax().covering_element(self.frange.range)\n     }\n }\n "}, {"sha": "9ff4ab90c8f0346c731b73ebe58b397510b90c2e", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -92,7 +92,7 @@ fn edit_struct_def(\n     let record_fields = ast::make::record_field_list(record_fields);\n     let tuple_fields_text_range = tuple_fields.syntax().text_range();\n \n-    edit.edit_file(ctx.frange.file_id);\n+    edit.edit_file(ctx.file_id());\n \n     if let Either::Left(strukt) = strukt {\n         if let Some(w) = strukt.where_clause() {"}, {"sha": "fa85e48c6649daab991c3895438ea8308099a18c", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -115,7 +115,7 @@ fn collect_data(ident_pat: IdentPat, ctx: &AssistContext) -> Option<TupleData> {\n     let usages = ctx.sema.to_def(&ident_pat).map(|def| {\n         Definition::Local(def)\n             .usages(&ctx.sema)\n-            .in_scope(SearchScope::single_file(ctx.frange.file_id))\n+            .in_scope(SearchScope::single_file(ctx.file_id()))\n             .all()\n     });\n "}, {"sha": "e2931df3776f71988482425967212a25000ba7a2", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -125,7 +125,7 @@ impl Def {\n             Def::MacroDef(def) => Definition::Macro(*def),\n         };\n \n-        let search_scope = SearchScope::single_file(ctx.frange.file_id);\n+        let search_scope = SearchScope::single_file(ctx.file_id());\n         def.usages(&ctx.sema).in_scope(search_scope).at_least_one()\n     }\n }"}, {"sha": "282f7a60af9d5386591bedfe04642374961f3d7c", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -309,7 +309,7 @@ impl LocalUsages {\n         Self(\n             Definition::Local(var)\n                 .usages(&ctx.sema)\n-                .in_scope(SearchScope::single_file(ctx.frange.file_id))\n+                .in_scope(SearchScope::single_file(ctx.file_id()))\n                 .all(),\n         )\n     }\n@@ -1039,7 +1039,7 @@ fn is_defined_outside_of_body(\n     body: &FunctionBody,\n     src: &hir::InFile<Either<ast::IdentPat, ast::SelfParam>>,\n ) -> bool {\n-    src.file_id.original_file(ctx.db()) == ctx.frange.file_id\n+    src.file_id.original_file(ctx.db()) == ctx.file_id()\n         && !body.contains_node(either_syntax(&src.value))\n }\n "}, {"sha": "3b812cdf17310103df4cb8fb7a11d3032e51df12", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n             // record file references of the file the def resides in, we only want to swap to the edited file in the builder once\n             let mut def_file_references = None;\n             for (file_id, references) in usages {\n-                if file_id == ctx.frange.file_id {\n+                if file_id == ctx.file_id() {\n                     def_file_references = Some(references);\n                     continue;\n                 }\n@@ -89,7 +89,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     apply_references(ctx.config.insert_use, path, node, import)\n                 });\n             }\n-            builder.edit_file(ctx.frange.file_id);\n+            builder.edit_file(ctx.file_id());\n \n             let variant = builder.make_mut(variant.clone());\n             if let Some(references) = def_file_references {"}, {"sha": "d7ad62782f84ccfc44f8c1670ce7e5c67c7d6c63", "filename": "crates/ide_assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -26,7 +26,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    if ctx.frange.range.is_empty() {\n+    if ctx.has_empty_selection() {\n         return None;\n     }\n "}, {"sha": "9550510ca6d21eb88932894706f94e73c5fadec5", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -28,7 +28,7 @@ use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    if ctx.frange.range.is_empty() {\n+    if ctx.has_empty_selection() {\n         return None;\n     }\n \n@@ -43,7 +43,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n     let node = node.ancestors().take_while(|anc| anc.text_range() == node.text_range()).last()?;\n     let to_extract = node\n         .descendants()\n-        .take_while(|it| ctx.frange.range.contains_range(it.text_range()))\n+        .take_while(|it| ctx.selection_trimmed().contains_range(it.text_range()))\n         .find_map(valid_target_expr)?;\n \n     if let Some(ty_info) = ctx.sema.type_of_expr(&to_extract) {"}, {"sha": "2f878704136e889eaa29c88e51253503795d87ee", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -364,7 +364,7 @@ fn get_fn_target(\n     target_module: &Option<Module>,\n     call: CallExpr,\n ) -> Option<(GeneratedFunctionTarget, FileId, TextSize)> {\n-    let mut file = ctx.frange.file_id;\n+    let mut file = ctx.file_id();\n     let target = match target_module {\n         Some(target_module) => {\n             let module_source = target_module.definition_source(ctx.db());"}, {"sha": "ae7707667e08ba5819f611051e73f622d3193578", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -59,7 +59,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let def_file = ctx.frange.file_id;\n+    let def_file = ctx.file_id();\n     let name = ctx.find_node_at_offset::<ast::Name>()?;\n     let ast_func = name.syntax().parent().and_then(ast::Fn::cast)?;\n     let func_body = ast_func.body()?;\n@@ -199,7 +199,7 @@ pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let param_list = fn_source.value.param_list()?;\n \n     let FileRange { file_id, range } = fn_source.syntax().original_file_range(ctx.sema.db);\n-    if file_id == ctx.frange.file_id && range.contains(ctx.offset()) {\n+    if file_id == ctx.file_id() && range.contains(ctx.offset()) {\n         cov_mark::hit!(inline_call_recursive);\n         return None;\n     }"}, {"sha": "8e528c8e395dd9c28b6471ae06ac0516dc851236", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -33,7 +33,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let file_id = ctx.frange.file_id;\n+    let file_id = ctx.file_id();\n     let range = ctx.selection_trimmed();\n     let InlineData { let_stmt, delete_let, references, target } =\n         if let Some(let_stmt) = ctx.find_node_at_offset::<ast::LetStmt>() {"}, {"sha": "b49c2e5da588a458d2af6a9c2280e0f1f654f167", "filename": "crates/ide_assists/src/handlers/move_from_mod_rs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_from_mod_rs.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -25,7 +25,7 @@ use crate::{\n // ```\n pub(crate) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n-    let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n+    let module = ctx.sema.to_module_def(ctx.file_id())?;\n     // Enable this assist if the user select all \"meaningful\" content in the source file\n     let trimmed_selected_range = trimmed_text_range(&source_file, ctx.selection_trimmed());\n     let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n@@ -41,13 +41,13 @@ pub(crate) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option\n     let target = source_file.syntax().text_range();\n     let module_name = module.name(ctx.db())?.to_string();\n     let path = format!(\"../{}.rs\", module_name);\n-    let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+    let dst = AnchoredPathBuf { anchor: ctx.file_id(), path };\n     acc.add(\n         AssistId(\"move_from_mod_rs\", AssistKind::Refactor),\n         format!(\"Convert {}/mod.rs to {}.rs\", module_name, module_name),\n         target,\n         |builder| {\n-            builder.move_file(ctx.frange.file_id, dst);\n+            builder.move_file(ctx.file_id(), dst);\n         },\n     )\n }"}, {"sha": "7dc71cf71039ff6b370f9c762d1064d86168f6ee", "filename": "crates/ide_assists/src/handlers/move_module_to_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Opt\n                 buf,\n             );\n \n-            let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+            let dst = AnchoredPathBuf { anchor: ctx.file_id(), path };\n             builder.create_file(dst, contents);\n         },\n     )"}, {"sha": "887960881a2015ddeb734f383fa3fdfa2afa9704", "filename": "crates/ide_assists/src/handlers/move_to_mod_rs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -25,7 +25,7 @@ use crate::{\n // ```\n pub(crate) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n-    let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n+    let module = ctx.sema.to_module_def(ctx.file_id())?;\n     // Enable this assist if the user select all \"meaningful\" content in the source file\n     let trimmed_selected_range = trimmed_text_range(&source_file, ctx.selection_trimmed());\n     let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n@@ -41,13 +41,13 @@ pub(crate) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let target = source_file.syntax().text_range();\n     let module_name = module.name(ctx.db())?.to_string();\n     let path = format!(\"./{}/mod.rs\", module_name);\n-    let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+    let dst = AnchoredPathBuf { anchor: ctx.file_id(), path };\n     acc.add(\n         AssistId(\"move_to_mod_rs\", AssistKind::Refactor),\n         format!(\"Convert {}.rs to {}/mod.rs\", module_name, module_name),\n         target,\n         |builder| {\n-            builder.move_file(ctx.frange.file_id, dst);\n+            builder.move_file(ctx.file_id(), dst);\n         },\n     )\n }"}, {"sha": "f784448471d260badaa8697b59ea14b8cd332d5d", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24429f31b3e8dd75f32224c161a81fc6d3bbb24/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=e24429f31b3e8dd75f32224c161a81fc6d3bbb24", "patch": "@@ -82,7 +82,7 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    if ctx.frange.range.is_empty() {\n+    if ctx.has_empty_selection() {\n         cov_mark::hit!(not_applicable_if_no_selection);\n         return None;\n     }"}]}