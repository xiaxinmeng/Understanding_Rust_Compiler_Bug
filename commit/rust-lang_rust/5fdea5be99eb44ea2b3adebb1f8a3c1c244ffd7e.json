{"sha": "5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZGVhNWJlOTllYjQ0ZWEyYjNhZGViYjFmOGEzYzFjMjQ0ZmZkN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T13:29:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T13:29:14Z"}, "message": "Auto merge of #1601 - RalfJung:misc, r=RalfJung\n\npointer tag tracking: also show when tag is being created\n\nAlso use bash to make sure `&>` works.", "tree": {"sha": "60681ca418d9b57ac0fc60d47999ba6638751f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60681ca418d9b57ac0fc60d47999ba6638751f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "html_url": "https://github.com/rust-lang/rust/commit/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88da6757d7fe75c853767e4615a6255e9466b67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88da6757d7fe75c853767e4615a6255e9466b67a", "html_url": "https://github.com/rust-lang/rust/commit/88da6757d7fe75c853767e4615a6255e9466b67a"}, {"sha": "086e9c49a95ab30380954cc3bca632145786cee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/086e9c49a95ab30380954cc3bca632145786cee2", "html_url": "https://github.com/rust-lang/rust/commit/086e9c49a95ab30380954cc3bca632145786cee2"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "337b2a496de878ff7c86f183f98542a082869797", "filename": "miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/miri", "raw_url": "https://github.com/rust-lang/rust/raw/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/sh\n+#!/bin/bash\n set -e\n USAGE=$(cat <<\"EOF\"\n   COMMANDS"}, {"sha": "12ad93a5289ee7524f4c4b19f779a5078dbde312", "filename": "src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "patch": "@@ -1,5 +1,6 @@\n use std::cell::RefCell;\n use std::fmt;\n+use std::num::NonZeroU64;\n \n use log::trace;\n \n@@ -41,6 +42,7 @@ impl MachineStopType for TerminationInfo {}\n \n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n+    CreatedPointerTag(NonZeroU64),\n     PoppedPointerTag(Item),\n     CreatedCallId(CallId),\n     CreatedAlloc(AllocId),\n@@ -266,6 +268,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             for e in diagnostics.drain(..) {\n                 use NonHaltingDiagnostic::*;\n                 let msg = match e {\n+                    CreatedPointerTag(tag) =>\n+                        format!(\"created tag {:?}\", tag),\n                     PoppedPointerTag(item) =>\n                         format!(\"popped tracked tag for item {:?}\", item),\n                     CreatedCallId(id) =>"}, {"sha": "257208056d76486a4f8cb426b541b9bc4b275af3", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=5fdea5be99eb44ea2b3adebb1f8a3c1c244ffd7e", "patch": "@@ -168,6 +168,9 @@ impl GlobalState {\n \n     fn new_ptr(&mut self) -> PtrId {\n         let id = self.next_ptr_id;\n+        if Some(id) == self.tracked_pointer_tag {\n+            register_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(id));\n+        }\n         self.next_ptr_id = NonZeroU64::new(id.get() + 1).unwrap();\n         id\n     }"}]}