{"sha": "5307cb5614e7498f069bb634ab293e176e63c67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDdjYjU2MTRlNzQ5OGYwNjliYjYzNGFiMjkzZTE3NmU2M2M2N2Y=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-04T13:50:03Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-07T14:13:39Z"}, "message": "Add a lint for `.repeat(1)`\n\nfix #3028.", "tree": {"sha": "0fcccd7165f8e269ce6e477794ffd553734617e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcccd7165f8e269ce6e477794ffd553734617e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5307cb5614e7498f069bb634ab293e176e63c67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5307cb5614e7498f069bb634ab293e176e63c67f", "html_url": "https://github.com/rust-lang/rust/commit/5307cb5614e7498f069bb634ab293e176e63c67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5307cb5614e7498f069bb634ab293e176e63c67f/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac856922f80e9ef8cd95c3004699e4bc8fa0c978", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac856922f80e9ef8cd95c3004699e4bc8fa0c978", "html_url": "https://github.com/rust-lang/rust/commit/ac856922f80e9ef8cd95c3004699e4bc8fa0c978"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "c5bbaac0df647df496fda47a987be134edb23592", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -1616,6 +1616,7 @@ Released 2018-09-13\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n+[`repeat_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option"}, {"sha": "0f362dbf86bf6f458323aa81172f942b94826729", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -282,6 +282,7 @@ mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n mod reference;\n mod regex;\n+mod repeat_once;\n mod returns;\n mod serde_api;\n mod shadow;\n@@ -764,6 +765,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &reference::REF_IN_DEREF,\n         &regex::INVALID_REGEX,\n         &regex::TRIVIAL_REGEX,\n+        &repeat_once::REPEAT_ONCE,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n         &serde_api::SERDE_API_MISUSE,\n@@ -1071,6 +1073,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n     store.register_late_pass(|| box map_identity::MapIdentity);\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n+    store.register_late_pass(|| box repeat_once::RepeatOnce);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1393,6 +1396,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&regex::TRIVIAL_REGEX),\n+        LintId::of(&repeat_once::REPEAT_ONCE),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n@@ -1602,6 +1606,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n+        LintId::of(&repeat_once::REPEAT_ONCE),\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),"}, {"sha": "af3c948ec82c13f5107acede89527dda5eff6059", "filename": "clippy_lints/src/repeat_once.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -0,0 +1,126 @@\n+use crate::consts::{miri_to_const, Constant};\n+use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg, walk_ptrs_ty};\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `.repeat(1)` and suggest the following method for each types.\n+    /// - `.to_string()` for `str`\n+    /// - `.clone()` for `String`\n+    /// - `.to_vec()` for `slice`\n+    ///\n+    /// **Why is this bad?** For example, `String.repeat(1)` is equivalent to `.clone()`. If cloning the string is the intention behind thi, `clone()` should be used.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn main() {\n+    ///     let x = String::from(\"hello world\").repeat(1);\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     let x = String::from(\"hello world\").clone();\n+    /// }\n+    /// ```\n+    pub REPEAT_ONCE,\n+    complexity,\n+    \"using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` \"\n+}\n+\n+declare_lint_pass!(RepeatOnce => [REPEAT_ONCE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n+            if path.ident.name == sym!(repeat);\n+            if is_once(cx, &args[1]) && !in_macro(args[0].span);\n+            then {\n+                let ty = walk_ptrs_ty(cx.tables().expr_ty(&args[0]));\n+                if is_str(ty){\n+                    span_lint_and_sugg(\n+                        cx,\n+                        REPEAT_ONCE,\n+                        expr.span,\n+                        \"calling `repeat(1)` on str\",\n+                        \"consider using `.to_string()` instead\",\n+                        format!(\"{}.to_string()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if is_slice(ty) {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        REPEAT_ONCE,\n+                        expr.span,\n+                        \"calling `repeat(1)` on slice\",\n+                        \"consider using `.to_vec()` instead\",\n+                        format!(\"{}.to_vec()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        REPEAT_ONCE,\n+                        expr.span,\n+                        \"calling `repeat(1)` on a string literal\",\n+                        \"consider using `.clone()` instead\",\n+                        format!(\"{}.clone()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_once<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> bool {\n+    match expr.kind {\n+        ExprKind::Lit(ref lit) => {\n+            if let LitKind::Int(ref lit_content, _) = lit.node {\n+                *lit_content == 1\n+            } else {\n+                false\n+            }\n+        },\n+        ExprKind::Path(rustc_hir::QPath::Resolved(None, path)) => {\n+            if let Res::Def(DefKind::Const, def_id) = path.res {\n+                let ty = cx.tcx.type_of(def_id);\n+                let con = cx\n+                    .tcx\n+                    .const_eval_poly(def_id)\n+                    .ok()\n+                    .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty))\n+                    .unwrap();\n+                let con = miri_to_const(con);\n+                con == Some(Constant::Int(1))\n+            } else {\n+                false\n+            }\n+        },\n+        _ => false,\n+    }\n+}\n+\n+fn is_str(ty: Ty<'_>) -> bool {\n+    match ty.kind {\n+        ty::Str => true,\n+        _ => false,\n+    }\n+}\n+\n+fn is_slice(ty: Ty<'_>) -> bool {\n+    match ty.kind {\n+        ty::Slice(..) | ty::Array(..) => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "078924d3f9bb82aab66e98cc4209a813d83ad44e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -1879,6 +1879,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"reference\",\n     },\n+    Lint {\n+        name: \"repeat_once\",\n+        group: \"complexity\",\n+        desc: \"using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` \",\n+        deprecation: None,\n+        module: \"repeat_once\",\n+    },\n     Lint {\n         name: \"rest_pat_in_fully_bound_structs\",\n         group: \"restriction\","}, {"sha": "a637c22fbcd266211e9247df2ac21c2b14b3dd56", "filename": "tests/ui/repeat_once.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat_once.fixed?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::repeat_once)]\n+#[allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n+fn main() {\n+    const N: usize = 1;\n+    let s = \"str\";\n+    let string = \"String\".to_string();\n+    let slice = [1; 5];\n+\n+    let a = [1; 5].to_vec();\n+    let b = slice.to_vec();\n+    let c = \"hello\".to_string();\n+    let d = \"hi\".to_string();\n+    let e = s.to_string();\n+    let f = string.clone();\n+}"}, {"sha": "d99ca1b5b55d4200df4831fa22074cc3f2ce39cb", "filename": "tests/ui/repeat_once.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat_once.rs?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::repeat_once)]\n+#[allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n+fn main() {\n+    const N: usize = 1;\n+    let s = \"str\";\n+    let string = \"String\".to_string();\n+    let slice = [1; 5];\n+\n+    let a = [1; 5].repeat(1);\n+    let b = slice.repeat(1);\n+    let c = \"hello\".repeat(N);\n+    let d = \"hi\".repeat(1);\n+    let e = s.repeat(1);\n+    let f = string.repeat(1);\n+}"}, {"sha": "915eea3bfc6b8fbec2a4c74c55b4126602aaccab", "filename": "tests/ui/repeat_once.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5307cb5614e7498f069bb634ab293e176e63c67f/tests%2Fui%2Frepeat_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat_once.stderr?ref=5307cb5614e7498f069bb634ab293e176e63c67f", "patch": "@@ -0,0 +1,40 @@\n+error: calling `repeat(1)` on slice\n+  --> $DIR/repeat_once.rs:10:13\n+   |\n+LL |     let a = [1; 5].repeat(1);\n+   |             ^^^^^^^^^^^^^^^^ help: consider using `.to_vec()` instead: `[1; 5].to_vec()`\n+   |\n+   = note: `-D clippy::repeat-once` implied by `-D warnings`\n+\n+error: calling `repeat(1)` on slice\n+  --> $DIR/repeat_once.rs:11:13\n+   |\n+LL |     let b = slice.repeat(1);\n+   |             ^^^^^^^^^^^^^^^ help: consider using `.to_vec()` instead: `slice.to_vec()`\n+\n+error: calling `repeat(1)` on str\n+  --> $DIR/repeat_once.rs:12:13\n+   |\n+LL |     let c = \"hello\".repeat(N);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using `.to_string()` instead: `\"hello\".to_string()`\n+\n+error: calling `repeat(1)` on str\n+  --> $DIR/repeat_once.rs:13:13\n+   |\n+LL |     let d = \"hi\".repeat(1);\n+   |             ^^^^^^^^^^^^^^ help: consider using `.to_string()` instead: `\"hi\".to_string()`\n+\n+error: calling `repeat(1)` on str\n+  --> $DIR/repeat_once.rs:14:13\n+   |\n+LL |     let e = s.repeat(1);\n+   |             ^^^^^^^^^^^ help: consider using `.to_string()` instead: `s.to_string()`\n+\n+error: calling `repeat(1)` on a string literal\n+  --> $DIR/repeat_once.rs:15:13\n+   |\n+LL |     let f = string.repeat(1);\n+   |             ^^^^^^^^^^^^^^^^ help: consider using `.clone()` instead: `string.clone()`\n+\n+error: aborting due to 6 previous errors\n+"}]}