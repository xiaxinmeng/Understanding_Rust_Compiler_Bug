{"sha": "fe38fffaa90f656abbeff7b8a167afc45cc492a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMzhmZmZhYTkwZjY1NmFiYmVmZjdiOGExNjdhZmM0NWNjNDkyYTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:04:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:04:31Z"}, "message": "Minor rename", "tree": {"sha": "f1578f7d34fa304677483a8df13942e1326bc1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1578f7d34fa304677483a8df13942e1326bc1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe38fffaa90f656abbeff7b8a167afc45cc492a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe38fffaa90f656abbeff7b8a167afc45cc492a9", "html_url": "https://github.com/rust-lang/rust/commit/fe38fffaa90f656abbeff7b8a167afc45cc492a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe38fffaa90f656abbeff7b8a167afc45cc492a9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f616ed65a3cd3088a006ab9f116c2b9a2235cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f616ed65a3cd3088a006ab9f116c2b9a2235cb6", "html_url": "https://github.com/rust-lang/rust/commit/9f616ed65a3cd3088a006ab9f116c2b9a2235cb6"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "eab3e2fff4b1475c9de16a5ab042ddb546b95dfe", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe38fffaa90f656abbeff7b8a167afc45cc492a9/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe38fffaa90f656abbeff7b8a167afc45cc492a9/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=fe38fffaa90f656abbeff7b8a167afc45cc492a9", "patch": "@@ -9,7 +9,7 @@ use crate::{per_ns::PerNs, BuiltinType, ImplId, MacroDefId, ModuleDefId, TraitId\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n-    items: FxHashMap<Name, Resolution>,\n+    visible: FxHashMap<Name, Resolution>,\n     impls: Vec<ImplId>,\n     /// Macros visible in current module in legacy textual scope\n     ///\n@@ -49,7 +49,7 @@ pub(crate) enum BuiltinShadowMode {\n impl ItemScope {\n     pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, &'a Resolution)> + 'a {\n         //FIXME: shadowing\n-        self.items.iter().chain(BUILTIN_SCOPE.iter())\n+        self.visible.iter().chain(BUILTIN_SCOPE.iter())\n     }\n \n     pub fn declarations(&self) -> impl Iterator<Item = ModuleDefId> + '_ {\n@@ -66,7 +66,7 @@ impl ItemScope {\n \n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n-        self.items\n+        self.visible\n             .iter()\n             .filter_map(|(name, res)| res.def.take_macros().map(|macro_| (name, macro_)))\n     }\n@@ -79,9 +79,9 @@ impl ItemScope {\n     /// Get a name from current module scope, legacy macros are not included\n     pub(crate) fn get(&self, name: &Name, shadow: BuiltinShadowMode) -> Option<&Resolution> {\n         match shadow {\n-            BuiltinShadowMode::Module => self.items.get(name).or_else(|| BUILTIN_SCOPE.get(name)),\n+            BuiltinShadowMode::Module => self.visible.get(name).or_else(|| BUILTIN_SCOPE.get(name)),\n             BuiltinShadowMode::Other => {\n-                let item = self.items.get(name);\n+                let item = self.visible.get(name);\n                 if let Some(res) = item {\n                     if let Some(ModuleDefId::ModuleId(_)) = res.def.take_types() {\n                         return BUILTIN_SCOPE.get(name).or(item);\n@@ -94,7 +94,7 @@ impl ItemScope {\n     }\n \n     pub(crate) fn traits<'a>(&'a self) -> impl Iterator<Item = TraitId> + 'a {\n-        self.items.values().filter_map(|r| match r.def.take_types() {\n+        self.visible.values().filter_map(|r| match r.def.take_types() {\n             Some(ModuleDefId::TraitId(t)) => Some(t),\n             _ => None,\n         })\n@@ -114,7 +114,7 @@ impl ItemScope {\n \n     pub(crate) fn push_res(&mut self, name: Name, res: &Resolution, import: bool) -> bool {\n         let mut changed = false;\n-        let existing = self.items.entry(name.clone()).or_default();\n+        let existing = self.visible.entry(name.clone()).or_default();\n \n         if existing.def.types.is_none() && res.def.types.is_some() {\n             existing.def.types = res.def.types;\n@@ -139,7 +139,7 @@ impl ItemScope {\n     }\n \n     pub(crate) fn collect_resolutions(&self) -> Vec<(Name, Resolution)> {\n-        self.items.iter().map(|(name, res)| (name.clone(), res.clone())).collect()\n+        self.visible.iter().map(|(name, res)| (name.clone(), res.clone())).collect()\n     }\n \n     pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {"}]}