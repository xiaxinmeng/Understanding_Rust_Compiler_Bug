{"sha": "1d5829d87f84138276a29058bf35291d5f64275a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNTgyOWQ4N2Y4NDEzODI3NmEyOTA1OGJmMzUyOTFkNWY2NDI3NWE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:35Z"}, "message": "Rollup merge of #55750 - oli-obk:node_id_x, r=michaelwoerister\n\nMake `NodeId` and `HirLocalId` `newtype_index`", "tree": {"sha": "c3c21603252fef68186250329c2bc5c265223a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c21603252fef68186250329c2bc5c265223a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d5829d87f84138276a29058bf35291d5f64275a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7USzCRBK7hj4Ov3rIwAAdHIIADXlnwhOGqrebmHZ+wwiI94s\n5kinZvWB0sY5gqHFDBfRqQMhDLmgmxIahulAz9m+s0YvQTnjxPbTBjVOdWWCJhBQ\nFuvrpLbya1lx0nOOlnKrTWVz7aytx2fzKrJHqjt2mKO8at6AxCQKqste82vwTHpa\ncTTABFv8nZItA49hTibTqgdrcbR668T8N9vM/p5cbAVJV5wRzZasmfIEWOU9o7+f\nXuQNKS/+NjlSYaspsUnCCt7XE3iwc9wwhE12UcOdZ0/WBGItGzGAam/DT7gWcr1U\n38xvk/rtTkgOXu/PrYOn5rN5r7HA6VbYCyliGvRLbZFSVeIul+QcOKMmt5J8i8w=\n=oLXe\n-----END PGP SIGNATURE-----\n", "payload": "tree c3c21603252fef68186250329c2bc5c265223a81\nparent 756870a2ff441ac4618c9143e5494721291699b8\nparent 22039597e103a44b058755e2cc60736cf1fa5392\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276275 +0100\ncommitter GitHub <noreply@github.com> 1542276275 +0100\n\nRollup merge of #55750 - oli-obk:node_id_x, r=michaelwoerister\n\nMake `NodeId` and `HirLocalId` `newtype_index`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5829d87f84138276a29058bf35291d5f64275a", "html_url": "https://github.com/rust-lang/rust/commit/1d5829d87f84138276a29058bf35291d5f64275a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d5829d87f84138276a29058bf35291d5f64275a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756870a2ff441ac4618c9143e5494721291699b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/756870a2ff441ac4618c9143e5494721291699b8", "html_url": "https://github.com/rust-lang/rust/commit/756870a2ff441ac4618c9143e5494721291699b8"}, {"sha": "22039597e103a44b058755e2cc60736cf1fa5392", "url": "https://api.github.com/repos/rust-lang/rust/commits/22039597e103a44b058755e2cc60736cf1fa5392", "html_url": "https://github.com/rust-lang/rust/commit/22039597e103a44b058755e2cc60736cf1fa5392"}], "stats": {"total": 175, "additions": 75, "deletions": 100}, "files": [{"sha": "3ff2545f78dfa9bbe855d1dc392ac02e01aee531", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -63,7 +63,7 @@\n use mir::interpret::GlobalId;\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use hir::map::DefPathHash;\n-use hir::{HirId, ItemLocalId};\n+use hir::HirId;\n \n use ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n@@ -790,11 +790,11 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for HirId {\n     fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         let HirId {\n             owner,\n-            local_id: ItemLocalId(local_id),\n+            local_id,\n         } = *self;\n \n         let def_path_hash = tcx.def_path_hash(DefId::local(owner));\n-        let local_id = Fingerprint::from_smaller_hash(local_id as u64);\n+        let local_id = Fingerprint::from_smaller_hash(local_id.as_u32().into());\n \n         def_path_hash.0.combine(local_id)\n     }"}, {"sha": "d9963f23a1593c09aeade3ebb3777b1d42b7bf97", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -49,7 +49,6 @@ use hir::map::{self, Map};\n use super::itemlikevisit::DeepVisitor;\n \n use std::cmp;\n-use std::u32;\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n@@ -1152,8 +1151,8 @@ pub struct IdRange {\n impl IdRange {\n     pub fn max() -> IdRange {\n         IdRange {\n-            min: NodeId::from_u32(u32::MAX),\n-            max: NodeId::from_u32(u32::MIN),\n+            min: NodeId::MAX,\n+            max: NodeId::from_u32(0),\n         }\n     }\n "}, {"sha": "e532b50a28b6b9d339b89423a87fec8942d68ed9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -588,7 +588,7 @@ impl<'a> LoweringContext<'a> {\n             *local_id_counter += 1;\n             hir::HirId {\n                 owner: def_index,\n-                local_id: hir::ItemLocalId(local_id),\n+                local_id: hir::ItemLocalId::from_u32(local_id),\n             }\n         })\n     }\n@@ -616,7 +616,7 @@ impl<'a> LoweringContext<'a> {\n \n             hir::HirId {\n                 owner: def_index,\n-                local_id: hir::ItemLocalId(local_id),\n+                local_id: hir::ItemLocalId::from_u32(local_id),\n             }\n         })\n     }"}, {"sha": "ac4119dc372d34420bad44164effbf42135fdb48", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0 .. max as u32 + 1)\n-              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId(i)))\n+              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId::from_u32(i)))\n               .collect();\n \n             // Try to map those to something more useful\n@@ -110,7 +110,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n             for local_id in missing {\n                 let hir_id = HirId {\n                     owner: owner_def_index,\n-                    local_id: ItemLocalId(local_id as u32),\n+                    local_id: ItemLocalId::from_u32(local_id),\n                 };\n \n                 trace!(\"missing hir id {:#?}\", hir_id);\n@@ -124,7 +124,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                                        .enumerate()\n                                        .find(|&(_, &entry)| hir_id == entry)\n                                        .expect(\"no node_to_hir_id entry\");\n-                let node_id = NodeId::new(node_id);\n+                let node_id = NodeId::from_usize(node_id);\n                 missing_items.push(format!(\"[local_id: {}, node:{}]\",\n                                            local_id,\n                                            self.hir_map.node_to_string(node_id)));"}, {"sha": "a2b15f00265ab2e8589a1ff9ed03cbd394fb56e8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -37,7 +37,6 @@ use syntax::util::parser::ExprPrecedence;\n use ty::AdtKind;\n use ty::query::Providers;\n \n-use rustc_data_structures::indexed_vec;\n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n use rustc_data_structures::thin_vec::ThinVec;\n \n@@ -121,48 +120,36 @@ impl serialize::UseSpecializedDecodable for HirId {\n     }\n }\n \n-\n-/// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n-/// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n-/// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n-/// the node's position within the owning item in any way, but there is a\n-/// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n-/// integers starting at zero, so a mapping that maps all or most nodes within\n-/// an \"item-like\" to something else can be implement by a `Vec` instead of a\n-/// tree or hash map.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n-         RustcEncodable, RustcDecodable)]\n-pub struct ItemLocalId(pub u32);\n-\n-impl ItemLocalId {\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+// hack to ensure that we don't try to access the private parts of `ItemLocalId` in this module\n+mod item_local_id_inner {\n+    use rustc_data_structures::indexed_vec::Idx;\n+    /// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n+    /// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n+    /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n+    /// the node's position within the owning item in any way, but there is a\n+    /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+    /// integers starting at zero, so a mapping that maps all or most nodes within\n+    /// an \"item-like\" to something else can be implement by a `Vec` instead of a\n+    /// tree or hash map.\n+    newtype_index! {\n+        pub struct ItemLocalId { .. }\n     }\n }\n \n-impl indexed_vec::Idx for ItemLocalId {\n-    fn new(idx: usize) -> Self {\n-        debug_assert!((idx as u32) as usize == idx);\n-        ItemLocalId(idx as u32)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n+pub use self::item_local_id_inner::ItemLocalId;\n \n /// The `HirId` corresponding to CRATE_NODE_ID and CRATE_DEF_INDEX\n pub const CRATE_HIR_ID: HirId = HirId {\n     owner: CRATE_DEF_INDEX,\n-    local_id: ItemLocalId(0)\n+    local_id: ItemLocalId::from_u32_const(0)\n };\n \n pub const DUMMY_HIR_ID: HirId = HirId {\n     owner: CRATE_DEF_INDEX,\n     local_id: DUMMY_ITEM_LOCAL_ID,\n };\n \n-pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId(!0);\n+pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Label {"}, {"sha": "ae0d78d2958adcae9176283272f4ef7d682c3bee", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -79,7 +79,14 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for CrateNum {\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct hir::ItemLocalId { index });\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::ItemLocalId {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.as_u32().hash_stable(hcx, hasher);\n+    }\n+}\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>>\n for hir::ItemLocalId {\n@@ -800,7 +807,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n             .iter()\n             .map(|id| {\n                 let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n-                debug_assert_eq!(local_id, hir::ItemLocalId(0));\n+                debug_assert_eq!(local_id, hir::ItemLocalId::from_u32(0));\n                 def_path_hash.0\n             }).fold(Fingerprint::ZERO, |a, b| {\n                 a.combine_commutative(b)"}, {"sha": "8582900b72c83c5b120a7cf5ee33a374cd174425", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -393,7 +393,7 @@ impl Session {\n \n         match id.as_usize().checked_add(count) {\n             Some(next) => {\n-                self.next_node_id.set(ast::NodeId::new(next));\n+                self.next_node_id.set(ast::NodeId::from_usize(next));\n             }\n             None => bug!(\"Input too large, ran out of node ids!\"),\n         }\n@@ -1160,7 +1160,7 @@ pub fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        next_node_id: OneThread::new(Cell::new(NodeId::new(1))),\n+        next_node_id: OneThread::new(Cell::new(NodeId::from_u32(1))),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),"}, {"sha": "c7ba31e33957036a44205256c1864a95c8e9984e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -425,7 +425,7 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Item(item) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n-                                        item.id, item.hir_id.local_id.0))\n+                                        item.id, item.hir_id.local_id.as_u32()))\n             }\n             pprust_hir::AnnNode::SubItem(id) => {\n                 s.s.space()?;\n@@ -434,18 +434,18 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Block(blk) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"block node_id: {} hir local_id: {}\",\n-                                        blk.id, blk.hir_id.local_id.0))\n+                                        blk.id, blk.hir_id.local_id.as_u32()))\n             }\n             pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n-                                        expr.id, expr.hir_id.local_id.0))?;\n+                                        expr.id, expr.hir_id.local_id.as_u32()))?;\n                 s.pclose()\n             }\n             pprust_hir::AnnNode::Pat(pat) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"pat node_id: {} hir local_id: {}\",\n-                                        pat.id, pat.hir_id.local_id.0))\n+                                        pat.id, pat.hir_id.local_id.as_u32()))\n             }\n         }\n     }\n@@ -566,7 +566,7 @@ impl FromStr for UserIdentifiedItem {\n     type Err = ();\n     fn from_str(s: &str) -> Result<UserIdentifiedItem, ()> {\n         Ok(s.parse()\n-            .map(ast::NodeId::new)\n+            .map(ast::NodeId::from_u32)\n             .map(ItemViaNode)\n             .unwrap_or_else(|_| ItemViaPath(s.split(\"::\").map(|s| s.to_string()).collect())))\n     }"}, {"sha": "8865c7e438e5e1708f408b6f380e10b22515a940", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -232,20 +232,20 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n         // children of 1, etc\n \n         let dscope = region::Scope {\n-            id: hir::ItemLocalId(1),\n+            id: hir::ItemLocalId::from_u32(1),\n             data: region::ScopeData::Destruction,\n         };\n         self.region_scope_tree.record_scope_parent(dscope, None);\n         self.create_region_hierarchy(\n             &RH {\n-                id: hir::ItemLocalId(1),\n+                id: hir::ItemLocalId::from_u32(1),\n                 sub: &[\n                     RH {\n-                        id: hir::ItemLocalId(10),\n+                        id: hir::ItemLocalId::from_u32(10),\n                         sub: &[],\n                     },\n                     RH {\n-                        id: hir::ItemLocalId(11),\n+                        id: hir::ItemLocalId::from_u32(11),\n                         sub: &[],\n                     },\n                 ],\n@@ -400,7 +400,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_rptr_scope(&self, id: u32) -> Ty<'tcx> {\n         let r = ty::ReScope(region::Scope {\n-            id: hir::ItemLocalId(id),\n+            id: hir::ItemLocalId::from_u32(id),\n             data: region::ScopeData::Node,\n         });\n         self.infcx"}, {"sha": "5a91b50f6bcc9d1bbad31decd56904f167eb57b1", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let mut errors = false;\n         let mut seen_spans = FxHashSet::default();\n         let mut error_vec = Vec::new();\n-        let mut prev_root_id: NodeId = NodeId::new(0);\n+        let mut prev_root_id: NodeId = NodeId::from_u32(0);\n         for i in 0 .. self.determined_imports.len() {\n             let import = self.determined_imports[i];\n             let error = self.finalize_import(import);"}, {"sha": "471ba6345e248ed002112873c40bb9bbd54ab384", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -243,7 +243,7 @@ fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n         if tests.found_tests == 0 {\n             let mut diag = cx.tcx.struct_span_lint_node(\n                 lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                NodeId::new(0),\n+                NodeId::from_u32(0),\n                 span_of_attrs(&item.attrs),\n                 \"Missing code example in this documentation\");\n             diag.emit();\n@@ -281,14 +281,14 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n         let current_item = match item.inner {\n             ModuleItem(..) => {\n                 if item.attrs.inner_docs {\n-                    if item_node_id.unwrap() != NodeId::new(0) {\n+                    if item_node_id.unwrap() != NodeId::from_u32(0) {\n                         item.name.clone()\n                     } else {\n                         None\n                     }\n                 } else {\n                     match parent_node.or(self.mod_ids.last().cloned()) {\n-                        Some(parent) if parent != NodeId::new(0) => {\n+                        Some(parent) if parent != NodeId::from_u32(0) => {\n                             //FIXME: can we pull the parent module's name from elsewhere?\n                             Some(self.cx.tcx.hir.name(parent).to_string())\n                         }\n@@ -538,13 +538,13 @@ fn resolution_failure(\n             );\n \n             diag = cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-                                                NodeId::new(0),\n+                                                NodeId::from_u32(0),\n                                                 sp,\n                                                 &msg);\n             diag.span_label(sp, \"cannot be resolved, ignoring\");\n         } else {\n             diag = cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-                                                NodeId::new(0),\n+                                                NodeId::from_u32(0),\n                                                 sp,\n                                                 &msg);\n \n@@ -564,7 +564,7 @@ fn resolution_failure(\n         diag\n     } else {\n         cx.tcx.struct_span_lint_node(lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-                                     NodeId::new(0),\n+                                     NodeId::from_u32(0),\n                                      sp,\n                                      &msg)\n     };"}, {"sha": "227017a9073fec63be9c5cba4f7d140c866113c6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -18,7 +18,6 @@ pub use util::parser::ExprPrecedence;\n use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;\n use ptr::P;\n-use rustc_data_structures::indexed_vec;\n use rustc_data_structures::indexed_vec::Idx;\n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert;\n@@ -33,7 +32,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use serialize::{self, Decoder, Encoder};\n use std::fmt;\n-use std::u32;\n \n pub use rustc_target::abi::FloatTy;\n \n@@ -215,71 +213,54 @@ pub struct ParenthesisedArgs {\n     pub output: Option<P<Ty>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub struct NodeId(u32);\n-\n-impl NodeId {\n-    pub fn new(x: usize) -> NodeId {\n-        assert!(x < (u32::MAX as usize));\n-        NodeId(x as u32)\n-    }\n-\n-    pub fn from_u32(x: u32) -> NodeId {\n-        NodeId(x)\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n+mod node_id_inner {\n+    use rustc_data_structures::indexed_vec::Idx;\n+    newtype_index! {\n+        pub struct NodeId {\n+            ENCODABLE = custom\n+            DEBUG_FORMAT = \"NodeId({})\"\n+        }\n     }\n+}\n \n-    pub fn as_u32(&self) -> u32 {\n-        self.0\n-    }\n+pub use self::node_id_inner::NodeId;\n \n+impl NodeId {\n     pub fn placeholder_from_mark(mark: Mark) -> Self {\n-        NodeId(mark.as_u32())\n+        NodeId::from_u32(mark.as_u32())\n     }\n \n     pub fn placeholder_to_mark(self) -> Mark {\n-        Mark::from_u32(self.0)\n+        Mark::from_u32(self.as_u32())\n     }\n }\n \n impl fmt::Display for NodeId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        fmt::Display::fmt(&self.as_u32(), f)\n     }\n }\n \n impl serialize::UseSpecializedEncodable for NodeId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.0)\n+        s.emit_u32(self.as_u32())\n     }\n }\n \n impl serialize::UseSpecializedDecodable for NodeId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n-        d.read_u32().map(NodeId)\n-    }\n-}\n-\n-impl indexed_vec::Idx for NodeId {\n-    fn new(idx: usize) -> Self {\n-        NodeId::new(idx)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.as_usize()\n+        d.read_u32().map(NodeId::from_u32)\n     }\n }\n \n /// Node id used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId(0);\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have\n /// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = NodeId(!0);\n+pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here."}, {"sha": "9bbd59e09be158710092ccd5d7ad8a7b36ba60f7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -26,6 +26,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n+#![feature(step_trait)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n \n@@ -37,7 +38,7 @@ extern crate serialize;\n #[macro_use] extern crate log;\n pub extern crate rustc_errors as errors;\n extern crate syntax_pos;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n extern crate rustc_target;\n #[macro_use] extern crate scoped_tls;\n #[macro_use]"}, {"sha": "2c5de33232754cf3f97c1f66ee791a0d9e7ce7b4", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d5829d87f84138276a29058bf35291d5f64275a/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d5829d87f84138276a29058bf35291d5f64275a/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=1d5829d87f84138276a29058bf35291d5f64275a", "patch": "@@ -43,7 +43,7 @@ fn expand_mbe_matches(cx: &mut ExtCtxt, _: Span, args: &[TokenTree])\n                                     &[],\n                                     Edition::Edition2015,\n                                     // not used...\n-                                    NodeId::new(0));\n+                                    NodeId::from_u32(0));\n     let map = match TokenTree::parse(cx, &mbe_matcher, args.iter().cloned().collect()) {\n         Success(map) => map,\n         Failure(_, tok) => {"}]}