{"sha": "1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTdjNzA2YmQxYWJjOGI1M2NhZWNjMzhhMGZhNGRjMGYyMjhiYmI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:31Z"}, "message": "Rollup merge of #52908 - lnicola:vec-truncate-opt, r=alexcrichton\n\nUse SetLenOnDrop in Vec::truncate()\n\nThis avoids a redundant length check in some cases when calling\n`Vec::truncate` or `Vec::clear`.\n\nFixes #51802\n\nNote that the generated code still seems suboptimal. I tested with the following functions:\n\n```rust\n#[no_mangle]\npub extern fn foo(x: &mut Vec<u8>) {\n    x.clear();\n}\n\n#[no_mangle]\npub extern fn bar(x: &mut Vec<u8>) {\n    x.truncate(5);\n}\n\n#[no_mangle]\npub extern fn baz(x: &mut Vec<u8>, n: usize) {\n    x.truncate(n);\n}\n\n#[no_mangle]\npub extern fn foo_string(x: &mut Vec<String>) {\n    x.clear();\n}\n\n#[no_mangle]\npub extern fn bar_string(x: &mut Vec<String>) {\n    x.truncate(5);\n}\n\n#[no_mangle]\npub extern fn baz_string(x: &mut Vec<String>, n: usize) {\n    x.truncate(n);\n}\n```\n\n<details>\n  <summary>Old output</summary>\n\n```asm\n00000000000460a0 <foo>:\n   460a0:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)\n   460a5:       74 08                   je     460af <foo+0xf>\n   460a7:       48 c7 47 10 00 00 00    movq   $0x0,0x10(%rdi)\n   460ae:       00\n   460af:       c3                      retq\n\n00000000000460b0 <bar>:\n   460b0:       48 83 7f 10 06          cmpq   $0x6,0x10(%rdi)\n   460b5:       72 08                   jb     460bf <bar+0xf>\n   460b7:       48 c7 47 10 05 00 00    movq   $0x5,0x10(%rdi)\n   460be:       00\n   460bf:       c3                      retq\n\n00000000000460c0 <baz>:\n   460c0:       48 39 77 10             cmp    %rsi,0x10(%rdi)\n   460c4:       76 04                   jbe    460ca <baz+0xa>\n   460c6:       48 89 77 10             mov    %rsi,0x10(%rdi)\n   460ca:       c3                      retq\n   460cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n00000000000460d0 <foo_string>:\n   460d0:       41 57                   push   %r15\n   460d2:       41 56                   push   %r14\n   460d4:       53                      push   %rbx\n   460d5:       48 8b 47 10             mov    0x10(%rdi),%rax\n   460d9:       48 85 c0                test   %rax,%rax\n   460dc:       74 4a                   je     46128 <foo_string+0x58>\n   460de:       49 89 fe                mov    %rdi,%r14\n   460e1:       48 8b 0f                mov    (%rdi),%rcx\n   460e4:       48 8d 14 40             lea    (%rax,%rax,2),%rdx\n   460e8:       48 8d 58 ff             lea    -0x1(%rax),%rbx\n   460ec:       4c 8d 3c d1             lea    (%rcx,%rdx,8),%r15\n   460f0:       49 83 c7 f0             add    $0xfffffffffffffff0,%r15\n   460f4:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   460fb:       00 00 00\n   460fe:       66 90                   xchg   %ax,%ax\n   46100:       49 89 5e 10             mov    %rbx,0x10(%r14)\n   46104:       49 8b 37                mov    (%r15),%rsi\n   46107:       48 85 f6                test   %rsi,%rsi\n   4610a:       74 0e                   je     4611a <foo_string+0x4a>\n   4610c:       49 8b 7f f8             mov    -0x8(%r15),%rdi\n   46110:       ba 01 00 00 00          mov    $0x1,%edx\n   46115:       e8 a6 e9 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   4611a:       48 83 c3 ff             add    $0xffffffffffffffff,%rbx\n   4611e:       49 83 c7 e8             add    $0xffffffffffffffe8,%r15\n   46122:       48 83 fb ff             cmp    $0xffffffffffffffff,%rbx\n   46126:       75 d8                   jne    46100 <foo_string+0x30>\n   46128:       5b                      pop    %rbx\n   46129:       41 5e                   pop    %r14\n   4612b:       41 5f                   pop    %r15\n   4612d:       c3                      retq\n   4612e:       66 90                   xchg   %ax,%ax\n\n0000000000046130 <bar_string>:\n   46130:       41 57                   push   %r15\n   46132:       41 56                   push   %r14\n   46134:       53                      push   %rbx\n   46135:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   46139:       49 83 ff 06             cmp    $0x6,%r15\n   4613d:       72 49                   jb     46188 <bar_string+0x58>\n   4613f:       49 89 fe                mov    %rdi,%r14\n   46142:       48 8b 07                mov    (%rdi),%rax\n   46145:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   46149:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   4614d:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   46151:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   46158:       00 00 00\n   4615b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n   46160:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   46164:       4d 89 7e 10             mov    %r15,0x10(%r14)\n   46168:       48 8b 33                mov    (%rbx),%rsi\n   4616b:       48 85 f6                test   %rsi,%rsi\n   4616e:       74 0e                   je     4617e <bar_string+0x4e>\n   46170:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   46174:       ba 01 00 00 00          mov    $0x1,%edx\n   46179:       e8 42 e9 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   4617e:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   46182:       49 83 ff 05             cmp    $0x5,%r15\n   46186:       77 d8                   ja     46160 <bar_string+0x30>\n   46188:       5b                      pop    %rbx\n   46189:       41 5e                   pop    %r14\n   4618b:       41 5f                   pop    %r15\n   4618d:       c3                      retq\n   4618e:       66 90                   xchg   %ax,%ax\n\n0000000000046190 <baz_string>:\n   46190:       41 57                   push   %r15\n   46192:       41 56                   push   %r14\n   46194:       41 54                   push   %r12\n   46196:       53                      push   %rbx\n   46197:       50                      push   %rax\n   46198:       4c 8b 67 10             mov    0x10(%rdi),%r12\n   4619c:       49 39 f4                cmp    %rsi,%r12\n   4619f:       76 46                   jbe    461e7 <baz_string+0x57>\n   461a1:       49 89 f6                mov    %rsi,%r14\n   461a4:       49 89 ff                mov    %rdi,%r15\n   461a7:       48 8b 07                mov    (%rdi),%rax\n   461aa:       4b 8d 0c 64             lea    (%r12,%r12,2),%rcx\n   461ae:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   461b2:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   461b6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   461bd:       00 00 00\n   461c0:       49 83 c4 ff             add    $0xffffffffffffffff,%r12\n   461c4:       4d 89 67 10             mov    %r12,0x10(%r15)\n   461c8:       48 8b 33                mov    (%rbx),%rsi\n   461cb:       48 85 f6                test   %rsi,%rsi\n   461ce:       74 0e                   je     461de <baz_string+0x4e>\n   461d0:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   461d4:       ba 01 00 00 00          mov    $0x1,%edx\n   461d9:       e8 e2 e8 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   461de:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   461e2:       4d 39 f4                cmp    %r14,%r12\n   461e5:       77 d9                   ja     461c0 <baz_string+0x30>\n   461e7:       48 83 c4 08             add    $0x8,%rsp\n   461eb:       5b                      pop    %rbx\n   461ec:       41 5c                   pop    %r12\n   461ee:       41 5e                   pop    %r14\n   461f0:       41 5f                   pop    %r15\n   461f2:       c3                      retq\n   461f3:       90                      nop\n   461f4:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   461fb:       00 00 00\n   461fe:       66 90                   xchg   %ax,%ax\n```\n</details>\n\n<details>\n  <summary>New output</summary>\n\n```asm\n0000000000084d10 <foo>:\n   84d10:       48 c7 47 10 00 00 00    movq   $0x0,0x10(%rdi)\n   84d17:       00\n   84d18:       c3                      retq\n   84d19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n\n0000000000084d20 <bar>:\n   84d20:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84d24:       48 83 f8 05             cmp    $0x5,%rax\n   84d28:       b9 05 00 00 00          mov    $0x5,%ecx\n   84d2d:       48 0f 42 c8             cmovb  %rax,%rcx\n   84d31:       48 89 4f 10             mov    %rcx,0x10(%rdi)\n   84d35:       c3                      retq\n   84d36:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84d3d:       00 00 00\n\n0000000000084d40 <baz>:\n   84d40:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84d44:       48 39 f0                cmp    %rsi,%rax\n   84d47:       48 0f 47 c6             cmova  %rsi,%rax\n   84d4b:       48 89 47 10             mov    %rax,0x10(%rdi)\n   84d4f:       c3                      retq\n\n0000000000084d50 <foo_string>:\n   84d50:       41 57                   push   %r15\n   84d52:       41 56                   push   %r14\n   84d54:       53                      push   %rbx\n   84d55:       49 89 fe                mov    %rdi,%r14\n   84d58:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   84d5c:       4d 85 ff                test   %r15,%r15\n   84d5f:       74 2f                   je     84d90 <foo_string+0x40>\n   84d61:       49 8b 06                mov    (%r14),%rax\n   84d64:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   84d68:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   84d6c:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84d70:       48 8b 33                mov    (%rbx),%rsi\n   84d73:       48 85 f6                test   %rsi,%rsi\n   84d76:       74 0e                   je     84d86 <foo_string+0x36>\n   84d78:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84d7c:       ba 01 00 00 00          mov    $0x1,%edx\n   84d81:       e8 1a b1 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84d86:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84d8a:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   84d8e:       75 e0                   jne    84d70 <foo_string+0x20>\n   84d90:       49 c7 46 10 00 00 00    movq   $0x0,0x10(%r14)\n   84d97:       00\n   84d98:       5b                      pop    %rbx\n   84d99:       41 5e                   pop    %r14\n   84d9b:       41 5f                   pop    %r15\n   84d9d:       c3                      retq\n   84d9e:       66 90                   xchg   %ax,%ax\n\n0000000000084da0 <bar_string>:\n   84da0:       41 57                   push   %r15\n   84da2:       41 56                   push   %r14\n   84da4:       53                      push   %rbx\n   84da5:       49 89 fe                mov    %rdi,%r14\n   84da8:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   84dac:       49 83 ff 06             cmp    $0x6,%r15\n   84db0:       72 44                   jb     84df6 <bar_string+0x56>\n   84db2:       49 8b 06                mov    (%r14),%rax\n   84db5:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   84db9:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   84dbd:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84dc1:       49 83 c7 fb             add    $0xfffffffffffffffb,%r15\n   84dc5:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84dcc:       00 00 00\n   84dcf:       90                      nop\n   84dd0:       48 8b 33                mov    (%rbx),%rsi\n   84dd3:       48 85 f6                test   %rsi,%rsi\n   84dd6:       74 0e                   je     84de6 <bar_string+0x46>\n   84dd8:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84ddc:       ba 01 00 00 00          mov    $0x1,%edx\n   84de1:       e8 ba b0 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84de6:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84dea:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   84dee:       75 e0                   jne    84dd0 <bar_string+0x30>\n   84df0:       41 bf 05 00 00 00       mov    $0x5,%r15d\n   84df6:       4d 89 7e 10             mov    %r15,0x10(%r14)\n   84dfa:       5b                      pop    %rbx\n   84dfb:       41 5e                   pop    %r14\n   84dfd:       41 5f                   pop    %r15\n   84dff:       c3                      retq\n\n0000000000084e00 <baz_string>:\n   84e00:       41 57                   push   %r15\n   84e02:       41 56                   push   %r14\n   84e04:       41 54                   push   %r12\n   84e06:       53                      push   %rbx\n   84e07:       50                      push   %rax\n   84e08:       49 89 ff                mov    %rdi,%r15\n   84e0b:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84e0f:       49 89 c4                mov    %rax,%r12\n   84e12:       49 29 f4                sub    %rsi,%r12\n   84e15:       76 3c                   jbe    84e53 <baz_string+0x53>\n   84e17:       49 89 f6                mov    %rsi,%r14\n   84e1a:       49 8b 0f                mov    (%r15),%rcx\n   84e1d:       48 8d 04 40             lea    (%rax,%rax,2),%rax\n   84e21:       48 8d 1c c1             lea    (%rcx,%rax,8),%rbx\n   84e25:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84e29:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n   84e30:       48 8b 33                mov    (%rbx),%rsi\n   84e33:       48 85 f6                test   %rsi,%rsi\n   84e36:       74 0e                   je     84e46 <baz_string+0x46>\n   84e38:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84e3c:       ba 01 00 00 00          mov    $0x1,%edx\n   84e41:       e8 5a b0 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84e46:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84e4a:       49 83 c4 ff             add    $0xffffffffffffffff,%r12\n   84e4e:       75 e0                   jne    84e30 <baz_string+0x30>\n   84e50:       4c 89 f0                mov    %r14,%rax\n   84e53:       49 89 47 10             mov    %rax,0x10(%r15)\n   84e57:       48 83 c4 08             add    $0x8,%rsp\n   84e5b:       5b                      pop    %rbx\n   84e5c:       41 5c                   pop    %r12\n   84e5e:       41 5e                   pop    %r14\n   84e60:       41 5f                   pop    %r15\n   84e62:       c3                      retq\n   84e63:       90                      nop\n   84e64:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84e6b:       00 00 00\n   84e6e:       66 90                   xchg   %ax,%ax\n```\n</details>\n\nFor calling `truncate` with non-zero lengths on non-`Drop` types, it seems that a redundant load and comparison gets replaced with an awkward sequence with a conditional move. In the unknown length case, the new code is no longer awkward.\n\nMaybe someone moderately proficient at assembly could tell if this looks like a win or not.\n\n---\n\nThis came up when discussing replacing `unsafe { vec.set_len(0) }` with `vec.clear()` in a project where the author was worried about potential performance degradation. It might be worth replacing some unsafe code, even it it's trivial to see that it's actually safe.", "tree": {"sha": "eca1f391a19ce94dee1e8a7363e2914c7dc531ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca1f391a19ce94dee1e8a7363e2914c7dc531ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4XCRBK7hj4Ov3rIwAAdHIIAJFkdfjl31IxkCsnaeMGpI6b\nCRIvB06S5qakM2GHFkGRxRExlq4w/ycb0fKMRUfEb9/oWFQsHUB/KJIGxh7Cn7Xz\nWm/sAmmqp0lpCkoC6Pe8014jkxDtwPhRRbup9l5dLlGUPDjvrcOcDD3rXkWxfFB8\nsjdd0FhivJdhTE1MzfeZhtXX0R764c1LVboYcmH7gARKdnto8Yz4Ihjkl+BnuFF/\ny9bqsrc93YvH4pMm0sVSG803JxIvYljXP3gdkZQvSesHDAUqbFXSRgVnMbMVGyv6\nu6C5nZ+0hsHEUW6QkIUqwqFjMfHKyVxU+V2f9zfA91S/o4mfsx0tHwjoKvyZVU0=\n=W9ZP\n-----END PGP SIGNATURE-----\n", "payload": "tree eca1f391a19ce94dee1e8a7363e2914c7dc531ae\nparent 3ae03e95b3239ae84bda77c685093182e5873fc4\nparent 38e311e4486b475c498ed1afdb6a036cdd702ebf\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152791 +0200\ncommitter GitHub <noreply@github.com> 1533152791 +0200\n\nRollup merge of #52908 - lnicola:vec-truncate-opt, r=alexcrichton\n\nUse SetLenOnDrop in Vec::truncate()\n\nThis avoids a redundant length check in some cases when calling\n`Vec::truncate` or `Vec::clear`.\n\nFixes #51802\n\nNote that the generated code still seems suboptimal. I tested with the following functions:\n\n```rust\n#[no_mangle]\npub extern fn foo(x: &mut Vec<u8>) {\n    x.clear();\n}\n\n#[no_mangle]\npub extern fn bar(x: &mut Vec<u8>) {\n    x.truncate(5);\n}\n\n#[no_mangle]\npub extern fn baz(x: &mut Vec<u8>, n: usize) {\n    x.truncate(n);\n}\n\n#[no_mangle]\npub extern fn foo_string(x: &mut Vec<String>) {\n    x.clear();\n}\n\n#[no_mangle]\npub extern fn bar_string(x: &mut Vec<String>) {\n    x.truncate(5);\n}\n\n#[no_mangle]\npub extern fn baz_string(x: &mut Vec<String>, n: usize) {\n    x.truncate(n);\n}\n```\n\n<details>\n  <summary>Old output</summary>\n\n```asm\n00000000000460a0 <foo>:\n   460a0:       48 83 7f 10 00          cmpq   $0x0,0x10(%rdi)\n   460a5:       74 08                   je     460af <foo+0xf>\n   460a7:       48 c7 47 10 00 00 00    movq   $0x0,0x10(%rdi)\n   460ae:       00\n   460af:       c3                      retq\n\n00000000000460b0 <bar>:\n   460b0:       48 83 7f 10 06          cmpq   $0x6,0x10(%rdi)\n   460b5:       72 08                   jb     460bf <bar+0xf>\n   460b7:       48 c7 47 10 05 00 00    movq   $0x5,0x10(%rdi)\n   460be:       00\n   460bf:       c3                      retq\n\n00000000000460c0 <baz>:\n   460c0:       48 39 77 10             cmp    %rsi,0x10(%rdi)\n   460c4:       76 04                   jbe    460ca <baz+0xa>\n   460c6:       48 89 77 10             mov    %rsi,0x10(%rdi)\n   460ca:       c3                      retq\n   460cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n00000000000460d0 <foo_string>:\n   460d0:       41 57                   push   %r15\n   460d2:       41 56                   push   %r14\n   460d4:       53                      push   %rbx\n   460d5:       48 8b 47 10             mov    0x10(%rdi),%rax\n   460d9:       48 85 c0                test   %rax,%rax\n   460dc:       74 4a                   je     46128 <foo_string+0x58>\n   460de:       49 89 fe                mov    %rdi,%r14\n   460e1:       48 8b 0f                mov    (%rdi),%rcx\n   460e4:       48 8d 14 40             lea    (%rax,%rax,2),%rdx\n   460e8:       48 8d 58 ff             lea    -0x1(%rax),%rbx\n   460ec:       4c 8d 3c d1             lea    (%rcx,%rdx,8),%r15\n   460f0:       49 83 c7 f0             add    $0xfffffffffffffff0,%r15\n   460f4:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   460fb:       00 00 00\n   460fe:       66 90                   xchg   %ax,%ax\n   46100:       49 89 5e 10             mov    %rbx,0x10(%r14)\n   46104:       49 8b 37                mov    (%r15),%rsi\n   46107:       48 85 f6                test   %rsi,%rsi\n   4610a:       74 0e                   je     4611a <foo_string+0x4a>\n   4610c:       49 8b 7f f8             mov    -0x8(%r15),%rdi\n   46110:       ba 01 00 00 00          mov    $0x1,%edx\n   46115:       e8 a6 e9 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   4611a:       48 83 c3 ff             add    $0xffffffffffffffff,%rbx\n   4611e:       49 83 c7 e8             add    $0xffffffffffffffe8,%r15\n   46122:       48 83 fb ff             cmp    $0xffffffffffffffff,%rbx\n   46126:       75 d8                   jne    46100 <foo_string+0x30>\n   46128:       5b                      pop    %rbx\n   46129:       41 5e                   pop    %r14\n   4612b:       41 5f                   pop    %r15\n   4612d:       c3                      retq\n   4612e:       66 90                   xchg   %ax,%ax\n\n0000000000046130 <bar_string>:\n   46130:       41 57                   push   %r15\n   46132:       41 56                   push   %r14\n   46134:       53                      push   %rbx\n   46135:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   46139:       49 83 ff 06             cmp    $0x6,%r15\n   4613d:       72 49                   jb     46188 <bar_string+0x58>\n   4613f:       49 89 fe                mov    %rdi,%r14\n   46142:       48 8b 07                mov    (%rdi),%rax\n   46145:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   46149:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   4614d:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   46151:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   46158:       00 00 00\n   4615b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n   46160:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   46164:       4d 89 7e 10             mov    %r15,0x10(%r14)\n   46168:       48 8b 33                mov    (%rbx),%rsi\n   4616b:       48 85 f6                test   %rsi,%rsi\n   4616e:       74 0e                   je     4617e <bar_string+0x4e>\n   46170:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   46174:       ba 01 00 00 00          mov    $0x1,%edx\n   46179:       e8 42 e9 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   4617e:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   46182:       49 83 ff 05             cmp    $0x5,%r15\n   46186:       77 d8                   ja     46160 <bar_string+0x30>\n   46188:       5b                      pop    %rbx\n   46189:       41 5e                   pop    %r14\n   4618b:       41 5f                   pop    %r15\n   4618d:       c3                      retq\n   4618e:       66 90                   xchg   %ax,%ax\n\n0000000000046190 <baz_string>:\n   46190:       41 57                   push   %r15\n   46192:       41 56                   push   %r14\n   46194:       41 54                   push   %r12\n   46196:       53                      push   %rbx\n   46197:       50                      push   %rax\n   46198:       4c 8b 67 10             mov    0x10(%rdi),%r12\n   4619c:       49 39 f4                cmp    %rsi,%r12\n   4619f:       76 46                   jbe    461e7 <baz_string+0x57>\n   461a1:       49 89 f6                mov    %rsi,%r14\n   461a4:       49 89 ff                mov    %rdi,%r15\n   461a7:       48 8b 07                mov    (%rdi),%rax\n   461aa:       4b 8d 0c 64             lea    (%r12,%r12,2),%rcx\n   461ae:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   461b2:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   461b6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   461bd:       00 00 00\n   461c0:       49 83 c4 ff             add    $0xffffffffffffffff,%r12\n   461c4:       4d 89 67 10             mov    %r12,0x10(%r15)\n   461c8:       48 8b 33                mov    (%rbx),%rsi\n   461cb:       48 85 f6                test   %rsi,%rsi\n   461ce:       74 0e                   je     461de <baz_string+0x4e>\n   461d0:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   461d4:       ba 01 00 00 00          mov    $0x1,%edx\n   461d9:       e8 e2 e8 ff ff          callq  44ac0 <__rust_dealloc@plt>\n   461de:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   461e2:       4d 39 f4                cmp    %r14,%r12\n   461e5:       77 d9                   ja     461c0 <baz_string+0x30>\n   461e7:       48 83 c4 08             add    $0x8,%rsp\n   461eb:       5b                      pop    %rbx\n   461ec:       41 5c                   pop    %r12\n   461ee:       41 5e                   pop    %r14\n   461f0:       41 5f                   pop    %r15\n   461f2:       c3                      retq\n   461f3:       90                      nop\n   461f4:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   461fb:       00 00 00\n   461fe:       66 90                   xchg   %ax,%ax\n```\n</details>\n\n<details>\n  <summary>New output</summary>\n\n```asm\n0000000000084d10 <foo>:\n   84d10:       48 c7 47 10 00 00 00    movq   $0x0,0x10(%rdi)\n   84d17:       00\n   84d18:       c3                      retq\n   84d19:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n\n0000000000084d20 <bar>:\n   84d20:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84d24:       48 83 f8 05             cmp    $0x5,%rax\n   84d28:       b9 05 00 00 00          mov    $0x5,%ecx\n   84d2d:       48 0f 42 c8             cmovb  %rax,%rcx\n   84d31:       48 89 4f 10             mov    %rcx,0x10(%rdi)\n   84d35:       c3                      retq\n   84d36:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84d3d:       00 00 00\n\n0000000000084d40 <baz>:\n   84d40:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84d44:       48 39 f0                cmp    %rsi,%rax\n   84d47:       48 0f 47 c6             cmova  %rsi,%rax\n   84d4b:       48 89 47 10             mov    %rax,0x10(%rdi)\n   84d4f:       c3                      retq\n\n0000000000084d50 <foo_string>:\n   84d50:       41 57                   push   %r15\n   84d52:       41 56                   push   %r14\n   84d54:       53                      push   %rbx\n   84d55:       49 89 fe                mov    %rdi,%r14\n   84d58:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   84d5c:       4d 85 ff                test   %r15,%r15\n   84d5f:       74 2f                   je     84d90 <foo_string+0x40>\n   84d61:       49 8b 06                mov    (%r14),%rax\n   84d64:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   84d68:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   84d6c:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84d70:       48 8b 33                mov    (%rbx),%rsi\n   84d73:       48 85 f6                test   %rsi,%rsi\n   84d76:       74 0e                   je     84d86 <foo_string+0x36>\n   84d78:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84d7c:       ba 01 00 00 00          mov    $0x1,%edx\n   84d81:       e8 1a b1 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84d86:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84d8a:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   84d8e:       75 e0                   jne    84d70 <foo_string+0x20>\n   84d90:       49 c7 46 10 00 00 00    movq   $0x0,0x10(%r14)\n   84d97:       00\n   84d98:       5b                      pop    %rbx\n   84d99:       41 5e                   pop    %r14\n   84d9b:       41 5f                   pop    %r15\n   84d9d:       c3                      retq\n   84d9e:       66 90                   xchg   %ax,%ax\n\n0000000000084da0 <bar_string>:\n   84da0:       41 57                   push   %r15\n   84da2:       41 56                   push   %r14\n   84da4:       53                      push   %rbx\n   84da5:       49 89 fe                mov    %rdi,%r14\n   84da8:       4c 8b 7f 10             mov    0x10(%rdi),%r15\n   84dac:       49 83 ff 06             cmp    $0x6,%r15\n   84db0:       72 44                   jb     84df6 <bar_string+0x56>\n   84db2:       49 8b 06                mov    (%r14),%rax\n   84db5:       4b 8d 0c 7f             lea    (%r15,%r15,2),%rcx\n   84db9:       48 8d 1c c8             lea    (%rax,%rcx,8),%rbx\n   84dbd:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84dc1:       49 83 c7 fb             add    $0xfffffffffffffffb,%r15\n   84dc5:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84dcc:       00 00 00\n   84dcf:       90                      nop\n   84dd0:       48 8b 33                mov    (%rbx),%rsi\n   84dd3:       48 85 f6                test   %rsi,%rsi\n   84dd6:       74 0e                   je     84de6 <bar_string+0x46>\n   84dd8:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84ddc:       ba 01 00 00 00          mov    $0x1,%edx\n   84de1:       e8 ba b0 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84de6:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84dea:       49 83 c7 ff             add    $0xffffffffffffffff,%r15\n   84dee:       75 e0                   jne    84dd0 <bar_string+0x30>\n   84df0:       41 bf 05 00 00 00       mov    $0x5,%r15d\n   84df6:       4d 89 7e 10             mov    %r15,0x10(%r14)\n   84dfa:       5b                      pop    %rbx\n   84dfb:       41 5e                   pop    %r14\n   84dfd:       41 5f                   pop    %r15\n   84dff:       c3                      retq\n\n0000000000084e00 <baz_string>:\n   84e00:       41 57                   push   %r15\n   84e02:       41 56                   push   %r14\n   84e04:       41 54                   push   %r12\n   84e06:       53                      push   %rbx\n   84e07:       50                      push   %rax\n   84e08:       49 89 ff                mov    %rdi,%r15\n   84e0b:       48 8b 47 10             mov    0x10(%rdi),%rax\n   84e0f:       49 89 c4                mov    %rax,%r12\n   84e12:       49 29 f4                sub    %rsi,%r12\n   84e15:       76 3c                   jbe    84e53 <baz_string+0x53>\n   84e17:       49 89 f6                mov    %rsi,%r14\n   84e1a:       49 8b 0f                mov    (%r15),%rcx\n   84e1d:       48 8d 04 40             lea    (%rax,%rax,2),%rax\n   84e21:       48 8d 1c c1             lea    (%rcx,%rax,8),%rbx\n   84e25:       48 83 c3 f0             add    $0xfffffffffffffff0,%rbx\n   84e29:       0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n   84e30:       48 8b 33                mov    (%rbx),%rsi\n   84e33:       48 85 f6                test   %rsi,%rsi\n   84e36:       74 0e                   je     84e46 <baz_string+0x46>\n   84e38:       48 8b 7b f8             mov    -0x8(%rbx),%rdi\n   84e3c:       ba 01 00 00 00          mov    $0x1,%edx\n   84e41:       e8 5a b0 ff ff          callq  7fea0 <__rust_dealloc@plt>\n   84e46:       48 83 c3 e8             add    $0xffffffffffffffe8,%rbx\n   84e4a:       49 83 c4 ff             add    $0xffffffffffffffff,%r12\n   84e4e:       75 e0                   jne    84e30 <baz_string+0x30>\n   84e50:       4c 89 f0                mov    %r14,%rax\n   84e53:       49 89 47 10             mov    %rax,0x10(%r15)\n   84e57:       48 83 c4 08             add    $0x8,%rsp\n   84e5b:       5b                      pop    %rbx\n   84e5c:       41 5c                   pop    %r12\n   84e5e:       41 5e                   pop    %r14\n   84e60:       41 5f                   pop    %r15\n   84e62:       c3                      retq\n   84e63:       90                      nop\n   84e64:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n   84e6b:       00 00 00\n   84e6e:       66 90                   xchg   %ax,%ax\n```\n</details>\n\nFor calling `truncate` with non-zero lengths on non-`Drop` types, it seems that a redundant load and comparison gets replaced with an awkward sequence with a conditional move. In the unknown length case, the new code is no longer awkward.\n\nMaybe someone moderately proficient at assembly could tell if this looks like a win or not.\n\n---\n\nThis came up when discussing replacing `unsafe { vec.set_len(0) }` with `vec.clear()` in a project where the author was worried about potential performance degradation. It might be worth replacing some unsafe code, even it it's trivial to see that it's actually safe.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "html_url": "https://github.com/rust-lang/rust/commit/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae03e95b3239ae84bda77c685093182e5873fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae03e95b3239ae84bda77c685093182e5873fc4", "html_url": "https://github.com/rust-lang/rust/commit/3ae03e95b3239ae84bda77c685093182e5873fc4"}, {"sha": "38e311e4486b475c498ed1afdb6a036cdd702ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e311e4486b475c498ed1afdb6a036cdd702ebf", "html_url": "https://github.com/rust-lang/rust/commit/38e311e4486b475c498ed1afdb6a036cdd702ebf"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "cc913dfbb4b01e140abb47403998f7a65c224f3a", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "patch": "@@ -690,14 +690,20 @@ impl<T> Vec<T> {\n     /// [`drain`]: #method.drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n+        let current_len = self.len;\n         unsafe {\n+            let mut ptr = self.as_mut_ptr().offset(self.len as isize);\n+            // Set the final length at the end, keeping in mind that\n+            // dropping an element might panic. Works around a missed\n+            // optimization, as seen in the following issue:\n+            // https://github.com/rust-lang/rust/issues/51802\n+            let mut local_len = SetLenOnDrop::new(&mut self.len);\n+\n             // drop any extra elements\n-            while len < self.len {\n-                // decrement len before the drop_in_place(), so a panic on Drop\n-                // doesn't re-drop the just-failed value.\n-                self.len -= 1;\n-                let len = self.len;\n-                ptr::drop_in_place(self.get_unchecked_mut(len));\n+            for _ in len..current_len {\n+                local_len.decrement_len(1);\n+                ptr = ptr.offset(-1);\n+                ptr::drop_in_place(ptr);\n             }\n         }\n     }\n@@ -1512,6 +1518,11 @@ impl<'a> SetLenOnDrop<'a> {\n     fn increment_len(&mut self, increment: usize) {\n         self.local_len += increment;\n     }\n+\n+    #[inline]\n+    fn decrement_len(&mut self, decrement: usize) {\n+        self.local_len -= decrement;\n+    }\n }\n \n impl<'a> Drop for SetLenOnDrop<'a> {"}, {"sha": "a73dd077cea11cb3fec6062864f98f8eb6958ddf", "filename": "src/test/codegen/vec-clear.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1997c706bd1abc8b53caecc38a0fa4dc0f228bbb/src%2Ftest%2Fcodegen%2Fvec-clear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-clear.rs?ref=1997c706bd1abc8b53caecc38a0fa4dc0f228bbb", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @vec_clear\n+#[no_mangle]\n+pub fn vec_clear(x: &mut Vec<u32>) {\n+    // CHECK-NOT: load\n+    // CHECK-NOT: icmp\n+    x.clear()\n+}"}]}