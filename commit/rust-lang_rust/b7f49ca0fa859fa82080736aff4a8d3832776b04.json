{"sha": "b7f49ca0fa859fa82080736aff4a8d3832776b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjQ5Y2EwZmE4NTlmYTgyMDgwNzM2YWZmNGE4ZDM4MzI3NzZiMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-20T23:14:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-20T23:14:58Z"}, "message": "Auto merge of #28539 - rkruppe:shuffle-num-internals, r=alexcrichton\n\nMove private bignum module to core::num, because it is not only used in flt2dec.\r\nExtract private 80-bit soft-float into new core::num module for the same reason.", "tree": {"sha": "8f9a3732d49d90cc438c3440e8895747f72934ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f9a3732d49d90cc438c3440e8895747f72934ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f49ca0fa859fa82080736aff4a8d3832776b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f49ca0fa859fa82080736aff4a8d3832776b04", "html_url": "https://github.com/rust-lang/rust/commit/b7f49ca0fa859fa82080736aff4a8d3832776b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f49ca0fa859fa82080736aff4a8d3832776b04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d259e618b2b60998523e174b2b172f0780d8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d259e618b2b60998523e174b2b172f0780d8d9", "html_url": "https://github.com/rust-lang/rust/commit/79d259e618b2b60998523e174b2b172f0780d8d9"}, {"sha": "cd67ec306fda0e3d39ead0eda3de2c0b3dd696e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd67ec306fda0e3d39ead0eda3de2c0b3dd696e2", "html_url": "https://github.com/rust-lang/rust/commit/cd67ec306fda0e3d39ead0eda3de2c0b3dd696e2"}], "stats": {"total": 185, "additions": 106, "deletions": 79}, "files": [{"sha": "baeca6b8b498f7f987869271291aa393002647e5", "filename": "src/libcore/num/bignum.rs", "status": "renamed", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -19,6 +19,12 @@\n //! inputs, but we don't do so to avoid the code bloat. Each bignum is still\n //! tracked for the actual usages, so it normally doesn't matter.\n \n+// This module is only for dec2flt and flt2dec, and only public because of libcoretest.\n+// It is not intended to ever be stabilized.\n+#![doc(hidden)]\n+#![unstable(feature = \"core_private_bignum\",\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n #![macro_use]\n \n use prelude::v1::*;\n@@ -194,7 +200,7 @@ macro_rules! define_bignum {\n             /// Adds `other` to itself and returns its own mutable reference.\n             pub fn add<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use cmp;\n-                use num::flt2dec::bignum::FullOps;\n+                use num::bignum::FullOps;\n \n                 let mut sz = cmp::max(self.size, other.size);\n                 let mut carry = false;\n@@ -212,7 +218,7 @@ macro_rules! define_bignum {\n             }\n \n             pub fn add_small(&mut self, other: $ty) -> &mut $name {\n-                use num::flt2dec::bignum::FullOps;\n+                use num::bignum::FullOps;\n \n                 let (mut carry, v) = self.base[0].full_add(other, false);\n                 self.base[0] = v;\n@@ -232,7 +238,7 @@ macro_rules! define_bignum {\n             /// Subtracts `other` from itself and returns its own mutable reference.\n             pub fn sub<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use cmp;\n-                use num::flt2dec::bignum::FullOps;\n+                use num::bignum::FullOps;\n \n                 let sz = cmp::max(self.size, other.size);\n                 let mut noborrow = true;\n@@ -249,7 +255,7 @@ macro_rules! define_bignum {\n             /// Multiplies itself by a digit-sized `other` and returns its own\n             /// mutable reference.\n             pub fn mul_small(&mut self, other: $ty) -> &mut $name {\n-                use num::flt2dec::bignum::FullOps;\n+                use num::bignum::FullOps;\n \n                 let mut sz = self.size;\n                 let mut carry = 0;\n@@ -310,7 +316,7 @@ macro_rules! define_bignum {\n             /// Multiplies itself by `5^e` and returns its own mutable reference.\n             pub fn mul_pow5(&mut self, mut e: usize) -> &mut $name {\n                 use mem;\n-                use num::flt2dec::bignum::SMALL_POW5;\n+                use num::bignum::SMALL_POW5;\n \n                 // There are exactly n trailing zeros on 2^n, and the only relevant digit sizes\n                 // are consecutive powers of two, so this is well suited index for the table.\n@@ -341,7 +347,7 @@ macro_rules! define_bignum {\n             pub fn mul_digits<'a>(&'a mut self, other: &[$ty]) -> &'a mut $name {\n                 // the internal routine. works best when aa.len() <= bb.len().\n                 fn mul_inner(ret: &mut [$ty; $n], aa: &[$ty], bb: &[$ty]) -> usize {\n-                    use num::flt2dec::bignum::FullOps;\n+                    use num::bignum::FullOps;\n \n                     let mut retsz = 0;\n                     for (i, &a) in aa.iter().enumerate() {\n@@ -378,7 +384,7 @@ macro_rules! define_bignum {\n             /// Divides itself by a digit-sized `other` and returns its own\n             /// mutable reference *and* the remainder.\n             pub fn div_rem_small(&mut self, other: $ty) -> (&mut $name, $ty) {\n-                use num::flt2dec::bignum::FullOps;\n+                use num::bignum::FullOps;\n \n                 assert!(other > 0);\n ", "previous_filename": "src/libcore/num/flt2dec/bignum.rs"}, {"sha": "1f0f06d746197151f704f818a50de782b6d67b91", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -10,13 +10,13 @@\n \n //! The various algorithms from the paper.\n \n-use num::flt2dec::strategy::grisu::Fp;\n use prelude::v1::*;\n use cmp::min;\n use cmp::Ordering::{Less, Equal, Greater};\n-use super::table;\n-use super::rawfp::{self, Unpacked, RawFloat, fp_to_float, next_float, prev_float};\n-use super::num::{self, Big};\n+use num::diy_float::Fp;\n+use num::dec2flt::table;\n+use num::dec2flt::rawfp::{self, Unpacked, RawFloat, fp_to_float, next_float, prev_float};\n+use num::dec2flt::num::{self, Big};\n \n /// Number of significand bits in Fp\n const P: u32 = 64;"}, {"sha": "55be4cd31910baedc5b547c1b9a1a0f3b728efd5", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -86,9 +86,6 @@\n //! \"such that the exponent +/- the number of decimal digits fits into a 64 bit integer\".\n //! Larger exponents are accepted, but we don't do arithmetic with them, they are immediately\n //! turned into {positive,negative} {zero,infinity}.\n-//!\n-//! FIXME: this uses several things from core::num::flt2dec, which is nonsense. Those things\n-//! should be moved into core::num::<something else>.\n \n #![doc(hidden)]\n #![unstable(feature = \"dec2flt\","}, {"sha": "81e7856633b2571f9f0a33c2295671deefc1bda9", "filename": "src/libcore/num/dec2flt/num.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -14,9 +14,8 @@\n \n use prelude::v1::*;\n use cmp::Ordering::{self, Less, Equal, Greater};\n-use num::flt2dec::bignum::Big32x40;\n \n-pub type Big = Big32x40;\n+pub use num::bignum::Big32x40 as Big;\n \n /// Test whether truncating all bits less significant than `ones_place` introduces\n /// a relative error less, equal, or greater than 0.5 ULP."}, {"sha": "be61653c37937f161e4cffad5fbf90b2abe96007", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -33,10 +33,10 @@ use cmp::Ordering::{Less, Equal, Greater};\n use ops::{Mul, Div, Neg};\n use fmt::{Debug, LowerExp};\n use mem::transmute;\n-use num::flt2dec::strategy::grisu::Fp;\n+use num::diy_float::Fp;\n use num::FpCategory::{Infinite, Zero, Subnormal, Normal, Nan};\n use num::Float;\n-use super::num::{self, Big};\n+use num::dec2flt::num::{self, Big};\n \n #[derive(Copy, Clone, Debug)]\n pub struct Unpacked {"}, {"sha": "7c369ee3b3bd7b4291fe2a2011651cd5751eb301", "filename": "src/libcore/num/diy_float.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdiy_float.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Extended precision \"soft float\", for internal use only.\n+\n+// This module is only for dec2flt and flt2dec, and only public because of libcoretest.\n+// It is not intended to ever be stabilized.\n+#![doc(hidden)]\n+#![unstable(feature = \"core_private_diy_float\",\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n+\n+/// A custom 64-bit floating point type, representing `f * 2^e`.\n+#[derive(Copy, Clone, Debug)]\n+#[doc(hidden)]\n+pub struct Fp {\n+    /// The integer mantissa.\n+    pub f: u64,\n+    /// The exponent in base 2.\n+    pub e: i16,\n+}\n+\n+impl Fp {\n+    /// Returns a correctly rounded product of itself and `other`.\n+    pub fn mul(&self, other: &Fp) -> Fp {\n+        const MASK: u64 = 0xffffffff;\n+        let a = self.f >> 32;\n+        let b = self.f & MASK;\n+        let c = other.f >> 32;\n+        let d = other.f & MASK;\n+        let ac = a * c;\n+        let bc = b * c;\n+        let ad = a * d;\n+        let bd = b * d;\n+        let tmp = (bd >> 32) + (ad & MASK) + (bc & MASK) + (1 << 31) /* round */;\n+        let f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);\n+        let e = self.e + other.e + 64;\n+        Fp { f: f, e: e }\n+    }\n+\n+    /// Normalizes itself so that the resulting mantissa is at least `2^63`.\n+    pub fn normalize(&self) -> Fp {\n+        let mut f = self.f;\n+        let mut e = self.e;\n+        if f >> (64 - 32) == 0 { f <<= 32; e -= 32; }\n+        if f >> (64 - 16) == 0 { f <<= 16; e -= 16; }\n+        if f >> (64 -  8) == 0 { f <<=  8; e -=  8; }\n+        if f >> (64 -  4) == 0 { f <<=  4; e -=  4; }\n+        if f >> (64 -  2) == 0 { f <<=  2; e -=  2; }\n+        if f >> (64 -  1) == 0 { f <<=  1; e -=  1; }\n+        debug_assert!(f >= (1 >> 63));\n+        Fp { f: f, e: e }\n+    }\n+\n+    /// Normalizes itself to have the shared exponent.\n+    /// It can only decrease the exponent (and thus increase the mantissa).\n+    pub fn normalize_to(&self, e: i16) -> Fp {\n+        let edelta = self.e - e;\n+        assert!(edelta >= 0);\n+        let edelta = edelta as usize;\n+        assert_eq!(self.f << edelta >> edelta, self.f);\n+        Fp { f: self.f << edelta, e: e }\n+    }\n+}"}, {"sha": "7f7c61938cb404437519c20daeca93198b98a47c", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -136,7 +136,6 @@ use slice::bytes;\n pub use self::decoder::{decode, DecodableFloat, FullDecoded, Decoded};\n \n pub mod estimator;\n-pub mod bignum;\n pub mod decoder;\n \n /// Digit-generation algorithms."}, {"sha": "2d68c3a6d026ec397cd7fdd55ec849e961cf8d72", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -21,8 +21,8 @@ use cmp::Ordering;\n \n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n use num::flt2dec::estimator::estimate_scaling_factor;\n-use num::flt2dec::bignum::Digit32 as Digit;\n-use num::flt2dec::bignum::Big32x40 as Big;\n+use num::bignum::Digit32 as Digit;\n+use num::bignum::Big32x40 as Big;\n \n static POW10: [Digit; 10] = [1, 10, 100, 1000, 10000, 100000,\n                              1000000, 10000000, 100000000, 1000000000];"}, {"sha": "5b4b2e46478d4ed4d7580d2c364b3078e6460815", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -18,60 +18,9 @@ Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n \n use prelude::v1::*;\n \n+use num::diy_float::Fp;\n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n \n-/// A custom 64-bit floating point type, representing `f * 2^e`.\n-#[derive(Copy, Clone, Debug)]\n-#[doc(hidden)]\n-pub struct Fp {\n-    /// The integer mantissa.\n-    pub f: u64,\n-    /// The exponent in base 2.\n-    pub e: i16,\n-}\n-\n-impl Fp {\n-    /// Returns a correctly rounded product of itself and `other`.\n-    pub fn mul(&self, other: &Fp) -> Fp {\n-        const MASK: u64 = 0xffffffff;\n-        let a = self.f >> 32;\n-        let b = self.f & MASK;\n-        let c = other.f >> 32;\n-        let d = other.f & MASK;\n-        let ac = a * c;\n-        let bc = b * c;\n-        let ad = a * d;\n-        let bd = b * d;\n-        let tmp = (bd >> 32) + (ad & MASK) + (bc & MASK) + (1 << 31) /* round */;\n-        let f = ac + (ad >> 32) + (bc >> 32) + (tmp >> 32);\n-        let e = self.e + other.e + 64;\n-        Fp { f: f, e: e }\n-    }\n-\n-    /// Normalizes itself so that the resulting mantissa is at least `2^63`.\n-    pub fn normalize(&self) -> Fp {\n-        let mut f = self.f;\n-        let mut e = self.e;\n-        if f >> (64 - 32) == 0 { f <<= 32; e -= 32; }\n-        if f >> (64 - 16) == 0 { f <<= 16; e -= 16; }\n-        if f >> (64 -  8) == 0 { f <<=  8; e -=  8; }\n-        if f >> (64 -  4) == 0 { f <<=  4; e -=  4; }\n-        if f >> (64 -  2) == 0 { f <<=  2; e -=  2; }\n-        if f >> (64 -  1) == 0 { f <<=  1; e -=  1; }\n-        debug_assert!(f >= (1 >> 63));\n-        Fp { f: f, e: e }\n-    }\n-\n-    /// Normalizes itself to have the shared exponent.\n-    /// It can only decrease the exponent (and thus increase the mantissa).\n-    pub fn normalize_to(&self, e: i16) -> Fp {\n-        let edelta = self.e - e;\n-        assert!(edelta >= 0);\n-        let edelta = edelta as usize;\n-        assert_eq!(self.f << edelta >> edelta, self.f);\n-        Fp { f: self.f << edelta, e: e }\n-    }\n-}\n \n // see the comments in `format_shortest_opt` for the rationale.\n #[doc(hidden)] pub const ALPHA: i16 = -60;"}, {"sha": "6507bb7bf8c8286c4f5c4e9dfb9c1c50849148b4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -43,8 +43,12 @@ use slice::SliceExt;\n pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n \n pub mod wrapping;\n+\n+// All these modules are technically private and only exposed for libcoretest:\n pub mod flt2dec;\n pub mod dec2flt;\n+pub mod bignum;\n+pub mod diy_float;\n \n /// Types that have a \"zero\" value.\n ///"}, {"sha": "22b285b034399f021a54e54ca2d8b32e78290598", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -15,6 +15,8 @@\n #![feature(const_fn)]\n #![feature(core)]\n #![feature(core_float)]\n+#![feature(core_private_bignum)]\n+#![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n #![feature(decode_utf16)]\n #![feature(fixed_size_array)]"}, {"sha": "58a9dd1b128ce8c96cd398a9c1f4f4628c49ea16", "filename": "src/libcoretest/num/bignum.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fbignum.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::prelude::v1::*;\n-use core::num::flt2dec::bignum::tests::Big8x3 as Big;\n+use core::num::bignum::tests::Big8x3 as Big;\n \n #[test]\n #[should_panic]", "previous_filename": "src/libcoretest/num/flt2dec/bignum.rs"}, {"sha": "4c0a403e574a3c1a2e312b4f61053aa9c1793b3c", "filename": "src/libcoretest/num/dec2flt/rawfp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fdec2flt%2Frawfp.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use std::f64;\n-use core::num::flt2dec::strategy::grisu::Fp;\n+use core::num::diy_float::Fp;\n use core::num::dec2flt::rawfp::{fp_to_float, prev_float, next_float, round_normal};\n \n #[test]\n fn fp_to_float_half_to_even() {\n     fn is_normalized(sig: u64) -> bool {\n-            // intentionally written without {min,max}_sig() as a sanity check\n-            sig >> 52 == 1 && sig >> 53 == 0\n+        // intentionally written without {min,max}_sig() as a sanity check\n+        sig >> 52 == 1 && sig >> 53 == 0\n     }\n \n     fn conv(sig: u64) -> u64 {"}, {"sha": "309bf6d8192188870433f8296f5646cb98dc9da9", "filename": "src/libcoretest/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fmod.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -23,7 +23,6 @@ use core::num::flt2dec::{to_shortest_str, to_shortest_exp_str,\n pub use test::Bencher;\n \n mod estimator;\n-mod bignum;\n mod strategy {\n     mod dragon;\n     mod grisu;"}, {"sha": "79dcca7671a2d0215340f2185cc7338c41a62f60", "filename": "src/libcoretest/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -12,7 +12,7 @@ use std::prelude::v1::*;\n use std::{i16, f64};\n use super::super::*;\n use core::num::flt2dec::*;\n-use core::num::flt2dec::bignum::Big32x40 as Big;\n+use core::num::bignum::Big32x40 as Big;\n use core::num::flt2dec::strategy::dragon::*;\n \n #[test]"}, {"sha": "f57c54faf28dd2f653cc6f6aaa3cf39ef608f09d", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f49ca0fa859fa82080736aff4a8d3832776b04/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=b7f49ca0fa859fa82080736aff4a8d3832776b04", "patch": "@@ -31,6 +31,7 @@ mod u64;\n \n mod flt2dec;\n mod dec2flt;\n+mod bignum;\n \n /// Helper function for testing numeric operations\n pub fn test_num<T>(ten: T, two: T) where"}]}