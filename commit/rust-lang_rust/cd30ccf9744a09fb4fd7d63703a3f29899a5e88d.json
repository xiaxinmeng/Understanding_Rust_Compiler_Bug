{"sha": "cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "node_id": "C_kwDOAAsO6NoAKGNkMzBjY2Y5NzQ0YTA5ZmI0ZmQ3ZDYzNzAzYTNmMjk4OTlhNWU4OGQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:27Z"}, "message": "Rollup merge of #95292 - BGR360:const-trait-specialize, r=lcnr\n\nAllow specialized const trait impls.\n\nFixes #95186.\nFixes #95187.\n\nI've done my best to create a comprehensive test suite for the interaction between `min_specialization` and `const_trait_impls`. I wouldn't be surprised if there are interesting cases I haven't tested, please let me know.", "tree": {"sha": "4f54db86605f27c62c03db83547ca906edac3aeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f54db86605f27c62c03db83547ca906edac3aeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ7CRBK7hj4Ov3rIwAAcQ4IAJGPYEPHT0bh3AftqhtiQgxx\nxQIv3vFQC46PSgRSNA/yDTvxB6L1PEaR7/XaJP9zJFinBM8K2sYgKXA5J4GsrKQ3\nunkjEKigmUDjbnkyqa9Bk6I2+3HZi3lRA6F1N5ZJPVMnkMHWEXX/5QJmGjl2RjIk\nEEro38zNn0PWtW5Onhr6iaXzOHxBxdBi5ceEwCbljNhNAoiMH/7NvWlFPnp9oBRQ\nZHPQ/r1tgAQlWpnoHBwGd6C+lwxnjB4sXwF456SgPrYb1pw1T7cRenK0OsDkcvU+\nP/y7Y2AH0QQvLu2jXrKsFO8elv4kCdphw7fm0GU+6BbXBm3mmEpjiBEMvQXg0W8=\n=IKDN\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f54db86605f27c62c03db83547ca906edac3aeb\nparent 742d3f02c243964e5b868d90afd60c2907be5853\nparent 94f67e667be3efd1845bb95fcd25fcce11cf983c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186747 -0500\ncommitter GitHub <noreply@github.com> 1668186747 -0500\n\nRollup merge of #95292 - BGR360:const-trait-specialize, r=lcnr\n\nAllow specialized const trait impls.\n\nFixes #95186.\nFixes #95187.\n\nI've done my best to create a comprehensive test suite for the interaction between `min_specialization` and `const_trait_impls`. I wouldn't be surprised if there are interesting cases I haven't tested, please let me know.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "html_url": "https://github.com/rust-lang/rust/commit/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}, {"sha": "94f67e667be3efd1845bb95fcd25fcce11cf983c", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f67e667be3efd1845bb95fcd25fcce11cf983c", "html_url": "https://github.com/rust-lang/rust/commit/94f67e667be3efd1845bb95fcd25fcce11cf983c"}], "stats": {"total": 407, "additions": 382, "deletions": 25}, "files": [{"sha": "55cca0cd2d7b540b2a3edad210ada95d39fc6d67", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 98, "deletions": 22, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -69,6 +69,7 @@ use crate::constrained_generic_params as cgp;\n use crate::errors::SubstsOnOverriddenImpl;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -80,6 +81,7 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, translate_substs, wf, ObligationCtxt};\n+use tracing::instrument;\n \n pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     if let Some(node) = parent_specialization_node(tcx, impl_def_id) {\n@@ -103,13 +105,11 @@ fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Opti\n }\n \n /// Check that `impl1` is a sound specialization\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node) {\n     if let Some((impl1_substs, impl2_substs)) = get_impl_substs(tcx, impl1_def_id, impl2_node) {\n         let impl2_def_id = impl2_node.def_id();\n-        debug!(\n-            \"check_always_applicable(\\nimpl1_def_id={:?},\\nimpl2_def_id={:?},\\nimpl2_substs={:?}\\n)\",\n-            impl1_def_id, impl2_def_id, impl2_substs\n-        );\n+        debug!(?impl2_def_id, ?impl2_substs);\n \n         let parent_substs = if impl2_node.is_from_trait() {\n             impl2_substs.to_vec()\n@@ -118,12 +118,33 @@ fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node\n         };\n \n         let span = tcx.def_span(impl1_def_id);\n+        check_constness(tcx, impl1_def_id, impl2_node, span);\n         check_static_lifetimes(tcx, &parent_substs, span);\n         check_duplicate_params(tcx, impl1_substs, &parent_substs, span);\n         check_predicates(tcx, impl1_def_id, impl1_substs, impl2_node, impl2_substs, span);\n     }\n }\n \n+/// Check that the specializing impl `impl1` is at least as const as the base\n+/// impl `impl2`\n+fn check_constness(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {\n+    if impl2_node.is_from_trait() {\n+        // This isn't a specialization\n+        return;\n+    }\n+\n+    let impl1_constness = tcx.constness(impl1_def_id.to_def_id());\n+    let impl2_constness = tcx.constness(impl2_node.def_id());\n+\n+    if let hir::Constness::Const = impl2_constness {\n+        if let hir::Constness::NotConst = impl1_constness {\n+            tcx.sess\n+                .struct_span_err(span, \"cannot specialize on const impl with non-const impl\")\n+                .emit();\n+        }\n+    }\n+}\n+\n /// Given a specializing impl `impl1`, and the base impl `impl2`, returns two\n /// substitutions `(S1, S2)` that equate their trait references. The returned\n /// types are expressed in terms of the generics of `impl1`.\n@@ -278,15 +299,15 @@ fn check_static_lifetimes<'tcx>(\n \n /// Check whether predicates on the specializing impl (`impl1`) are allowed.\n ///\n-/// Each predicate `P` must be:\n+/// Each predicate `P` must be one of:\n ///\n-/// * global (not reference any parameters)\n-/// * `T: Tr` predicate where `Tr` is an always-applicable trait\n-/// * on the base `impl impl2`\n-///     * Currently this check is done using syntactic equality, which is\n-///       conservative but generally sufficient.\n-/// * a well-formed predicate of a type argument of the trait being implemented,\n+/// * Global (not reference any parameters).\n+/// * A `T: Tr` predicate where `Tr` is an always-applicable trait.\n+/// * Present on the base impl `impl2`.\n+///     * This check is done using the `trait_predicates_eq` function below.\n+/// * A well-formed predicate of a type argument of the trait being implemented,\n ///   including the `Self`-type.\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl1_def_id: LocalDefId,\n@@ -322,10 +343,7 @@ fn check_predicates<'tcx>(\n         .map(|obligation| obligation.predicate)\n         .collect()\n     };\n-    debug!(\n-        \"check_always_applicable(\\nimpl1_predicates={:?},\\nimpl2_predicates={:?}\\n)\",\n-        impl1_predicates, impl2_predicates,\n-    );\n+    debug!(?impl1_predicates, ?impl2_predicates);\n \n     // Since impls of always applicable traits don't get to assume anything, we\n     // can also assume their supertraits apply.\n@@ -373,25 +391,83 @@ fn check_predicates<'tcx>(\n     );\n \n     for (predicate, span) in impl1_predicates {\n-        if !impl2_predicates.contains(&predicate) {\n+        if !impl2_predicates.iter().any(|pred2| trait_predicates_eq(tcx, predicate, *pred2, span)) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }\n }\n \n+/// Checks if some predicate on the specializing impl (`predicate1`) is the same\n+/// as some predicate on the base impl (`predicate2`).\n+///\n+/// This basically just checks syntactic equivalence, but is a little more\n+/// forgiving since we want to equate `T: Tr` with `T: ~const Tr` so this can work:\n+///\n+/// ```ignore (illustrative)\n+/// #[rustc_specialization_trait]\n+/// trait Specialize { }\n+///\n+/// impl<T: Bound> Tr for T { }\n+/// impl<T: ~const Bound + Specialize> const Tr for T { }\n+/// ```\n+///\n+/// However, we *don't* want to allow the reverse, i.e., when the bound on the\n+/// specializing impl is not as const as the bound on the base impl:\n+///\n+/// ```ignore (illustrative)\n+/// impl<T: ~const Bound> const Tr for T { }\n+/// impl<T: Bound + Specialize> const Tr for T { } // should be T: ~const Bound\n+/// ```\n+///\n+/// So we make that check in this function and try to raise a helpful error message.\n+fn trait_predicates_eq<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    predicate1: ty::Predicate<'tcx>,\n+    predicate2: ty::Predicate<'tcx>,\n+    span: Span,\n+) -> bool {\n+    let pred1_kind = predicate1.kind().skip_binder();\n+    let pred2_kind = predicate2.kind().skip_binder();\n+    let (trait_pred1, trait_pred2) = match (pred1_kind, pred2_kind) {\n+        (ty::PredicateKind::Trait(pred1), ty::PredicateKind::Trait(pred2)) => (pred1, pred2),\n+        // Just use plain syntactic equivalence if either of the predicates aren't\n+        // trait predicates or have bound vars.\n+        _ => return predicate1 == predicate2,\n+    };\n+\n+    let predicates_equal_modulo_constness = {\n+        let pred1_unconsted =\n+            ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..trait_pred1 };\n+        let pred2_unconsted =\n+            ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..trait_pred2 };\n+        pred1_unconsted == pred2_unconsted\n+    };\n+\n+    if !predicates_equal_modulo_constness {\n+        return false;\n+    }\n+\n+    // Check that the predicate on the specializing impl is at least as const as\n+    // the one on the base.\n+    match (trait_pred2.constness, trait_pred1.constness) {\n+        (ty::BoundConstness::ConstIfConst, ty::BoundConstness::NotConst) => {\n+            tcx.sess.struct_span_err(span, \"missing `~const` qualifier for specialization\").emit();\n+        }\n+        _ => {}\n+    }\n+\n+    true\n+}\n+\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tcx>, span: Span) {\n-    debug!(\"can_specialize_on(predicate = {:?})\", predicate);\n     match predicate.kind().skip_binder() {\n         // Global predicates are either always true or always false, so we\n         // are fine to specialize on.\n         _ if predicate.is_global() => (),\n         // We allow specializing on explicitly marked traits with no associated\n         // items.\n-        ty::PredicateKind::Trait(ty::TraitPredicate {\n-            trait_ref,\n-            constness: ty::BoundConstness::NotConst,\n-            polarity: _,\n-        }) => {\n+        ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _, polarity: _ }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n                 Some(TraitSpecializationKind::Marker)"}, {"sha": "3ac909924864decc4df351a38999152708498229", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,46 @@\n+// Tests that trait bounds on specializing trait impls must be `~const` if the\n+// same bound is present on the default impl and is `~const` there.\n+\n+#![feature(const_trait_impl)]\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+#[const_trait]\n+trait Foo {}\n+\n+#[const_trait]\n+trait Bar {}\n+\n+// bgr360: I was only able to exercise the code path that raises the\n+// \"missing ~const qualifier\" error by making this base impl non-const, even\n+// though that doesn't really make sense to do. As seen below, if the base impl\n+// is made const, rustc fails earlier with an overlapping impl failure.\n+impl<T> Bar for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> Bar for T\n+where\n+    T: Foo, //~ ERROR missing `~const` qualifier\n+    T: Specialize,\n+{}\n+\n+#[const_trait]\n+trait Baz {}\n+\n+impl<T> const Baz for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> const Baz for T //~ ERROR conflicting implementations of trait `Baz`\n+where\n+    T: Foo,\n+    T: Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "4aea1979421c36d09fcbe236790bd8942cbd4b52", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,18 @@\n+error: missing `~const` qualifier for specialization\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:28:8\n+   |\n+LL |     T: Foo,\n+   |        ^^^\n+\n+error[E0119]: conflicting implementations of trait `Baz`\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:40:1\n+   |\n+LL | impl<T> const Baz for T\n+   | ----------------------- first implementation here\n+...\n+LL | impl<T> const Baz for T\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "9ddea427cfd803c9cd5b6d96e215e3ff2282e21c", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-const-specialized.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,39 @@\n+// Tests that a const default trait impl can be specialized by another const\n+// trait impl and that the specializing impl will be used during const-eval.\n+\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+#[const_trait]\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+const fn get_value<T: ~const Value>() -> u32 {\n+    T::value()\n+}\n+\n+impl<T> const Value for T {\n+    default fn value() -> u32 {\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl const Value for FortyTwo {\n+    fn value() -> u32 {\n+        42\n+    }\n+}\n+\n+const ZERO: u32 = get_value::<()>();\n+\n+const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+\n+fn main() {\n+    assert_eq!(ZERO, 0);\n+    assert_eq!(FORTY_TWO, 42);\n+}"}, {"sha": "a3bb9b3f93edaee333821435da563aa43cfba147", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,26 @@\n+// Tests that specializing trait impls must be at least as const as the default impl.\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+#[const_trait]\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+impl<T> const Value for T {\n+    default fn value() -> u32 {\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl Value for FortyTwo { //~ ERROR cannot specialize on const impl with non-const impl\n+    fn value() -> u32 {\n+        println!(\"You can't do that (constly)\");\n+        42\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "24766804708a388c5ec7da2a426cbd39295738b5", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-impl-non-const-specialized-impl.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-impl-non-const-specialized-impl.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,8 @@\n+error: cannot specialize on const impl with non-const impl\n+  --> $DIR/const-default-impl-non-const-specialized-impl.rs:19:1\n+   |\n+LL | impl Value for FortyTwo {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2aac0a2b4d11183d4b6dca6bd9b0df37b4c92204", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/default-keyword.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+#[const_trait]\n+trait Foo {\n+    fn foo();\n+}\n+\n+impl const Foo for u32 {\n+    default fn foo() {}\n+}\n+\n+fn main() {}"}, {"sha": "9c2c2cf1610a296465a9c1156b50e282cb871ae7", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,37 @@\n+// Tests that `~const` trait bounds can be used to specialize const trait impls.\n+\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+\n+#[const_trait]\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+#[const_trait]\n+trait Foo {}\n+\n+impl<T> const Foo for T {}\n+\n+impl<T> const Foo for T\n+where\n+    T: ~const Specialize,\n+{}\n+\n+#[const_trait]\n+trait Bar {}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+    T: ~const Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "1e6b1c6513b39a5699e39e39bd5ea6a6c73a3b89", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,45 @@\n+// Tests that `T: ~const Foo` in a specializing impl is treated as equivalent to\n+// `T: Foo` in the default impl for the purposes of specialization (i.e., it\n+// does not think that the user is attempting to specialize on trait `Foo`).\n+\n+// check-pass\n+\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+#![feature(const_trait_impl)]\n+\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+#[const_trait]\n+trait Foo {}\n+\n+#[const_trait]\n+trait Bar {}\n+\n+impl<T> Bar for T\n+where\n+    T: Foo,\n+{}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+    T: Specialize,\n+{}\n+\n+#[const_trait]\n+trait Baz {}\n+\n+impl<T> const Baz for T\n+where\n+    T: Foo,\n+{}\n+\n+impl<T> const Baz for T\n+where\n+    T: ~const Foo,\n+    T: Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "35aa52fbd4ed205519e108db2084f42d1523c7d2", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -0,0 +1,39 @@\n+// Tests that a non-const default impl can be specialized by a const trait impl,\n+// but that the default impl cannot be used in a const context.\n+\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+#[const_trait]\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+const fn get_value<T: ~const Value>() -> u32 {\n+    T::value()\n+}\n+\n+impl<T> Value for T {\n+    default fn value() -> u32 {\n+        println!(\"You can't do that (constly)\");\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl const Value for FortyTwo {\n+    fn value() -> u32 {\n+        42\n+    }\n+}\n+\n+fn main() {\n+    let zero = get_value::<()>();\n+    assert_eq!(zero, 0);\n+\n+    const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+    assert_eq!(FORTY_TWO, 42);\n+}"}, {"sha": "9ab170f092006a05799cbca6298c1262b7b5ac93", "filename": "src/test/ui/rfc-2632-const-trait-impl/specializing-constness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -17,7 +17,9 @@ impl<T: ~const Default> const A for T {\n     }\n }\n \n-impl<T: Default + Sup> A for T { //~ ERROR: cannot specialize\n+impl<T: Default + Sup> A for T {\n+//~^ ERROR: cannot specialize\n+//~| ERROR: missing `~const` qualifier\n     fn a() -> u32 {\n         3\n     }"}, {"sha": "843fc6ce84d45aa49c0531192b47877f3803d26f", "filename": "src/test/ui/rfc-2632-const-trait-impl/specializing-constness.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -1,8 +1,14 @@\n-error: cannot specialize on trait `Default`\n+error: cannot specialize on const impl with non-const impl\n+  --> $DIR/specializing-constness.rs:20:1\n+   |\n+LL | impl<T: Default + Sup> A for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing `~const` qualifier for specialization\n   --> $DIR/specializing-constness.rs:20:9\n    |\n LL | impl<T: Default + Sup> A for T {\n    |         ^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}