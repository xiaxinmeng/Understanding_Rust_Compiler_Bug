{"sha": "a0ad457575bdde24d65c3fbcd4b2819459ad0291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYWQ0NTc1NzViZGRlMjRkNjVjM2ZiY2Q0YjI4MTk0NTlhZDAyOTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-23T16:28:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:56Z"}, "message": "if let else -> match", "tree": {"sha": "3d17fc09c2257d367d8f5d328eea31a29450cadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d17fc09c2257d367d8f5d328eea31a29450cadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ad457575bdde24d65c3fbcd4b2819459ad0291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad457575bdde24d65c3fbcd4b2819459ad0291", "html_url": "https://github.com/rust-lang/rust/commit/a0ad457575bdde24d65c3fbcd4b2819459ad0291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad457575bdde24d65c3fbcd4b2819459ad0291/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7a296c85bba6ab279dd17b193f86db22ec3437", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7a296c85bba6ab279dd17b193f86db22ec3437", "html_url": "https://github.com/rust-lang/rust/commit/ae7a296c85bba6ab279dd17b193f86db22ec3437"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "b97927f27d568b9e82af7eb339ee4feb91051f7b", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a0ad457575bdde24d65c3fbcd4b2819459ad0291/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ad457575bdde24d65c3fbcd4b2819459ad0291/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=a0ad457575bdde24d65c3fbcd4b2819459ad0291", "patch": "@@ -278,17 +278,18 @@ impl Ctx {\n         let mut has_self_param = false;\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n-                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n-                    TypeRef::from_ast(&self.body_ctx, type_ref)\n-                } else {\n-                    let self_type = TypeRef::Path(name![Self].into());\n-                    match self_param.kind() {\n-                        ast::SelfParamKind::Owned => self_type,\n-                        ast::SelfParamKind::Ref => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n-                        }\n-                        ast::SelfParamKind::MutRef => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                let self_type = match self_param.ascribed_type() {\n+                    Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n+                    None => {\n+                        let self_type = TypeRef::Path(name![Self].into());\n+                        match self_param.kind() {\n+                            ast::SelfParamKind::Owned => self_type,\n+                            ast::SelfParamKind::Ref => {\n+                                TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n+                            }\n+                            ast::SelfParamKind::MutRef => {\n+                                TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                            }\n                         }\n                     }\n                 };\n@@ -583,20 +584,21 @@ impl Ctx {\n     }\n \n     fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<TypeBound> {\n-        if let Some(bound_list) = node.type_bound_list() {\n-            bound_list.bounds().map(|it| TypeBound::from_ast(&self.body_ctx, it)).collect()\n-        } else {\n-            Vec::new()\n+        match node.type_bound_list() {\n+            Some(bound_list) => {\n+                bound_list.bounds().map(|it| TypeBound::from_ast(&self.body_ctx, it)).collect()\n+            }\n+            None => Vec::new(),\n         }\n     }\n \n     fn lower_visibility(&self, item: &impl ast::VisibilityOwner) -> RawVisibility {\n-        if let Some(vis) = self.forced_visibility.as_ref() {\n-            vis.clone()\n-        } else {\n-            RawVisibility::from_ast_with_hygiene(item.visibility(), &self.hygiene)\n+        match &self.forced_visibility {\n+            Some(vis) => vis.clone(),\n+            None => RawVisibility::from_ast_with_hygiene(item.visibility(), &self.hygiene),\n         }\n     }\n+\n     fn lower_type_ref(&self, type_ref: &ast::TypeRef) -> TypeRef {\n         TypeRef::from_ast(&self.body_ctx, type_ref.clone())\n     }"}]}