{"sha": "da79fa964cfe82cfca3d9db6e32108888c837459", "node_id": "C_kwDOAAsO6NoAKGRhNzlmYTk2NGNmZTgyY2ZjYTNkOWRiNmUzMjEwODg4OGM4Mzc0NTk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-22T18:44:28Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-22T18:49:46Z"}, "message": "Add rustc_strict_coherence attribute and use it to check overlap", "tree": {"sha": "25f617a7d92bc672a0b13681b3d89656292d0e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f617a7d92bc672a0b13681b3d89656292d0e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da79fa964cfe82cfca3d9db6e32108888c837459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFzB9IACgkQgTGiTgx5\n76+3Nw/7BFKg99yJ9WVOEWbhyPvS6CXm6lQkxu5X+PJu9ZJZCyu1gN+op5fms2Bc\n055nFkeLm6RZqYGXbLF2+WnIHsyZqD+n4R3pzriwIXORwtrHZEpgrwsAPnuoMc0L\nlJnOb9NZJ0yHn/vArQMq2nALcZ7IUEGh8Tu2gQol2fAtIzluM8GgetqBn+Ahlemd\nsC2hbJe06yW/e3pQ6hyGOlqTONBtYRjbRciLNJgJnwqkJbHbfeuuuZga2yrcK7E9\nUZKgtXI/mV59ehkLugTCb5xScWsx6bWUPMGeFOwoh6WufS067pXkfBkSFp8MyWMG\nH8v52Q4cw6BhcOBYGJ4NE5E9ynBWnMMyc2cFv9kzquiQBzxdTh1ohEARb1SoiJNo\n/TnAiC3EycRZ8rO/2PVd0ZtE3Hr21wgydGhOpF1NalOmZPaqL9L3S8mAcbzKBx4a\nHxIJrNTimv4eqXtXTQ2Wn44yE3inVSvBUXBJwFCaTVu/j/bI5VI0S0eI0xPIUmJF\no4CQaxKz4+YKt37SwyEc2ZxqF6TGzqUm9WsW1K4ap3ErsgyymoxtMf4+P9bjDaxO\nkmy3pufjxRSRzYzOntjU1zbMxBQPgjOxzmQ1bLVc20kSOAQwjzU96mnRhKLkNLXc\n2RYXwYPYwXnSN8ot3NcmeF3XyVcbP3HgmW95y+uN9JsfibRYWdY=\n=km5w\n-----END PGP SIGNATURE-----", "payload": "tree 25f617a7d92bc672a0b13681b3d89656292d0e78\nparent 74454c4888a0a5a5bca17b5adb1440c6b552608b\nauthor Santiago Pastorino <spastorino@gmail.com> 1634928268 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634928586 -0300\n\nAdd rustc_strict_coherence attribute and use it to check overlap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da79fa964cfe82cfca3d9db6e32108888c837459", "html_url": "https://github.com/rust-lang/rust/commit/da79fa964cfe82cfca3d9db6e32108888c837459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da79fa964cfe82cfca3d9db6e32108888c837459/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74454c4888a0a5a5bca17b5adb1440c6b552608b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74454c4888a0a5a5bca17b5adb1440c6b552608b", "html_url": "https://github.com/rust-lang/rust/commit/74454c4888a0a5a5bca17b5adb1440c6b552608b"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "33188d375f5d5e2f333ff8605a5414cf58b796ac", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -556,6 +556,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_strict_coherence, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n     rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n     rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),"}, {"sha": "084cd95de6003b376c75ac5ae3be7db5559d9a6b", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -1142,6 +1142,7 @@ symbols! {\n         rustc_specialization_trait,\n         rustc_stable,\n         rustc_std_internal_symbol,\n+        rustc_strict_coherence,\n         rustc_symbol_name,\n         rustc_synthetic,\n         rustc_test_marker,"}, {"sha": "35fd31536806cc23bf4023e50d2eed59006a2823", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -222,11 +222,22 @@ fn overlap_within_probe(\n         })\n         .chain(obligations)\n         .find(|o| {\n-            !selcx.predicate_may_hold_fatal(o)\n-                || o.flip_polarity(tcx)\n+            // if both impl headers are set to strict coherence it means that this will be accepted\n+            // only if it's stated that T: !Trait. So only prove that the negated obligation holds.\n+            if tcx.has_attr(a_def_id, sym::rustc_strict_coherence)\n+                && tcx.has_attr(b_def_id, sym::rustc_strict_coherence)\n+            {\n+                o.flip_polarity(tcx)\n                     .as_ref()\n                     .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n                     .unwrap_or(false)\n+            } else {\n+                !selcx.predicate_may_hold_fatal(o)\n+                    || o.flip_polarity(tcx)\n+                        .as_ref()\n+                        .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n+                        .unwrap_or(false)\n+            }\n         });\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n     // to the canonical trait query form, `infcx.predicate_may_hold`, once"}, {"sha": "16ace450b06d546a9430aa2363a8cae5d7163ea1", "filename": "src/test/ui/coherence/coherence-overlap-negate-alias-strict.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -0,0 +1,19 @@\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(trait_alias)]\n+\n+trait A {}\n+trait B {}\n+trait AB = A + B;\n+\n+impl !A for u32 {}\n+\n+trait C {}\n+#[rustc_strict_coherence]\n+impl<T: AB> C for T {}\n+#[rustc_strict_coherence]\n+impl C for u32 {}\n+//~^ ERROR: conflicting implementations of trait `C` for type `u32` [E0119]\n+// FIXME this should work, we should implement an `assemble_neg_candidates` fn\n+\n+fn main() {}"}, {"sha": "5e436223119b997f48618992c47c33de3ba0ad5a", "filename": "src/test/ui/coherence/coherence-overlap-negate-alias-strict.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `C` for type `u32`\n+  --> $DIR/coherence-overlap-negate-alias-strict.rs:15:1\n+   |\n+LL | impl<T: AB> C for T {}\n+   | ------------------- first implementation here\n+LL | #[rustc_strict_coherence]\n+LL | impl C for u32 {}\n+   | ^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b3ae9a7bf78555897583563f8ff75ce4365c40dc", "filename": "src/test/ui/coherence/coherence-overlap-negate-strict.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-strict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da79fa964cfe82cfca3d9db6e32108888c837459/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-strict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-strict.rs?ref=da79fa964cfe82cfca3d9db6e32108888c837459", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(trait_alias)]\n+\n+trait A {}\n+trait B {}\n+\n+impl !A for u32 {}\n+\n+trait C {}\n+#[rustc_strict_coherence]\n+impl<T: A + B> C for T {}\n+#[rustc_strict_coherence]\n+impl C for u32 {}\n+\n+fn main() {}"}]}