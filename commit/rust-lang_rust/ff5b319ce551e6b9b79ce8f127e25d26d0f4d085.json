{"sha": "ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWIzMTljZTU1MWU2YjliNzljZThmMTI3ZTI1ZDI2ZDBmNGQwODU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-09T01:07:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-09T05:14:09Z"}, "message": "correct stack alignment", "tree": {"sha": "bc4c8e307509232e0f599d7e39bb3b8815c77de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4c8e307509232e0f599d7e39bb3b8815c77de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "html_url": "https://github.com/rust-lang/rust/commit/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2edd3135adcf4a3812487df75c503a95fbbc1a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edd3135adcf4a3812487df75c503a95fbbc1a38", "html_url": "https://github.com/rust-lang/rust/commit/2edd3135adcf4a3812487df75c503a95fbbc1a38"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "caa04d98be1e8d9824d445d4babea60f8cfd468b", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -106,7 +106,8 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/test/rust_test_harness.h \\\n                rt/test/rust_test_runtime.h \\\n                rt/test/rust_test_util.h \\\n-               rt/arch/$$(HOST_$(1))/context.h\n+               rt/arch/$$(HOST_$(1))/context.h \\\n+               rt/arch/$$(HOST_$(1))/regs.h\n \n ifeq ($$(HOST_$(1)), i386)\n   LIBUV_ARCH_$(1) := ia32"}, {"sha": "80eacd80178345e797906ae29cad86fee6704702", "filename": "src/rt/arch/i386/regs.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fi386%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fi386%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fregs.h?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -0,0 +1,2 @@\n+// This file is not used by i386, but we keep it here so all\n+// architectures have the same set of header files."}, {"sha": "7fdc6114b0a6b3aab475edb25195bc886bcbf754", "filename": "src/rt/arch/x86_64/_context.S", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -1,5 +1,7 @@\n-#include \"x86_64_regs.h\"\n-\n+#include \"regs.h\"\n+#define ARG0 RUSTRT_ARG0_S\n+#define ARG1 RUSTRT_ARG1_S\n+        \n         .text\n \n /*\n@@ -41,7 +43,10 @@ First four arguments:\n /*\n         Stores current registers into arg0/RCX and restores\n         registers found in arg1/RDX. This is used by our\n-\t    implementation of getcontext.\n+\t    implementation of getcontext.  Only saves/restores nonvolatile\n+        registers and the register used for the first argument.\n+        Volatile registers in general ought to be saved by the caller\n+        anyhow.\n */\t\n \n // swap_registers(registers_t *oregs, registers_t *regs)\n@@ -56,60 +61,53 @@ swap_registers:\n         // return address. We can therefore just return normally to\n         // jump back into the old code.\n \n-#       if defined(RUSTRT_ARG0_S)\n-        mov RUSTRT_ARG0_S, %rdi\n-        mov RUSTRT_ARG1_S, %rsi\n-#       endif\n-        \n         // Save instruction pointer:\n         pop %rax\n-        mov %rax, (RUSTRT_IP*8)(%rdi)\n+        mov %rax, (RUSTRT_IP*8)(RUSTRT_ARG0_S)\n \n         // Save non-volatile integer registers:\n         //   (including RSP)\n-        mov %rbx, (RUSTRT_RBX*8)(%rdi)\n-        mov %rsp, (RUSTRT_RSP*8)(%rdi)\n-        mov %rbp, (RUSTRT_RBP*8)(%rdi)\n-        mov %r12, (RUSTRT_R12*8)(%rdi)\n-        mov %r13, (RUSTRT_R13*8)(%rdi)\n-        mov %r14, (RUSTRT_R14*8)(%rdi)\n-        mov %r15, (RUSTRT_R15*8)(%rdi)\n-\n-        // Save relevant argument registers:\n-        mov %rcx, (RUSTRT_RCX*8)(%rdi)\n-        mov %rdi, (RUSTRT_RDI*8)(%rdi)\n+        mov %rbx, (RUSTRT_RBX*8)(ARG0)\n+        mov %rsp, (RUSTRT_RSP*8)(ARG0)\n+        mov %rbp, (RUSTRT_RBP*8)(ARG0)\n+        mov %r12, (RUSTRT_R12*8)(ARG0)\n+        mov %r13, (RUSTRT_R13*8)(ARG0)\n+        mov %r14, (RUSTRT_R14*8)(ARG0)\n+        mov %r15, (RUSTRT_R15*8)(ARG0)\n+\n+        // Save 0th argument register:\n+        mov ARG0, (RUSTRT_ARG0*8)(ARG0)\n \n         // Save non-volatile XMM registers:\n-        movapd %xmm0, (RUSTRT_XMM0*8)(%rdi)\n-        movapd %xmm1, (RUSTRT_XMM1*8)(%rdi)\n-        movapd %xmm2, (RUSTRT_XMM2*8)(%rdi)\n-        movapd %xmm3, (RUSTRT_XMM3*8)(%rdi)\n-        movapd %xmm4, (RUSTRT_XMM4*8)(%rdi)\n-        movapd %xmm5, (RUSTRT_XMM5*8)(%rdi)\n+        movapd %xmm0, (RUSTRT_XMM0*8)(ARG0)\n+        movapd %xmm1, (RUSTRT_XMM1*8)(ARG0)\n+        movapd %xmm2, (RUSTRT_XMM2*8)(ARG0)\n+        movapd %xmm3, (RUSTRT_XMM3*8)(ARG0)\n+        movapd %xmm4, (RUSTRT_XMM4*8)(ARG0)\n+        movapd %xmm5, (RUSTRT_XMM5*8)(ARG0)\n \n         // Restore non-volatile integer registers:\n         //   (including RSP)\n-        mov (RUSTRT_RBX*8)(%rsi), %rbx\n-        mov (RUSTRT_RSP*8)(%rsi), %rsp\n-        mov (RUSTRT_RBP*8)(%rsi), %rbp\n-        mov (RUSTRT_R12*8)(%rsi), %r12\n-        mov (RUSTRT_R13*8)(%rsi), %r13\n-        mov (RUSTRT_R14*8)(%rsi), %r14\n-        mov (RUSTRT_R15*8)(%rsi), %r15\n-\n-        // Restore relevant argument registers:\n-        mov (RUSTRT_RCX*8)(%rsi), %rcx\n-        mov (RUSTRT_RDI*8)(%rsi), %rdi\n+        mov (RUSTRT_RBX*8)(ARG1), %rbx\n+        mov (RUSTRT_RSP*8)(ARG1), %rsp\n+        mov (RUSTRT_RBP*8)(ARG1), %rbp\n+        mov (RUSTRT_R12*8)(ARG1), %r12\n+        mov (RUSTRT_R13*8)(ARG1), %r13\n+        mov (RUSTRT_R14*8)(ARG1), %r14\n+        mov (RUSTRT_R15*8)(ARG1), %r15\n+\n+        // Restore 0th argument register:\n+        mov (RUSTRT_ARG0*8)(ARG1), ARG0\n \n         // Restore non-volatile XMM registers:\n-        movapd (RUSTRT_XMM0*8)(%rsi), %xmm0\n-        movapd (RUSTRT_XMM1*8)(%rsi), %xmm1\n-        movapd (RUSTRT_XMM2*8)(%rsi), %xmm2\n-        movapd (RUSTRT_XMM3*8)(%rsi), %xmm3\n-        movapd (RUSTRT_XMM4*8)(%rsi), %xmm4\n-        movapd (RUSTRT_XMM5*8)(%rsi), %xmm5\n+        movapd (RUSTRT_XMM0*8)(ARG1), %xmm0\n+        movapd (RUSTRT_XMM1*8)(ARG1), %xmm1\n+        movapd (RUSTRT_XMM2*8)(ARG1), %xmm2\n+        movapd (RUSTRT_XMM3*8)(ARG1), %xmm3\n+        movapd (RUSTRT_XMM4*8)(ARG1), %xmm4\n+        movapd (RUSTRT_XMM5*8)(ARG1), %xmm5\n \n         // Jump to the instruction pointer\n         // found in regs:\n-        jmp *(RUSTRT_IP*8)(%rsi)\n+        jmp *(RUSTRT_IP*8)(ARG1)\n "}, {"sha": "d9070c6385a232a332051af85704f7f4a0778eac", "filename": "src/rt/arch/x86_64/context.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -26,8 +26,9 @@ void context::call(void *f, void *arg, void *stack) {\n   swap(*this);\n \n   // set up the stack\n-  uint32_t *sp = (uint32_t *)stack;\n+  uint64_t *sp = (uint64_t *)stack;\n   sp = align_down(sp);\n+  *--sp = 0xdeadbeef; // takes place of ret. addr.\n \n   regs.data[RUSTRT_ARG0] = (uint64_t)arg;\n   regs.data[RUSTRT_RSP] = (uint64_t)sp;"}, {"sha": "3f01a4479d7cfb7f9f9068c0d9b85c9a39a02d7c", "filename": "src/rt/arch/x86_64/context.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -23,8 +23,8 @@ T align_down(T sp)\n // The struct in which we store the saved data.  This is mostly the\n // volatile registers and instruction pointer, but it also includes\n // RCX/RDI which are used to pass arguments.  The indices for each\n-// register are found in <x86_64_regs.h>:\n-#include \"x86_64_regs.h\"\n+// register are found in \"regs.h\":\n+#include \"regs.h\"\n struct registers_t {\n     uint64_t data[RUSTRT_MAX];\n };"}, {"sha": "7d090ff5b272c48e6d899d6b59fcf745ce519f3f", "filename": "src/rt/arch/x86_64/regs.h", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/ff5b319ce551e6b9b79ce8f127e25d26d0f4d085/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fregs.h?ref=ff5b319ce551e6b9b79ce8f127e25d26d0f4d085", "patch": "@@ -1,13 +1,13 @@\n-#define RUSTRT_RBX  0\n-#define RUSTRT_RSP  1\n-#define RUSTRT_RBP  2\n-#define RUSTRT_RDI  3\n-#define RUSTRT_RCX  4\n-#define RUSTRT_R12  5\n-#define RUSTRT_R13  6\n-#define RUSTRT_R14  7\n-#define RUSTRT_R15  8\n-#define RUSTRT_IP   9\n+#define RUSTRT_RBX   0\n+#define RUSTRT_RSP   1\n+#define RUSTRT_RBP   2\n+#define RUSTRT_ARG0  3 // RCX on Windows, RDI elsewhere\n+#define RUSTRT_R12   4\n+#define RUSTRT_R13   5\n+#define RUSTRT_R14   6\n+#define RUSTRT_R15   7\n+#define RUSTRT_IP    8\n+#define RUSTRT_XXX   9 // Not used, just padding\n #define RUSTRT_XMM0 10\n #define RUSTRT_XMM1 12\n #define RUSTRT_XMM2 14\n@@ -19,11 +19,11 @@\n // ARG0 is the register in which the first argument goes.\n // Naturally this depends on your operating system.\n #if defined(__MINGW32__) || defined(_WINDOWS)\n-#   define RUSTRT_ARG0 RUSTRT_RCX  \n #   define RUSTRT_ARG0_S %rcx\n #   define RUSTRT_ARG1_S %rdx\n #else\n-#   define RUSTRT_ARG0 RUSTRT_RDI  \n+#   define RUSTRT_ARG0_S %rdi\n+#   define RUSTRT_ARG1_S %rsi\n #endif\n \n ", "previous_filename": "src/rt/arch/x86_64/x86_64_regs.h"}]}