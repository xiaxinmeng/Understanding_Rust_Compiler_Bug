{"sha": "f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "node_id": "C_kwDOAAsO6NoAKGY4OWQ2NGQ3YWE5MWY3YmE1Y2E0ZmZkNGViNmFiNDJjZjYxYjEyYzA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-08T21:06:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T08:54:43Z"}, "message": "Use def_key in `tcx.item_name` when possible.", "tree": {"sha": "22d08eb713a19a1e92df9f41b955f8d454d77011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d08eb713a19a1e92df9f41b955f8d454d77011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "html_url": "https://github.com/rust-lang/rust/commit/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5dfa6a78df6eb934c353e94cf679af03235d21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dfa6a78df6eb934c353e94cf679af03235d21a", "html_url": "https://github.com/rust-lang/rust/commit/b5dfa6a78df6eb934c353e94cf679af03235d21a"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "4908992085a6e12de70bf3f25fc513d71c4f0ff2", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -147,6 +147,11 @@ impl DefKey {\n         // DefPathHashes in this DefPathTable.\n         DefPathHash::new(parent.stable_crate_id(), local_hash)\n     }\n+\n+    #[inline]\n+    pub fn get_opt_name(&self) -> Option<Symbol> {\n+        self.disambiguated_data.data.get_opt_name()\n+    }\n }\n \n /// A pair of `DefPathData` and an integer disambiguator. The integer is"}, {"sha": "65796fbc698d8cc753207a41c8c65acd178e1b77", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -554,13 +554,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn ty_param_name(self, id: HirId) -> Symbol {\n-        match self.get(id) {\n-            Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {\n-                kw::SelfUpper\n-            }\n-            Node::GenericParam(param) => param.name.ident().name,\n-            _ => bug!(\"ty_param_name: {} not a type parameter\", self.node_to_string(id)),\n+    pub fn ty_param_name(self, def_id: LocalDefId) -> Symbol {\n+        let def_kind = self.tcx.def_kind(def_id);\n+        match def_kind {\n+            DefKind::Trait | DefKind::TraitAlias => kw::SelfUpper,\n+            DefKind::TyParam | DefKind::ConstParam => self.tcx.item_name(def_id.to_def_id()),\n+            _ => bug!(\"ty_param_name: {:?} is a {:?} not a type parameter\", def_id, def_kind),\n         }\n     }\n "}, {"sha": "bbe1d367b77ca0b9c48cf459e50bc46570da13d6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -517,10 +517,7 @@ rustc_queries! {\n     /// To avoid cycles within the predicates of a single item we compute\n     /// per-type-parameter predicates for resolving `T::AssocTy`.\n     query type_param_predicates(key: (DefId, LocalDefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n-        desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n-            let id = tcx.hir().local_def_id_to_hir_id(key.1);\n-            tcx.hir().ty_param_name(id)\n-        }}\n+        desc { |tcx| \"computing the bounds for type parameter `{}`\", tcx.hir().ty_param_name(key.1) }\n     }\n \n     query trait_def(key: DefId) -> ty::TraitDef {"}, {"sha": "9151c2cd5e07ee92abb3304f71e8a1083aa10496", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -1986,27 +1986,25 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n-    fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {\n-        self.hir().get_if_local(def_id).and_then(|node| node.ident())\n-    }\n-\n-    fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {\n+    fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n         if def_id.index == CRATE_DEF_INDEX {\n             Some(self.crate_name(def_id.krate))\n         } else {\n             let def_key = self.def_key(def_id);\n             match def_key.disambiguated_data.data {\n                 // The name of a constructor is that of its parent.\n-                rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {\n-                    krate: def_id.krate,\n-                    index: def_key.parent.unwrap(),\n-                }),\n-                _ => def_key.disambiguated_data.data.get_opt_name(),\n+                rustc_hir::definitions::DefPathData::Ctor => self\n+                    .opt_item_name(DefId { krate: def_id.krate, index: def_key.parent.unwrap() }),\n+                // The name of opaque types only exists in HIR.\n+                rustc_hir::definitions::DefPathData::ImplTrait\n+                    if let Some(def_id) = def_id.as_local() =>\n+                    self.hir().opt_name(self.hir().local_def_id_to_hir_id(def_id)),\n+                _ => def_key.get_opt_name(),\n             }\n         }\n     }\n \n-    /// Look up the name of an item across crates. This does not look at HIR.\n+    /// Look up the name of a definition across crates. This does not look at HIR.\n     ///\n     /// When possible, this function should be used for cross-crate lookups over\n     /// [`opt_item_name`] to avoid invalidating the incremental cache. If you\n@@ -2018,18 +2016,21 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn item_name(self, id: DefId) -> Symbol {\n         // Look at cross-crate items first to avoid invalidating the incremental cache\n         // unless we have to.\n-        self.item_name_from_def_id(id).unwrap_or_else(|| {\n+        self.opt_item_name(id).unwrap_or_else(|| {\n             bug!(\"item_name: no name for {:?}\", self.def_path(id));\n         })\n     }\n \n-    /// Look up the name and span of an item or [`Node`].\n+    /// Look up the name and span of a definition.\n     ///\n     /// See [`item_name`][Self::item_name] for more information.\n-    pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n-        // Look at the HIR first so the span will be correct if this is a local item.\n-        self.item_name_from_hir(def_id)\n-            .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))\n+    pub fn opt_item_ident(self, def_id: DefId) -> Option<Ident> {\n+        let def = self.opt_item_name(def_id)?;\n+        let span = def_id\n+            .as_local()\n+            .and_then(|id| self.def_ident_span(id))\n+            .unwrap_or(rustc_span::DUMMY_SP);\n+        Some(Ident::new(def, span))\n     }\n \n     pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {"}, {"sha": "cf13c856a71c1434d6a007014d2973fbfcabab88", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -201,7 +201,7 @@ fn emit_unused_generic_params_error<'tcx>(\n         return;\n     }\n \n-    let fn_span = match tcx.opt_item_name(def_id) {\n+    let fn_span = match tcx.opt_item_ident(def_id) {\n         Some(ident) => ident.span,\n         _ => tcx.def_span(def_id),\n     };"}, {"sha": "c920c80d1bba1e5cf46c2ae530a3c1312794e3bb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -2064,7 +2064,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::BindingObligation(item_def_id, span) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let mut multispan = MultiSpan::from(span);\n-                if let Some(ident) = tcx.opt_item_name(item_def_id) {\n+                if let Some(ident) = tcx.opt_item_ident(item_def_id) {\n                     let sm = tcx.sess.source_map();\n                     let same_line =\n                         match (sm.lookup_line(ident.span.hi()), sm.lookup_line(span.lo())) {\n@@ -2267,7 +2267,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if !is_upvar_tys_infer_tuple {\n                     let msg = format!(\"required because it appears within the type `{}`\", ty);\n                     match ty.kind() {\n-                        ty::Adt(def, _) => match self.tcx.opt_item_name(def.did()) {\n+                        ty::Adt(def, _) => match self.tcx.opt_item_ident(def.did()) {\n                             Some(ident) => err.span_note(ident.span, &msg),\n                             None => err.note(&msg),\n                         },\n@@ -2475,7 +2475,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n                 let sp = self\n                     .tcx\n-                    .opt_item_name(trait_item_def_id)\n+                    .opt_item_ident(trait_item_def_id)\n                     .map(|i| i.span)\n                     .unwrap_or_else(|| self.tcx.def_span(trait_item_def_id));\n                 let mut assoc_span: MultiSpan = sp.into();\n@@ -2486,7 +2486,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(ident) = self\n                     .tcx\n                     .opt_associated_item(trait_item_def_id)\n-                    .and_then(|i| self.tcx.opt_item_name(i.container.id()))\n+                    .and_then(|i| self.tcx.opt_item_ident(i.container.id()))\n                 {\n                     assoc_span.push_span_label(ident.span, \"in this trait\");\n                 }\n@@ -2511,7 +2511,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(ident) = self\n                     .tcx\n                     .opt_associated_item(trait_item_def_id)\n-                    .and_then(|i| self.tcx.opt_item_name(i.container.id()))\n+                    .and_then(|i| self.tcx.opt_item_ident(i.container.id()))\n                 {\n                     assoc_span.push_span_label(ident.span, \"in this trait\");\n                 }"}, {"sha": "5f5b81b892475b198b62a6feb7c90905464a8583", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -82,8 +82,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 Res::Def(DefKind::TyParam, src_def_id) => {\n                     if let Some(param_local_id) = param.def_id.as_local() {\n-                        let param_hir_id = tcx.hir().local_def_id_to_hir_id(param_local_id);\n-                        let param_name = tcx.hir().ty_param_name(param_hir_id);\n+                        let param_name = tcx.hir().ty_param_name(param_local_id);\n                         let param_type = tcx.infer_ctxt().enter(|infcx| {\n                             infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id))\n                         });"}, {"sha": "e58617b985d0729bb4452d5d046faabcaa22a2d7", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -1620,8 +1620,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"find_bound_for_assoc_item: predicates={:#?}\", predicates);\n \n-        let param_hir_id = tcx.hir().local_def_id_to_hir_id(ty_param_def_id);\n-        let param_name = tcx.hir().ty_param_name(param_hir_id);\n+        let param_name = tcx.hir().ty_param_name(ty_param_def_id);\n         self.one_bound_for_assoc_type(\n             || {\n                 traits::transitive_bounds_that_define_assoc_type(\n@@ -2266,11 +2265,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments);\n \n                 let def_id = def_id.expect_local();\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n                 let item_def_id = tcx.hir().ty_param_owner(def_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n-                tcx.mk_ty_param(index, tcx.hir().name(hir_id))\n+                tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id))\n             }\n             Res::SelfTy { trait_: Some(_), alias_to: None } => {\n                 // `Self` in trait or type alias."}, {"sha": "669521bc4725effe38218cfbf7599f2a97188442", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -2195,7 +2195,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None => return,\n         };\n         let param_span = self.tcx.hir().span(param_hir_id);\n-        let param_name = self.tcx.hir().ty_param_name(param_hir_id);\n+        let param_name = self.tcx.hir().ty_param_name(param_def_id.expect_local());\n \n         err.span_label(param_span, &format!(\"type parameter '{}' declared here\", param_name));\n     }"}, {"sha": "026151ce7df824fa02e74029a176c201225033e9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f89d64d7aa91f7ba5ca4ffd4eb6ab42cf61b12c0", "patch": "@@ -561,7 +561,7 @@ fn type_param_predicates(\n     let param_owner = tcx.hir().ty_param_owner(def_id);\n     let generics = tcx.generics_of(param_owner);\n     let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n-    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id));\n+    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner.to_def_id() {"}]}