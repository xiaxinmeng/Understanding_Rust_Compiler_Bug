{"sha": "3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNmRiYjg5ZGRjM2Y2MGRjNTg5ZTRhMjJlOGFkNWU0YmE0ODg5YTc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-14T09:52:23Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-14T09:52:23Z"}, "message": "Fix some long lines.", "tree": {"sha": "e356cf33efc4803be96071aede0f8134f392d2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e356cf33efc4803be96071aede0f8134f392d2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "html_url": "https://github.com/rust-lang/rust/commit/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8143a05812c56cf8b728f05aff68d2e207bde82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8143a05812c56cf8b728f05aff68d2e207bde82a", "html_url": "https://github.com/rust-lang/rust/commit/8143a05812c56cf8b728f05aff68d2e207bde82a"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "b25fa7d4bf1175bad9c1b40840f9ddc1076fca3b", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "patch": "@@ -63,16 +63,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"arith_offset\" => {\n                 let ptr = args_ptrs[0].read_ptr(&self.memory)?;\n-                let offset = self.value_to_primval(args_ptrs[1], isize)?.expect_int(\"arith_offset second arg not isize\");\n+                let offset = self.value_to_primval(args_ptrs[1], isize)?\n+                    .expect_int(\"arith_offset second arg not isize\");\n                 let new_ptr = ptr.offset(offset as isize);\n                 self.write_primval(dest, PrimVal::Ptr(new_ptr))?;\n             }\n \n             \"assume\" => {\n                 let bool = self.tcx.types.bool;\n-                if !self.value_to_primval(args_ptrs[0], bool)?.expect_bool(\"assume arg not bool\") {\n-                    return Err(EvalError::AssumptionNotHeld);\n-                }\n+                let cond = self.value_to_primval(args_ptrs[0], bool)?\n+                    .expect_bool(\"assume arg not bool\");\n+                if !cond { return Err(EvalError::AssumptionNotHeld); }\n             }\n \n             \"atomic_load\" |\n@@ -99,7 +100,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let elem_align = self.type_align(elem_ty);\n                 let src = args_ptrs[0].read_ptr(&self.memory)?;\n                 let dest = args_ptrs[1].read_ptr(&self.memory)?;\n-                let count = self.value_to_primval(args_ptrs[2], usize)?.expect_uint(\"arith_offset second arg not isize\");\n+                let count = self.value_to_primval(args_ptrs[2], usize)?\n+                    .expect_uint(\"arith_offset second arg not isize\");\n                 self.memory.copy(src, dest, count as usize * elem_size, elem_align)?;\n             }\n \n@@ -121,12 +123,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"fabsf32\" => {\n-                let f = self.value_to_primval(args_ptrs[2], f32)?.expect_f32(\"fabsf32 read non f32\");\n+                let f = self.value_to_primval(args_ptrs[2], f32)?\n+                    .expect_f32(\"fabsf32 read non f32\");\n                 self.write_primval(dest, PrimVal::F32(f.abs()))?;\n             }\n \n             \"fabsf64\" => {\n-                let f = self.value_to_primval(args_ptrs[2], f64)?.expect_f64(\"fabsf64 read non f64\");\n+                let f = self.value_to_primval(args_ptrs[2], f64)?\n+                    .expect_f64(\"fabsf64 read non f64\");\n                 self.write_primval(dest, PrimVal::F64(f.abs()))?;\n             }\n \n@@ -181,7 +185,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"offset\" => {\n                 let pointee_ty = substs.type_at(0);\n                 let pointee_size = self.type_size(pointee_ty) as isize;\n-                let offset = self.value_to_primval(args_ptrs[1], isize)?.expect_int(\"offset second arg not isize\");\n+                let offset = self.value_to_primval(args_ptrs[1], isize)?\n+                    .expect_int(\"offset second arg not isize\");\n \n                 let ptr = args_ptrs[0].read_ptr(&self.memory)?;\n                 let result_ptr = ptr.offset(offset as isize * pointee_size);\n@@ -201,24 +206,30 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"powif32\" => {\n-                let f = self.value_to_primval(args_ptrs[0], f32)?.expect_f32(\"powif32 first arg not f32\");\n-                let i = self.value_to_primval(args_ptrs[1], i32)?.expect_int(\"powif32 second arg not i32\");\n+                let f = self.value_to_primval(args_ptrs[0], f32)?\n+                    .expect_f32(\"powif32 first arg not f32\");\n+                let i = self.value_to_primval(args_ptrs[1], i32)?\n+                    .expect_int(\"powif32 second arg not i32\");\n                 self.write_primval(dest, PrimVal::F32(f.powi(i as i32)))?;\n             }\n \n             \"powif64\" => {\n-                let f = self.value_to_primval(args_ptrs[0], f64)?.expect_f64(\"powif64 first arg not f64\");\n-                let i = self.value_to_primval(args_ptrs[1], i32)?.expect_int(\"powif64 second arg not i32\");\n+                let f = self.value_to_primval(args_ptrs[0], f64)?\n+                    .expect_f64(\"powif64 first arg not f64\");\n+                let i = self.value_to_primval(args_ptrs[1], i32)?\n+                    .expect_int(\"powif64 second arg not i32\");\n                 self.write_primval(dest, PrimVal::F64(f.powi(i as i32)))?;\n             }\n \n             \"sqrtf32\" => {\n-                let f = self.value_to_primval(args_ptrs[0], f32)?.expect_f32(\"sqrtf32 first arg not f32\");\n+                let f = self.value_to_primval(args_ptrs[0], f32)?\n+                    .expect_f32(\"sqrtf32 first arg not f32\");\n                 self.write_primval(dest, PrimVal::F32(f.sqrt()))?;\n             }\n \n             \"sqrtf64\" => {\n-                let f = self.value_to_primval(args_ptrs[0], f64)?.expect_f64(\"sqrtf64 first arg not f64\");\n+                let f = self.value_to_primval(args_ptrs[0], f64)?\n+                    .expect_f64(\"sqrtf64 first arg not f64\");\n                 self.write_primval(dest, PrimVal::F64(f.sqrt()))?;\n             }\n "}]}