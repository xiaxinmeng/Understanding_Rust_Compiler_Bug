{"sha": "2f825db5789678965861e5109aa30b9b9e2a7b4c", "node_id": "C_kwDOAAsO6NoAKDJmODI1ZGI1Nzg5Njc4OTY1ODYxZTUxMDlhYTMwYjliOWUyYTdiNGM", "commit": {"author": {"name": "i509VCB", "email": "git@i509.me", "date": "2022-07-02T04:59:03Z"}, "committer": {"name": "i509VCB", "email": "git@i509.me", "date": "2022-07-14T21:05:52Z"}, "message": "std_instead_of_core, std_instead_of_alloc, alloc_instead_of_core", "tree": {"sha": "8bd2e20552ae5c8f08dfbe02b8a181ddb230beda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd2e20552ae5c8f08dfbe02b8a181ddb230beda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f825db5789678965861e5109aa30b9b9e2a7b4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEW8HU6jGFkrnemwMx7kf178XujNwFAmLQhTIACgkQ7kf178Xu\njNy8KQ/+I3VvdslzXpZVfVwIiIqUKepfbYFlXj4ee+KSoCWTgU30+KY9PzsjUPyX\nrstBLkKyHBTI/szTwFf4qj1t3kBF++5tV7iha2k7rPqKWOSWS+7A1BdN2A1vcpSV\n0TLZgyLKFMTsow1QRnOvgNrXN42GsVyBYohzHeVsyPg2hprBJvhPZ/wmd3cq35Ju\nunurRxiFJAKZjK/keZGk/Mx8gsma7D/BrW+fALELKBJG3/iAldOgHZ/OjDerTQhz\noWJCXgRFUDKLW89cW2eD5E2kL+I2RaoaTREQB/zL6CBSev1EYL8lU6QWndjwgCwA\nD3De0trKI/+nQ6EdQEEnGcHsVfLJkAFswMP15yYYF8z3MKAHBsEruRlH48Wv3MF+\ndZmSEY+x6w0SwnDUZT4QdKkg4JAqvLkjnHtuoNZL+jPMg3Nrj5RaUzO7PsO7RD3Z\n1SSKnAd5r1b4nMNaxJ/W5f2Eu6fb0HgkSrKXxiwQAnFyi1u+vSK3KP9vR5Kj/UWW\nG5ZlXhbxfdSRnRVOtY8lxGSqyC3P3M1bjfUeoyAOYEB22aGC8FPe68U9dbhovQR9\nYxWPkUBPNExCbfaciHyGsXJzUlVg8N731CB8KC3N53iwQM1eB6rPCPqx7Qd/5eXz\ndjewCwOWfsPkIIiZ3bz5hLYXVnYtjryNiOXeOAkvdjI+TJ8v+Ek=\n=zPj6\n-----END PGP SIGNATURE-----", "payload": "tree 8bd2e20552ae5c8f08dfbe02b8a181ddb230beda\nparent 0f5a38f2d6fa3f241ab4ce79f9c927659da7f208\nauthor i509VCB <git@i509.me> 1656737943 -0500\ncommitter i509VCB <git@i509.me> 1657832752 -0500\n\nstd_instead_of_core, std_instead_of_alloc, alloc_instead_of_core\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f825db5789678965861e5109aa30b9b9e2a7b4c", "html_url": "https://github.com/rust-lang/rust/commit/2f825db5789678965861e5109aa30b9b9e2a7b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f825db5789678965861e5109aa30b9b9e2a7b4c/comments", "author": {"login": "i509VCB", "id": 30619168, "node_id": "MDQ6VXNlcjMwNjE5MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/30619168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i509VCB", "html_url": "https://github.com/i509VCB", "followers_url": "https://api.github.com/users/i509VCB/followers", "following_url": "https://api.github.com/users/i509VCB/following{/other_user}", "gists_url": "https://api.github.com/users/i509VCB/gists{/gist_id}", "starred_url": "https://api.github.com/users/i509VCB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i509VCB/subscriptions", "organizations_url": "https://api.github.com/users/i509VCB/orgs", "repos_url": "https://api.github.com/users/i509VCB/repos", "events_url": "https://api.github.com/users/i509VCB/events{/privacy}", "received_events_url": "https://api.github.com/users/i509VCB/received_events", "type": "User", "site_admin": false}, "committer": {"login": "i509VCB", "id": 30619168, "node_id": "MDQ6VXNlcjMwNjE5MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/30619168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i509VCB", "html_url": "https://github.com/i509VCB", "followers_url": "https://api.github.com/users/i509VCB/followers", "following_url": "https://api.github.com/users/i509VCB/following{/other_user}", "gists_url": "https://api.github.com/users/i509VCB/gists{/gist_id}", "starred_url": "https://api.github.com/users/i509VCB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i509VCB/subscriptions", "organizations_url": "https://api.github.com/users/i509VCB/orgs", "repos_url": "https://api.github.com/users/i509VCB/repos", "events_url": "https://api.github.com/users/i509VCB/events{/privacy}", "received_events_url": "https://api.github.com/users/i509VCB/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "html_url": "https://github.com/rust-lang/rust/commit/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208"}], "stats": {"total": 269, "additions": 269, "deletions": 0}, "files": [{"sha": "920d397add716b742e032d8cdd103d59b94007a2", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -3432,6 +3432,7 @@ Released 2018-09-13\n <!-- lint disable no-unused-definitions -->\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n+[`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n [`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n@@ -3901,6 +3902,8 @@ Released 2018-09-13\n [`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n [`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n [`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n+[`std_instead_of_alloc`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc\n+[`std_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\n [`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign"}, {"sha": "91d27bf526d096674e2dd1b6e8323c97725eb35e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -497,6 +497,9 @@ store.register_lints(&[\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n     slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n     stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n+    std_instead_of_core::ALLOC_INSTEAD_OF_CORE,\n+    std_instead_of_core::STD_INSTEAD_OF_ALLOC,\n+    std_instead_of_core::STD_INSTEAD_OF_CORE,\n     strings::STRING_ADD,\n     strings::STRING_ADD_ASSIGN,\n     strings::STRING_FROM_UTF8_AS_BYTES,"}, {"sha": "43f1c892eb9b9c396db40f9deb83d481d380c7da", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -66,6 +66,9 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(shadow::SHADOW_SAME),\n     LintId::of(shadow::SHADOW_UNRELATED),\n     LintId::of(single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES),\n+    LintId::of(std_instead_of_core::ALLOC_INSTEAD_OF_CORE),\n+    LintId::of(std_instead_of_core::STD_INSTEAD_OF_ALLOC),\n+    LintId::of(std_instead_of_core::STD_INSTEAD_OF_CORE),\n     LintId::of(strings::STRING_ADD),\n     LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),"}, {"sha": "4f9db4eb5ae051c252c99f3e061207eed61d4401", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -365,6 +365,7 @@ mod single_component_path_imports;\n mod size_of_in_element_count;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n+mod std_instead_of_core;\n mod strings;\n mod strlen_on_c_strings;\n mod suspicious_operation_groupings;\n@@ -915,6 +916,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n+    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "56f2a7bae152b9a27a710b8fc936b9b2bca33b66", "filename": "clippy_lints/src/std_instead_of_core.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -0,0 +1,134 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::{def::Res, HirId, Path, PathSegment};\n+use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, symbol::kw, Symbol};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `std` when available through `core`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility may wish to ensure types are imported from core to ensure\n+    /// disabling `std` does not cause the crate to fail to compile. This lint is also useful for crates\n+    /// migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::hash::Hasher;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use core::hash::Hasher;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub STD_INSTEAD_OF_CORE,\n+    restriction,\n+    \"type is imported from std when available in core\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `std` when available through `alloc`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility and require alloc may wish to ensure types are imported from\n+    /// alloc to ensure disabling `std` does not cause the crate to fail to compile. This lint is also useful\n+    /// for crates migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::vec::Vec;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # extern crate alloc;\n+    /// use alloc::vec::Vec;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub STD_INSTEAD_OF_ALLOC,\n+    restriction,\n+    \"type is imported from std when available in alloc\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds items imported through `alloc` when available through `core`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Crates which have `no_std` compatibility and may optionally require alloc may wish to ensure types are\n+    /// imported from alloc to ensure disabling `alloc` does not cause the crate to fail to compile. This lint\n+    /// is also useful for crates migrating to become `no_std` compatible.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # extern crate alloc;\n+    /// use alloc::slice::from_ref;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use core::slice::from_ref;\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub ALLOC_INSTEAD_OF_CORE,\n+    restriction,\n+    \"type is imported from alloc when available in core\"\n+}\n+\n+declare_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for StdReexports {\n+    fn check_path(&mut self, cx: &LateContext<'tcx>, path: &Path<'tcx>, _: HirId) {\n+        // std_instead_of_core\n+        check_path(cx, path, sym::std, sym::core, STD_INSTEAD_OF_CORE);\n+        // std_instead_of_alloc\n+        check_path(cx, path, sym::std, sym::alloc, STD_INSTEAD_OF_ALLOC);\n+        // alloc_instead_of_core\n+        check_path(cx, path, sym::alloc, sym::core, ALLOC_INSTEAD_OF_CORE);\n+    }\n+}\n+\n+fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_crate: Symbol, lint: &'static Lint) {\n+    if_chain! {\n+        // check if path resolves to the suggested crate.\n+        if let Res::Def(_, def_id) = path.res;\n+        if suggested_crate == cx.tcx.crate_name(def_id.krate);\n+\n+        // check if the first segment of the path is the crate we want to identify\n+        if let Some(path_root_segment) = get_first_segment(path);\n+\n+        // check if the path matches the crate we want to suggest the other path for.\n+        if krate == path_root_segment.ident.name;\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                lint,\n+                path.span,\n+                &format!(\"used import from `{}` instead of `{}`\", krate, suggested_crate),\n+                None,\n+                &format!(\"consider importing the item from `{}`\", suggested_crate),\n+            );\n+        }\n+    }\n+}\n+\n+/// Returns the first named segment of a [`Path`].\n+///\n+/// If this is a global path (such as `::std::fmt::Debug`), then the segment after [`kw::PathRoot`]\n+/// is returned.\n+fn get_first_segment<'tcx>(path: &Path<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n+    let segment = path.segments.first()?;\n+\n+    // A global path will have PathRoot as the first segment. In this case, return the segment after.\n+    if segment.ident.name == kw::PathRoot {\n+        path.segments.get(1)\n+    } else {\n+        Some(segment)\n+    }\n+}"}, {"sha": "74f05ec1f658a13de195ea294ec65ab302b2ec8e", "filename": "tests/ui/std_instead_of_core.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/tests%2Fui%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/tests%2Fui%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstd_instead_of_core.rs?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -0,0 +1,39 @@\n+#![warn(clippy::std_instead_of_core)]\n+#![allow(unused_imports)]\n+\n+extern crate alloc;\n+\n+#[warn(clippy::std_instead_of_core)]\n+fn std_instead_of_core() {\n+    // Regular import\n+    use std::hash::Hasher;\n+    // Absolute path\n+    use ::std::hash::Hash;\n+\n+    // Multiple imports\n+    use std::fmt::{Debug, Result};\n+\n+    // Function calls\n+    let ptr = std::ptr::null::<u32>();\n+    let ptr_mut = ::std::ptr::null_mut::<usize>();\n+\n+    // Types\n+    let cell = std::cell::Cell::new(8u32);\n+    let cell_absolute = ::std::cell::Cell::new(8u32);\n+}\n+\n+#[warn(clippy::std_instead_of_alloc)]\n+fn std_instead_of_alloc() {\n+    use std::vec::Vec;\n+}\n+\n+#[warn(clippy::alloc_instead_of_core)]\n+fn alloc_instead_of_core() {\n+    use alloc::slice::from_ref;\n+}\n+\n+fn main() {\n+    std_instead_of_core();\n+    std_instead_of_alloc();\n+    alloc_instead_of_core();\n+}"}, {"sha": "9f1644835c10d129537b3bf7963efd3b7cbd6243", "filename": "tests/ui/std_instead_of_core.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2f825db5789678965861e5109aa30b9b9e2a7b4c/tests%2Fui%2Fstd_instead_of_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f825db5789678965861e5109aa30b9b9e2a7b4c/tests%2Fui%2Fstd_instead_of_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstd_instead_of_core.stderr?ref=2f825db5789678965861e5109aa30b9b9e2a7b4c", "patch": "@@ -0,0 +1,85 @@\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:9:9\n+   |\n+LL |     use std::hash::Hasher;\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-core` implied by `-D warnings`\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:11:9\n+   |\n+LL |     use ::std::hash::Hash;\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:14:20\n+   |\n+LL |     use std::fmt::{Debug, Result};\n+   |                    ^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:14:27\n+   |\n+LL |     use std::fmt::{Debug, Result};\n+   |                           ^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:17:15\n+   |\n+LL |     let ptr = std::ptr::null::<u32>();\n+   |               ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:18:19\n+   |\n+LL |     let ptr_mut = ::std::ptr::null_mut::<usize>();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:21:16\n+   |\n+LL |     let cell = std::cell::Cell::new(8u32);\n+   |                ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:22:25\n+   |\n+LL |     let cell_absolute = ::std::cell::Cell::new(8u32);\n+   |                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider importing the item from `core`\n+\n+error: used import from `std` instead of `alloc`\n+  --> $DIR/std_instead_of_core.rs:27:9\n+   |\n+LL |     use std::vec::Vec;\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n+   = help: consider importing the item from `alloc`\n+\n+error: used import from `alloc` instead of `core`\n+  --> $DIR/std_instead_of_core.rs:32:9\n+   |\n+LL |     use alloc::slice::from_ref;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n+   = help: consider importing the item from `core`\n+\n+error: aborting due to 10 previous errors\n+"}]}