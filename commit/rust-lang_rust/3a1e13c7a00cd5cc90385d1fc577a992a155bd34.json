{"sha": "3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMWUxM2M3YTAwY2Q1Y2M5MDM4NWQxZmM1NzdhOTkyYTE1NWJkMzQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T12:13:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:04Z"}, "message": "std: convert str::escape_* to methods.", "tree": {"sha": "0e3059fecfe8c9b7c509fa40d0b7b6d145bfebae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e3059fecfe8c9b7c509fa40d0b7b6d145bfebae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "html_url": "https://github.com/rust-lang/rust/commit/3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e60e2e297cb28ec4812fd3ed6124f44ff28c642", "html_url": "https://github.com/rust-lang/rust/commit/9e60e2e297cb28ec4812fd3ed6124f44ff28c642"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "5da0301c52a4fd1353f4b8499bb9f295cd2c6927", "filename": "src/libstd/str.rs", "status": "modified", "additions": 34, "deletions": 44, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "patch": "@@ -1070,26 +1070,6 @@ pub fn subslice_offset(outer: &str, inner: &str) -> uint {\n     }\n }\n \n-/// Escape each char in `s` with char::escape_default.\n-pub fn escape_default(s: &str) -> ~str {\n-    let mut out: ~str = ~\"\";\n-    out.reserve_at_least(s.len());\n-    for s.iter().advance |c| {\n-        out.push_str(char::escape_default(c));\n-    }\n-    out\n-}\n-\n-/// Escape each char in `s` with char::escape_unicode.\n-pub fn escape_unicode(s: &str) -> ~str {\n-    let mut out: ~str = ~\"\";\n-    out.reserve_at_least(s.len());\n-    for s.iter().advance |c| {\n-        out.push_str(char::escape_unicode(c));\n-    }\n-    out\n-}\n-\n /// Unsafe operations\n pub mod raw {\n     use cast;\n@@ -1588,11 +1568,24 @@ impl<'self> StrSlice<'self> for &'self str {\n     }\n \n     /// Escape each char in `s` with char::escape_default.\n-    #[inline]\n-    fn escape_default(&self) -> ~str { escape_default(*self) }\n+    fn escape_default(&self) -> ~str {\n+        let mut out: ~str = ~\"\";\n+        out.reserve_at_least(self.len());\n+        for self.iter().advance |c| {\n+            out.push_str(char::escape_default(c));\n+        }\n+        out\n+    }\n+\n     /// Escape each char in `s` with char::escape_unicode.\n-    #[inline]\n-    fn escape_unicode(&self) -> ~str { escape_unicode(*self) }\n+    fn escape_unicode(&self) -> ~str {\n+        let mut out: ~str = ~\"\";\n+        out.reserve_at_least(self.len());\n+        for self.iter().advance |c| {\n+            out.push_str(char::escape_unicode(c));\n+        }\n+        out\n+    }\n \n     /// Returns a string with leading and trailing whitespace removed\n     #[inline]\n@@ -3176,30 +3169,27 @@ mod tests {\n \n     #[test]\n     fn test_escape_unicode() {\n-        assert_eq!(escape_unicode(\"abc\"), ~\"\\\\x61\\\\x62\\\\x63\");\n-        assert_eq!(escape_unicode(\"a c\"), ~\"\\\\x61\\\\x20\\\\x63\");\n-        assert_eq!(escape_unicode(\"\\r\\n\\t\"), ~\"\\\\x0d\\\\x0a\\\\x09\");\n-        assert_eq!(escape_unicode(\"'\\\"\\\\\"), ~\"\\\\x27\\\\x22\\\\x5c\");\n-        assert!(escape_unicode(\"\\x00\\x01\\xfe\\xff\") ==\n-                     ~\"\\\\x00\\\\x01\\\\xfe\\\\xff\");\n-        assert_eq!(escape_unicode(\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n-        assert!(escape_unicode(\"\\U00010000\\U0010ffff\") ==\n-            ~\"\\\\U00010000\\\\U0010ffff\");\n-        assert_eq!(escape_unicode(\"ab\\ufb00\"), ~\"\\\\x61\\\\x62\\\\ufb00\");\n-        assert_eq!(escape_unicode(\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\x0d\");\n+        assert_eq!(\"abc\".escape_unicode(), ~\"\\\\x61\\\\x62\\\\x63\");\n+        assert_eq!(\"a c\".escape_unicode(), ~\"\\\\x61\\\\x20\\\\x63\");\n+        assert_eq!(\"\\r\\n\\t\".escape_unicode(), ~\"\\\\x0d\\\\x0a\\\\x09\");\n+        assert_eq!(\"'\\\"\\\\\".escape_unicode(), ~\"\\\\x27\\\\x22\\\\x5c\");\n+        assert_eq!(\"\\x00\\x01\\xfe\\xff\".escape_unicode(), ~\"\\\\x00\\\\x01\\\\xfe\\\\xff\");\n+        assert_eq!(\"\\u0100\\uffff\".escape_unicode(), ~\"\\\\u0100\\\\uffff\");\n+        assert_eq!(\"\\U00010000\\U0010ffff\".escape_unicode(), ~\"\\\\U00010000\\\\U0010ffff\");\n+        assert_eq!(\"ab\\ufb00\".escape_unicode(), ~\"\\\\x61\\\\x62\\\\ufb00\");\n+        assert_eq!(\"\\U0001d4ea\\r\".escape_unicode(), ~\"\\\\U0001d4ea\\\\x0d\");\n     }\n \n     #[test]\n     fn test_escape_default() {\n-        assert_eq!(escape_default(\"abc\"), ~\"abc\");\n-        assert_eq!(escape_default(\"a c\"), ~\"a c\");\n-        assert_eq!(escape_default(\"\\r\\n\\t\"), ~\"\\\\r\\\\n\\\\t\");\n-        assert_eq!(escape_default(\"'\\\"\\\\\"), ~\"\\\\'\\\\\\\"\\\\\\\\\");\n-        assert_eq!(escape_default(\"\\u0100\\uffff\"), ~\"\\\\u0100\\\\uffff\");\n-        assert!(escape_default(\"\\U00010000\\U0010ffff\") ==\n-            ~\"\\\\U00010000\\\\U0010ffff\");\n-        assert_eq!(escape_default(\"ab\\ufb00\"), ~\"ab\\\\ufb00\");\n-        assert_eq!(escape_default(\"\\U0001d4ea\\r\"), ~\"\\\\U0001d4ea\\\\r\");\n+        assert_eq!(\"abc\".escape_default(), ~\"abc\");\n+        assert_eq!(\"a c\".escape_default(), ~\"a c\");\n+        assert_eq!(\"\\r\\n\\t\".escape_default(), ~\"\\\\r\\\\n\\\\t\");\n+        assert_eq!(\"'\\\"\\\\\".escape_default(), ~\"\\\\'\\\\\\\"\\\\\\\\\");\n+        assert_eq!(\"\\u0100\\uffff\".escape_default(), ~\"\\\\u0100\\\\uffff\");\n+        assert_eq!(\"\\U00010000\\U0010ffff\".escape_default(), ~\"\\\\U00010000\\\\U0010ffff\");\n+        assert_eq!(\"ab\\ufb00\".escape_default(), ~\"ab\\\\ufb00\");\n+        assert_eq!(\"\\U0001d4ea\\r\".escape_default(), ~\"\\\\U0001d4ea\\\\r\");\n     }\n \n     #[test]"}, {"sha": "91605db77b54adbbd889068c6aa0fc825e3564d5", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "patch": "@@ -193,7 +193,7 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n         }\n         body\n       }\n-      LIT_STR(ref s) => { ~\"\\\"\" + str::escape_default(*ident_to_str(s)) + \"\\\"\" }\n+      LIT_STR(ref s) => { ~\"\\\"\" + ident_to_str(s).escape_default() + \"\\\"\" }\n \n       /* Name components */\n       IDENT(s, _) => copy *in.get(s.name),"}, {"sha": "ea33c04dbb5f60bca361d4ad308c48b2476fbd94", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1e13c7a00cd5cc90385d1fc577a992a155bd34/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3a1e13c7a00cd5cc90385d1fc577a992a155bd34", "patch": "@@ -31,7 +31,6 @@ use print::pprust;\n \n use core::char;\n use core::io;\n-use core::str;\n use core::u64;\n use core::uint;\n use core::iterator::IteratorUtil;\n@@ -2113,7 +2112,7 @@ pub fn print_comment(s: @ps, cmnt: &comments::cmnt) {\n \n pub fn print_string(s: @ps, st: &str) {\n     word(s.s, \"\\\"\");\n-    word(s.s, str::escape_default(st));\n+    word(s.s, st.escape_default());\n     word(s.s, \"\\\"\");\n }\n "}]}