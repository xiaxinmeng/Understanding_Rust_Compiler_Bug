{"sha": "f2919a31c8101da2dd773ea5ffca4195e96d3d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTE5YTMxYzgxMDFkYTJkZDc3M2VhNWZmY2E0MTk1ZTk2ZDNkNTA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-06T21:56:47Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-07T06:44:12Z"}, "message": "Trust signature over return expr for generators.\n\nThis commit extends the logic used to determine what the expected\nsignature of a closure is so that it can also determine the expected\nsignature of a generator. This improves a diagnostic where the fn\nsignature was blamed instead of the generator body. It doesn't fix\nfix the diagnostic for `async fn`.", "tree": {"sha": "9ed35fdc286ecf9b99a6e440c36d2dc0b8033472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed35fdc286ecf9b99a6e440c36d2dc0b8033472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2919a31c8101da2dd773ea5ffca4195e96d3d50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzRKTwACgkQAXYLT59T\n8VSBwg/9GyM3PuMyyBJDfTJdBoOoMhRhE6+4yfIR/4TFfYgsUsRbLP65CkkFaqm9\nQ3ZJUIV4sjq9po/a+CwrAvU1giKYLZWi3ZdXvPOSjPaW8u3sxUmZbQ74Xij3HvV8\nw09kqhqv9eKuKBAnwyJ5QmOju+xZWYdrd8D/WVU7imYf+DiMKrAdO9ufkYLmSaEa\nVoyIsqIQeGmN4JdxRvQyAYmpR/Si7+//ltWslB5lguIyO74capIeaYmHYSdY683c\n6jvWnk2pPAWM2xhZ4dtxWbJT8dJKbOJiWKT0Nr51YPQEBudsx/+rVirh3QKqNh3e\nJbiyrAptmGtpXtEKTW4Gu0PJAV6e6tUSOpfhn0ktichv6/QrSECUWQHO8xjQwuQt\nMLiUz4PX/tbmd9ZsgMoQBVTcql7PhYbYyl3zEovYjgdRNyNGgWCA/w0SlRVNJD63\ncGCWzyLy6iDcnlB+jqAMqvweM0Y5W9e4Qqi6yKtb1i02d0/hgYKUsnsFKB1hAuQi\n1UJ6rAZn/OnMcW6z2pwyzfVv/ZeyHKXJuHljooBv0nONKb3kWA7stgRddaoxn9W9\nSkQ+/rueSsJ56AQtMQM6kuxjFCoMo+zuUJUKCdc3cc4vfsWH9q575due/72rNvBu\n8x15o2nfhzOzeTDGZogP1ZriFtpHq8shCxsaxLCtZV3MgZMx1D8=\n=UgOy\n-----END PGP SIGNATURE-----", "payload": "tree 9ed35fdc286ecf9b99a6e440c36d2dc0b8033472\nparent a416a19153e799dae6679d8672703dbeb48730d5\nauthor David Wood <david@davidtw.co> 1557179807 +0100\ncommitter David Wood <david@davidtw.co> 1557211452 +0100\n\nTrust signature over return expr for generators.\n\nThis commit extends the logic used to determine what the expected\nsignature of a closure is so that it can also determine the expected\nsignature of a generator. This improves a diagnostic where the fn\nsignature was blamed instead of the generator body. It doesn't fix\nfix the diagnostic for `async fn`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2919a31c8101da2dd773ea5ffca4195e96d3d50", "html_url": "https://github.com/rust-lang/rust/commit/f2919a31c8101da2dd773ea5ffca4195e96d3d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2919a31c8101da2dd773ea5ffca4195e96d3d50/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a416a19153e799dae6679d8672703dbeb48730d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a416a19153e799dae6679d8672703dbeb48730d5", "html_url": "https://github.com/rust-lang/rust/commit/a416a19153e799dae6679d8672703dbeb48730d5"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "3fa192f16f32e2c431740c5735f747089f0d5773", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f2919a31c8101da2dd773ea5ffca4195e96d3d50", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Given a projection like \"<F as Fn(X)>::Result == Y\", we can deduce\n-    /// everything we need to know about a closure.\n+    /// everything we need to know about a closure or generator.\n     ///\n     /// The `cause_span` should be the span that caused us to\n     /// have this expected signature, or `None` if we can't readily\n@@ -262,37 +262,50 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n-        if tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_none() {\n+        let is_fn = tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_some();\n+        let gen_trait = tcx.lang_items().gen_trait().unwrap();\n+        let is_gen = gen_trait == trait_ref.def_id();\n+        if !is_fn && !is_gen {\n+            debug!(\"deduce_sig_from_projection: not fn or generator\");\n             return None;\n         }\n \n-        let arg_param_ty = trait_ref.skip_binder().substs.type_at(1);\n-        let arg_param_ty = self.resolve_type_vars_if_possible(&arg_param_ty);\n-        debug!(\n-            \"deduce_sig_from_projection: arg_param_ty {:?}\",\n-            arg_param_ty\n-        );\n+        if is_gen {\n+            // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n+            // associated item and not yield.\n+            let return_assoc_item = self.tcx.associated_items(gen_trait).nth(1).unwrap().def_id;\n+            if return_assoc_item != projection.projection_def_id() {\n+                debug!(\"deduce_sig_from_projection: not return assoc item of generator\");\n+                return None;\n+            }\n+        }\n+\n+        let input_tys = if is_fn {\n+            let arg_param_ty = trait_ref.skip_binder().substs.type_at(1);\n+            let arg_param_ty = self.resolve_type_vars_if_possible(&arg_param_ty);\n+            debug!(\"deduce_sig_from_projection: arg_param_ty={:?}\", arg_param_ty);\n \n-        let input_tys = match arg_param_ty.sty {\n-            ty::Tuple(tys) => tys.into_iter().map(|k| k.expect_ty()),\n-            _ => return None,\n+            match arg_param_ty.sty {\n+                ty::Tuple(tys) => tys.into_iter().map(|k| k.expect_ty()).collect::<Vec<_>>(),\n+                _ => return None,\n+            }\n+        } else {\n+            // Generators cannot have explicit arguments.\n+            vec![]\n         };\n \n         let ret_param_ty = projection.skip_binder().ty;\n         let ret_param_ty = self.resolve_type_vars_if_possible(&ret_param_ty);\n-        debug!(\n-            \"deduce_sig_from_projection: ret_param_ty {:?}\",\n-            ret_param_ty\n-        );\n+        debug!(\"deduce_sig_from_projection: ret_param_ty={:?}\", ret_param_ty);\n \n         let sig = self.tcx.mk_fn_sig(\n-            input_tys,\n-            ret_param_ty,\n+            input_tys.iter(),\n+            &ret_param_ty,\n             false,\n             hir::Unsafety::Normal,\n             Abi::Rust,\n         );\n-        debug!(\"deduce_sig_from_projection: sig {:?}\", sig);\n+        debug!(\"deduce_sig_from_projection: sig={:?}\", sig);\n \n         Some(ExpectedSig { cause_span, sig })\n     }"}, {"sha": "fd5266798187307a66f77fd2d58b8f68bf875566", "filename": "src/test/ui/generator-yielding-or-returning-itself.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs?ref=f2919a31c8101da2dd773ea5ffca4195e96d3d50", "patch": "@@ -13,7 +13,7 @@ pub fn want_cyclic_generator_return<T>(_: T)\n \n fn supply_cyclic_generator_return() {\n     want_cyclic_generator_return(|| {\n-        //~^ ERROR type mismatch\n+        //~^ ERROR closure/generator type that references itself\n         if false { yield None.unwrap(); }\n         None.unwrap()\n     })"}, {"sha": "42591683fe4e327abea54e92bc9a61ed00aba4b9", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=f2919a31c8101da2dd773ea5ffca4195e96d3d50", "patch": "@@ -1,20 +1,17 @@\n-error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _] as std::ops::Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n+error[E0644]: closure/generator type that references itself\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n    |\n-LL |     want_cyclic_generator_return(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_return(|| {\n+   |  __________________________________^\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n            see https://github.com/rust-lang/rust/issues/46062 for more details\n-note: required by `want_cyclic_generator_return`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:9:1\n-   |\n-LL | / pub fn want_cyclic_generator_return<T>(_: T)\n-LL | |     where T: Generator<Yield = (), Return = T>\n-LL | | {\n-LL | | }\n-   | |_^\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n@@ -36,4 +33,5 @@ LL | | }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0644.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "b9c6bc5d0796e4b30e8f97fb5ec33ac531905479", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=f2919a31c8101da2dd773ea5ffca4195e96d3d50", "patch": "@@ -2,15 +2,15 @@\n \n use std::ops::Generator;\n \n-fn foo() -> impl Generator<Return = i32> { //~ ERROR type mismatch\n+fn foo() -> impl Generator<Return = i32> {\n     || {\n         if false {\n-            return Ok(6);\n+            return Ok(6); //~ ERROR mismatched types [E0308]\n         }\n \n         yield ();\n \n-        5 //~ ERROR mismatched types [E0308]\n+        5\n     }\n }\n "}, {"sha": "35d3f95c3e9e4253f9ad91012c8486b852e8eee9", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2919a31c8101da2dd773ea5ffca4195e96d3d50/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=f2919a31c8101da2dd773ea5ffca4195e96d3d50", "patch": "@@ -1,23 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-signature-deduction.rs:13:9\n+  --> $DIR/type-mismatch-signature-deduction.rs:8:20\n    |\n-LL |         5\n-   |         ^ expected enum `std::result::Result`, found integer\n+LL |             return Ok(6);\n+   |                    ^^^^^ expected i32, found enum `std::result::Result`\n    |\n-   = note: expected type `std::result::Result<{integer}, _>`\n-              found type `{integer}`\n+   = note: expected type `i32`\n+              found type `std::result::Result<{integer}, _>`\n \n-error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:6:5: 14:6 _] as std::ops::Generator>::Return == i32`\n-  --> $DIR/type-mismatch-signature-deduction.rs:5:13\n-   |\n-LL | fn foo() -> impl Generator<Return = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found i32\n-   |\n-   = note: expected type `std::result::Result<{integer}, _>`\n-              found type `i32`\n-   = note: the return type of a function must have a statically known size\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0308.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}]}