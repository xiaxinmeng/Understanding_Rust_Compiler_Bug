{"sha": "6edc994021a6bb1922ef77f62841f01a7bdf235d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGM5OTQwMjFhNmJiMTkyMmVmNzdmNjI4NDFmMDFhN2JkZjIzNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-30T18:42:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-30T18:42:32Z"}, "message": "Auto merge of #27388 - alexcrichton:remove-curious-inner, r=brson\n\nThis isn't actually necessary any more with the advent of `$crate` and changes\r\nin the compiler to expand macros to `::core::$foo` in the context of a\r\n`#![no_std]` crate.\r\n\r\nThe libcore inner module was also trimmed down a bit to the bare bones.", "tree": {"sha": "b2b212bf9cbd4b24849d7774cdb3f1d97d7d2420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b212bf9cbd4b24849d7774cdb3f1d97d7d2420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edc994021a6bb1922ef77f62841f01a7bdf235d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edc994021a6bb1922ef77f62841f01a7bdf235d", "html_url": "https://github.com/rust-lang/rust/commit/6edc994021a6bb1922ef77f62841f01a7bdf235d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edc994021a6bb1922ef77f62841f01a7bdf235d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28869d45dd1d3ba04e17dec82408f9f3c548e776", "url": "https://api.github.com/repos/rust-lang/rust/commits/28869d45dd1d3ba04e17dec82408f9f3c548e776", "html_url": "https://github.com/rust-lang/rust/commit/28869d45dd1d3ba04e17dec82408f9f3c548e776"}, {"sha": "5af6cf9fa422cb492525e139752a57d2d89f42c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af6cf9fa422cb492525e139752a57d2d89f42c7", "html_url": "https://github.com/rust-lang/rust/commit/5af6cf9fa422cb492525e139752a57d2d89f42c7"}], "stats": {"total": 107, "additions": 46, "deletions": 61}, "files": [{"sha": "47d630a38642e1492ca190949323457ce70d6ee8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -157,21 +157,23 @@ pub mod fmt;\n // note: does not need to be public\n mod tuple;\n \n+// A curious inner-module that's not exported that contains the bindings of core\n+// so that compiler-expanded references to `core::$foo` can be resolved within\n+// core itself.\n+//\n+// Note that no crate-defined macros require this module due to the existence of\n+// the `$crate` meta variable, only those expansions defined in the compiler\n+// require this. This is because the compiler doesn't currently know that it's\n+// compiling the core library when it's compiling this library, so it expands\n+// all references to `::core::$foo`\n #[doc(hidden)]\n mod core {\n-    pub use intrinsics;\n-    pub use panicking;\n-    pub use fmt;\n-    pub use clone;\n-    pub use cmp;\n-    pub use hash;\n-    pub use marker;\n-    pub use option;\n-    pub use iter;\n-}\n-\n-#[doc(hidden)]\n-mod std {\n-    // range syntax\n-    pub use ops;\n+    pub use intrinsics;     // derive(PartialOrd)\n+    pub use fmt;            // format_args!\n+    pub use clone;          // derive(Clone)\n+    pub use cmp;            // derive(Ord)\n+    pub use hash;           // derive(Hash)\n+    pub use marker;         // derive(Copy)\n+    pub use option;         // iterator protocol\n+    pub use iter;           // iterator protocol\n }"}, {"sha": "116c1dfaa3e834240397e166147193db6a3d10de", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -20,7 +20,7 @@ use mem;\n use clone::Clone;\n use intrinsics;\n use ops::Deref;\n-use core::fmt;\n+use fmt;\n use option::Option::{self, Some, None};\n use marker::{PhantomData, Send, Sized, Sync};\n use nonzero::NonZero;"}, {"sha": "2b3fc39fc8b2ac89daf42d64bf70b60d4047ac9a", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -17,7 +17,7 @@\n             reason = \"API not fully fleshed out and ready to be stabilized\")]\n \n use prelude::*;\n-use core::cmp;\n+use cmp;\n use usize;\n \n // Pattern"}, {"sha": "61de7eafbb5a37092dcda29b004d7b7199174725", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -416,27 +416,10 @@ pub mod __rand {\n // because rustdoc only looks for these modules at the crate level.\n include!(\"primitive_docs.rs\");\n \n-// A curious inner-module that's not exported that contains the binding\n-// 'std' so that macro-expanded references to std::error and such\n-// can be resolved within libstd.\n-#[doc(hidden)]\n+// The expansion of --test has a few references to `::std::$foo` so this module\n+// is necessary to get things to compile.\n+#[cfg(test)]\n mod std {\n-    pub use sync; // used for select!()\n-    pub use error; // used for try!()\n-    pub use fmt; // used for any formatting strings\n-    pub use option; // used for thread_local!{}\n-    pub use rt; // used for panic!()\n-    pub use vec; // used for vec![]\n-    pub use cell; // used for tls!\n-    pub use thread; // used for thread_local!\n-    pub use marker;  // used for tls!\n-\n-    // The test runner calls ::std::env::args() but really wants realstd\n-    #[cfg(test)] pub use realstd::env as env;\n-    // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n-    //\n-    // It is also used in vec![]\n-    pub use slice;\n-\n-    pub use boxed; // used for vec![]\n+    pub use option;\n+    pub use realstd::env;\n }"}, {"sha": "fefd7bb051f2b06405d65bed7ba7964b91eb7015", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -799,7 +799,7 @@ mod tests {\n     #[cfg(not(target_os=\"android\"))]\n     #[test]\n     fn test_inherit_env() {\n-        use std::env;\n+        use env;\n \n         let result = env_cmd().output().unwrap();\n         let output = String::from_utf8(result.stdout).unwrap();"}, {"sha": "d80d858e7a94dc51ab94889dfc87afacc5b990cc", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -1107,7 +1107,7 @@ impl error::Error for TryRecvError {\n mod tests {\n     use prelude::v1::*;\n \n-    use std::env;\n+    use env;\n     use super::*;\n     use thread;\n \n@@ -1655,7 +1655,7 @@ mod tests {\n mod sync_tests {\n     use prelude::v1::*;\n \n-    use std::env;\n+    use env;\n     use thread;\n     use super::*;\n "}, {"sha": "9a6d68acb9f22d921e05b39e5bea0c09c80feb54", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -107,14 +107,14 @@ pub struct LocalKey<T> {\n #[cfg(not(no_elf_tls))]\n macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n-        static $name: ::std::thread::LocalKey<$t> =\n+        static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init,\n                 #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                                not(target_arch = \"aarch64\")),\n                            thread_local)]);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n-        pub static $name: ::std::thread::LocalKey<$t> =\n+        pub static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init,\n                 #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                                not(target_arch = \"aarch64\")),\n@@ -128,11 +128,11 @@ macro_rules! thread_local {\n #[cfg(no_elf_tls)]\n macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n-        static $name: ::std::thread::LocalKey<$t> =\n+        static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init, #[]);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n-        pub static $name: ::std::thread::LocalKey<$t> =\n+        pub static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init, #[]);\n     );\n }\n@@ -145,11 +145,11 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     ($t:ty, $init:expr, #[$($attr:meta),*]) => {{\n         $(#[$attr])*\n-        static __KEY: ::std::thread::__LocalKeyInner<$t> =\n-            ::std::thread::__LocalKeyInner::new();\n+        static __KEY: $crate::thread::__LocalKeyInner<$t> =\n+            $crate::thread::__LocalKeyInner::new();\n         fn __init() -> $t { $init }\n-        fn __getit() -> &'static ::std::thread::__LocalKeyInner<$t> { &__KEY }\n-        ::std::thread::LocalKey::new(__getit, __init)\n+        fn __getit() -> &'static $crate::thread::__LocalKeyInner<$t> { &__KEY }\n+        $crate::thread::LocalKey::new(__getit, __init)\n     }}\n }\n "}, {"sha": "cf2c5db82774e97397f50fdb0bdbb5bd34fcac00", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc994021a6bb1922ef77f62841f01a7bdf235d/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=6edc994021a6bb1922ef77f62841f01a7bdf235d", "patch": "@@ -70,11 +70,11 @@ pub struct ScopedKey<T> { inner: fn() -> &'static imp::KeyInner<T> }\n #[allow_internal_unstable]\n macro_rules! scoped_thread_local {\n     (static $name:ident: $t:ty) => (\n-        static $name: ::std::thread::ScopedKey<$t> =\n+        static $name: $crate::thread::ScopedKey<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n     (pub static $name:ident: $t:ty) => (\n-        pub static $name: ::std::thread::ScopedKey<$t> =\n+        pub static $name: $crate::thread::ScopedKey<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n }\n@@ -87,10 +87,10 @@ macro_rules! scoped_thread_local {\n #[cfg(no_elf_tls)]\n macro_rules! __scoped_thread_local_inner {\n     ($t:ty) => {{\n-        static _KEY: ::std::thread::__ScopedKeyInner<$t> =\n-            ::std::thread::__ScopedKeyInner::new();\n-        fn _getit() -> &'static ::std::thread::__ScopedKeyInner<$t> { &_KEY }\n-        ::std::thread::ScopedKey::new(_getit)\n+        static _KEY: $crate::thread::__ScopedKeyInner<$t> =\n+            $crate::thread::__ScopedKeyInner::new();\n+        fn _getit() -> &'static $crate::thread::__ScopedKeyInner<$t> { &_KEY }\n+        $crate::thread::ScopedKey::new(_getit)\n     }}\n }\n \n@@ -109,10 +109,10 @@ macro_rules! __scoped_thread_local_inner {\n                            target_os = \"openbsd\",\n                            target_arch = \"aarch64\")),\n                    thread_local)]\n-        static _KEY: ::std::thread::__ScopedKeyInner<$t> =\n-            ::std::thread::__ScopedKeyInner::new();\n-        fn _getit() -> &'static ::std::thread::__ScopedKeyInner<$t> { &_KEY }\n-        ::std::thread::ScopedKey::new(_getit)\n+        static _KEY: $crate::thread::__ScopedKeyInner<$t> =\n+            $crate::thread::__ScopedKeyInner::new();\n+        fn _getit() -> &'static $crate::thread::__ScopedKeyInner<$t> { &_KEY }\n+        $crate::thread::ScopedKey::new(_getit)\n     }}\n }\n \n@@ -225,7 +225,7 @@ impl<T> ScopedKey<T> {\n               no_elf_tls)))]\n #[doc(hidden)]\n mod imp {\n-    use std::cell::Cell;\n+    use cell::Cell;\n \n     pub struct KeyInner<T> { inner: Cell<*mut T> }\n "}]}