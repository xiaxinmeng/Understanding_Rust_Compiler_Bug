{"sha": "840bdc349d2885a5173269b653025192969cfebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MGJkYzM0OWQyODg1YTUxNzMyNjliNjUzMDI1MTkyOTY5Y2ZlYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T22:13:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T22:13:05Z"}, "message": "Auto merge of #67665 - Patryk27:master, r=zackmdavis\n\nImprove reporting errors and suggestions for trait bounds\n\nFix #66802\n\n- When printing errors for unsized function parameter, properly point at the parameter instead of function's body.\n- Improve `consider further restricting this bound` (and related) messages by separating human-oriented hints from the machine-oriented ones.", "tree": {"sha": "fbafa59d7314c8ae7aa593f6ddc38f624f9b5f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbafa59d7314c8ae7aa593f6ddc38f624f9b5f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/840bdc349d2885a5173269b653025192969cfebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/840bdc349d2885a5173269b653025192969cfebc", "html_url": "https://github.com/rust-lang/rust/commit/840bdc349d2885a5173269b653025192969cfebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/840bdc349d2885a5173269b653025192969cfebc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c7e149e42cb0fc78a80db70d2525973311d488", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c7e149e42cb0fc78a80db70d2525973311d488", "html_url": "https://github.com/rust-lang/rust/commit/71c7e149e42cb0fc78a80db70d2525973311d488"}, {"sha": "a8d34c106206553d46e031a3d427edf865225ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d34c106206553d46e031a3d427edf865225ab6", "html_url": "https://github.com/rust-lang/rust/commit/a8d34c106206553d46e031a3d427edf865225ab6"}], "stats": {"total": 1414, "additions": 1039, "deletions": 375}, "files": [{"sha": "0c1495db267c90b65b152ce66f635721d71a6490", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -27,6 +27,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use syntax::ast;\n@@ -1426,3 +1428,229 @@ impl ArgKind {\n         }\n     }\n }\n+\n+/// Suggest restricting a type param with a new bound.\n+pub fn suggest_constraining_type_param(\n+    tcx: TyCtxt<'_>,\n+    generics: &hir::Generics<'_>,\n+    err: &mut DiagnosticBuilder<'_>,\n+    param_name: &str,\n+    constraint: &str,\n+    source_map: &SourceMap,\n+    span: Span,\n+    def_id: Option<DefId>,\n+) -> bool {\n+    const MSG_RESTRICT_BOUND_FURTHER: &str = \"consider further restricting this bound with\";\n+    const MSG_RESTRICT_TYPE: &str = \"consider restricting this type parameter with\";\n+    const MSG_RESTRICT_TYPE_FURTHER: &str = \"consider further restricting this type parameter with\";\n+\n+    let param = generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next();\n+\n+    let param = if let Some(param) = param {\n+        param\n+    } else {\n+        return false;\n+    };\n+\n+    if def_id == tcx.lang_items().sized_trait() {\n+        // Type parameters are already `Sized` by default.\n+        err.span_label(param.span, &format!(\"this type parameter needs to be `{}`\", constraint));\n+        return true;\n+    }\n+\n+    if param_name.starts_with(\"impl \") {\n+        // If there's an `impl Trait` used in argument position, suggest\n+        // restricting it:\n+        //\n+        //   fn foo(t: impl Foo) { ... }\n+        //             --------\n+        //             |\n+        //             help: consider further restricting this bound with `+ Bar`\n+        //\n+        // Suggestion for tools in this case is:\n+        //\n+        //   fn foo(t: impl Foo) { ... }\n+        //             --------\n+        //             |\n+        //             replace with: `impl Foo + Bar`\n+\n+        err.span_help(param.span, &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint));\n+\n+        err.tool_only_span_suggestion(\n+            param.span,\n+            MSG_RESTRICT_BOUND_FURTHER,\n+            format!(\"{} + {}\", param_name, constraint),\n+            Applicability::MachineApplicable,\n+        );\n+\n+        return true;\n+    }\n+\n+    if generics.where_clause.predicates.is_empty() {\n+        if let Some(bounds_span) = param.bounds_span() {\n+            // If user has provided some bounds, suggest restricting them:\n+            //\n+            //   fn foo<T: Foo>(t: T) { ... }\n+            //             ---\n+            //             |\n+            //             help: consider further restricting this bound with `+ Bar`\n+            //\n+            // Suggestion for tools in this case is:\n+            //\n+            //   fn foo<T: Foo>(t: T) { ... }\n+            //          --\n+            //          |\n+            //          replace with: `T: Bar +`\n+\n+            err.span_help(\n+                bounds_span,\n+                &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint),\n+            );\n+\n+            let span_hi = param.span.with_hi(span.hi());\n+            let span_with_colon = source_map.span_through_char(span_hi, ':');\n+\n+            if span_hi != param.span && span_with_colon != span_hi {\n+                err.tool_only_span_suggestion(\n+                    span_with_colon,\n+                    MSG_RESTRICT_BOUND_FURTHER,\n+                    format!(\"{}: {} + \", param_name, constraint),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        } else {\n+            // If user hasn't provided any bounds, suggest adding a new one:\n+            //\n+            //   fn foo<T>(t: T) { ... }\n+            //          - help: consider restricting this type parameter with `T: Foo`\n+\n+            err.span_help(\n+                param.span,\n+                &format!(\"{} `{}: {}`\", MSG_RESTRICT_TYPE, param_name, constraint),\n+            );\n+\n+            err.tool_only_span_suggestion(\n+                param.span,\n+                MSG_RESTRICT_TYPE,\n+                format!(\"{}: {}\", param_name, constraint),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        true\n+    } else {\n+        // This part is a bit tricky, because using the `where` clause user can\n+        // provide zero, one or many bounds for the same type parameter, so we\n+        // have following cases to consider:\n+        //\n+        // 1) When the type parameter has been provided zero bounds\n+        //\n+        //    Message:\n+        //      fn foo<X, Y>(x: X, y: Y) where Y: Foo { ... }\n+        //             - help: consider restricting this type parameter with `where X: Bar`\n+        //\n+        //    Suggestion:\n+        //      fn foo<X, Y>(x: X, y: Y) where Y: Foo { ... }\n+        //                                           - insert: `, X: Bar`\n+        //\n+        //\n+        // 2) When the type parameter has been provided one bound\n+        //\n+        //    Message:\n+        //      fn foo<T>(t: T) where T: Foo { ... }\n+        //                            ^^^^^^\n+        //                            |\n+        //                            help: consider further restricting this bound with `+ Bar`\n+        //\n+        //    Suggestion:\n+        //      fn foo<T>(t: T) where T: Foo { ... }\n+        //                            ^^\n+        //                            |\n+        //                            replace with: `T: Bar +`\n+        //\n+        //\n+        // 3) When the type parameter has been provided many bounds\n+        //\n+        //    Message:\n+        //      fn foo<T>(t: T) where T: Foo, T: Bar {... }\n+        //             - help: consider further restricting this type parameter with `where T: Zar`\n+        //\n+        //    Suggestion:\n+        //      fn foo<T>(t: T) where T: Foo, T: Bar {... }\n+        //                                          - insert: `, T: Zar`\n+\n+        let mut param_spans = Vec::new();\n+\n+        for predicate in generics.where_clause.predicates {\n+            if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                span, bounded_ty, ..\n+            }) = predicate\n+            {\n+                if let TyKind::Path(QPath::Resolved(_, path)) = &bounded_ty.kind {\n+                    if let Some(segment) = path.segments.first() {\n+                        if segment.ident.to_string() == param_name {\n+                            param_spans.push(span);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        let where_clause_span =\n+            generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi();\n+\n+        match &param_spans[..] {\n+            &[] => {\n+                err.span_help(\n+                    param.span,\n+                    &format!(\"{} `where {}: {}`\", MSG_RESTRICT_TYPE, param_name, constraint),\n+                );\n+\n+                err.tool_only_span_suggestion(\n+                    where_clause_span,\n+                    MSG_RESTRICT_TYPE,\n+                    format!(\", {}: {}\", param_name, constraint),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+\n+            &[&param_span] => {\n+                err.span_help(\n+                    param_span,\n+                    &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint),\n+                );\n+\n+                let span_hi = param_span.with_hi(span.hi());\n+                let span_with_colon = source_map.span_through_char(span_hi, ':');\n+\n+                if span_hi != param_span && span_with_colon != span_hi {\n+                    err.tool_only_span_suggestion(\n+                        span_with_colon,\n+                        MSG_RESTRICT_BOUND_FURTHER,\n+                        format!(\"{}: {} +\", param_name, constraint),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+\n+            _ => {\n+                err.span_help(\n+                    param.span,\n+                    &format!(\n+                        \"{} `where {}: {}`\",\n+                        MSG_RESTRICT_TYPE_FURTHER, param_name, constraint,\n+                    ),\n+                );\n+\n+                err.tool_only_span_suggestion(\n+                    where_clause_span,\n+                    MSG_RESTRICT_BOUND_FURTHER,\n+                    format!(\", {}: {}\", param_name, constraint),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+\n+        true\n+    }\n+}"}, {"sha": "bb576ae86cc1d35f5886b1f4b3651d33943691e8", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 84, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,10 @@ use super::{\n };\n \n use crate::infer::InferCtxt;\n+use crate::traits::error_reporting::suggest_constraining_type_param;\n use crate::traits::object_safety::object_safety_violations;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-\n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n };\n@@ -16,7 +16,6 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n-use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n@@ -430,12 +429,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n \n                         let remove_refs = refs_remaining + 1;\n-                        let format_str =\n-                            format!(\"consider removing {} leading `&`-references\", remove_refs);\n+\n+                        let msg = if remove_refs == 1 {\n+                            \"consider removing the leading `&`-reference\".to_string()\n+                        } else {\n+                            format!(\"consider removing {} leading `&`-references\", remove_refs)\n+                        };\n \n                         err.span_suggestion_short(\n                             sp,\n-                            &format_str,\n+                            &msg,\n                             String::new(),\n                             Applicability::MachineApplicable,\n                         );\n@@ -1652,85 +1655,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n }\n \n-/// Suggest restricting a type param with a new bound.\n-pub fn suggest_constraining_type_param(\n-    tcx: TyCtxt<'_>,\n-    generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n-    param_name: &str,\n-    constraint: &str,\n-    source_map: &SourceMap,\n-    span: Span,\n-    def_id: Option<DefId>,\n-) -> bool {\n-    let restrict_msg = \"consider further restricting this bound\";\n-    if let Some(param) =\n-        generics.params.iter().filter(|p| p.name.ident().as_str() == param_name).next()\n-    {\n-        if def_id == tcx.lang_items().sized_trait() {\n-            // Type parameters are already `Sized` by default.\n-            err.span_label(\n-                param.span,\n-                &format!(\"this type parameter needs to be `{}`\", constraint),\n-            );\n-        } else if param_name.starts_with(\"impl \") {\n-            // `impl Trait` in argument:\n-            // `fn foo(x: impl Trait) {}` \u2192 `fn foo(t: impl Trait + Trait2) {}`\n-            err.span_suggestion(\n-                param.span,\n-                restrict_msg,\n-                // `impl CurrentTrait + MissingTrait`\n-                format!(\"{} + {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if generics.where_clause.predicates.is_empty() && param.bounds.is_empty() {\n-            // If there are no bounds whatsoever, suggest adding a constraint\n-            // to the type parameter:\n-            // `fn foo<T>(t: T) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            err.span_suggestion(\n-                param.span,\n-                \"consider restricting this bound\",\n-                format!(\"{}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else if !generics.where_clause.predicates.is_empty() {\n-            // There is a `where` clause, so suggest expanding it:\n-            // `fn foo<T>(t: T) where T: Debug {}` \u2192\n-            // `fn foo<T>(t: T) where T: Debug, T: Trait {}`\n-            err.span_suggestion(\n-                generics.where_clause.span().unwrap().shrink_to_hi(),\n-                &format!(\"consider further restricting type parameter `{}`\", param_name),\n-                format!(\", {}: {}\", param_name, constraint),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            // If there is no `where` clause lean towards constraining to the\n-            // type parameter:\n-            // `fn foo<X: Bar, T>(t: T, x: X) {}` \u2192 `fn foo<T: Trait>(t: T) {}`\n-            // `fn foo<T: Bar>(t: T) {}` \u2192 `fn foo<T: Bar + Trait>(t: T) {}`\n-            let sp = param.span.with_hi(span.hi());\n-            let span = source_map.span_through_char(sp, ':');\n-            if sp != param.span && sp != span {\n-                // Only suggest if we have high certainty that the span\n-                // covers the colon in `foo<T: Trait>`.\n-                err.span_suggestion(\n-                    span,\n-                    restrict_msg,\n-                    format!(\"{}: {} + \", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_label(\n-                    param.span,\n-                    &format!(\"consider adding a `where {}: {}` bound\", param_name, constraint),\n-                );\n-            }\n-        }\n-        return true;\n-    }\n-    false\n-}\n-\n /// Collect all the returned expressions within the input expression.\n /// Used to point at the return spans when we want to suggest some change to them.\n #[derive(Default)]"}, {"sha": "27bca1625c1c162b4004390fefec946a09d66bde", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -441,6 +441,16 @@ pub struct GenericParam<'hir> {\n     pub kind: GenericParamKind<'hir>,\n }\n \n+impl GenericParam<'hir> {\n+    pub fn bounds_span(&self) -> Option<Span> {\n+        self.bounds.iter().fold(None, |span, bound| {\n+            let span = span.map(|s| s.to(bound.span())).unwrap_or_else(|| bound.span());\n+\n+            Some(span)\n+        })\n+    }\n+}\n+\n #[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,\n@@ -513,7 +523,7 @@ pub enum SyntheticTyParamKind {\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct WhereClause<'hir> {\n     pub predicates: &'hir [WherePredicate<'hir>],\n-    // Only valid if predicates isn't empty.\n+    // Only valid if predicates aren't empty.\n     pub span: Span,\n }\n "}, {"sha": "c7c7db9ad80953de8b12f85c2780a44f24578052", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::{\n     FakeReadCause, Local, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::traits::error_reporting::suggestions::suggest_constraining_type_param;\n+use rustc::traits::error_reporting::suggest_constraining_type_param;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};"}, {"sha": "b82a83171d1eb93faee66a7986fb6fdbb2519c4e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1354,7 +1354,7 @@ fn check_fn<'a, 'tcx>(\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if param.pat.simple_ident().is_none() && !tcx.features().unsized_locals {\n-            fcx.require_type_is_sized(param_ty, decl.output.span(), traits::SizedArgumentType);\n+            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType);\n         }\n \n         fcx.write_ty(param.hir_id, param_ty);"}, {"sha": "ec60db47f44298d1cd3c0102260d665d1431af0f", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n-LL | pub fn test<A: Foo, B: Foo>() {\n-   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array = [4; <A as Foo>::Y];\n    |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |\n+help: consider further restricting this bound with `+ Foo`\n+  --> $DIR/associated-const-type-parameter-arrays-2.rs:15:16\n+   |\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "3d38deb5a87633dee8d38185fb878fd2cf401e45", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `A: Foo` is not satisfied\n LL |     const Y: usize;\n    |     --------------- required by `Foo::Y`\n ...\n-LL | pub fn test<A: Foo, B: Foo>() {\n-   |             -- help: consider further restricting this bound: `A: Foo +`\n LL |     let _array: [u32; <A as Foo>::Y];\n    |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |\n+help: consider further restricting this bound with `+ Foo`\n+  --> $DIR/associated-const-type-parameter-arrays.rs:15:16\n+   |\n+LL | pub fn test<A: Foo, B: Foo>() {\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "bac663dfea2b38607b47f027106f138d9e1074cb", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,10 +1,14 @@\n error[E0277]: the trait bound `T: Foo<usize>` is not satisfied\n   --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:10:12\n    |\n-LL | fn f<T:Foo<isize>>(t: &T) {\n-   |      -- help: consider further restricting this bound: `T: Foo<usize> +`\n LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<usize>` is not implemented for `T`\n+   |\n+help: consider further restricting this bound with `+ Foo<usize>`\n+  --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:9:8\n+   |\n+LL | fn f<T:Foo<isize>>(t: &T) {\n+   |        ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "770845167cf9c5b366a77df844f432050802e8eb", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,10 +2,13 @@ error[E0277]: the trait bound `T: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-bound.rs:11:5\n    |\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n-   |     ^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       help: consider restricting this bound: `T: Get`\n-   |     the trait `Get` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: Get`\n+  --> $DIR/associated-types-no-suitable-bound.rs:11:13\n+   |\n+LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n+   |             ^\n \n error: aborting due to previous error\n "}, {"sha": "9732363221286a0e79bb4b70ef1f5875730a3f0c", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,12 +1,15 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/bad-method-typaram-kind.rs:2:7\n    |\n-LL | fn foo<T:'static>() {\n-   |        -- help: consider further restricting this bound: `T: std::marker::Send +`\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/bad-method-typaram-kind.rs:1:10\n+   |\n+LL | fn foo<T:'static>() {\n+   |          ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3fe7c9cbff42092a211599ea657a4483aeffa6a3", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 140, "deletions": 60, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,251 +2,331 @@ error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:7:10\n    |\n LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs + rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:5:11\n+   |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:8:10\n    |\n LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs + rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:5:30\n+   |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:13:10\n    |\n LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs - rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:11:11\n+   |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:14:10\n    |\n LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs - rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:11:30\n+   |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:19:10\n    |\n LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs * rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:17:11\n+   |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:20:10\n    |\n LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs * rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:17:30\n+   |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:25:10\n    |\n LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs / rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:23:11\n+   |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:26:10\n    |\n LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs / rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:23:30\n+   |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:31:10\n    |\n LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs % rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:29:11\n+   |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:32:10\n    |\n LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs % rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:29:30\n+   |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:37:10\n    |\n LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           --                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |           |\n-   |           help: consider further restricting this bound: `A: Copy +`\n+   |                                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs & rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:35:14\n+   |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |              ^^^^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:38:10\n    |\n LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                    |\n-   |                                    help: consider restricting this bound: `B: Copy`\n+   |                                               --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs & rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:35:36\n+   |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:43:10\n    |\n LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |          --                         --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |          |\n-   |          help: consider further restricting this bound: `A: Copy +`\n+   |                                     --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs | rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:41:13\n+   |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:44:10\n    |\n LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                  -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                  |\n-   |                                  help: consider restricting this bound: `B: Copy`\n+   |                                             --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs | rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:41:34\n+   |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                  ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:49:10\n    |\n LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           --                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |           |\n-   |           help: consider further restricting this bound: `A: Copy +`\n+   |                                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs ^ rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:47:14\n+   |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |              ^^^^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:50:10\n    |\n LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                    |\n-   |                                    help: consider restricting this bound: `B: Copy`\n+   |                                               --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs ^ rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:47:36\n+   |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:55:10\n    |\n LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs << rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:53:11\n+   |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:56:10\n    |\n LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs << rhs;\n    |            --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:53:30\n+   |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:61:10\n    |\n LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        --                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `A: Copy +`\n+   |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs >> rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-consume-args.rs:59:11\n+   |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:62:10\n    |\n LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              help: consider restricting this bound: `B: Copy`\n+   |                                         --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n LL |     lhs >> rhs;\n    |            --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n+   |\n+help: consider restricting this type parameter with `B: Copy`\n+  --> $DIR/binop-consume-args.rs:59:30\n+   |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              ^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "31b594eeab4bf818c5d8cd867b7810a84c77342b", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,27 +2,35 @@ error[E0382]: use of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:8:5\n    |\n LL | fn double_move<T: Add<Output=()>>(x: T) {\n-   |                --                 - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                |\n-   |                help: consider further restricting this bound: `T: Copy +`\n+   |                                   - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x;\n    |     ^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-move-semantics.rs:5:19\n+   |\n+LL | fn double_move<T: Add<Output=()>>(x: T) {\n+   |                   ^^^^^^^^^^^^^^\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n    |\n LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n-   |                     --                         - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                     |\n-   |                     help: consider further restricting this bound: `T: Copy +`\n+   |                                                - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x.clone();\n    |     ^ value borrowed here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/binop-move-semantics.rs:11:24\n+   |\n+LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5"}, {"sha": "33a0b0286dfe979f55e940b185ac5d79efb6ae45", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -20,13 +20,17 @@ error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5\n    |\n LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n-   |      --                               - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n-   |      |\n-   |      help: consider further restricting this bound: `F: Copy +`\n+   |                                       - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n LL |     f(1, 2);\n    |     - value moved here\n LL |     f(1, 2);\n    |     ^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/borrowck-unboxed-closures.rs:10:8\n+   |\n+LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c77421c97e7c058be5cc2c1c94aa918004cf1f9d", "filename": "src/test/ui/bound-suggestions.fixed", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -0,0 +1,39 @@\n+// run-rustfix\n+\n+#[allow(dead_code)]\n+fn test_impl(t: impl Sized + std::fmt::Debug) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_one_bound<T: std::fmt::Debug +  Sized>(t: T) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n+    println!(\"{:?} {:?}\", x, y);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_one_bound_where<X>(x: X) where X: std::fmt::Debug + Sized {\n+    println!(\"{:?}\", x);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n+    println!(\"{:?}\", x);\n+    //~^ ERROR doesn't implement\n+}\n+\n+pub fn main() { }"}, {"sha": "605a6df838658f31b5dd231af3307152b9b2781a", "filename": "src/test/ui/bound-suggestions.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -0,0 +1,39 @@\n+// run-rustfix\n+\n+#[allow(dead_code)]\n+fn test_impl(t: impl Sized) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_no_bounds<T>(t: T) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_one_bound<T: Sized>(t: T) {\n+    println!(\"{:?}\", t);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug {\n+    println!(\"{:?} {:?}\", x, y);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_one_bound_where<X>(x: X) where X: Sized {\n+    println!(\"{:?}\", x);\n+    //~^ ERROR doesn't implement\n+}\n+\n+#[allow(dead_code)]\n+fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized {\n+    println!(\"{:?}\", x);\n+    //~^ ERROR doesn't implement\n+}\n+\n+pub fn main() { }"}, {"sha": "1e85c2bf36e46e2e66cdea27d3a22e3e088a747a", "filename": "src/test/ui/bound-suggestions.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -0,0 +1,93 @@\n+error[E0277]: `impl Sized` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:5:22\n+   |\n+LL |     println!(\"{:?}\", t);\n+   |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `impl Sized`\n+help: consider further restricting this bound with `+ std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:4:17\n+   |\n+LL | fn test_impl(t: impl Sized) {\n+   |                 ^^^^^^^^^^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:11:22\n+   |\n+LL |     println!(\"{:?}\", t);\n+   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:10:19\n+   |\n+LL | fn test_no_bounds<T>(t: T) {\n+   |                   ^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:17:22\n+   |\n+LL |     println!(\"{:?}\", t);\n+   |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:16:22\n+   |\n+LL | fn test_one_bound<T: Sized>(t: T) {\n+   |                      ^^^^^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `Y` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:23:30\n+   |\n+LL |     println!(\"{:?} {:?}\", x, y);\n+   |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `Y`\n+help: consider restricting this type parameter with `where Y: std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:22:28\n+   |\n+LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug {\n+   |                            ^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `X` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:29:22\n+   |\n+LL |     println!(\"{:?}\", x);\n+   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `X`\n+help: consider further restricting this bound with `+ std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:28:40\n+   |\n+LL | fn test_one_bound_where<X>(x: X) where X: Sized {\n+   |                                        ^^^^^^^^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `X` doesn't implement `std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:35:22\n+   |\n+LL |     println!(\"{:?}\", x);\n+   |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `X`\n+help: consider further restricting this type parameter with `where X: std::fmt::Debug`\n+  --> $DIR/bound-suggestions.rs:34:27\n+   |\n+LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized {\n+   |                           ^\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a38705c834a375bf9c0114393a0efaf71d09ae31", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,22 +2,28 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |       --               ^^^ `T` cannot be sent between threads safely\n-   |       |\n-   |       help: consider further restricting this bound: `T: std::marker::Send +`\n+   |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/builtin-superkinds-double-superkind.rs:6:10\n+   |\n+LL | impl <T: Sync+'static> Foo for (T,) { }\n+   |          ^^^^^^^^^^^^\n    = note: required because it appears within the type `(T,)`\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n LL | impl <T: Send> Foo for (T,T) { }\n-   |       --       ^^^ `T` cannot be shared between threads safely\n-   |       |\n-   |       help: consider further restricting this bound: `T: std::marker::Sync +`\n+   |                ^^^ `T` cannot be shared between threads safely\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::marker::Sync`\n+  --> $DIR/builtin-superkinds-double-superkind.rs:9:10\n+   |\n+LL | impl <T: Send> Foo for (T,T) { }\n+   |          ^^^^\n    = note: required because it appears within the type `(T, T)`\n \n error: aborting due to 2 previous errors"}, {"sha": "f379d97bd76c896b06bf9068f4900e5999fcd22b", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,11 +2,14 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-in-metadata.rs:13:23\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |       --              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n-   |       |\n-   |       help: consider further restricting this bound: `T: std::marker::Send +`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/builtin-superkinds-in-metadata.rs:13:9\n+   |\n+LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n+   |         ^^^^^^^^^^^^\n    = note: required because it appears within the type `X<T>`\n \n error: aborting due to previous error"}, {"sha": "996f39bfb665c8ff43c2d2addf9c592df540f230", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,11 +2,14 @@ error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n LL | impl <T: Sync+'static> Foo for T { }\n-   |       --               ^^^ `T` cannot be sent between threads safely\n-   |       |\n-   |       help: consider further restricting this bound: `T: std::marker::Send +`\n+   |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:10\n+   |\n+LL | impl <T: Sync+'static> Foo for T { }\n+   |          ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b4135af7d7755063cd1331b96fa277b7f6b89f62", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,11 +5,14 @@ LL | struct X<F> where F: FnOnce() + 'static + Send {\n    | ---------------------------------------------- required by `X`\n ...\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-   |                      ^^^^                            - help: consider further restricting type parameter `F`: `, F: std::marker::Send`\n-   |                      |\n-   |                      `F` cannot be sent between threads safely\n+   |                      ^^^^ `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:33\n+   |\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "47504de814dbee1a8e80ffb003a958527dc76f3a", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,13 +4,15 @@ error[E0277]: `F` cannot be shared between threads safely\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    |    ----------------                              ---- required by this bound in `take_const_owned`\n ...\n-LL | fn give_owned<F>(f: F) where F: FnOnce() + Send {\n-   |                                                - help: consider further restricting type parameter `F`: `, F: std::marker::Sync`\n-LL |     take_any(f);\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n+help: consider further restricting this bound with `+ std::marker::Sync`\n+  --> $DIR/closure-bounds-subtype.rs:11:30\n+   |\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send {\n+   |                              ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f14478d7278cd4773a44f943309217585f26463f", "filename": "src/test/ui/closures/issue-67123.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,13 +1,16 @@\n error[E0382]: use of moved value: `t`\n   --> $DIR/issue-67123.rs:2:13\n    |\n-LL | fn foo<T>(t: T) {\n-   |        - help: consider restricting this bound: `T: Copy`\n LL |     || { t; t; };\n    |          -  ^ value used here after move\n    |          |\n    |          value moved here\n    |\n+help: consider restricting this type parameter with `T: Copy`\n+  --> $DIR/issue-67123.rs:1:8\n+   |\n+LL | fn foo<T>(t: T) {\n+   |        ^\n    = note: move occurs because `t` has type `T`, which does not implement the `Copy` trait\n \n error: aborting due to previous error"}, {"sha": "486b538045e49a559397ed3d610d7f52152268ff", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -31,12 +31,14 @@ LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:19:5\n    |\n-LL | impl<T> Foo for Fooy<T> {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-...\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/impl_bounds.rs:14:6\n+   |\n+LL | impl<T> Foo for Fooy<T> {\n+   |      ^\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `Fooy<T>`\n    = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl type but not on the corresponding associated trait type\n "}, {"sha": "6307a9b380ebf29734659bec603b1059a43e9871", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -6,11 +6,14 @@ LL | fn want_bar_for_any_ccx<B>(b: &B)\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ...\n-LL |     where B : Qux\n-   |                  - help: consider further restricting type parameter `B`: `, B: for<'ccx> Bar<'ccx>`\n-...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |\n+help: consider further restricting this bound with `+ for<'ccx> Bar<'ccx>`\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:44:11\n+   |\n+LL |     where B : Qux\n+   |           ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "762c7c05f7ae8f90862072cfca89c23140189c8e", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,30 +1,36 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n-LL |     where F : Foo<'x>\n-   |                      - help: consider further restricting type parameter `F`: `, F: for<'tcx> Foo<'tcx>`\n-...\n LL |     want_foo_for_any_tcx(f);\n    |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n    |    --------------------\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ------------------- required by this bound in `want_foo_for_any_tcx`\n+   |\n+help: consider further restricting this bound with `+ for<'tcx> Foo<'tcx>`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:15:11\n+   |\n+LL |     where F : Foo<'x>\n+   |           ^^^^^^^^^^^\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n-LL |     where B : Bar<'x>\n-   |                      - help: consider further restricting type parameter `B`: `, B: for<'ccx> Bar<'ccx>`\n-...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n    |    --------------------\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n+   |\n+help: consider further restricting this bound with `+ for<'ccx> Bar<'ccx>`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:11\n+   |\n+LL |     where B : Bar<'x>\n+   |           ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d62b8b1c253eae404aa3532a01740d40ed7c0902", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:5\n    |\n-LL | impl<S: Default> Bar for S {\n-   |      -- help: consider further restricting this bound: `S: std::marker::Copy +`\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n    |\n+help: consider further restricting this bound with `+ std::marker::Copy`\n+  --> $DIR/issue-55872-1.rs:11:9\n+   |\n+LL | impl<S: Default> Bar for S {\n+   |         ^^^^^^^\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n \n@@ -14,10 +17,12 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n-...\n-LL |     fn foo<T: Default>() -> Self::E {\n-   |            -- help: consider further restricting this bound: `T: std::marker::Copy +`\n    |\n+help: consider further restricting this bound with `+ std::marker::Copy`\n+  --> $DIR/issue-55872-1.rs:16:15\n+   |\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |               ^^^^^^^\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "cfc294b5fa2d78bd835ab9bff2368e7f08d660dd", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | pub struct Foo<T: Bound>(T);\n    | ---------------------------- required by `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n-   |      -  ^^^^^^ the trait `Bound` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: Bound`\n+   |         ^^^^^^ the trait `Bound` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: Bound`\n+  --> $DIR/issue-21837.rs:8:6\n+   |\n+LL | impl<T> Trait2 for Foo<T> {}\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "5c51d0444461ab518b666a8690cf535e811578be", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,9 +2,7 @@ error[E0382]: use of moved value: `x`\n   --> $DIR/issue-34721.rs:27:9\n    |\n LL |     pub fn baz<T: Foo>(x: T) -> T {\n-   |                --      - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                |\n-   |                help: consider further restricting this bound: `T: Copy +`\n+   |                        - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |         if 0 == 1 {\n LL |             bar::bar(x.zero())\n    |                      - value moved here\n@@ -14,6 +12,12 @@ LL |             x.zero()\n LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/issue-34721.rs:21:19\n+   |\n+LL |     pub fn baz<T: Foo>(x: T) -> T {\n+   |                   ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d3168ef9e4aaf2ada6c176152be95c66edfb66bc", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-38954.rs:1:23\n+  --> $DIR/issue-38954.rs:1:10\n    |\n LL | fn _test(ref _p: str) {}\n-   |                       ^ doesn't have a size known at compile-time\n+   |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "9d854e4be9eadb94a59bb34a548de16e86e32f81", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-41229-ref-str.rs:1:28\n+  --> $DIR/issue-41229-ref-str.rs:1:16\n    |\n LL | pub fn example(ref s: str) {}\n-   |                            ^ doesn't have a size known at compile-time\n+   |                ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "915bfffd6d5925a8b2826f82c628441afd0013a3", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,21 +1,21 @@\n error[E0277]: the size for values of type `<Self as std::ops::Deref>::Target` cannot be known at compilation time\n-  --> $DIR/issue-42312.rs:4:29\n+  --> $DIR/issue-42312.rs:4:12\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref {}\n-   |                             ^                - help: consider further restricting the associated type: `, <Self as std::ops::Deref>::Target: std::marker::Sized`\n-   |                             |\n-   |                             doesn't have a size known at compile-time\n+   |            ^                                 - help: consider further restricting the associated type: `, <Self as std::ops::Deref>::Target: std::marker::Sized`\n+   |            |\n+   |            doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-42312.rs:8:27\n+  --> $DIR/issue-42312.rs:8:10\n    |\n LL | pub fn f(_: dyn ToString) {}\n-   |                           ^ doesn't have a size known at compile-time\n+   |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "2f50a53f26c77323845993910385ee98a9a857f5", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,12 +5,15 @@ LL |     type Assoc: Partial<Self>;\n    |          ----- associated type defined here\n ...\n LL | impl<T> Complete for T {\n-   | ----------------------\n-   | |    |\n-   | |    help: consider restricting this bound: `T: std::marker::Copy`\n-   | in this `impl` item\n+   | ---------------------- in this `impl` item\n LL |     type Assoc = T;\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/issue-43784-associated-type.rs:13:6\n+   |\n+LL | impl<T> Complete for T {\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "1795db32a57bde44e465b5e9c01c4c53be46201b", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,9 +2,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:8:9\n    |\n LL | impl<T> Complete for T {}\n-   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::marker::Copy`\n+   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/issue-43784-supertrait.rs:8:6\n+   |\n+LL | impl<T> Complete for T {}\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "593f55a5172d8cbd81c9ac4088e336ab9b91c586", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,50 +1,58 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL | fn f<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Send`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Send`\n+  --> $DIR/kindck-impl-type-params.rs:16:6\n+   |\n+LL | fn f<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL | fn f<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/kindck-impl-type-params.rs:16:6\n+   |\n+LL | fn f<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL | fn g<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Send`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Send`\n+  --> $DIR/kindck-impl-type-params.rs:23:6\n+   |\n+LL | fn g<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL | fn g<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/kindck-impl-type-params.rs:23:6\n+   |\n+LL | fn g<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n "}, {"sha": "42318623b4d24f3b0cbd560004532b54ffc6a220", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,50 +1,58 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL | fn f<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Send`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Send`\n+  --> $DIR/kindck-impl-type-params.rs:16:6\n+   |\n+LL | fn f<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n-LL | fn f<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/kindck-impl-type-params.rs:16:6\n+   |\n+LL | fn f<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL | fn g<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Send`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Send`\n+  --> $DIR/kindck-impl-type-params.rs:23:6\n+   |\n+LL | fn g<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n-LL | fn g<T>(val: T) {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     let t: S<T> = S(marker::PhantomData);\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/kindck-impl-type-params.rs:23:6\n+   |\n+LL | fn g<T>(val: T) {\n+   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n "}, {"sha": "552273b8ba9273ebf01a9d652371745c9689b155", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -11,13 +11,17 @@ error[E0382]: borrow of moved value: `f`\n   --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:32:5\n    |\n LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-   |                   -----                                 - help: consider further restricting type parameter `F`: `, F: Copy`\n-   |                   |\n-   |                   move occurs because `f` has type `F`, which does not implement the `Copy` trait\n+   |                   ----- move occurs because `f` has type `F`, which does not implement the `Copy` trait\n LL |     let mut r = R {c: Box::new(f)};\n    |                                - value moved here\n LL |     f(&mut r, false)\n    |     ^ value borrowed here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:30:35\n+   |\n+LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4884469ce4d2d0b4c595436e5f904fe73b681e5", "filename": "src/test/ui/once-cant-call-twice-on-heap.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,13 +2,17 @@ error[E0382]: use of moved value: `blk`\n   --> $DIR/once-cant-call-twice-on-heap.rs:9:5\n    |\n LL | fn foo<F:FnOnce()>(blk: F) {\n-   |        --          --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n-   |        |\n-   |        help: consider further restricting this bound: `F: Copy +`\n+   |                    --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n LL |     blk();\n    |     --- value moved here\n LL |     blk();\n    |     ^^^ value used here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/once-cant-call-twice-on-heap.rs:7:10\n+   |\n+LL | fn foo<F:FnOnce()>(blk: F) {\n+   |          ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7b6b105eb032be61ad2604e403bc1e96faa0612a", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -3,13 +3,16 @@ error[E0277]: `T` cannot be shared between threads safely\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n-LL | \n-LL | fn not_sync<T>(x: Guard<T>) {\n-   |             - help: consider restricting this bound: `T: std::marker::Sync`\n+...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Sync`\n+  --> $DIR/phantom-oibit.rs:20:13\n+   |\n+LL | fn not_sync<T>(x: Guard<T>) {\n+   |             ^\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n@@ -20,12 +23,15 @@ error[E0277]: `T` cannot be shared between threads safely\n LL | fn is_zen<T: Zen>(_: T) {}\n    |    ------    --- required by this bound in `is_zen`\n ...\n-LL | fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-   |                    - help: consider restricting this bound: `T: std::marker::Sync`\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Sync`\n+  --> $DIR/phantom-oibit.rs:25:20\n+   |\n+LL | fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n+   |                    ^\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`"}, {"sha": "ee7c002b16db1310db6f7dca2b93f83ea397e375", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,9 +2,13 @@ error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n LL | default impl<U> Foo<'static, U> for () {}\n-   |              -  ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n-   |              |\n-   |              help: consider restricting this bound: `U: std::cmp::Eq`\n+   |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `U: std::cmp::Eq`\n+  --> $DIR/specialization-wfcheck.rs:7:14\n+   |\n+LL | default impl<U> Foo<'static, U> for () {}\n+   |              ^\n \n error: aborting due to previous error\n "}, {"sha": "4d5cb8907e8872eba01c3ae63fe0a96746b59fa4", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -3,80 +3,96 @@ error[E0277]: `impl Sync` cannot be sent between threads safely\n    |\n LL | fn is_send<T: Send>(val: T) {}\n    |    -------    ---- required by this bound in `is_send`\n-LL | \n-LL | fn use_impl_sync(val: impl Sync) {\n-   |                       --------- help: consider further restricting this bound: `impl Sync + std::marker::Send`\n+...\n LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:3:23\n+   |\n+LL | fn use_impl_sync(val: impl Sync) {\n+   |                       ^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n-LL | fn use_where<S>(val: S) where S: Sync {\n-   |                                      - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:7:31\n+   |\n+LL | fn use_where<S>(val: S) where S: Sync {\n+   |                               ^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n-LL | fn use_bound<S: Sync>(val: S) {\n-   |              -- help: consider further restricting this bound: `S: std::marker::Send +`\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:11:17\n+   |\n+LL | fn use_bound<S: Sync>(val: S) {\n+   |                 ^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n    |\n-LL |   fn is_send<T: Send>(val: T) {}\n-   |      -------    ---- required by this bound in `is_send`\n-...\n-LL | /     S // Make sure we can synthezise a correct suggestion span for this case\n-LL | |     :\n-   | |_____- help: consider further restricting this bound: `S: std::marker::Send +`\n+LL | fn is_send<T: Send>(val: T) {}\n+   |    -------    ---- required by this bound in `is_send`\n ...\n-LL |       is_send(val);\n-   |               ^^^ `S` cannot be sent between threads safely\n+LL |     is_send(val);\n+   |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:18:5\n+   |\n+LL |     Sync\n+   |     ^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n-LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n-   |                                                                 - help: consider further restricting type parameter `S`: `, S: std::marker::Send`\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n+help: consider further restricting this bound with `+ std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:23:47\n+   |\n+LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n+   |                                               ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n-LL | fn use_unbound<S>(val: S) {\n-   |                - help: consider restricting this bound: `S: std::marker::Send`\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n+help: consider restricting this type parameter with `S: std::marker::Send`\n+  --> $DIR/restrict-type-argument.rs:27:16\n+   |\n+LL | fn use_unbound<S>(val: S) {\n+   |                ^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fcaddd40d263baa866958068b51f2d38ac03ea32", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,7 +5,7 @@ LL |     for (i, n) in &v.iter().enumerate() {\n    |                   -^^^^^^^^^^^^^^^^^^^^\n    |                   |\n    |                   `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-   |                   help: consider removing 1 leading `&`-references\n+   |                   help: consider removing the leading `&`-reference\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required by `std::iter::IntoIterator::into_iter`"}, {"sha": "e7ed16a02a3f0127a01a917ab789625922c6c6ff", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,9 +4,13 @@ error[E0277]: the trait bound `T: Foo` is not satisfied\n LL | trait A<T: Foo> {}\n    | --------------- required by `A`\n LL | trait B<T> = A<T>;\n-   |         -    ^^^^ the trait `Foo` is not implemented for `T`\n-   |         |\n-   |         help: consider restricting this bound: `T: Foo`\n+   |              ^^^^ the trait `Foo` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: Foo`\n+  --> $DIR/trait-alias-wf.rs:5:9\n+   |\n+LL | trait B<T> = A<T>;\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "56a9e3ff54ec25f98ce1cd94565e11383a451f60", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n LL | impl<T> Foo<T> {\n-   |      -  ^^^^^^ the trait `Trait` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: Trait`\n+   |         ^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: Trait`\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:13:6\n+   |\n+LL | impl<T> Foo<T> {\n+   |      ^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n@@ -33,21 +37,29 @@ error[E0277]: the trait bound `U: Trait` is not satisfied\n LL | struct Foo<T:Trait> {\n    | ------------------- required by `Foo`\n ...\n-LL | struct Badness<U> {\n-   |                - help: consider restricting this bound: `U: Trait`\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `U: Trait`\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:26:16\n+   |\n+LL | struct Badness<U> {\n+   |                ^\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n    | ----------------- required by `Bar`\n ...\n-LL | enum MoreBadness<V> {\n-   |                  - help: consider restricting this bound: `V: Trait`\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n+   |\n+help: consider restricting this type parameter with `V: Trait`\n+  --> $DIR/trait-bounds-on-structs-and-enums.rs:30:18\n+   |\n+LL | enum MoreBadness<V> {\n+   |                  ^\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5"}, {"sha": "5b7f32ba1e0f06a3b22f482d665fd4f4818edacb", "filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -7,10 +7,14 @@ LL |     c.same_as(22)\n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:30:7\n    |\n-LL | fn with_trait<C:CompareToInts>(c: &C) -> bool {\n-   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |\n+help: consider further restricting this bound with `+ CompareTo<i32>`\n+  --> $DIR/traits-repeated-supertrait-ambig.rs:29:17\n+   |\n+LL | fn with_trait<C:CompareToInts>(c: &C) -> bool {\n+   |                 ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n@@ -27,10 +31,14 @@ error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n LL |     fn same_as(&self, t: T) -> bool;\n    |     -------------------------------- required by `CompareTo::same_as`\n ...\n-LL | fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n-   |               -- help: consider further restricting this bound: `C: CompareTo<i32> +`\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |\n+help: consider further restricting this bound with `+ CompareTo<i32>`\n+  --> $DIR/traits-repeated-supertrait-ambig.rs:37:17\n+   |\n+LL | fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n+   |                 ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:42:23"}, {"sha": "74b858105b92fe0a2a50b09edd376e3c2ba4a687", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -3,9 +3,12 @@ error[E0277]: the trait bound `T: TraitWithAssoc` is not satisfied\n    |\n LL | type Foo<V> = impl Trait<V>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n-...\n+   |\n+help: consider further restricting this bound with `+ TraitWithAssoc`\n+  --> $DIR/bound_reduction2.rs:18:21\n+   |\n LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                  -- help: consider further restricting this bound: `T: TraitWithAssoc +`\n+   |                     ^^^^^^^^^^^^^^\n \n error: defining opaque type use does not fully define opaque type: generic parameter `V` is specified as concrete type `<T as TraitWithAssoc>::Assoc`\n   --> $DIR/bound_reduction2.rs:18:1"}, {"sha": "299c7eae8d3a87553e41f84e03dc1e9a4fe4fac8", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -9,10 +9,12 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-...\n-LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-   |                   - help: consider restricting this bound: `T: Trait`\n    |\n+help: consider restricting this type parameter with `T: Trait`\n+  --> $DIR/generic_underconstrained.rs:10:19\n+   |\n+LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+   |                   ^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "56966a32b43b2158ac9b36e714d16f4c5f87721a", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -16,12 +16,15 @@ error[E0277]: `U` doesn't implement `std::fmt::Debug`\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n ...\n-LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n-   |                     - help: consider restricting this bound: `U: std::fmt::Debug`\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n+help: consider restricting this type parameter with `U: std::fmt::Debug`\n+  --> $DIR/generic_underconstrained2.rs:10:21\n+   |\n+LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+   |                     ^\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n@@ -30,12 +33,15 @@ error[E0277]: `V` doesn't implement `std::fmt::Debug`\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n ...\n-LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n-   |                         - help: consider restricting this bound: `V: std::fmt::Debug`\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n+help: consider restricting this type parameter with `V: std::fmt::Debug`\n+  --> $DIR/generic_underconstrained2.rs:19:25\n+   |\n+LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+   |                         ^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 4 previous errors"}, {"sha": "31ee15e0745dbeca17b196879d7d40af75882dd9", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -52,9 +52,13 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | trait Super<T: Copy> { }\n    | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n-   |            -            ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |            |\n-   |            help: consider restricting this bound: `T: std::marker::Copy`\n+   |                         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/type-check-defaults.rs:21:12\n+   |\n+LL | trait Base<T = String>: Super<T> { }\n+   |            ^\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "45c9d8be85ee91746692bdb2526eb2b4b7181a75", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -1,15 +1,18 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-send-param.rs:5:15\n    |\n-LL | fn foo<T>() {\n-   |        - help: consider restricting this bound: `T: std::marker::Send`\n LL |     is_send::<T>()\n    |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n+help: consider restricting this type parameter with `T: std::marker::Send`\n+  --> $DIR/typeck-default-trait-impl-send-param.rs:4:8\n+   |\n+LL | fn foo<T>() {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "95e8f94c6f3e7d126916a9274dbc7fccca3f3ac1", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -300,10 +300,10 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:127:27\n+  --> $DIR/typeck_type_placeholder_item.rs:127:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                           ^^^^^^ cannot infer type\n+   |                  ^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:127:28"}, {"sha": "ab641c40dfe4490d625c7b448dffddd8ed4086b8", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -2,14 +2,18 @@ error[E0382]: borrow of moved value: `x`\n   --> $DIR/unop-move-semantics.rs:8:5\n    |\n LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n-   |                     --                        - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                     |\n-   |                     help: consider further restricting this bound: `T: Copy +`\n+   |                                               - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     !x;\n    |      - value moved here\n LL | \n LL |     x.clone();\n    |     ^ value borrowed here after move\n+   |\n+help: consider further restricting this bound with `+ Copy`\n+  --> $DIR/unop-move-semantics.rs:5:24\n+   |\n+LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/unop-move-semantics.rs:15:6"}, {"sha": "be64ddb975994ce1b3a2a0d33277500ecddb11dd", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n-   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |              |\n-   |              the trait `std::marker::Copy` is not implemented for `U`\n+   |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-enum-bound.rs:9:17\n+   |\n+LL | enum SomeEnum<T,U>\n+   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "40454b33b7b76cc0961660e5f0aa81eaf58ba4fe", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n-LL | enum AnotherEnum<A> {\n-   |                  - help: consider restricting this bound: `A: std::marker::Copy`\n-LL |     AnotherVariant {\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |\n+help: consider restricting this type parameter with `A: std::marker::Copy`\n+  --> $DIR/wf-enum-fields-struct-variant.rs:11:18\n+   |\n+LL | enum AnotherEnum<A> {\n+   |                  ^\n \n error: aborting due to previous error\n "}, {"sha": "e2612add776d48a87c527e2f607457d249485dbb", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n-LL | enum SomeEnum<A> {\n-   |               - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |\n+help: consider restricting this type parameter with `A: std::marker::Copy`\n+  --> $DIR/wf-enum-fields.rs:11:15\n+   |\n+LL | enum SomeEnum<A> {\n+   |               ^\n \n error: aborting due to previous error\n "}, {"sha": "2a4f2df5a898696ae39adc75863e3672790d63c0", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n LL | \n LL | fn foo<T,U>() where T: ExtraCopy<U>\n-   |                        ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |                        |\n-   |                        the trait `std::marker::Copy` is not implemented for `U`\n+   |                        ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-fn-where-clause.rs:8:10\n+   |\n+LL | fn foo<T,U>() where T: ExtraCopy<U>\n+   |          ^\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:16"}, {"sha": "7774299b39357c02754f4dd52e90717232d04851", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `T: MyHash` is not satisfied\n LL | pub struct MySet<T:MyHash> {\n    | -------------------------- required by `MySet`\n ...\n-LL | impl<T> Foo for T {\n-   |      - help: consider restricting this bound: `T: MyHash`\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: MyHash`\n+  --> $DIR/wf-impl-associated-type-trait.rs:16:6\n+   |\n+LL | impl<T> Foo for T {\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "c1a6657e63be7aa4a3bce7caa0c19c6d21f34497", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n LL | fn bar<T>(_: &MustBeCopy<T>)\n-   |        -     ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |        |\n-   |        help: consider restricting this bound: `T: std::marker::Copy`\n+   |              ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-in-fn-arg.rs:10:8\n+   |\n+LL | fn bar<T>(_: &MustBeCopy<T>)\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "754d64df0194bc63450f66685d3b6f1c0c5a578f", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n LL | fn bar<T>() -> MustBeCopy<T>\n-   |        -       ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |        |\n-   |        help: consider restricting this bound: `T: std::marker::Copy`\n+   |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-in-fn-ret.rs:10:8\n+   |\n+LL | fn bar<T>() -> MustBeCopy<T>\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "97a5c0fd913a4b502855d75369c1763f9ac0df94", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n-LL | struct Bar<T> {\n-   |            - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     // needs T: Copy\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-in-fn-type-arg.rs:7:12\n+   |\n+LL | struct Bar<T> {\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "527b000edf8832fe59aea881e1c89c93faa88e20", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n-LL | struct Foo<T> {\n-   |            - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     // needs T: 'static\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-in-fn-type-ret.rs:7:12\n+   |\n+LL | struct Foo<T> {\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "62c672a21e86ec85cffa9ca0d32bc55edd643c07", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait MustBeCopy<T:Copy> {\n    | ------------------------ required by `MustBeCopy`\n ...\n LL |     where T: MustBeCopy<U>\n-   |              ^^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |              |\n-   |              the trait `std::marker::Copy` is not implemented for `U`\n+   |              ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-in-fn-where-clause.rs:9:10\n+   |\n+LL | fn bar<T,U>()\n+   |          ^\n \n error: aborting due to previous error\n "}, {"sha": "1b6438cdc2477b638d1af0a02a4aaa090b339ecb", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | struct MustBeCopy<T:Copy> {\n    | ------------------------- required by `MustBeCopy`\n ...\n-LL | struct Bar<T> {\n-   |            - help: consider restricting this bound: `T: std::marker::Copy`\n-LL |     // needs T: Copy\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-in-obj-type-trait.rs:9:12\n+   |\n+LL | struct Bar<T> {\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "70337ee40eacfc4cde62410fe510e90fd705eb85", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n-LL | impl<T,U> Foo<T,U> {\n-   |        - help: consider restricting this bound: `U: std::marker::Copy`\n LL |     fn foo(self) where T: ExtraCopy<U>\n    |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `U: std::marker::Copy`\n+  --> $DIR/wf-inherent-impl-method-where-clause.rs:11:8\n+   |\n+LL | impl<T,U> Foo<T,U> {\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "c26d0ef787195ccd33ab52c59d5c389988d2279b", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n-   |                             ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |                             |\n-   |                             the trait `std::marker::Copy` is not implemented for `U`\n+   |                             ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-inherent-impl-where-clause.rs:11:8\n+   |\n+LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "545e4f870954c507e0aa86d8f523bf225feebf7b", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n-   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |              |\n-   |              the trait `std::marker::Copy` is not implemented for `U`\n+   |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-struct-bound.rs:9:21\n+   |\n+LL | struct SomeStruct<T,U>\n+   |                     ^\n \n error: aborting due to previous error\n "}, {"sha": "f0ebdfba2ffc67c0a4cf6536e7fa39fc614a58dc", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,10 +4,14 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n LL | struct IsCopy<T:Copy> {\n    | --------------------- required by `IsCopy`\n ...\n-LL | struct SomeStruct<A> {\n-   |                   - help: consider restricting this bound: `A: std::marker::Copy`\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n+   |\n+help: consider restricting this type parameter with `A: std::marker::Copy`\n+  --> $DIR/wf-struct-field.rs:11:19\n+   |\n+LL | struct SomeStruct<A> {\n+   |                   ^\n \n error: aborting due to previous error\n "}, {"sha": "dfccd4865686e8ef9c5a2d2b80304f1e64ae2a34", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -3,11 +3,15 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n    |\n LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n-LL | \n-LL | trait SomeTrait<T> {\n-   |                 - help: consider restricting this bound: `T: std::marker::Copy`\n+...\n LL |     type Type1: ExtraCopy<T>;\n    |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-trait-associated-type-bound.rs:9:17\n+   |\n+LL | trait SomeTrait<T> {\n+   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "31faa14426a1fe70eaef16db9ea18945e493e89b", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n-   |              ^^^^^^^^^^^^- help: consider further restricting type parameter `U`: `, U: std::marker::Copy`\n-   |              |\n-   |              the trait `std::marker::Copy` is not implemented for `U`\n+   |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n+   |\n+help: consider restricting this type parameter with `where U: std::marker::Copy`\n+  --> $DIR/wf-trait-bound.rs:9:19\n+   |\n+LL | trait SomeTrait<T,U>\n+   |                   ^\n \n error: aborting due to previous error\n "}, {"sha": "372a5f8ba5db727fe639aee00b39f47547fc7957", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -5,9 +5,13 @@ LL | trait ExtraCopy<T:Copy> { }\n    | ----------------------- required by `ExtraCopy`\n LL | \n LL | trait SomeTrait<T>: ExtraCopy<T> {\n-   |                 -   ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |                 |\n-   |                 help: consider restricting this bound: `T: std::marker::Copy`\n+   |                     ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/wf-trait-superbound.rs:9:17\n+   |\n+LL | trait SomeTrait<T>: ExtraCopy<T> {\n+   |                 ^\n \n error: aborting due to previous error\n "}, {"sha": "c6f12e7753c82afe125e613a159456a13d026d70", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | fn require_copy<T: Copy>(x: T) {}\n    |    ------------    ---- required by this bound in `require_copy`\n ...\n-LL | impl<T> Foo<T> {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:6:6\n+   |\n+LL | impl<T> Foo<T> {\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "95688d6f2e48584805f344a3ddc4eaf5044fafd0", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/840bdc349d2885a5173269b653025192969cfebc/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=840bdc349d2885a5173269b653025192969cfebc", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | fn require_copy<T: Copy>(x: T) {}\n    |    ------------    ---- required by this bound in `require_copy`\n ...\n-LL | impl<T> Foo<T> for Bar<T> {\n-   |      - help: consider restricting this bound: `T: std::marker::Copy`\n-...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+help: consider restricting this type parameter with `T: std::marker::Copy`\n+  --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:11:6\n+   |\n+LL | impl<T> Foo<T> for Bar<T> {\n+   |      ^\n \n error: aborting due to previous error\n "}]}