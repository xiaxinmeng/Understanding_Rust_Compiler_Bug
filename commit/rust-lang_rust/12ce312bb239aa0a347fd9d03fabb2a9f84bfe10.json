{"sha": "12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2UzMTJiYjIzOWFhMGEzNDdmZDlkMDNmYWJiMmE5Zjg0YmZlMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T09:30:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T09:30:54Z"}, "message": "Auto merge of #6013 - ebroto:diagnostic_item_restriction, r=flip1995\n\nInternal lint: suggest `is_type_diagnostic_item` over `match_type` where applicable\n\nchangelog: none", "tree": {"sha": "1294b3a1523d35164b6929f267ed696223b0f9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1294b3a1523d35164b6929f267ed696223b0f9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "html_url": "https://github.com/rust-lang/rust/commit/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82e84c8943e70300ad1f4de46d8d7bd889c6bde", "html_url": "https://github.com/rust-lang/rust/commit/f82e84c8943e70300ad1f4de46d8d7bd889c6bde"}, {"sha": "d0b5663d30457d1a9ec4f98eb9baff7123b77172", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b5663d30457d1a9ec4f98eb9baff7123b77172", "html_url": "https://github.com/rust-lang/rust/commit/d0b5663d30457d1a9ec4f98eb9baff7123b77172"}], "stats": {"total": 225, "additions": 217, "deletions": 8}, "files": [{"sha": "b60a80e07d70852d282bf9a22f73e5bef55d5765", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -867,6 +867,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         &utils::internal_lints::DEFAULT_LINT,\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n         &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n         &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n@@ -1112,6 +1113,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n+    store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1240,6 +1242,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n+        LintId::of(&utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n         LintId::of(&utils::internal_lints::PRODUCE_ICE),\n     ]);"}, {"sha": "3d2fd0eee85a70c2536c83d170ad8d8f84342651", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -1114,7 +1114,7 @@ fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&\n             if let Some(self_expr) = args.get(0);\n             if let Some(pushed_item) = args.get(1);\n             // Check that the method being called is push() on a Vec\n-            if match_type(cx, cx.typeck_results().expr_ty(self_expr), &paths::VEC);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(self_expr), sym!(vec_type));\n             if path.ident.name.as_str() == \"push\";\n             then {\n                 return Some((self_expr, pushed_item))"}, {"sha": "de966cccd111c3da615ce9dceb35f9a87e4a86ff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -1808,7 +1808,7 @@ fn lint_or_fun_call<'tcx>(\n                     _ => (),\n                 }\n \n-                if match_type(cx, ty, &paths::VEC) {\n+                if is_type_diagnostic_item(cx, ty, sym!(vec_type)) {\n                     return;\n                 }\n             }"}, {"sha": "60e5e7bfed398e03ccd9226b3ce47d30b0edae41", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -1,6 +1,6 @@\n use crate::utils;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{match_type, paths, span_lint_and_sugg};\n+use crate::utils::{is_type_diagnostic_item, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n \n use rustc_errors::Applicability;\n@@ -73,7 +73,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(ref path, _, &[ref receiver], _) = &expr.kind {\n         path.ident.name.to_ident_string() == \"ok\"\n-            && match_type(cx, &cx.typeck_results().expr_ty(&receiver), &paths::RESULT)\n+            && is_type_diagnostic_item(cx, &cx.typeck_results().expr_ty(&receiver), sym!(result_type))\n     } else {\n         false\n     }"}, {"sha": "0a58231558ede21304bf1ecc9f4b7cd1e60d29b5", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -51,6 +51,8 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///\n /// The `help` message can be optionally attached to a `Span`.\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n /// # Example\n ///\n /// ```ignore\n@@ -87,6 +89,8 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n /// The `note` message is presented separately from the main lint message\n /// and is attached to a specific span:\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n /// # Example\n ///\n /// ```ignore\n@@ -126,6 +130,7 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n /// Like `span_lint` but allows to add notes, help and suggestions using a closure.\n ///\n /// If you need to customize your lint output a lot, use this function.\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n@@ -168,6 +173,10 @@ pub fn span_lint_hir_and_then(\n /// In the example below, `help` is `\"try\"` and `sugg` is the suggested replacement `\".any(|x| x >\n /// 2)\"`.\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n+/// # Example\n+///\n /// ```ignore\n /// error: This `.fold` can be more succinctly expressed as `.any`\n /// --> $DIR/methods.rs:390:13"}, {"sha": "f201494a02466da46b50701bf851edc8082bfbd4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 112, "deletions": 3, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, run_lints, snippet, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty, SpanlessEq,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, qpath_res, run_lints,\n+    snippet, span_lint, span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n+use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n@@ -206,6 +206,29 @@ declare_clippy_lint! {\n     \"found collapsible `span_lint_and_then` calls\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for calls to `utils::match_type()` on a type diagnostic item\n+    /// and suggests to use `utils::is_type_diagnostic_item()` instead.\n+    ///\n+    /// **Why is this bad?** `utils::is_type_diagnostic_item()` does not require hardcoded paths.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// utils::match_type(cx, ty, &paths::VEC)\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// utils::is_type_diagnostic_item(cx, ty, sym!(vec_type))\n+    /// ```\n+    pub MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+    internal,\n+    \"using `utils::match_type()` instead of `utils::is_type_diagnostic_item()`\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -652,3 +675,89 @@ fn suggest_note(\n         Applicability::MachineApplicable,\n     );\n }\n+\n+declare_lint_pass!(MatchTypeOnDiagItem => [MATCH_TYPE_ON_DIAGNOSTIC_ITEM]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[MATCH_TYPE_ON_DIAGNOSTIC_ITEM], expr.hir_id) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            // Check if this is a call to utils::match_type()\n+            if let ExprKind::Call(fn_path, [context, ty, ty_path]) = expr.kind;\n+            if let ExprKind::Path(fn_qpath) = &fn_path.kind;\n+            if match_qpath(&fn_qpath, &[\"utils\", \"match_type\"]);\n+            // Extract the path to the matched type\n+            if let Some(segments) = path_to_matched_type(cx, ty_path);\n+            let segments: Vec<&str> = segments.iter().map(|sym| &**sym).collect();\n+            if let Some(ty_did) = path_to_res(cx, &segments[..]).and_then(|res| res.opt_def_id());\n+            // Check if the matched type is a diagnostic item\n+            let diag_items = cx.tcx.diagnostic_items(ty_did.krate);\n+            if let Some(item_name) = diag_items.iter().find_map(|(k, v)| if *v == ty_did { Some(k) } else { None });\n+            then {\n+                let cx_snippet = snippet(cx, context.span, \"_\");\n+                let ty_snippet = snippet(cx, ty.span, \"_\");\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n+                    expr.span,\n+                    \"usage of `utils::match_type()` on a type diagnostic item\",\n+                    \"try\",\n+                    format!(\"utils::is_type_diagnostic_item({}, {}, sym!({}))\", cx_snippet, ty_snippet, item_name),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Vec<SymbolStr>> {\n+    use rustc_hir::ItemKind;\n+\n+    match &expr.kind {\n+        ExprKind::AddrOf(.., expr) => return path_to_matched_type(cx, expr),\n+        ExprKind::Path(qpath) => match qpath_res(cx, qpath, expr.hir_id) {\n+            Res::Local(hir_id) => {\n+                let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n+                if let Some(Node::Local(local)) = cx.tcx.hir().find(parent_id) {\n+                    if let Some(init) = local.init {\n+                        return path_to_matched_type(cx, init);\n+                    }\n+                }\n+            },\n+            Res::Def(DefKind::Const | DefKind::Static, def_id) => {\n+                if let Some(Node::Item(item)) = cx.tcx.hir().get_if_local(def_id) {\n+                    if let ItemKind::Const(.., body_id) | ItemKind::Static(.., body_id) = item.kind {\n+                        let body = cx.tcx.hir().body(body_id);\n+                        return path_to_matched_type(cx, &body.value);\n+                    }\n+                }\n+            },\n+            _ => {},\n+        },\n+        ExprKind::Array(exprs) => {\n+            let segments: Vec<SymbolStr> = exprs\n+                .iter()\n+                .filter_map(|expr| {\n+                    if let ExprKind::Lit(lit) = &expr.kind {\n+                        if let LitKind::Str(sym, _) = lit.node {\n+                            return Some(sym.as_str());\n+                        }\n+                    }\n+\n+                    None\n+                })\n+                .collect();\n+\n+            if segments.len() == exprs.len() {\n+                return Some(segments);\n+            }\n+        },\n+        _ => {},\n+    }\n+\n+    None\n+}"}, {"sha": "8db7e693e62617eb55f65d32f576c27336bbaa2f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -130,6 +130,9 @@ pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n }\n \n /// Checks if type is struct, enum or union type with the given def path.\n+///\n+/// If the type is a diagnostic item, use `is_type_diagnostic_item` instead.\n+/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n pub fn match_type(cx: &LateContext<'_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.kind() {\n         ty::Adt(adt, _) => match_def_path(cx, adt.did, path),\n@@ -138,6 +141,8 @@ pub fn match_type(cx: &LateContext<'_>, ty: Ty<'_>, path: &[&str]) -> bool {\n }\n \n /// Checks if the type is equal to a diagnostic item\n+///\n+/// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`\n pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n     match ty.kind() {\n         ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),"}, {"sha": "53c3d084dbc98624bbe114172cf5f44ff7e82441", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -60,7 +60,7 @@ impl LateLintPass<'_> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, _args) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(path, _, _args, _) = &expr.kind;\n             // Check the name of this method is `some_method`\n             if path.ident.name == sym!(some_method);\n             then {"}, {"sha": "fe950b0aa7c7004c729c33cc7b6dab3392d1260a", "filename": "tests/ui/match_type_on_diag_item.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/tests%2Fui%2Fmatch_type_on_diag_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/tests%2Fui%2Fmatch_type_on_diag_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_type_on_diag_item.rs?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -0,0 +1,50 @@\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_hir;\n+extern crate rustc_lint;\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate rustc_session;\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::Ty;\n+\n+mod paths {\n+    pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n+}\n+\n+mod utils {\n+    use super::*;\n+\n+    pub fn match_type(_cx: &LateContext<'_>, _ty: Ty<'_>, _path: &[&str]) -> bool {\n+        false\n+    }\n+}\n+\n+use utils::match_type;\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Warn,\n+    \"\"\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+static OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n+\n+impl<'tcx> LateLintPass<'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr) {\n+        let ty = cx.typeck_results().expr_ty(expr);\n+\n+        let _ = match_type(cx, ty, &paths::VEC);\n+        let _ = match_type(cx, ty, &OPTION);\n+        let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n+\n+        let rc_path = &[\"alloc\", \"rc\", \"Rc\"];\n+        let _ = utils::match_type(cx, ty, rc_path);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5e5fe9e3a3e73c494873f3c06cc126ae43989944", "filename": "tests/ui/match_type_on_diag_item.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/tests%2Fui%2Fmatch_type_on_diag_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ce312bb239aa0a347fd9d03fabb2a9f84bfe10/tests%2Fui%2Fmatch_type_on_diag_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_type_on_diag_item.stderr?ref=12ce312bb239aa0a347fd9d03fabb2a9f84bfe10", "patch": "@@ -0,0 +1,33 @@\n+error: usage of `utils::match_type()` on a type diagnostic item\n+  --> $DIR/match_type_on_diag_item.rs:41:17\n+   |\n+LL |         let _ = match_type(cx, ty, &paths::VEC);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(vec_type))`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/match_type_on_diag_item.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::match_type_on_diagnostic_item)]` implied by `#[deny(clippy::internal)]`\n+\n+error: usage of `utils::match_type()` on a type diagnostic item\n+  --> $DIR/match_type_on_diag_item.rs:42:17\n+   |\n+LL |         let _ = match_type(cx, ty, &OPTION);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(option_type))`\n+\n+error: usage of `utils::match_type()` on a type diagnostic item\n+  --> $DIR/match_type_on_diag_item.rs:43:17\n+   |\n+LL |         let _ = match_type(cx, ty, &[\"core\", \"result\", \"Result\"]);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(result_type))`\n+\n+error: usage of `utils::match_type()` on a type diagnostic item\n+  --> $DIR/match_type_on_diag_item.rs:46:17\n+   |\n+LL |         let _ = utils::match_type(cx, ty, rc_path);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `utils::is_type_diagnostic_item(cx, ty, sym!(Rc))`\n+\n+error: aborting due to 4 previous errors\n+"}]}