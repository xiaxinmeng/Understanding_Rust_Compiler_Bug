{"sha": "f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MjBiNWNlZDIyZTQzYmY0ODRjYTAyZjA4YjA5ZGQ0NWEzMGUwYTE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-29T02:00:07Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-29T02:00:07Z"}, "message": "rustdoc: Remove unnecessary optional\n\nPreviously, the HTML output format was represented by both\n`Some(OutputFormat::Html)` and `None` so there's no need to have an\noptional. Instead, `OutputFormat::Html` is explicitly the default and we\nno longer have a \"tri-state enum\".", "tree": {"sha": "5c75887886d84dd182f4ad415cc0553136cac71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c75887886d84dd182f4ad415cc0553136cac71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "html_url": "https://github.com/rust-lang/rust/commit/f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf193d69fe48f4ec3cac57ab7abb4e9f2a291661", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf193d69fe48f4ec3cac57ab7abb4e9f2a291661", "html_url": "https://github.com/rust-lang/rust/commit/bf193d69fe48f4ec3cac57ab7abb4e9f2a291661"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "0b6f3b09f0c0a01eae4064237fc342ac6953b7d9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "patch": "@@ -35,6 +35,12 @@ crate enum OutputFormat {\n     Html,\n }\n \n+impl Default for OutputFormat {\n+    fn default() -> OutputFormat {\n+        OutputFormat::Html\n+    }\n+}\n+\n impl OutputFormat {\n     crate fn is_json(&self) -> bool {\n         matches!(self, OutputFormat::Json)\n@@ -118,7 +124,7 @@ crate struct Options {\n     crate enable_per_target_ignores: bool,\n \n     /// The path to a rustc-like binary to build tests with. If not set, we\n-    /// default to loading from $sysroot/bin/rustc.\n+    /// default to loading from `$sysroot/bin/rustc`.\n     crate test_builder: Option<PathBuf>,\n \n     // Options that affect the documentation process\n@@ -142,8 +148,10 @@ crate struct Options {\n     crate crate_version: Option<String>,\n     /// Collected options specific to outputting final pages.\n     crate render_options: RenderOptions,\n-    /// Output format rendering (used only for \"show-coverage\" option for the moment)\n-    crate output_format: Option<OutputFormat>,\n+    /// The format that we output when rendering.\n+    ///\n+    /// Currently used only for the `--show-coverage` option.\n+    crate output_format: OutputFormat,\n     /// If this option is set to `true`, rustdoc will only run checks and not generate\n     /// documentation.\n     crate run_check: bool,\n@@ -271,7 +279,7 @@ crate struct RenderInfo {\n     crate deref_trait_did: Option<DefId>,\n     crate deref_mut_trait_did: Option<DefId>,\n     crate owned_box_did: Option<DefId>,\n-    crate output_format: Option<OutputFormat>,\n+    crate output_format: OutputFormat,\n }\n \n impl Options {\n@@ -537,28 +545,28 @@ impl Options {\n \n         let output_format = match matches.opt_str(\"output-format\") {\n             Some(s) => match OutputFormat::try_from(s.as_str()) {\n-                Ok(o) => {\n-                    if o.is_json()\n+                Ok(out_fmt) => {\n+                    if out_fmt.is_json()\n                         && !(show_coverage || nightly_options::match_is_nightly_build(matches))\n                     {\n                         diag.struct_err(\"json output format isn't supported for doc generation\")\n                             .emit();\n                         return Err(1);\n-                    } else if !o.is_json() && show_coverage {\n+                    } else if !out_fmt.is_json() && show_coverage {\n                         diag.struct_err(\n                             \"html output format isn't supported for the --show-coverage option\",\n                         )\n                         .emit();\n                         return Err(1);\n                     }\n-                    Some(o)\n+                    out_fmt\n                 }\n                 Err(e) => {\n                     diag.struct_err(&e).emit();\n                     return Err(1);\n                 }\n             },\n-            None => None,\n+            None => OutputFormat::default(),\n         };\n         let crate_name = matches.opt_str(\"crate-name\");\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);"}, {"sha": "60dbc19483a45606bfec843ad10c6a88cb5e377c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "patch": "@@ -460,7 +460,7 @@ crate fn run_global_ctxt(\n     mut default_passes: passes::DefaultPassOption,\n     mut manual_passes: Vec<String>,\n     render_options: RenderOptions,\n-    output_format: Option<OutputFormat>,\n+    output_format: OutputFormat,\n ) -> (clean::Crate, RenderInfo, RenderOptions) {\n     // Certain queries assume that some checks were run elsewhere\n     // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),"}, {"sha": "e98cb237635fe9c441486a1e25d7ca7648b8eccd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "patch": "@@ -578,7 +578,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 let (error_format, edition, debugging_options) = diag_opts;\n                 let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n-                    None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n+                    config::OutputFormat::Html => sess.time(\"render_html\", || {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n@@ -588,7 +588,7 @@ fn main_options(options: config::Options) -> MainResult {\n                             tcx,\n                         )\n                     }),\n-                    Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n+                    config::OutputFormat::Json => sess.time(\"render_json\", || {\n                         run_renderer::<json::JsonRenderer<'_>>(\n                             krate,\n                             render_opts,"}, {"sha": "cdbff62d0645ccf9946c08b64f6a8402f94c2a29", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f620b5ced22e43bf484ca02f08b09dd45a30e0a1/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=f620b5ced22e43bf484ca02f08b09dd45a30e0a1", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n \n     fn print_results(&self) {\n         let output_format = self.ctx.renderinfo.borrow().output_format;\n-        if output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n+        if output_format.is_json() {\n             println!(\"{}\", self.to_json());\n             return;\n         }"}]}