{"sha": "b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGYxYTBhNGQ5MDI3NmM3YmQ5OWJkMGU1YWM2OTU5NTc4YmU3NmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-03T19:01:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-03T19:01:03Z"}, "message": "Merge #8315\n\n8315: Try to reduce ItemTree size further r=jonas-schievink a=jonas-schievink\n\nThis was mostly a failed experiment, but still seems like the right thing to do. Memory reduction is mostly negligible.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "9e5444bdd56ad6725525764d9f35a20f927b2209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5444bdd56ad6725525764d9f35a20f927b2209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaLtvCRBK7hj4Ov3rIwAAdHIIABAmgvGuQ8OePFSAa+H2vWUu\nD9rOkzOmrVZXJGvluQpO5XVAk1Lz/0Xo+f8ZtLKSvTCQsPrGfBKZ5pxucX4W0P3+\nr6TtUP+hOicuEqPLkrXpfwq6e1j/bAkojwx7WA7JGYowQhEzGECoPs/9RHvYaF+v\nJV9TmX4injq/+cG/NrDiMpp6euyOjziMRCeedcmhwY2fFzH24+/sqrts5seKGNq7\nyE8nYwQUinaH4BP59Mq8fe71AXEOGOjIv04MV/VWM6ftv3bvfaQAslWymf769caI\nPFsXeb8nygQoQjDOWuEUg4MwkNrRkTKueRhROKZfSf2HmKaLHaHm6WbLxVusmyQ=\n=1+aa\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e5444bdd56ad6725525764d9f35a20f927b2209\nparent e2213a503ec4c602eb976dccb9d34b56d9c6aba3\nparent ee4b5a34d8aa789ebc521926123fba79eebe5981\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617476463 +0000\ncommitter GitHub <noreply@github.com> 1617476463 +0000\n\nMerge #8315\n\n8315: Try to reduce ItemTree size further r=jonas-schievink a=jonas-schievink\n\nThis was mostly a failed experiment, but still seems like the right thing to do. Memory reduction is mostly negligible.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "html_url": "https://github.com/rust-lang/rust/commit/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2213a503ec4c602eb976dccb9d34b56d9c6aba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2213a503ec4c602eb976dccb9d34b56d9c6aba3", "html_url": "https://github.com/rust-lang/rust/commit/e2213a503ec4c602eb976dccb9d34b56d9c6aba3"}, {"sha": "ee4b5a34d8aa789ebc521926123fba79eebe5981", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4b5a34d8aa789ebc521926123fba79eebe5981", "html_url": "https://github.com/rust-lang/rust/commit/ee4b5a34d8aa789ebc521926123fba79eebe5981"}], "stats": {"total": 203, "additions": 128, "deletions": 75}, "files": [{"sha": "4531d8fb1cbabb1c5a2060958eb9e7655dff24f6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -498,6 +498,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"anymap\",\n  \"base_db\",\n+ \"bitflags\",\n  \"cfg\",\n  \"cov-mark\",\n  \"dashmap\","}, {"sha": "559ea31a0ac3afbec597b9f0dc3c087eb105dc2d", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -20,22 +20,21 @@ impl HirDisplay for Function {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         let data = f.db.function_data(self.id);\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n-        let qual = &data.qualifier;\n-        if qual.is_default {\n+        if data.is_default() {\n             write!(f, \"default \")?;\n         }\n-        if qual.is_const {\n+        if data.is_const() {\n             write!(f, \"const \")?;\n         }\n-        if qual.is_async {\n+        if data.is_async() {\n             write!(f, \"async \")?;\n         }\n-        if qual.is_unsafe {\n+        if data.is_unsafe() {\n             write!(f, \"unsafe \")?;\n         }\n-        if let Some(abi) = &qual.abi {\n+        if let Some(abi) = &data.abi {\n             // FIXME: String escape?\n-            write!(f, \"extern \\\"{}\\\" \", abi)?;\n+            write!(f, \"extern \\\"{}\\\" \", &**abi)?;\n         }\n         write!(f, \"fn {}\", data.name)?;\n \n@@ -68,7 +67,7 @@ impl HirDisplay for Function {\n                 write!(f, \", \")?;\n             } else {\n                 first = false;\n-                if data.has_self_param {\n+                if data.has_self_param() {\n                     write_self_param(type_ref, f)?;\n                     continue;\n                 }\n@@ -88,7 +87,7 @@ impl HirDisplay for Function {\n         // `FunctionData::ret_type` will be `::core::future::Future<Output = ...>` for async fns.\n         // Use ugly pattern match to strip the Future trait.\n         // Better way?\n-        let ret_type = if !qual.is_async {\n+        let ret_type = if !data.is_async() {\n             &data.ret_type\n         } else {\n             match &*data.ret_type {"}, {"sha": "eb19e4b51a888070e5b104c0d7ecedb802a528f8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -832,7 +832,7 @@ impl Function {\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        if !db.function_data(self.id).has_self_param {\n+        if !db.function_data(self.id).has_self_param() {\n             return None;\n         }\n         Some(SelfParam { func: self.id })\n@@ -864,7 +864,7 @@ impl Function {\n     }\n \n     pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).qualifier.is_unsafe\n+        db.function_data(self.id).is_unsafe()\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n@@ -878,7 +878,7 @@ impl Function {\n     ///\n     /// This is false in the case of required (not provided) trait methods.\n     pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).has_body\n+        db.function_data(self.id).has_body()\n     }\n \n     /// A textual representation of the HIR of this function for debugging purposes."}, {"sha": "60adb655c75b80d1cad8982b07ac851f6457c410", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -10,6 +10,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+bitflags = \"1.2.1\"\n cov-mark = { version = \"1.1\", features = [\"thread-local\"] }\n dashmap = { version = \"4.0.2\", features = [\"raw-api\"] }\n log = \"0.4.8\""}, {"sha": "b409fb45cdb656d87bfb9ae44da02b9c588abf8d", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     body::Expander,\n     db::DefDatabase,\n     intern::Interned,\n-    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem, Param},\n+    item_tree::{AssocItem, FnFlags, ItemTreeId, ModItem, Param},\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -23,14 +23,9 @@ pub struct FunctionData {\n     pub params: Vec<Interned<TypeRef>>,\n     pub ret_type: Interned<TypeRef>,\n     pub attrs: Attrs,\n-    /// True if the first param is `self`. This is relevant to decide whether this\n-    /// can be called as a method.\n-    pub has_self_param: bool,\n-    pub has_body: bool,\n-    pub qualifier: FunctionQualifier,\n-    pub is_in_extern_block: bool,\n-    pub is_varargs: bool,\n     pub visibility: RawVisibility,\n+    pub abi: Option<Interned<str>>,\n+    flags: FnFlags,\n }\n \n impl FunctionData {\n@@ -53,6 +48,11 @@ impl FunctionData {\n             .next_back()\n             .map_or(false, |param| matches!(item_tree[param], Param::Varargs));\n \n+        let mut flags = func.flags;\n+        if is_varargs {\n+            flags |= FnFlags::IS_VARARGS;\n+        }\n+\n         Arc::new(FunctionData {\n             name: func.name.clone(),\n             params: enabled_params\n@@ -64,14 +64,45 @@ impl FunctionData {\n                 .collect(),\n             ret_type: func.ret_type.clone(),\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n-            has_self_param: func.has_self_param,\n-            has_body: func.has_body,\n-            qualifier: func.qualifier.clone(),\n-            is_in_extern_block: func.is_in_extern_block,\n-            is_varargs,\n             visibility: item_tree[func.visibility].clone(),\n+            abi: func.abi.clone(),\n+            flags,\n         })\n     }\n+\n+    pub fn has_body(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_BODY)\n+    }\n+\n+    /// True if the first param is `self`. This is relevant to decide whether this\n+    /// can be called as a method.\n+    pub fn has_self_param(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_SELF_PARAM)\n+    }\n+\n+    pub fn is_default(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_DEFAULT)\n+    }\n+\n+    pub fn is_const(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_CONST)\n+    }\n+\n+    pub fn is_async(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_ASYNC)\n+    }\n+\n+    pub fn is_unsafe(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_UNSAFE)\n+    }\n+\n+    pub fn is_in_extern_block(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_IN_EXTERN_BLOCK)\n+    }\n+\n+    pub fn is_varargs(&self) -> bool {\n+        self.flags.contains(FnFlags::IS_VARARGS)\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "c6d700977e365484d1b7916568cc228278c69666", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -24,7 +24,7 @@ use la_arena::{Arena, Idx, RawIdx};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n-use syntax::{ast, match_ast, SmolStr, SyntaxKind};\n+use syntax::{ast, match_ast, SyntaxKind};\n \n use crate::{\n     attr::{Attrs, RawAttrs},\n@@ -529,7 +529,7 @@ impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n /// A desugared `use` import.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Import {\n-    pub path: ModPath,\n+    pub path: Interned<ModPath>,\n     pub alias: Option<ImportAlias>,\n     pub visibility: RawVisibilityId,\n     pub is_glob: bool,\n@@ -556,15 +556,11 @@ pub struct Function {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n-    pub has_self_param: bool,\n-    pub has_body: bool,\n-    pub qualifier: FunctionQualifier,\n-    /// Whether the function is located in an `extern` block (*not* whether it is an\n-    /// `extern \"abi\" fn`).\n-    pub is_in_extern_block: bool,\n+    pub abi: Option<Interned<str>>,\n     pub params: IdRange<Param>,\n     pub ret_type: Interned<TypeRef>,\n     pub ast_id: FileAstId<ast::Fn>,\n+    pub(crate) flags: FnFlags,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -573,13 +569,20 @@ pub enum Param {\n     Varargs,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct FunctionQualifier {\n-    pub is_default: bool,\n-    pub is_const: bool,\n-    pub is_async: bool,\n-    pub is_unsafe: bool,\n-    pub abi: Option<SmolStr>,\n+bitflags::bitflags! {\n+    /// NOTE: Shared with `FunctionData`\n+    pub(crate) struct FnFlags: u8 {\n+        const HAS_SELF_PARAM = 1 << 0;\n+        const HAS_BODY = 1 << 1;\n+        const IS_DEFAULT = 1 << 2;\n+        const IS_CONST = 1 << 3;\n+        const IS_ASYNC = 1 << 4;\n+        const IS_UNSAFE = 1 << 5;\n+        /// Whether the function is located in an `extern` block (*not* whether it is an\n+        /// `extern \"abi\" fn`).\n+        const IS_IN_EXTERN_BLOCK = 1 << 6;\n+        const IS_VARARGS = 1 << 7;\n+    }\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "39e8403b0999d8b854c541f012a84394cb38be4b", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -395,39 +395,51 @@ impl Ctx {\n             ret_type\n         };\n \n-        let has_body = func.body().is_some();\n+        let abi = func.abi().map(|abi| {\n+            // FIXME: Abi::abi() -> Option<SyntaxToken>?\n+            match abi.syntax().last_token() {\n+                Some(tok) if tok.kind() == SyntaxKind::STRING => {\n+                    // FIXME: Better way to unescape?\n+                    Interned::new_str(tok.text().trim_matches('\"'))\n+                }\n+                _ => {\n+                    // `extern` default to be `extern \"C\"`.\n+                    Interned::new_str(\"C\")\n+                }\n+            }\n+        });\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n-        let qualifier = FunctionQualifier {\n-            is_default: func.default_token().is_some(),\n-            is_const: func.const_token().is_some(),\n-            is_async: func.async_token().is_some(),\n-            is_unsafe: func.unsafe_token().is_some(),\n-            abi: func.abi().map(|abi| {\n-                // FIXME: Abi::abi() -> Option<SyntaxToken>?\n-                match abi.syntax().last_token() {\n-                    Some(tok) if tok.kind() == SyntaxKind::STRING => {\n-                        // FIXME: Better way to unescape?\n-                        tok.text().trim_matches('\"').into()\n-                    }\n-                    _ => {\n-                        // `extern` default to be `extern \"C\"`.\n-                        \"C\".into()\n-                    }\n-                }\n-            }),\n-        };\n+\n+        let mut flags = FnFlags::empty();\n+        if func.body().is_some() {\n+            flags |= FnFlags::HAS_BODY;\n+        }\n+        if has_self_param {\n+            flags |= FnFlags::HAS_SELF_PARAM;\n+        }\n+        if func.default_token().is_some() {\n+            flags |= FnFlags::IS_DEFAULT;\n+        }\n+        if func.const_token().is_some() {\n+            flags |= FnFlags::IS_CONST;\n+        }\n+        if func.async_token().is_some() {\n+            flags |= FnFlags::IS_ASYNC;\n+        }\n+        if func.unsafe_token().is_some() {\n+            flags |= FnFlags::IS_UNSAFE;\n+        }\n+\n         let mut res = Function {\n             name,\n             visibility,\n             generic_params: GenericParamsId::EMPTY,\n-            has_self_param,\n-            has_body,\n-            qualifier,\n-            is_in_extern_block: false,\n+            abi,\n             params,\n             ret_type: Interned::new(ret_type),\n             ast_id,\n+            flags,\n         };\n         res.generic_params = self.lower_generic_params(GenericsOwner::Function(&res), func);\n \n@@ -577,7 +589,7 @@ impl Ctx {\n             &self.hygiene,\n             |path, _use_tree, is_glob, alias| {\n                 imports.push(id(tree.imports.alloc(Import {\n-                    path,\n+                    path: Interned::new(path),\n                     alias,\n                     visibility,\n                     is_glob,\n@@ -640,8 +652,10 @@ impl Ctx {\n                         ast::ExternItem::Fn(ast) => {\n                             let func_id = self.lower_function(&ast)?;\n                             let func = &mut self.data().functions[func_id.index];\n-                            func.qualifier.is_unsafe = is_intrinsic_fn_unsafe(&func.name);\n-                            func.is_in_extern_block = true;\n+                            if is_intrinsic_fn_unsafe(&func.name) {\n+                                func.flags |= FnFlags::IS_UNSAFE;\n+                            }\n+                            func.flags |= FnFlags::IS_IN_EXTERN_BLOCK;\n                             func_id.into()\n                         }\n                         ast::ExternItem::Static(ast) => {"}, {"sha": "c2e445b688923fbd47439d8154c26ae65c8e0243", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -23,6 +23,7 @@ use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n     derive_macro_as_call_id,\n+    intern::Interned,\n     item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n         self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, MacroDef, MacroRules, Mod, ModItem,\n@@ -139,7 +140,7 @@ enum ImportSource {\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n struct Import {\n-    path: ModPath,\n+    path: Interned<ModPath>,\n     alias: Option<ImportAlias>,\n     visibility: RawVisibility,\n     is_glob: bool,\n@@ -181,7 +182,10 @@ impl Import {\n         let attrs = &tree.attrs(db, krate, ModItem::from(id.value).into());\n         let visibility = &tree[it.visibility];\n         Self {\n-            path: ModPath::from_segments(PathKind::Plain, iter::once(it.name.clone())),\n+            path: Interned::new(ModPath::from_segments(\n+                PathKind::Plain,\n+                iter::once(it.name.clone()),\n+            )),\n             alias: it.alias.clone(),\n             visibility: visibility.clone(),\n             is_glob: false,"}, {"sha": "207c7cb824e984df0f15c783daebadf495a4851e", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_func(&mut self, func: FunctionId) {\n         let data = self.db.function_data(func);\n-        if data.is_in_extern_block {\n+        if data.is_in_extern_block() {\n             cov_mark::hit!(extern_func_incorrect_case_ignored);\n             return;\n         }"}, {"sha": "b5efe9df5c45b19c4721bf975690940b7a452362", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let def = self.owner;\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let is_unsafe = match self.owner {\n-            DefWithBodyId::FunctionId(it) => db.function_data(it).qualifier.is_unsafe,\n+            DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n             DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n         };\n         if is_unsafe\n@@ -86,7 +86,7 @@ fn walk_unsafe(\n     match expr {\n         &Expr::Call { callee, .. } => {\n             if let Some(func) = infer[callee].as_fn_def(db) {\n-                if db.function_data(func).qualifier.is_unsafe {\n+                if db.function_data(func).is_unsafe() {\n                     unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n@@ -103,7 +103,7 @@ fn walk_unsafe(\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n-                .map(|func| db.function_data(func).qualifier.is_unsafe)\n+                .map(|func| db.function_data(func).is_unsafe())\n                 .unwrap_or(false)\n             {\n                 unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });"}, {"sha": "e60d7c730dad3722a14d2e6b59b3ec3bb71de6cf", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -1054,7 +1054,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n     let ret = (&ctx_ret).lower_ty(&data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n     let num_binders = generics.len();\n-    Binders::new(num_binders, CallableSig::from_params_and_return(params, ret, data.is_varargs))\n+    Binders::new(num_binders, CallableSig::from_params_and_return(params, ret, data.is_varargs()))\n }\n \n /// Build the declared type of a function. This should not need to look at the"}, {"sha": "c093fce2017d277d7974ec3983c6f4603c9349f7", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78f1a0a4d90276c7bd99bd0e5ac6959578be76a/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b78f1a0a4d90276c7bd99bd0e5ac6959578be76a", "patch": "@@ -675,7 +675,7 @@ fn is_valid_candidate(\n                 }\n             }\n             if let Some(receiver_ty) = receiver_ty {\n-                if !data.has_self_param {\n+                if !data.has_self_param() {\n                     return false;\n                 }\n                 let transformed_receiver_ty = match transform_receiver_ty(db, m, self_ty) {"}]}