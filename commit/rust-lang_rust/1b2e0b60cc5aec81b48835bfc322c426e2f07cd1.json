{"sha": "1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "node_id": "C_kwDOAAsO6NoAKDFiMmUwYjYwY2M1YWVjODFiNDg4MzViZmMzMjJjNDI2ZTJmMDdjZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T22:29:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T22:29:58Z"}, "message": "Auto merge of #95380 - compiler-errors:unit-destructure-assign, r=nikomatsakis\n\nFix unit struct/enum variant in destructuring assignment\n\nSee https://github.com/rust-lang/rfcs/blob/master/text/2909-destructuring-assignment.md#guide-level-explanation, \"including **unit** and tuple structs\"\n\nFixes #94319", "tree": {"sha": "a06695d136f1111824848671f84473bff2379264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06695d136f1111824848671f84473bff2379264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "html_url": "https://github.com/rust-lang/rust/commit/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b71feb592ba64805689e2b15b9fa570182c442", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b71feb592ba64805689e2b15b9fa570182c442", "html_url": "https://github.com/rust-lang/rust/commit/e1b71feb592ba64805689e2b15b9fa570182c442"}, {"sha": "17f5c4d255323d331345ffe4cfebb959b1b5fa1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f5c4d255323d331345ffe4cfebb959b1b5fa1a", "html_url": "https://github.com/rust-lang/rust/commit/17f5c4d255323d331345ffe4cfebb959b1b5fa1a"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "a1d994c2f90db73dbfe4d89b150d5651e6775985", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "patch": "@@ -1020,6 +1020,28 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         None\n     }\n \n+    /// If the given expression is a path to a unit struct, returns that path.\n+    /// It is not a complete check, but just tries to reject most paths early\n+    /// if they are not unit structs.\n+    /// Type checking will take care of the full validation later.\n+    fn extract_unit_struct_path<'a>(\n+        &mut self,\n+        expr: &'a Expr,\n+    ) -> Option<(&'a Option<QSelf>, &'a Path)> {\n+        if let ExprKind::Path(qself, path) = &expr.kind {\n+            // Does the path resolve to something disallowed in a unit struct/variant pattern?\n+            if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {\n+                if partial_res.unresolved_segments() == 0\n+                    && !partial_res.base_res().expected_in_unit_struct_pat()\n+                {\n+                    return None;\n+                }\n+            }\n+            return Some((qself, path));\n+        }\n+        None\n+    }\n+\n     /// Convert the LHS of a destructuring assignment to a pattern.\n     /// Each sub-assignment is recorded in `assignments`.\n     fn destructure_assign(\n@@ -1080,6 +1102,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     return self.pat_without_dbm(lhs.span, tuple_struct_pat);\n                 }\n             }\n+            // Unit structs and enum variants.\n+            ExprKind::Path(..) => {\n+                if let Some((qself, path)) = self.extract_unit_struct_path(lhs) {\n+                    let qpath = self.lower_qpath(\n+                        lhs.id,\n+                        qself,\n+                        path,\n+                        ParamMode::Optional,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    );\n+                    // Destructure like a unit struct.\n+                    let unit_struct_pat = hir::PatKind::Path(qpath);\n+                    return self.pat_without_dbm(lhs.span, unit_struct_pat);\n+                }\n+            }\n             // Structs.\n             ExprKind::Struct(se) => {\n                 let field_pats = self.arena.alloc_from_iter(se.fields.iter().map(|f| {"}, {"sha": "7416ad79aefd0075a960cb9d36caa14b0d1f0b2f", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "patch": "@@ -663,4 +663,9 @@ impl<Id> Res<Id> {\n     pub fn expected_in_tuple_struct_pat(&self) -> bool {\n         matches!(self, Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) | Res::SelfCtor(..))\n     }\n+\n+    /// Returns whether such a resolved path can occur in a unit struct/variant pattern\n+    pub fn expected_in_unit_struct_pat(&self) -> bool {\n+        matches!(self, Res::Def(DefKind::Ctor(_, CtorKind::Const), _) | Res::SelfCtor(..))\n+    }\n }"}, {"sha": "3db4d4481b4ecabce09e0710d98f60cabf343986", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "patch": "@@ -396,13 +396,10 @@ impl<'a> PathSource<'a> {\n                 ) | Res::Local(..)\n                     | Res::SelfCtor(..)\n             ),\n-            PathSource::Pat => matches!(\n-                res,\n-                Res::Def(\n-                    DefKind::Ctor(_, CtorKind::Const) | DefKind::Const | DefKind::AssocConst,\n-                    _,\n-                ) | Res::SelfCtor(..)\n-            ),\n+            PathSource::Pat => {\n+                res.expected_in_unit_struct_pat()\n+                    || matches!(res, Res::Def(DefKind::Const | DefKind::AssocConst, _))\n+            }\n             PathSource::TupleStruct(..) => res.expected_in_tuple_struct_pat(),\n             PathSource::Struct => matches!(\n                 res,"}, {"sha": "8da7f90c5246d97e959526f6bf305b6864bf422a", "filename": "src/test/ui/destructuring-assignment/struct-or-enum-variant-path.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct-or-enum-variant-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2e0b60cc5aec81b48835bfc322c426e2f07cd1/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct-or-enum-variant-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct-or-enum-variant-path.rs?ref=1b2e0b60cc5aec81b48835bfc322c426e2f07cd1", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+struct S;\n+\n+enum E {\n+    V,\n+}\n+\n+type A = E;\n+\n+fn main() {\n+    let mut a;\n+\n+    (S, a) = (S, ());\n+\n+    (E::V, a) = (E::V, ());\n+\n+    (<E>::V, a) = (E::V, ());\n+    (A::V, a) = (E::V, ());\n+}\n+\n+impl S {\n+    fn check() {\n+        let a;\n+        (Self, a) = (S, ());\n+    }\n+}\n+\n+impl E {\n+    fn check() {\n+        let a;\n+        (Self::V, a) = (E::V, ());\n+    }\n+}"}]}