{"sha": "4ad57f5c39e9723fe2a4611d3b5987ad113be695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDU3ZjVjMzllOTcyM2ZlMmE0NjExZDNiNTk4N2FkMTEzYmU2OTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T21:15:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-22T02:10:32Z"}, "message": "rt: Add rust_task::get_task_from_tcb", "tree": {"sha": "a5b421cf92866f6888cd896e36a17c12b9eaef3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b421cf92866f6888cd896e36a17c12b9eaef3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad57f5c39e9723fe2a4611d3b5987ad113be695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad57f5c39e9723fe2a4611d3b5987ad113be695", "html_url": "https://github.com/rust-lang/rust/commit/4ad57f5c39e9723fe2a4611d3b5987ad113be695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad57f5c39e9723fe2a4611d3b5987ad113be695/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f783ff10cd561fbe31d5744fd42713d4b3764f", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f783ff10cd561fbe31d5744fd42713d4b3764f", "html_url": "https://github.com/rust-lang/rust/commit/08f783ff10cd561fbe31d5744fd42713d4b3764f"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "a5a33013eeaf3726604fbb69728f7c7b7063a686", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ad57f5c39e9723fe2a4611d3b5987ad113be695/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/4ad57f5c39e9723fe2a4611d3b5987ad113be695/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=4ad57f5c39e9723fe2a4611d3b5987ad113be695", "patch": "@@ -61,6 +61,18 @@\n #endif\n #endif\n \n+extern \"C\" CDECL void\n+record_sp_limit(void *limit);\n+extern \"C\" CDECL uintptr_t\n+get_sp_limit();\n+\n+// The function prolog compares the amount of stack needed to the end of\n+// the stack. As an optimization, when the frame size is less than 256\n+// bytes, it will simply compare %esp to to the stack limit instead of\n+// subtracting the frame size. As a result we need our stack limit to\n+// account for those 256 bytes.\n+const unsigned LIMIT_OFFSET = 256;\n+\n struct rust_box;\n \n struct frame_glue_fns {\n@@ -257,6 +269,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     const char *get_cond_name() { return cond_name; }\n \n     void cleanup_after_turn();\n+    static rust_task *get_task_from_tcb();\n };\n \n // This stuff is on the stack-switching fast path\n@@ -432,19 +445,35 @@ record_sp_limit(void *limit);\n inline void\n rust_task::record_stack_limit() {\n     I(thread, stk);\n-    // The function prolog compares the amount of stack needed to the end of\n-    // the stack. As an optimization, when the frame size is less than 256\n-    // bytes, it will simply compare %esp to to the stack limit instead of\n-    // subtracting the frame size. As a result we need our stack limit to\n-    // account for those 256 bytes.\n-    const unsigned LIMIT_OFFSET = 256;\n     A(thread,\n       (uintptr_t)stk->end - RED_ZONE_SIZE\n       - (uintptr_t)stk->data >= LIMIT_OFFSET,\n       \"Stack size must be greater than LIMIT_OFFSET\");\n     record_sp_limit(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n+// The stack pointer boundary is stored in a quickly-accessible location\n+// in the TCB. From that we can calculate the address of the stack segment\n+// structure it belongs to, and in that structure is a pointer to the task\n+// that owns it.\n+inline rust_task*\n+rust_task::get_task_from_tcb() {\n+    uintptr_t sp_limit = get_sp_limit();\n+    // FIXME (1226) - Because of a hack in upcall_call_shim_on_c_stack this\n+    // value is sometimes inconveniently set to 0, so we can't use this\n+    // method of retreiving the task pointer and need to fall back to TLS.\n+    if (sp_limit == 0) {\n+        return NULL;\n+    }\n+\n+    uintptr_t seg_addr =\n+        sp_limit - RED_ZONE_SIZE - LIMIT_OFFSET - sizeof(stk_seg);\n+    stk_seg *stk = (stk_seg*) seg_addr;\n+    // Make sure we've calculated the right address\n+    ::check_stack_canary(stk);\n+    assert(stk->task != NULL && \"task pointer not in stack structure\");\n+    return stk->task;\n+}\n \n //\n // Local Variables:"}]}