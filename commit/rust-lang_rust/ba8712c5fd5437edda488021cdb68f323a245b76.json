{"sha": "ba8712c5fd5437edda488021cdb68f323a245b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhODcxMmM1ZmQ1NDM3ZWRkYTQ4ODAyMWNkYjY4ZjMyM2EyNDViNzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-07T19:01:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-07T19:01:39Z"}, "message": "Revert tests/compile-test.rs to 61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "tree": {"sha": "8b466ee142ee0ff8ac44f6b298518e6387d0d8ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b466ee142ee0ff8ac44f6b298518e6387d0d8ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8712c5fd5437edda488021cdb68f323a245b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8712c5fd5437edda488021cdb68f323a245b76", "html_url": "https://github.com/rust-lang/rust/commit/ba8712c5fd5437edda488021cdb68f323a245b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8712c5fd5437edda488021cdb68f323a245b76/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e455b046668778b16d3ed41cd2e701951337d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e455b046668778b16d3ed41cd2e701951337d72", "html_url": "https://github.com/rust-lang/rust/commit/0e455b046668778b16d3ed41cd2e701951337d72"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "b6a4beff0469864781aeadb9bf019fe9f13c6eb9", "filename": "tests/compile-test.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ba8712c5fd5437edda488021cdb68f323a245b76/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8712c5fd5437edda488021cdb68f323a245b76/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=ba8712c5fd5437edda488021cdb68f323a245b76", "patch": "@@ -1,7 +1,7 @@\n #![feature(test)]\n \n use compiletest_rs as compiletest;\n-use libtest::TestDescAndFn;\n+extern crate test;\n \n use std::env::{set_var, var};\n use std::ffi::OsStr;\n@@ -74,12 +74,15 @@ fn run_mode(mode: &str, dir: PathBuf) {\n     compiletest::run_tests(&cfg);\n }\n \n-#[warn(clippy::identity_conversion)]\n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<TestDescAndFn>) -> Result<bool, io::Error> {\n+fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {\n     let mut result = true;\n     let opts = compiletest::test_opts(config);\n     for dir in fs::read_dir(&config.src_base)? {\n-        let dir_path = dir.unwrap().path();\n+        let dir = dir?;\n+        if !dir.file_type()?.is_dir() {\n+            continue;\n+        }\n+        let dir_path = dir.path();\n         set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n         for file in fs::read_dir(&dir_path)? {\n             let file = file?;\n@@ -98,25 +101,9 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<TestDescAndFn>\n             let test_name = compiletest::make_test_name(&config, &paths);\n             let index = tests\n                 .iter()\n-                .position(|test| test.desc.name.to_string() == test_name.to_string())\n+                .position(|test| test.desc.name == test_name)\n                 .expect(\"The test should be in there\");\n-            let opts = libtest::TestOpts {\n-                list: opts.list,\n-                filter: opts.filter.clone(),\n-                filter_exact: opts.filter_exact,\n-                exclude_should_panic: Default::default(),\n-                run_ignored: libtest::RunIgnored::No,\n-                run_tests: opts.run_tests,\n-                bench_benchmarks: opts.bench_benchmarks,\n-                logfile: opts.logfile.clone(),\n-                nocapture: opts.nocapture,\n-                color: libtest::ColorConfig::AutoColor,\n-                format: libtest::OutputFormat::Pretty,\n-                test_threads: opts.test_threads,\n-                skip: opts.skip.clone(),\n-                options: libtest::Options::new(),\n-            };\n-            result &= libtest::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+            result &= test::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n     }\n     Ok(result)\n@@ -127,22 +114,6 @@ fn run_ui_toml() {\n     let config = config(\"ui\", path);\n     let tests = compiletest::make_tests(&config);\n \n-    let tests = tests\n-        .into_iter()\n-        .map(|test| {\n-            libtest::TestDescAndFn {\n-                desc: libtest::TestDesc {\n-                    name: libtest::TestName::DynTestName(test.desc.name.to_string()),\n-                    ignore: test.desc.ignore,\n-                    allow_fail: test.desc.allow_fail,\n-                    should_panic: libtest::ShouldPanic::No,\n-                },\n-                // oli obk giving up\n-                testfn: unsafe { std::mem::transmute(test.testfn) },\n-            }\n-        })\n-        .collect();\n-\n     let res = run_ui_toml_tests(&config, tests);\n     match res {\n         Ok(true) => {},"}]}