{"sha": "8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjA5MWU4ZjFmNTUzMWZlOTA3Zjg0YjZhMmIyN2FmMDRhOTVlOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-11T17:01:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-11T17:01:43Z"}, "message": "auto merge of #13236 : liigo/rust/rename-benchharness, r=huonw\n\nCloses #12640\r\n\r\nbased on PR #13030, rebased, and passed all tests.", "tree": {"sha": "506ee280622b0c9e50c528b86d65cd8ff1f79122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506ee280622b0c9e50c528b86d65cd8ff1f79122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "html_url": "https://github.com/rust-lang/rust/commit/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "html_url": "https://github.com/rust-lang/rust/commit/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e"}, {"sha": "408f484b660d507617d5293c03942b5b5dd7bc0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/408f484b660d507617d5293c03942b5b5dd7bc0a", "html_url": "https://github.com/rust-lang/rust/commit/408f484b660d507617d5293c03942b5b5dd7bc0a"}], "stats": {"total": 968, "additions": 483, "deletions": 485}, "files": [{"sha": "3809633708b4c81abe20eeedddab96af88ed70b0", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -170,7 +170,7 @@ runner.\n \n The type signature of a benchmark function differs from a unit test:\n it takes a mutable reference to type\n-`test::BenchHarness`. Inside the benchmark function, any\n+`test::Bencher`. Inside the benchmark function, any\n time-variable or \"setup\" code should execute first, followed by a call\n to `iter` on the benchmark harness, passing a closure that contains\n the portion of the benchmark you wish to actually measure the\n@@ -189,16 +189,16 @@ For example:\n extern crate test;\n \n use std::slice;\n-use test::BenchHarness;\n+use test::Bencher;\n \n #[bench]\n-fn bench_sum_1024_ints(b: &mut BenchHarness) {\n+fn bench_sum_1024_ints(b: &mut Bencher) {\n     let v = slice::from_fn(1024, |n| n);\n     b.iter(|| {v.iter().fold(0, |old, new| old + *new);} );\n }\n \n #[bench]\n-fn initialise_a_vector(b: &mut BenchHarness) {\n+fn initialise_a_vector(b: &mut Bencher) {\n     b.iter(|| {slice::from_elem(1024, 0u64);} );\n     b.bytes = 1024 * 8;\n }\n@@ -249,11 +249,11 @@ it entirely.\n ~~~\n # #[allow(unused_imports)];\n extern crate test;\n-use test::BenchHarness;\n+use test::Bencher;\n \n #[bench]\n-fn bench_xor_1000_ints(bh: &mut BenchHarness) {\n-    bh.iter(|| {\n+fn bench_xor_1000_ints(b: &mut Bencher) {\n+    b.iter(|| {\n             range(0, 1000).fold(0, |old, new| old ^ new);\n         });\n }"}, {"sha": "869ff67658d1af5d352cb40f67bec09567867943", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -481,9 +481,7 @@ impl<T> Drop for TypedArena<T> {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-\n-\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::{Arena, TypedArena};\n \n     struct Point {\n@@ -505,9 +503,9 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_copy(bh: &mut BenchHarness) {\n+    pub fn bench_copy(b: &mut Bencher) {\n         let arena = TypedArena::new();\n-        bh.iter(|| {\n+        b.iter(|| {\n             arena.alloc(Point {\n                 x: 1,\n                 y: 2,\n@@ -517,8 +515,8 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_copy_nonarena(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    pub fn bench_copy_nonarena(b: &mut Bencher) {\n+        b.iter(|| {\n             ~Point {\n                 x: 1,\n                 y: 2,\n@@ -528,9 +526,9 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_copy_old_arena(bh: &mut BenchHarness) {\n+    pub fn bench_copy_old_arena(b: &mut Bencher) {\n         let arena = Arena::new();\n-        bh.iter(|| {\n+        b.iter(|| {\n             arena.alloc(|| {\n                 Point {\n                     x: 1,\n@@ -558,9 +556,9 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_noncopy(bh: &mut BenchHarness) {\n+    pub fn bench_noncopy(b: &mut Bencher) {\n         let arena = TypedArena::new();\n-        bh.iter(|| {\n+        b.iter(|| {\n             arena.alloc(Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n@@ -569,8 +567,8 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_noncopy_nonarena(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    pub fn bench_noncopy_nonarena(b: &mut Bencher) {\n+        b.iter(|| {\n             ~Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),\n@@ -579,9 +577,9 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_noncopy_old_arena(bh: &mut BenchHarness) {\n+    pub fn bench_noncopy_old_arena(b: &mut Bencher) {\n         let arena = Arena::new();\n-        bh.iter(|| {\n+        b.iter(|| {\n             arena.alloc(|| Noncopy {\n                 string: ~\"hello world\",\n                 array: vec!( 1, 2, 3, 4, 5 ),"}, {"sha": "c39914fc993fe7f21dd3fcfbc707681d57aead36", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -940,7 +940,7 @@ impl<'a> Iterator<uint> for BitPositions<'a> {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n                from_bytes};\n@@ -1557,7 +1557,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_uint_small(b: &mut BenchHarness) {\n+    fn bench_uint_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = 0 as uint;\n         b.iter(|| {\n@@ -1567,7 +1567,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_small_bitv_small(b: &mut BenchHarness) {\n+    fn bench_small_bitv_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = SmallBitv::new(uint::BITS);\n         b.iter(|| {\n@@ -1577,7 +1577,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_big_bitv_small(b: &mut BenchHarness) {\n+    fn bench_big_bitv_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = BigBitv::new(vec!(0));\n         b.iter(|| {\n@@ -1587,7 +1587,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_big_bitv_big(b: &mut BenchHarness) {\n+    fn bench_big_bitv_big(b: &mut Bencher) {\n         let mut r = rng();\n         let mut storage = vec!();\n         storage.grow(BENCH_BITS / uint::BITS, &0u);\n@@ -1599,7 +1599,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_big(b: &mut BenchHarness) {\n+    fn bench_bitv_big(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = Bitv::new(BENCH_BITS, false);\n         b.iter(|| {\n@@ -1609,7 +1609,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_small(b: &mut BenchHarness) {\n+    fn bench_bitv_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = Bitv::new(uint::BITS, false);\n         b.iter(|| {\n@@ -1619,7 +1619,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_set_small(b: &mut BenchHarness) {\n+    fn bench_bitv_set_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n@@ -1629,7 +1629,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_set_big(b: &mut BenchHarness) {\n+    fn bench_bitv_set_big(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n@@ -1639,7 +1639,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_big_union(b: &mut BenchHarness) {\n+    fn bench_bitv_big_union(b: &mut Bencher) {\n         let mut b1 = Bitv::new(BENCH_BITS, false);\n         let b2 = Bitv::new(BENCH_BITS, false);\n         b.iter(|| {\n@@ -1648,7 +1648,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_btv_small_iter(b: &mut BenchHarness) {\n+    fn bench_btv_small_iter(b: &mut Bencher) {\n         let bitv = Bitv::new(uint::BITS, false);\n         b.iter(|| {\n             let mut _sum = 0;\n@@ -1659,7 +1659,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_big_iter(b: &mut BenchHarness) {\n+    fn bench_bitv_big_iter(b: &mut Bencher) {\n         let bitv = Bitv::new(BENCH_BITS, false);\n         b.iter(|| {\n             let mut _sum = 0;\n@@ -1670,7 +1670,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitvset_iter(b: &mut BenchHarness) {\n+    fn bench_bitvset_iter(b: &mut Bencher) {\n         let bitv = BitvSet::from_bitv(from_fn(BENCH_BITS,\n                                               |idx| {idx % 3 == 0}));\n         b.iter(|| {"}, {"sha": "e031b07f87296829973100303c09d68bc9d036b0", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -42,14 +42,14 @@ pub trait Deque<T> : Mutable {\n #[cfg(test)]\n pub mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use std::container::MutableMap;\n     use rand;\n     use rand::Rng;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,\n-                                                  bh: &mut BenchHarness) {\n+                                                  b: &mut Bencher) {\n         // setup\n         let mut rng = rand::weak_rng();\n \n@@ -59,7 +59,7 @@ pub mod bench {\n         }\n \n         // measure\n-        bh.iter(|| {\n+        b.iter(|| {\n             let k = rng.gen::<uint>() % n;\n             map.insert(k, 1);\n             map.remove(&k);\n@@ -68,7 +68,7 @@ pub mod bench {\n \n     pub fn insert_seq_n<M:MutableMap<uint,uint>>(n: uint,\n                                                  map: &mut M,\n-                                                 bh: &mut BenchHarness) {\n+                                                 b: &mut Bencher) {\n         // setup\n         map.clear();\n         for i in range(0u, n) {\n@@ -77,7 +77,7 @@ pub mod bench {\n \n         // measure\n         let mut i = 1;\n-        bh.iter(|| {\n+        b.iter(|| {\n             map.insert(i, 1);\n             map.remove(&i);\n             i = (i + 2) % n;\n@@ -86,7 +86,7 @@ pub mod bench {\n \n     pub fn find_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                 map: &mut M,\n-                                                bh: &mut BenchHarness) {\n+                                                b: &mut Bencher) {\n         // setup\n         let mut rng = rand::weak_rng();\n         let mut keys = Vec::from_fn(n, |_| rng.gen::<uint>() % n);\n@@ -99,23 +99,23 @@ pub mod bench {\n \n         // measure\n         let mut i = 0;\n-        bh.iter(|| {\n+        b.iter(|| {\n             map.find(keys.get(i));\n             i = (i + 1) % n;\n         })\n     }\n \n     pub fn find_seq_n<M:MutableMap<uint,uint>>(n: uint,\n                                                map: &mut M,\n-                                               bh: &mut BenchHarness) {\n+                                               b: &mut Bencher) {\n         // setup\n         for i in range(0u, n) {\n             map.insert(i, 1);\n         }\n \n         // measure\n         let mut i = 0;\n-        bh.iter(|| {\n+        b.iter(|| {\n             let x = map.find(&i);\n             i = (i + 1) % n;\n             x"}, {"sha": "eb5f21697078e00001f07e9d01f86374ce3450a9", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -631,7 +631,7 @@ impl<A: Clone> Clone for DList<A> {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use deque::Deque;\n     use rand;\n     use super::{DList, Node, ListInsertion};\n@@ -1082,31 +1082,31 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_collect_into(b: &mut test::BenchHarness) {\n+    fn bench_collect_into(b: &mut test::Bencher) {\n         let v = &[0, ..64];\n         b.iter(|| {\n             let _: DList<int> = v.iter().map(|x| *x).collect();\n         })\n     }\n \n     #[bench]\n-    fn bench_push_front(b: &mut test::BenchHarness) {\n+    fn bench_push_front(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n             m.push_front(0);\n         })\n     }\n \n     #[bench]\n-    fn bench_push_back(b: &mut test::BenchHarness) {\n+    fn bench_push_back(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n             m.push_back(0);\n         })\n     }\n \n     #[bench]\n-    fn bench_push_back_pop_back(b: &mut test::BenchHarness) {\n+    fn bench_push_back_pop_back(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n             m.push_back(0);\n@@ -1115,7 +1115,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_push_front_pop_front(b: &mut test::BenchHarness) {\n+    fn bench_push_front_pop_front(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         b.iter(|| {\n             m.push_front(0);\n@@ -1124,7 +1124,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_rotate_forward(b: &mut test::BenchHarness) {\n+    fn bench_rotate_forward(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         m.push_front(0);\n         m.push_front(1);\n@@ -1134,7 +1134,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_rotate_backward(b: &mut test::BenchHarness) {\n+    fn bench_rotate_backward(b: &mut test::Bencher) {\n         let mut m: DList<int> = DList::new();\n         m.push_front(0);\n         m.push_front(1);\n@@ -1144,31 +1144,31 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_iter(b: &mut test::BenchHarness) {\n+    fn bench_iter(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().len() == 128);\n         })\n     }\n     #[bench]\n-    fn bench_iter_mut(b: &mut test::BenchHarness) {\n+    fn bench_iter_mut(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.mut_iter().len() == 128);\n         })\n     }\n     #[bench]\n-    fn bench_iter_rev(b: &mut test::BenchHarness) {\n+    fn bench_iter_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.rev_iter().len() == 128);\n         })\n     }\n     #[bench]\n-    fn bench_iter_mut_rev(b: &mut test::BenchHarness) {\n+    fn bench_iter_mut_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {"}, {"sha": "a2413d78e5fe04d7936f2efbc0e69d1a139b4dc2", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -2246,11 +2246,11 @@ mod test_set {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use std::iter::{range_inclusive};\n \n     #[bench]\n-    fn insert(b: &mut BenchHarness) {\n+    fn insert(b: &mut Bencher) {\n         use super::HashMap;\n \n         let mut m = HashMap::new();\n@@ -2268,7 +2268,7 @@ mod bench {\n     }\n \n     #[bench]\n-    fn find_existing(b: &mut BenchHarness) {\n+    fn find_existing(b: &mut Bencher) {\n         use super::HashMap;\n \n         let mut m = HashMap::new();\n@@ -2283,7 +2283,7 @@ mod bench {\n     }\n \n     #[bench]\n-    fn find_nonexisting(b: &mut BenchHarness) {\n+    fn find_nonexisting(b: &mut Bencher) {\n         use super::HashMap;\n \n         let mut m = HashMap::new();\n@@ -2298,7 +2298,7 @@ mod bench {\n     }\n \n     #[bench]\n-    fn hashmap_as_queue(b: &mut BenchHarness) {\n+    fn hashmap_as_queue(b: &mut Bencher) {\n         use super::HashMap;\n \n         let mut m = HashMap::new();\n@@ -2317,7 +2317,7 @@ mod bench {\n     }\n \n     #[bench]\n-    fn find_pop_insert(b: &mut BenchHarness) {\n+    fn find_pop_insert(b: &mut Bencher) {\n         use super::HashMap;\n \n         let mut m = HashMap::new();"}, {"sha": "19dc2d2ae583b30937a5e4c1c46ecf7a34e54dee", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -404,7 +404,7 @@ impl<A> Extendable<A> for RingBuf<A> {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use deque::Deque;\n     use std::clone::Clone;\n     use std::cmp::Eq;\n@@ -546,30 +546,30 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_new(b: &mut test::BenchHarness) {\n+    fn bench_new(b: &mut test::Bencher) {\n         b.iter(|| {\n             let _: RingBuf<u64> = RingBuf::new();\n         })\n     }\n \n     #[bench]\n-    fn bench_push_back(b: &mut test::BenchHarness) {\n+    fn bench_push_back(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n             deq.push_back(0);\n         })\n     }\n \n     #[bench]\n-    fn bench_push_front(b: &mut test::BenchHarness) {\n+    fn bench_push_front(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n             deq.push_front(0);\n         })\n     }\n \n     #[bench]\n-    fn bench_grow(b: &mut test::BenchHarness) {\n+    fn bench_grow(b: &mut test::Bencher) {\n         let mut deq = RingBuf::new();\n         b.iter(|| {\n             for _ in range(0, 65) {"}, {"sha": "6d7100aa4044454d454b1415d0f5fe8c057bb0e7", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -476,59 +476,59 @@ mod test_map {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::SmallIntMap;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq\n     #[bench]\n-    pub fn insert_rand_100(bh: &mut BenchHarness) {\n+    pub fn insert_rand_100(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        insert_rand_n(100, &mut m, bh);\n+        insert_rand_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn insert_rand_10_000(bh: &mut BenchHarness) {\n+    pub fn insert_rand_10_000(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        insert_rand_n(10_000, &mut m, bh);\n+        insert_rand_n(10_000, &mut m, b);\n     }\n \n     // Insert seq\n     #[bench]\n-    pub fn insert_seq_100(bh: &mut BenchHarness) {\n+    pub fn insert_seq_100(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        insert_seq_n(100, &mut m, bh);\n+        insert_seq_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn insert_seq_10_000(bh: &mut BenchHarness) {\n+    pub fn insert_seq_10_000(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        insert_seq_n(10_000, &mut m, bh);\n+        insert_seq_n(10_000, &mut m, b);\n     }\n \n     // Find rand\n     #[bench]\n-    pub fn find_rand_100(bh: &mut BenchHarness) {\n+    pub fn find_rand_100(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        find_rand_n(100, &mut m, bh);\n+        find_rand_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn find_rand_10_000(bh: &mut BenchHarness) {\n+    pub fn find_rand_10_000(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        find_rand_n(10_000, &mut m, bh);\n+        find_rand_n(10_000, &mut m, b);\n     }\n \n     // Find seq\n     #[bench]\n-    pub fn find_seq_100(bh: &mut BenchHarness) {\n+    pub fn find_seq_100(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        find_seq_n(100, &mut m, bh);\n+        find_seq_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn find_seq_10_000(bh: &mut BenchHarness) {\n+    pub fn find_seq_10_000(b: &mut Bencher) {\n         let mut m : SmallIntMap<uint> = SmallIntMap::new();\n-        find_seq_n(10_000, &mut m, bh);\n+        find_seq_n(10_000, &mut m, b);\n     }\n }"}, {"sha": "d964e73f69620654ebe3fd4533aa467747d31225", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -1428,60 +1428,60 @@ mod test_treemap {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::TreeMap;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq\n     #[bench]\n-    pub fn insert_rand_100(bh: &mut BenchHarness) {\n+    pub fn insert_rand_100(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        insert_rand_n(100, &mut m, bh);\n+        insert_rand_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn insert_rand_10_000(bh: &mut BenchHarness) {\n+    pub fn insert_rand_10_000(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        insert_rand_n(10_000, &mut m, bh);\n+        insert_rand_n(10_000, &mut m, b);\n     }\n \n     // Insert seq\n     #[bench]\n-    pub fn insert_seq_100(bh: &mut BenchHarness) {\n+    pub fn insert_seq_100(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        insert_seq_n(100, &mut m, bh);\n+        insert_seq_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn insert_seq_10_000(bh: &mut BenchHarness) {\n+    pub fn insert_seq_10_000(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        insert_seq_n(10_000, &mut m, bh);\n+        insert_seq_n(10_000, &mut m, b);\n     }\n \n     // Find rand\n     #[bench]\n-    pub fn find_rand_100(bh: &mut BenchHarness) {\n+    pub fn find_rand_100(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        find_rand_n(100, &mut m, bh);\n+        find_rand_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn find_rand_10_000(bh: &mut BenchHarness) {\n+    pub fn find_rand_10_000(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        find_rand_n(10_000, &mut m, bh);\n+        find_rand_n(10_000, &mut m, b);\n     }\n \n     // Find seq\n     #[bench]\n-    pub fn find_seq_100(bh: &mut BenchHarness) {\n+    pub fn find_seq_100(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        find_seq_n(100, &mut m, bh);\n+        find_seq_n(100, &mut m, b);\n     }\n \n     #[bench]\n-    pub fn find_seq_10_000(bh: &mut BenchHarness) {\n+    pub fn find_seq_10_000(b: &mut Bencher) {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n-        find_seq_n(10_000, &mut m, bh);\n+        find_seq_n(10_000, &mut m, b);\n     }\n }\n "}, {"sha": "e831b394b9c23157b88951d5fa64e082665bc91d", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -913,77 +913,77 @@ mod bench_map {\n     extern crate test;\n     use super::TrieMap;\n     use rand::{weak_rng, Rng};\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     #[bench]\n-    fn bench_iter_small(bh: &mut BenchHarness) {\n+    fn bench_iter_small(b: &mut Bencher) {\n         let mut m = TrieMap::<uint>::new();\n         let mut rng = weak_rng();\n         for _ in range(0, 20) {\n             m.insert(rng.gen(), rng.gen());\n         }\n \n-        bh.iter(|| for _ in m.iter() {})\n+        b.iter(|| for _ in m.iter() {})\n     }\n \n     #[bench]\n-    fn bench_iter_large(bh: &mut BenchHarness) {\n+    fn bench_iter_large(b: &mut Bencher) {\n         let mut m = TrieMap::<uint>::new();\n         let mut rng = weak_rng();\n         for _ in range(0, 1000) {\n             m.insert(rng.gen(), rng.gen());\n         }\n \n-        bh.iter(|| for _ in m.iter() {})\n+        b.iter(|| for _ in m.iter() {})\n     }\n \n     #[bench]\n-    fn bench_lower_bound(bh: &mut BenchHarness) {\n+    fn bench_lower_bound(b: &mut Bencher) {\n         let mut m = TrieMap::<uint>::new();\n         let mut rng = weak_rng();\n         for _ in range(0, 1000) {\n             m.insert(rng.gen(), rng.gen());\n         }\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 10) {\n                     m.lower_bound(rng.gen());\n                 }\n             });\n     }\n \n     #[bench]\n-    fn bench_upper_bound(bh: &mut BenchHarness) {\n+    fn bench_upper_bound(b: &mut Bencher) {\n         let mut m = TrieMap::<uint>::new();\n         let mut rng = weak_rng();\n         for _ in range(0, 1000) {\n             m.insert(rng.gen(), rng.gen());\n         }\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 10) {\n                     m.upper_bound(rng.gen());\n                 }\n             });\n     }\n \n     #[bench]\n-    fn bench_insert_large(bh: &mut BenchHarness) {\n+    fn bench_insert_large(b: &mut Bencher) {\n         let mut m = TrieMap::<[uint, .. 10]>::new();\n         let mut rng = weak_rng();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 1000) {\n                     m.insert(rng.gen(), [1, .. 10]);\n                 }\n             })\n     }\n     #[bench]\n-    fn bench_insert_large_low_bits(bh: &mut BenchHarness) {\n+    fn bench_insert_large_low_bits(b: &mut Bencher) {\n         let mut m = TrieMap::<[uint, .. 10]>::new();\n         let mut rng = weak_rng();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 1000) {\n                     // only have the last few bits set.\n                     m.insert(rng.gen::<uint>() & 0xff_ff, [1, .. 10]);\n@@ -992,22 +992,22 @@ mod bench_map {\n     }\n \n     #[bench]\n-    fn bench_insert_small(bh: &mut BenchHarness) {\n+    fn bench_insert_small(b: &mut Bencher) {\n         let mut m = TrieMap::<()>::new();\n         let mut rng = weak_rng();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 1000) {\n                     m.insert(rng.gen(), ());\n                 }\n             })\n     }\n     #[bench]\n-    fn bench_insert_small_low_bits(bh: &mut BenchHarness) {\n+    fn bench_insert_small_low_bits(b: &mut Bencher) {\n         let mut m = TrieMap::<()>::new();\n         let mut rng = weak_rng();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n                 for _ in range(0, 1000) {\n                     // only have the last few bits set.\n                     m.insert(rng.gen::<uint>() & 0xff_ff, ());"}, {"sha": "781cc92ead29aa93d9c28f84c7a0e2111401e5f5", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -2742,7 +2742,7 @@ mod bigint_tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::BigUint;\n     use std::iter;\n     use std::mem::replace;\n@@ -2767,35 +2767,35 @@ mod bench {\n     }\n \n     #[bench]\n-    fn factorial_100(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn factorial_100(b: &mut Bencher) {\n+        b.iter(|| {\n             factorial(100);\n         });\n     }\n \n     #[bench]\n-    fn fib_100(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn fib_100(b: &mut Bencher) {\n+        b.iter(|| {\n             fib(100);\n         });\n     }\n \n     #[bench]\n-    fn to_str(bh: &mut BenchHarness) {\n+    fn to_str(b: &mut Bencher) {\n         let fac = factorial(100);\n         let fib = fib(100);\n-        bh.iter(|| {\n+        b.iter(|| {\n             fac.to_str();\n         });\n-        bh.iter(|| {\n+        b.iter(|| {\n             fib.to_str();\n         });\n     }\n \n     #[bench]\n-    fn shr(bh: &mut BenchHarness) {\n+    fn shr(b: &mut Bencher) {\n         let n = { let one : BigUint = One::one(); one << 1000 };\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut m = n.clone();\n             for _ in range(0, 10) {\n                 m = m >> 1;"}, {"sha": "05d0160cfe9dc3f119e7d78713a9bd01e594a9e6", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -118,22 +118,22 @@ mod test {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use std::mem::size_of;\n     use {XorShiftRng, RAND_BENCH_N};\n     use super::Exp;\n     use distributions::Sample;\n \n     #[bench]\n-    fn rand_exp(bh: &mut BenchHarness) {\n+    fn rand_exp(b: &mut Bencher) {\n         let mut rng = XorShiftRng::new().unwrap();\n         let mut exp = Exp::new(2.71828 * 3.14159);\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 exp.sample(&mut rng);\n             }\n         });\n-        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "6ec8411495a53f80ff3dce78d932f051bbe72ff7", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -366,36 +366,36 @@ mod test {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use std::mem::size_of;\n     use distributions::IndependentSample;\n     use {XorShiftRng, RAND_BENCH_N};\n     use super::Gamma;\n \n \n     #[bench]\n-    fn bench_gamma_large_shape(bh: &mut BenchHarness) {\n+    fn bench_gamma_large_shape(b: &mut Bencher) {\n         let gamma = Gamma::new(10., 1.0);\n         let mut rng = XorShiftRng::new().unwrap();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n         });\n-        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n-    fn bench_gamma_small_shape(bh: &mut BenchHarness) {\n+    fn bench_gamma_small_shape(b: &mut Bencher) {\n         let gamma = Gamma::new(0.1, 1.0);\n         let mut rng = XorShiftRng::new().unwrap();\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n         });\n-        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "5755ad00223eb63b2ead076fd859f032e4f3e5ce", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -185,22 +185,22 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use std::mem::size_of;\n     use {XorShiftRng, RAND_BENCH_N};\n     use distributions::{Sample};\n     use super::Normal;\n \n     #[bench]\n-    fn rand_normal(bh: &mut BenchHarness) {\n+    fn rand_normal(b: &mut Bencher) {\n         let mut rng = XorShiftRng::new().unwrap();\n         let mut normal = Normal::new(-2.71828, 3.14159);\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 normal.sample(&mut rng);\n             }\n         });\n-        bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "237030f365dd5e157b306349d811d68700caf7e9", "filename": "src/librand/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -883,59 +883,59 @@ static RAND_BENCH_N: u64 = 100;\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use {XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n     use std::mem::size_of;\n \n     #[bench]\n-    fn rand_xorshift(bh: &mut BenchHarness) {\n+    fn rand_xorshift(b: &mut Bencher) {\n         let mut rng = XorShiftRng::new().unwrap();\n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         });\n-        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n-    fn rand_isaac(bh: &mut BenchHarness) {\n+    fn rand_isaac(b: &mut Bencher) {\n         let mut rng = IsaacRng::new().unwrap();\n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         });\n-        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n-    fn rand_isaac64(bh: &mut BenchHarness) {\n+    fn rand_isaac64(b: &mut Bencher) {\n         let mut rng = Isaac64Rng::new().unwrap();\n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         });\n-        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n-    fn rand_std(bh: &mut BenchHarness) {\n+    fn rand_std(b: &mut Bencher) {\n         let mut rng = StdRng::new().unwrap();\n-        bh.iter(|| {\n+        b.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n         });\n-        bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n+        b.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n-    fn rand_shuffle_100(bh: &mut BenchHarness) {\n+    fn rand_shuffle_100(b: &mut Bencher) {\n         let mut rng = XorShiftRng::new().unwrap();\n         let x : &mut[uint] = [1,..100];\n-        bh.iter(|| {\n+        b.iter(|| {\n             rng.shuffle(x);\n         })\n     }"}, {"sha": "e36893f40e5ca9b982a84e1aabfec12b95dcdfa9", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -247,7 +247,7 @@ fn is_bench_fn(cx: &TestCtxt, i: @ast::Item) -> bool {\n     if has_bench_attr && !has_test_signature(i) {\n         let sess = cx.sess;\n         sess.span_err(i.span, \"functions used as benches must have signature \\\n-                      `fn(&mut BenchHarness) -> ()`\");\n+                      `fn(&mut Bencher) -> ()`\");\n     }\n \n     return has_bench_attr && has_test_signature(i);"}, {"sha": "17ea4d6b0b47563b089fbf29e0263e5be70e7afe", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -641,36 +641,36 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::{Sha256, FixedBuffer, Digest};\n \n     #[bench]\n-    pub fn sha256_10(bh: &mut BenchHarness) {\n+    pub fn sha256_10(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n         let bytes = [1u8, ..10];\n-        bh.iter(|| {\n+        b.iter(|| {\n             sh.input(bytes);\n         });\n-        bh.bytes = bytes.len() as u64;\n+        b.bytes = bytes.len() as u64;\n     }\n \n     #[bench]\n-    pub fn sha256_1k(bh: &mut BenchHarness) {\n+    pub fn sha256_1k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n         let bytes = [1u8, ..1024];\n-        bh.iter(|| {\n+        b.iter(|| {\n             sh.input(bytes);\n         });\n-        bh.bytes = bytes.len() as u64;\n+        b.bytes = bytes.len() as u64;\n     }\n \n     #[bench]\n-    pub fn sha256_64k(bh: &mut BenchHarness) {\n+    pub fn sha256_64k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n         let bytes = [1u8, ..65536];\n-        bh.iter(|| {\n+        b.iter(|| {\n             sh.input(bytes);\n         });\n-        bh.bytes = bytes.len() as u64;\n+        b.bytes = bytes.len() as u64;\n     }\n }"}, {"sha": "5a780b06e8a7c4e8c8679c0d0fe7c41e1141f38a", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -264,7 +264,7 @@ impl<'a> FromBase64 for &'a str {\n mod tests {\n     extern crate test;\n     extern crate rand;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use base64::{Config, FromBase64, ToBase64, STANDARD, URL_SAFE};\n \n     #[test]\n@@ -347,24 +347,24 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_to_base64(bh: & mut BenchHarness) {\n+    pub fn bench_to_base64(b: &mut Bencher) {\n         let s = \"\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0 \\\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n-        bh.iter(|| {\n+        b.iter(|| {\n             s.as_bytes().to_base64(STANDARD);\n         });\n-        bh.bytes = s.len() as u64;\n+        b.bytes = s.len() as u64;\n     }\n \n     #[bench]\n-    pub fn bench_from_base64(bh: & mut BenchHarness) {\n+    pub fn bench_from_base64(b: &mut Bencher) {\n         let s = \"\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0 \\\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n-        let b = s.as_bytes().to_base64(STANDARD);\n-        bh.iter(|| {\n-            b.from_base64().unwrap();\n+        let sb = s.as_bytes().to_base64(STANDARD);\n+        b.iter(|| {\n+            sb.from_base64().unwrap();\n         });\n-        bh.bytes = b.len() as u64;\n+        b.bytes = sb.len() as u64;\n     }\n \n }"}, {"sha": "9b2df307b9947665c44a7858b85a43cd465c836a", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -1094,11 +1094,11 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use ebml::reader;\n \n     #[bench]\n-    pub fn vuint_at_A_aligned(bh: &mut BenchHarness) {\n+    pub fn vuint_at_A_aligned(b: &mut Bencher) {\n         use std::slice;\n         let data = slice::from_fn(4*100, |i| {\n             match i % 2 {\n@@ -1107,7 +1107,7 @@ mod bench {\n             }\n         });\n         let mut sum = 0u;\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut i = 0;\n             while i < data.len() {\n                 sum += reader::vuint_at(data, i).unwrap().val;\n@@ -1117,7 +1117,7 @@ mod bench {\n     }\n \n     #[bench]\n-    pub fn vuint_at_A_unaligned(bh: &mut BenchHarness) {\n+    pub fn vuint_at_A_unaligned(b: &mut Bencher) {\n         use std::slice;\n         let data = slice::from_fn(4*100+1, |i| {\n             match i % 2 {\n@@ -1126,7 +1126,7 @@ mod bench {\n             }\n         });\n         let mut sum = 0u;\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut i = 1;\n             while i < data.len() {\n                 sum += reader::vuint_at(data, i).unwrap().val;\n@@ -1136,7 +1136,7 @@ mod bench {\n     }\n \n     #[bench]\n-    pub fn vuint_at_D_aligned(bh: &mut BenchHarness) {\n+    pub fn vuint_at_D_aligned(b: &mut Bencher) {\n         use std::slice;\n         let data = slice::from_fn(4*100, |i| {\n             match i % 4 {\n@@ -1146,7 +1146,7 @@ mod bench {\n             }\n         });\n         let mut sum = 0u;\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut i = 0;\n             while i < data.len() {\n                 sum += reader::vuint_at(data, i).unwrap().val;\n@@ -1156,7 +1156,7 @@ mod bench {\n     }\n \n     #[bench]\n-    pub fn vuint_at_D_unaligned(bh: &mut BenchHarness) {\n+    pub fn vuint_at_D_unaligned(b: &mut Bencher) {\n         use std::slice;\n         let data = slice::from_fn(4*100+1, |i| {\n             match i % 4 {\n@@ -1166,7 +1166,7 @@ mod bench {\n             }\n         });\n         let mut sum = 0u;\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut i = 1;\n             while i < data.len() {\n                 sum += reader::vuint_at(data, i).unwrap().val;"}, {"sha": "3584b19843bcd70a663de577779e5780efbb3df4", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -141,7 +141,7 @@ impl<'a> FromHex for &'a str {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use hex::{FromHex, ToHex};\n \n     #[test]\n@@ -190,23 +190,23 @@ mod tests {\n     }\n \n     #[bench]\n-    pub fn bench_to_hex(bh: & mut BenchHarness) {\n+    pub fn bench_to_hex(b: &mut Bencher) {\n         let s = \"\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0 \\\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n-        bh.iter(|| {\n+        b.iter(|| {\n             s.as_bytes().to_hex();\n         });\n-        bh.bytes = s.len() as u64;\n+        b.bytes = s.len() as u64;\n     }\n \n     #[bench]\n-    pub fn bench_from_hex(bh: & mut BenchHarness) {\n+    pub fn bench_from_hex(b: &mut Bencher) {\n         let s = \"\u30a4\u30ed\u30cf\u30cb\u30db\u30d8\u30c8 \u30c1\u30ea\u30cc\u30eb\u30f2 \u30ef\u30ab\u30e8\u30bf\u30ec\u30bd \u30c4\u30cd\u30ca\u30e9\u30e0 \\\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n-        let b = s.as_bytes().to_hex();\n-        bh.iter(|| {\n-            b.from_hex().unwrap();\n+        let sb = s.as_bytes().to_hex();\n+        b.iter(|| {\n+            sb.from_hex().unwrap();\n         });\n-        bh.bytes = b.len() as u64;\n+        b.bytes = sb.len() as u64;\n     }\n }"}, {"sha": "e204e082f4b73933ab625437132d319c98fc2300", "filename": "src/libstd/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -306,11 +306,11 @@ mod bench {\n \n     use any::{Any, AnyRefExt};\n     use option::Some;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     #[bench]\n-    fn bench_as_ref(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn bench_as_ref(b: &mut Bencher) {\n+        b.iter(|| {\n             let mut x = 0; let mut y = &mut x as &mut Any;\n             test::black_box(&mut y);\n             test::black_box(y.as_ref::<int>() == Some(&0));"}, {"sha": "a7234eeb1d5fbaa83fe5ba413993454777c58263", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -670,7 +670,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use libc;\n     use prelude::*;\n \n@@ -696,91 +696,91 @@ mod bench {\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\";\n \n-    fn bench_to_str(bh: &mut BenchHarness, s: &str) {\n-        bh.iter(|| {\n+    fn bench_to_str(b: &mut Bencher, s: &str) {\n+        b.iter(|| {\n             let c_str = s.to_c_str();\n             c_str.with_ref(|c_str_buf| check(s, c_str_buf))\n         })\n     }\n \n     #[bench]\n-    fn bench_to_c_str_short(bh: &mut BenchHarness) {\n-        bench_to_str(bh, s_short)\n+    fn bench_to_c_str_short(b: &mut Bencher) {\n+        bench_to_str(b, s_short)\n     }\n \n     #[bench]\n-    fn bench_to_c_str_medium(bh: &mut BenchHarness) {\n-        bench_to_str(bh, s_medium)\n+    fn bench_to_c_str_medium(b: &mut Bencher) {\n+        bench_to_str(b, s_medium)\n     }\n \n     #[bench]\n-    fn bench_to_c_str_long(bh: &mut BenchHarness) {\n-        bench_to_str(bh, s_long)\n+    fn bench_to_c_str_long(b: &mut Bencher) {\n+        bench_to_str(b, s_long)\n     }\n \n-    fn bench_to_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n-        bh.iter(|| {\n+    fn bench_to_c_str_unchecked(b: &mut Bencher, s: &str) {\n+        b.iter(|| {\n             let c_str = unsafe { s.to_c_str_unchecked() };\n             c_str.with_ref(|c_str_buf| check(s, c_str_buf))\n         })\n     }\n \n     #[bench]\n-    fn bench_to_c_str_unchecked_short(bh: &mut BenchHarness) {\n-        bench_to_c_str_unchecked(bh, s_short)\n+    fn bench_to_c_str_unchecked_short(b: &mut Bencher) {\n+        bench_to_c_str_unchecked(b, s_short)\n     }\n \n     #[bench]\n-    fn bench_to_c_str_unchecked_medium(bh: &mut BenchHarness) {\n-        bench_to_c_str_unchecked(bh, s_medium)\n+    fn bench_to_c_str_unchecked_medium(b: &mut Bencher) {\n+        bench_to_c_str_unchecked(b, s_medium)\n     }\n \n     #[bench]\n-    fn bench_to_c_str_unchecked_long(bh: &mut BenchHarness) {\n-        bench_to_c_str_unchecked(bh, s_long)\n+    fn bench_to_c_str_unchecked_long(b: &mut Bencher) {\n+        bench_to_c_str_unchecked(b, s_long)\n     }\n \n-    fn bench_with_c_str(bh: &mut BenchHarness, s: &str) {\n-        bh.iter(|| {\n+    fn bench_with_c_str(b: &mut Bencher, s: &str) {\n+        b.iter(|| {\n             s.with_c_str(|c_str_buf| check(s, c_str_buf))\n         })\n     }\n \n     #[bench]\n-    fn bench_with_c_str_short(bh: &mut BenchHarness) {\n-        bench_with_c_str(bh, s_short)\n+    fn bench_with_c_str_short(b: &mut Bencher) {\n+        bench_with_c_str(b, s_short)\n     }\n \n     #[bench]\n-    fn bench_with_c_str_medium(bh: &mut BenchHarness) {\n-        bench_with_c_str(bh, s_medium)\n+    fn bench_with_c_str_medium(b: &mut Bencher) {\n+        bench_with_c_str(b, s_medium)\n     }\n \n     #[bench]\n-    fn bench_with_c_str_long(bh: &mut BenchHarness) {\n-        bench_with_c_str(bh, s_long)\n+    fn bench_with_c_str_long(b: &mut Bencher) {\n+        bench_with_c_str(b, s_long)\n     }\n \n-    fn bench_with_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n-        bh.iter(|| {\n+    fn bench_with_c_str_unchecked(b: &mut Bencher, s: &str) {\n+        b.iter(|| {\n             unsafe {\n                 s.with_c_str_unchecked(|c_str_buf| check(s, c_str_buf))\n             }\n         })\n     }\n \n     #[bench]\n-    fn bench_with_c_str_unchecked_short(bh: &mut BenchHarness) {\n-        bench_with_c_str_unchecked(bh, s_short)\n+    fn bench_with_c_str_unchecked_short(b: &mut Bencher) {\n+        bench_with_c_str_unchecked(b, s_short)\n     }\n \n     #[bench]\n-    fn bench_with_c_str_unchecked_medium(bh: &mut BenchHarness) {\n-        bench_with_c_str_unchecked(bh, s_medium)\n+    fn bench_with_c_str_unchecked_medium(b: &mut Bencher) {\n+        bench_with_c_str_unchecked(b, s_medium)\n     }\n \n     #[bench]\n-    fn bench_with_c_str_unchecked_long(bh: &mut BenchHarness) {\n-        bench_with_c_str_unchecked(bh, s_long)\n+    fn bench_with_c_str_unchecked_long(b: &mut Bencher) {\n+        bench_with_c_str_unchecked(b, s_long)\n     }\n }"}, {"sha": "88b21f1f87b9e92406c7cfe608dfbb82854f9ee7", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -394,74 +394,74 @@ mod bench {\n     extern crate test;\n \n     mod uint {\n-        use super::test::BenchHarness;\n+        use super::test::Bencher;\n         use fmt::radix;\n         use rand::{XorShiftRng, Rng};\n \n         #[bench]\n-        fn format_bin(bh: &mut BenchHarness) {\n+        fn format_bin(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:t}\", rng.gen::<uint>()); })\n+            b.iter(|| { format!(\"{:t}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n-        fn format_oct(bh: &mut BenchHarness) {\n+        fn format_oct(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:o}\", rng.gen::<uint>()); })\n+            b.iter(|| { format!(\"{:o}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n-        fn format_dec(bh: &mut BenchHarness) {\n+        fn format_dec(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:u}\", rng.gen::<uint>()); })\n+            b.iter(|| { format!(\"{:u}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n-        fn format_hex(bh: &mut BenchHarness) {\n+        fn format_hex(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:x}\", rng.gen::<uint>()); })\n+            b.iter(|| { format!(\"{:x}\", rng.gen::<uint>()); })\n         }\n \n         #[bench]\n-        fn format_base_36(bh: &mut BenchHarness) {\n+        fn format_base_36(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{}\", radix(rng.gen::<uint>(), 36)); })\n+            b.iter(|| { format!(\"{}\", radix(rng.gen::<uint>(), 36)); })\n         }\n     }\n \n     mod int {\n-        use super::test::BenchHarness;\n+        use super::test::Bencher;\n         use fmt::radix;\n         use rand::{XorShiftRng, Rng};\n \n         #[bench]\n-        fn format_bin(bh: &mut BenchHarness) {\n+        fn format_bin(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:t}\", rng.gen::<int>()); })\n+            b.iter(|| { format!(\"{:t}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n-        fn format_oct(bh: &mut BenchHarness) {\n+        fn format_oct(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:o}\", rng.gen::<int>()); })\n+            b.iter(|| { format!(\"{:o}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n-        fn format_dec(bh: &mut BenchHarness) {\n+        fn format_dec(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:d}\", rng.gen::<int>()); })\n+            b.iter(|| { format!(\"{:d}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n-        fn format_hex(bh: &mut BenchHarness) {\n+        fn format_hex(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{:x}\", rng.gen::<int>()); })\n+            b.iter(|| { format!(\"{:x}\", rng.gen::<int>()); })\n         }\n \n         #[bench]\n-        fn format_base_36(bh: &mut BenchHarness) {\n+        fn format_base_36(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { format!(\"{}\", radix(rng.gen::<int>(), 36)); })\n+            b.iter(|| { format!(\"{}\", radix(rng.gen::<int>(), 36)); })\n         }\n     }\n }"}, {"sha": "63844fcd414b4744a9f56ed1df6e6537f340aece", "filename": "src/libstd/hash/sip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fsip.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -294,7 +294,7 @@ mod tests {\n     use str::Str;\n     use strbuf::StrBuf;\n     use slice::{Vector, ImmutableVector, OwnedVector};\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     use super::super::Hash;\n     use super::{SipState, hash, hash_with_keys};\n@@ -517,9 +517,9 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_str(bh: &mut BenchHarness) {\n+    fn bench_str(b: &mut Bencher) {\n         let s = \"foo\";\n-        bh.iter(|| {\n+        b.iter(|| {\n             assert_eq!(hash(&s), 16262950014981195938);\n         })\n     }\n@@ -540,13 +540,13 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_compound_1(bh: &mut BenchHarness) {\n+    fn bench_compound_1(b: &mut Bencher) {\n         let compound = Compound {\n             x: 1,\n             y: 2,\n             z: ~\"foobarbaz\",\n         };\n-        bh.iter(|| {\n+        b.iter(|| {\n             assert_eq!(hash(&compound), 3581836382593270478);\n         })\n     }"}, {"sha": "8fe7f0ca595eddd5c6928012ae56b95fa7aa0a6b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -371,7 +371,7 @@ mod test {\n     use prelude::*;\n     use super::*;\n     use super::super::mem::{MemReader, MemWriter, BufReader};\n-    use Harness = self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     /// A type, free to create, primarily intended for benchmarking creation of\n     /// wrappers that, just for construction, don't need a Reader/Writer that\n@@ -584,22 +584,22 @@ mod test {\n     }\n \n     #[bench]\n-    fn bench_buffered_reader(bh: &mut Harness) {\n-        bh.iter(|| {\n+    fn bench_buffered_reader(b: &mut Bencher) {\n+        b.iter(|| {\n             BufferedReader::new(NullStream)\n         });\n     }\n \n     #[bench]\n-    fn bench_buffered_writer(bh: &mut Harness) {\n-        bh.iter(|| {\n+    fn bench_buffered_writer(b: &mut Bencher) {\n+        b.iter(|| {\n             BufferedWriter::new(NullStream)\n         });\n     }\n \n     #[bench]\n-    fn bench_buffered_stream(bh: &mut Harness) {\n-        bh.iter(|| {\n+    fn bench_buffered_stream(b: &mut Bencher) {\n+        b.iter(|| {\n             BufferedStream::new(NullStream);\n         });\n     }"}, {"sha": "b2202a13057495adea410f172d02f5436ab00c32", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -503,7 +503,7 @@ mod test {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use container::Container;\n \n     macro_rules! u64_from_be_bytes_bench_impl(\n@@ -514,7 +514,7 @@ mod bench {\n \n             let data = slice::from_fn($stride*100+$start_index, |i| i as u8);\n             let mut sum = 0u64;\n-            bh.iter(|| {\n+            b.iter(|| {\n                 let mut i = $start_index;\n                 while i < data.len() {\n                     sum += u64_from_be_bytes(data, i, $size);\n@@ -525,32 +525,32 @@ mod bench {\n     )\n \n     #[bench]\n-    fn u64_from_be_bytes_4_aligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_4_aligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(4, 4, 0);\n     }\n \n     #[bench]\n-    fn u64_from_be_bytes_4_unaligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_4_unaligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(4, 4, 1);\n     }\n \n     #[bench]\n-    fn u64_from_be_bytes_7_aligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_7_aligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(7, 8, 0);\n     }\n \n     #[bench]\n-    fn u64_from_be_bytes_7_unaligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_7_unaligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(7, 8, 1);\n     }\n \n     #[bench]\n-    fn u64_from_be_bytes_8_aligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_8_aligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(8, 8, 0);\n     }\n \n     #[bench]\n-    fn u64_from_be_bytes_8_unaligned(bh: &mut BenchHarness) {\n+    fn u64_from_be_bytes_8_unaligned(b: &mut Bencher) {\n         u64_from_be_bytes_bench_impl!(8, 8, 1);\n     }\n }"}, {"sha": "deefb3fe2ed0ae6175efe8c3bd68302148e5d51a", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -363,7 +363,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use option::{Some,None};\n \n     // Static/dynamic method dispatch\n@@ -383,28 +383,28 @@ mod bench {\n     }\n \n     #[bench]\n-    fn trait_vtable_method_call(bh: &mut BenchHarness) {\n+    fn trait_vtable_method_call(b: &mut Bencher) {\n         let s = Struct { field: 10 };\n         let t = &s as &Trait;\n-        bh.iter(|| {\n+        b.iter(|| {\n             t.method()\n         });\n     }\n \n     #[bench]\n-    fn trait_static_method_call(bh: &mut BenchHarness) {\n+    fn trait_static_method_call(b: &mut Bencher) {\n         let s = Struct { field: 10 };\n-        bh.iter(|| {\n+        b.iter(|| {\n             s.method()\n         });\n     }\n \n     // Overhead of various match forms\n \n     #[bench]\n-    fn match_option_some(bh: &mut BenchHarness) {\n+    fn match_option_some(b: &mut Bencher) {\n         let x = Some(10);\n-        bh.iter(|| {\n+        b.iter(|| {\n             match x {\n                 Some(y) => y,\n                 None => 11\n@@ -413,9 +413,9 @@ mod bench {\n     }\n \n     #[bench]\n-    fn match_vec_pattern(bh: &mut BenchHarness) {\n+    fn match_vec_pattern(b: &mut Bencher) {\n         let x = [1,2,3,4,5,6];\n-        bh.iter(|| {\n+        b.iter(|| {\n             match x {\n                 [1,2,3,..] => 10,\n                 _ => 11"}, {"sha": "52167fa58b9209a6c9cb433491bba31dbc41d9a3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -1773,13 +1773,13 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use num;\n     use slice;\n     use prelude::*;\n \n     #[bench]\n-    fn bench_pow_function(b: &mut BenchHarness) {\n+    fn bench_pow_function(b: &mut Bencher) {\n         let v = slice::from_fn(1024, |n| n);\n         b.iter(|| {v.iter().fold(0, |old, new| num::pow(old, *new));});\n     }"}, {"sha": "3ce9a3d0764dc707e03049967122b425b72a23ac", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -815,86 +815,86 @@ mod bench {\n     extern crate test;\n \n     mod uint {\n-        use super::test::BenchHarness;\n+        use super::test::Bencher;\n         use rand::{XorShiftRng, Rng};\n         use num::ToStrRadix;\n \n         #[bench]\n-        fn to_str_bin(bh: &mut BenchHarness) {\n+        fn to_str_bin(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<uint>().to_str_radix(2); })\n+            b.iter(|| { rng.gen::<uint>().to_str_radix(2); })\n         }\n \n         #[bench]\n-        fn to_str_oct(bh: &mut BenchHarness) {\n+        fn to_str_oct(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<uint>().to_str_radix(8); })\n+            b.iter(|| { rng.gen::<uint>().to_str_radix(8); })\n         }\n \n         #[bench]\n-        fn to_str_dec(bh: &mut BenchHarness) {\n+        fn to_str_dec(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<uint>().to_str_radix(10); })\n+            b.iter(|| { rng.gen::<uint>().to_str_radix(10); })\n         }\n \n         #[bench]\n-        fn to_str_hex(bh: &mut BenchHarness) {\n+        fn to_str_hex(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<uint>().to_str_radix(16); })\n+            b.iter(|| { rng.gen::<uint>().to_str_radix(16); })\n         }\n \n         #[bench]\n-        fn to_str_base_36(bh: &mut BenchHarness) {\n+        fn to_str_base_36(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<uint>().to_str_radix(36); })\n+            b.iter(|| { rng.gen::<uint>().to_str_radix(36); })\n         }\n     }\n \n     mod int {\n-        use super::test::BenchHarness;\n+        use super::test::Bencher;\n         use rand::{XorShiftRng, Rng};\n         use num::ToStrRadix;\n \n         #[bench]\n-        fn to_str_bin(bh: &mut BenchHarness) {\n+        fn to_str_bin(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<int>().to_str_radix(2); })\n+            b.iter(|| { rng.gen::<int>().to_str_radix(2); })\n         }\n \n         #[bench]\n-        fn to_str_oct(bh: &mut BenchHarness) {\n+        fn to_str_oct(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<int>().to_str_radix(8); })\n+            b.iter(|| { rng.gen::<int>().to_str_radix(8); })\n         }\n \n         #[bench]\n-        fn to_str_dec(bh: &mut BenchHarness) {\n+        fn to_str_dec(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<int>().to_str_radix(10); })\n+            b.iter(|| { rng.gen::<int>().to_str_radix(10); })\n         }\n \n         #[bench]\n-        fn to_str_hex(bh: &mut BenchHarness) {\n+        fn to_str_hex(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<int>().to_str_radix(16); })\n+            b.iter(|| { rng.gen::<int>().to_str_radix(16); })\n         }\n \n         #[bench]\n-        fn to_str_base_36(bh: &mut BenchHarness) {\n+        fn to_str_base_36(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { rng.gen::<int>().to_str_radix(36); })\n+            b.iter(|| { rng.gen::<int>().to_str_radix(36); })\n         }\n     }\n \n     mod f64 {\n-        use super::test::BenchHarness;\n+        use super::test::Bencher;\n         use rand::{XorShiftRng, Rng};\n         use f64;\n \n         #[bench]\n-        fn float_to_str(bh: &mut BenchHarness) {\n+        fn float_to_str(b: &mut Bencher) {\n             let mut rng = XorShiftRng::new().unwrap();\n-            bh.iter(|| { f64::to_str(rng.gen()); })\n+            b.iter(|| { f64::to_str(rng.gen()); })\n         }\n     }\n }"}, {"sha": "4c31face2e3e28041b4e0bba624e145eaa0e94b8", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -551,7 +551,7 @@ pub trait DerefMut<Result>: Deref<Result> {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use ops::Drop;\n \n     // Overhead of dtors\n@@ -566,8 +566,8 @@ mod bench {\n     }\n \n     #[bench]\n-    fn alloc_obj_with_dtor(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn alloc_obj_with_dtor(b: &mut Bencher) {\n+        b.iter(|| {\n             HasDtor { x : 10 };\n         })\n     }"}, {"sha": "69504a2ec8fca908320a2c2ecee0a3aa32056c53", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -1253,127 +1253,127 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::*;\n     use prelude::*;\n \n     #[bench]\n-    fn join_home_dir(bh: &mut BenchHarness) {\n+    fn join_home_dir(b: &mut Bencher) {\n         let posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.join(\"home\");\n         });\n     }\n \n     #[bench]\n-    fn join_abs_path_home_dir(bh: &mut BenchHarness) {\n+    fn join_abs_path_home_dir(b: &mut Bencher) {\n         let posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.join(\"/home\");\n         });\n     }\n \n     #[bench]\n-    fn join_many_home_dir(bh: &mut BenchHarness) {\n+    fn join_many_home_dir(b: &mut Bencher) {\n         let posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.join_many(&[\"home\"]);\n         });\n     }\n \n     #[bench]\n-    fn join_many_abs_path_home_dir(bh: &mut BenchHarness) {\n+    fn join_many_abs_path_home_dir(b: &mut Bencher) {\n         let posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.join_many(&[\"/home\"]);\n         });\n     }\n \n     #[bench]\n-    fn push_home_dir(bh: &mut BenchHarness) {\n+    fn push_home_dir(b: &mut Bencher) {\n         let mut posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.push(\"home\");\n         });\n     }\n \n     #[bench]\n-    fn push_abs_path_home_dir(bh: &mut BenchHarness) {\n+    fn push_abs_path_home_dir(b: &mut Bencher) {\n         let mut posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.push(\"/home\");\n         });\n     }\n \n     #[bench]\n-    fn push_many_home_dir(bh: &mut BenchHarness) {\n+    fn push_many_home_dir(b: &mut Bencher) {\n         let mut posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.push_many(&[\"home\"]);\n         });\n     }\n \n     #[bench]\n-    fn push_many_abs_path_home_dir(bh: &mut BenchHarness) {\n+    fn push_many_abs_path_home_dir(b: &mut Bencher) {\n         let mut posix_path = Path::new(\"/\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_path.push_many(&[\"/home\"]);\n         });\n     }\n \n     #[bench]\n-    fn ends_with_path_home_dir(bh: &mut BenchHarness) {\n+    fn ends_with_path_home_dir(b: &mut Bencher) {\n         let posix_home_path = Path::new(\"/home\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_home_path.ends_with_path(&Path::new(\"home\"));\n         });\n     }\n \n     #[bench]\n-    fn ends_with_path_missmatch_jome_home(bh: &mut BenchHarness) {\n+    fn ends_with_path_missmatch_jome_home(b: &mut Bencher) {\n         let posix_home_path = Path::new(\"/home\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             posix_home_path.ends_with_path(&Path::new(\"jome\"));\n         });\n     }\n \n     #[bench]\n-    fn is_ancestor_of_path_with_10_dirs(bh: &mut BenchHarness) {\n+    fn is_ancestor_of_path_with_10_dirs(b: &mut Bencher) {\n         let path = Path::new(\"/home/1/2/3/4/5/6/7/8/9\");\n         let mut sub = path.clone();\n         sub.pop();\n-        bh.iter(|| {\n+        b.iter(|| {\n             path.is_ancestor_of(&sub);\n         });\n     }\n \n     #[bench]\n-    fn path_relative_from_forward(bh: &mut BenchHarness) {\n+    fn path_relative_from_forward(b: &mut Bencher) {\n         let path = Path::new(\"/a/b/c\");\n         let mut other = path.clone();\n         other.pop();\n-        bh.iter(|| {\n+        b.iter(|| {\n             path.path_relative_from(&other);\n         });\n     }\n \n     #[bench]\n-    fn path_relative_from_same_level(bh: &mut BenchHarness) {\n+    fn path_relative_from_same_level(b: &mut Bencher) {\n         let path = Path::new(\"/a/b/c\");\n         let mut other = path.clone();\n         other.pop();\n         other.push(\"d\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             path.path_relative_from(&other);\n         });\n     }\n \n     #[bench]\n-    fn path_relative_from_backward(bh: &mut BenchHarness) {\n+    fn path_relative_from_backward(b: &mut Bencher) {\n         let path = Path::new(\"/a/b\");\n         let mut other = path.clone();\n         other.push(\"c\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             path.path_relative_from(&other);\n         });\n     }"}, {"sha": "01949a7057bc465ec8b08189536671aa738def0f", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -117,18 +117,18 @@ pub unsafe fn exchange_free(ptr: *u8) {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     #[bench]\n-    fn alloc_owned_small(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn alloc_owned_small(b: &mut Bencher) {\n+        b.iter(|| {\n             ~10\n         })\n     }\n \n     #[bench]\n-    fn alloc_owned_big(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn alloc_owned_big(b: &mut Bencher) {\n+        b.iter(|| {\n             ~[10, ..1000]\n         })\n     }"}, {"sha": "b9d0d82937473a1f6aa0996ddd28e9721d4a08af", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -326,15 +326,15 @@ pub fn live_allocs() -> *mut Box {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n \n     #[bench]\n-    fn alloc_managed_small(bh: &mut BenchHarness) {\n-        bh.iter(|| { @10; });\n+    fn alloc_managed_small(b: &mut Bencher) {\n+        b.iter(|| { @10; });\n     }\n \n     #[bench]\n-    fn alloc_managed_big(bh: &mut BenchHarness) {\n-        bh.iter(|| { @([10, ..1000]); });\n+    fn alloc_managed_big(b: &mut Bencher) {\n+        b.iter(|| { @([10, ..1000]); });\n     }\n }"}, {"sha": "28c5b56a7a7374ebffdd71c9e43e10513b9b4d17", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -4273,20 +4273,20 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use mem;\n     use prelude::*;\n     use ptr;\n     use rand::{weak_rng, Rng};\n     use slice;\n \n     #[bench]\n-    fn iterator(bh: &mut BenchHarness) {\n+    fn iterator(b: &mut Bencher) {\n         // peculiar numbers to stop LLVM from optimising the summation\n         // out.\n         let v = slice::from_fn(100, |i| i ^ (i << 1) ^ (i >> 1));\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut sum = 0;\n             for x in v.iter() {\n                 sum += *x;\n@@ -4297,10 +4297,10 @@ mod bench {\n     }\n \n     #[bench]\n-    fn mut_iterator(bh: &mut BenchHarness) {\n+    fn mut_iterator(b: &mut Bencher) {\n         let mut v = slice::from_elem(100, 0);\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut i = 0;\n             for x in v.mut_iter() {\n                 *x = i;\n@@ -4310,109 +4310,109 @@ mod bench {\n     }\n \n     #[bench]\n-    fn add(bh: &mut BenchHarness) {\n+    fn add(b: &mut Bencher) {\n         let xs: &[int] = [5, ..10];\n         let ys: &[int] = [5, ..10];\n-        bh.iter(|| {\n+        b.iter(|| {\n             xs + ys;\n         });\n     }\n \n     #[bench]\n-    fn concat(bh: &mut BenchHarness) {\n+    fn concat(b: &mut Bencher) {\n         let xss: &[~[uint]] = slice::from_fn(100, |i| range(0, i).collect());\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = xss.concat_vec();\n         });\n     }\n \n     #[bench]\n-    fn connect(bh: &mut BenchHarness) {\n+    fn connect(b: &mut Bencher) {\n         let xss: &[~[uint]] = slice::from_fn(100, |i| range(0, i).collect());\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = xss.connect_vec(&0);\n         });\n     }\n \n     #[bench]\n-    fn push(bh: &mut BenchHarness) {\n+    fn push(b: &mut Bencher) {\n         let mut vec: ~[uint] = ~[0u];\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.push(0);\n             &vec\n         })\n     }\n \n     #[bench]\n-    fn starts_with_same_vector(bh: &mut BenchHarness) {\n+    fn starts_with_same_vector(b: &mut Bencher) {\n         let vec: ~[uint] = slice::from_fn(100, |i| i);\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.starts_with(vec)\n         })\n     }\n \n     #[bench]\n-    fn starts_with_single_element(bh: &mut BenchHarness) {\n+    fn starts_with_single_element(b: &mut Bencher) {\n         let vec: ~[uint] = ~[0u];\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.starts_with(vec)\n         })\n     }\n \n     #[bench]\n-    fn starts_with_diff_one_element_at_end(bh: &mut BenchHarness) {\n+    fn starts_with_diff_one_element_at_end(b: &mut Bencher) {\n         let vec: ~[uint] = slice::from_fn(100, |i| i);\n         let mut match_vec: ~[uint] = slice::from_fn(99, |i| i);\n         match_vec.push(0);\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.starts_with(match_vec)\n         })\n     }\n \n     #[bench]\n-    fn ends_with_same_vector(bh: &mut BenchHarness) {\n+    fn ends_with_same_vector(b: &mut Bencher) {\n         let vec: ~[uint] = slice::from_fn(100, |i| i);\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.ends_with(vec)\n         })\n     }\n \n     #[bench]\n-    fn ends_with_single_element(bh: &mut BenchHarness) {\n+    fn ends_with_single_element(b: &mut Bencher) {\n         let vec: ~[uint] = ~[0u];\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.ends_with(vec)\n         })\n     }\n \n     #[bench]\n-    fn ends_with_diff_one_element_at_beginning(bh: &mut BenchHarness) {\n+    fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) {\n         let vec: ~[uint] = slice::from_fn(100, |i| i);\n         let mut match_vec: ~[uint] = slice::from_fn(100, |i| i);\n         match_vec[0] = 200;\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.starts_with(match_vec)\n         })\n     }\n \n     #[bench]\n-    fn contains_last_element(bh: &mut BenchHarness) {\n+    fn contains_last_element(b: &mut Bencher) {\n         let vec: ~[uint] = slice::from_fn(100, |i| i);\n-        bh.iter(|| {\n+        b.iter(|| {\n             vec.contains(&99u)\n         })\n     }\n \n     #[bench]\n-    fn zero_1kb_from_elem(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn zero_1kb_from_elem(b: &mut Bencher) {\n+        b.iter(|| {\n             let _v: ~[u8] = slice::from_elem(1024, 0u8);\n         });\n     }\n \n     #[bench]\n-    fn zero_1kb_set_memory(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn zero_1kb_set_memory(b: &mut Bencher) {\n+        b.iter(|| {\n             let mut v: ~[u8] = slice::with_capacity(1024);\n             unsafe {\n                 let vp = v.as_mut_ptr();\n@@ -4424,17 +4424,17 @@ mod bench {\n     }\n \n     #[bench]\n-    fn zero_1kb_fixed_repeat(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn zero_1kb_fixed_repeat(b: &mut Bencher) {\n+        b.iter(|| {\n             ~[0u8, ..1024]\n         });\n     }\n \n     #[bench]\n-    fn zero_1kb_loop_set(bh: &mut BenchHarness) {\n+    fn zero_1kb_loop_set(b: &mut Bencher) {\n         // Slower because the { len, cap, [0 x T] }* repr allows a pointer to the length\n         // field to be aliased (in theory) and prevents LLVM from optimizing loads away.\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v: ~[u8] = slice::with_capacity(1024);\n             unsafe {\n                 v.set_len(1024);\n@@ -4446,8 +4446,8 @@ mod bench {\n     }\n \n     #[bench]\n-    fn zero_1kb_mut_iter(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn zero_1kb_mut_iter(b: &mut Bencher) {\n+        b.iter(|| {\n             let mut v: ~[u8] = slice::with_capacity(1024);\n             unsafe {\n                 v.set_len(1024);\n@@ -4460,9 +4460,9 @@ mod bench {\n     }\n \n     #[bench]\n-    fn random_inserts(bh: &mut BenchHarness) {\n+    fn random_inserts(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n                 let mut v = slice::from_elem(30, (0u, 0u));\n                 for _ in range(0, 100) {\n                     let l = v.len();\n@@ -4472,9 +4472,9 @@ mod bench {\n             })\n     }\n     #[bench]\n-    fn random_removes(bh: &mut BenchHarness) {\n+    fn random_removes(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n                 let mut v = slice::from_elem(130, (0u, 0u));\n                 for _ in range(0, 100) {\n                     let l = v.len();\n@@ -4484,82 +4484,82 @@ mod bench {\n     }\n \n     #[bench]\n-    fn sort_random_small(bh: &mut BenchHarness) {\n+    fn sort_random_small(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<u64>(5);\n             v.as_mut_slice().sort();\n         });\n-        bh.bytes = 5 * mem::size_of::<u64>() as u64;\n+        b.bytes = 5 * mem::size_of::<u64>() as u64;\n     }\n \n     #[bench]\n-    fn sort_random_medium(bh: &mut BenchHarness) {\n+    fn sort_random_medium(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<u64>(100);\n             v.as_mut_slice().sort();\n         });\n-        bh.bytes = 100 * mem::size_of::<u64>() as u64;\n+        b.bytes = 100 * mem::size_of::<u64>() as u64;\n     }\n \n     #[bench]\n-    fn sort_random_large(bh: &mut BenchHarness) {\n+    fn sort_random_large(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<u64>(10000);\n             v.as_mut_slice().sort();\n         });\n-        bh.bytes = 10000 * mem::size_of::<u64>() as u64;\n+        b.bytes = 10000 * mem::size_of::<u64>() as u64;\n     }\n \n     #[bench]\n-    fn sort_sorted(bh: &mut BenchHarness) {\n+    fn sort_sorted(b: &mut Bencher) {\n         let mut v = slice::from_fn(10000, |i| i);\n-        bh.iter(|| {\n+        b.iter(|| {\n             v.sort();\n         });\n-        bh.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n+        b.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n     }\n \n     type BigSortable = (u64,u64,u64,u64);\n \n     #[bench]\n-    fn sort_big_random_small(bh: &mut BenchHarness) {\n+    fn sort_big_random_small(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<BigSortable>(5);\n             v.sort();\n         });\n-        bh.bytes = 5 * mem::size_of::<BigSortable>() as u64;\n+        b.bytes = 5 * mem::size_of::<BigSortable>() as u64;\n     }\n \n     #[bench]\n-    fn sort_big_random_medium(bh: &mut BenchHarness) {\n+    fn sort_big_random_medium(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<BigSortable>(100);\n             v.sort();\n         });\n-        bh.bytes = 100 * mem::size_of::<BigSortable>() as u64;\n+        b.bytes = 100 * mem::size_of::<BigSortable>() as u64;\n     }\n \n     #[bench]\n-    fn sort_big_random_large(bh: &mut BenchHarness) {\n+    fn sort_big_random_large(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut v = rng.gen_vec::<BigSortable>(10000);\n             v.sort();\n         });\n-        bh.bytes = 10000 * mem::size_of::<BigSortable>() as u64;\n+        b.bytes = 10000 * mem::size_of::<BigSortable>() as u64;\n     }\n \n     #[bench]\n-    fn sort_big_sorted(bh: &mut BenchHarness) {\n+    fn sort_big_sorted(b: &mut Bencher) {\n         let mut v = slice::from_fn(10000u, |i| (i, i, i, i));\n-        bh.iter(|| {\n+        b.iter(|| {\n             v.sort();\n         });\n-        bh.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n+        b.bytes = (v.len() * mem::size_of_val(&v[0])) as u64;\n     }\n }"}, {"sha": "904c19b40ed19a892e0f9f86bf6de25409ab3708", "filename": "src/libstd/str.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -4099,20 +4099,20 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::*;\n     use prelude::*;\n \n     #[bench]\n-    fn char_iterator(bh: &mut BenchHarness) {\n+    fn char_iterator(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        bh.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().len(), len));\n     }\n \n     #[bench]\n-    fn char_iterator_ascii(bh: &mut BenchHarness) {\n+    fn char_iterator_ascii(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\n         Mary had a little lamb, Little lamb\n@@ -4121,42 +4121,42 @@ mod bench {\n         Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        bh.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().len(), len));\n     }\n \n     #[bench]\n-    fn char_iterator_rev(bh: &mut BenchHarness) {\n+    fn char_iterator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        bh.iter(|| assert_eq!(s.chars_rev().len(), len));\n+        b.iter(|| assert_eq!(s.chars_rev().len(), len));\n     }\n \n     #[bench]\n-    fn char_indicesator(bh: &mut BenchHarness) {\n+    fn char_indicesator(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        bh.iter(|| assert_eq!(s.char_indices().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices().len(), len));\n     }\n \n     #[bench]\n-    fn char_indicesator_rev(bh: &mut BenchHarness) {\n+    fn char_indicesator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        bh.iter(|| assert_eq!(s.char_indices_rev().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices_rev().len(), len));\n     }\n \n     #[bench]\n-    fn split_unicode_ascii(bh: &mut BenchHarness) {\n+    fn split_unicode_ascii(b: &mut Bencher) {\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        bh.iter(|| assert_eq!(s.split('V').len(), 3));\n+        b.iter(|| assert_eq!(s.split('V').len(), 3));\n     }\n \n     #[bench]\n-    fn split_unicode_not_ascii(bh: &mut BenchHarness) {\n+    fn split_unicode_not_ascii(b: &mut Bencher) {\n         struct NotAscii(char);\n         impl CharEq for NotAscii {\n             fn matches(&self, c: char) -> bool {\n@@ -4167,20 +4167,20 @@ mod bench {\n         }\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        bh.iter(|| assert_eq!(s.split(NotAscii('V')).len(), 3));\n+        b.iter(|| assert_eq!(s.split(NotAscii('V')).len(), 3));\n     }\n \n \n     #[bench]\n-    fn split_ascii(bh: &mut BenchHarness) {\n+    fn split_ascii(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').len();\n \n-        bh.iter(|| assert_eq!(s.split(' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(' ').len(), len));\n     }\n \n     #[bench]\n-    fn split_not_ascii(bh: &mut BenchHarness) {\n+    fn split_not_ascii(b: &mut Bencher) {\n         struct NotAscii(char);\n         impl CharEq for NotAscii {\n             #[inline]\n@@ -4193,97 +4193,97 @@ mod bench {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').len();\n \n-        bh.iter(|| assert_eq!(s.split(NotAscii(' ')).len(), len));\n+        b.iter(|| assert_eq!(s.split(NotAscii(' ')).len(), len));\n     }\n \n     #[bench]\n-    fn split_extern_fn(bh: &mut BenchHarness) {\n+    fn split_extern_fn(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').len();\n         fn pred(c: char) -> bool { c == ' ' }\n \n-        bh.iter(|| assert_eq!(s.split(pred).len(), len));\n+        b.iter(|| assert_eq!(s.split(pred).len(), len));\n     }\n \n     #[bench]\n-    fn split_closure(bh: &mut BenchHarness) {\n+    fn split_closure(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').len();\n \n-        bh.iter(|| assert_eq!(s.split(|c: char| c == ' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').len(), len));\n     }\n \n     #[bench]\n-    fn split_slice(bh: &mut BenchHarness) {\n+    fn split_slice(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').len();\n \n-        bh.iter(|| assert_eq!(s.split(&[' ']).len(), len));\n+        b.iter(|| assert_eq!(s.split(&[' ']).len(), len));\n     }\n \n     #[bench]\n-    fn is_utf8_100_ascii(bh: &mut BenchHarness) {\n+    fn is_utf8_100_ascii(b: &mut Bencher) {\n \n         let s = bytes!(\"Hello there, the quick brown fox jumped over the lazy dog! \\\n                         Lorem ipsum dolor sit amet, consectetur. \");\n \n         assert_eq!(100, s.len());\n-        bh.iter(|| {\n+        b.iter(|| {\n             is_utf8(s)\n         });\n     }\n \n     #[bench]\n-    fn is_utf8_100_multibyte(bh: &mut BenchHarness) {\n+    fn is_utf8_100_multibyte(b: &mut Bencher) {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n-        bh.iter(|| {\n+        b.iter(|| {\n             is_utf8(s)\n         });\n     }\n \n     #[bench]\n-    fn from_utf8_lossy_100_ascii(bh: &mut BenchHarness) {\n+    fn from_utf8_lossy_100_ascii(b: &mut Bencher) {\n         let s = bytes!(\"Hello there, the quick brown fox jumped over the lazy dog! \\\n                         Lorem ipsum dolor sit amet, consectetur. \");\n \n         assert_eq!(100, s.len());\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = from_utf8_lossy(s);\n         });\n     }\n \n     #[bench]\n-    fn from_utf8_lossy_100_multibyte(bh: &mut BenchHarness) {\n+    fn from_utf8_lossy_100_multibyte(b: &mut Bencher) {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = from_utf8_lossy(s);\n         });\n     }\n \n     #[bench]\n-    fn from_utf8_lossy_invalid(bh: &mut BenchHarness) {\n+    fn from_utf8_lossy_invalid(b: &mut Bencher) {\n         let s = bytes!(\"Hello\", 0xC0, 0x80, \" There\", 0xE6, 0x83, \" Goodbye\");\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = from_utf8_lossy(s);\n         });\n     }\n \n     #[bench]\n-    fn from_utf8_lossy_100_invalid(bh: &mut BenchHarness) {\n+    fn from_utf8_lossy_100_invalid(b: &mut Bencher) {\n         let s = ::slice::from_elem(100, 0xF5u8);\n-        bh.iter(|| {\n+        b.iter(|| {\n             let _ = from_utf8_lossy(s);\n         });\n     }\n \n     #[bench]\n-    fn bench_connect(bh: &mut BenchHarness) {\n+    fn bench_connect(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let sep = \"\u2192\";\n         let v = [s, s, s, s, s, s, s, s, s, s];\n-        bh.iter(|| {\n+        b.iter(|| {\n             assert_eq!(v.connect(sep).len(), s.len() * 10 + sep.len() * 9);\n         })\n     }"}, {"sha": "c2add625a773a1d396c0621f4c0100fc3ab82722", "filename": "src/libstd/strbuf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fstrbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibstd%2Fstrbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstrbuf.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -289,21 +289,21 @@ impl<H:Writer> ::hash::Hash<H> for StrBuf {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use str::{Str, StrSlice};\n     use super::StrBuf;\n \n     #[bench]\n-    fn bench_with_capacity(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    fn bench_with_capacity(b: &mut Bencher) {\n+        b.iter(|| {\n             StrBuf::with_capacity(100)\n         });\n     }\n \n     #[bench]\n-    fn bench_push_str(bh: &mut BenchHarness) {\n+    fn bench_push_str(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        bh.iter(|| {\n+        b.iter(|| {\n             let mut r = StrBuf::new();\n             r.push_str(s);\n         });"}, {"sha": "ceff330e207640fc6f67dde90481b03b81fd2bb1", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -11,7 +11,7 @@\n //! Support code for rustc's built in unit-test and micro-benchmarking\n //! framework.\n //!\n-//! Almost all user code will only be interested in `BenchHarness` and\n+//! Almost all user code will only be interested in `Bencher` and\n //! `black_box`. All other interactions (such as writing tests and\n //! benchmarks themselves) should be done via the `#[test]` and\n //! `#[bench]` attributes.\n@@ -64,7 +64,7 @@ use std::task;\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n-    pub use {BenchHarness, TestName, TestResult, TestDesc,\n+    pub use {Bencher, TestName, TestResult, TestDesc,\n              TestDescAndFn, TestOpts, TrFailed, TrIgnored, TrOk,\n              Metric, MetricMap, MetricAdded, MetricRemoved,\n              MetricChange, Improvement, Regression, LikelyNoise,\n@@ -119,7 +119,7 @@ impl TestDesc {\n \n /// Represents a benchmark function.\n pub trait TDynBenchFn {\n-    fn run(&self, harness: &mut BenchHarness);\n+    fn run(&self, harness: &mut Bencher);\n }\n \n // A function that runs a test. If the function returns successfully,\n@@ -128,7 +128,7 @@ pub trait TDynBenchFn {\n // to support isolation of tests into tasks.\n pub enum TestFn {\n     StaticTestFn(fn()),\n-    StaticBenchFn(fn(&mut BenchHarness)),\n+    StaticBenchFn(fn(&mut Bencher)),\n     StaticMetricFn(proc(&mut MetricMap)),\n     DynTestFn(proc():Send),\n     DynMetricFn(proc(&mut MetricMap)),\n@@ -153,7 +153,7 @@ impl TestFn {\n /// This is feed into functions marked with `#[bench]` to allow for\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n-pub struct BenchHarness {\n+pub struct Bencher {\n     iterations: u64,\n     ns_start: u64,\n     ns_end: u64,\n@@ -300,7 +300,7 @@ Test Attributes:\n     #[test]        - Indicates a function is a test to be run. This function\n                      takes no arguments.\n     #[bench]       - Indicates a function is a benchmark to be run. This\n-                     function takes one argument (test::BenchHarness).\n+                     function takes one argument (test::Bencher).\n     #[should_fail] - This function (also labeled with #[test]) will only pass if\n                      the code causes a failure (an assertion failure or fail!)\n     #[ignore]      - When applied to a function which is already attributed as a\n@@ -1178,7 +1178,7 @@ pub fn black_box<T>(dummy: T) {\n }\n \n \n-impl BenchHarness {\n+impl Bencher {\n     /// Callback for benchmark functions to run in their body.\n     pub fn iter<T>(&mut self, inner: || -> T) {\n         self.ns_start = precise_time_ns();\n@@ -1205,13 +1205,13 @@ impl BenchHarness {\n         }\n     }\n \n-    pub fn bench_n(&mut self, n: u64, f: |&mut BenchHarness|) {\n+    pub fn bench_n(&mut self, n: u64, f: |&mut Bencher|) {\n         self.iterations = n;\n         f(self);\n     }\n \n     // This is a more statistics-driven benchmark algorithm\n-    pub fn auto_bench(&mut self, f: |&mut BenchHarness|) -> stats::Summary {\n+    pub fn auto_bench(&mut self, f: |&mut Bencher|) -> stats::Summary {\n \n         // Initial bench run to get ballpark figure.\n         let mut n = 1_u64;\n@@ -1276,10 +1276,10 @@ impl BenchHarness {\n \n pub mod bench {\n     use std::cmp;\n-    use super::{BenchHarness, BenchSamples};\n+    use super::{Bencher, BenchSamples};\n \n-    pub fn benchmark(f: |&mut BenchHarness|) -> BenchSamples {\n-        let mut bs = BenchHarness {\n+    pub fn benchmark(f: |&mut Bencher|) -> BenchSamples {\n+        let mut bs = Bencher {\n             iterations: 0,\n             ns_start: 0,\n             ns_end: 0,"}, {"sha": "1341b8d230f0b930884bd6a130a368892564da5e", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -1036,21 +1036,21 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use BenchHarness;\n+    use Bencher;\n     use stats::Stats;\n \n     #[bench]\n-    pub fn sum_three_items(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    pub fn sum_three_items(b: &mut Bencher) {\n+        b.iter(|| {\n             [1e20, 1.5, -1e20].sum();\n         })\n     }\n     #[bench]\n-    pub fn sum_many_f64(bh: &mut BenchHarness) {\n+    pub fn sum_many_f64(b: &mut Bencher) {\n         let nums = [-1e30, 1e60, 1e30, 1.0, -1e60];\n         let v = Vec::from_fn(500, |i| nums[i%5]);\n \n-        bh.iter(|| {\n+        b.iter(|| {\n             v.as_slice().sum();\n         })\n     }"}, {"sha": "2ac6780af4c1bd8ca0d7784285840afd20f96d35", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "patch": "@@ -818,28 +818,28 @@ mod test {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n-    use self::test::BenchHarness;\n+    use self::test::Bencher;\n     use super::Uuid;\n \n     #[bench]\n-    pub fn create_uuids(bh: &mut BenchHarness) {\n-        bh.iter(|| {\n+    pub fn create_uuids(b: &mut Bencher) {\n+        b.iter(|| {\n             Uuid::new_v4();\n         })\n     }\n \n     #[bench]\n-    pub fn uuid_to_str(bh: &mut BenchHarness) {\n+    pub fn uuid_to_str(b: &mut Bencher) {\n         let u = Uuid::new_v4();\n-        bh.iter(|| {\n+        b.iter(|| {\n             u.to_str();\n         })\n     }\n \n     #[bench]\n-    pub fn parse_str(bh: &mut BenchHarness) {\n+    pub fn parse_str(b: &mut Bencher) {\n         let s = \"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\";\n-        bh.iter(|| {\n+        b.iter(|| {\n             Uuid::parse_string(s).unwrap();\n         })\n     }"}]}