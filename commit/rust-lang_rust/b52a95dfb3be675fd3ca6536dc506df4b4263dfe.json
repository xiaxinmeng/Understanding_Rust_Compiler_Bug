{"sha": "b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MmE5NWRmYjNiZTY3NWZkM2NhNjUzNmRjNTA2ZGY0YjQyNjNkZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-29T00:10:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-29T00:10:54Z"}, "message": "Rollup merge of #63055 - Mark-Simulacrum:save-analysis-clean-2, r=Xanewok\n\nVarious cleanups to save analysis", "tree": {"sha": "44474fff656330c35dece8698940b5383738ab4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44474fff656330c35dece8698940b5383738ab4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPjmOCRBK7hj4Ov3rIwAAdHIIADOfZei4XR5qNaLRE2mgMl4I\nkyu/MA/dDgML4+VPAUGqLGH2WArIY78R08BwS+AODdq4QelczL1xHr3qrdfBqFEu\nqgGyiHi3NXND8b0Ha7nIMhCAUcAPMsVpt9RkqO5nM29ZUcjGQZzObLRh6wAQgR1o\nyvdkAE4mxzzhTOt4fTZwvYWL5KroQNkZovm4ylm1gUevlYkXxm2asR7nU7Fkm5UT\nQA7/QyWsunkVKP3C10DvS+JHWu1OgYpXYD0mqcOt+hQXda4NKLMQpt1YATY9w63Q\nxgpzspAHgSVjOurB2hlaJ1R2KPVKuxROwW0wVu1NWbPgMUlRRzl3TWCGRQWQz6k=\n=jOlH\n-----END PGP SIGNATURE-----\n", "payload": "tree 44474fff656330c35dece8698940b5383738ab4a\nparent 778b631ff06c463fad290ea8ff8f2817ab62a5fd\nparent 5ff08569541b94d3ba8d645fb7fc5c1c75c6cda1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564359054 +0200\ncommitter GitHub <noreply@github.com> 1564359054 +0200\n\nRollup merge of #63055 - Mark-Simulacrum:save-analysis-clean-2, r=Xanewok\n\nVarious cleanups to save analysis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "html_url": "https://github.com/rust-lang/rust/commit/b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "778b631ff06c463fad290ea8ff8f2817ab62a5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/778b631ff06c463fad290ea8ff8f2817ab62a5fd", "html_url": "https://github.com/rust-lang/rust/commit/778b631ff06c463fad290ea8ff8f2817ab62a5fd"}, {"sha": "5ff08569541b94d3ba8d645fb7fc5c1c75c6cda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff08569541b94d3ba8d645fb7fc5c1c75c6cda1", "html_url": "https://github.com/rust-lang/rust/commit/5ff08569541b94d3ba8d645fb7fc5c1c75c6cda1"}], "stats": {"total": 113, "additions": 41, "deletions": 72}, "files": [{"sha": "6fce7ca1f33fbcc8a77d075197b9211ff1c54f71", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "patch": "@@ -23,7 +23,7 @@ use rustc_data_structures::fx::FxHashSet;\n use std::path::Path;\n use std::env;\n \n-use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n+use syntax::ast::{self, Attribute, NodeId, PatKind};\n use syntax::parse::token;\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{\n@@ -75,15 +75,13 @@ macro_rules! access_from_vis {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx, 'll> {\n-    save_ctxt: SaveContext<'l, 'tcx>,\n+pub struct DumpVisitor<'l, 'tcx> {\n+    pub save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    dumper: &'ll mut Dumper,\n+    dumper: Dumper,\n \n     span: SpanUtils<'l>,\n \n-    cur_scope: NodeId,\n-\n     // Set of macro definition (callee) spans, and the set\n     // of macro use (callsite) spans. We store these to ensure\n     // we only write one macro def per unique macro definition, and\n@@ -92,36 +90,29 @@ pub struct DumpVisitor<'l, 'tcx, 'll> {\n     // macro_calls: FxHashSet<Span>,\n }\n \n-impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n+impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     pub fn new(\n         save_ctxt: SaveContext<'l, 'tcx>,\n-        dumper: &'ll mut Dumper,\n-    ) -> DumpVisitor<'l, 'tcx, 'll> {\n+    ) -> DumpVisitor<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n+        let dumper = Dumper::new(save_ctxt.config.clone());\n         DumpVisitor {\n             tcx: save_ctxt.tcx,\n             save_ctxt,\n             dumper,\n             span: span_utils,\n-            cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n             // macro_calls: FxHashSet::default(),\n         }\n     }\n \n-    fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n-    where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n-    {\n-        let parent_scope = self.cur_scope;\n-        self.cur_scope = scope_id;\n-        f(self);\n-        self.cur_scope = parent_scope;\n+    pub fn analysis(&self) -> &rls_data::Analysis {\n+        self.dumper.analysis()\n     }\n \n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n+        F: FnOnce(&mut Self),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -320,7 +311,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n \n         // walk the fn body\n         if let Some(body) = body {\n-            self.nest_tables(id, |v| v.nest_scope(id, |v| v.visit_block(body)));\n+            self.nest_tables(id, |v| v.visit_block(body));\n         }\n     }\n \n@@ -405,7 +396,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n             self.visit_ty(&ret_ty);\n         }\n \n-        self.nest_tables(item.id, |v| v.nest_scope(item.id, |v| v.visit_block(&body)));\n+        self.nest_tables(item.id, |v| v.visit_block(&body));\n     }\n \n     fn process_static_or_const_item(\n@@ -1311,7 +1302,7 @@ impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n     }\n }\n \n-impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n+impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate.\n@@ -1349,7 +1340,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n-        self.nest_scope(id, |v| visit::walk_mod(v, m));\n+        visit::walk_mod(self, m);\n     }\n \n     fn visit_item(&mut self, item: &'l ast::Item) {\n@@ -1404,7 +1395,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n             }\n             Mod(ref m) => {\n                 self.process_mod(item);\n-                self.nest_scope(item.id, |v| visit::walk_mod(v, m));\n+                visit::walk_mod(self, m);\n             }\n             Ty(ref ty, ref ty_params) => {\n                 let qualname = format!(\"::{}\",\n@@ -1570,7 +1561,7 @@ impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n                 // walk the body\n                 self.nest_tables(ex.id, |v| {\n                     v.process_formals(&decl.inputs, &id);\n-                    v.nest_scope(ex.id, |v| v.visit_expr(body))\n+                    v.visit_expr(body)\n                 });\n             }\n             ast::ExprKind::ForLoop(ref pattern, ref subexpression, ref block, _) => {"}, {"sha": "b80778c8fec7ec5f37c5e71f16add9508ca2dfed", "filename": "src/librustc_save_analysis/dumper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Fdumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Fdumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdumper.rs?ref=b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "patch": "@@ -22,8 +22,8 @@ impl Dumper {\n         }\n     }\n \n-    pub fn to_output(self, f: impl FnOnce(&Analysis)) {\n-        f(&self.result)\n+    pub fn analysis(&self) -> &Analysis {\n+        &self.result\n     }\n }\n "}, {"sha": "25dcd4664a624590fe9ff3f267906e1d1e009776", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52a95dfb3be675fd3ca6536dc506df4b4263dfe/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "patch": "@@ -35,12 +35,11 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{arg_to_string, ty_to_string};\n use syntax_pos::*;\n \n-use dumper::Dumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n use rls_data::{Def, DefKind, ExternalCrateData, GlobalCrateId, MacroRef, Ref, RefKind, Relation,\n-               RelationKind, SpanData, Impl, ImplKind};\n+               RelationKind, SpanData, Impl, ImplKind, Analysis};\n use rls_data::config::Config;\n \n use log::{debug, error, info};\n@@ -997,12 +996,10 @@ impl<'l> Visitor<'l> for PathCollector<'l> {\n \n /// Defines what to do with the results of saving the analysis.\n pub trait SaveHandler {\n-    fn save<'l, 'tcx>(\n+    fn save(\n         &mut self,\n-        save_ctxt: SaveContext<'l, 'tcx>,\n-        krate: &ast::Crate,\n-        cratename: &str,\n-        input: &'l Input,\n+        save_ctxt: &SaveContext<'_, '_>,\n+        analysis: &Analysis,\n     );\n }\n \n@@ -1062,28 +1059,17 @@ impl<'a> DumpHandler<'a> {\n     }\n }\n \n-impl<'a> SaveHandler for DumpHandler<'a> {\n-    fn save<'l, 'tcx>(\n+impl SaveHandler for DumpHandler<'_> {\n+    fn save(\n         &mut self,\n-        save_ctxt: SaveContext<'l, 'tcx>,\n-        krate: &ast::Crate,\n-        cratename: &str,\n-        input: &'l Input,\n+        save_ctxt: &SaveContext<'_, '_>,\n+        analysis: &Analysis,\n     ) {\n         let sess = &save_ctxt.tcx.sess;\n         let (output, file_name) = self.output_file(&save_ctxt);\n-        let mut dumper = Dumper::new(save_ctxt.config.clone());\n-        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-        visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options(input, cratename);\n-        visit::walk_crate(&mut visitor, krate);\n-\n-        dumper.to_output(|analysis| {\n-            if let Err(e) = serde_json::to_writer(output, analysis) {\n-                error!(\"Can't serialize save-analysis: {:?}\", e);\n-            }\n-        });\n+        if let Err(e) = serde_json::to_writer(output, &analysis) {\n+            error!(\"Can't serialize save-analysis: {:?}\", e);\n+        }\n \n         if sess.opts.debugging_opts.emit_artifact_notifications {\n             sess.parse_sess.span_diagnostic\n@@ -1097,27 +1083,13 @@ pub struct CallbackHandler<'b> {\n     pub callback: &'b mut dyn FnMut(&rls_data::Analysis),\n }\n \n-impl<'b> SaveHandler for CallbackHandler<'b> {\n-    fn save<'l, 'tcx>(\n+impl SaveHandler for CallbackHandler<'_> {\n+    fn save(\n         &mut self,\n-        save_ctxt: SaveContext<'l, 'tcx>,\n-        krate: &ast::Crate,\n-        cratename: &str,\n-        input: &'l Input,\n+        _: &SaveContext<'_, '_>,\n+        analysis: &Analysis,\n     ) {\n-        // We're using the Dumper here because it has the format of the\n-        // save-analysis results that we will pass to the callback. IOW, we are\n-        // using the Dumper to collect the save-analysis results, but not\n-        // actually to dump them to a file. This is all a bit convoluted and\n-        // there is certainly a simpler design here trying to get out (FIXME).\n-        let mut dumper = Dumper::new(save_ctxt.config.clone());\n-        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n-\n-        visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options(input, cratename);\n-        visit::walk_crate(&mut visitor, krate);\n-\n-        dumper.to_output(|a| (self.callback)(a))\n+        (self.callback)(analysis)\n     }\n }\n \n@@ -1148,7 +1120,13 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             impl_counter: Cell::new(0),\n         };\n \n-        handler.save(save_ctxt, krate, cratename, input)\n+        let mut visitor = DumpVisitor::new(save_ctxt);\n+\n+        visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options(input, cratename);\n+        visit::walk_crate(&mut visitor, krate);\n+\n+        handler.save(&visitor.save_ctxt, &visitor.analysis())\n     })\n }\n "}]}