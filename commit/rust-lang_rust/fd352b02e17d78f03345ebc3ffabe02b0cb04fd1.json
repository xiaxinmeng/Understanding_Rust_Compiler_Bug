{"sha": "fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMzUyYjAyZTE3ZDc4ZjAzMzQ1ZWJjM2ZmYWJlMDJiMGNiMDRmZDE=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-20T06:18:16Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-20T06:18:16Z"}, "message": "alters the panic variant of InterpError", "tree": {"sha": "0a060ee393851acfae718647273501b252c7d2d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a060ee393851acfae718647273501b252c7d2d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "html_url": "https://github.com/rust-lang/rust/commit/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589f6a7dc66d88739485a1f9044ab29c166420a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/589f6a7dc66d88739485a1f9044ab29c166420a0", "html_url": "https://github.com/rust-lang/rust/commit/589f6a7dc66d88739485a1f9044ab29c166420a0"}], "stats": {"total": 67, "additions": 25, "deletions": 42}, "files": [{"sha": "9e216a14874c4bf53384b422fbba93b51e5c77cf", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "patch": "@@ -228,6 +228,24 @@ impl<'tcx> From<InterpError<'tcx, u64>> for InterpErrorInfo<'tcx> {\n \n pub type AssertMessage<'tcx> = InterpError<'tcx, mir::Operand<'tcx>>;\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum EvalErrorPanic<O> {\n+    Panic {\n+        msg: Symbol,\n+        line: u32,\n+        col: u32,\n+        file: Symbol,\n+    },\n+    BoundsCheck {\n+        len: O,\n+        index: O,\n+    },\n+    Overflow(mir::BinOp),\n+    OverflowNeg,\n+    DivisionByZero,\n+    RemainderByZero,\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InterpError<'tcx, O> {\n     /// This variant is used by machines to signal their own errors that do not\n@@ -247,7 +265,6 @@ pub enum InterpError<'tcx, O> {\n     DanglingPointerDeref,\n     DoubleFree,\n     InvalidMemoryAccess,\n-    FunctionPointerTyMismatch(FnSig<'tcx>, FnSig<'tcx>),\n     InvalidFunctionPointer,\n     InvalidBool,\n     InvalidDiscriminant(ScalarMaybeUndef),\n@@ -267,13 +284,11 @@ pub enum InterpError<'tcx, O> {\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    // asd\n     BoundsCheck { len: O, index: O },\n     Overflow(mir::BinOp),\n     OverflowNeg,\n     DivisionByZero,\n     RemainderByZero,\n-    // asd\n     Intrinsic(String),\n     InvalidChar(u128),\n     StackFrameLimitReached,\n@@ -284,29 +299,6 @@ pub enum InterpError<'tcx, O> {\n         required: Align,\n         has: Align,\n     },\n-    MemoryLockViolation {\n-        ptr: Pointer,\n-        len: u64,\n-        frame: usize,\n-        access: AccessKind,\n-        lock: Lock,\n-    },\n-    MemoryAcquireConflict {\n-        ptr: Pointer,\n-        len: u64,\n-        kind: AccessKind,\n-        lock: Lock,\n-    },\n-    InvalidMemoryLockRelease {\n-        ptr: Pointer,\n-        len: u64,\n-        frame: usize,\n-        lock: Lock,\n-    },\n-    DeallocatedLockedMemory {\n-        ptr: Pointer,\n-        lock: Lock,\n-    },\n     ValidationFailure(String),\n     CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n@@ -324,7 +316,7 @@ pub enum InterpError<'tcx, O> {\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n     Unreachable,\n-    Panic(EvalErrorPanic<'tcx, O>),\n+    Panic(EvalErrorPanic<O>),\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n     UnimplementedTraitSelection,\n@@ -340,15 +332,6 @@ pub enum InterpError<'tcx, O> {\n     InfiniteLoop,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub enum EvalErrorPanic<'tcx, O> {\n-    Panic,\n-    BoundsCheck { len: O, index: O },\n-    Overflow(mir::BinOp),\n-    OverflowNeg,\n-    DivisionByZero,\n-    RemainderByZero,\n-}\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n@@ -549,8 +532,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Panic { ref msg, line, col, ref file } =>\n-                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            Panic { .. } =>\n+                write!(f, \"the evaluated program panicked\"),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n             Exit(code) =>"}, {"sha": "01bc27d55e58048f9565882caf45fdf5038f4e3f", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "patch": "@@ -12,7 +12,7 @@ mod pointer;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n-    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n+    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, EvalErrorPanic\n };\n \n pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};"}, {"sha": "5b80d0e251e4be46097b04488493ec8f92768581", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd352b02e17d78f03345ebc3ffabe02b0cb04fd1/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=fd352b02e17d78f03345ebc3ffabe02b0cb04fd1", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n-    InterpResult, InterpError, Scalar,\n+    InterpResult, InterpError, Scalar, EvalErrorPanic,\n };\n \n use super::{\n@@ -261,7 +261,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic(EvalErrorPanic::Panic { msg, file, line, col }).into());\n         } else if Some(def_id) == self.tcx.lang_items().begin_panic_fn() {\n             assert!(args.len() == 2);\n             // &'static str, &(&'static str, u32, u32)\n@@ -279,7 +279,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic(EvalErrorPanic::Panic { msg, file, line, col }).into());\n         } else {\n             return Ok(false);\n         }"}]}