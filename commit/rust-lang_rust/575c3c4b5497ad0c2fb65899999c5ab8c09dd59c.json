{"sha": "575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NWMzYzRiNTQ5N2FkMGMyZmI2NTg5OTk5OWM1YWI4YzA5ZGQ1OWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-02-23T07:31:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-23T07:31:57Z"}, "message": "Merge pull request #2471 from bootandy/fix_span2\n\nFix: point to correct problem part of code, update test", "tree": {"sha": "89f628c19f5d276dd14e9ea291d43f35b686e2e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f628c19f5d276dd14e9ea291d43f35b686e2e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaj8NtCRBK7hj4Ov3rIwAAdHIIAJ9X0/UE0kVLraRE+9dr/gUE\nZEMJdV768cEs2fkAMl78e4C2lozDfMsVnkrNX+qWmU+UWlYARg1nZQLrDhxrzobS\n/xsAcVLAa1kSSywoAlf9p+14zli7h/uZfSkzGc2dbanapMZBavSc/DYF+t9wlEWL\nSG1F0ivcMasqltLt9GXGftpDt77v+InPb9O4GgZaf6zDuRGC/X5nATNYD6v/cG0d\nBgUvVsaCFKltcTUNkE0V2x1ITr+yE3QxneSmlhb88lftuB2ETXYIOwH+9HMuG7XN\nWhUH8dtlOL3nRxJ+uP87snOfFee1qeqsfdFWzcctlfY/d2mvYj5XtduEvU9aRJU=\n=xazz\n-----END PGP SIGNATURE-----\n", "payload": "tree 89f628c19f5d276dd14e9ea291d43f35b686e2e5\nparent 5e6342d4ae1e4e8e90c8498a6174b95e584142a6\nparent aef07e33929b235c63178d541ac0e1b4823ee8f3\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1519371117 +0100\ncommitter GitHub <noreply@github.com> 1519371117 +0100\n\nMerge pull request #2471 from bootandy/fix_span2\n\nFix: point to correct problem part of code, update test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "html_url": "https://github.com/rust-lang/rust/commit/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6342d4ae1e4e8e90c8498a6174b95e584142a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6342d4ae1e4e8e90c8498a6174b95e584142a6", "html_url": "https://github.com/rust-lang/rust/commit/5e6342d4ae1e4e8e90c8498a6174b95e584142a6"}, {"sha": "aef07e33929b235c63178d541ac0e1b4823ee8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef07e33929b235c63178d541ac0e1b4823ee8f3", "html_url": "https://github.com/rust-lang/rust/commit/aef07e33929b235c63178d541ac0e1b4823ee8f3"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "a7bdd10ed669ae48852992a9ecdfc8866479f0c1", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "patch": "@@ -691,7 +691,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n \n         match expr.node {\n-            hir::ExprMethodCall(ref method_call, _, ref args) => {\n+            hir::ExprMethodCall(ref method_call, ref method_span, ref args) => {\n                 // Chain calls\n                 // GET_UNWRAP needs to be checked before general `UNWRAP` lints\n                 if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n@@ -744,7 +744,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_unnecessary_fold(cx, expr, arglists[0]);\n                 }\n \n-                lint_or_fun_call(cx, expr, &method_call.name.as_str(), args);\n+                lint_or_fun_call(cx, expr, *method_span, &method_call.name.as_str(), args);\n \n                 let self_ty = cx.tables.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && method_call.name == \"clone\" {\n@@ -845,7 +845,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n-fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir::Expr]) {\n+fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n     fn check_unwrap_or_default(\n         cx: &LateContext,\n@@ -894,6 +894,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     fn check_general_case(\n         cx: &LateContext,\n         name: &str,\n+        method_span: Span,\n         fun_span: Span,\n         self_expr: &hir::Expr,\n         arg: &hir::Expr,\n@@ -939,14 +940,14 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n             (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n             (false, true) => snippet(cx, fun_span, \"..\"),\n         };\n-\n+        let span_replace_word = method_span.with_hi(span.hi());\n         span_lint_and_sugg(\n             cx,\n             OR_FUN_CALL,\n-            span,\n+            span_replace_word,\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n-            format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg),\n+            format!(\"{}_{}({})\", name, suffix, sugg),\n         );\n     }\n \n@@ -955,11 +956,11 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n             hir::ExprCall(ref fun, ref or_args) => {\n                 let or_has_args = !or_args.is_empty();\n                 if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n-                    check_general_case(cx, name, fun.span, &args[0], &args[1], or_has_args, expr.span);\n+                    check_general_case(cx, name, method_span, fun.span, &args[0], &args[1], or_has_args, expr.span);\n                 }\n             },\n             hir::ExprMethodCall(_, span, ref or_args) => {\n-                check_general_case(cx, name, span, &args[0], &args[1], !or_args.is_empty(), expr.span)\n+                check_general_case(cx, name, method_span, span, &args[0], &args[1], !or_args.is_empty(), expr.span)\n             },\n             _ => {},\n         }"}, {"sha": "42cf3d3cbc55edd00b7d26dd12f0a850625113ec", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "patch": "@@ -350,10 +350,10 @@ error: unnecessary structure name repetition\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:307:5\n+   --> $DIR/methods.rs:307:22\n     |\n 307 |     with_constructor.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n+    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n@@ -364,22 +364,22 @@ error: use of `unwrap_or` followed by a call to `new`\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:313:5\n+   --> $DIR/methods.rs:313:21\n     |\n 313 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n+    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:5\n+   --> $DIR/methods.rs:316:14\n     |\n 316 |     with_err.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n+    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:319:5\n+   --> $DIR/methods.rs:319:19\n     |\n 319 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n    --> $DIR/methods.rs:322:5\n@@ -394,34 +394,34 @@ error: use of `unwrap_or` followed by a call to `default`\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:328:5\n+   --> $DIR/methods.rs:328:14\n     |\n 328 |     with_vec.unwrap_or(vec![]);\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n+    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:333:5\n+   --> $DIR/methods.rs:333:21\n     |\n 333 |     without_default.unwrap_or(Foo::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n+    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:336:5\n+   --> $DIR/methods.rs:336:19\n     |\n 336 |     map.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n+    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:339:5\n+   --> $DIR/methods.rs:339:21\n     |\n 339 |     btree.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n+    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:342:13\n+   --> $DIR/methods.rs:342:21\n     |\n 342 |     let _ = stringy.unwrap_or(\"\".to_owned());\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n+    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n    --> $DIR/methods.rs:353:23"}, {"sha": "79e3900fef0e323d122787dbd089e796b88bf5c7", "filename": "tests/ui/unwrap_or.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.rs?ref=575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "patch": "@@ -0,0 +1,11 @@\n+#![warn(clippy)]\n+\n+fn main() {\n+    let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n+}\n+\n+fn new_lines() {\n+    let s = Some(String::from(\"test string\"))\n+        .unwrap_or(\"Fail\".to_string())\n+        .len();\n+}"}, {"sha": "e4704dd0e43787e33e3f68a53e291f101d98b99a", "filename": "tests/ui/unwrap_or.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.stderr?ref=575c3c4b5497ad0c2fb65899999c5ab8c09dd59c", "patch": "@@ -0,0 +1,16 @@\n+error: use of `unwrap_or` followed by a function call\n+ --> $DIR/unwrap_or.rs:4:47\n+  |\n+4 |     let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n+  |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"Fail\".to_string())`\n+  |\n+  = note: `-D or-fun-call` implied by `-D warnings`\n+\n+error: use of `unwrap_or` followed by a function call\n+ --> $DIR/unwrap_or.rs:9:10\n+  |\n+9 |         .unwrap_or(\"Fail\".to_string())\n+  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"Fail\".to_string())`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/unwrap_or.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/575c3c4b5497ad0c2fb65899999c5ab8c09dd59c/tests%2Fui%2Funwrap_or.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.stdout?ref=575c3c4b5497ad0c2fb65899999c5ab8c09dd59c"}]}