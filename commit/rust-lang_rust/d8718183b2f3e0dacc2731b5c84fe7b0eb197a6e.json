{"sha": "d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzE4MTgzYjJmM2UwZGFjYzI3MzFiNWM4NGZlN2IwZWIxOTdhNmU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-06T07:40:06Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T03:50:54Z"}, "message": "Create lang item array and add map fn\n\nThis creates the language item for arrays, and adds the map fn which is like map in options or\niterators. It currently allocates an extra array, unfortunately.\n\nAdded fixme for transmuting\n\nFix typo\n\nAdd drop guard", "tree": {"sha": "5188a0e89a085a23298982cf7067b8115e6c36dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5188a0e89a085a23298982cf7067b8115e6c36dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "html_url": "https://github.com/rust-lang/rust/commit/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847ba835ce411d47364a93ddf0b4a5c0f27928a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/847ba835ce411d47364a93ddf0b4a5c0f27928a9", "html_url": "https://github.com/rust-lang/rust/commit/847ba835ce411d47364a93ddf0b4a5c0f27928a9"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "b549cd8959f809b65c6afb55eb1dea3c186ef13e", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "patch": "@@ -364,3 +364,56 @@ macro_rules! array_impl_default {\n }\n \n array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\n+\n+#[cfg(not(bootstrap))]\n+#[lang = \"array\"]\n+impl<T, const N: usize> [T; N] {\n+    /// Returns an array of the same size as self, with `f` applied to each element.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let x = [1,2,3];\n+    /// let y = x.map(|v| v + 1);\n+    /// assert_eq!(y, [2,3,4]);\n+    /// ```\n+    #[unstable(feature = \"array_map\", issue = \"77777\")]\n+    fn map<F, S>(self, f: F) -> [S; N]\n+    where\n+        F: FnMut(T) -> S,\n+    {\n+        use crate::mem::MaybeUninit;\n+        struct Guard<T, const N: usize> {\n+            dst: *mut T,\n+            curr_init: usize,\n+        }\n+\n+        impl<T, const N: usize> Guard<T, N> {\n+            fn new(dst: &mut [MaybeUninit<T>; N]) -> Self {\n+                Guard { dst: dst as *mut _ as *mut T, curr_init: 0 }\n+            }\n+        }\n+\n+        impl<T, const N: usize> Drop for Guard<T, N> {\n+            fn drop(&mut self) {\n+                debug_assert!(self.curr_init <= N);\n+\n+                let initialized_part =\n+                    crate::ptr::slice_from_raw_parts_mut(self.dst, self.curr_init);\n+                // SAFETY: this raw slice will contain only initialized objects\n+                // that's why, it is allowed to drop it.\n+                unsafe {\n+                    crate::ptr::drop_in_place(initialized_part);\n+                }\n+            }\n+        }\n+        let dst = MaybeUninit::uninit_array::<N>();\n+        let mut guard = Guard::new(&mut dst);\n+        for (i, e) in self.into_iter().enumerate() {\n+            dst[i] = MaybeUninit::new(f(e));\n+            guard.curr_init += 1;\n+        }\n+        // FIXME convert to crate::mem::transmute when works with generics\n+        // unsafe { crate::mem::transmute::<[MaybeUninit<S>; N], [S; N]>(dst) }\n+        unsafe { (&mut dst as *mut _ as *mut [S; N]).read() }\n+    }\n+}"}, {"sha": "2f7edeb405ffec710ef43cf2a9226e7adc5c7bf8", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "patch": "@@ -165,6 +165,7 @@ language_item_table! {\n     BoolImplItem,                  sym::bool,               bool_impl,               Target::Impl;\n     CharImplItem,                  sym::char,               char_impl,               Target::Impl;\n     StrImplItem,                   sym::str,                str_impl,                Target::Impl;\n+    ArrayImplItem,                 sym::array,              array_impl,              Target::Impl;\n     SliceImplItem,                 sym::slice,              slice_impl,              Target::Impl;\n     SliceU8ImplItem,               sym::slice_u8,           slice_u8_impl,           Target::Impl;\n     StrAllocImplItem,              sym::str_alloc,          str_alloc_impl,          Target::Impl;"}]}