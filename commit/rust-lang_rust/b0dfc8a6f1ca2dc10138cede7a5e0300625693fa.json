{"sha": "b0dfc8a6f1ca2dc10138cede7a5e0300625693fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZGZjOGE2ZjFjYTJkYzEwMTM4Y2VkZTdhNWUwMzAwNjI1NjkzZmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-06T17:00:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-06T17:00:43Z"}, "message": "Rollup merge of #63969 - GuillaumeGomez:option-docs-example, r=sfackler\n\nAdd missing examples for Option type\n\ncc @rust-lang/docs", "tree": {"sha": "b015ffedc81d40e8c2e1f0796f39e3cc8ac78f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b015ffedc81d40e8c2e1f0796f39e3cc8ac78f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcpC7CRBK7hj4Ov3rIwAAdHIIAFfQ1NMT8EGO/mYYr8x9pjV7\nu+ghRomgTYSyK1RazgMk1FP89IFA1TnwdOpWEWNiC77nKpC322AZLizY94iEUUN0\nzFWhlZIu3VpzybJJtMVHZikx6wM9iqw/HGluh1d6iccsbB+P6KzOZ/fA1Xzvp9+e\nygKEpW6Fq0/8BTr3NRhjtjSAh07LN1W3xlLtS7JYSSns3cmJSHFkXT8fKW5SMiwM\nt2h6V0eqb0HdAg9EzJyLfFLsP6/qMIlVp85xwmSBC8NSFSTI//NU+Pb9ZekM54m5\nG3FYwPisBvDtNEm6WOhy9ATfTlSp1Dl6ZMhRjhdDjxnzFXYGPznD1wjFZn/SZGs=\n=itbZ\n-----END PGP SIGNATURE-----\n", "payload": "tree b015ffedc81d40e8c2e1f0796f39e3cc8ac78f49\nparent 4f61eac630822b30b1c2b46f3dd2a9ebe20f7fce\nparent fdc4f9028f838605d031248abda0ebfb7450bf9f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567789243 +0200\ncommitter GitHub <noreply@github.com> 1567789243 +0200\n\nRollup merge of #63969 - GuillaumeGomez:option-docs-example, r=sfackler\n\nAdd missing examples for Option type\n\ncc @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa", "html_url": "https://github.com/rust-lang/rust/commit/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f61eac630822b30b1c2b46f3dd2a9ebe20f7fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f61eac630822b30b1c2b46f3dd2a9ebe20f7fce", "html_url": "https://github.com/rust-lang/rust/commit/4f61eac630822b30b1c2b46f3dd2a9ebe20f7fce"}, {"sha": "fdc4f9028f838605d031248abda0ebfb7450bf9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc4f9028f838605d031248abda0ebfb7450bf9f", "html_url": "https://github.com/rust-lang/rust/commit/fdc4f9028f838605d031248abda0ebfb7450bf9f"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "79bd04b724390dd297b859fe367b8f5b93838e13", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0dfc8a6f1ca2dc10138cede7a5e0300625693fa/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b0dfc8a6f1ca2dc10138cede7a5e0300625693fa", "patch": "@@ -1110,6 +1110,18 @@ impl<T: Deref> Option<T> {\n     /// to the original one, additionally coercing the contents via [`Deref`].\n     ///\n     /// [`Deref`]: ../../std/ops/trait.Deref.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inner_deref)]\n+    ///\n+    /// let x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref(), Some(\"hey\"));\n+    ///\n+    /// let x: Option<String> = None;\n+    /// assert_eq!(x.as_deref(), None);\n+    /// ```\n     pub fn as_deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n@@ -1121,6 +1133,18 @@ impl<T: DerefMut> Option<T> {\n     ///\n     /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n     /// the inner type's `Deref::Target` type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inner_deref)]\n+    ///\n+    /// let mut x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref_mut().map(|x| {\n+    ///     x.make_ascii_uppercase();\n+    ///     x\n+    /// }), Some(\"HEY\".to_owned().as_mut_str()));\n+    /// ```\n     pub fn as_deref_mut(&mut self) -> Option<&mut T::Target> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n@@ -1199,6 +1223,13 @@ impl<T: Clone> Clone for Option<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n     /// Returns [`None`][Option::None].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let opt: Option<u32> = Option::default();\n+    /// assert!(opt.is_none());\n+    /// ```\n     #[inline]\n     fn default() -> Option<T> { None }\n }"}]}