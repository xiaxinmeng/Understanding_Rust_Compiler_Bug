{"sha": "74748b11bb313d2df6ffec0192fee344b3f7562d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzQ4YjExYmIzMTNkMmRmNmZmZWMwMTkyZmVlMzQ0YjNmNzU2MmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-31T13:45:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-31T13:45:16Z"}, "message": "WIP: don't suggest placing `use` statements into expanded code", "tree": {"sha": "3515e23a352db3f7796ab9ec57182128ad9eb7e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3515e23a352db3f7796ab9ec57182128ad9eb7e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74748b11bb313d2df6ffec0192fee344b3f7562d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmoEwIACgkQpp+NIls6\n19lVVg//RexEqKFd1F+xOdUCShigeZZLp26tte4BIjZlyIXOxYQRRdeg1fEzHwuY\ndoyiJiWW9Le3IW4m/gxAU6GM4DxlNRGpcglPeI+oGmNh6W0kkuwsQRIhx+MMarp/\npGjIeHHkfgogpXmJd80vYU69Xwr0Uq5p73fEtxBAsZ6rKFlNZ3e/M1I++r7x6thz\n4/u5j2Vo9gjAmQSWq3qMXOIbl+fBD7YMmmov74Q0vjIkWyxxWyagbtHDlxGgDm7h\nw5B4AAV/yOvCpk8omdQgwySpQ/RW/d2k/Gc2cs9gSOouUOKQs3QlfkrClVWDk4zp\nVjic1fuPHyXZ1TPP3lhqnfs5ob2qhtz+FQJ8eLPElvBcrn8P8T6va8mlwe/kPhWy\nY5AJ0No7IWw7NhPhI9uqZQuN8zQa3Uz449s6OmM1WF3Ul1XhsZwi2e5XEqg1xbAV\nyoXPlqfVZu//ysIDo+b9xrTxSVLRWUTwx7chL/FE+v10YfbSqG343CWf4uA9BUz+\nI6DvolsKYRwCuCGeRhk2yGqzb+kxzgM7UCy/s/onTO9fk7UEpfKpeDcilDuWdTJK\nbNaLU10JbmK4/EgYivSTWyeNanBdkQ++iEZRsUHmAmxx0U/nWkcy4Vl30oS6swbi\nW8BEQEKhKYQXS8XG9EDpPCO5qtIeE8Net5DvKKi8cf/1YjOE5og=\n=4xkm\n-----END PGP SIGNATURE-----", "payload": "tree 3515e23a352db3f7796ab9ec57182128ad9eb7e0\nparent f9a07bc11be83663f3e4120c21cbfb92518c004f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504187116 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504187116 +0200\n\nWIP: don't suggest placing `use` statements into expanded code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74748b11bb313d2df6ffec0192fee344b3f7562d", "html_url": "https://github.com/rust-lang/rust/commit/74748b11bb313d2df6ffec0192fee344b3f7562d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74748b11bb313d2df6ffec0192fee344b3f7562d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a07bc11be83663f3e4120c21cbfb92518c004f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a07bc11be83663f3e4120c21cbfb92518c004f", "html_url": "https://github.com/rust-lang/rust/commit/f9a07bc11be83663f3e4120c21cbfb92518c004f"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "88e092a1684ae83fd56937226a77e3e6d4db0635", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=74748b11bb313d2df6ffec0192fee344b3f7562d", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::Use(..) => {\n                     // don't suggest placing a use before the prelude\n                     // import or other generated ones\n-                    if item.span == DUMMY_SP {\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n                         self.span = Some(item.span.with_hi(item.span.lo()));\n                         self.found_use = true;\n                         return;\n@@ -615,7 +615,19 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 ItemKind::ExternCrate(_) => {}\n                 // but place them before the first other item\n                 _ => if self.span.map_or(true, |span| item.span < span ) {\n-                    self.span = Some(item.span.with_hi(item.span.lo()));\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n+                        // don't insert between attributes and an item\n+                        if item.attrs.is_empty() {\n+                            self.span = Some(item.span.with_hi(item.span.lo()));\n+                        } else {\n+                            // find the first attribute on the item\n+                            for attr in &item.attrs {\n+                                if self.span.map_or(true, |span| attr.span < span) {\n+                                    self.span = Some(attr.span.with_hi(attr.span.lo()));\n+                                }\n+                            }\n+                        }\n+                    }\n                 },\n             }\n         }"}, {"sha": "f7e5c602644cfa0a8bb5c431309fba9d2b55ffe7", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=74748b11bb313d2df6ffec0192fee344b3f7562d", "patch": "@@ -10,7 +10,7 @@ error[E0423]: expected value, found struct `Z`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-16 |     use m::n::Z;\n+22 |     use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct `S`\n@@ -24,7 +24,7 @@ error[E0423]: expected value, found struct `S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-15 | use m::S;\n+32 | use m::S;\n    |\n \n error[E0423]: expected value, found struct `xcrate::S`\n@@ -38,7 +38,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-15 | use m::S;\n+32 | use m::S;\n    |\n \n error[E0603]: tuple struct `Z` is private"}, {"sha": "8a4dfdc80276af7537806d0a483c933ff3768ff1", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=74748b11bb313d2df6ffec0192fee344b3f7562d", "patch": "@@ -6,7 +6,7 @@ error[E0412]: cannot find type `Path` in this scope\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-20 |     #[derive(use std::path::Path;\n+21 |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope"}, {"sha": "b57b58e3d2a6da52efbb5841837075457ed5602f", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74748b11bb313d2df6ffec0192fee344b3f7562d/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=74748b11bb313d2df6ffec0192fee344b3f7562d", "patch": "@@ -6,7 +6,7 @@ error[E0404]: expected trait, found type parameter `Add`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-11 | use std::ops::Add;\n+13 | use std::ops::Add;\n    |\n \n error[E0601]: main function not found"}]}