{"sha": "46b01abbcd4160f0d4241bc8ec27121713d9abae", "node_id": "C_kwDOAAsO6NoAKDQ2YjAxYWJiY2Q0MTYwZjBkNDI0MWJjOGVjMjcxMjE3MTNkOWFiYWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T16:07:48Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-25T16:12:44Z"}, "message": "Replace `tcx.mk_trait_ref` with `ty::TraitRef::new`", "tree": {"sha": "3047ab7b49f67b13795edd9bfc8950d12224254d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3047ab7b49f67b13795edd9bfc8950d12224254d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b01abbcd4160f0d4241bc8ec27121713d9abae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b01abbcd4160f0d4241bc8ec27121713d9abae", "html_url": "https://github.com/rust-lang/rust/commit/46b01abbcd4160f0d4241bc8ec27121713d9abae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b01abbcd4160f0d4241bc8ec27121713d9abae/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8c905e159ecc86cb747cbf2c69668b0750ea7b", "html_url": "https://github.com/rust-lang/rust/commit/2d8c905e159ecc86cb747cbf2c69668b0750ea7b"}], "stats": {"total": 318, "additions": 193, "deletions": 125}, "files": [{"sha": "0b40dbfc740a25984cb841ecc8f0828e4c268606", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -1111,7 +1111,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 });\n                         }\n                         if let Some(clone_trait) = tcx.lang_items().clone_trait()\n-                            && let trait_ref = tcx.mk_trait_ref(clone_trait, [ty])\n+                            && let trait_ref = ty::TraitRef::new(tcx, clone_trait, [ty])\n                             && let o = Obligation::new(\n                                 tcx,\n                                 ObligationCause::dummy(),"}, {"sha": "2e0bf592cd34239e4e9f6afe5c68bac35ac69a16", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -538,7 +538,8 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, [place_ty.ty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(tcx.at(self.last_span), LangItem::Copy, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1237,8 +1238,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref =\n-                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, [place_ty]);\n+                    let trait_ref = ty::TraitRef::from_lang_item(\n+                        tcx.at(self.last_span),\n+                        LangItem::Sized,\n+                        [place_ty],\n+                    );\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1810,7 +1814,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, [ty]);\n+                            let trait_ref =\n+                                ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Copy, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1823,7 +1828,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Sized, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1835,7 +1840,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [*ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx.at(span), LangItem::Sized, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1932,9 +1937,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = tcx\n-                            .at(span)\n-                            .mk_trait_ref(LangItem::CoerceUnsized, [op.ty(body, tcx), ty]);\n+                        let trait_ref = ty::TraitRef::from_lang_item(\n+                            tcx.at(span),\n+                            LangItem::CoerceUnsized,\n+                            [op.ty(body, tcx), ty],\n+                        );\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "7b65c828c3384cd370077ca2be2d6832456589b3", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -157,8 +157,12 @@ impl Qualif for NeedsNonConstDrop {\n             cx.tcx,\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n-            ty::Binder::dummy(cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]))\n-                .with_constness(ty::BoundConstness::ConstIfConst),\n+            ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                cx.tcx.at(cx.body.span),\n+                LangItem::Destruct,\n+                [ty],\n+            ))\n+            .with_constness(ty::BoundConstness::ConstIfConst),\n         );\n \n         let infcx = cx.tcx.infer_ctxt().build();"}, {"sha": "606d3bee0fc061f997975ec35dc83a26f67b5b3a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -689,7 +689,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let assoc_bindings = self.create_assoc_bindings_for_generic_args(args);\n \n         let poly_trait_ref =\n-            ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n+            ty::Binder::bind_with_vars(ty::TraitRef::new(tcx, trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n         bounds.push_trait_bound(tcx, poly_trait_ref, span, constness);\n@@ -822,7 +822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(b) = trait_segment.args().bindings.first() {\n             prohibit_assoc_ty_binding(self.tcx(), b.span, Some((trait_segment, span)));\n         }\n-        self.tcx().mk_trait_ref(trait_def_id, substs)\n+        ty::TraitRef::new(self.tcx(), trait_def_id, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, span))]"}, {"sha": "1cf93c86f4f8ab47ea79361cedf6f47b65e69d6f", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "a751639b56fafec1393e9e9f71b01ce138fdc397", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> Bounds<'tcx> {\n \n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n-        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [ty]));\n+        let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, sized_def_id, [ty]));\n         // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }"}, {"sha": "cef44c54def009b616846f26276f6377f40b0a39", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -538,7 +538,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                             tcx,\n                             assoc_item,\n                             assoc_item,\n-                            tcx.mk_trait_ref(id.owner_id.to_def_id(), trait_substs),\n+                            ty::TraitRef::new(tcx, id.owner_id.to_def_id(), trait_substs),\n                         );\n                     }\n                     _ => {}"}, {"sha": "12f46bbb32b77ea0ab8ee2457f1d24f3207199e2", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -1784,7 +1784,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, receiver_trait_def_id, [receiver_ty]));\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref);\n "}, {"sha": "78c9bc1b2b58b2568f312b71772c501949169ca7", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -340,7 +340,8 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                         tcx,\n                         cause.clone(),\n                         param_env,\n-                        ty::Binder::dummy(tcx.mk_trait_ref(\n+                        ty::Binder::dummy(ty::TraitRef::new(\n+                            tcx,\n                             dispatch_from_dyn_trait,\n                             [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n                         )),\n@@ -579,8 +580,12 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n     // Register an obligation for `A: Trait<B>`.\n     let ocx = ObligationCtxt::new(&infcx);\n     let cause = traits::ObligationCause::misc(span, impl_did);\n-    let obligation =\n-        Obligation::new(tcx, cause, param_env, tcx.mk_trait_ref(trait_def_id, [source, target]));\n+    let obligation = Obligation::new(\n+        tcx,\n+        cause,\n+        param_env,\n+        ty::TraitRef::new(tcx, trait_def_id, [source, target]),\n+    );\n     ocx.register_obligation(obligation);\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {"}, {"sha": "af1d61cd0ac92b51849d38e379ff4670a7343d50", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -601,7 +601,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             cause,\n             self.fcx.param_env,\n-            self.tcx.mk_trait_ref(coerce_unsized_did, [coerce_source, coerce_target])\n+            ty::TraitRef::new(self.tcx, coerce_unsized_did, [coerce_source, coerce_target])\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n@@ -764,9 +764,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             self.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(\n-                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerLike, [a]),\n-            ),\n+            ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                self.tcx.at(self.cause.span),\n+                hir::LangItem::PointerLike,\n+                [a],\n+            )),\n         ));\n \n         Ok(InferOk {"}, {"sha": "70ce45e21ea55598334ca6cf61038104b334b53f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -481,7 +481,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n         let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_or_alias_def_id) {\n-            self.tcx.mk_trait_ref(\n+            ty::TraitRef::new(\n+                self.tcx,\n                 obligation.impl_or_alias_def_id,\n                 ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_or_alias_def_id),\n             )"}, {"sha": "9948416f01b3f14b927829f45706860fbd33104b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -1911,7 +1911,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {\n                     // Look for a user-provided impl of a `Fn` trait, and point to it.\n                     let new_def_id = self.probe(|_| {\n-                        let trait_ref = self.tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(self.tcx,\n                             call_kind.to_def_id(self.tcx),\n                             [\n                                 callee_ty,"}, {"sha": "cb528519a71b4dfc273f240f370ddc9ffd5eb8d1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                ty::Binder::dummy(ty::TraitRef::new(self.tcx,\n                     into_def_id,\n                     [expr_ty, expected_ty]\n                 )),\n@@ -1438,7 +1438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n-            && let trait_ref = ty::Binder::dummy(self.tcx.mk_trait_ref(clone_trait_did, [expected_ty]))\n+            && let trait_ref = ty::Binder::dummy(ty::TraitRef::new(self.tcx, clone_trait_did, [expected_ty]))\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,"}, {"sha": "5963a1632c5bed673d6d69fdde49447e1e9909a0", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.var_for_def(cause.span, param)\n         });\n \n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);"}, {"sha": "bb982851a7bd372206a494c3c08fed7db288c995", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -954,7 +954,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n         let trait_substs = self.fresh_item_substs(trait_def_id);\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, trait_substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, recursively assume all explicitly named traits are relevant"}, {"sha": "fb16c32c0cbac56ace07b6eb4a462e5229cc6e48", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -72,7 +72,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n-                        let trait_ref = tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(\n+                            tcx,\n                             fn_once,\n                             [\n                                 ty,"}, {"sha": "c9c1f0aeaac83b652f576bd409b402c89f3be8bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -261,11 +261,16 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 (false, None, None, Some(span), String::new())\n             };\n \n-        let expected_trait_ref = self\n-            .cx\n-            .resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, expected_substs));\n-        let actual_trait_ref =\n-            self.cx.resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, actual_substs));\n+        let expected_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            expected_substs,\n+        ));\n+        let actual_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            actual_substs,\n+        ));\n \n         // Search the expected and actual trait references to see (a)\n         // whether the sub/sup placeholders appear in them (sometimes"}, {"sha": "11f43469400ba685b95955c6f901baa98b401f86", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -18,7 +18,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = infcx.tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "64e7480e626d7cf7bca1a1986935349f4507d31e", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -169,8 +169,11 @@ pub trait Printer<'tcx>: Sized {\n                 self.path_append(\n                     |cx: Self| {\n                         if trait_qualify_parent {\n-                            let trait_ref =\n-                                cx.tcx().mk_trait_ref(parent_def_id, parent_substs.iter().copied());\n+                            let trait_ref = ty::TraitRef::new(\n+                                cx.tcx(),\n+                                parent_def_id,\n+                                parent_substs.iter().copied(),\n+                            );\n                             cx.path_qualified(trait_ref.self_ty(), Some(trait_ref))\n                         } else {\n                             cx.print_def_path(parent_def_id, parent_substs)"}, {"sha": "7f28ed6c2633767707b046114fbd15b4ea8eb84e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -315,7 +315,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, a.substs, b.substs)?;\n-            Ok(relation.tcx().mk_trait_ref(a.def_id, substs))\n+            Ok(ty::TraitRef::new(relation.tcx(), a.def_id, substs))\n         }\n     }\n }"}, {"sha": "8e17c143068c3e5023e0c1c9e85e49787928e48e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -728,13 +728,13 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n             ExistentialPredicate::AutoTrait(did) => {\n                 let generics = tcx.generics_of(did);\n                 let trait_ref = if generics.params.len() == 1 {\n-                    tcx.mk_trait_ref(did, [self_ty])\n+                    ty::TraitRef::new(tcx, did, [self_ty])\n                 } else {\n                     // If this is an ill-formed auto trait, then synthesize\n                     // new error substs for the missing generics.\n                     let err_substs =\n                         ty::InternalSubsts::extend_with_error(tcx, did, &[self_ty.into()]);\n-                    tcx.mk_trait_ref(did, err_substs)\n+                    ty::TraitRef::new(tcx, did, err_substs)\n                 };\n                 self.rebind(trait_ref).without_const().to_predicate(tcx)\n             }\n@@ -850,17 +850,22 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n+        ty::TraitRef::new(tcx, trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n     }\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n     pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n-        ty::Binder::dummy(tcx.mk_trait_ref(def_id, InternalSubsts::identity_for_item(tcx, def_id)))\n+        ty::Binder::dummy(ty::TraitRef::new(\n+            tcx,\n+            def_id,\n+            InternalSubsts::identity_for_item(tcx, def_id),\n+        ))\n     }\n \n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(\n+        ty::TraitRef::new(\n+            tcx,\n             self.def_id,\n             [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n         )\n@@ -926,7 +931,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        tcx.mk_trait_ref(self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n+        ty::TraitRef::new(tcx, self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n     }\n }\n \n@@ -1245,7 +1250,7 @@ impl<'tcx> AliasTy<'tcx> {\n         let trait_def_id = self.trait_def_id(tcx);\n         let trait_generics = tcx.generics_of(trait_def_id);\n         (\n-            tcx.mk_trait_ref(trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n+            ty::TraitRef::new(tcx, trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n             &self.substs[trait_generics.count()..],\n         )\n     }\n@@ -1259,7 +1264,7 @@ impl<'tcx> AliasTy<'tcx> {\n     /// as well.\n     pub fn trait_ref(self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n         let def_id = self.trait_def_id(tcx);\n-        tcx.mk_trait_ref(def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n+        ty::TraitRef::new(tcx, def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n     }\n \n     pub fn self_ty(self) -> Ty<'tcx> {"}, {"sha": "c73f8284ca551e6118292dd3318bc5abce535a3d", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             self.tcx(),\n             ObligationCause::dummy(),\n             self.param_env,\n-            self.tcx().mk_trait_ref(partial_eq_trait_id, [ty, ty]),\n+            ty::TraitRef::new(self.tcx(), partial_eq_trait_id, [ty, ty]),\n         );\n \n         // FIXME: should this call a `predicate_must_hold` variant instead?"}, {"sha": "c71ee8e74d1312e1e5797e20dd95edd6c726ccd5", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -30,8 +30,11 @@ fn custom_coerce_unsize_info<'tcx>(\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let trait_ref =\n-        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, [source_ty, target_ty]));\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+        tcx,\n+        LangItem::CoerceUnsized,\n+        [source_ty, target_ty],\n+    ));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "505ac3d285d76a076244e12fea50cd373ff305ad", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -127,18 +127,19 @@ where\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        let (trait_ref, assoc_substs) =\n-            if tcx.def_kind(projection.def_id) != DefKind::ImplTraitPlaceholder {\n-                projection.trait_ref_and_own_substs(tcx)\n-            } else {\n-                // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n-                let trait_generics = tcx.generics_of(def_id);\n-                (\n-                    tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),\n-                    &projection.substs[trait_generics.count()..],\n-                )\n-            };\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n+            != DefKind::ImplTraitPlaceholder\n+        {\n+            projection.trait_ref_and_own_substs(tcx)\n+        } else {\n+            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+            let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n+            let trait_generics = tcx.generics_of(def_id);\n+            (\n+                ty::TraitRef::new(tcx, def_id, projection.substs.truncate_to(tcx, trait_generics)),\n+                &projection.substs[trait_generics.count()..],\n+            )\n+        };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::Continue(())"}, {"sha": "1d1a169aa9e3b6291a5afa88e94821ffd5c33bc4", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, params);\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}, {"sha": "a5dc17f9f850a7ebb4c50bf4792da3eecf7523e6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -274,8 +274,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx.at(DUMMY_SP), LangItem::Sized, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, output)| ty::ProjectionPredicate {\n@@ -333,7 +334,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n                 ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n-                    let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n+                    let sized_predicate = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                        tcx.at(DUMMY_SP),\n                         LangItem::Sized,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n                     ));"}, {"sha": "533e7b409170f9e740fe186c9ed1596c257cf60a", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -242,12 +242,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx.at(DUMMY_SP), LangItem::Sized, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, _)| {\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n+                ty::TraitRef::new(tcx, goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n             })\n             .to_predicate(tcx);\n         // A built-in `Fn` impl only holds if the output is sized.\n@@ -312,9 +313,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         Self::consider_implied_clause(\n             ecx,\n             goal,\n-            ty::Binder::dummy(\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [self_ty, generator.resume_ty()]),\n-            )\n+            ty::Binder::dummy(ty::TraitRef::new(\n+                tcx,\n+                goal.predicate.def_id(),\n+                [self_ty, generator.resume_ty()],\n+            ))\n             .to_predicate(tcx),\n             // Technically, we need to check that the generator types are Sized,\n             // but that's already proven by the generator being WF.\n@@ -360,9 +363,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         data.iter().map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty))),\n                     );\n                     // The type must be Sized to be unsized.\n-                    ecx.add_goal(\n-                        goal.with(tcx, ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty]))),\n-                    );\n+                    ecx.add_goal(goal.with(\n+                        tcx,\n+                        ty::Binder::dummy(ty::TraitRef::new(tcx, sized_def_id, [a_ty])),\n+                    ));\n                     // The type must outlive the lifetime of the `dyn` we're unsizing into.\n                     ecx.add_goal(\n                         goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n@@ -411,9 +415,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     ecx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n-                        ),\n+                        ty::Binder::dummy(ty::TraitRef::new(\n+                            tcx,\n+                            goal.predicate.def_id(),\n+                            [a_tail_ty, b_tail_ty],\n+                        )),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n@@ -432,9 +438,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     // Similar to ADTs, require that the rest of the fields are equal.\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n-                        ),\n+                        ty::Binder::dummy(ty::TraitRef::new(\n+                            tcx,\n+                            goal.predicate.def_id(),\n+                            [*a_last_ty, *b_last_ty],\n+                        )),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }"}, {"sha": "6b080a132f382af24641c4be07313cc01fa66dd7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, trait_did, [ty]);\n \n         let infcx = tcx.infer_ctxt().build();\n         let mut selcx = SelectionContext::new(&infcx);\n@@ -263,7 +263,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: infcx.tcx.mk_trait_ref(trait_did, [ty]),\n+            trait_ref: ty::TraitRef::new(infcx.tcx, trait_did, [ty]),\n \n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive"}, {"sha": "000427bbe83ec336ebf94ad506b86dbbc649aa5b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, def_id, [ty]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "11395f0bc8b3c5894a06099bf48dfb7986d9c13b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, [ty.skip_binder(), var]);\n+                let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, [ty.skip_binder(), var]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),"}, {"sha": "c814aadfddc9272fb2f20092bfcab8a088c09010", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -3485,7 +3485,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n-                        trait_ref: self.tcx.mk_trait_ref(\n+                        trait_ref: ty::TraitRef::new(self.tcx,\n                             trait_pred.def_id(),\n                             [field_ty].into_iter().chain(trait_substs),\n                         ),"}, {"sha": "edea13854ff13c654cca81a5a8a97bb573b28bed", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -127,7 +127,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     ty: Ty<'tcx>,\n     def_id: DefId,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, [ty]));\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::new(infcx.tcx, def_id, [ty]));\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const())\n }\n "}, {"sha": "c31593b7b8571ff432e992b7b6d12a2d15e6d195", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -769,9 +769,11 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(unsize_did, [tcx.types.self_param, unsized_self_ty]),\n-        )\n+        let unsize_predicate = ty::Binder::dummy(ty::TraitRef::new(\n+            tcx,\n+            unsize_did,\n+            [tcx.types.self_param, unsized_self_ty],\n+        ))\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -782,7 +784,7 @@ fn receiver_is_dispatchable<'tcx>(\n                 if param.index == 0 { unsized_self_ty.into() } else { tcx.mk_param_from_def(param) }\n             });\n \n-            ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, substs)).to_predicate(tcx)\n+            ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, substs)).to_predicate(tcx)\n         };\n \n         let caller_bounds =\n@@ -797,9 +799,11 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n-        );\n+        let predicate = ty::Binder::dummy(ty::TraitRef::new(\n+            tcx,\n+            dispatch_from_dyn_did,\n+            [receiver_ty, unsized_receiver_ty],\n+        ));\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };"}, {"sha": "61922ec9ad7baaa1d4943dc9e49b6b53d18b173f", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -1319,7 +1319,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n-        let trait_predicate = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, trait_substs));\n+        let trait_predicate = ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, trait_substs));\n \n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n@@ -1683,7 +1683,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                                 &obligation.with(\n                                     selcx.tcx(),\n                                     ty::Binder::dummy(\n-                                        selcx.tcx().at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n+                                        ty::TraitRef::from_lang_item(selcx.tcx().at(obligation.cause.span()), LangItem::Sized, [self_ty]),\n                                     )\n                                     .without_const(),\n                                 ),\n@@ -1948,9 +1948,11 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n             )\n         });\n         if check_is_sized {\n-            let sized_predicate = ty::Binder::dummy(\n-                tcx.at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n-            )\n+            let sized_predicate = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                tcx.at(obligation.cause.span()),\n+                LangItem::Sized,\n+                [self_ty],\n+            ))\n             .without_const();\n             obligations.push(obligation.with(tcx, sized_predicate));\n         }"}, {"sha": "e2e767fc23e483b089ddc7b0d88b4831b36433f8", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -454,7 +454,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 obligation.param_env,\n                 self.tcx().mk_predicate(obligation.predicate.map_bound(|mut pred| {\n                     pred.trait_ref =\n-                        self.tcx().mk_trait_ref(fn_ptr_trait, [pred.trait_ref.self_ty()]);\n+                        ty::TraitRef::new(self.tcx(), fn_ptr_trait, [pred.trait_ref.self_ty()]);\n                     ty::PredicateKind::Clause(ty::Clause::Trait(pred))\n                 })),\n             );\n@@ -629,7 +629,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let obligation =\n             traits::Obligation::new(tcx, cause.clone(), param_env, ty::Binder::dummy(trait_ref));"}, {"sha": "94197a1609e2644e8f25e7c96b37c784600f100c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -646,8 +646,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr =\n-            ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n+        let tr = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+            self.tcx().at(cause.span),\n+            LangItem::Sized,\n+            [output_ty],\n+        ));\n         nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -1050,8 +1053,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr =\n-                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [source]));\n+                let tr = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+                    tcx.at(cause.span),\n+                    LangItem::Sized,\n+                    [source],\n+                ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1121,7 +1127,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Construct the nested `TailField<T>: Unsize<TailField<U>>` predicate.\n                 let tail_unsize_obligation = obligation.with(\n                     tcx,\n-                    tcx.mk_trait_ref(obligation.predicate.def_id(), [source_tail, target_tail]),\n+                    ty::TraitRef::new(\n+                        tcx,\n+                        obligation.predicate.def_id(),\n+                        [source_tail, target_tail],\n+                    ),\n                 );\n                 nested.push(tail_unsize_obligation);\n             }\n@@ -1146,8 +1156,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Add a nested `T: Unsize<U>` predicate.\n-                let last_unsize_obligation = obligation\n-                    .with(tcx, tcx.mk_trait_ref(obligation.predicate.def_id(), [a_last, b_last]));\n+                let last_unsize_obligation = obligation.with(\n+                    tcx,\n+                    ty::TraitRef::new(tcx, obligation.predicate.def_id(), [a_last, b_last]),\n+                );\n                 nested.push(last_unsize_obligation);\n             }\n \n@@ -1271,10 +1283,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: self\n-                                .tcx()\n-                                .at(cause.span)\n-                                .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                            trait_ref: ty::TraitRef::from_lang_item(\n+                                self.tcx().at(cause.span),\n+                                LangItem::Destruct,\n+                                [nested_ty],\n+                            ),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1295,10 +1308,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: self\n-                            .tcx()\n-                            .at(cause.span)\n-                            .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                        trait_ref: ty::TraitRef::from_lang_item(\n+                            self.tcx().at(cause.span),\n+                            LangItem::Destruct,\n+                            [nested_ty],\n+                        ),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "47e169b40824b81fcf2e00dcdb996359ff9a6880", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -2412,7 +2412,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n                     self.tcx(),\n                     cause.clone(),\n                     param_env,\n-                    self.tcx().mk_trait_ref(trait_def_id, [normalized_ty]),\n+                    ty::TraitRef::new(self.tcx(), trait_def_id, [normalized_ty]),\n                 );\n                 obligations.push(obligation);\n                 obligations"}, {"sha": "7b7e297c64b16937bc02d7d2d1a73797499eb13e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -262,7 +262,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.mk_tup(sig.skip_binder().inputs()),\n     };\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -273,7 +273,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n \n@@ -284,7 +284,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }\n "}, {"sha": "35d4d8f3164795aaad1947ef4e67e9975e97d5e7", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -359,7 +359,7 @@ pub(crate) fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, [source, target]);\n+    let trait_ref = ty::TraitRef::new(tcx, unsize_trait_did, [source, target]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "9e659362ff2d542bc443cc49d9bf66e6c89e18ae", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -448,7 +448,8 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [subty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(self.tcx.at(cause.span), LangItem::Sized, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "6d6eb40f25292f8ed51300c2fce0f4534a543f50", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b01abbcd4160f0d4241bc8ec27121713d9abae/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=46b01abbcd4160f0d4241bc8ec27121713d9abae", "patch": "@@ -62,7 +62,7 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, [ty]))\n+            let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(tcx, sized_trait, [ty]))\n                 .without_const()\n                 .to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;"}]}