{"sha": "469b3d51b48cccf0b12240b8b20447a8d1369254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWIzZDUxYjQ4Y2NjZjBiMTIyNDBiOGIyMDQ0N2E4ZDEzNjkyNTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-30T22:11:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-30T22:11:34Z"}, "message": "Merge pull request #889 from Manishearth/fix-887\n\nfix #887: New lints for integer/floating-point arithmetic", "tree": {"sha": "2906857f0dc17bb182936251e1ef5bb31c6e7a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2906857f0dc17bb182936251e1ef5bb31c6e7a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469b3d51b48cccf0b12240b8b20447a8d1369254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469b3d51b48cccf0b12240b8b20447a8d1369254", "html_url": "https://github.com/rust-lang/rust/commit/469b3d51b48cccf0b12240b8b20447a8d1369254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469b3d51b48cccf0b12240b8b20447a8d1369254/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51500882166c403907be4d2977df6a30d5d1993b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51500882166c403907be4d2977df6a30d5d1993b", "html_url": "https://github.com/rust-lang/rust/commit/51500882166c403907be4d2977df6a30d5d1993b"}, {"sha": "0b40ae178a4e3dfa8ec5312562cf473adea3989e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b40ae178a4e3dfa8ec5312562cf473adea3989e", "html_url": "https://github.com/rust-lang/rust/commit/0b40ae178a4e3dfa8ec5312562cf473adea3989e"}], "stats": {"total": 191, "additions": 182, "deletions": 9}, "files": [{"sha": "6c51e5595a9b9d46e6730b0cf4f3252caf67e1d1", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -107,6 +107,7 @@ All notable changes to this project will be documented in this file.\n [`explicit_iter_loop`]: https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop\n [`extend_from_slice`]: https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice\n [`filter_next`]: https://github.com/Manishearth/rust-clippy/wiki#filter_next\n+[`float_arithmetic`]: https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic\n [`float_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#float_cmp\n [`for_kv_map`]: https://github.com/Manishearth/rust-clippy/wiki#for_kv_map\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n@@ -118,6 +119,7 @@ All notable changes to this project will be documented in this file.\n [`indexing_slicing`]: https://github.com/Manishearth/rust-clippy/wiki#indexing_slicing\n [`ineffective_bit_mask`]: https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask\n [`inline_always`]: https://github.com/Manishearth/rust-clippy/wiki#inline_always\n+[`integer_arithmetic`]: https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic\n [`invalid_regex`]: https://github.com/Manishearth/rust-clippy/wiki#invalid_regex\n [`invalid_upcast_comparisons`]: https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons\n [`items_after_statements`]: https://github.com/Manishearth/rust-clippy/wiki#items_after_statements"}, {"sha": "3b0ca3f4a3848766b7abe0edacec434b6f5e9ba7", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 144 lints included in this crate:\n+There are 146 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -56,6 +56,7 @@ name\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                             | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                               | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                           | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n+[float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                 | allow   | Any floating-point arithmetic statement\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                               | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                             | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                         | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n@@ -67,6 +68,7 @@ name\n [indexing_slicing](https://github.com/Manishearth/rust-clippy/wiki#indexing_slicing)                                 | allow   | indexing/slicing usage\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                       | warn    | `#[inline(always)]` is a bad idea in most cases\n+[integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                             | allow   | Any integer arithmetic statement\n [invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                       | deny    | finds invalid regular expressions in `Regex::new(_)` invocations\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | warn    | a comparison involving an upcast which is always true or false\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement"}, {"sha": "be732740442707bc5db37e96f60f4b8e611e0d6d", "filename": "src/arithmetic.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/src%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/src%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farithmetic.rs?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -0,0 +1,102 @@\n+use rustc::hir;\n+use rustc::lint::*;\n+use syntax::codemap::Span;\n+use utils::span_lint;\n+\n+/// **What it does:** This lint checks for plain integer arithmetic\n+///\n+/// **Why is this bad?** This is only checked against overflow in debug builds.\n+/// In some applications one wants explicitly checked, wrapping or saturating\n+/// arithmetic.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```\n+/// a + 1\n+/// ```\n+declare_restriction_lint! {\n+    pub INTEGER_ARITHMETIC,\n+    \"Any integer arithmetic statement\"\n+}\n+\n+/// **What it does:** This lint checks for float arithmetic\n+///\n+/// **Why is this bad?** For some embedded systems or kernel development, it\n+/// can be useful to rule out floating-point numbers\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```\n+/// a + 1.0\n+/// ```\n+declare_restriction_lint! {\n+    pub FLOAT_ARITHMETIC,\n+    \"Any floating-point arithmetic statement\"\n+}\n+\n+#[derive(Copy, Clone, Default)]\n+pub struct Arithmetic {\n+    span: Option<Span>\n+}\n+\n+impl LintPass for Arithmetic {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INTEGER_ARITHMETIC, FLOAT_ARITHMETIC)\n+    }\n+}\n+\n+impl LateLintPass for Arithmetic {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n+        if let Some(_) = self.span { return; }\n+        match expr.node {\n+            hir::ExprBinary(ref op, ref l, ref r) => {\n+                match op.node {\n+                    hir::BiAnd | hir::BiOr | hir::BiBitAnd |\n+                    hir::BiBitOr | hir::BiBitXor | hir::BiShl | hir::BiShr |\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe |\n+                    hir::BiGt => return,\n+                    _ => ()\n+                }\n+                let (l_ty, r_ty) = (cx.tcx.expr_ty(l), cx.tcx.expr_ty(r));\n+                if l_ty.is_integral() && r_ty.is_integral() {\n+                    span_lint(cx,\n+                              INTEGER_ARITHMETIC,\n+                              expr.span,\n+                              \"integer arithmetic detected\");\n+                    self.span = Some(expr.span);\n+                } else if l_ty.is_floating_point() && r_ty.is_floating_point() {\n+                    span_lint(cx,\n+                              FLOAT_ARITHMETIC,\n+                              expr.span,\n+                              \"floating-point arithmetic detected\");\n+                    self.span = Some(expr.span);\n+                }\n+            },\n+            hir::ExprUnary(hir::UnOp::UnNeg, ref arg) => {\n+                let ty = cx.tcx.expr_ty(arg);\n+                if ty.is_integral() {\n+                    span_lint(cx,\n+                              INTEGER_ARITHMETIC,\n+                              expr.span,\n+                              \"integer arithmetic detected\");\n+                    self.span = Some(expr.span);\n+                } else if ty.is_floating_point() {\n+                    span_lint(cx,\n+                              FLOAT_ARITHMETIC,\n+                              expr.span,\n+                              \"floating-point arithmetic detected\");\n+                    self.span = Some(expr.span);\n+                }\n+            },\n+            _ => ()\n+        }\n+    }\n+\n+    fn check_expr_post(&mut self, _: &LateContext, expr: &hir::Expr) {\n+        if Some(expr.span) == self.span {\n+            self.span = None;\n+        }\n+    }\n+}"}, {"sha": "e22d85a43e1cd43ee2ea7a2ae0a4ac73a67e556f", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -7,6 +7,7 @@\n #![feature(question_mark)]\n #![feature(stmt_expr_attributes)]\n #![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n+#![allow(float_arithmetic, integer_arithmetic)]\n \n // this only exists to allow the \"dogfood\" integration test to work\n #[allow(dead_code)]\n@@ -43,12 +44,19 @@ extern crate rustc_const_eval;\n extern crate rustc_const_math;\n use rustc_plugin::Registry;\n \n+macro_rules! declare_restriction_lint {\n+    { pub $name:tt, $description:tt } => {\n+        declare_lint! { pub $name, Allow, $description }\n+    };\n+}\n+\n pub mod consts;\n #[macro_use]\n pub mod utils;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n pub mod approx_const;\n+pub mod arithmetic;\n pub mod array_indexing;\n pub mod attrs;\n pub mod bit_mask;\n@@ -238,6 +246,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_late_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_forget::MemForget);\n+    reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n+\n+    reg.register_lint_group(\"clippy_restrictions\", vec![\n+        arithmetic::FLOAT_ARITHMETIC,\n+        arithmetic::INTEGER_ARITHMETIC,\n+    ]);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,"}, {"sha": "54ac65970ae56e84376cac9fc858fe4cd459d699", "filename": "tests/compile-fail/arithmetic.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/tests%2Fcompile-fail%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/tests%2Fcompile-fail%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farithmetic.rs?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -0,0 +1,30 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(integer_arithmetic, float_arithmetic)]\n+#![allow(unused, shadow_reuse, shadow_unrelated, no_effect)]\n+fn main() {\n+    let i = 1i32;\n+    1 + i; //~ERROR integer arithmetic detected\n+    i * 2; //~ERROR integer arithmetic detected\n+    1 % //~ERROR integer arithmetic detected\n+    i / 2; // no error, this is part of the expression in the preceding line\n+    i - 2 + 2 - i; //~ERROR integer arithmetic detected\n+    -i; //~ERROR integer arithmetic detected\n+    \n+    i & 1; // no wrapping\n+    i | 1; \n+    i ^ 1;\n+    i >> 1;\n+    i << 1;\n+    \n+    let f = 1.0f32;\n+    \n+    f * 2.0; //~ERROR floating-point arithmetic detected\n+    \n+    1.0 + f; //~ERROR floating-point arithmetic detected\n+    f * 2.0; //~ERROR floating-point arithmetic detected\n+    f / 2.0; //~ERROR floating-point arithmetic detected\n+    f - 2.0 * 4.2; //~ERROR floating-point arithmetic detected\n+    -f; //~ERROR floating-point arithmetic detected\n+}"}, {"sha": "bfed0430abb776bfbda6550d8c046e490964fbdd", "filename": "util/update_lints.py", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/469b3d51b48cccf0b12240b8b20447a8d1369254/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/469b3d51b48cccf0b12240b8b20447a8d1369254/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=469b3d51b48cccf0b12240b8b20447a8d1369254", "patch": "@@ -21,12 +21,18 @@\n     \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n ''', re.VERBOSE | re.DOTALL)\n \n+declare_restriction_lint_re = re.compile(r'''\n+    declare_restriction_lint! \\s* [{(] \\s*\n+    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n+    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n+''', re.VERBOSE | re.DOTALL)\n+\n nl_escape_re = re.compile(r'\\\\\\n\\s*')\n \n wiki_link = 'https://github.com/Manishearth/rust-clippy/wiki'\n \n \n-def collect(lints, deprecated_lints, fn):\n+def collect(lints, deprecated_lints, restriction_lints, fn):\n     \"\"\"Collect all lints from a file.\n \n     Adds entries to the lints list as `(module, name, level, desc)`.\n@@ -48,6 +54,14 @@ def collect(lints, deprecated_lints, fn):\n                                 match.group('name').lower(),\n                                 desc.replace('\\\\\"', '\"')))\n \n+    for match in declare_restriction_lint_re.finditer(code):\n+        # remove \\-newline escapes from description string\n+        desc = nl_escape_re.sub('', match.group('desc'))\n+        restriction_lints.append((os.path.splitext(os.path.basename(fn))[0],\n+                                match.group('name').lower(),\n+                                \"allow\",\n+                                desc.replace('\\\\\"', '\"')))\n+        \n \n def gen_table(lints, link=None):\n     \"\"\"Write lint table in Markdown format.\"\"\"\n@@ -86,7 +100,6 @@ def gen_deprecated(lints):\n     for lint in lints:\n         yield '    store.register_removed(\"%s\", \"%s\");\\n' % (lint[1], lint[2])\n \n-\n def replace_region(fn, region_start, region_end, callback,\n                    replace_start=True, write_back=True):\n     \"\"\"Replace a region in a file delimited by two lines matching regexes.\n@@ -128,6 +141,7 @@ def replace_region(fn, region_start, region_end, callback,\n def main(print_only=False, check=False):\n     lints = []\n     deprecated_lints = []\n+    restriction_lints = []\n \n     # check directory\n     if not os.path.isfile('src/lib.rs'):\n@@ -138,22 +152,24 @@ def main(print_only=False, check=False):\n     for root, _, files in os.walk('src'):\n         for fn in files:\n             if fn.endswith('.rs'):\n-                collect(lints, deprecated_lints, os.path.join(root, fn))\n+                collect(lints, deprecated_lints, restriction_lints, \n+                        os.path.join(root, fn))\n \n     if print_only:\n-        sys.stdout.writelines(gen_table(lints))\n+        sys.stdout.writelines(gen_table(lints + restriction_lints))\n         return\n \n     # replace table in README.md\n     changed = replace_region(\n         'README.md', r'^name +\\|', '^$',\n-        lambda: gen_table(lints, link=wiki_link),\n+        lambda: gen_table(lints + restriction_lints, link=wiki_link),\n         write_back=not check)\n \n     changed |= replace_region(\n         'README.md',\n         r'^There are \\d+ lints included in this crate:', \"\",\n-        lambda: ['There are %d lints included in this crate:\\n' % len(lints)],\n+        lambda: ['There are %d lints included in this crate:\\n' % (len(lints)\n+            + len(restriction_lints))],\n         write_back=not check)\n \n     # update the links in the CHANGELOG\n@@ -162,13 +178,14 @@ def main(print_only=False, check=False):\n         \"<!-- begin autogenerated links to wiki -->\",\n         \"<!-- end autogenerated links to wiki -->\",\n         lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], wiki_link) for l in\n-                 sorted(lints + deprecated_lints, key=lambda l: l[1])],\n+                 sorted(lints + restriction_lints + deprecated_lints, \n+                        key=lambda l: l[1])],\n         replace_start=False, write_back=not check)\n \n     # update the `pub mod` list\n     changed |= replace_region(\n         'src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(lints),\n+        lambda: gen_mods(lints + restriction_lints),\n         replace_start=False, write_back=not check)\n \n     # same for \"clippy\" lint collection\n@@ -190,6 +207,12 @@ def main(print_only=False, check=False):\n         lambda: gen_group(lints, levels=('allow',)),\n         replace_start=False, write_back=not check)\n \n+    # same for \"clippy_restrictions\" lint collection\n+    changed |= replace_region(\n+        'src/lib.rs', r'reg.register_lint_group\\(\"clippy_restrictions\"', \n+        r'\\]\\);', lambda: gen_group(restriction_lints),\n+        replace_start=False, write_back=not check)\n+\n     if check and changed:\n         print('Please run util/update_lints.py to regenerate lints lists.')\n         return 1"}]}