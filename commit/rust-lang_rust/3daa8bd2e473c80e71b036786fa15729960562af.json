{"sha": "3daa8bd2e473c80e71b036786fa15729960562af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYWE4YmQyZTQ3M2M4MGU3MWIwMzY3ODZmYTE1NzI5OTYwNTYyYWY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-17T23:07:35Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-17T23:10:10Z"}, "message": "Generate proc macro harness in AST order.\n\nThis ensures that we match the order used by proc macro metadata\nserialization.\n\nFixes #64251", "tree": {"sha": "86320cfa65f38d79245d748156a6270ce1560d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86320cfa65f38d79245d748156a6270ce1560d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3daa8bd2e473c80e71b036786fa15729960562af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl2BZ+UACgkQtAh+UQ6Y\nsWRoeg//cTTtljoZhW7vc3A4NOsWP9BxLlm1KNbe30A0itOfPh3fVovkxgCXXZsP\nAaqnD7y0RRgnKhrw8/9NLOK84yFOi9LKoLmLGf/aFBAeFvAqQHwDMDVxwNSKc6eg\nxNqLr/Rw8PiZjMNFJb24LOtYolEb6gelhtoZIcWBQhIHyG0hpRDI22Kv806ef4pv\notgz9m4jP78MYMY9+njDJ98T1S4YIokzDhQmZ1gUjVchYsVJu2B9rC6SuuXyTdkF\n3dr5eJG1VNem18yO91W2sUxHlXyFkjNjVvZMcrGR/8JbQ08hkGFMSKpRVObBwELY\ndTufpIuUIhgAsT/tB8tHFFj17Vw19cBaynyrEWthDaW+SdU8s0zaksY4WeWSkwAp\ncFdyO56/OkmDDC6X3MOK4dc/Z/mIPvbb9qp/XJjZBdPRz1s4oPsVifvkfF7MRHLx\nIKgoxXo+nUo5L9irTh260LJaCzo4JP8IuWCCTRffvfDyDm3jg/LRcC/7+jrm4OxA\n2sCfnlIBAJ1hy3JOKavW0aGQyoe4cy7VvlUrPeho5PlJ68GYhmcop6rcm2+8rt4F\nMp5vbd9Xid8UZSP2Hh4B3StRLb5A94oK4FK4by7lygvqWR6PHIJC1iFa//+wmxPe\nKtOoNKbJctKrrjVnuRS/L8ztOreraWpZLMISpIXgHkp2mx4C91g=\n=2maa\n-----END PGP SIGNATURE-----", "payload": "tree 86320cfa65f38d79245d748156a6270ce1560d78\nparent 7efe1c6e678a263b9464f2e7f06f552b4d4db5a5\nauthor Aaron Hill <aa1ronham@gmail.com> 1568761655 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1568761810 -0400\n\nGenerate proc macro harness in AST order.\n\nThis ensures that we match the order used by proc macro metadata\nserialization.\n\nFixes #64251\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3daa8bd2e473c80e71b036786fa15729960562af", "html_url": "https://github.com/rust-lang/rust/commit/3daa8bd2e473c80e71b036786fa15729960562af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3daa8bd2e473c80e71b036786fa15729960562af/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efe1c6e678a263b9464f2e7f06f552b4d4db5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efe1c6e678a263b9464f2e7f06f552b4d4db5a5", "html_url": "https://github.com/rust-lang/rust/commit/7efe1c6e678a263b9464f2e7f06f552b4d4db5a5"}], "stats": {"total": 128, "additions": 79, "deletions": 49}, "files": [{"sha": "34c84b1d79d4b0030a418cb4328bb94bb407f952", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3daa8bd2e473c80e71b036786fa15729960562af/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daa8bd2e473c80e71b036786fa15729960562af/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3daa8bd2e473c80e71b036786fa15729960562af", "patch": "@@ -489,7 +489,11 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn raw_proc_macro(&self, id: DefIndex) -> &ProcMacro {\n         // DefIndex's in root.proc_macro_data have a one-to-one correspondence\n-        // with items in 'raw_proc_macros'\n+        // with items in 'raw_proc_macros'.\n+        // NOTE: If you update the order of macros in 'proc_macro_data' for any reason,\n+        // you must also update src/libsyntax_ext/proc_macro_harness.rs\n+        // Failing to do so will result in incorrect data being associated\n+        // with proc macros when deserialized.\n         let pos = self.root.proc_macro_data.unwrap().decode(self).position(|i| i == id).unwrap();\n         &self.raw_proc_macros.unwrap()[pos]\n     }"}, {"sha": "f33c813d86cfe4e8aea1fdae5974e06e6a30af0a", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 62, "deletions": 47, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/3daa8bd2e473c80e71b036786fa15729960562af/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daa8bd2e473c80e71b036786fa15729960562af/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=3daa8bd2e473c80e71b036786fa15729960562af", "patch": "@@ -20,15 +20,24 @@ struct ProcMacroDerive {\n     attrs: Vec<ast::Name>,\n }\n \n+enum ProcMacroDefType {\n+    Attr,\n+    Bang\n+}\n+\n struct ProcMacroDef {\n     function_name: Ident,\n     span: Span,\n+    def_type: ProcMacroDefType\n+}\n+\n+enum ProcMacro {\n+    Derive(ProcMacroDerive),\n+    Def(ProcMacroDef)\n }\n \n struct CollectProcMacros<'a> {\n-    derives: Vec<ProcMacroDerive>,\n-    attr_macros: Vec<ProcMacroDef>,\n-    bang_macros: Vec<ProcMacroDef>,\n+    macros: Vec<ProcMacro>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n     is_proc_macro_crate: bool,\n@@ -46,22 +55,22 @@ pub fn inject(sess: &ParseSess,\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n \n-    let (derives, attr_macros, bang_macros) = {\n-        let mut collect = CollectProcMacros {\n-            derives: Vec::new(),\n-            attr_macros: Vec::new(),\n-            bang_macros: Vec::new(),\n-            in_root: true,\n-            handler,\n-            is_proc_macro_crate,\n-            is_test_crate,\n-        };\n-        if has_proc_macro_decls || is_proc_macro_crate {\n-            visit::walk_crate(&mut collect, &krate);\n-        }\n-        (collect.derives, collect.attr_macros, collect.bang_macros)\n+    let mut collect = CollectProcMacros {\n+        macros: Vec::new(),\n+        in_root: true,\n+        handler,\n+        is_proc_macro_crate,\n+        is_test_crate,\n     };\n \n+    if has_proc_macro_decls || is_proc_macro_crate {\n+        visit::walk_crate(&mut collect, &krate);\n+    }\n+    // NOTE: If you change the order of macros in this vec\n+    // for any reason, you must also update 'raw_proc_macro'\n+    // in src/librustc_metadata/decoder.rs\n+    let macros = collect.macros;\n+\n     if !is_proc_macro_crate {\n         return krate\n     }\n@@ -74,7 +83,7 @@ pub fn inject(sess: &ParseSess,\n         return krate;\n     }\n \n-    krate.module.items.push(mk_decls(&mut cx, &derives, &attr_macros, &bang_macros));\n+    krate.module.items.push(mk_decls(&mut cx, &macros));\n \n     krate\n }\n@@ -161,12 +170,12 @@ impl<'a> CollectProcMacros<'a> {\n         };\n \n         if self.in_root && item.vis.node.is_pub() {\n-            self.derives.push(ProcMacroDerive {\n+            self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n                 span: item.span,\n                 trait_name: trait_ident.name,\n                 function_name: item.ident,\n                 attrs: proc_attrs,\n-            });\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro_derive]` must \\\n@@ -180,10 +189,11 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n-            self.attr_macros.push(ProcMacroDef {\n+            self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n-            });\n+                def_type: ProcMacroDefType::Attr\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro_attribute]` must \\\n@@ -197,10 +207,11 @@ impl<'a> CollectProcMacros<'a> {\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n-            self.bang_macros.push(ProcMacroDef {\n+            self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n-            });\n+                def_type: ProcMacroDefType::Bang\n+            }));\n         } else {\n             let msg = if !self.in_root {\n                 \"functions tagged with `#[proc_macro]` must \\\n@@ -322,9 +333,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //      }\n fn mk_decls(\n     cx: &mut ExtCtxt<'_>,\n-    custom_derives: &[ProcMacroDerive],\n-    custom_attrs: &[ProcMacroDef],\n-    custom_macros: &[ProcMacroDef],\n+    macros: &[ProcMacro],\n ) -> P<ast::Item> {\n     let expn_id = cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n@@ -354,26 +363,32 @@ fn mk_decls(\n         let proc_macro_ty_method_path = |method| cx.expr_path(cx.path(span, vec![\n             proc_macro, bridge, client, proc_macro_ty, method,\n         ]));\n-        custom_derives.iter().map(|cd| {\n-            cx.expr_call(span, proc_macro_ty_method_path(custom_derive), vec![\n-                cx.expr_str(cd.span, cd.trait_name),\n-                cx.expr_vec_slice(\n-                    span,\n-                    cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n-                ),\n-                local_path(cd.span, cd.function_name),\n-            ])\n-        }).chain(custom_attrs.iter().map(|ca| {\n-            cx.expr_call(span, proc_macro_ty_method_path(attr), vec![\n-                cx.expr_str(ca.span, ca.function_name.name),\n-                local_path(ca.span, ca.function_name),\n-            ])\n-        })).chain(custom_macros.iter().map(|cm| {\n-            cx.expr_call(span, proc_macro_ty_method_path(bang), vec![\n-                cx.expr_str(cm.span, cm.function_name.name),\n-                local_path(cm.span, cm.function_name),\n-            ])\n-        })).collect()\n+        macros.iter().map(|m| {\n+            match m {\n+                ProcMacro::Derive(cd) => {\n+                    cx.expr_call(span, proc_macro_ty_method_path(custom_derive), vec![\n+                        cx.expr_str(cd.span, cd.trait_name),\n+                        cx.expr_vec_slice(\n+                            span,\n+                            cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n+                        ),\n+                        local_path(cd.span, cd.function_name),\n+                    ])\n+                },\n+                ProcMacro::Def(ca) => {\n+                    let ident = match ca.def_type {\n+                        ProcMacroDefType::Attr => attr,\n+                        ProcMacroDefType::Bang => bang\n+                    };\n+\n+                    cx.expr_call(span, proc_macro_ty_method_path(ident), vec![\n+                        cx.expr_str(ca.span, ca.function_name.name),\n+                        local_path(ca.span, ca.function_name),\n+                    ])\n+\n+                }\n+            }\n+        }).collect()\n     };\n \n     let decls_static = cx.item_static("}, {"sha": "3dc8de3fe579de37215c9a25cf65e35ee227cb4d", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3daa8bd2e473c80e71b036786fa15729960562af/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daa8bd2e473c80e71b036786fa15729960562af/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=3daa8bd2e473c80e71b036786fa15729960562af", "patch": "@@ -10,8 +10,19 @@ extern crate some_macros;\n // @has proc_macro/macro.some_proc_macro.html\n // @has proc_macro/attr.some_proc_attr.html\n // @has proc_macro/derive.SomeDerive.html\n-pub use some_macros::{some_proc_macro, some_proc_attr, SomeDerive};\n+\n+// @has proc_macro/macro.some_proc_macro.html\n+// @has - 'a proc-macro that swallows its input and does nothing.'\n+pub use some_macros::some_proc_macro;\n \n // @has proc_macro/macro.reexported_macro.html\n // @has - 'Doc comment from the original crate'\n pub use some_macros::reexported_macro;\n+\n+// @has proc_macro/attr.some_proc_attr.html\n+// @has - 'a proc-macro attribute that passes its item through verbatim.'\n+pub use some_macros::some_proc_attr;\n+\n+// @has proc_macro/derive.SomeDerive.html\n+// @has - 'a derive attribute that adds nothing to its input.'\n+pub use some_macros::SomeDerive;"}]}