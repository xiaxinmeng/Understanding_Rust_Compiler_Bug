{"sha": "b4f448a7ea47049ad6392afc3684e17372cb4469", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjQ0OGE3ZWE0NzA0OWFkNjM5MmFmYzM2ODRlMTczNzJjYjQ0Njk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-12T17:14:54Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-13T09:50:32Z"}, "message": "non_fmt_panic: machine app. suggestion for assert with string msg.", "tree": {"sha": "0493a6f7fb8bd633f5c1473772553cd2fe8c9867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0493a6f7fb8bd633f5c1473772553cd2fe8c9867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f448a7ea47049ad6392afc3684e17372cb4469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f448a7ea47049ad6392afc3684e17372cb4469", "html_url": "https://github.com/rust-lang/rust/commit/b4f448a7ea47049ad6392afc3684e17372cb4469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f448a7ea47049ad6392afc3684e17372cb4469/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "html_url": "https://github.com/rust-lang/rust/commit/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "23c4bc7d608f321c82bf0ca79d25e7c843f70f5a", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4f448a7ea47049ad6392afc3684e17372cb4469/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f448a7ea47049ad6392afc3684e17372cb4469/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=b4f448a7ea47049ad6392afc3684e17372cb4469", "patch": "@@ -120,13 +120,26 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 );\n             }\n         } else {\n+            let ty = cx.typeck_results().expr_ty(arg);\n+            // If this is a &str or String, we can confidently give the `\"{}\", ` suggestion.\n+            let is_str = matches!(\n+                ty.kind(),\n+                ty::Ref(_, r, _) if *r.kind() == ty::Str\n+            ) || matches!(\n+                (ty.ty_adt_def(), cx.tcx.get_diagnostic_item(sym::string_type)),\n+                (Some(ty_def), Some(string_type)) if ty_def.did == string_type\n+            );\n             l.span_suggestion_verbose(\n                 arg_span.shrink_to_lo(),\n                 \"add a \\\"{}\\\" format string to Display the message\",\n                 \"\\\"{}\\\", \".into(),\n-                Applicability::MaybeIncorrect,\n+                if is_str {\n+                    Applicability::MachineApplicable\n+                } else {\n+                    Applicability::MaybeIncorrect\n+                },\n             );\n-            if panic == sym::std_panic_macro {\n+            if !is_str && panic == sym::std_panic_macro {\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n                     l.multipart_suggestion(\n                         \"or use std::panic::panic_any instead\","}]}