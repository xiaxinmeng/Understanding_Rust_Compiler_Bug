{"sha": "88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTcwMmE2ZWM1ZTE2NmYyMGRmYzUxZWFhNGI4NWZjNGEwNDVkNmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T19:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-13T19:35:33Z"}, "message": "Rollup merge of #67256 - RalfJung:reduce-allocs, r=oli-obk\n\nReduce allocs for validation errors\n\nThis probably doesn't really matter, but I just felt like I had to do this...\n\nr? @oli-obk", "tree": {"sha": "f0ef0e3efd4148076e7cb2734ca1265c54d83967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ef0e3efd4148076e7cb2734ca1265c54d83967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8+gFCRBK7hj4Ov3rIwAAdHIIABklyv8wuYa616C05UtsUt0X\nfdhN2e5tk1DLiVuTjbA7o3JgvyBcRHM8kHJQl82p1o2vkpKAtM6DrnkW5LMBdp5n\nZWXr3ohJoygU9PML4oVUIkxm3ePB7rufazSnlkSLjs0cuc3iV7tFIkSD5HOcRdyW\nM9KzmhwJj7uwTHZqOEaJ5zaOtbOMWwrG91ZRY3Ymd1HSraebqCNRpFo+8VL/A5UJ\nDpgw/sfuZvzHrFVrSWvCb+JKfJoGWxWhmYpQ7LG8yZzAJSOvFmBuMoZdcEhh58yc\n2MX2uwzGG2aVxT5ec0mIvXpEzT1xQ9d1M9h/1NSGnBkebQqQ8ZqZnS3xFSby+BI=\n=RU+1\n-----END PGP SIGNATURE-----\n", "payload": "tree f0ef0e3efd4148076e7cb2734ca1265c54d83967\nparent a0be3a683d40981b5ea19c94640621f0816c3b1a\nparent 14b2436993461c3c703baab29a9d9579bea461fc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576265733 +0100\ncommitter GitHub <noreply@github.com> 1576265733 +0100\n\nRollup merge of #67256 - RalfJung:reduce-allocs, r=oli-obk\n\nReduce allocs for validation errors\n\nThis probably doesn't really matter, but I just felt like I had to do this...\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b", "html_url": "https://github.com/rust-lang/rust/commit/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0be3a683d40981b5ea19c94640621f0816c3b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0be3a683d40981b5ea19c94640621f0816c3b1a", "html_url": "https://github.com/rust-lang/rust/commit/a0be3a683d40981b5ea19c94640621f0816c3b1a"}, {"sha": "14b2436993461c3c703baab29a9d9579bea461fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b2436993461c3c703baab29a9d9579bea461fc", "html_url": "https://github.com/rust-lang/rust/commit/14b2436993461c3c703baab29a9d9579bea461fc"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "1dbcfe5588e48c75e421e113bbb9e2a5ab116b3b", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=88e702a6ec5e166f20dfc51eaa4b85fc4a045d6b", "patch": "@@ -22,28 +22,23 @@ use super::{\n \n macro_rules! throw_validation_failure {\n     ($what:expr, $where:expr, $details:expr) => {{\n-        let where_ = path_format(&$where);\n-        let where_ = if where_.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" at {}\", where_)\n-        };\n-        throw_unsup!(ValidationFailure(format!(\n-            \"encountered {}{}, but expected {}\",\n-            $what, where_, $details,\n-        )))\n+        let mut msg = format!(\"encountered {}\", $what);\n+        let where_ = &$where;\n+        if !where_.is_empty() {\n+            msg.push_str(\" at \");\n+            write_path(&mut msg, where_);\n+        }\n+        write!(&mut msg, \", but expected {}\", $details).unwrap();\n+        throw_unsup!(ValidationFailure(msg))\n     }};\n     ($what:expr, $where:expr) => {{\n-        let where_ = path_format(&$where);\n-        let where_ = if where_.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" at {}\", where_)\n-        };\n-        throw_unsup!(ValidationFailure(format!(\n-            \"encountered {}{}\",\n-            $what, where_,\n-        )))\n+        let mut msg = format!(\"encountered {}\", $what);\n+        let where_ = &$where;\n+        if !where_.is_empty() {\n+            msg.push_str(\" at \");\n+            write_path(&mut msg, where_);\n+        }\n+        throw_unsup!(ValidationFailure(msg))\n     }};\n }\n \n@@ -60,7 +55,7 @@ macro_rules! try_validation {\n             Ok(x) => x,\n             Err(_) => throw_validation_failure!($what, $where),\n         }\n-    }}\n+    }};\n }\n \n /// We want to show a nice path to the invalid field for diagnostics,\n@@ -113,10 +108,9 @@ impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH>\n }\n \n /// Format a path\n-fn path_format(path: &Vec<PathElem>) -> String {\n+fn write_path(out: &mut String, path: &Vec<PathElem>) {\n     use self::PathElem::*;\n \n-    let mut out = String::new();\n     for elem in path.iter() {\n         match elem {\n             Field(name) => write!(out, \".{}\", name),\n@@ -135,7 +129,6 @@ fn path_format(path: &Vec<PathElem>) -> String {\n             DynDowncast => write!(out, \".<dyn-downcast>\"),\n         }.unwrap()\n     }\n-    out\n }\n \n // Test if a range that wraps at overflow contains `test`\n@@ -428,7 +421,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                             err_unsup!(InvalidNullPointerUsage) =>\n                                 throw_validation_failure!(\"NULL reference\", self.path),\n                             err_unsup!(AlignmentCheckFailed { required, has }) =>\n-                                throw_validation_failure!(format!(\"unaligned reference \\\n+                                throw_validation_failure!(format_args!(\"unaligned reference \\\n                                     (required {} byte alignment but found {})\",\n                                     required.bytes(), has.bytes()), self.path),\n                             err_unsup!(ReadBytesAsPointer) =>\n@@ -519,7 +512,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         let value = try_validation!(value.not_undef(),\n             value,\n             self.path,\n-            format!(\n+            format_args!(\n                 \"something {}\",\n                 wrapping_range_format(&layout.valid_range, max_hi),\n             )\n@@ -532,7 +525,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         throw_validation_failure!(\n                             \"a potentially NULL pointer\",\n                             self.path,\n-                            format!(\n+                            format_args!(\n                                 \"something that cannot possibly fail to be {}\",\n                                 wrapping_range_format(&layout.valid_range, max_hi)\n                             )\n@@ -545,7 +538,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     throw_validation_failure!(\n                         \"a pointer\",\n                         self.path,\n-                        format!(\n+                        format_args!(\n                             \"something that cannot possibly fail to be {}\",\n                             wrapping_range_format(&layout.valid_range, max_hi)\n                         )\n@@ -562,7 +555,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             throw_validation_failure!(\n                 bits,\n                 self.path,\n-                format!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n+                format_args!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n             )\n         }\n     }"}]}