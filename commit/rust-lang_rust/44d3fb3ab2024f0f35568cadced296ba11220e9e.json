{"sha": "44d3fb3ab2024f0f35568cadced296ba11220e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDNmYjNhYjIwMjRmMGYzNTU2OGNhZGNlZDI5NmJhMTEyMjBlOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-15T16:56:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-15T16:56:10Z"}, "message": "Auto merge of #56846 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #56677 (#[must_use] on traits in stdlib)\n - #56679 (overhaul external doc attribute diagnostics)\n - #56682 (Update the stdsimd submodule)\n - #56691 (fix install broken link)\n - #56710 (Always set the RDRAND and RDSEED features on SGX)\n - #56713 (Test capacity of ZST vector)\n - #56841 (Add some unit tests to compiletest)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5eb6a523c684e01d99f08046d6613904e007b3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb6a523c684e01d99f08046d6613904e007b3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d3fb3ab2024f0f35568cadced296ba11220e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d3fb3ab2024f0f35568cadced296ba11220e9e", "html_url": "https://github.com/rust-lang/rust/commit/44d3fb3ab2024f0f35568cadced296ba11220e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d3fb3ab2024f0f35568cadced296ba11220e9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "html_url": "https://github.com/rust-lang/rust/commit/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387"}, {"sha": "3566812b041280af5a29056d36cdc516c3c14b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/3566812b041280af5a29056d36cdc516c3c14b94", "html_url": "https://github.com/rust-lang/rust/commit/3566812b041280af5a29056d36cdc516c3c14b94"}], "stats": {"total": 253, "additions": 233, "deletions": 20}, "files": [{"sha": "dc013a1ad2be66985b47fc5d0a8313cdd1169bed", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -10,7 +10,7 @@ standard library, and documentation.\n \n Read [\"Installation\"] from [The Book].\n \n-[\"Installation\"]: https://doc.rust-lang.org/book/second-edition/ch01-01-installation.html\n+[\"Installation\"]: https://doc.rust-lang.org/book/ch01-01-installation.html\n [The Book]: https://doc.rust-lang.org/book/index.html\n \n ## Building from Source"}, {"sha": "509195cd047d4846427df0efa53cc7ed9c29124e", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -79,6 +79,11 @@ fn test_reserve() {\n     assert!(v.capacity() >= 33)\n }\n \n+#[test]\n+fn test_zst_capacity() {\n+    assert_eq!(Vec::<()>::new().capacity(), usize::max_value());\n+}\n+\n #[test]\n fn test_extend() {\n     let mut v = Vec::new();"}, {"sha": "5dee1d6dd3a39dcb66115401481d41e23eb7341c", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -33,6 +33,7 @@ use task::{Poll, LocalWaker};\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n+#[must_use]\n pub trait Future {\n     /// The result of the `Future`.\n     type Output;"}, {"sha": "c0b83a6868b383aab4b4df2a8529e234f54051ba", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -98,6 +98,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n+#[must_use]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3b356b9a1e7b4ee73206f66895da7c99ee7fc041", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -72,6 +72,7 @@\n     label=\"expected an `Fn<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait Fn<Args> : FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -150,6 +151,7 @@ pub trait Fn<Args> : FnMut<Args> {\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -228,6 +230,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n     label=\"expected an `FnOnce<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"}, {"sha": "5b6d8abc5ef3e51c0244e07c971266f1588b7a8f", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -49,6 +49,7 @@ pub fn target() -> Result<Target, String> {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         cpu: \"x86-64\".into(),\n+        features: \"+rdrnd,+rdseed\".into(),\n         position_independent_executables: true,\n         pre_link_args: iter::once(\n                 (LinkerFlavor::Gcc, PRE_LINK_ARGS.iter().cloned().map(String::from).collect())"}, {"sha": "03c7aa9682477701d5fc0efa52ba72b720088418", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{self, Block, Ident, NodeId, PatKind, Path};\n+use ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use attr::{self, HasAttrs};\n use source_map::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n@@ -1535,21 +1535,65 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                             let item = attr::mk_list_item(DUMMY_SP, include_ident, include_info);\n                             items.push(dummy_spanned(ast::NestedMetaItemKind::MetaItem(item)));\n                         }\n-                        Err(ref e) if e.kind() == ErrorKind::InvalidData => {\n-                            self.cx.span_err(\n-                                at.span,\n-                                &format!(\"{} wasn't a utf-8 file\", filename.display()),\n-                            );\n-                        }\n                         Err(e) => {\n-                            self.cx.span_err(\n-                                at.span,\n-                                &format!(\"couldn't read {}: {}\", filename.display(), e),\n-                            );\n+                            let lit = it\n+                                .meta_item()\n+                                .and_then(|item| item.name_value_literal())\n+                                .unwrap();\n+\n+                            if e.kind() == ErrorKind::InvalidData {\n+                                self.cx\n+                                    .struct_span_err(\n+                                        lit.span,\n+                                        &format!(\"{} wasn't a utf-8 file\", filename.display()),\n+                                    )\n+                                    .span_label(lit.span, \"contains invalid utf-8\")\n+                                    .emit();\n+                            } else {\n+                                let mut err = self.cx.struct_span_err(\n+                                    lit.span,\n+                                    &format!(\"couldn't read {}: {}\", filename.display(), e),\n+                                );\n+                                err.span_label(lit.span, \"couldn't read file\");\n+\n+                                if e.kind() == ErrorKind::NotFound {\n+                                    err.help(\"external doc paths are relative to the crate root\");\n+                                }\n+\n+                                err.emit();\n+                            }\n                         }\n                     }\n                 } else {\n-                    items.push(noop_fold_meta_list_item(it, self));\n+                    let mut err = self.cx.struct_span_err(\n+                        it.span,\n+                        &format!(\"expected path to external documentation\"),\n+                    );\n+\n+                    // Check if the user erroneously used `doc(include(...))` syntax.\n+                    let literal = it.meta_item_list().and_then(|list| {\n+                        if list.len() == 1 {\n+                            list[0].literal().map(|literal| &literal.node)\n+                        } else {\n+                            None\n+                        }\n+                    });\n+\n+                    let (path, applicability) = match &literal {\n+                        Some(LitKind::Str(path, ..)) => {\n+                            (path.to_string(), Applicability::MachineApplicable)\n+                        }\n+                        _ => (String::from(\"<path>\"), Applicability::HasPlaceholders),\n+                    };\n+\n+                    err.span_suggestion_with_applicability(\n+                        it.span,\n+                        \"provide a file path with `=`\",\n+                        format!(\"include = \\\"{}\\\"\", path),\n+                        applicability,\n+                    );\n+\n+                    err.emit();\n                 }\n             }\n "}, {"sha": "3c0503db8439928e42c1175f0009c506fc874ae9", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -1 +1 @@\n-Subproject commit 5e628c5120c619a22799187371f057ec41e06f87\n+Subproject commit 3c0503db8439928e42c1175f0009c506fc874ae9"}, {"sha": "4bb5c59722ad17258f6dd751047bce3040e28c31", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -0,0 +1,47 @@\n+#![deny(unused_must_use)]\n+#![feature(futures_api, pin, arbitrary_self_types)]\n+\n+use std::iter::Iterator;\n+use std::future::Future;\n+\n+use std::task::{Poll, LocalWaker};\n+use std::pin::Pin;\n+use std::unimplemented;\n+\n+struct MyFuture;\n+\n+impl Future for MyFuture {\n+   type Output = u32;\n+\n+   fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<u32> {\n+      Poll::Pending\n+   }\n+}\n+\n+fn iterator() -> impl Iterator {\n+   std::iter::empty::<u32>()\n+}\n+\n+fn future() -> impl Future {\n+   MyFuture\n+}\n+\n+fn square_fn_once() -> impl FnOnce(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn square_fn_mut() -> impl FnMut(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn square_fn() -> impl Fn(u32) -> u32 {\n+   |x| x * x\n+}\n+\n+fn main() {\n+   iterator(); //~ ERROR unused implementer of `std::iter::Iterator` that must be used\n+   future(); //~ ERROR unused implementer of `std::future::Future` that must be used\n+   square_fn_once(); //~ ERROR unused implementer of `std::ops::FnOnce` that must be used\n+   square_fn_mut(); //~ ERROR unused implementer of `std::ops::FnMut` that must be used\n+   square_fn(); //~ ERROR unused implementer of `std::ops::Fn` that must be used\n+}"}, {"sha": "dc1115b82db40a8a77bfc8509b79dbbee6f7d43a", "filename": "src/test/ui/extern/auxiliary/invalid-utf8.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -0,0 +1 @@\n+\ufffd(\n\\ No newline at end of file"}, {"sha": "e17dda65568e9139d6cdcdf190f990f3a103f25b", "filename": "src/test/ui/extern/external-doc-error.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -2,7 +2,31 @@\n \n #![feature(external_doc)]\n \n-#[doc(include = \"not-a-file.md\")] //~ ERROR: couldn't read\n-pub struct SomeStruct;\n+#[doc(include = \"not-a-file.md\")]\n+pub struct SomeStruct; //~^ ERROR couldn't read\n+                       //~| HELP external doc paths are relative to the crate root\n+\n+#[doc(include = \"auxiliary/invalid-utf8.txt\")]\n+pub struct InvalidUtf8; //~^ ERROR wasn't a utf-8 file\n+\n+#[doc(include)]\n+pub struct MissingPath; //~^ ERROR expected path\n+                        //~| HELP provide a file path with `=`\n+                        //~| SUGGESTION include = \"<path>\"\n+\n+#[doc(include(\"../README.md\"))]\n+pub struct InvalidPathSyntax; //~^ ERROR expected path\n+                              //~| HELP provide a file path with `=`\n+                              //~| SUGGESTION include = \"../README.md\"\n+\n+#[doc(include = 123)]\n+pub struct InvalidPathType; //~^ ERROR expected path\n+                            //~| HELP provide a file path with `=`\n+                            //~| SUGGESTION include = \"<path>\"\n+\n+#[doc(include(123))]\n+pub struct InvalidPathSyntaxAndType; //~^ ERROR expected path\n+                                     //~| HELP provide a file path with `=`\n+                                     //~| SUGGESTION include = \"<path>\"\n \n fn main() {}"}, {"sha": "a3be3277de5455691be7259c318e267e9262a3c2", "filename": "src/test/ui/extern/external-doc-error.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -1,8 +1,40 @@\n error: couldn't read $DIR/not-a-file.md: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/external-doc-error.rs:5:1\n+  --> $DIR/external-doc-error.rs:5:17\n    |\n-LL | #[doc(include = \"not-a-file.md\")] //~ ERROR: couldn't read\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[doc(include = \"not-a-file.md\")]\n+   |                 ^^^^^^^^^^^^^^^ couldn't read file\n+   |\n+   = help: external doc paths are relative to the crate root\n+\n+error: $DIR/auxiliary/invalid-utf8.txt wasn't a utf-8 file\n+  --> $DIR/external-doc-error.rs:9:17\n+   |\n+LL | #[doc(include = \"auxiliary/invalid-utf8.txt\")]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ contains invalid utf-8\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:12:7\n+   |\n+LL | #[doc(include)]\n+   |       ^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:17:7\n+   |\n+LL | #[doc(include(\"../README.md\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"../README.md\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:22:7\n+   |\n+LL | #[doc(include = 123)]\n+   |       ^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:27:7\n+   |\n+LL | #[doc(include(123))]\n+   |       ^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n \n-error: aborting due to previous error\n+error: aborting due to 6 previous errors\n "}, {"sha": "8b3023e63dfb49c732a5f2668629a416c2684e09", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -873,3 +873,29 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     *line = &line[end + 1..];\n     Some(result)\n }\n+\n+#[test]\n+fn test_parse_normalization_string() {\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n+\n+    // Nothing to normalize (No quotes)\n+    let mut s = \"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, r#\"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\"#);\n+\n+    // Nothing to normalize (Only a single quote)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\");\n+\n+    // Nothing to normalize (Three quotes)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n+}"}, {"sha": "381d808e8028f9f5760b976d4042e94865d7e445", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d3fb3ab2024f0f35568cadced296ba11220e9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=44d3fb3ab2024f0f35568cadced296ba11220e9e", "patch": "@@ -86,6 +86,8 @@ pub fn matches_os(triple: &str, name: &str) -> bool {\n     }\n     panic!(\"Cannot determine OS from triple\");\n }\n+\n+/// Determine the architecture from `triple`\n pub fn get_arch(triple: &str) -> &'static str {\n     let triple: Vec<_> = triple.split('-').collect();\n     for &(triple_arch, arch) in ARCH_TABLE {\n@@ -151,3 +153,29 @@ impl PathBufExt for PathBuf {\n         }\n     }\n }\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine Architecture from triple\")]\n+fn test_get_arch_failure() {\n+    get_arch(\"abc\");\n+}\n+\n+#[test]\n+fn test_get_arch() {\n+    assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n+    assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n+}\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine OS from triple\")]\n+fn test_matches_os_failure() {\n+    matches_os(\"abc\", \"abc\");\n+}\n+\n+#[test]\n+fn test_matches_os() {\n+    assert!(matches_os(\"x86_64-unknown-linux-gnu\", \"linux\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"emscripten\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"wasm32-bare\"));\n+    assert!(!matches_os(\"wasm32-unknown-unknown\", \"windows\"));\n+}"}]}