{"sha": "0b64e5796ba3f501042f02d416a7a625802e9e44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjRlNTc5NmJhM2Y1MDEwNDJmMDJkNDE2YTdhNjI1ODAyZTllNDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-16T20:18:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:32:42Z"}, "message": "Make ExprUseVisitor<..> use inherited parameter environments.", "tree": {"sha": "082bec96ed19d46bdbd8f2f079f5e415e385b5f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082bec96ed19d46bdbd8f2f079f5e415e385b5f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b64e5796ba3f501042f02d416a7a625802e9e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b64e5796ba3f501042f02d416a7a625802e9e44", "html_url": "https://github.com/rust-lang/rust/commit/0b64e5796ba3f501042f02d416a7a625802e9e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b64e5796ba3f501042f02d416a7a625802e9e44/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08d004545edf1bf16ee670fd27b8d3a477341a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08d004545edf1bf16ee670fd27b8d3a477341a5", "html_url": "https://github.com/rust-lang/rust/commit/c08d004545edf1bf16ee670fd27b8d3a477341a5"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "b7e67ea4690594d7a2232f9f8b11e88264f27b64", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -1065,7 +1065,7 @@ fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,\n     };\n     let mut visitor = ExprUseVisitor::new(&mut checker,\n                                           checker.cx.tcx,\n-                                          cx.param_env.clone());\n+                                          &cx.param_env);\n     visitor.walk_expr(guard);\n }\n "}, {"sha": "494d85f7ba56df35ab77b36013b7640a45aa3f82", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n                 fn_id: ast::NodeId) {\n         {\n             let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n-            let mut euv = euv::ExprUseVisitor::new(self, self.tcx, param_env);\n+            let mut euv = euv::ExprUseVisitor::new(self, self.tcx, &param_env);\n             euv.walk_fn(fd, b);\n         }\n         visit::walk_fn(self, fk, fd, b, s)"}, {"sha": "e8df8e84029641bb7f7f0825db0f21dc8dc8eaab", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -72,7 +72,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n     };\n     {\n         let param_env = ty::empty_parameter_environment();\n-        let visitor = euv::ExprUseVisitor::new(&mut checker, tcx, param_env);\n+        let visitor = euv::ExprUseVisitor::new(&mut checker, tcx, &param_env);\n         visit::walk_crate(&mut GlobalVisitor(visitor), tcx.map.krate());\n     }\n     visit::walk_crate(&mut CheckStaticVisitor {"}, {"sha": "059f38f0930d19aab5e3948e445306b693274900", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -295,11 +295,11 @@ impl OverloadedCallType {\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n \n-pub struct ExprUseVisitor<'d,'t,'tcx,TYPER:'t> {\n+pub struct ExprUseVisitor<'d,'t,'tcx:'t,TYPER:'t> {\n     typer: &'t TYPER,\n     mc: mc::MemCategorizationContext<'t,TYPER>,\n     delegate: &'d mut (Delegate<'tcx>+'d),\n-    param_env: ParameterEnvironment<'tcx>,\n+    param_env: &'t ParameterEnvironment<'tcx>,\n }\n \n /// Whether the elements of an overloaded operation are passed by value or by reference\n@@ -311,7 +311,7 @@ enum PassArgs {\n impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n     pub fn new(delegate: &'d mut Delegate<'tcx>,\n                typer: &'t TYPER,\n-               param_env: ParameterEnvironment<'tcx>)\n+               param_env: &'t ParameterEnvironment<'tcx>)\n                -> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         ExprUseVisitor {\n             typer: typer,\n@@ -355,7 +355,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                         cmt: mc::cmt<'tcx>) {\n         let mode = copy_or_move(self.tcx(),\n                                 cmt.ty,\n-                                &self.param_env,\n+                                self.param_env,\n                                 DirectRefMove);\n         self.delegate.consume(consume_id, consume_span, cmt, mode);\n     }\n@@ -998,7 +998,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                     ast::PatIdent(ast::BindByValue(_), _, _) => {\n                         match copy_or_move(tcx,\n                                            cmt_pat.ty,\n-                                           &self.param_env,\n+                                           self.param_env,\n                                            PatBindingMove) {\n                             Copy => mode.lub(CopyingMatch),\n                             Move(_) => mode.lub(MovingMatch),\n@@ -1028,8 +1028,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         let typer = self.typer;\n         let def_map = &self.typer.tcx().def_map;\n         let delegate = &mut self.delegate;\n-        let param_env = &mut self.param_env;\n-\n+        let param_env = self.param_env;\n         mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n             if pat_util::pat_is_binding(def_map, pat) {\n                 let tcx = typer.tcx();\n@@ -1249,7 +1248,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                                                 closure_expr.span,\n                                                 freevar.def);\n             let mode = copy_or_move(self.tcx(), cmt_var.ty,\n-                                    &self.param_env, CaptureMove);\n+                                    self.param_env, CaptureMove);\n             self.delegate.consume(closure_expr.id, freevar.span, cmt_var, mode);\n         }\n     }"}, {"sha": "2062685f4c86698ba35f230765b6e332389580c2", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -210,7 +210,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     {\n         let mut euv = euv::ExprUseVisitor::new(&mut clcx,\n                                                bccx.tcx,\n-                                               param_env.clone());\n+                                               &param_env);\n         euv.walk_fn(decl, body);\n     }\n }"}, {"sha": "7854c8acb4796a145fc36e498dab3b587a899bfd", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -53,7 +53,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     {\n         let mut euv = euv::ExprUseVisitor::new(&mut glcx,\n                                                bccx.tcx,\n-                                               param_env);\n+                                               &param_env);\n         euv.walk_fn(decl, body);\n     }\n "}, {"sha": "db0536869351f75f1075abac6349bec164d5c665", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b64e5796ba3f501042f02d416a7a625802e9e44/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=0b64e5796ba3f501042f02d416a7a625802e9e44", "patch": "@@ -1263,7 +1263,7 @@ fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool\n     };\n     {\n         let param_env = ty::empty_parameter_environment();\n-        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx, param_env);\n+        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx, &param_env);\n         visitor.walk_expr(body);\n     }\n     rc.reassigned"}]}