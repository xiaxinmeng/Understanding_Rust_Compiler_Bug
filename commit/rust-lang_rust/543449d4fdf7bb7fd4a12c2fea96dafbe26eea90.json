{"sha": "543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MzQ0OWQ0ZmRmN2JiN2ZkNGExMmMyZmVhOTZkYWZiZTI2ZWVhOTA=", "commit": {"author": {"name": "Ayose", "email": "ayosec@gmail.com", "date": "2019-07-20T00:55:58Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-07T15:05:21Z"}, "message": "[RFC 2091] Add #[track_caller] attribute.\n\n- The attribute is behind a feature gate.\n- Error if both #[naked] and #[track_caller] are applied to the same function.\n- Error if #[track_caller] is applied to a non-function item.\n- Error if ABI is not \"rust\"\n- Error if #[track_caller] is applied to a trait function.\n\nError codes and descriptions are pending.", "tree": {"sha": "3f1550e764c244fd3908871db551aed213ed29d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1550e764c244fd3908871db551aed213ed29d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "html_url": "https://github.com/rust-lang/rust/commit/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/comments", "author": {"login": "ayosec", "id": 37484, "node_id": "MDQ6VXNlcjM3NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/37484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayosec", "html_url": "https://github.com/ayosec", "followers_url": "https://api.github.com/users/ayosec/followers", "following_url": "https://api.github.com/users/ayosec/following{/other_user}", "gists_url": "https://api.github.com/users/ayosec/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayosec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayosec/subscriptions", "organizations_url": "https://api.github.com/users/ayosec/orgs", "repos_url": "https://api.github.com/users/ayosec/repos", "events_url": "https://api.github.com/users/ayosec/events{/privacy}", "received_events_url": "https://api.github.com/users/ayosec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64", "html_url": "https://github.com/rust-lang/rust/commit/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64"}], "stats": {"total": 200, "additions": 199, "deletions": 1}, "files": [{"sha": "afc11a2b9492cfa8ef06de26bebf2a1662a2d195", "filename": "src/doc/unstable-book/src/language-features/track-caller.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrack-caller.md?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,5 @@\n+# `track_caller`\n+\n+The tracking issue for this feature is: [#47809](https://github.com/rust-lang/rust/issues/47809).\n+\n+------------------------"}, {"sha": "959a06c2e32f60f7d15b86567c24a9f36e3dedfb", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -1640,6 +1640,16 @@ each method; it is not possible to annotate the entire impl with an `#[inline]`\n attribute.\n \"##,\n \n+E0900: r##\"\n+TODO: change error number\n+TODO: track_caller: invalid syntax\n+\"##,\n+\n+E0901: r##\"\n+TODO: change error number\n+TODO: track_caller: no naked functions\n+\"##,\n+\n E0522: r##\"\n The lang attribute is intended for marking special items that are built-in to\n Rust itself. This includes special traits (like `Copy` and `Sized`) that affect"}, {"sha": "31a09645d16918998c1be7afaab303c2cef3c9e1", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -94,6 +94,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks any attribute.\n     fn check_attributes(&self, item: &hir::Item, target: Target) {\n         let mut is_valid = true;\n+        let mut track_caller_span = None;\n         for attr in &item.attrs {\n             is_valid &= if attr.check_name(sym::inline) {\n                 self.check_inline(attr, &item.span, target)\n@@ -103,6 +104,9 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_marker(attr, item, target)\n             } else if attr.check_name(sym::target_feature) {\n                 self.check_target_feature(attr, item, target)\n+            } else if attr.check_name(sym::track_caller) {\n+                track_caller_span = Some(attr.span);\n+                self.check_track_caller(attr, &item, target)\n             } else {\n                 true\n             };\n@@ -118,6 +122,19 @@ impl CheckAttrVisitor<'tcx> {\n \n         self.check_repr(item, target);\n         self.check_used(item, target);\n+\n+        // Checks if `#[track_caller]` and `#[naked]` are both used.\n+        if let Some(span) = track_caller_span {\n+            if item.attrs.iter().any(|attr| attr.check_name(sym::naked)) {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0901,\n+                    \"cannot use `#[track_caller]` with `#[naked]`\",\n+                )\n+                .emit();\n+            }\n+        }\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n@@ -135,6 +152,23 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    /// Checks if a `#[target_feature]` can be applied.\n+    fn check_track_caller(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n+        if target != Target::Fn {\n+            struct_span_err!(\n+                self.tcx.sess,\n+                attr.span,\n+                E0900,\n+                \"attribute should be applied to function\"\n+            )\n+            .span_label(item.span, \"not a function\")\n+            .emit();\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n     /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n     fn check_non_exhaustive(\n         &self,"}, {"sha": "f7240d6bf820eb0b9852968af03d112a6441cdc3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -2721,7 +2721,9 @@ bitflags! {\n         const USED                      = 1 << 9;\n         /// #[ffi_returns_twice], indicates that an extern function can return\n         /// multiple times\n-        const FFI_RETURNS_TWICE = 1 << 10;\n+        const FFI_RETURNS_TWICE         = 1 << 10;\n+        /// #[track_caller]: allow access to the caller location\n+        const TRACK_CALLER              = 1 << 11;\n     }\n }\n "}, {"sha": "3c9010de5cb77c419c1ce1f50769dce5dad5135b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -172,6 +172,18 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n+\n+    // Prohibits applying `#[track_caller]` to trait methods\n+    for attr in &trait_item.attrs {\n+        if attr.check_name(sym::track_caller) {\n+            struct_span_err!(\n+                tcx.sess,\n+                attr.span,\n+                E0903,\n+                \"`#[track_caller]` is not supported for trait items yet.\"\n+            ).emit();\n+        }\n+    }\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {"}, {"sha": "0b98e4b781d77359bc6519b4bcd7b9f364e2d75c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -2594,6 +2594,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if attr.check_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n+        } else if attr.check_name(sym::track_caller) {\n+            if tcx.fn_sig(id).abi() != abi::Abi::Rust {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0902,\n+                    \"rust ABI is required to use `#[track_caller]`\"\n+                ).emit();\n+            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n         } else if attr.check_name(sym::export_name) {\n             if let Some(s) = attr.value_str() {\n                 if s.as_str().contains(\"\\0\") {"}, {"sha": "f698427c78add301ab35e1bd73d5df8c17a587ce", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -4907,6 +4907,17 @@ fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n The `Box<...>` ensures that the result is of known size,\n and the pin is required to keep it in the same place in memory.\n \"##,\n+\n+E0902: r##\"\n+TODO: change error number\n+TODO: track_caller: require Rust ABI to use track_caller\n+\"##,\n+\n+E0903: r##\"\n+TODO: change error number\n+TODO: track_caller: can't apply in traits\n+\"##,\n+\n ;\n //  E0035, merged into E0087/E0089\n //  E0036, merged into E0087/E0089"}, {"sha": "312a9bf6e755f369566f0bf5bf1af55ebc253a99", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -525,6 +525,9 @@ declare_features! (\n     // Allows the use of raw-dylibs (RFC 2627).\n     (active, raw_dylib, \"1.40.0\", Some(58713), None),\n \n+    /// Enable accurate caller location reporting during panic (RFC 2091).\n+    (active, track_caller, \"1.37.0\", Some(47809), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "d6a6450e471bdf5f8afc6759b283c3f4c43aa714", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -499,6 +499,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(no_debug)\n         )\n     ),\n+    gated!(\n+        track_caller, Whitelisted, template!(Word),\n+        \"the `#[track_caller]` attribute is an experimental feature\",\n+    ),\n     gated!(\n         // Used in resolve:\n         prelude_import, Whitelisted, template!(Word),"}, {"sha": "2b005c3fc421a192c8031c84933aa9a13282a306", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -674,6 +674,7 @@ symbols! {\n         tool_attributes,\n         tool_lints,\n         trace_macros,\n+        track_caller,\n         trait_alias,\n         transmute,\n         transparent,"}, {"sha": "458df0b2b02818b180b775354a44a7fa6e36a097", "filename": "src/test/ui/feature-gates/feature-gate-track_caller.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,6 @@\n+\n+#[track_caller]\n+fn f() {}\n+//~^^ ERROR the `#[track_caller]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "9a058736e5080d294dbc605ecf8ec65f7fcab11a", "filename": "src/test/ui/feature-gates/feature-gate-track_caller.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-track_caller.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[track_caller]` attribute is an experimental feature\n+  --> $DIR/feature-gate-track_caller.rs:2:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/47809\n+   = help: add `#![feature(track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d6560231871c9936ada4723327f7c9d458519ec8", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)]\n+\n+#[track_caller(1)]\n+fn f() {}\n+//~^^ ERROR malformed `track_caller` attribute input\n+\n+fn main() {}"}, {"sha": "8906fa59506a7cbd81be74db660b3d93538a06d3", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `track_caller` attribute input\n+  --> $DIR/error-odd-syntax.rs:3:1\n+   |\n+LL | #[track_caller(1)]\n+   | ^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[track_caller]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c42a1b3faa2dc0246ebb346d1805e66d89e2662", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)]\n+\n+#[track_caller]\n+extern \"C\" fn f() {}\n+//~^^ ERROR rust ABI is required to use `#[track_caller]`\n+\n+fn main() {}"}, {"sha": "fc6f4d17dcc42fd127ed3c7e562b01a2ed6c6a1f", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,9 @@\n+error[E0902]: rust ABI is required to use `#[track_caller]`\n+  --> $DIR/error-with-invalid-abi.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0902`."}, {"sha": "dd9e5d04135851cd4f1fe97c6ed828cae38b11b8", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,8 @@\n+#![feature(naked_functions, track_caller)]\n+\n+#[track_caller]\n+#[naked]\n+fn f() {}\n+//~^^^ ERROR cannot use `#[track_caller]` with `#[naked]`\n+\n+fn main() {}"}, {"sha": "3566d288ed10b869553318692fcbc2d06c471fb2", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,9 @@\n+error[E0901]: cannot use `#[track_caller]` with `#[naked]`\n+  --> $DIR/error-with-naked.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0901`."}, {"sha": "c00cf7367ce54136cfde63dc211d332aaaec4663", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fns.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,13 @@\n+#![feature(track_caller)]\n+\n+trait Trait {\n+    #[track_caller]\n+    fn unwrap(&self);\n+    //~^^ ERROR: `#[track_caller]` is not supported for trait items yet.\n+}\n+\n+impl Trait for u64 {\n+    fn unwrap(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "bd3d4043a642b9124b6159edd83bb446d298631e", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fns.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fns.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,9 @@\n+error[E0903]: `#[track_caller]` is not supported for trait items yet.\n+  --> $DIR/error-with-trait-fns.rs:4:5\n+   |\n+LL |     #[track_caller]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0903`."}, {"sha": "0fd59b4bf4918f69c040800fc2b676a128ac59d5", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,7 @@\n+#![feature(track_caller)]\n+\n+#[track_caller]\n+struct S;\n+//~^^ ERROR attribute should be applied to function\n+\n+fn main() {}"}, {"sha": "9ddc99c02bf9c83a58857a1570b66e270b9b7881", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/543449d4fdf7bb7fd4a12c2fea96dafbe26eea90/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr?ref=543449d4fdf7bb7fd4a12c2fea96dafbe26eea90", "patch": "@@ -0,0 +1,11 @@\n+error[E0900]: attribute should be applied to function\n+  --> $DIR/only-for-fns.rs:3:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+LL | struct S;\n+   | --------- not a function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0900`."}]}