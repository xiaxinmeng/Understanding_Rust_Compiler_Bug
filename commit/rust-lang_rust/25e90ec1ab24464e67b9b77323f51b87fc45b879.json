{"sha": "25e90ec1ab24464e67b9b77323f51b87fc45b879", "node_id": "C_kwDOAAsO6NoAKDI1ZTkwZWMxYWIyNDQ2NGU2N2I5Yjc3MzIzZjUxYjg3ZmM0NWI4Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T15:06:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T15:06:09Z"}, "message": "Auto merge of #8143 - GuillaumeGomez:RETURN_SELF_NOT_MUST_USE, r=xFrednet\n\nEnsure that RETURN_SELF_NOT_MUST_USE is not emitted if the method already has `#[must_use]`\n\nFixes https://github.com/rust-lang/rust-clippy/issues/8140.\n\n---\n\nEdit:\n\nchangelog: none\n\n(The lint is not in beta yet, this should therefore not be included inside the changelog :) )", "tree": {"sha": "306e933a2fdb39c25f461a8906a7aefc7dd4c7a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306e933a2fdb39c25f461a8906a7aefc7dd4c7a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e90ec1ab24464e67b9b77323f51b87fc45b879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e90ec1ab24464e67b9b77323f51b87fc45b879", "html_url": "https://github.com/rust-lang/rust/commit/25e90ec1ab24464e67b9b77323f51b87fc45b879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e90ec1ab24464e67b9b77323f51b87fc45b879/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3bf9d1dcfd428232dfd2196a124c8e6e5bc7b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3bf9d1dcfd428232dfd2196a124c8e6e5bc7b86", "html_url": "https://github.com/rust-lang/rust/commit/a3bf9d1dcfd428232dfd2196a124c8e6e5bc7b86"}, {"sha": "4da55202050818d7bb2ac5d4eabdf8dd1a1b7ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da55202050818d7bb2ac5d4eabdf8dd1a1b7ff9", "html_url": "https://github.com/rust-lang/rust/commit/4da55202050818d7bb2ac5d4eabdf8dd1a1b7ff9"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "2ff7f6bbb38a2d3a49fea4cf612540327022d3ac", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25e90ec1ab24464e67b9b77323f51b87fc45b879/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e90ec1ab24464e67b9b77323f51b87fc45b879/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=25e90ec1ab24464e67b9b77323f51b87fc45b879", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -86,6 +86,8 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n             // We are only interested in methods, not in functions or associated functions.\n             if matches!(kind, FnKind::Method(_, _, _));\n             if let Some(fn_def) = cx.tcx.hir().opt_local_def_id(hir_id);\n+            // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n+            if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n             if let Some(impl_def) = cx.tcx.impl_of_method(fn_def.to_def_id());\n             // We don't want this method to be te implementation of a trait because the\n             // `#[must_use]` should be put on the trait definition directly."}, {"sha": "2fa389dec0a7d10aeed83dccdd5c284d6516fa17", "filename": "tests/ui/return_self_not_must_use.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25e90ec1ab24464e67b9b77323f51b87fc45b879/tests%2Fui%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e90ec1ab24464e67b9b77323f51b87fc45b879/tests%2Fui%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.rs?ref=25e90ec1ab24464e67b9b77323f51b87fc45b879", "patch": "@@ -5,12 +5,12 @@ pub struct Bar;\n \n pub trait Whatever {\n     fn what(&self) -> Self;\n-    // There should be no warning here!\n+    // There should be no warning here! (returns a reference)\n     fn what2(&self) -> &Self;\n }\n \n impl Bar {\n-    // There should be no warning here!\n+    // There should be no warning here! (note taking a self argument)\n     pub fn not_new() -> Self {\n         Self\n     }\n@@ -20,22 +20,27 @@ impl Bar {\n     pub fn bar(self) -> Self {\n         self\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (private method)\n     fn foo2(&self) -> Self {\n         Self\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (returns a reference)\n     pub fn foo3(&self) -> &Self {\n         self\n     }\n+    // There should be no warning here! (already a `must_use` attribute)\n+    #[must_use]\n+    pub fn foo4(&self) -> Self {\n+        Self\n+    }\n }\n \n impl Whatever for Bar {\n-    // There should be no warning here!\n+    // There should be no warning here! (comes from the trait)\n     fn what(&self) -> Self {\n         self.foo2()\n     }\n-    // There should be no warning here!\n+    // There should be no warning here! (comes from the trait)\n     fn what2(&self) -> &Self {\n         self\n     }"}]}