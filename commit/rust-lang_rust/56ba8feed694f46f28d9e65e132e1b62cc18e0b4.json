{"sha": "56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YmE4ZmVlZDY5NGY0NmYyOGQ5ZTY1ZTEzMmUxYjYyY2MxOGUwYjQ=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-24T03:35:44Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-10-28T03:09:10Z"}, "message": "Update libsyntax tests.", "tree": {"sha": "6ce352314dd6224200d0582c7a027ca91ae205c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce352314dd6224200d0582c7a027ca91ae205c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "html_url": "https://github.com/rust-lang/rust/commit/56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ba8feed694f46f28d9e65e132e1b62cc18e0b4/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5024924ad6d7403c8ab73798b30ff501a10a391", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5024924ad6d7403c8ab73798b30ff501a10a391", "html_url": "https://github.com/rust-lang/rust/commit/e5024924ad6d7403c8ab73798b30ff501a10a391"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "a468f0d1d98f1ae4b762a253d6105cc8d7d0c6d7", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ba8feed694f46f28d9e65e132e1b62cc18e0b4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba8feed694f46f28d9e65e132e1b62cc18e0b4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "patch": "@@ -856,7 +856,7 @@ mod tests {\n \n     #[test] fn parse_stmt_1 () {\n         assert!(string_to_stmt(\"b;\".to_string()) ==\n-                   P(Spanned{\n+                   Some(P(Spanned{\n                        node: ast::StmtExpr(P(ast::Expr {\n                            id: ast::DUMMY_NODE_ID,\n                            node: ast::ExprPath(None, ast::Path {\n@@ -871,7 +871,7 @@ mod tests {\n                             }),\n                            span: sp(0,1)}),\n                                            ast::DUMMY_NODE_ID),\n-                       span: sp(0,1)}))\n+                       span: sp(0,1)})))\n \n     }\n "}, {"sha": "57138bf26ee069040b9e588b157c03c26ad567ce", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56ba8feed694f46f28d9e65e132e1b62cc18e0b4/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba8feed694f46f28d9e65e132e1b62cc18e0b4/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=56ba8feed694f46f28d9e65e132e1b62cc18e0b4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use parse::{ParseSess,filemap_to_tts};\n+use parse::{ParseSess,PResult,filemap_to_tts};\n use parse::new_parser_from_source_str;\n use parse::parser::Parser;\n use parse::token;\n@@ -31,51 +31,49 @@ pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a>\n }\n \n fn with_error_checking_parse<T, F>(s: String, f: F) -> T where\n-    F: FnOnce(&mut Parser) -> T,\n+    F: FnOnce(&mut Parser) -> PResult<T>,\n {\n     let ps = ParseSess::new();\n     let mut p = string_to_parser(&ps, s);\n-    let x = f(&mut p);\n+    let x = panictry!(f(&mut p));\n     p.abort_if_errors();\n     x\n }\n \n /// Parse a string, return a crate.\n pub fn string_to_crate (source_str : String) -> ast::Crate {\n     with_error_checking_parse(source_str, |p| {\n-        panictry!(p.parse_crate_mod())\n+        p.parse_crate_mod()\n     })\n }\n \n /// Parse a string, return an expr\n pub fn string_to_expr (source_str : String) -> P<ast::Expr> {\n     with_error_checking_parse(source_str, |p| {\n-        p.parse_expr()\n+        p.parse_expr_nopanic()\n     })\n }\n \n /// Parse a string, return an item\n pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> {\n     with_error_checking_parse(source_str, |p| {\n-        p.parse_item()\n+        p.parse_item_nopanic()\n     })\n }\n \n /// Parse a string, return a stmt\n-pub fn string_to_stmt(source_str : String) -> P<ast::Stmt> {\n+pub fn string_to_stmt(source_str : String) -> Option<P<ast::Stmt>> {\n     with_error_checking_parse(source_str, |p| {\n-        p.parse_stmt().unwrap()\n+        p.parse_stmt_nopanic()\n     })\n }\n \n /// Parse a string, return a pat. Uses \"irrefutable\"... which doesn't\n /// (currently) affect parsing.\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {\n-    // Binding `sess` and `parser` works around dropck-injected\n-    // region-inference issues; see #25212, #22323, #22321.\n-    let sess = ParseSess::new();\n-    let mut parser = string_to_parser(&sess, source_str);\n-    parser.parse_pat()\n+    with_error_checking_parse(source_str, |p| {\n+        p.parse_pat_nopanic()\n+    })\n }\n \n /// Convert a vector of strings to a vector of ast::Ident's"}]}