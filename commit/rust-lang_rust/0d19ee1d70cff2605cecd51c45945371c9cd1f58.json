{"sha": "0d19ee1d70cff2605cecd51c45945371c9cd1f58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTllZTFkNzBjZmYyNjA1Y2VjZDUxYzQ1OTQ1MzcxYzljZDFmNTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T11:17:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T14:25:57Z"}, "message": "Simplify", "tree": {"sha": "a8ab05dc4424e4d222ca239426e8d897a1c65635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ab05dc4424e4d222ca239426e8d897a1c65635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d19ee1d70cff2605cecd51c45945371c9cd1f58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d19ee1d70cff2605cecd51c45945371c9cd1f58", "html_url": "https://github.com/rust-lang/rust/commit/0d19ee1d70cff2605cecd51c45945371c9cd1f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d19ee1d70cff2605cecd51c45945371c9cd1f58/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bcdcbb3615b0d1d47ca7c4abf2c3dd5ab0b73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bcdcbb3615b0d1d47ca7c4abf2c3dd5ab0b73d", "html_url": "https://github.com/rust-lang/rust/commit/66bcdcbb3615b0d1d47ca7c4abf2c3dd5ab0b73d"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "886b586a331e5d5ec3657a71bde118ef582fc50c", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d19ee1d70cff2605cecd51c45945371c9cd1f58/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d19ee1d70cff2605cecd51c45945371c9cd1f58/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=0d19ee1d70cff2605cecd51c45945371c9cd1f58", "patch": "@@ -200,23 +200,19 @@ impl ProjectWorkspace {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n             ProjectWorkspace::Json { project, sysroot } => {\n-                let sysroot_dps = sysroot\n+                let sysroot_deps = sysroot\n                     .as_ref()\n                     .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, target, load));\n \n                 let mut cfg_cache: FxHashMap<Option<&str>, Vec<CfgFlag>> = FxHashMap::default();\n-                let crates: FxHashMap<_, _> = project\n+                let crates: FxHashMap<CrateId, CrateId> = project\n                     .crates()\n                     .filter_map(|(crate_id, krate)| {\n                         let file_path = &krate.root_module;\n-                        let file_id = match load(&file_path) {\n-                            Some(id) => id,\n-                            None => {\n-                                log::error!(\"failed to load crate root {}\", file_path.display());\n-                                return None;\n-                            }\n-                        };\n-\n+                        let file_id = load(&file_path)?;\n+                        Some((crate_id, krate, file_id))\n+                    })\n+                    .map(|(crate_id, krate, file_id)| {\n                         let env = krate.env.clone().into_iter().collect();\n                         let proc_macro = krate\n                             .proc_macro_dylib_path\n@@ -230,8 +226,7 @@ impl ProjectWorkspace {\n \n                         let mut cfg_options = CfgOptions::default();\n                         cfg_options.extend(target_cfgs.iter().chain(krate.cfg.iter()).cloned());\n-\n-                        Some((\n+                        (\n                             crate_id,\n                             crate_graph.add_crate_root(\n                                 file_id,\n@@ -241,21 +236,20 @@ impl ProjectWorkspace {\n                                 env,\n                                 proc_macro.unwrap_or_default(),\n                             ),\n-                        ))\n+                        )\n                     })\n                     .collect();\n \n                 for (from, krate) in project.crates() {\n                     if let Some(&from) = crates.get(&from) {\n-                        if let Some((public_deps, _proc_macro)) = &sysroot_dps {\n+                        if let Some((public_deps, _proc_macro)) = &sysroot_deps {\n                             for (name, to) in public_deps.iter() {\n                                 add_dep(&mut crate_graph, from, name.clone(), *to)\n                             }\n                         }\n \n                         for dep in &krate.deps {\n-                            let to_crate_id = dep.crate_id;\n-                            if let Some(&to) = crates.get(&to_crate_id) {\n+                            if let Some(&to) = crates.get(&dep.crate_id) {\n                                 add_dep(&mut crate_graph, from, dep.name.clone(), to)\n                             }\n                         }"}, {"sha": "001bf59498fb453535bba7cdc130f91f28dc5b99", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d19ee1d70cff2605cecd51c45945371c9cd1f58/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d19ee1d70cff2605cecd51c45945371c9cd1f58/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=0d19ee1d70cff2605cecd51c45945371c9cd1f58", "patch": "@@ -203,7 +203,11 @@ impl GlobalState {\n                     let contents = loader.handle.load_sync(path);\n                     vfs.set_file_contents(vfs_path.clone(), contents);\n                 }\n-                vfs.file_id(&vfs_path)\n+                let res = vfs.file_id(&vfs_path);\n+                if res.is_none() {\n+                    log::error!(\"failed to load {}\", path.display())\n+                }\n+                res\n             };\n             for ws in workspaces.iter() {\n                 crate_graph.extend(ws.to_crate_graph("}]}