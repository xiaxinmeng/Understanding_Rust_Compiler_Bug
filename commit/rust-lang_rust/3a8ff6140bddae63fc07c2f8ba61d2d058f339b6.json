{"sha": "3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "node_id": "C_kwDOAAsO6NoAKDNhOGZmNjE0MGJkZGFlNjNmYzA3YzJmOGJhNjFkMmQwNThmMzM5YjY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T09:07:49Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T09:08:47Z"}, "message": "Introduce an ArchiveBuilderBuilder\n\nThis avoids monomorphizing all linker code for each codegen backend and\nwill allow passing in extra information to the archive builder from the\ncodegen backend.", "tree": {"sha": "03e2c4ee02dc137cf9340fc0368bcf14cf078cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e2c4ee02dc137cf9340fc0368bcf14cf078cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "html_url": "https://github.com/rust-lang/rust/commit/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f34865aed4f8e841eaf4ce129f7b13c334d784", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f34865aed4f8e841eaf4ce129f7b13c334d784", "html_url": "https://github.com/rust-lang/rust/commit/56f34865aed4f8e841eaf4ce129f7b13c334d784"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "f863abdcc97ec12739924bc026ac9d8e1849b928", "filename": "src/archive.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "patch": "@@ -1,7 +1,7 @@\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n+use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n use rustc_session::Session;\n \n use rustc_session::cstore::DllImport;\n@@ -21,41 +21,56 @@ enum ArchiveEntry {\n     File(PathBuf),\n }\n \n-pub struct ArArchiveBuilder<'a> {\n-    config: ArchiveConfig<'a>,\n-    src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n-    // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n-    // the end of an archive for linkers to not get confused.\n-    entries: Vec<(String, ArchiveEntry)>,\n-}\n+pub struct ArArchiveBuilderBuilder;\n \n-impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session) -> Self {\n+impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n+    fn new_archive_builder<'a>(&self, sess: &'a Session) -> Box<dyn ArchiveBuilder<'a> + 'a> {\n         let config = ArchiveConfig {\n             sess,\n             use_native_ar: false,\n             // FIXME test for linux and System V derivatives instead\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n         };\n \n-        ArArchiveBuilder {\n+        Box::new(ArArchiveBuilder {\n             config,\n             src_archives: vec![],\n             entries: vec![],\n-        }\n+        })\n     }\n \n+    fn create_dll_import_lib(\n+        &self,\n+        _sess: &Session,\n+        _lib_name: &str,\n+        _dll_imports: &[DllImport],\n+        _tmpdir: &Path,\n+    ) -> PathBuf {\n+        unimplemented!();\n+    }\n+}\n+\n+pub struct ArArchiveBuilder<'a> {\n+    config: ArchiveConfig<'a>,\n+    src_archives: Vec<(PathBuf, ar::Archive<File>)>,\n+    // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n+    // the end of an archive for linkers to not get confused.\n+    entries: Vec<(String, ArchiveEntry)>,\n+}\n+\n+impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string(),\n             ArchiveEntry::File(file.to_owned()),\n         ));\n     }\n \n-    fn add_archive<F>(&mut self, archive_path: &Path, mut skip: F) -> std::io::Result<()>\n-    where\n-        F: FnMut(&str) -> bool + 'static,\n-    {\n+    fn add_archive(\n+        &mut self,\n+        archive_path: &Path,\n+        mut skip: Box<dyn FnMut(&str) -> bool + 'static>,\n+    ) -> std::io::Result<()> {\n         let mut archive = ar::Archive::new(std::fs::File::open(&archive_path)?);\n         let archive_index = self.src_archives.len();\n \n@@ -75,7 +90,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self, output: &Path) -> bool {\n+    fn build(mut self: Box<Self>, output: &Path) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -171,13 +186,4 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n         any_members\n     }\n-\n-    fn create_dll_import_lib(\n-        _sess: &Session,\n-        _lib_name: &str,\n-        _dll_imports: &[DllImport],\n-        _tmpdir: &Path,\n-    ) -> PathBuf {\n-        unimplemented!();\n-    }\n }"}, {"sha": "8a206c0368fcb0ec2c7e5ad9bdecac3b99e87c16", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8ff6140bddae63fc07c2f8ba61d2d058f339b6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3a8ff6140bddae63fc07c2f8ba61d2d058f339b6", "patch": "@@ -133,8 +133,9 @@ impl CodegenBackend for GccCodegenBackend {\n     fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n+        link_binary(\n             sess,\n+            &crate::archive::ArArchiveBuilderBuilder,\n             &codegen_results,\n             outputs,\n         )"}]}