{"sha": "f46a42f73aa92ab66800c70d525ddc7e6529edd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NmE0MmY3M2FhOTJhYjY2ODAwYzcwZDUyNWRkYzdlNjUyOWVkZDY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-11T13:24:39Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:49:27Z"}, "message": "Better tests: check if match checking bails out.", "tree": {"sha": "b637d359ea9aca5b2310f0e6e1fdd9b0b7feee2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b637d359ea9aca5b2310f0e6e1fdd9b0b7feee2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46a42f73aa92ab66800c70d525ddc7e6529edd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46a42f73aa92ab66800c70d525ddc7e6529edd6", "html_url": "https://github.com/rust-lang/rust/commit/f46a42f73aa92ab66800c70d525ddc7e6529edd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46a42f73aa92ab66800c70d525ddc7e6529edd6/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84efc4a4656e54a4f08b99592d5d98ac5726449", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84efc4a4656e54a4f08b99592d5d98ac5726449", "html_url": "https://github.com/rust-lang/rust/commit/e84efc4a4656e54a4f08b99592d5d98ac5726449"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "0a7e6ee52d8e6077e017003165eea550ca3cd4db", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f46a42f73aa92ab66800c70d525ddc7e6529edd6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46a42f73aa92ab66800c70d525ddc7e6529edd6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=f46a42f73aa92ab66800c70d525ddc7e6529edd6", "patch": "@@ -346,6 +346,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             // fit the match expression, we skip this diagnostic. Skipping the entire\n             // diagnostic rather than just not including this match arm is preferred\n             // to avoid the chance of false positives.\n+            #[cfg(test)]\n+            match_check::tests::report_bail_out(db, self.owner, arm.pat, self.sink);\n             return;\n         }\n "}, {"sha": "5f0cc4145c6e08456a7a4d32aa74aadd838265b1", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f46a42f73aa92ab66800c70d525ddc7e6529edd6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46a42f73aa92ab66800c70d525ddc7e6529edd6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=f46a42f73aa92ab66800c70d525ddc7e6529edd6", "patch": "@@ -339,9 +339,60 @@ impl PatternFoldable for PatKind {\n }\n \n #[cfg(test)]\n-mod tests {\n+pub(super) mod tests {\n+    mod report {\n+        use std::any::Any;\n+\n+        use hir_def::{expr::PatId, DefWithBodyId};\n+        use hir_expand::{HirFileId, InFile};\n+        use syntax::SyntaxNodePtr;\n+\n+        use crate::{\n+            db::HirDatabase,\n+            diagnostics_sink::{Diagnostic, DiagnosticCode, DiagnosticSink},\n+        };\n+\n+        /// In tests, match check bails out loudly.\n+        /// This helps to catch incorrect tests that pass due to false negatives.\n+        pub(crate) fn report_bail_out(\n+            db: &dyn HirDatabase,\n+            def: DefWithBodyId,\n+            pat: PatId,\n+            sink: &mut DiagnosticSink,\n+        ) {\n+            let (_, source_map) = db.body_with_source_map(def);\n+            if let Ok(source_ptr) = source_map.pat_syntax(pat) {\n+                let pat_syntax_ptr = source_ptr.value.either(Into::into, Into::into);\n+                sink.push(BailedOut { file: source_ptr.file_id, pat_syntax_ptr });\n+            }\n+        }\n+\n+        #[derive(Debug)]\n+        struct BailedOut {\n+            file: HirFileId,\n+            pat_syntax_ptr: SyntaxNodePtr,\n+        }\n+\n+        impl Diagnostic for BailedOut {\n+            fn code(&self) -> DiagnosticCode {\n+                DiagnosticCode(\"internal:match-check-bailed-out\")\n+            }\n+            fn message(&self) -> String {\n+                format!(\"Internal: match check bailed out\")\n+            }\n+            fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+                InFile { file_id: self.file, value: self.pat_syntax_ptr.clone() }\n+            }\n+            fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+                self\n+            }\n+        }\n+    }\n+\n     use crate::diagnostics::tests::check_diagnostics;\n \n+    pub(crate) use self::report::report_bail_out;\n+\n     #[test]\n     fn empty_tuple() {\n         check_diagnostics(\n@@ -589,14 +640,18 @@ enum Either2 { C, D }\n fn main() {\n     match Either::A {\n         Either2::C => (),\n+    //  ^^^^^^^^^^ Internal: match check bailed out\n         Either2::D => (),\n     }\n     match (true, false) {\n         (true, false, true) => (),\n+    //  ^^^^^^^^^^^^^^^^^^^ Internal: match check bailed out\n         (true) => (),\n     }\n     match (true, false) { (true,) => {} }\n+    //                    ^^^^^^^ Internal: match check bailed out\n     match (0) { () => () }\n+            //  ^^ Internal: match check bailed out\n     match Unresolved::Bar { Unresolved::Baz => () }\n }\n         \"#,\n@@ -609,7 +664,9 @@ fn main() {\n             r#\"\n fn main() {\n     match false { true | () => {} }\n+    //            ^^^^^^^^^ Internal: match check bailed out\n     match (false,) { (true | (),) => {} }\n+    //               ^^^^^^^^^^^^ Internal: match check bailed out\n }\n \"#,\n         );\n@@ -642,10 +699,12 @@ enum Either { A, B }\n fn main() {\n     match loop {} {\n         Either::A => (),\n+    //  ^^^^^^^^^ Internal: match check bailed out\n         Either::B => (),\n     }\n     match loop {} {\n         Either::A => (),\n+    //  ^^^^^^^^^ Internal: match check bailed out\n     }\n     match loop { break Foo::A } {\n         //^^^^^^^^^^^^^^^^^^^^^ Missing match arm\n@@ -853,6 +912,11 @@ fn main() {\n     match Option::<Never>::None {\n         None => (),\n         Some(never) => match never {},\n+    //  ^^^^^^^^^^^ Internal: match check bailed out\n+    }\n+    match Option::<Never>::None {\n+        //^^^^^^^^^^^^^^^^^^^^^ Missing match arm\n+        Option::Some(_never) => {},\n     }\n }\n \"#,\n@@ -1000,6 +1064,7 @@ fn main(v: S) {\n     match v { S{ a }      => {} }\n     match v { S{ a: _x }  => {} }\n     match v { S{ a: 'a' } => {} }\n+            //^^^^^^^^^^^ Internal: match check bailed out\n     match v { S{..}       => {} }\n     match v { _           => {} }\n     match v { }\n@@ -1045,6 +1110,7 @@ fn main() {\n fn main() {\n     match 5 {\n         10 => (),\n+    //  ^^ Internal: match check bailed out\n         11..20 => (),\n     }\n }"}]}