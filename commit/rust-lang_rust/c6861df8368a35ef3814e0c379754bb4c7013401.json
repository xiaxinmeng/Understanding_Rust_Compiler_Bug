{"sha": "c6861df8368a35ef3814e0c379754bb4c7013401", "node_id": "C_kwDOAAsO6NoAKGM2ODYxZGY4MzY4YTM1ZWYzODE0ZTBjMzc5NzU0YmI0YzcwMTM0MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T21:45:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T21:45:23Z"}, "message": "Auto merge of #101592 - compiler-errors:rollup-d2fya7z, r=compiler-errors\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101423 (Fix hermit warnings)\n - #101499 (Introduce lowering_arena to avoid creating AST nodes on the fly)\n - #101530 (llvm-wrapper: adapt for LLVM API changes)\n - #101554 (rustdoc: remove unused CSS `#implementations-list > h3 > span.in-band`)\n - #101580 (rustdoc: remove unused CSS `div.impl-items > div`)\n - #101584 (rustdoc: remove no-op CSS `#settings-menu { padding: 0 }`)\n - #101587 (Make `Debug` impl for `Term` useful)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "103fc61b4a0f96e886ab225e01492bf964f6b1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103fc61b4a0f96e886ab225e01492bf964f6b1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6861df8368a35ef3814e0c379754bb4c7013401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6861df8368a35ef3814e0c379754bb4c7013401", "html_url": "https://github.com/rust-lang/rust/commit/c6861df8368a35ef3814e0c379754bb4c7013401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6861df8368a35ef3814e0c379754bb4c7013401/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1120c5e01df508de64fe6642f22fadeb574afd6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1120c5e01df508de64fe6642f22fadeb574afd6d", "html_url": "https://github.com/rust-lang/rust/commit/1120c5e01df508de64fe6642f22fadeb574afd6d"}, {"sha": "e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "html_url": "https://github.com/rust-lang/rust/commit/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d"}], "stats": {"total": 99, "additions": 60, "deletions": 39}, "files": [{"sha": "9e05fbbdc1976836472bebdae162365aee2354ee", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{InvalidAbi, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n-use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n+use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -25,6 +25,7 @@ use std::iter;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n+    pub(super) ast_arena: &'a Arena<'static>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -60,6 +61,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             tcx: self.tcx,\n             resolver: self.resolver,\n             arena: self.tcx.hir_arena,\n+            ast_arena: self.ast_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),"}, {"sha": "f57c92fd70c274434ff5673dedd31d07ba934c9f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -44,6 +44,7 @@ extern crate tracing;\n \n use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n \n+use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -95,6 +96,13 @@ struct LoweringContext<'a, 'hir> {\n     /// Used to allocate HIR nodes.\n     arena: &'hir hir::Arena<'hir>,\n \n+    /// Used to allocate temporary AST nodes for use during lowering.\n+    /// This allows us to create \"fake\" AST -- these nodes can sometimes\n+    /// be allocated on the stack, but other times we need them to live longer\n+    /// than the current stack frame, so they can be collected into vectors\n+    /// and things like that.\n+    ast_arena: &'a Arena<'static>,\n+\n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n@@ -140,6 +148,15 @@ struct LoweringContext<'a, 'hir> {\n     generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n+declare_arena!([\n+    [] tys: rustc_ast::Ty,\n+    [] aba: rustc_ast::AngleBracketedArgs,\n+    [] ptr: rustc_ast::PolyTraitRef,\n+    // This _marker field is needed because `declare_arena` creates `Arena<'tcx>` and we need to\n+    // use `'tcx`. If we don't have this we get a compile error.\n+    [] _marker: std::marker::PhantomData<&'tcx ()>,\n+]);\n+\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -401,10 +418,13 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n         tcx.definitions_untracked().def_index_count(),\n     );\n \n+    let ast_arena = Arena::default();\n+\n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n             tcx,\n             resolver: &mut resolver,\n+            ast_arena: &ast_arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n@@ -974,12 +994,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    self.lower_angle_bracketed_parameter_data(\n-                        &data.as_angle_bracketed_args(),\n-                        ParamMode::Explicit,\n-                        itctx,\n-                    )\n-                    .0\n+                    let aba = self.ast_arena.aba.alloc(data.as_angle_bracketed_args());\n+                    self.lower_angle_bracketed_parameter_data(aba, ParamMode::Explicit, itctx).0\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -1048,15 +1064,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                        let ty = this.ast_arena.tys.alloc(Ty {\n+                            id: node_id,\n+                            kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                            span: this.lower_span(constraint.span),\n+                            tokens: None,\n+                        });\n+                        let ty = this.lower_ty(ty, itctx);\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n@@ -1192,12 +1206,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n         {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n+                let poly_trait_ref = this.ast_arena.ptr.alloc(PolyTraitRef {\n+                    bound_generic_params: vec![],\n+                    trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                    span: t.span\n+                });\n                 let bound = this.lower_poly_trait_ref(\n-                    &PolyTraitRef {\n-                        bound_generic_params: vec![],\n-                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n-                        span: t.span\n-                    },\n+                    poly_trait_ref,\n                     itctx,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);"}, {"sha": "bc49dfe7eae33bfa3470c9ea8ab6db4fb5c34198", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -936,12 +936,14 @@ LLVMRustOptimizeWithNewPassManager(\n           /*CompileKernel=*/false);\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0)\n+#if LLVM_VERSION_GE(14, 0) && LLVM_VERSION_LT(16, 0)\n           MPM.addPass(ModuleMemorySanitizerPass(Options));\n #else\n           MPM.addPass(MemorySanitizerPass(Options));\n #endif\n+#if LLVM_VERSION_LT(16, 0)\n           MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n+#endif\n         }\n       );\n     }\n@@ -972,7 +974,11 @@ LLVMRustOptimizeWithNewPassManager(\n             /*UseAfterScope=*/true,\n             AsanDetectStackUseAfterReturnMode::Runtime,\n           };\n+#if LLVM_VERSION_LT(16, 0)\n           MPM.addPass(ModuleAddressSanitizerPass(opts));\n+#else\n+          MPM.addPass(AddressSanitizerPass(opts));\n+#endif\n #else\n           MPM.addPass(ModuleAddressSanitizerPass(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));"}, {"sha": "4635a9d5575d41adcbb90b6aae8466aa9430ef0a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -915,12 +915,25 @@ pub struct CoercePredicate<'tcx> {\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Term<'tcx> {\n     ptr: NonZeroUsize,\n     marker: PhantomData<(Ty<'tcx>, Const<'tcx>)>,\n }\n \n+impl Debug for Term<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let data = if let Some(ty) = self.ty() {\n+            format!(\"Term::Ty({:?})\", ty)\n+        } else if let Some(ct) = self.ct() {\n+            format!(\"Term::Ct({:?})\", ct)\n+        } else {\n+            unreachable!()\n+        };\n+        f.write_str(&data)\n+    }\n+}\n+\n impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n     fn from(ty: Ty<'tcx>) -> Self {\n         TermKind::Ty(ty).pack()"}, {"sha": "30c8fc4562d52dd4ce2affa0dad5459ebda821cb", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -2,7 +2,6 @@ use crate::cell::UnsafeCell;\n use crate::collections::VecDeque;\n use crate::hint;\n use crate::ops::{Deref, DerefMut, Drop};\n-use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::hermit::abi;\n "}, {"sha": "8a13879d8cc837ebc76fc35213c28819a944b853", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -487,6 +487,4 @@ pub mod netc {\n \n     #[derive(Copy, Clone)]\n     pub struct sockaddr {}\n-\n-    pub type socklen_t = usize;\n }"}, {"sha": "1adf0b2be6b7342d3e5d0bfec3a234a43b3e5308", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{MovableCondvar, Mutex};\n-use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct RwLock {\n     lock: Mutex,"}, {"sha": "2f31a0bb72ec1cc539f2d65eb327d04bfb3f5631", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6861df8368a35ef3814e0c379754bb4c7013401/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c6861df8368a35ef3814e0c379754bb4c7013401/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=c6861df8368a35ef3814e0c379754bb4c7013401", "patch": "@@ -197,10 +197,6 @@ h4.code-header {\n \tposition: relative;\n }\n \n-div.impl-items > div {\n-\tpadding-left: 0;\n-}\n-\n h1, h2, h3, h4, h5, h6,\n .sidebar,\n .mobile-topbar,\n@@ -212,7 +208,6 @@ a.source,\n span.since,\n #source-sidebar, #sidebar-toggle,\n details.rustdoc-toggle > summary::before,\n-div.impl-items > div:not(.docblock):not(.item-info),\n .content ul.crate a.crate,\n a.srclink,\n #help-button > button,\n@@ -1449,9 +1444,7 @@ pre.rust {\n \tborder-radius: 2px;\n \tcursor: pointer;\n }\n-#settings-menu {\n-\tpadding: 0;\n-}\n+\n #settings-menu > a, #help-button > button {\n \tpadding: 5px;\n \theight: 100%;\n@@ -1528,10 +1521,6 @@ kbd {\n \tcursor: default;\n }\n \n-#implementations-list > h3 > span.in-band {\n-\twidth: 100%;\n-}\n-\n #main-content > ul {\n \tpadding-left: 10px;\n }"}]}