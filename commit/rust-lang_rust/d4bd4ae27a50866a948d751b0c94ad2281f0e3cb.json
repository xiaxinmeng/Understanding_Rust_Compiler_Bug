{"sha": "d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "node_id": "C_kwDOAAsO6NoAKGQ0YmQ0YWUyN2E1MDg2NmE5NDhkNzUxYjBjOTRhZDIyODFmMGUzY2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:30:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:30:49Z"}, "message": "Rollup merge of #100111 - estebank:missing-let, r=compiler-errors\n\nProvide suggestion on missing `let` in binding statement\n\nFix #78907.\n\nFallout from the type ascription syntax.", "tree": {"sha": "fd5bab56213854b3d8d827e80850bd5eae332206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5bab56213854b3d8d827e80850bd5eae332206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tr6CRBK7hj4Ov3rIwAAxLAIAJ0xu6Pc/9hdTK1yMn3EAi5N\noW/tDm+vwD+d8IrSDlmfbo9wK9sstUNUx2NbDtPXX2e+qUcSj8IADTmbDlQdQRY6\neIdfIYLPo7gf+7PMislBuXZ+Ff8rVjl3m8zX6YocyLbHX5MNdVONQK3EiEEogwzu\ni9sn+uEH4YVZS46vrRBw13xGY8dcxKyQFZlBzr05LnOOJv3YlaJvn6Q+ZHbzAz4/\n2aP7W9K2PKOccNwwrrwyVsbGYZgwuqhO4k0YZmZHMKHwuVN405nr6noNw6Mb15li\nYVyN9xEzhLifR6jv35aeNWg9Ytast8pR1IX2zpo2mUhVcY3QzC46HGsKq2BAHfA=\n=o1OL\n-----END PGP SIGNATURE-----\n", "payload": "tree fd5bab56213854b3d8d827e80850bd5eae332206\nparent 551224019b657828193ff7968eee228bed2c1897\nparent 939c2b63137e4b4f8c35d7cdc2b2d8bbb491e2dd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558649 +0200\ncommitter GitHub <noreply@github.com> 1659558649 +0200\n\nRollup merge of #100111 - estebank:missing-let, r=compiler-errors\n\nProvide suggestion on missing `let` in binding statement\n\nFix #78907.\n\nFallout from the type ascription syntax.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "html_url": "https://github.com/rust-lang/rust/commit/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551224019b657828193ff7968eee228bed2c1897", "url": "https://api.github.com/repos/rust-lang/rust/commits/551224019b657828193ff7968eee228bed2c1897", "html_url": "https://github.com/rust-lang/rust/commit/551224019b657828193ff7968eee228bed2c1897"}, {"sha": "939c2b63137e4b4f8c35d7cdc2b2d8bbb491e2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/939c2b63137e4b4f8c35d7cdc2b2d8bbb491e2dd", "html_url": "https://github.com/rust-lang/rust/commit/939c2b63137e4b4f8c35d7cdc2b2d8bbb491e2dd"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "6e33c261a03b0c06c3c0491f80197a300ca646c5", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "patch": "@@ -2,7 +2,7 @@ use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n use rustc_session::parse::{feature_err, feature_err_issue};\n@@ -577,6 +577,32 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn visit_stmt(&mut self, stmt: &'a ast::Stmt) {\n+        if let ast::StmtKind::Semi(expr) = &stmt.kind\n+            && let ast::ExprKind::Assign(lhs, _, _) = &expr.kind\n+            && let ast::ExprKind::Type(..) = lhs.kind\n+            && self.sess.parse_sess.span_diagnostic.err_count() == 0\n+            && !self.features.type_ascription\n+            && !lhs.span.allows_unstable(sym::type_ascription)\n+        {\n+            // When we encounter a statement of the form `foo: Ty = val;`, this will emit a type\n+            // ascription error, but the likely intention was to write a `let` statement. (#78907).\n+            feature_err_issue(\n+                &self.sess.parse_sess,\n+                sym::type_ascription,\n+                lhs.span,\n+                GateIssue::Language,\n+                \"type ascription is experimental\",\n+            ).span_suggestion_verbose(\n+                lhs.span.shrink_to_lo(),\n+                \"you might have meant to introduce a new binding\",\n+                \"let \".to_string(),\n+                Applicability::MachineApplicable,\n+            ).emit();\n+        }\n+        visit::walk_stmt(self, stmt);\n+    }\n+\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n@@ -795,8 +821,6 @@ fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n     // checks if `#![feature]` has been used to enable any lang feature\n     // does not check the same for lib features unless there's at least one\n     // declared lang feature\n-    use rustc_errors::Applicability;\n-\n     if !sess.opts.unstable_features.is_nightly_build() {\n         let lang_features = &sess.features_untracked().declared_lang_features;\n         if lang_features.len() == 0 {"}, {"sha": "d1787688950ac3498482e7f75043efbd2a86a870", "filename": "src/test/ui/type/missing-let-in-binding.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.fixed?ref=d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let mut _foo: i32 = 1;\n+    let _foo: i32 = 4; //~ ERROR type ascription is experimental\n+}"}, {"sha": "ca42f2e6eaccca3aace1e76edf3a849dc93b6f84", "filename": "src/test/ui/type/missing-let-in-binding.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.rs?ref=d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let mut _foo: i32 = 1;\n+    _foo: i32 = 4; //~ ERROR type ascription is experimental\n+}"}, {"sha": "12759c5096e233fae769f67977b585be0beeabf1", "filename": "src/test/ui/type/missing-let-in-binding.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4bd4ae27a50866a948d751b0c94ad2281f0e3cb/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fmissing-let-in-binding.stderr?ref=d4bd4ae27a50866a948d751b0c94ad2281f0e3cb", "patch": "@@ -0,0 +1,16 @@\n+error[E0658]: type ascription is experimental\n+  --> $DIR/missing-let-in-binding.rs:4:5\n+   |\n+LL |     _foo: i32 = 4;\n+   |     ^^^^^^^^^\n+   |\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+   = help: add `#![feature(type_ascription)]` to the crate attributes to enable\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let _foo: i32 = 4;\n+   |     +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}