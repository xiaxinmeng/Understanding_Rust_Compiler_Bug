{"sha": "155b055478eead93f70aa51994e2c56da948cc40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWIwNTU0NzhlZWFkOTNmNzBhYTUxOTk0ZTJjNTZkYTk0OGNjNDA=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-07-19T16:13:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-21T17:54:27Z"}, "message": "rustdoc: Restore --default-theme, etc, by restoring varname escaping\n\nIn #86157\n\n    cd0f93193c84ddc6698f9b65909da71c084dcb74\n    Use Tera templates for rustdoc.\n\ndropped the following transformation from the keys of the default\nsettings element's `data-` attribute names:\n\n    .map(|(k, v)| format!(r#\" data-{}=\"{}\"\"#, k.replace('-', \"_\"), Escape(v)))\n\nThe `Escape` part is indeed no longer needed, because Tera does that\nfor us.  But the massaging of `-` to `_` is needed, for the (bizarre)\nreasons explained in the new comments.\n\nI have tested that the default theme function works again for me.  I\nhave also verified that passing\n\n    --default-theme=\"zork&\"\n\nescapes the value in the HTML.\n\nCloses #87263.\n\nCC: Jacob Hoffman-Andrews <github@hoffman-andrews.com>\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "efd310fb5860c34fa34ef0d1a6dc5107e84b59a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd310fb5860c34fa34ef0d1a6dc5107e84b59a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155b055478eead93f70aa51994e2c56da948cc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155b055478eead93f70aa51994e2c56da948cc40", "html_url": "https://github.com/rust-lang/rust/commit/155b055478eead93f70aa51994e2c56da948cc40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155b055478eead93f70aa51994e2c56da948cc40/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f2326c0570fdd64f53532a089bbbc361d190e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f2326c0570fdd64f53532a089bbbc361d190e6", "html_url": "https://github.com/rust-lang/rust/commit/05f2326c0570fdd64f53532a089bbbc361d190e6"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "cae68447815a5059fc58b927caece81e49a1ee5b", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/155b055478eead93f70aa51994e2c56da948cc40/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155b055478eead93f70aa51994e2c56da948cc40/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=155b055478eead93f70aa51994e2c56da948cc40", "patch": "@@ -459,7 +459,29 @@ impl Options {\n                 })\n                 .collect(),\n         ];\n-        let default_settings = default_settings.into_iter().flatten().collect();\n+        let default_settings = default_settings.into_iter().flatten()\n+            .map(\n+                // The keys here become part of `data-` attribute names in the generated HTML.  The\n+                // browser does a strange mapping when converting them into attributes on the\n+                // `dataset` property on the DOM HTML Node:\n+                //   https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\n+                //\n+                // The original key values we have are the same as the DOM storage API keys and the\n+                // command line options, so contain `-`.  Our Javascript needs to be able to look\n+                // these values up both in `dataset` and in the storage API, so it needs to be able\n+                // to convert the names back and forth.  Despite doing this kebab-case to\n+                // StudlyCaps transformation automatically, the JS DOM API does not provide a\n+                // mechanism for doing the just transformation on a string.  So we want to avoid\n+                // the StudlyCaps representation in the `dataset` property.\n+                //\n+                // We solve this by replacing all the `-`s with `_`s.  We do that here, when we\n+                // generate the `data-` attributes, and in the JS, when we look them up.  (See\n+                // `getSettingValue` in `storage.js.`) Converting `-` to `_` is simple in JS.\n+                //\n+                // The values will be HTML-escaped by the default Tera escaping.\n+                |(k, v)| (k.replace('-', \"_\"), v)\n+            )\n+            .collect();\n \n         let test_args = matches.opt_strs(\"test-args\");\n         let test_args: Vec<String> ="}, {"sha": "78ed17e6899e9aa17c0d526b7f93ba64cf3d51a2", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/155b055478eead93f70aa51994e2c56da948cc40/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/155b055478eead93f70aa51994e2c56da948cc40/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=155b055478eead93f70aa51994e2c56da948cc40", "patch": "@@ -22,6 +22,8 @@ function getSettingValue(settingName) {\n         return current;\n     }\n     if (settingsDataset !== null) {\n+        // See the comment for `default_settings.into_iter()` etc. in\n+        // `Options::from_matches` in `librustdoc/config.rs`.\n         var def = settingsDataset[settingName.replace(/-/g,'_')];\n         if (def !== undefined) {\n             return def;"}]}