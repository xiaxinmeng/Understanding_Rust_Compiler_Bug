{"sha": "223c043110c0eb35847bca41e58c0ce11110d78a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyM2MwNDMxMTBjMGViMzU4NDdiY2E0MWU1OGMwY2UxMTExMGQ3OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-06T04:56:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-06T04:56:25Z"}, "message": "auto merge of #16254 : brson/rust/rustdocmeta, r=aturon\n\nThis teach rustdoc to add `<meta name=\"description\">` and `<meta name=\"keywords\">` tags to crate docs. Description is important for search engines because they display it as the page description. Keywords are less useful but still generally recommended.\r\n\r\nThis also changes the \"stability dashboard\" link to just say \"stability\", because the current link takes up a lot of space.\r\n\r\ncc https://github.com/rust-lang/rust/issues/12466", "tree": {"sha": "c5fda36a20a07144633523f5dded219ccaecf5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5fda36a20a07144633523f5dded219ccaecf5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223c043110c0eb35847bca41e58c0ce11110d78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223c043110c0eb35847bca41e58c0ce11110d78a", "html_url": "https://github.com/rust-lang/rust/commit/223c043110c0eb35847bca41e58c0ce11110d78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223c043110c0eb35847bca41e58c0ce11110d78a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a47fa708cfbf6b90a8ffacbaf00b8250bfa72cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a47fa708cfbf6b90a8ffacbaf00b8250bfa72cd", "html_url": "https://github.com/rust-lang/rust/commit/2a47fa708cfbf6b90a8ffacbaf00b8250bfa72cd"}, {"sha": "bcdc8fb812aefd053d57b99357cf5769a4959ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdc8fb812aefd053d57b99357cf5769a4959ae8", "html_url": "https://github.com/rust-lang/rust/commit/bcdc8fb812aefd053d57b99357cf5769a4959ae8"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "2e1b8d32dd39e03da0cbc31b1154c3606bf9bbd9", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/223c043110c0eb35847bca41e58c0ce11110d78a/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223c043110c0eb35847bca41e58c0ce11110d78a/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=223c043110c0eb35847bca41e58c0ce11110d78a", "patch": "@@ -26,6 +26,8 @@ pub struct Page<'a> {\n     pub title: &'a str,\n     pub ty: &'a str,\n     pub root_path: &'a str,\n+    pub description: &'a str,\n+    pub keywords: &'a str\n }\n \n pub fn render<T: fmt::Show, S: fmt::Show>(\n@@ -38,8 +40,9 @@ r##\"<!DOCTYPE html>\n <head>\n     <meta charset=\"utf-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-    <meta name=\"description\" content=\"The {krate} library documentation.\">\n     <meta name=\"generator\" content=\"rustdoc\">\n+    <meta name=\"description\" content=\"{description}\">\n+    <meta name=\"keywords\" content=\"{keywords}\">\n \n     <title>{title}</title>\n \n@@ -135,6 +138,8 @@ r##\"<!DOCTYPE html>\n                 layout.logo)\n     },\n     title     = page.title,\n+    description = page.description,\n+    keywords = page.keywords,\n     favicon   = if layout.favicon.len() == 0 {\n         \"\".to_string()\n     } else {"}, {"sha": "76e18d5258c49902377be20e4b2128d229c5390c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/223c043110c0eb35847bca41e58c0ce11110d78a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223c043110c0eb35847bca41e58c0ce11110d78a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=223c043110c0eb35847bca41e58c0ce11110d78a", "patch": "@@ -742,10 +742,13 @@ impl<'a> SourceCollector<'a> {\n         let mut w = BufferedWriter::new(try!(File::create(&cur)));\n \n         let title = format!(\"{} -- source\", cur.filename_display());\n+        let desc = format!(\"Source to the Rust file `{}`.\", filename);\n         let page = layout::Page {\n             title: title.as_slice(),\n             ty: \"source\",\n             root_path: root_path.as_slice(),\n+            description: desc.as_slice(),\n+            keywords: get_basic_keywords(),\n         };\n         try!(layout::render(&mut w as &mut Writer, &self.cx.layout,\n                             &page, &(\"\"), &Source(contents)));\n@@ -1072,10 +1075,14 @@ impl Context {\n             try!(stability.encode(&mut json::Encoder::new(&mut json_out)));\n \n             let title = stability.name.clone().append(\" - Stability dashboard\");\n+            let desc = format!(\"API stability overview for the Rust `{}` crate.\",\n+                               this.layout.krate);\n             let page = layout::Page {\n                 ty: \"mod\",\n                 root_path: this.root_path.as_slice(),\n                 title: title.as_slice(),\n+                description: desc.as_slice(),\n+                keywords: get_basic_keywords(),\n             };\n             let html_dst = &this.dst.join(\"stability.html\");\n             let mut html_out = BufferedWriter::new(try!(File::create(html_dst)));\n@@ -1120,10 +1127,25 @@ impl Context {\n                 title.push_str(it.name.get_ref().as_slice());\n             }\n             title.push_str(\" - Rust\");\n+            let tyname = shortty(it).to_static_str();\n+            let is_crate = match it.inner {\n+                clean::ModuleItem(clean::Module { items: _, is_crate: true }) => true,\n+                _ => false\n+            };\n+            let desc = if is_crate {\n+                format!(\"API documentation for the Rust `{}` crate.\",\n+                        cx.layout.krate)\n+            } else {\n+                format!(\"API documentation for the Rust `{}` {} in crate `{}`.\",\n+                        it.name.get_ref(), tyname, cx.layout.krate)\n+            };\n+            let keywords = make_item_keywords(it);\n             let page = layout::Page {\n-                ty: shortty(it).to_static_str(),\n+                ty: tyname,\n                 root_path: cx.root_path.as_slice(),\n                 title: title.as_slice(),\n+                description: desc.as_slice(),\n+                keywords: keywords.as_slice(),\n             };\n \n             markdown::reset_headers();\n@@ -1311,7 +1333,7 @@ impl<'a> fmt::Show for Item<'a> {\n         // Write stability dashboard link\n         match self.item.inner {\n             clean::ModuleItem(ref m) if m.is_crate => {\n-                try!(write!(fmt, \"<a href='stability.html'>[stability dashboard]</a> \"));\n+                try!(write!(fmt, \"<a href='stability.html'>[stability]</a> \"));\n             }\n             _ => {}\n         };\n@@ -2152,3 +2174,11 @@ fn ignore_private_item(it: &clean::Item) -> bool {\n         _ => false,\n     }\n }\n+\n+fn get_basic_keywords() -> &'static str {\n+    \"rust, rustlang, rust-lang\"\n+}\n+\n+fn make_item_keywords(it: &clean::Item) -> String {\n+    format!(\"{}, {}\", get_basic_keywords(), it.name.get_ref())\n+}"}]}