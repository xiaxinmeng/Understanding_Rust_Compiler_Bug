{"sha": "ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjY4ZDljNTQ4ZDQ0OTBhZTllOGVhOWI0ZTg5NDJiYWUwMmE4ZmU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-06T19:47:32Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-06T22:08:24Z"}, "message": "use enum to represent ObligationCause::dummy without allocating", "tree": {"sha": "2ca4019bb73174e5ea1b8b49a4cb3daf73b71aab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ca4019bb73174e5ea1b8b49a4cb3daf73b71aab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "html_url": "https://github.com/rust-lang/rust/commit/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7fbecf7f2e1e3c8a9680b20b67e58ed34bf49f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7fbecf7f2e1e3c8a9680b20b67e58ed34bf49f", "html_url": "https://github.com/rust-lang/rust/commit/af7fbecf7f2e1e3c8a9680b20b67e58ed34bf49f"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "917c6b31916458b9c250135e26d6765b76933c65", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "patch": "@@ -89,14 +89,12 @@ pub enum Reveal {\n /// only live for a short period of time.\n #[derive(Clone, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {\n-    data: Rc<ObligationCauseData<'tcx>>,\n+    /// `None` for `ObligationCause::dummy`, `Some` otherwise.\n+    data: Option<Rc<ObligationCauseData<'tcx>>>,\n }\n \n-// A dummy obligation. As the parralel compiler does not share `Obligation`s between\n-// threads, we use a `thread_local` here so we can keep using an `Rc` inside of `ObligationCause`.\n-thread_local! {\n-    static DUMMY_OBLIGATION_CAUSE: ObligationCause<'static> = ObligationCause::new(DUMMY_SP, hir::CRATE_HIR_ID, MiscObligation);\n-}\n+const DUMMY_OBLIGATION_CAUSE_DATA: ObligationCauseData<'static> =\n+    ObligationCauseData { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: MiscObligation };\n \n // Correctly format `ObligationCause::dummy`.\n impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n@@ -108,8 +106,9 @@ impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n impl Deref for ObligationCause<'tcx> {\n     type Target = ObligationCauseData<'tcx>;\n \n+    #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n-        &self.data\n+        self.data.as_deref().unwrap_or(&DUMMY_OBLIGATION_CAUSE_DATA)\n     }\n }\n \n@@ -135,7 +134,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         body_id: hir::HirId,\n         code: ObligationCauseCode<'tcx>,\n     ) -> ObligationCause<'tcx> {\n-        ObligationCause { data: Rc::new(ObligationCauseData { span, body_id, code }) }\n+        ObligationCause { data: Some(Rc::new(ObligationCauseData { span, body_id, code })) }\n     }\n \n     pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {\n@@ -148,11 +147,11 @@ impl<'tcx> ObligationCause<'tcx> {\n \n     #[inline(always)]\n     pub fn dummy() -> ObligationCause<'tcx> {\n-        DUMMY_OBLIGATION_CAUSE.with(Clone::clone)\n+        ObligationCause { data: None }\n     }\n \n     pub fn make_mut(&mut self) -> &mut ObligationCauseData<'tcx> {\n-        Rc::make_mut(&mut self.data)\n+        Rc::make_mut(self.data.get_or_insert_with(|| Rc::new(DUMMY_OBLIGATION_CAUSE_DATA)))\n     }\n \n     pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {"}]}