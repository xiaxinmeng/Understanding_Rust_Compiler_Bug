{"sha": "db817ceda4fe204261c9d1773dc137830e58e225", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODE3Y2VkYTRmZTIwNDI2MWM5ZDE3NzNkYzEzNzgzMGU1OGUyMjU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-09-29T20:51:55Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-01T19:31:09Z"}, "message": "remove the code that encodes type parameter defs\n\nthere are no type parameter defs in the relevant range", "tree": {"sha": "eef2d7026c500e0e27ab9bd3493c197cc5c6c418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef2d7026c500e0e27ab9bd3493c197cc5c6c418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db817ceda4fe204261c9d1773dc137830e58e225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db817ceda4fe204261c9d1773dc137830e58e225", "html_url": "https://github.com/rust-lang/rust/commit/db817ceda4fe204261c9d1773dc137830e58e225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db817ceda4fe204261c9d1773dc137830e58e225/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8557cb47cba1f343563f92b14151661425573270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8557cb47cba1f343563f92b14151661425573270", "html_url": "https://github.com/rust-lang/rust/commit/8557cb47cba1f343563f92b14151661425573270"}], "stats": {"total": 33, "additions": 1, "deletions": 32}, "files": [{"sha": "2ffccd2d9a585c6cde0dda4e057f8a3bd8755ffd", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db817ceda4fe204261c9d1773dc137830e58e225/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db817ceda4fe204261c9d1773dc137830e58e225/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=db817ceda4fe204261c9d1773dc137830e58e225", "patch": "@@ -125,9 +125,7 @@ enum_from_u32! {\n         tag_table_node_type = 0x57,\n         tag_table_item_subst = 0x58,\n         tag_table_freevars = 0x59,\n-        // GAP 0x5a\n-        tag_table_param_defs = 0x5b,\n-        // GAP 0x5c, 0x5d, 0x5e\n+        // GAP 0x5a, 0x5b, 0x5c, 0x5d, 0x5e\n         tag_table_method_map = 0x5f,\n         // GAP 0x60\n         tag_table_adjustments = 0x61,"}, {"sha": "75826c690364ef939db9d7ea9ed0f03ae0d823e0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db817ceda4fe204261c9d1773dc137830e58e225/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db817ceda4fe204261c9d1773dc137830e58e225/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=db817ceda4fe204261c9d1773dc137830e58e225", "patch": "@@ -611,8 +611,6 @@ trait rbml_writer_helpers<'tcx> {\n     fn emit_region(&mut self, ecx: &e::EncodeContext, r: ty::Region);\n     fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);\n     fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);\n-    fn emit_type_param_def<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n-                               type_param_def: &ty::TypeParameterDef<'tcx>);\n     fn emit_predicate<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n                           predicate: &ty::Predicate<'tcx>);\n     fn emit_trait_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,\n@@ -657,15 +655,6 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n         self.emit_opaque(|this| Ok(e::write_trait_ref(ecx, this, trait_ref)));\n     }\n \n-    fn emit_type_param_def<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,\n-                               type_param_def: &ty::TypeParameterDef<'tcx>) {\n-        self.emit_opaque(|this| {\n-            Ok(tyencode::enc_type_param_def(this,\n-                                         &ecx.ty_str_ctxt(),\n-                                         type_param_def))\n-        });\n-    }\n-\n     fn emit_predicate<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,\n                           predicate: &ty::Predicate<'tcx>) {\n         self.emit_opaque(|this| {\n@@ -894,13 +883,6 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         }\n     }\n \n-    if let Some(type_param_def) = tcx.ty_param_defs.borrow().get(&id) {\n-        rbml_w.tag(c::tag_table_param_defs, |rbml_w| {\n-            rbml_w.id(id);\n-            rbml_w.emit_type_param_def(ecx, type_param_def)\n-        })\n-    }\n-\n     let method_call = ty::MethodCall::expr(id);\n     if let Some(method) = tcx.tables.borrow().method_map.get(&method_call) {\n         rbml_w.tag(c::tag_table_method_map, |rbml_w| {\n@@ -985,8 +967,6 @@ trait rbml_decoder_decoder_helpers<'tcx> {\n                               -> ty::TraitRef<'tcx>;\n     fn read_poly_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n                                    -> ty::PolyTraitRef<'tcx>;\n-    fn read_type_param_def<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                                   -> ty::TypeParameterDef<'tcx>;\n     fn read_predicate<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n                               -> ty::Predicate<'tcx>;\n     fn read_existential_bounds<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1105,11 +1085,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         ty::Binder(self.read_ty_encoded(dcx, |decoder| decoder.parse_trait_ref()))\n     }\n \n-    fn read_type_param_def<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                                   -> ty::TypeParameterDef<'tcx> {\n-        self.read_ty_encoded(dcx, |decoder| decoder.parse_type_param_def())\n-    }\n-\n     fn read_predicate<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                               -> ty::Predicate<'tcx>\n     {\n@@ -1351,10 +1326,6 @@ fn decode_side_tables(dcx: &DecodeContext,\n                         let ub = val_dsr.read_upvar_capture(dcx);\n                         dcx.tcx.tables.borrow_mut().upvar_capture_map.insert(upvar_id, ub);\n                     }\n-                    c::tag_table_param_defs => {\n-                        let bounds = val_dsr.read_type_param_def(dcx);\n-                        dcx.tcx.ty_param_defs.borrow_mut().insert(id, bounds);\n-                    }\n                     c::tag_table_method_map => {\n                         let (autoderef, method) = val_dsr.read_method_callee(dcx);\n                         let method_call = ty::MethodCall {"}]}