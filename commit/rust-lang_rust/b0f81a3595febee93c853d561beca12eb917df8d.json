{"sha": "b0f81a3595febee93c853d561beca12eb917df8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjgxYTM1OTVmZWJlZTkzYzg1M2Q1NjFiZWNhMTJlYjkxN2RmOGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-07T11:47:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-07T14:52:43Z"}, "message": "Rollup merge of #32789 - jseyfried:fix_duplicate_resolve_errors, r=eddyb\n\nresolve: Avoid emitting redundant path resolution errors\n\nThis PR avoids emitting redundant path resolution errors in `resolve` (fixes #32760).\n\nr? @eddyb", "tree": {"sha": "a3a7cefb1a62d0a01f28d08409007b2cbdd72990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a7cefb1a62d0a01f28d08409007b2cbdd72990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f81a3595febee93c853d561beca12eb917df8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f81a3595febee93c853d561beca12eb917df8d", "html_url": "https://github.com/rust-lang/rust/commit/b0f81a3595febee93c853d561beca12eb917df8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f81a3595febee93c853d561beca12eb917df8d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a88ca4405d918ccdfeffe916566ef947864c261", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a88ca4405d918ccdfeffe916566ef947864c261", "html_url": "https://github.com/rust-lang/rust/commit/2a88ca4405d918ccdfeffe916566ef947864c261"}, {"sha": "07dac9732d65dcb1f5aefc8be46ba366fb657d08", "url": "https://api.github.com/repos/rust-lang/rust/commits/07dac9732d65dcb1f5aefc8be46ba366fb657d08", "html_url": "https://github.com/rust-lang/rust/commit/07dac9732d65dcb1f5aefc8be46ba366fb657d08"}], "stats": {"total": 173, "additions": 76, "deletions": 97}, "files": [{"sha": "5f4244caa629c508e619beee9ee3ad4dedddd95c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 69, "deletions": 66, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -1714,9 +1714,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             match self.resolve_crate_relative_path(prefix.span,\n                                                                    &prefix.segments,\n                                                                    TypeNS) {\n-                                Some(def) =>\n+                                Ok(def) =>\n                                     self.record_def(item.id, PathResolution::new(def, 0)),\n-                                None => {\n+                                Err(true) => self.record_def(item.id, err_path_resolution()),\n+                                Err(false) => {\n                                     resolve_error(self,\n                                                   prefix.span,\n                                                   ResolutionError::FailedToResolve(\n@@ -1835,7 +1836,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                trait_path: &Path,\n                                path_depth: usize)\n                                -> Result<PathResolution, ()> {\n-        if let Some(path_res) = self.resolve_path(id, trait_path, path_depth, TypeNS) {\n+        self.resolve_path(id, trait_path, path_depth, TypeNS).and_then(|path_res| {\n             if let Def::Trait(_) = path_res.base_def {\n                 debug!(\"(resolving trait) found trait def: {:?}\", path_res);\n                 Ok(path_res)\n@@ -1855,9 +1856,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 }\n                 err.emit();\n-                Err(())\n+                Err(true)\n             }\n-        } else {\n+        }).map_err(|error_reported| {\n+            if error_reported { return }\n \n             // find possible candidates\n             let trait_name = trait_path.segments.last().unwrap().identifier.name;\n@@ -1880,8 +1882,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 );\n \n             resolve_error(self, trait_path.span, error);\n-            Err(())\n-        }\n+        })\n     }\n \n     fn resolve_generics(&mut self, generics: &Generics) {\n@@ -1890,15 +1891,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 &hir::WherePredicate::BoundPredicate(_) |\n                 &hir::WherePredicate::RegionPredicate(_) => {}\n                 &hir::WherePredicate::EqPredicate(ref eq_pred) => {\n-                    let path_res = self.resolve_path(eq_pred.id, &eq_pred.path, 0, TypeNS);\n-                    if let Some(PathResolution { base_def: Def::TyParam(..), .. }) = path_res {\n-                        self.record_def(eq_pred.id, path_res.unwrap());\n-                    } else {\n-                        resolve_error(self,\n-                                      eq_pred.span,\n-                                      ResolutionError::UndeclaredAssociatedType);\n+                    self.resolve_path(eq_pred.id, &eq_pred.path, 0, TypeNS).and_then(|path_res| {\n+                        if let PathResolution { base_def: Def::TyParam(..), .. } = path_res {\n+                            Ok(self.record_def(eq_pred.id, path_res))\n+                        } else {\n+                            Err(false)\n+                        }\n+                    }).map_err(|error_reported| {\n                         self.record_def(eq_pred.id, err_path_resolution());\n-                    }\n+                        if error_reported { return }\n+                        let error_variant = ResolutionError::UndeclaredAssociatedType;\n+                        resolve_error(self, eq_pred.span, error_variant);\n+                    }).unwrap_or(());\n                 }\n             }\n         }\n@@ -2168,21 +2172,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 // This is a path in the type namespace. Walk through scopes\n                 // looking for it.\n-                match resolution {\n-                    Some(def) => {\n-                        // Write the result into the def map.\n-                        debug!(\"(resolving type) writing resolution for `{}` (id {}) = {:?}\",\n-                               path_names_to_string(path, 0),\n-                               ty.id,\n-                               def);\n-                        self.record_def(ty.id, def);\n-                    }\n-                    None => {\n-                        self.record_def(ty.id, err_path_resolution());\n-\n-                        // Keep reporting some errors even if they're ignored above.\n-                        self.resolve_path(ty.id, path, 0, TypeNS);\n+                if let Some(def) = resolution {\n+                    // Write the result into the def map.\n+                    debug!(\"(resolving type) writing resolution for `{}` (id {}) = {:?}\",\n+                           path_names_to_string(path, 0), ty.id, def);\n+                    self.record_def(ty.id, def);\n+                } else {\n+                    self.record_def(ty.id, err_path_resolution());\n \n+                    // Keep reporting some errors even if they're ignored above.\n+                    if let Err(true) = self.resolve_path(ty.id, path, 0, TypeNS) {\n+                        // `resolve_path` already reported the error\n+                    } else {\n                         let kind = if maybe_qself.is_some() {\n                             \"associated type\"\n                         } else {\n@@ -2481,11 +2482,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 PatKind::Struct(ref path, _, _) => {\n                     match self.resolve_path(pat_id, path, 0, TypeNS) {\n-                        Some(definition) => {\n+                        Ok(definition) => {\n                             self.record_def(pattern.id, definition);\n                         }\n-                        result => {\n-                            debug!(\"(resolving pattern) didn't find struct def: {:?}\", result);\n+                        Err(true) => self.record_def(pattern.id, err_path_resolution()),\n+                        Err(false) => {\n                             resolve_error(\n                                 self,\n                                 path.span,\n@@ -2552,14 +2553,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         let mut resolution = self.with_no_errors(|this| {\n-            this.resolve_path(id, path, 0, namespace)\n+            this.resolve_path(id, path, 0, namespace).ok()\n         });\n         for depth in 1..max_assoc_types {\n             if resolution.is_some() {\n                 break;\n             }\n             self.with_no_errors(|this| {\n-                resolution = this.resolve_path(id, path, depth, TypeNS);\n+                resolution = this.resolve_path(id, path, depth, TypeNS).ok();\n             });\n         }\n         if let Some(Def::Mod(_)) = resolution.map(|r| r.base_def) {\n@@ -2572,7 +2573,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Skips `path_depth` trailing segments, which is also reflected in the\n     /// returned value. See `hir::def::PathResolution` for more info.\n     fn resolve_path(&mut self, id: NodeId, path: &Path, path_depth: usize, namespace: Namespace)\n-                    -> Option<PathResolution> {\n+                    -> Result<PathResolution, bool /* true if an error was reported */ > {\n         let span = path.span;\n         let segments = &path.segments[..path.segments.len() - path_depth];\n \n@@ -2611,14 +2612,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             //\n             // Such behavior is required for backward compatibility.\n             // The same fallback is used when `a` resolves to nothing.\n-            let unqualified_def = resolve_identifier_with_fallback(self, true);\n-            return unqualified_def.and_then(|def| self.adjust_local_def(def, span)).map(mk_res);\n+            let def = resolve_identifier_with_fallback(self, true).ok_or(false);\n+            return def.and_then(|def| self.adjust_local_def(def, span).ok_or(true)).map(mk_res);\n         }\n \n         let unqualified_def = resolve_identifier_with_fallback(self, false);\n         let def = self.resolve_module_relative_path(span, segments, namespace);\n         match (def, unqualified_def) {\n-            (Some(d), Some(ref ud)) if d == ud.def => {\n+            (Ok(d), Some(ref ud)) if d == ud.def => {\n                 self.session\n                     .add_lint(lint::builtin::UNUSED_QUALIFICATIONS,\n                               id,\n@@ -2739,7 +2740,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     span: Span,\n                                     segments: &[hir::PathSegment],\n                                     namespace: Namespace)\n-                                    -> Option<Def> {\n+                                    -> Result<Def, bool /* true if an error was reported */> {\n         let module_path = segments.split_last()\n                                   .unwrap()\n                                   .1\n@@ -2760,9 +2761,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 };\n \n                 resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n-                return None;\n+                return Err(true);\n             }\n-            Indeterminate => return None,\n+            Indeterminate => return Err(false),\n             Success(resulting_module) => {\n                 containing_module = resulting_module;\n             }\n@@ -2773,7 +2774,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         result.success().map(|binding| {\n             self.check_privacy(containing_module, name, binding, span);\n             binding.def().unwrap()\n-        })\n+        }).ok_or(false)\n     }\n \n     /// Invariant: This must be called only during main resolution, not during\n@@ -2782,7 +2783,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                    span: Span,\n                                    segments: &[hir::PathSegment],\n                                    namespace: Namespace)\n-                                   -> Option<Def> {\n+                                   -> Result<Def, bool /* true if an error was reported */> {\n         let module_path = segments.split_last()\n                                   .unwrap()\n                                   .1\n@@ -2808,10 +2809,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 };\n \n                 resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n-                return None;\n+                return Err(true);\n             }\n \n-            Indeterminate => return None,\n+            Indeterminate => return Err(false),\n \n             Success(resulting_module) => {\n                 containing_module = resulting_module;\n@@ -2823,7 +2824,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         result.success().map(|binding| {\n             self.check_privacy(containing_module, name, binding, span);\n             binding.def().unwrap()\n-        })\n+        }).ok_or(false)\n     }\n \n     fn with_no_errors<T, F>(&mut self, f: F) -> T\n@@ -3038,25 +3039,26 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     });\n \n                     self.record_def(expr.id, err_path_resolution());\n-                    match type_res.map(|r| r.base_def) {\n-                        Some(Def::Struct(..)) => {\n-                            let mut err = resolve_struct_error(self,\n-                                expr.span,\n-                                ResolutionError::StructVariantUsedAsFunction(&path_name));\n-\n-                            let msg = format!(\"did you mean to write: `{} {{ /* fields */ }}`?\",\n-                                              path_name);\n-                            if self.emit_errors {\n-                                err.fileline_help(expr.span, &msg);\n-                            } else {\n-                                err.span_help(expr.span, &msg);\n-                            }\n-                            err.emit();\n-                        }\n-                        _ => {\n-                            // Keep reporting some errors even if they're ignored above.\n-                            self.resolve_path(expr.id, path, 0, ValueNS);\n \n+                    if let Ok(Def::Struct(..)) = type_res.map(|r| r.base_def) {\n+                        let error_variant =\n+                            ResolutionError::StructVariantUsedAsFunction(&path_name);\n+                        let mut err = resolve_struct_error(self, expr.span, error_variant);\n+\n+                        let msg = format!(\"did you mean to write: `{} {{ /* fields */ }}`?\",\n+                                          path_name);\n+\n+                        if self.emit_errors {\n+                            err.fileline_help(expr.span, &msg);\n+                        } else {\n+                            err.span_help(expr.span, &msg);\n+                        }\n+                        err.emit();\n+                    } else {\n+                        // Keep reporting some errors even if they're ignored above.\n+                        if let Err(true) = self.resolve_path(expr.id, path, 0, ValueNS) {\n+                            // `resolve_path` already reported the error\n+                        } else {\n                             let mut method_scope = false;\n                             self.value_ribs.iter().rev().all(|rib| {\n                                 method_scope = match rib.kind {\n@@ -3130,8 +3132,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // check to ensure that the path is actually a structure; that\n                 // is checked later during typeck.\n                 match self.resolve_path(expr.id, path, 0, TypeNS) {\n-                    Some(definition) => self.record_def(expr.id, definition),\n-                    None => {\n+                    Ok(definition) => self.record_def(expr.id, definition),\n+                    Err(true) => self.record_def(expr.id, err_path_resolution()),\n+                    Err(false) => {\n                         debug!(\"(resolving expression) didn't find struct def\",);\n \n                         resolve_error(self,"}, {"sha": "1fbde00a3dfdecf2b7377ad415cbd78d29a64bf0", "filename": "src/test/compile-fail-fulldeps/macro-crate-doesnt-resolve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-doesnt-resolve.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -16,5 +16,4 @@ extern crate macro_crate_test;\n fn main() {\n     macro_crate_test::foo();\n     //~^ ERROR failed to resolve. Use of undeclared type or module `macro_crate_test`\n-    //~^^ ERROR unresolved name `macro_crate_test::foo`\n }"}, {"sha": "0cd3a8853185fade135c0916d475447724a754d7", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name\n+// error-pattern: failed to resolve. Use of undeclared type or module `thing`\n \n fn main() { let foo = thing::len(Vec::new()); }"}, {"sha": "c1547dd82b3b2e5a83c6904a2d68a2a836b33abb", "filename": "src/test/compile-fail/bad-type-env-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -10,6 +10,5 @@\n \n fn foo<T>() {\n     fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n-    //~^ ERROR type name `T` is undefined or not in scope\n }\n fn main() { }"}, {"sha": "166ef7ab87fcd1d2297dc0eda5e21f4c16424c48", "filename": "src/test/compile-fail/export-fully-qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name\n+// error-pattern: failed to resolve. Use of undeclared type or module `foo`\n \n // In this test baz isn't resolved when called as foo.baz even though\n // it's called from inside foo. This is somewhat surprising and may"}, {"sha": "f7b1400aa45acf87e7c8a60bea566b0d75527013", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved name\n+// error-pattern: failed to resolve. Use of undeclared type or module `bar`\n \n mod foo {\n     pub fn x() { bar::x(); }"}, {"sha": "a6a331984583675c99a942ea23f96347bc95f091", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -15,7 +15,6 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n     //~^ ERROR cannot use an outer type parameter in this context\n-    //~| ERROR type name `T` is undefined or not in scope\n }\n \n fn main() {"}, {"sha": "0c3c82a99f28f4f38a6ba45caea71226fadad3de", "filename": "src/test/compile-fail/issue-12796.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -12,7 +12,6 @@ trait Trait {\n     fn outer(&self) {\n         fn inner(_: &Self) {\n             //~^ ERROR can't use type parameters from outer function\n-            //~^^ ERROR use of `Self` outside of an impl or trait\n         }\n     }\n }"}, {"sha": "2b0a24cfdb35f9e3bbabf3baaa3a5f7a0904f21a", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -17,7 +17,6 @@ fn siphash(k0 : u64) {\n     impl siphash {\n         pub fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-           //~^ ERROR unresolved name `k0`\n         }\n     }\n }"}, {"sha": "635006a3b4dad62af9afe2611bd533bf5578580c", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -13,8 +13,6 @@ fn siphash<T>() {\n     trait t {\n         fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function; try using\n         //~^ ERROR can't use type parameters from outer function; try using\n-        //~^^ ERROR type name `T` is undefined or not in scope\n-        //~^^^ ERROR type name `T` is undefined or not in scope\n     }\n }\n "}, {"sha": "c23e12e713aad797157fa2fc7e897aeef6997ff4", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -29,9 +29,7 @@ fn siphash(k0 : u64, k1 : u64) {\n    impl siphash for SipState {\n         fn reset(&self) {\n             self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-            //~^ ERROR unresolved name `k0`\n             self.v1 = k1 ^ 0x646f72616e646f6d; //~ ERROR can't capture dynamic environment\n-            //~^ ERROR unresolved name `k1`\n         }\n         fn result(&self) -> u64 { return mk_result(self); }\n     }"}, {"sha": "f93a333d2aea7b8f37ed1b5f37915bbb641f6d89", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -20,7 +20,6 @@ fn siphash(k0 : u64) {\n     impl SipHash for SipState {\n         fn reset(&self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR can't capture dynamic environment\n-           //~^ ERROR unresolved name `k0`\n         }\n     }\n     panic!();"}, {"sha": "d3b932fbc53efa5710b0a0843e25809f91148f4a", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -11,7 +11,6 @@\n fn foo<T>() {\n     struct foo {\n         x: T, //~ ERROR can't use type parameters from outer function;\n-        //~^ ERROR type name `T` is undefined or not in scope\n     }\n \n     impl<T> Drop for foo<T> {"}, {"sha": "6cd2c02c417ea8ed5f8aacfd19367259ed7b72b5", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -13,7 +13,6 @@ fn main() {\n \n     static y: isize = foo + 1;\n     //~^ ERROR attempt to use a non-constant value in a constant\n-    //~| ERROR unresolved name `foo`\n \n     println!(\"{}\", y);\n }"}, {"sha": "52375ef281ace24513c5f70d46257acd5512d401", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -15,8 +15,7 @@ fn main() {\n     enum Stuff {\n         Bar = foo\n         //~^ ERROR attempt to use a non-constant value in a constant\n-        //~| ERROR unresolved name `foo`\n-        //~^^^ ERROR constant evaluation error: non-constant path in constant expression\n+        //~^^ ERROR constant evaluation error: non-constant path in constant expression\n     }\n \n     println!(\"{}\", Stuff::Bar);"}, {"sha": "16fb2f68133f291f9519dcb591330338e28684d8", "filename": "src/test/compile-fail/issue-3668-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -11,7 +11,6 @@\n fn f(x:isize) {\n     static child: isize = x + 1;\n     //~^ ERROR attempt to use a non-constant value in a constant\n-    //~| ERROR unresolved name `x`\n }\n \n fn main() {}"}, {"sha": "9c31dc1e38ef8ff312193b105a73e9346e9d0153", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -17,7 +17,6 @@ impl PTrait for P {\n    fn getChildOption(&self) -> Option<Box<P>> {\n        static childVal: Box<P> = self.child.get();\n        //~^ ERROR attempt to use a non-constant value in a constant\n-       //~| ERROR unresolved name `self`\n        panic!();\n    }\n }"}, {"sha": "463fdaa106926a898579d7335aba455180227b17", "filename": "src/test/compile-fail/issue-5997-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -11,7 +11,6 @@\n fn f<Z>() -> bool {\n     enum E { V(Z) }\n     //~^ ERROR can't use type parameters from outer function\n-    //~^^ ERROR type name `Z` is undefined or not in scope\n     true\n }\n "}, {"sha": "e9cfafc98df0ef47fffdfe2768cd6353e7071555", "filename": "src/test/compile-fail/issue-5997-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n fn f<T>() -> bool {\n-    struct S(T); //~ ERROR type name `T` is undefined or not in scope\n-    //~^ ERROR can't use type parameters from outer function; try using\n+    struct S(T); //~ ERROR can't use type parameters from outer function; try using\n \n     true\n }"}, {"sha": "1fe10ba7a27bba10bc7d762c6671b85a4452cb03", "filename": "src/test/compile-fail/issue-6642.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-6642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fissue-6642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6642.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -13,7 +13,6 @@ impl A {\n     fn m(&self) {\n         fn x() {\n             self.m() //~ ERROR can't capture dynamic environment in a fn item\n-            //~^ ERROR unresolved name `self`\n         }\n     }\n }"}, {"sha": "1111b21d4550c14c3ef2fbae02ae702a562dd9ed", "filename": "src/test/compile-fail/macro-inner-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -26,6 +26,5 @@ test!(b,\n fn main() {\n     a::bar();\n     //~^ ERROR failed to resolve. Use of undeclared type or module `a`\n-    //~^^ ERROR unresolved name `a::bar`\n     b::bar();\n }"}, {"sha": "957b6cda55311b79c927ee3ec5de589e5085cc92", "filename": "src/test/compile-fail/no-link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fno-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-link.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -14,6 +14,5 @@ extern crate libc;\n fn main() {\n     unsafe {\n         libc::abs(0);  //~ ERROR Use of undeclared type or module `libc`\n-                      //~^ ERROR unresolved name `libc::abs`\n     }\n }"}, {"sha": "30ff1ed0e26f7a2a637a253e7512c7ac73a62048", "filename": "src/test/compile-fail/resolve-type-param-in-item-in-trait.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f81a3595febee93c853d561beca12eb917df8d/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs?ref=b0f81a3595febee93c853d561beca12eb917df8d", "patch": "@@ -18,7 +18,6 @@ trait TraitA<A> {\n             //~^ ERROR parameter `B` is never used\n             Variance(A)\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR type name `A` is undefined or not in scope\n         }\n     }\n }\n@@ -27,25 +26,22 @@ trait TraitB<A> {\n     fn outer(self) {\n         struct Foo<B>(A);\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR type name `A` is undefined or not in scope\n-                //~^^^ ERROR parameter `B` is never used\n+                //~^^ ERROR parameter `B` is never used\n     }\n }\n \n trait TraitC<A> {\n     fn outer(self) {\n         struct Foo<B> { a: A }\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR type name `A` is undefined or not in scope\n-                //~^^^ ERROR parameter `B` is never used\n+                //~^^ ERROR parameter `B` is never used\n     }\n }\n \n trait TraitD<A> {\n     fn outer(self) {\n         fn foo<B>(a: A) { }\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR type name `A` is undefined or not in scope\n     }\n }\n "}]}