{"sha": "ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGQ4MTFlYmRiZjVkYmQ1OWY2YTNkOTRmOTlmMDM1NDkxY2VkZjU=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:48Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:48Z"}, "message": "rollup merge of #19166: richo/lldb-cleanups\n\nWhile poking at rust in lldb I found a few nits to clean up.", "tree": {"sha": "5d0d0901997e886f8d9f4aaedc17268ddbbb38e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0d0901997e886f8d9f4aaedc17268ddbbb38e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "html_url": "https://github.com/rust-lang/rust/commit/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5/comments", "author": null, "committer": null, "parents": [{"sha": "f90471e4e31747533ae37712ad5841dce5bbd5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90471e4e31747533ae37712ad5841dce5bbd5d7", "html_url": "https://github.com/rust-lang/rust/commit/f90471e4e31747533ae37712ad5841dce5bbd5d7"}, {"sha": "68f90a2cad5d5230aa59ec95b87e5467cd554dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f90a2cad5d5230aa59ec95b87e5467cd554dac", "html_url": "https://github.com/rust-lang/rust/commit/68f90a2cad5d5230aa59ec95b87e5467cd554dac"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "8ec3f5133b5998b4f67faab766e2fdb8bde94ce4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "patch": "@@ -1161,7 +1161,7 @@ fn compile_test_(config: &Config, props: &TestProps,\n     let args = make_compile_args(config,\n                                  props,\n                                  link_args,\n-                                 |a, b| ThisFile(make_exe_name(a, b)), testfile);\n+                                 |a, b| TargetLocation::ThisFile(make_exe_name(a, b)), testfile);\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n@@ -1219,7 +1219,7 @@ fn compose_and_run_compiler(\n                               crate_type,\n                               |a,b| {\n                                   let f = make_lib_name(a, b, testfile);\n-                                  ThisDirectory(f.dir_path())\n+                                  TargetLocation::ThisDirectory(f.dir_path())\n                               },\n                               &abs_ab);\n         let auxres = compose_and_run(config,\n@@ -1296,11 +1296,11 @@ fn make_compile_args(config: &Config,\n         args.push(\"prefer-dynamic\".to_string());\n     }\n     let path = match xform_file {\n-        ThisFile(path) => {\n+        TargetLocation::ThisFile(path) => {\n             args.push(\"-o\".to_string());\n             path\n         }\n-        ThisDirectory(path) => {\n+        TargetLocation::ThisDirectory(path) => {\n             args.push(\"--out-dir\".to_string());\n             path\n         }\n@@ -1672,7 +1672,8 @@ fn compile_test_and_save_bitcode(config: &Config, props: &TestProps,\n     let args = make_compile_args(config,\n                                  props,\n                                  link_args,\n-                                 |a, b| ThisDirectory(output_base_name(a, b).dir_path()),\n+                                 |a, b| TargetLocation::ThisDirectory(\n+                                     output_base_name(a, b).dir_path()),\n                                  testfile);\n     compose_and_run_compiler(config, props, testfile, args, None)\n }"}, {"sha": "642235ed4e3804eb5d4f81b2b6ee0de98e002cc7", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=ab8d811ebdbf5dbd59f6a3d94f99f035491cedf5", "patch": "@@ -43,8 +43,6 @@ def print_struct_val(val, internal_dict):\n     return print_struct_val_starting_from(0, val, internal_dict)\n \n def print_vec_slice_val(val, internal_dict):\n-  output = \"&[\"\n-\n   length = val.GetChildAtIndex(1).GetValueAsUnsigned()\n \n   data_ptr_val = val.GetChildAtIndex(0)\n@@ -56,16 +54,12 @@ def print_vec_slice_val(val, internal_dict):\n \n   start_address = data_ptr_val.GetValueAsUnsigned()\n \n-  for i in range(length):\n+  def render_element(i):\n     address = start_address + i * element_type_size\n-    element_val = val.CreateValueFromAddress( val.GetName() + (\"[%s]\" % i), address, element_type )\n-    output += print_val(element_val, internal_dict)\n-\n-    if i != length - 1:\n-      output += \", \"\n+    element_val = val.CreateValueFromAddress( val.GetName() + (\"[%s]\" % i), address, element_type)\n+    return print_val(element_val, internal_dict)\n \n-  output += \"]\"\n-  return output\n+  return \"&[%s]\" % (', '.join([render_element(i) for i in range(length)]))\n \n def print_struct_val_starting_from(field_start_index, val, internal_dict):\n   '''\n@@ -77,39 +71,33 @@ def print_struct_val_starting_from(field_start_index, val, internal_dict):\n   t = val.GetType()\n   has_field_names = type_has_field_names(t)\n   type_name = extract_type_name(t.GetName())\n-  output = \"\"\n-\n-  if not type_name.startswith(\"(\"):\n-    # this is a tuple, so don't print the type name\n-    output += type_name\n \n   if has_field_names:\n-    output += \" { \\n\"\n+      template = \"%(type_name)s {\\n%(body)s\\n}\"\n+      separator = \", \\n\"\n   else:\n-    output += \"(\"\n+      template = \"%(type_name)s(%(body)s)\"\n+      separator = \", \"\n+\n+  if type_name.startswith(\"(\"):\n+    # this is a tuple, so don't print the type name\n+    type_name = \"\"\n \n   num_children = val.num_children\n \n-  for child_index in range(field_start_index, num_children):\n+  def render_child(child_index):\n+    this = \"\"\n     if has_field_names:\n       field_name = t.GetFieldAtIndex(child_index).GetName()\n-      output += field_name + \": \"\n+      this += field_name + \": \"\n \n     field_val = val.GetChildAtIndex(child_index)\n-    output += print_val(field_val, internal_dict)\n+    return this + print_val(field_val, internal_dict)\n \n-    if child_index != num_children - 1:\n-      output += \", \"\n-\n-    if has_field_names:\n-      output += \"\\n\"\n-\n-  if has_field_names:\n-    output += \"}\"\n-  else:\n-    output += \")\"\n+  body = separator.join([render_child(idx) for idx in range(field_start_index, num_children)])\n \n-  return output\n+  return template % {\"type_name\": type_name,\n+                     \"body\": body}\n \n \n def print_enum_val(val, internal_dict):\n@@ -243,3 +231,5 @@ def is_vec_slice(val):\n \n   type_name = extract_type_name(ty.GetName()).replace(\"&'static\", \"&\").replace(\" \", \"\")\n   return type_name.startswith(\"&[\") and type_name.endswith(\"]\")\n+\n+# vi: sw=2:ts=2"}]}