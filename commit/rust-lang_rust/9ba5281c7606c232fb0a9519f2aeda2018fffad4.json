{"sha": "9ba5281c7606c232fb0a9519f2aeda2018fffad4", "node_id": "C_kwDOAAsO6NoAKDliYTUyODFjNzYwNmMyMzJmYjBhOTUxOWYyYWVkYTIwMThmZmZhZDQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-13T18:36:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-13T18:43:36Z"}, "message": "resolve: Move collection of all `macro_rules` in the crate to rustdoc", "tree": {"sha": "00c0551cb10edba866dfbdea4f855aab3ec0e337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c0551cb10edba866dfbdea4f855aab3ec0e337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba5281c7606c232fb0a9519f2aeda2018fffad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba5281c7606c232fb0a9519f2aeda2018fffad4", "html_url": "https://github.com/rust-lang/rust/commit/9ba5281c7606c232fb0a9519f2aeda2018fffad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba5281c7606c232fb0a9519f2aeda2018fffad4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5c7f503eb476f7e2004abca9669c4715a9b275", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5c7f503eb476f7e2004abca9669c4715a9b275", "html_url": "https://github.com/rust-lang/rust/commit/6c5c7f503eb476f7e2004abca9669c4715a9b275"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "dffec44ddbcc301b94e5f3cdea63fe78236bd4d9", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ba5281c7606c232fb0a9519f2aeda2018fffad4/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba5281c7606c232fb0a9519f2aeda2018fffad4/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=9ba5281c7606c232fb0a9519f2aeda2018fffad4", "patch": "@@ -1268,7 +1268,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             };\n             let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);\n             self.r.set_binding_parent_module(binding, parent_scope.module);\n-            self.r.all_macro_rules.insert(ident.name, res);\n             if is_macro_export {\n                 let module = self.r.graph_root;\n                 self.r.define(module, ident, MacroNS, (res, vis, span, expansion, IsMacroExport));"}, {"sha": "6c0148a17a1b828655d5cfc54356daa4ce5d9add", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ba5281c7606c232fb0a9519f2aeda2018fffad4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba5281c7606c232fb0a9519f2aeda2018fffad4/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9ba5281c7606c232fb0a9519f2aeda2018fffad4", "patch": "@@ -59,7 +59,7 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n-use std::{cmp, fmt, mem, ptr};\n+use std::{cmp, fmt, ptr};\n use tracing::debug;\n \n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n@@ -966,8 +966,6 @@ pub struct Resolver<'a> {\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n-    /// FIXME: The only user of this is a doc link resolution hack for rustdoc.\n-    all_macro_rules: FxHashMap<Symbol, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n@@ -1360,7 +1358,6 @@ impl<'a> Resolver<'a> {\n             registered_attrs,\n             registered_tools,\n             macro_use_prelude: FxHashMap::default(),\n-            all_macro_rules: Default::default(),\n             macro_map: FxHashMap::default(),\n             dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),\n             dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),\n@@ -1912,11 +1909,6 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    // For rustdoc.\n-    pub fn take_all_macro_rules(&mut self) -> FxHashMap<Symbol, Res> {\n-        mem::take(&mut self.all_macro_rules)\n-    }\n-\n     /// For rustdoc.\n     /// For local modules returns only reexports, for external modules returns all children.\n     pub fn module_children_or_reexports(&self, def_id: DefId) -> Vec<ModChild> {\n@@ -1928,8 +1920,12 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// For rustdoc.\n-    pub fn macro_rules_scope(&self, def_id: LocalDefId) -> MacroRulesScopeRef<'a> {\n-        *self.macro_rules_scopes.get(&def_id).expect(\"not a `macro_rules` item\")\n+    pub fn macro_rules_scope(&self, def_id: LocalDefId) -> (MacroRulesScopeRef<'a>, Res) {\n+        let scope = *self.macro_rules_scopes.get(&def_id).expect(\"not a `macro_rules` item\");\n+        match scope.get() {\n+            MacroRulesScope::Binding(mb) => (scope, mb.binding.res()),\n+            _ => unreachable!(),\n+        }\n     }\n \n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate."}, {"sha": "0ac27087a97824758ea91e17ea018250f0f43844", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ba5281c7606c232fb0a9519f2aeda2018fffad4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba5281c7606c232fb0a9519f2aeda2018fffad4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=9ba5281c7606c232fb0a9519f2aeda2018fffad4", "patch": "@@ -40,6 +40,7 @@ crate fn early_resolve_intra_doc_links(\n         traits_in_scope: Default::default(),\n         all_traits: Default::default(),\n         all_trait_impls: Default::default(),\n+        all_macro_rules: Default::default(),\n         document_private_items,\n     };\n \n@@ -64,7 +65,7 @@ crate fn early_resolve_intra_doc_links(\n         traits_in_scope: link_resolver.traits_in_scope,\n         all_traits: Some(link_resolver.all_traits),\n         all_trait_impls: Some(link_resolver.all_trait_impls),\n-        all_macro_rules: link_resolver.resolver.take_all_macro_rules(),\n+        all_macro_rules: link_resolver.all_macro_rules,\n     }\n }\n \n@@ -82,6 +83,7 @@ struct EarlyDocLinkResolver<'r, 'ra> {\n     traits_in_scope: DefIdMap<Vec<TraitCandidate>>,\n     all_traits: Vec<DefId>,\n     all_trait_impls: Vec<DefId>,\n+    all_macro_rules: FxHashMap<Symbol, Res<ast::NodeId>>,\n     document_private_items: bool,\n }\n \n@@ -339,8 +341,10 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n                     self.all_trait_impls.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n                 ItemKind::MacroDef(macro_def) if macro_def.macro_rules => {\n-                    self.parent_scope.macro_rules =\n+                    let (macro_rules_scope, res) =\n                         self.resolver.macro_rules_scope(self.resolver.local_def_id(item.id));\n+                    self.parent_scope.macro_rules = macro_rules_scope;\n+                    self.all_macro_rules.insert(item.ident.name, res);\n                 }\n                 _ => {}\n             }"}]}