{"sha": "4148d5361a7d0ace1cf3b64d07c6252bbce087af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNDhkNTM2MWE3ZDBhY2UxY2YzYjY0ZDA3YzYyNTJiYmNlMDg3YWY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-22T21:15:02Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:24Z"}, "message": "Fix fallout from libsyntax implementation", "tree": {"sha": "c3764665877c19dddb63cc55efea17d7aae1ae5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3764665877c19dddb63cc55efea17d7aae1ae5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4148d5361a7d0ace1cf3b64d07c6252bbce087af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4148d5361a7d0ace1cf3b64d07c6252bbce087af", "html_url": "https://github.com/rust-lang/rust/commit/4148d5361a7d0ace1cf3b64d07c6252bbce087af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4148d5361a7d0ace1cf3b64d07c6252bbce087af/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2f16e1365160d05a3d360f21756039d1bd3254", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2f16e1365160d05a3d360f21756039d1bd3254", "html_url": "https://github.com/rust-lang/rust/commit/6a2f16e1365160d05a3d360f21756039d1bd3254"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "d4512f51980e479d1b1f12f6752569ed8313ca3f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -126,6 +126,7 @@ enum Family {\n     TupleVariant,          // v\n     StructVariant,         // V\n     Impl,                  // i\n+    DefTrait,              // d\n     Trait,                 // I\n     Struct,                // S\n     PublicField,           // g\n@@ -151,6 +152,7 @@ fn item_family(item: rbml::Doc) -> Family {\n       'v' => TupleVariant,\n       'V' => StructVariant,\n       'i' => Impl,\n+      'd' => DefTrait,\n       'I' => Trait,\n       'S' => Struct,\n       'g' => PublicField,\n@@ -357,7 +359,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         }\n         Trait => DlDef(def::DefTrait(did)),\n         Enum => DlDef(def::DefTy(did, true)),\n-        Impl => DlImpl(did),\n+        Impl | DefTrait => DlImpl(did),\n         PublicField | InheritedField => DlField,\n     }\n }\n@@ -480,7 +482,7 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n     let item_doc = lookup_item(id, cdata.data());\n     let fam = item_family(item_doc);\n     match fam {\n-        Family::Impl => {\n+        Family::Impl | Family::DefTrait => {\n             reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n                 doc_trait_ref(tp, tcx, cdata)\n             })\n@@ -1356,7 +1358,7 @@ pub fn get_trait_of_item(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)\n     let parent_item_doc = lookup_item(parent_item_id.node, cdata.data());\n     match item_family(parent_item_doc) {\n         Trait => Some(item_def_id(parent_item_doc, cdata)),\n-        Impl => {\n+        Impl | DefTrait => {\n             reader::maybe_get_doc(parent_item_doc, tag_item_trait_ref)\n                 .map(|_| item_trait_ref(parent_item_doc, tcx, cdata).def_id)\n         }"}, {"sha": "fc9d2a13834339ecedbb2e77e331d15c868eb06e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -1201,6 +1201,18 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n+      ast::ItemDefTrait(unsafety, ref ast_trait_ref) => {\n+          add_to_index(item, rbml_w, index);\n+          rbml_w.start_tag(tag_items_data_item);\n+          encode_def_id(rbml_w, def_id);\n+          encode_family(rbml_w, 'd');\n+          encode_name(rbml_w, item.ident.name);\n+          encode_unsafety(rbml_w, unsafety);\n+\n+          let trait_ref = ty::node_id_to_trait_ref(tcx, ast_trait_ref.ref_id);\n+          encode_trait_ref(rbml_w, ecx, &*trait_ref, tag_item_trait_ref);\n+          rbml_w.end_tag();\n+      }\n       ast::ItemImpl(unsafety, polarity, _, ref opt_trait, ref ty, ref ast_items) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure."}, {"sha": "73a9f179fa0e0fa71127b2f9027d41eb0d8ac385", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -301,7 +301,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     ast::ItemTy(..) | ast::ItemStatic(_, _, _) |\n                     ast::ItemMod(..) | ast::ItemForeignMod(..) |\n                     ast::ItemImpl(..) | ast::ItemTrait(..) |\n-                    ast::ItemStruct(..) | ast::ItemEnum(..) => {}\n+                    ast::ItemStruct(..) | ast::ItemEnum(..) |\n+                    ast::ItemDefTrait(..) => {}\n \n                     _ => {\n                         self.tcx.sess.span_bug(item.span,"}, {"sha": "ac3c85acd612a4fc6be7f16d660a723f43c731d4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -115,6 +115,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 ast::ItemUse(_) |\n                 ast::ItemMod(..) |\n                 ast::ItemMac(..) |\n+                ast::ItemDefTrait(..) |\n                 ast::ItemForeignMod(..) |\n                 ast::ItemStatic(..) |\n                 ast::ItemConst(..) => {"}, {"sha": "0f13bd30d534de50a41c732fc045766605b3b5a9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         match item.node {\n             // impls/extern blocks do not break the \"public chain\" because they\n             // cannot have visibility qualifiers on them anyway\n-            ast::ItemImpl(..) | ast::ItemForeignMod(..) => {}\n+            ast::ItemImpl(..) | ast::ItemDefTrait(..) | ast::ItemForeignMod(..) => {}\n \n             // Traits are a little special in that even if they themselves are\n             // not public they may still be exported.\n@@ -1145,6 +1145,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n+            ast::ItemDefTrait(..) |\n             ast::ItemConst(..) | ast::ItemStatic(..) | ast::ItemStruct(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n             ast::ItemExternCrate(_) | ast::ItemUse(_) | ast::ItemMac(..) => {}\n@@ -1204,7 +1205,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemExternCrate(_) | ast::ItemUse(_) |\n+            ast::ItemDefTrait(..) | ast::ItemExternCrate(_) | ast::ItemUse(_) |\n             ast::ItemStatic(..) | ast::ItemConst(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n             ast::ItemMac(..) => {}"}, {"sha": "acea3f5851e87a6e282e4b1cd1004c71425ca745", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -40,7 +40,7 @@ use syntax::ast::{Block, Crate};\n use syntax::ast::{DeclItem, DefId};\n use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n use syntax::ast::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n-use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n+use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefTrait};\n use syntax::ast::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use syntax::ast::{MethodImplItem, Name, NamedField, NodeId};\n use syntax::ast::{PathListIdent, PathListMod};\n@@ -656,6 +656,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 parent.clone()\n             }\n \n+            ItemDefTrait(_, _) |\n             ItemImpl(_, _, _, Some(_), _, _) => parent.clone(),\n \n             ItemTrait(_, _, _, ref items) => {"}, {"sha": "82a3cdaa8ccb4c63a7418cf765b3068ba58fea71", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -70,7 +70,7 @@ use syntax::ast::{ExprClosure, ExprLoop, ExprWhile, ExprMethodCall};\n use syntax::ast::{ExprPath, ExprQPath, ExprStruct, FnDecl};\n use syntax::ast::{ForeignItemFn, ForeignItemStatic, Generics};\n use syntax::ast::{Ident, ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n-use syntax::ast::{ItemFn, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n+use syntax::ast::{ItemFn, ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefTrait};\n use syntax::ast::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use syntax::ast::{Local, MethodImplItem, Mod, Name, NodeId};\n use syntax::ast::{Pat, PatEnum, PatIdent, PatLit};\n@@ -2840,6 +2840,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 });\n             }\n \n+            ItemDefTrait(_, ref trait_ref) => {\n+                self.resolve_trait_reference(item.id, trait_ref, TraitImplementation);\n+            }\n             ItemImpl(_, _,\n                      ref generics,\n                      ref implemented_traits,"}, {"sha": "6fa019a29145fb2c6c0741ef4e74b1c2b22b6c89", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -648,6 +648,9 @@ fn convert_item(ccx: &CollectCtxt, it: &ast::Item) {\n                                    predicates,\n                                    &enum_definition.variants);\n         },\n+        ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+\n+        }\n         ast::ItemImpl(_, _,\n                       ref generics,\n                       ref opt_trait_ref,\n@@ -1141,6 +1144,7 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n             let t = ty::mk_struct(tcx, local_def(it.id), tcx.mk_substs(substs));\n             ty::TypeScheme { ty: t, generics: ty_generics }\n         }\n+        ast::ItemDefTrait(..) |\n         ast::ItemTrait(..) |\n         ast::ItemImpl(..) |\n         ast::ItemMod(..) |"}, {"sha": "7ba589019c5c2e89880fd1a0f159951685f22b71", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4148d5361a7d0ace1cf3b64d07c6252bbce087af/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=4148d5361a7d0ace1cf3b64d07c6252bbce087af", "patch": "@@ -476,6 +476,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n \n             ast::ItemExternCrate(_) |\n             ast::ItemUse(_) |\n+            ast::ItemDefTrait(..) |\n             ast::ItemImpl(..) |\n             ast::ItemStatic(..) |\n             ast::ItemConst(..) |\n@@ -626,6 +627,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n             ast::ItemForeignMod(..) |\n             ast::ItemTy(..) |\n             ast::ItemImpl(..) |\n+            ast::ItemDefTrait(..) |\n             ast::ItemMac(..) => {\n             }\n         }"}]}