{"sha": "de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjA1MmFmOWNmN2FjODNkYTZhODI1NzAxZTMyYmQwZTRhYTlhODU=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-06-18T20:35:10Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-06-24T23:39:51Z"}, "message": "2229: Capture box completely in move closures\n\nEven if the content from box is used in a sharef-ref context,\nwe capture the box entirerly.\n\nThis is motivated by:\n1) We only capture data that is on the stack.\n2) Capturing data from within the box might end up moving more data than\nthe user anticipated.", "tree": {"sha": "cd000847853265864afe204cc799a54fba379347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd000847853265864afe204cc799a54fba379347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "html_url": "https://github.com/rust-lang/rust/commit/de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3872e6bfd555d2ad753ac1f871db3bd7f2a547", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3872e6bfd555d2ad753ac1f871db3bd7f2a547", "html_url": "https://github.com/rust-lang/rust/commit/7c3872e6bfd555d2ad753ac1f871db3bd7f2a547"}], "stats": {"total": 173, "additions": 165, "deletions": 8}, "files": [{"sha": "00531f258613783499d412d45321f994948f114e", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "patch": "@@ -1630,7 +1630,14 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n             self.fcx.param_env,\n             &place_with_id.place,\n         );\n+\n+        let place = restrict_preicision_for_box(&place, self.capture_clause);\n+\n         let place_with_id = PlaceWithHirId { place, ..*place_with_id };\n+        debug!(\n+            \"borrow after restrictions:(place_with_id={:?}, diag_expr_id={:?}, bk={:?})\",\n+            place_with_id, diag_expr_id, bk\n+        );\n \n         if !self.capture_information.contains_key(&place_with_id.place) {\n             self.init_capture_info_for_place(&place_with_id, diag_expr_id);\n@@ -1654,6 +1661,34 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n     }\n }\n \n+// In case of move closures we don't want to capture derefs on a box.\n+// This is motivated by:\n+//   1. We only want to capture data that is on the stack\n+//   2. One motivatiton for the user to use a box might be to reduce the amount of data that gets\n+//      moved (if size of pointer < size of data). We want to make sure that this optimization that\n+//      the user made is respected.\n+fn restrict_preicision_for_box(place: &Place<'tcx>, capture_by: hir::CaptureBy) -> Place<'tcx> {\n+    let mut rv = place.clone();\n+    match capture_by {\n+        hir::CaptureBy::Ref => rv,\n+        hir::CaptureBy::Value => {\n+            if ty::TyS::is_box(place.base_ty) {\n+                Place { projections: Vec::new(), ..rv }\n+            } else {\n+                // Either the box is the last access or there is a deref applied on the box\n+                // In either case we want to stop at the box.\n+                let pos = place.projections.iter().position(|proj| ty::TyS::is_box(proj.ty));\n+                match pos {\n+                    None => rv,\n+                    Some(idx) => {\n+                        Place { projections: rv.projections.drain(0..=idx).collect(), ..rv }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Truncate projections so that following rules are obeyed by the captured `place`:\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely."}, {"sha": "3b5171d7da61cece10c72d5a48420c7578ba064f", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "patch": "@@ -114,8 +114,9 @@ fn struct_contains_ref_to_another_struct_3() {\n fn truncate_box_derefs() {\n     struct S(i32);\n \n-    let b = Box::new(S(10));\n \n+    // Content within the box is moved within the closure\n+    let b = Box::new(S(10));\n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n     //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n@@ -129,6 +130,37 @@ fn truncate_box_derefs() {\n     };\n \n     c();\n+\n+    // Content within the box is used by a shared ref and the box is the root variable\n+    let b = Box::new(S(10));\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        println!(\"{}\", b.0);\n+        //~^ NOTE: Capturing b[] -> ByValue\n+        //~| NOTE: Min Capture b[] -> ByValue\n+    };\n+\n+    c();\n+\n+    // Content within the box is used by a shared ref and the box is not the root variable\n+    let b = Box::new(S(10));\n+    let t = (0, b);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        println!(\"{}\", t.1.0);\n+        //~^ NOTE: Capturing t[(1, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(1, 0)] -> ByValue\n+    };\n }\n \n fn main() {"}, {"sha": "5ec9bbfe2b00f37c79aa3064fa400ab68daa7e8d", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 97, "deletions": 7, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de2052af9cf7ac83da6a825701e32bd0e4aa9a85/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=de2052af9cf7ac83da6a825701e32bd0e4aa9a85", "patch": "@@ -44,7 +44,25 @@ LL |     let mut c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/move_closure.rs:119:13\n+  --> $DIR/move_closure.rs:120:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:137:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:154:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -247,7 +265,7 @@ LL |         let _t = t.0.0;\n    |                  ^^^^^\n \n error: First Pass analysis includes:\n-  --> $DIR/move_closure.rs:122:5\n+  --> $DIR/move_closure.rs:123:5\n    |\n LL | /     move || {\n LL | |\n@@ -259,18 +277,18 @@ LL | |     };\n    | |_____^\n    |\n note: Capturing b[Deref,(0, 0)] -> ByValue\n-  --> $DIR/move_closure.rs:125:18\n+  --> $DIR/move_closure.rs:126:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n note: Capturing b[] -> ByValue\n-  --> $DIR/move_closure.rs:125:18\n+  --> $DIR/move_closure.rs:126:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n \n error: Min Capture analysis includes:\n-  --> $DIR/move_closure.rs:122:5\n+  --> $DIR/move_closure.rs:123:5\n    |\n LL | /     move || {\n LL | |\n@@ -282,11 +300,83 @@ LL | |     };\n    | |_____^\n    |\n note: Min Capture b[] -> ByValue\n-  --> $DIR/move_closure.rs:125:18\n+  --> $DIR/move_closure.rs:126:18\n    |\n LL |         let _t = b.0;\n    |                  ^^^\n \n-error: aborting due to 18 previous errors; 1 warning emitted\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:140:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", b.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing b[] -> ByValue\n+  --> $DIR/move_closure.rs:143:24\n+   |\n+LL |         println!(\"{}\", b.0);\n+   |                        ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:140:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", b.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture b[] -> ByValue\n+  --> $DIR/move_closure.rs:143:24\n+   |\n+LL |         println!(\"{}\", b.0);\n+   |                        ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:157:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", t.1.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(1, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:160:24\n+   |\n+LL |         println!(\"{}\", t.1.0);\n+   |                        ^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:157:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", t.1.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(1, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:160:24\n+   |\n+LL |         println!(\"{}\", t.1.0);\n+   |                        ^^^^^\n+\n+error: aborting due to 24 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}]}