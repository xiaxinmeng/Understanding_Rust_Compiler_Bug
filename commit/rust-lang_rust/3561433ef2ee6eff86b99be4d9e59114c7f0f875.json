{"sha": "3561433ef2ee6eff86b99be4d9e59114c7f0f875", "node_id": "C_kwDOAAsO6NoAKDM1NjE0MzNlZjJlZTZlZmY4NmI5OWJlNGQ5ZTU5MTE0YzdmMGY4NzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T14:49:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T14:49:12Z"}, "message": "Auto merge of #13026 - Veykril:nameres, r=Veykril\n\ninternal: Make `resolve_name_in_module` a bit more lazy", "tree": {"sha": "b1bb4173fd30fa4c404fc024bbfd74ad9dbe62c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bb4173fd30fa4c404fc024bbfd74ad9dbe62c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3561433ef2ee6eff86b99be4d9e59114c7f0f875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3561433ef2ee6eff86b99be4d9e59114c7f0f875", "html_url": "https://github.com/rust-lang/rust/commit/3561433ef2ee6eff86b99be4d9e59114c7f0f875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3561433ef2ee6eff86b99be4d9e59114c7f0f875/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6201299c72fb3c7b2d7c647623ad12d7886612", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6201299c72fb3c7b2d7c647623ad12d7886612", "html_url": "https://github.com/rust-lang/rust/commit/6d6201299c72fb3c7b2d7c647623ad12d7886612"}, {"sha": "88b19cc39b14446cc12e02a20c6f489f9883b760", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b19cc39b14446cc12e02a20c6f489f9883b760", "html_url": "https://github.com/rust-lang/rust/commit/88b19cc39b14446cc12e02a20c6f489f9883b760"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "8dfda6df64e7c5579bfa48c908ac7c7a82a52124", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3561433ef2ee6eff86b99be4d9e59114c7f0f875/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3561433ef2ee6eff86b99be4d9e59114c7f0f875/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=3561433ef2ee6eff86b99be4d9e59114c7f0f875", "patch": "@@ -399,35 +399,35 @@ impl DefMap {\n                 Some(_) | None => from_scope.or(from_builtin),\n             },\n         };\n-        let from_extern_prelude = self\n-            .extern_prelude\n-            .get(name)\n-            .map_or(PerNs::none(), |&it| PerNs::types(it.into(), Visibility::Public));\n \n-        let from_prelude = self.resolve_in_prelude(db, name);\n+        let extern_prelude = || {\n+            self.extern_prelude\n+                .get(name)\n+                .map_or(PerNs::none(), |&it| PerNs::types(it.into(), Visibility::Public))\n+        };\n+        let prelude = || self.resolve_in_prelude(db, name);\n \n-        from_legacy_macro.or(from_scope_or_builtin).or(from_extern_prelude).or(from_prelude)\n+        from_legacy_macro.or(from_scope_or_builtin).or_else(extern_prelude).or_else(prelude)\n     }\n \n     fn resolve_name_in_crate_root_or_extern_prelude(\n         &self,\n         db: &dyn DefDatabase,\n         name: &Name,\n     ) -> PerNs {\n-        let arc;\n-        let crate_def_map = match self.block {\n+        let from_crate_root = match self.block {\n             Some(_) => {\n-                arc = self.crate_root(db).def_map(db);\n-                &arc\n+                let def_map = self.crate_root(db).def_map(db);\n+                def_map[def_map.root].scope.get(name)\n             }\n-            None => self,\n+            None => self[self.root].scope.get(name),\n+        };\n+        let from_extern_prelude = || {\n+            self.resolve_name_in_extern_prelude(db, name)\n+                .map_or(PerNs::none(), |it| PerNs::types(it.into(), Visibility::Public))\n         };\n-        let from_crate_root = crate_def_map[crate_def_map.root].scope.get(name);\n-        let from_extern_prelude = self\n-            .resolve_name_in_extern_prelude(db, name)\n-            .map_or(PerNs::none(), |it| PerNs::types(it.into(), Visibility::Public));\n \n-        from_crate_root.or(from_extern_prelude)\n+        from_crate_root.or_else(from_extern_prelude)\n     }\n \n     fn resolve_in_prelude(&self, db: &dyn DefDatabase, name: &Name) -> PerNs {"}, {"sha": "2bc1f8e926e97f04db9936a0862d36c36a7b255e", "filename": "crates/hir-def/src/per_ns.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3561433ef2ee6eff86b99be4d9e59114c7f0f875/crates%2Fhir-def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3561433ef2ee6eff86b99be4d9e59114c7f0f875/crates%2Fhir-def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fper_ns.rs?ref=3561433ef2ee6eff86b99be4d9e59114c7f0f875", "patch": "@@ -43,6 +43,10 @@ impl PerNs {\n         self.types.is_none() && self.values.is_none() && self.macros.is_none()\n     }\n \n+    pub fn is_full(&self) -> bool {\n+        self.types.is_some() && self.values.is_some() && self.macros.is_some()\n+    }\n+\n     pub fn take_types(self) -> Option<ModuleDefId> {\n         self.types.map(|it| it.0)\n     }\n@@ -84,6 +88,14 @@ impl PerNs {\n         }\n     }\n \n+    pub fn or_else(self, f: impl FnOnce() -> PerNs) -> PerNs {\n+        if self.is_full() {\n+            self\n+        } else {\n+            self.or(f())\n+        }\n+    }\n+\n     pub fn iter_items(self) -> impl Iterator<Item = ItemInNs> {\n         let _p = profile::span(\"PerNs::iter_items\");\n         self.types"}]}