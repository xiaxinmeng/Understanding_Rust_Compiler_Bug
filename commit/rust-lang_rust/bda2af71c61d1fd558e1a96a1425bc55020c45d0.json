{"sha": "bda2af71c61d1fd558e1a96a1425bc55020c45d0", "node_id": "C_kwDOAAsO6NoAKGJkYTJhZjcxYzYxZDFmZDU1OGUxYTk2YTE0MjViYzU1MDIwYzQ1ZDA", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-02T14:51:12Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T09:40:13Z"}, "message": "feat: allow `generate_function` to generate in different local crate", "tree": {"sha": "fed875f46b771891a564006e51f8f15c0f231df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed875f46b771891a564006e51f8f15c0f231df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bda2af71c61d1fd558e1a96a1425bc55020c45d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQBwH0ACgkQ4laYqTBY\nYXG7lw//cyb/eJ1ZLfLRptJHd0vfwf+EzerRb20tkme1FmbHvV/4Zrlun0B+JcJd\nlufg4zQLguqsaPZOibeaxAXL8WZ2YSvYg1F7EUP07M10VEsSCUS46qw8dAhbqc9D\nILy9xzl/MQjU/f5WpIk1S97RlzBnXlAhnighlTqQYpEFdb7TQc4iFXauDgHHb7QY\nl1rcWuyVDYamp0ci6JcPRO7OC0sXK3KU1Bp8VWRjyiC0zD9brUZ/1/vdgvR6T/o+\nIvjjaQ2DXYvunpad+e4+b2CU7NC+C9hnwc2eRJ3uzgo5SBdC4N8uPtfRjgDPT85N\nvw8xUPc2IByG4h/XtzMCo7lPzQyARnDq34AnNGBwYUy4ZAUShib4RoXlM/1l4enc\niRQzBHOAr9KsDu4QEGOMvcQztqNCKjM+0R+s0xt3N08T0DO4QdnrPs3DIfMLN8Ah\nfuya9IkEWnBC+uFUfNK7l1YafjPR1JJ+xOFTbVsa3Pu6WJG2O/nh8mHIS7xfDoNw\nzB1j8j/sw7CnUH86niDEUBoUdBmdEYRepNVx21XTrwOaxQbZN6mZaiQjmxV9uB37\nX1rKWmRXJtKmEdMEMqkWuza/58bij9VzoIIgz2FD3WCFR/I9dqWQeDQMzsJh4XNq\nrmhbiFUxpb81ZvGM2nEjVICHcpgug5xBMHnfBhFkGoRmy+Xsi+Y=\n=zk6u\n-----END PGP SIGNATURE-----", "payload": "tree fed875f46b771891a564006e51f8f15c0f231df4\nparent 943de55214b510902cf0cfc961776190adbda4cf\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1677768672 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1677836413 +0900\n\nfeat: allow `generate_function` to generate in different local crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bda2af71c61d1fd558e1a96a1425bc55020c45d0", "html_url": "https://github.com/rust-lang/rust/commit/bda2af71c61d1fd558e1a96a1425bc55020c45d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bda2af71c61d1fd558e1a96a1425bc55020c45d0/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943de55214b510902cf0cfc961776190adbda4cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/943de55214b510902cf0cfc961776190adbda4cf", "html_url": "https://github.com/rust-lang/rust/commit/943de55214b510902cf0cfc961776190adbda4cf"}], "stats": {"total": 171, "additions": 140, "deletions": 31}, "files": [{"sha": "26f678e5a9b7b1305dbacc77c05b8cd525cc8138", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bda2af71c61d1fd558e1a96a1425bc55020c45d0", "patch": "@@ -489,7 +489,7 @@ impl Module {\n     }\n \n     /// Finds nearest non-block ancestor `Module` (`self` included).\n-    fn nearest_non_block_module(self, db: &dyn HirDatabase) -> Module {\n+    pub fn nearest_non_block_module(self, db: &dyn HirDatabase) -> Module {\n         let mut id = self.id;\n         loop {\n             let def_map = id.def_map(db.upcast());"}, {"sha": "eef037f98754aa8010357002ce7e4ea6bf774827", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 125, "deletions": 23, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=bda2af71c61d1fd558e1a96a1425bc55020c45d0", "patch": "@@ -5,6 +5,7 @@ use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n     famous_defs::FamousDefs,\n+    helpers::is_editable_crate,\n     path_transform::PathTransform,\n     FxHashMap, FxHashSet, RootDatabase, SnippetCap,\n };\n@@ -65,6 +66,13 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let fn_name = &*name_ref.text();\n     let TargetInfo { target_module, adt_name, target, file, insert_offset } =\n         fn_target_info(ctx, path, &call, fn_name)?;\n+\n+    if let Some(m) = target_module {\n+        if !is_editable_crate(m.krate(), ctx.db()) {\n+            return None;\n+        }\n+    }\n+\n     let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let label = format!(\"Generate {} function\", function_builder.fn_name);\n@@ -141,12 +149,11 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let receiver_ty = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references();\n     let adt = receiver_ty.as_adt()?;\n \n-    let current_module = ctx.sema.scope(call.syntax())?.module();\n     let target_module = adt.module(ctx.sema.db);\n-\n-    if current_module.krate() != target_module.krate() {\n+    if !is_editable_crate(target_module.krate(), ctx.db()) {\n         return None;\n     }\n+\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n     let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n \n@@ -253,7 +260,7 @@ struct FunctionBuilder {\n     params: ast::ParamList,\n     ret_type: Option<ast::RetType>,\n     should_focus_return_type: bool,\n-    needs_pub: bool,\n+    visibility: Visibility,\n     is_async: bool,\n }\n \n@@ -264,12 +271,14 @@ impl FunctionBuilder {\n         ctx: &AssistContext<'_>,\n         call: &ast::CallExpr,\n         fn_name: &str,\n-        target_module: Option<hir::Module>,\n+        target_module: Option<Module>,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n-        let needs_pub = target_module.is_some();\n         let target_module =\n             target_module.or_else(|| ctx.sema.scope(target.syntax()).map(|it| it.module()))?;\n+\n+        let current_module = ctx.sema.scope(call.syntax())?.module();\n+        let visibility = calculate_necessary_visibility(current_module, target_module, ctx);\n         let fn_name = make::name(fn_name);\n         let mut necessary_generic_params = FxHashSet::default();\n         let params = fn_args(\n@@ -300,7 +309,7 @@ impl FunctionBuilder {\n             params,\n             ret_type,\n             should_focus_return_type,\n-            needs_pub,\n+            visibility,\n             is_async,\n         })\n     }\n@@ -313,8 +322,9 @@ impl FunctionBuilder {\n         target_module: Module,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n-        let needs_pub =\n-            !module_is_descendant(&ctx.sema.scope(call.syntax())?.module(), &target_module, ctx);\n+        let current_module = ctx.sema.scope(call.syntax())?.module();\n+        let visibility = calculate_necessary_visibility(current_module, target_module, ctx);\n+\n         let fn_name = make::name(&name.text());\n         let mut necessary_generic_params = FxHashSet::default();\n         necessary_generic_params.extend(receiver_ty.generic_params(ctx.db()));\n@@ -346,15 +356,19 @@ impl FunctionBuilder {\n             params,\n             ret_type,\n             should_focus_return_type,\n-            needs_pub,\n+            visibility,\n             is_async,\n         })\n     }\n \n     fn render(self, is_method: bool) -> FunctionTemplate {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n-        let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n+        let visibility = match self.visibility {\n+            Visibility::None => None,\n+            Visibility::Crate => Some(make::visibility_pub_crate()),\n+            Visibility::Pub => Some(make::visibility_pub()),\n+        };\n         let mut fn_def = make::fn_(\n             visibility,\n             self.fn_name,\n@@ -527,7 +541,7 @@ impl GeneratedFunctionTarget {\n /// Computes parameter list for the generated function.\n fn fn_args(\n     ctx: &AssistContext<'_>,\n-    target_module: hir::Module,\n+    target_module: Module,\n     call: ast::CallableExpr,\n     necessary_generic_params: &mut FxHashSet<hir::GenericParam>,\n ) -> Option<ast::ParamList> {\n@@ -957,13 +971,13 @@ fn fn_arg_name(sema: &Semantics<'_, RootDatabase>, arg_expr: &ast::Expr) -> Stri\n \n fn fn_arg_type(\n     ctx: &AssistContext<'_>,\n-    target_module: hir::Module,\n+    target_module: Module,\n     fn_arg: &ast::Expr,\n     generic_params: &mut FxHashSet<hir::GenericParam>,\n ) -> String {\n     fn maybe_displayed_type(\n         ctx: &AssistContext<'_>,\n-        target_module: hir::Module,\n+        target_module: Module,\n         fn_arg: &ast::Expr,\n         generic_params: &mut FxHashSet<hir::GenericParam>,\n     ) -> Option<String> {\n@@ -1048,16 +1062,29 @@ fn next_space_for_fn_in_impl(impl_: &ast::Impl) -> Option<GeneratedFunctionTarge\n     }\n }\n \n-fn module_is_descendant(module: &hir::Module, ans: &hir::Module, ctx: &AssistContext<'_>) -> bool {\n-    if module == ans {\n-        return true;\n-    }\n-    for c in ans.children(ctx.sema.db) {\n-        if module_is_descendant(module, &c, ctx) {\n-            return true;\n-        }\n+#[derive(Clone, Copy)]\n+enum Visibility {\n+    None,\n+    Crate,\n+    Pub,\n+}\n+\n+fn calculate_necessary_visibility(\n+    current_module: Module,\n+    target_module: Module,\n+    ctx: &AssistContext<'_>,\n+) -> Visibility {\n+    let db = ctx.db();\n+    let current_module = current_module.nearest_non_block_module(db);\n+    let target_module = target_module.nearest_non_block_module(db);\n+\n+    if target_module.krate() != current_module.krate() {\n+        Visibility::Pub\n+    } else if current_module.path_to_root(db).contains(&target_module) {\n+        Visibility::None\n+    } else {\n+        Visibility::Crate\n     }\n-    false\n }\n \n // This is never intended to be used as a generic graph strucuture. If there's ever another need of\n@@ -2656,4 +2683,79 @@ fn main() {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn applicable_in_different_local_crate() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:local\n+fn dummy() {}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::foo$0();\n+}\n+\",\n+            r\"\n+fn dummy() {}\n+\n+pub fn foo() ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn applicable_in_different_local_crate_method() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:local\n+pub struct S;\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::S.foo$0();\n+}\n+\",\n+            r\"\n+pub struct S;\n+impl S {\n+    pub fn foo(&self) ${0:-> _} {\n+        todo!()\n+    }\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_different_library_crate() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:library\n+fn dummy() {}\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::foo$0();\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_in_different_library_crate_method() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+//- /lib.rs crate:lib new_source_root:library\n+pub struct S;\n+//- /main.rs crate:main deps:lib new_source_root:local\n+fn main() {\n+    lib::S.foo$0();\n+}\n+\",\n+        );\n+    }\n }"}, {"sha": "d5dda6dae4f69d8087238f879417ca89a5546af6", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=bda2af71c61d1fd558e1a96a1425bc55020c45d0", "patch": "@@ -6,13 +6,13 @@ mod tests;\n \n use std::iter;\n \n-use base_db::SourceDatabaseExt;\n use hir::{\n     HasAttrs, Local, Name, PathResolution, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo,\n };\n use ide_db::{\n     base_db::{FilePosition, SourceDatabase},\n     famous_defs::FamousDefs,\n+    helpers::is_editable_crate,\n     FxHashMap, FxHashSet, RootDatabase,\n };\n use syntax::{\n@@ -525,10 +525,11 @@ impl<'a> CompletionContext<'a> {\n                 return Visible::No;\n             }\n             // If the definition location is editable, also show private items\n-            let root_file = defining_crate.root_file(self.db);\n-            let source_root_id = self.db.file_source_root(root_file);\n-            let is_editable = !self.db.source_root(source_root_id).is_library;\n-            return if is_editable { Visible::Editable } else { Visible::No };\n+            return if is_editable_crate(defining_crate, self.db) {\n+                Visible::Editable\n+            } else {\n+                Visible::No\n+            };\n         }\n \n         if self.is_doc_hidden(attrs, defining_crate) {"}, {"sha": "8e3b1eef15b2d2c7f1611398d1179f1d95ac1928", "filename": "crates/ide-db/src/helpers.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda2af71c61d1fd558e1a96a1425bc55020c45d0/crates%2Fide-db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fhelpers.rs?ref=bda2af71c61d1fd558e1a96a1425bc55020c45d0", "patch": "@@ -2,8 +2,8 @@\n \n use std::collections::VecDeque;\n \n-use base_db::FileId;\n-use hir::{ItemInNs, ModuleDef, Name, Semantics};\n+use base_db::{FileId, SourceDatabaseExt};\n+use hir::{Crate, ItemInNs, ModuleDef, Name, Semantics};\n use syntax::{\n     ast::{self, make},\n     AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n@@ -103,3 +103,9 @@ pub fn lint_eq_or_in_group(lint: &str, lint_is: &str) -> bool {\n         false\n     }\n }\n+\n+pub fn is_editable_crate(krate: Crate, db: &RootDatabase) -> bool {\n+    let root_file = krate.root_file(db);\n+    let source_root_id = db.file_source_root(root_file);\n+    !db.source_root(source_root_id).is_library\n+}"}]}