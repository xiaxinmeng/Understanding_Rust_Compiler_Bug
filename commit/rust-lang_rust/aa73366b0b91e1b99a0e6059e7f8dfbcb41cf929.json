{"sha": "aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929", "node_id": "C_kwDOAAsO6NoAKGFhNzMzNjZiMGI5MWUxYjk5YTBlNjA1OWU3ZjhkZmJjYjQxY2Y5Mjk", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-01-13T11:44:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-01-13T11:44:02Z"}, "message": "internal: explain the idea behind rust-project.json", "tree": {"sha": "cbfa7cddc98c351c8d50226a0ccff0218a348008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfa7cddc98c351c8d50226a0ccff0218a348008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929", "html_url": "https://github.com/rust-lang/rust/commit/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a3f34ad8f7d38ad3cf81f89eb8b8d5cbb1b3eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a3f34ad8f7d38ad3cf81f89eb8b8d5cbb1b3eb", "html_url": "https://github.com/rust-lang/rust/commit/c7a3f34ad8f7d38ad3cf81f89eb8b8d5cbb1b3eb"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "a990fb267a7dae084e1b9430f8e6ddecd58b3464", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=aa73366b0b91e1b99a0e6059e7f8dfbcb41cf929", "patch": "@@ -4,6 +4,50 @@\n //! idea here is that people who do not use Cargo, can instead teach their build\n //! system to generate `rust-project.json` which can be ingested by\n //! rust-analyzer.\n+//!\n+//! This short file is a somewhat big conceptual piece of the architecture of\n+//! rust-analyzer, so it's worth elaborating on the underlying ideas and\n+//! motivation.\n+//!\n+//! For rust-analyzer to function, it needs some information about the project.\n+//! Specifically, it maintains an in-memory data structure which lists all the\n+//! crates (compilation units) and dependencies between them. This is necessary\n+//! a global singleton, as we do want, eg, find usages to always search across\n+//! the whole project, rather than just in the \"current\" crate.\n+//!\n+//! Normally, we get this \"crate graph\" by calling `cargo metadata\n+//! --message-format=json` for each cargo workspace and merging results. This\n+//! works for your typical cargo project, but breaks down for large folks who\n+//! have a monorepo with an infitine amount of Rust which is build with bazel or\n+//! some such.\n+//!\n+//! To support this use-case, we need to make _something_ configurable. To avoid\n+//! [midlayer mistake](https://lwn.net/Articles/336262/), we allow configuring\n+//! the lowest possible layer. `ProjectJson` is essentially a hook to just set\n+//! that global singleton in-memory data structure. It is optimized for power,\n+//! not for convenience (you'd be using cargo anyway if you wanted nice things,\n+//! right? :)\n+//!\n+//! `rust-project.json` also isn't necessary a file. Architecturally, we support\n+//! any convenient way to specify this data, which today is:\n+//!\n+//! * file on disk\n+//! * a field in the config (ie, you can send a JSON request with the contents\n+//!   of rust-project.json to rust-analyzer, no need to write anything to disk)\n+//!\n+//! Another possible thing we don't do today, but which would be totally valid,\n+//! is to add an extension point to VS Code extension to register custom\n+//! project.\n+//!\n+//! In general, it is assumed that if you are going to use `rust-project.json`,\n+//! you'd write a fair bit of custom code gluing your build system to ra through\n+//! this JSON format. This logic can take form of a VS Code extension, or a\n+//! proxy process which injects data into \"configure\" LSP request, or maybe just\n+//! a simple build system rule to generate the file.\n+//!\n+//! In particular, the logic for lazily loading parts of the monorepo as the\n+//! user explores them belongs to that extension (it's totally valid to change\n+//! rust-project.json over time via configuration request!)\n \n use std::path::PathBuf;\n "}]}