{"sha": "821b836634d7f86a867c0e642abbd15c3064b36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMWI4MzY2MzRkN2Y4NmE4NjdjMGU2NDJhYmJkMTVjMzA2NGIzNmQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T17:21:18Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:04:41Z"}, "message": "librustc: use tuple indexing", "tree": {"sha": "339208c1d356efd9ade1b1a9449e88ff88751336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339208c1d356efd9ade1b1a9449e88ff88751336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/821b836634d7f86a867c0e642abbd15c3064b36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/821b836634d7f86a867c0e642abbd15c3064b36d", "html_url": "https://github.com/rust-lang/rust/commit/821b836634d7f86a867c0e642abbd15c3064b36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/821b836634d7f86a867c0e642abbd15c3064b36d/comments", "author": null, "committer": null, "parents": [{"sha": "c434954b272318d8fdceca01de7d005c8cce2118", "url": "https://api.github.com/repos/rust-lang/rust/commits/c434954b272318d8fdceca01de7d005c8cce2118", "html_url": "https://github.com/rust-lang/rust/commit/c434954b272318d8fdceca01de7d005c8cce2118"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "75f2fc81900c463df82d7255eb56dee405ad2a61", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=821b836634d7f86a867c0e642abbd15c3064b36d", "patch": "@@ -34,7 +34,6 @@ use lint::builtin;\n use util::nodemap::FnvHashMap;\n \n use std::cell::RefCell;\n-use std::tuple::Tuple2;\n use std::mem;\n use syntax::ast_util::IdVisitingOperation;\n use syntax::attr::AttrMetaMethods;\n@@ -87,7 +86,7 @@ impl LintStore {\n     }\n \n     fn set_level(&mut self, lint: LintId, lvlsrc: LevelSource) {\n-        if lvlsrc.val0() == Allow {\n+        if lvlsrc.0 == Allow {\n             self.levels.remove(&lint);\n         } else {\n             self.levels.insert(lint, lvlsrc);\n@@ -110,8 +109,8 @@ impl LintStore {\n \n     pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n         self.lint_groups.iter().map(|(k, v)| (*k,\n-                                              v.ref0().clone(),\n-                                              *v.ref1())).collect()\n+                                              v.0.clone(),\n+                                              v.1)).collect()\n     }\n \n     pub fn register_pass(&mut self, sess: Option<&Session>,\n@@ -275,7 +274,7 @@ impl LintStore {\n             match self.find_lint(lint_name.as_slice(), sess, None) {\n                 Some(lint_id) => self.set_level(lint_id, (level, CommandLine)),\n                 None => {\n-                    match self.lint_groups.iter().map(|(&x, pair)| (x, pair.ref0().clone()))\n+                    match self.lint_groups.iter().map(|(&x, pair)| (x, pair.0.clone()))\n                                                  .collect::<FnvHashMap<&'static str,\n                                                                        Vec<LintId>>>()\n                                                  .get(lint_name.as_slice()) {\n@@ -443,7 +442,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n             None => return,\n             Some(&(Warn, src)) => {\n                 let lint_id = LintId::of(builtin::WARNINGS);\n-                (self.lints.get_level_source(lint_id).val0(), src)\n+                (self.lints.get_level_source(lint_id).0, src)\n             }\n             Some(&pair) => pair,\n         };\n@@ -503,15 +502,15 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n             };\n \n             for (lint_id, level, span) in v.into_iter() {\n-                let now = self.lints.get_level_source(lint_id).val0();\n+                let now = self.lints.get_level_source(lint_id).0;\n                 if now == Forbid && level != Forbid {\n                     let lint_name = lint_id.as_str();\n                     self.tcx.sess.span_err(span,\n                                            format!(\"{}({}) overruled by outer forbid({})\",\n                                                    level.as_str(), lint_name,\n                                                    lint_name).as_slice());\n                 } else if now != level {\n-                    let src = self.lints.get_level_source(lint_id).val1();\n+                    let src = self.lints.get_level_source(lint_id).1;\n                     self.level_stack.push((lint_id, (now, src)));\n                     pushed += 1;\n                     self.lints.set_level(lint_id, (level, Node(span)));"}, {"sha": "e83f69b1e318ee5725281202557319ceaebfc930", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=821b836634d7f86a867c0e642abbd15c3064b36d", "patch": "@@ -364,7 +364,7 @@ impl<'a> Context<'a> {\n         let dypair = self.dylibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix = format!(\"{}{}\", dypair.ref0(), self.crate_name);\n+        let dylib_prefix = format!(\"{}{}\", dypair.0, self.crate_name);\n         let rlib_prefix = format!(\"lib{}\", self.crate_name);\n \n         let mut candidates = HashMap::new();\n@@ -392,8 +392,8 @@ impl<'a> Context<'a> {\n                 (file.slice(rlib_prefix.len(), file.len() - \".rlib\".len()),\n                  true)\n             } else if file.starts_with(dylib_prefix.as_slice()) &&\n-                      file.ends_with(dypair.ref1().as_slice()) {\n-                (file.slice(dylib_prefix.len(), file.len() - dypair.ref1().len()),\n+                      file.ends_with(dypair.1.as_slice()) {\n+                (file.slice(dylib_prefix.len(), file.len() - dypair.1.len()),\n                  false)\n             } else {\n                 return FileDoesntMatch"}, {"sha": "669f4ee6ec81c4c030c05caec66952c2421216dd", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=821b836634d7f86a867c0e642abbd15c3064b36d", "patch": "@@ -220,7 +220,7 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &ast::Expr) {\n             let matrix: Matrix = inlined_arms\n                 .iter()\n                 .filter(|&&(_, guard)| guard.is_none())\n-                .flat_map(|arm| arm.ref0().iter())\n+                .flat_map(|arm| arm.0.iter())\n                 .map(|pat| vec![&**pat])\n                 .collect();\n             check_exhaustive(cx, ex.span, &matrix);"}, {"sha": "9d41efd678c7cd47e03590be7fe3868751a9defb", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821b836634d7f86a867c0e642abbd15c3064b36d/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=821b836634d7f86a867c0e642abbd15c3064b36d", "patch": "@@ -53,7 +53,7 @@ pub struct DataflowLabeller<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n     fn dataflow_for(&self, e: EntryOrExit, n: &Node<'a>) -> String {\n-        let id = n.val1().data.id;\n+        let id = n.1.data.id;\n         debug!(\"dataflow_for({}, id={}) {}\", e, id, self.variants);\n         let mut sets = \"\".to_string();\n         let mut seen_one = false;\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n     }\n \n     fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node, v: Variant) -> String {\n-        let cfgidx = n.val0();\n+        let cfgidx = n.0;\n         match v {\n             Loans   => self.dataflow_loans_for(e, cfgidx),\n             Moves   => self.dataflow_moves_for(e, cfgidx),"}]}