{"sha": "3f62f9bccd618b74761dd8bd7710970445d7a2f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjJmOWJjY2Q2MThiNzQ3NjFkZDhiZDc3MTA5NzA0NDVkN2EyZjk=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-11T09:42:27Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-11T09:44:53Z"}, "message": "ty: several small fixes to is_instantiable\n\n* Don't return early, so logging is not skipped\n* Remove one allocation\n* Indent the match statement correctly", "tree": {"sha": "7c8d1303c66392c1876b6039b4f9453c74dfe7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8d1303c66392c1876b6039b4f9453c74dfe7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f62f9bccd618b74761dd8bd7710970445d7a2f9", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f62f9bccd618b74761dd8bd7710970445d7a2f9", "html_url": "https://github.com/rust-lang/rust/commit/3f62f9bccd618b74761dd8bd7710970445d7a2f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f62f9bccd618b74761dd8bd7710970445d7a2f9/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278b3beafe11be3127b6780850d3d414e833e5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/278b3beafe11be3127b6780850d3d414e833e5b7", "html_url": "https://github.com/rust-lang/rust/commit/278b3beafe11be3127b6780850d3d414e833e5b7"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "267eccbc3978706a1799e705e5c88d62c32ce495", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3f62f9bccd618b74761dd8bd7710970445d7a2f9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62f9bccd618b74761dd8bd7710970445d7a2f9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3f62f9bccd618b74761dd8bd7710970445d7a2f9", "patch": "@@ -2316,59 +2316,59 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n                ::util::ppaux::ty_to_str(cx, ty));\n \n         let r = match get(ty).sty {\n-          ty_nil |\n-          ty_bot |\n-          ty_bool |\n-          ty_int(_) |\n-          ty_uint(_) |\n-          ty_float(_) |\n-          ty_estr(_) |\n-          ty_bare_fn(_) |\n-          ty_closure(_) |\n-          ty_infer(_) |\n-          ty_err |\n-          ty_param(_) |\n-          ty_self(_) |\n-          ty_type |\n-          ty_opaque_box |\n-          ty_opaque_closure_ptr(_) |\n-          ty_evec(_, _) |\n-          ty_unboxed_vec(_) => {\n-            false\n-          }\n-          ty_box(ref mt) |\n-          ty_uniq(ref mt) |\n-          ty_rptr(_, ref mt) => {\n-            return type_requires(cx, seen, r_ty, mt.ty);\n-          }\n+            ty_nil |\n+            ty_bot |\n+            ty_bool |\n+            ty_int(_) |\n+            ty_uint(_) |\n+            ty_float(_) |\n+            ty_estr(_) |\n+            ty_bare_fn(_) |\n+            ty_closure(_) |\n+            ty_infer(_) |\n+            ty_err |\n+            ty_param(_) |\n+            ty_self(_) |\n+            ty_type |\n+            ty_opaque_box |\n+            ty_opaque_closure_ptr(_) |\n+            ty_evec(_, _) |\n+            ty_unboxed_vec(_) => {\n+                false\n+            }\n+            ty_box(ref mt) |\n+            ty_uniq(ref mt) |\n+            ty_rptr(_, ref mt) => {\n+                type_requires(cx, seen, r_ty, mt.ty)\n+            }\n \n-          ty_ptr(*) => {\n-            false           // unsafe ptrs can always be NULL\n-          }\n+            ty_ptr(*) => {\n+                false           // unsafe ptrs can always be NULL\n+            }\n \n-          ty_trait(_, _, _, _) => {\n-            false\n-          }\n+            ty_trait(_, _, _, _) => {\n+                false\n+            }\n \n-          ty_struct(ref did, _) if vec::contains(*seen, did) => {\n-            false\n-          }\n+            ty_struct(ref did, _) if vec::contains(*seen, did) => {\n+                false\n+            }\n \n-          ty_struct(did, ref substs) => {\n-              seen.push(did);\n-              let fields = struct_fields(cx, did, substs);\n-              let r = fields.iter().any(|f| type_requires(cx, seen, r_ty, f.mt.ty));\n-              seen.pop();\n-            r\n-          }\n+            ty_struct(did, ref substs) => {\n+                seen.push(did);\n+                let fields = struct_fields(cx, did, substs);\n+                let r = fields.iter().any(|f| type_requires(cx, seen, r_ty, f.mt.ty));\n+                seen.pop();\n+                r\n+            }\n \n-          ty_tup(ref ts) => {\n-            ts.any(|t| type_requires(cx, seen, r_ty, *t))\n-          }\n+            ty_tup(ref ts) => {\n+                ts.any(|t| type_requires(cx, seen, r_ty, *t))\n+            }\n \n-          ty_enum(ref did, _) if vec::contains(*seen, did) => {\n-            false\n-          }\n+            ty_enum(ref did, _) if vec::contains(*seen, did) => {\n+                false\n+            }\n \n             ty_enum(did, ref substs) => {\n                 seen.push(did);\n@@ -2392,8 +2392,8 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n         return r;\n     }\n \n-    let seen = @mut ~[];\n-    !subtypes_require(cx, seen, r_ty, r_ty)\n+    let mut seen = ~[];\n+    !subtypes_require(cx, &mut seen, r_ty, r_ty)\n }\n \n pub fn type_structurally_contains(cx: ctxt,"}]}