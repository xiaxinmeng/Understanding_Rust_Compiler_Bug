{"sha": "c6e7890e1312412ecf70490b3f00f674fb027f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTc4OTBlMTMxMjQxMmVjZjcwNDkwYjNmMDBmNjc0ZmIwMjdmOGE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-12T00:31:08Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-13T02:30:15Z"}, "message": "dlist: Fix bug in DList::merge\n\nDid not properly allow runs from the `other` list to be merged in. The\ntest case was using a wrong expected value.\n\nEdited docs for merge so they explain more clearly what it does.\n\nAlso make sure insert_ordered is marked pub.", "tree": {"sha": "a082765d1d107684b8ef8490526964d3d6724c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a082765d1d107684b8ef8490526964d3d6724c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e7890e1312412ecf70490b3f00f674fb027f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7890e1312412ecf70490b3f00f674fb027f8a", "html_url": "https://github.com/rust-lang/rust/commit/c6e7890e1312412ecf70490b3f00f674fb027f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7890e1312412ecf70490b3f00f674fb027f8a/comments", "author": null, "committer": null, "parents": [{"sha": "1ee54a86171d70f439b3cf77e566150b78251bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee54a86171d70f439b3cf77e566150b78251bc2", "html_url": "https://github.com/rust-lang/rust/commit/1ee54a86171d70f439b3cf77e566150b78251bc2"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "61db14316fbe95e6ac1dfcf81cbbed4e6f9a4feb", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7890e1312412ecf70490b3f00f674fb027f8a/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7890e1312412ecf70490b3f00f674fb027f8a/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=c6e7890e1312412ecf70490b3f00f674fb027f8a", "patch": "@@ -300,19 +300,26 @@ impl<T> DList<T> {\n         self.push_back(elt);\n     }\n \n-    /// Merge, using the function `f`; take `a` if `f(a, b)` is true, else `b`.\n+    /// Merge DList `other` into this DList, using the function `f`.\n+    /// Iterate the both DList with `a` from self and `b` from `other`, and\n+    /// put `a` in the result if `f(a, b)` is true, else `b`.\n     ///\n     /// O(max(N, M))\n     pub fn merge(&mut self, mut other: DList<T>, f: &fn(&T, &T) -> bool) {\n         {\n             let mut it = self.mut_iter();\n+            let mut elt = it.next();\n             loop {\n-                match (it.next(), other.front()) {\n-                    (None   , _      ) => break,\n-                    (_      , None   ) => return,\n-                    (Some(x), Some(y)) => if f(x, y) { loop }\n+                let take_a = match (&mut elt, other.front()) {\n+                    (_    , None) => return,\n+                    (&None, _   ) => break,\n+                    (&Some(ref mut x), Some(y)) => f(*x, y),\n+                };\n+                if take_a {\n+                    elt = it.next()\n+                } else {\n+                    it.insert_before(other.pop_front().unwrap());\n                 }\n-                it.insert_before(other.pop_front().unwrap());\n             }\n         }\n         self.append(other);\n@@ -351,11 +358,11 @@ impl<T> DList<T> {\n     }\n }\n \n-/// Insert sorted in ascending order\n-///\n-/// O(N)\n impl<T: cmp::TotalOrd> DList<T> {\n-    fn insert_ordered(&mut self, elt: T) {\n+    /// Insert `elt` sorted in ascending order\n+    ///\n+    /// O(N)\n+    pub fn insert_ordered(&mut self, elt: T) {\n         self.insert_when(elt, |a, b| a.cmp(b) != cmp::Less);\n     }\n }\n@@ -758,7 +765,7 @@ mod tests {\n         assert_eq!(m.len(), len);\n         check_links(&m);\n         let res = m.consume_iter().collect::<~[int]>();\n-        assert_eq!(res, ~[-1, 0, 0, 1, 0, 3, 5, 6, 7, 2, 7, 7, 9]);\n+        assert_eq!(res, ~[-1, 0, 0, 0, 1, 3, 5, 6, 7, 2, 7, 7, 9]);\n     }\n \n     #[test]"}]}