{"sha": "742a795c78773d997f5d475c32574536b91b0688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmE3OTVjNzg3NzNkOTk3ZjVkNDc1YzMyNTc0NTM2YjkxYjA2ODg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-26T13:42:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-26T13:42:07Z"}, "message": "Use FunctionBuilder::call_mem{cpy,move}", "tree": {"sha": "5c33b7e53f314d035b856137e45888274461b385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c33b7e53f314d035b856137e45888274461b385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742a795c78773d997f5d475c32574536b91b0688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742a795c78773d997f5d475c32574536b91b0688", "html_url": "https://github.com/rust-lang/rust/commit/742a795c78773d997f5d475c32574536b91b0688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742a795c78773d997f5d475c32574536b91b0688/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e936b93f5318aa34d309a8a3c4904a32b30c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e936b93f5318aa34d309a8a3c4904a32b30c95", "html_url": "https://github.com/rust-lang/rust/commit/16e936b93f5318aa34d309a8a3c4904a32b30c95"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "e1ac63a0c9d5eab2942c04e320b6b2e525639d51", "filename": "src/abi.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/742a795c78773d997f5d475c32574536b91b0688/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742a795c78773d997f5d475c32574536b91b0688/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=742a795c78773d997f5d475c32574536b91b0688", "patch": "@@ -646,15 +646,16 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                         .ins()\n                         .iconst(fx.module.pointer_type(), elem_size as i64);\n                     assert_eq!(args.len(), 3);\n-                    let src = args[0];\n-                    let dst = args[1];\n+                    let src = args[0].load_value(fx);\n+                    let dst = args[1].load_value(fx);\n                     let count = args[2].load_value(fx);\n                     let byte_amount = fx.bcx.ins().imul(count, elem_size);\n-                    fx.easy_call(\n-                        \"memmove\",\n-                        &[dst, src, CValue::ByVal(byte_amount, usize_layout)],\n-                        nil_ty,\n-                    );\n+\n+                    if intrinsic.ends_with(\"_nonoverlapping\") {\n+                        fx.bcx.call_memcpy(fx.isa, dst, src, byte_amount);\n+                    } else {\n+                        fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n+                    }\n                 }\n                 \"discriminant_value\" => {\n                     assert_eq!(args.len(), 1);"}, {"sha": "3ba4b75a071e4be688545100c755a6ddf26b4a4f", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/742a795c78773d997f5d475c32574536b91b0688/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742a795c78773d997f5d475c32574536b91b0688/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=742a795c78773d997f5d475c32574536b91b0688", "patch": "@@ -11,6 +11,7 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n \n pub fn trans_mono_item<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend>,\n     caches: &mut Caches<'tcx>,\n     ccx: &mut crate::constant::ConstantCx,\n@@ -47,7 +48,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 }\n             });\n \n-            trans_fn(tcx, module, ccx, caches, inst);\n+            trans_fn(tcx, isa, module, ccx, caches, inst);\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(ccx, def_id);\n@@ -60,6 +61,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n fn trans_fn<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend>,\n     constants: &mut crate::constant::ConstantCx,\n     caches: &mut Caches<'tcx>,\n@@ -89,6 +91,7 @@ fn trans_fn<'a, 'tcx: 'a>(\n     // Step 5. Make FunctionCx\n     let mut fx = FunctionCx {\n         tcx,\n+        isa,\n         module,\n         instance,\n         mir,"}, {"sha": "64cdd182175f39b10348c2df568d1083bc0a13f7", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/742a795c78773d997f5d475c32574536b91b0688/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742a795c78773d997f5d475c32574536b91b0688/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=742a795c78773d997f5d475c32574536b91b0688", "patch": "@@ -584,6 +584,8 @@ pub fn cton_intcast<'a, 'tcx: 'a>(\n \n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    // FIXME get isa from Module\n+    pub isa: &'a isa::TargetIsa,\n     pub module: &'a mut Module<B>,\n     pub instance: Instance<'tcx>,\n     pub mir: &'tcx Mir<'tcx>,"}, {"sha": "38c58368486018d8a22fc4fa92c2ae393d8c2c4e", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/742a795c78773d997f5d475c32574536b91b0688/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742a795c78773d997f5d475c32574536b91b0688/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=742a795c78773d997f5d475c32574536b91b0688", "patch": "@@ -178,13 +178,16 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         let metadata = tcx.encode_metadata();\n \n-        let mut flags_builder = settings::builder();\n-        flags_builder.enable(\"is_pic\").unwrap();\n-        let flags = settings::Flags::new(flags_builder);\n-        let isa =\n+        fn build_isa(tcx: TyCtxt) -> Box<isa::TargetIsa> {\n+            let mut flags_builder = settings::builder();\n+            flags_builder.enable(\"is_pic\").unwrap();\n+            let flags = settings::Flags::new(flags_builder);\n             cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n                 .unwrap()\n-                .finish(flags);\n+                .finish(flags)\n+        }\n+\n+        let isa = build_isa(tcx);\n \n         let mono_items =\n             collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0;\n@@ -197,7 +200,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n             assert_eq!(pointer_ty(tcx), jit_module.pointer_type());\n \n-            codegen_mono_items(tcx, &mut jit_module, &mono_items);\n+            codegen_mono_items(tcx, &*isa, &mut jit_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n             println!(\"Compiled everything\");\n@@ -237,7 +240,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             );\n             assert_eq!(pointer_ty(tcx), faerie_module.pointer_type());\n \n-            codegen_mono_items(tcx, &mut faerie_module, &mono_items);\n+            codegen_mono_items(tcx, &*build_isa(tcx), &mut faerie_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n \n@@ -318,6 +321,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n fn codegen_mono_items<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    isa: &isa::TargetIsa,\n     module: &mut Module<impl Backend + 'static>,\n     mono_items: &FxHashSet<MonoItem<'tcx>>,\n ) {\n@@ -333,7 +337,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n \n     for mono_item in mono_items {\n         let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n-            base::trans_mono_item(tcx, module, &mut caches, &mut ccx, *mono_item);\n+            base::trans_mono_item(tcx, isa, module, &mut caches, &mut ccx, *mono_item);\n         }));\n \n         if let Err(err) = res {"}]}