{"sha": "b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxY2VlMTEzYzdlY2M2ZWFjMGQ5ODk4ZDVlNTg3MGFkMTVmNzBmNzc=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-17T16:45:18Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-17T16:45:18Z"}, "message": "code review fixes", "tree": {"sha": "46eb9dedde4512abff1b60b76d7afd921c32e4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46eb9dedde4512abff1b60b76d7afd921c32e4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "html_url": "https://github.com/rust-lang/rust/commit/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9c68a0511eb827b2d5a4a3490b5f9c2168a05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9c68a0511eb827b2d5a4a3490b5f9c2168a05d", "html_url": "https://github.com/rust-lang/rust/commit/fe9c68a0511eb827b2d5a4a3490b5f9c2168a05d"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "c5e26f431207a15e50981b16e9c20d51c5cdb1cf", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "patch": "@@ -65,8 +65,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             (self.find_arg_with_anonymous_region(sup, sup),\n              self.find_arg_with_anonymous_region(sub, sub)) {\n \n-            let ((anon_arg_sup, _, _, is_first_sup), (anon_arg_sub, _, _, is_first_sub)) =\n-                (sup_arg, sub_arg);\n+            let (anon_arg_sup, is_first_sup, anon_arg_sub, is_first_sub) =\n+                (sup_arg.arg, sup_arg.is_first, sub_arg.arg, sub_arg.is_first);\n             if self.is_self_anon(is_first_sup, scope_def_id_sup) ||\n                self.is_self_anon(is_first_sub, scope_def_id_sub) {\n                 return false;"}, {"sha": "005eb900c11832ca4a6f97dd827e85c270b02daf", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.\n-        let (named, (arg, new_ty, br, is_first), (scope_def_id, _)) = if\n+        let (named, anon_arg_info, (scope_def_id, _)) = if\n             sub.is_named_region() && self.is_suitable_anonymous_region(sup, false).is_some() {\n             (sub,\n              self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n@@ -44,6 +44,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return false; // inapplicable\n         };\n \n+        let (arg, new_ty, br, is_first) = (anon_arg_info.arg,\n+                                           anon_arg_info.arg_ty,\n+                                           anon_arg_info.bound_region,\n+                                           anon_arg_info.is_first);\n         if self.is_return_type_anon(scope_def_id, br) || self.is_self_anon(is_first, scope_def_id) {\n             return false;\n         } else {"}, {"sha": "902e388ca7bf314784a0651eaa58c43aeae9180f", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cee113c7ecc6eac0d9898d5e5870ad15f70f77/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=b1cee113c7ecc6eac0d9898d5e5870ad15f70f77", "patch": "@@ -16,6 +16,20 @@ use ty::{self, Region};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n \n+// The struct contains the information about the anonymous region\n+// we are searching for.\n+pub struct AnonymousArgInfo<'tcx> {\n+    // the argument corresponding to the anonymous region\n+    pub arg: &'tcx hir::Arg,\n+    // the type corresponding to the anonymopus region argument\n+    pub arg_ty: ty::Ty<'tcx>,\n+    // the ty::BoundRegion corresponding to the anonymous region\n+    pub bound_region: ty::BoundRegion,\n+    // corresponds to id the argument is the first parameter\n+    // in the declaration\n+    pub is_first: bool,\n+}\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method walks the Type of the function body arguments using\n     // `fold_regions()` function and returns the\n@@ -28,11 +42,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // i32, which is the type of y but with the anonymous region replaced\n     // with 'a, the corresponding bound region and is_first which is true if\n     // the hir::Arg is the first argument in the function declaration.\n-    pub fn find_arg_with_anonymous_region\n-        (&self,\n-         anon_region: Region<'tcx>,\n-         replace_region: Region<'tcx>)\n-         -> Option<(&hir::Arg, ty::Ty<'tcx>, ty::BoundRegion, bool)> {\n+    pub fn find_arg_with_anonymous_region(&self,\n+                                          anon_region: Region<'tcx>,\n+                                          replace_region: Region<'tcx>)\n+                                          -> Option<AnonymousArgInfo> {\n \n         if let ty::ReFree(ref free_region) = *anon_region {\n \n@@ -57,7 +70,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     });\n                                 if found_anon_region {\n                                     let is_first = index == 0;\n-                                    Some((arg, new_arg_ty, free_region.bound_region, is_first))\n+                                    Some(AnonymousArgInfo {\n+                                             arg: arg,\n+                                             arg_ty: new_arg_ty,\n+                                             bound_region: free_region.bound_region,\n+                                             is_first: is_first,\n+                                         })\n                                 } else {\n                                     None\n                                 }"}]}