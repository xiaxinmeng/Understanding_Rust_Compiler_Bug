{"sha": "aca66bd052cc078edfdaee8500b41d0303e99cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTY2YmQwNTJjYzA3OGVkZmRhZWU4NTAwYjQxZDAzMDNlOTljZjM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T08:55:41Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T11:06:47Z"}, "message": "WithOptConstParam::dummy -> WithOptConstParam::unknown", "tree": {"sha": "c00d2e31bbe84ccfdd515fd578c1afab3d98f268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00d2e31bbe84ccfdd515fd578c1afab3d98f268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca66bd052cc078edfdaee8500b41d0303e99cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca66bd052cc078edfdaee8500b41d0303e99cf3", "html_url": "https://github.com/rust-lang/rust/commit/aca66bd052cc078edfdaee8500b41d0303e99cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca66bd052cc078edfdaee8500b41d0303e99cf3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8003ccfdcd5731fe00c48f477857bf5ad52c6146", "url": "https://api.github.com/repos/rust-lang/rust/commits/8003ccfdcd5731fe00c48f477857bf5ad52c6146", "html_url": "https://github.com/rust-lang/rust/commit/8003ccfdcd5731fe00c48f477857bf5ad52c6146"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "533d0a6d383c4783d1dd9f1656e9d805283f4d77", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -892,7 +892,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n                 tcx.ensure()\n-                    .mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::dummy(def_id));\n+                    .mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(def_id));\n             }\n         }\n     });"}, {"sha": "1a5c7fe485984bbdcdb326b96c90bbfbdd73e436", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::Intrinsic(def_id)\n             | InstanceDef::ClosureOnceShim { call_once: def_id }\n             | InstanceDef::DropGlue(def_id, _)\n-            | InstanceDef::CloneShim(def_id, _) => ty::WithOptConstParam::dummy(def_id),\n+            | InstanceDef::CloneShim(def_id, _) => ty::WithOptConstParam::unknown(def_id),\n         }\n     }\n \n@@ -298,7 +298,7 @@ impl<'tcx> Instance<'tcx> {\n             def_id,\n             substs\n         );\n-        Instance { def: InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)), substs }\n+        Instance { def: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)), substs }\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {"}, {"sha": "497004b80a5c8d2678646d6104dc25d81dcf3f97", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -1613,7 +1613,8 @@ pub struct WithOptConstParam<T> {\n }\n \n impl<T> WithOptConstParam<T> {\n-    pub fn dummy(did: T) -> WithOptConstParam<T> {\n+    /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.\n+    pub fn unknown(did: T) -> WithOptConstParam<T> {\n         WithOptConstParam { did, const_param_did: None }\n     }\n }"}, {"sha": "3104d2ee36a790432d738897331cd443877f8298", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -2210,7 +2210,7 @@ impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n     pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n-        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::dummy(def_id))\n+        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))\n     }\n \n     pub fn from_opt_const_arg_anon_const("}, {"sha": "d8d988717b8247e968302aa03d9dff670b2ef5b4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -88,7 +88,7 @@ const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n-        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptConstParam::dummy(did)),\n+        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptConstParam::unknown(did)),\n         mir_borrowck_const_arg: |tcx, (did, param_did)| {\n             mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n         },"}, {"sha": "024244582bbf578cf1074ca7b20cbcd20990ec97", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -491,7 +491,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         unsafety_check_result: |tcx, def_id| {\n-            unsafety_check_result(tcx, ty::WithOptConstParam::dummy(def_id))\n+            unsafety_check_result(tcx, ty::WithOptConstParam::unknown(def_id))\n         },\n         unsafety_check_result_const_arg: |tcx, (did, param_did)| {\n             unsafety_check_result("}, {"sha": "db091b3a0abd9ed1dfe96bed6087dfcea2d9a4e5", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n         mir_keys,\n         mir_const,\n         mir_const_qualif: |tcx, did| {\n-            mir_const_qualif(tcx, ty::WithOptConstParam::dummy(did.expect_local()))\n+            mir_const_qualif(tcx, ty::WithOptConstParam::unknown(did.expect_local()))\n         },\n         mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n             mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n@@ -60,7 +60,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n         optimized_mir_of_const_arg,\n         is_mir_available,\n         promoted_mir: |tcx, def_id| {\n-            promoted_mir(tcx, ty::WithOptConstParam::dummy(def_id.expect_local()))\n+            promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id.expect_local()))\n         },\n         promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n             promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n@@ -128,7 +128,7 @@ pub struct MirSource<'tcx> {\n impl<'tcx> MirSource<'tcx> {\n     pub fn item(def_id: DefId) -> Self {\n         MirSource {\n-            instance: InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)),\n+            instance: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n             promoted: None,\n         }\n     }\n@@ -414,7 +414,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(ty::WithOptConstParam::dummy(def_id.to_def_id())),\n+        InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id())),\n         promoted,\n         MirPhase::DropElab,\n         &[post_borrowck_cleanup],\n@@ -478,7 +478,7 @@ fn run_optimization_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(ty::WithOptConstParam::dummy(def_id.to_def_id())),\n+        InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id())),\n         promoted,\n         MirPhase::Optimized,\n         &[\n@@ -493,7 +493,7 @@ fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     if let Some(param_did) = tcx.opt_const_param_of(did) {\n         tcx.optimized_mir_of_const_arg((did, param_did))\n     } else {\n-        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::dummy(did)))\n+        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n     }\n }\n "}, {"sha": "990bfc064c2beb0a1d9728b608eec7d7352ae47b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -249,7 +249,7 @@ pub fn write_mir_pretty<'tcx>(\n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n             writeln!(w)?;\n             let src = MirSource {\n-                instance: ty::InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)),\n+                instance: ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n                 promoted: Some(i),\n             };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;"}, {"sha": "89ad8a1b3370c758def74801aa0c834cbb30cb65", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -601,7 +601,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n                                 val: ty::ConstKind::Unevaluated(\n-                                    ty::WithOptConstParam::dummy(did),\n+                                    ty::WithOptConstParam::unknown(did),\n                                     substs,\n                                     None,\n                                 ),\n@@ -801,7 +801,7 @@ fn convert_path_expr<'a, 'tcx>(\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n                     val: ty::ConstKind::Unevaluated(\n-                        ty::WithOptConstParam::dummy(def_id),\n+                        ty::WithOptConstParam::unknown(def_id),\n                         substs,\n                         None,\n                     ),"}, {"sha": "0bc6c4709786833e4b0ac3eeead6554635e9a579", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -21,7 +21,7 @@ fn resolve_instance<'tcx>(\n         }\n     }\n \n-    inner_resolve_instance(tcx, param_env.and((ty::WithOptConstParam::dummy(did), substs)))\n+    inner_resolve_instance(tcx, param_env.and((ty::WithOptConstParam::unknown(did), substs)))\n }\n \n fn resolve_instance_of_const_arg<'tcx>(\n@@ -210,7 +210,7 @@ fn resolve_associated_item<'tcx>(\n             Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::ImplSourceGenerator(generator_data) => Some(Instance {\n-            def: ty::InstanceDef::Item(ty::WithOptConstParam::dummy(\n+            def: ty::InstanceDef::Item(ty::WithOptConstParam::unknown(\n                 generator_data.generator_def_id,\n             )),\n             substs: generator_data.substs,"}, {"sha": "845a4fcafc2241e31b0c4ab308eff591be9e1edc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -424,7 +424,7 @@ fn check_type_defn<'tcx, F>(\n                     cause,\n                     fcx.param_env,\n                     ty::PredicateKind::ConstEvaluatable(\n-                        ty::WithOptConstParam::dummy(discr_def_id.to_def_id()),\n+                        ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n                     )\n                     .to_predicate(fcx.tcx),"}, {"sha": "e6ef54f528f4b2bf338a9662e27d60b91222197d", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca66bd052cc078edfdaee8500b41d0303e99cf3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=aca66bd052cc078edfdaee8500b41d0303e99cf3", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(self.param_env, ty::WithOptConstParam::dummy(def_id), substs, None, None)\n+                    .const_eval_resolve(self.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None)\n                     .ok()\n                     .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);"}]}