{"sha": "01815b392058dbf862f4287be307821cf00cc964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODE1YjM5MjA1OGRiZjg2MmY0Mjg3YmUzMDc4MjFjZjAwY2M5NjQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-04T18:53:58Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-04T18:53:58Z"}, "message": "Don't copy arguments passed by value with indirection to allocas.", "tree": {"sha": "dc9cf6de1e5f954cc92b051952d665995ea0d91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9cf6de1e5f954cc92b051952d665995ea0d91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01815b392058dbf862f4287be307821cf00cc964", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01815b392058dbf862f4287be307821cf00cc964", "html_url": "https://github.com/rust-lang/rust/commit/01815b392058dbf862f4287be307821cf00cc964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01815b392058dbf862f4287be307821cf00cc964/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef53b7a97c58f65ac6967dfc6d30a4354afa34a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef53b7a97c58f65ac6967dfc6d30a4354afa34a3", "html_url": "https://github.com/rust-lang/rust/commit/ef53b7a97c58f65ac6967dfc6d30a4354afa34a3"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "ad2e96702b0a4eaf8134693968767444471d0fa9", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01815b392058dbf862f4287be307821cf00cc964/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01815b392058dbf862f4287be307821cf00cc964/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=01815b392058dbf862f4287be307821cf00cc964", "patch": "@@ -2028,9 +2028,21 @@ pub fn store_arg<'a>(mut bcx: &'a Block<'a>,\n         Some(path) => {\n             // Generate nicer LLVM for the common case of fn a pattern\n             // like `x: T`\n-            mk_binding_alloca(\n-                bcx, pat.id, path, BindArgument, arg_scope, arg,\n-                |arg, bcx, llval, _| arg.store_to(bcx, llval))\n+            let arg_ty = node_id_type(bcx, pat.id);\n+            if type_of::arg_is_indirect(bcx.ccx(), arg_ty)\n+                && !bcx.ccx().sess.opts.extra_debuginfo {\n+                // Don't copy an indirect argument to an alloca, the caller\n+                // already put it in a temporary alloca and gave it up, unless\n+                // we emit extra-debug-info, which requires local allocas :(.\n+                let arg_val = arg.add_clean(bcx.fcx, arg_scope);\n+                let mut llmap = bcx.fcx.llargs.borrow_mut();\n+                llmap.get().insert(pat.id, Datum(arg_val, arg_ty, Lvalue));\n+                bcx\n+            } else {\n+                mk_binding_alloca(\n+                    bcx, pat.id, path, BindArgument, arg_scope, arg,\n+                    |arg, bcx, llval, _| arg.store_to(bcx, llval))\n+            }\n         }\n \n         None => {"}]}