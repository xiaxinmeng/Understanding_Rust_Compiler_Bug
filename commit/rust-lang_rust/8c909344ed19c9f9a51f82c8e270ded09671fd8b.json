{"sha": "8c909344ed19c9f9a51f82c8e270ded09671fd8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTA5MzQ0ZWQxOWM5ZjlhNTFmODJjOGUyNzBkZWQwOTY3MWZkOGI=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-11-02T08:49:05Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-11-02T10:53:38Z"}, "message": "Suggest more likely code when encountering an incorrect assoc item referencing the current trait", "tree": {"sha": "474cb295f399f2b1870155209eda83e3b3e08ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474cb295f399f2b1870155209eda83e3b3e08ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c909344ed19c9f9a51f82c8e270ded09671fd8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c909344ed19c9f9a51f82c8e270ded09671fd8b", "html_url": "https://github.com/rust-lang/rust/commit/8c909344ed19c9f9a51f82c8e270ded09671fd8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c909344ed19c9f9a51f82c8e270ded09671fd8b/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5558fe8a9207b000b1cab9f3d521b06b144d6f8f", "html_url": "https://github.com/rust-lang/rust/commit/5558fe8a9207b000b1cab9f3d521b06b144d6f8f"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "b14121da79f596059adc7e486ad70bf0b2b42dab", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8c909344ed19c9f9a51f82c8e270ded09671fd8b", "patch": "@@ -1773,11 +1773,21 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         } else {\n             let path_str = tcx.def_path_str(trait_def_id);\n \n+            let def_id = self.item_def_id();\n+\n+            debug!(\"qpath_to_ty: self.item_def_id()={:?}\", def_id);\n+\n+            let parent_def_id = def_id.and_then(|def_id| tcx.hir().as_local_hir_id(def_id))\n+                .map(|hir_id| tcx.hir().get_parent_did(hir_id));\n+\n+            debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n+\n             // If the trait in segment is the same as the trait defining the item,\n             // use the `<Self as ..>` syntax in the error.\n-            debug!(\"qpath_to_ty: self.item_def_id()={:?}\",  self.item_def_id());\n+            let is_part_of_self_trait_constraints = def_id == Some(trait_def_id);\n+            let is_part_of_fn_in_self_trait = parent_def_id == Some(trait_def_id);\n \n-            let type_name = if self.item_def_id() == Some(trait_def_id) {\n+            let type_name = if is_part_of_self_trait_constraints || is_part_of_fn_in_self_trait {\n                 \"Self\"\n             } else {\n                 \"Type\""}, {"sha": "51b53908f98c315195c98d9e90bfc99f05e62d17", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs?ref=8c909344ed19c9f9a51f82c8e270ded09671fd8b", "patch": "@@ -10,6 +10,9 @@ trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+\n+    fn get(&self) -> Get::Value;\n+    //~^ ERROR ambiguous associated type\n }\n \n trait Bar {}"}, {"sha": "77835c5f6766e6a39ece872a367bfb23ea095e2a", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c909344ed19c9f9a51f82c8e270ded09671fd8b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=8c909344ed19c9f9a51f82c8e270ded09671fd8b", "patch": "@@ -5,13 +5,13 @@ LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n    |                                    ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:17:17\n+  --> $DIR/associated-types-in-ambiguous-context.rs:20:17\n    |\n LL | trait Foo where Foo::Assoc: Bar {\n    |                 ^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Foo>::Assoc`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:22:10\n+  --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n LL | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n@@ -20,8 +20,14 @@ error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:11:23\n    |\n LL |     fn grab(&self) -> Grab::Value;\n-   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Grab>::Value`\n+   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Grab>::Value`\n \n-error: aborting due to 4 previous errors\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:14:22\n+   |\n+LL |     fn get(&self) -> Get::Value;\n+   |                      ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0223`."}]}