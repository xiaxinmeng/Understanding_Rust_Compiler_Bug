{"sha": "e7070dd019d70b089a9983571dc40b2f9ee16cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDcwZGQwMTlkNzBiMDg5YTk5ODM1NzFkYzQwYjJmOWVlMTZjZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T08:25:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T08:25:44Z"}, "message": "Auto merge of #44071 - alexcrichton:no-cycles, r=nikomatsakis\n\nrustc: Start moving toward \"try_get is a bug\" for incremental\n\nThis PR is an effort to burn down some of the work items on #42633. The basic change here was to leave the `try_get` function exposed but have it return a `DiagnosticBuilder` instead of a `CycleError`. This means that it should be a compiler bug to *not* handle the error as dropping a diagnostic should result in a complier panic.\n\nAfter that change it was then necessary to update the compiler's callsites of `try_get` to handle the error coming out. These were handled as:\n\n* The `sized_constraint` and `needs_drop_raw` checks take the diagnostic and defer it as a compiler bug. This was a new piece of functionality added to the error handling infrastructure, and the idea is that for both these checks a \"real\" compiler error should be emitted elsewhere, so it's only a bug if we don't actually emit the complier error elsewhere.\n* MIR inlining was updated to just ignore the diagnostic. This is being tracked by https://github.com/rust-lang/rust/issues/43542 which sounded like it either already had some work underway or was planning to change regardless.\n* The final case, `item_path`, is still sort of up for debate. At the time of this writing this PR simply removes the invocations of `try_get` there, assuming that the query will always succeed. This turns out to be true for the test suite anyway! It sounds like, though, that this logic was intended to assist in \"weird\" situations like `RUST_LOG` where debug implementations can trigger at any time. This PR would therefore, however, break those implementations.\n\nI'm unfortunately sort of out of ideas on how to handle `item_path`, but other thoughts would be welcome!\n\nCloses #42633", "tree": {"sha": "c7bd0ec6c84ed33a48d09047699659ba2425be6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7bd0ec6c84ed33a48d09047699659ba2425be6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7070dd019d70b089a9983571dc40b2f9ee16cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7070dd019d70b089a9983571dc40b2f9ee16cf5", "html_url": "https://github.com/rust-lang/rust/commit/e7070dd019d70b089a9983571dc40b2f9ee16cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7070dd019d70b089a9983571dc40b2f9ee16cf5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398aaffc94367ed59420f5ac0b0238c04c9e4fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/398aaffc94367ed59420f5ac0b0238c04c9e4fa5", "html_url": "https://github.com/rust-lang/rust/commit/398aaffc94367ed59420f5ac0b0238c04c9e4fa5"}, {"sha": "c766aa4e3b90c17ed6ded91e964c3537ba5eb14b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c766aa4e3b90c17ed6ded91e964c3537ba5eb14b", "html_url": "https://github.com/rust-lang/rust/commit/c766aa4e3b90c17ed6ded91e964c3537ba5eb14b"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "5caf5139812802f2abf2429bc88d4cd5e43b0bfe", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -13,7 +13,6 @@ use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::DUMMY_SP;\n \n use std::cell::Cell;\n \n@@ -222,11 +221,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let use_types = !self.is_default_impl(impl_def_id) && (!impl_def_id.is_local() || {\n             // Otherwise, use filename/line-number if forced.\n             let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n-            !force_no_types && {\n-                // Otherwise, use types if we can query them without inducing a cycle.\n-                ty::queries::impl_trait_ref::try_get(self, DUMMY_SP, impl_def_id).is_ok() &&\n-                    ty::queries::type_of::try_get(self, DUMMY_SP, impl_def_id).is_ok()\n-            }\n+            !force_no_types\n         });\n \n         if !use_types {"}, {"sha": "042ec49b0bda166aa46e2e0e3b9c3fcc7821a4f9", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -212,13 +212,15 @@ impl<M: QueryDescription> QueryMap<M> {\n     }\n }\n \n-pub struct CycleError<'a, 'tcx: 'a> {\n+struct CycleError<'a, 'tcx: 'a> {\n     span: Span,\n     cycle: RefMut<'a, [(Span, Query<'tcx>)]>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn report_cycle(self, CycleError { span, cycle }: CycleError) {\n+    fn report_cycle(self, CycleError { span, cycle }: CycleError)\n+        -> DiagnosticBuilder<'a>\n+    {\n         // Subtle: release the refcell lock before invoking `describe()`\n         // below by dropping `cycle`.\n         let stack = cycle.to_vec();\n@@ -247,8 +249,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             err.note(&format!(\"...which then again requires {}, completing the cycle.\",\n                               stack[0].1.describe(self)));\n \n-            err.emit();\n-        });\n+            return err\n+        })\n     }\n \n     fn cycle_check<F, R>(self, span: Span, query: Query<'gcx>, compute: F)\n@@ -704,8 +706,11 @@ macro_rules! define_maps {\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)\n-                           -> Result<$V, CycleError<'a, $tcx>> {\n-                Self::try_get_with(tcx, span, key, Clone::clone)\n+                           -> Result<$V, DiagnosticBuilder<'a>> {\n+                match Self::try_get_with(tcx, span, key, Clone::clone) {\n+                    Ok(e) => Ok(e),\n+                    Err(e) => Err(tcx.report_cycle(e)),\n+                }\n             }\n \n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n@@ -714,7 +719,7 @@ macro_rules! define_maps {\n \n                 match Self::try_get_with(tcx, span, key, |_| ()) {\n                     Ok(()) => {}\n-                    Err(e) => tcx.report_cycle(e)\n+                    Err(e) => tcx.report_cycle(e).emit(),\n                 }\n             }\n         })*\n@@ -751,8 +756,8 @@ macro_rules! define_maps {\n         impl<'a, $tcx, 'lcx> TyCtxtAt<'a, $tcx, 'lcx> {\n             $($(#[$attr])*\n             pub fn $name(self, key: $K) -> $V {\n-                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|e| {\n-                    self.report_cycle(e);\n+                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|mut e| {\n+                    e.emit();\n                     Value::from_cycle_error(self.global_tcx())\n                 })\n             })*"}, {"sha": "852bd48a5eeed871fe5bd30eb7e8b5295d842aa2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -1684,12 +1684,15 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n         match queries::adt_sized_constraint::try_get(tcx, DUMMY_SP, self.did) {\n             Ok(tys) => tys,\n-            Err(_) => {\n+            Err(mut bug) => {\n                 debug!(\"adt_sized_constraint: {:?} is recursive\", self);\n                 // This should be reported as an error by `check_representable`.\n                 //\n                 // Consider the type as Sized in the meanwhile to avoid\n-                // further errors.\n+                // further errors. Delay our `bug` diagnostic here to get\n+                // emitted later as well in case we accidentally otherwise don't\n+                // emit an error.\n+                bug.delay_as_bug();\n                 tcx.intern_type_list(&[tcx.types.err])\n             }\n         }"}, {"sha": "bbbb8611f98a5f104b11b96b2d93954d3826bda3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -1069,11 +1069,15 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let needs_drop = |ty: Ty<'tcx>| -> bool {\n         match ty::queries::needs_drop_raw::try_get(tcx, DUMMY_SP, param_env.and(ty)) {\n             Ok(v) => v,\n-            Err(_) => {\n+            Err(mut bug) => {\n                 // Cycles should be reported as an error by `check_representable`.\n                 //\n-                // Consider the type as not needing drop in the meanwhile to avoid\n-                // further errors.\n+                // Consider the type as not needing drop in the meanwhile to\n+                // avoid further errors.\n+                //\n+                // In case we forgot to emit a bug elsewhere, delay our\n+                // diagnostic to get emitted as a compiler bug.\n+                bug.delay_as_bug();\n                 false\n             }\n         }"}, {"sha": "2c8d8b4691f0a10356be35771859713d382eb267", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -110,6 +110,22 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n+    /// Delay emission of this diagnostic as a bug.\n+    ///\n+    /// This can be useful in contexts where an error indicates a bug but\n+    /// typically this only happens when other compilation errors have already\n+    /// happened. In those cases this can be used to defer emission of this\n+    /// diagnostic as a bug in the compiler only if no other errors have been\n+    /// emitted.\n+    ///\n+    /// In the meantime, though, callsites are required to deal with the \"bug\"\n+    /// locally in whichever way makes the most sense.\n+    pub fn delay_as_bug(&mut self) {\n+        self.level = Level::Bug;\n+        *self.handler.delayed_span_bug.borrow_mut() = Some(self.diagnostic.clone());\n+        self.cancel();\n+    }\n+\n     /// Add a span/label to be included in the resulting snippet.\n     /// This is pushed onto the `MultiSpan` that was created when the\n     /// diagnostic was first built. If you don't call this function at\n@@ -182,8 +198,10 @@ impl<'a> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new_diagnostic(handler, diagnostic)\n     }\n \n-    /// Creates a new `DiagnosticBuilder` with an already constructed diagnostic.\n-    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n+                         -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder { handler, diagnostic }\n     }\n }"}, {"sha": "2f5aac65b923d98f888dca8b6b6e78ccbb057bbf", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -272,7 +272,7 @@ pub struct Handler {\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n     continue_after_error: Cell<bool>,\n-    delayed_span_bug: RefCell<Option<(MultiSpan, String)>>,\n+    delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n }\n \n@@ -439,8 +439,9 @@ impl Handler {\n         if self.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n-        let mut delayed = self.delayed_span_bug.borrow_mut();\n-        *delayed = Some((sp.into(), msg.to_string()));\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        diagnostic.set_span(sp.into());\n+        *self.delayed_span_bug.borrow_mut() = Some(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n@@ -507,14 +508,9 @@ impl Handler {\n         let s;\n         match self.err_count.get() {\n             0 => {\n-                let delayed_bug = self.delayed_span_bug.borrow();\n-                match *delayed_bug {\n-                    Some((ref span, ref errmsg)) => {\n-                        self.span_bug(span.clone(), errmsg);\n-                    }\n-                    _ => {}\n+                if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n+                    DiagnosticBuilder::new_diagnostic(self, bug).emit();\n                 }\n-\n                 return;\n             }\n             1 => s = \"aborting due to previous error\".to_string(),"}, {"sha": "53b46dd2683fc512967781990770c188dec83b24", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7070dd019d70b089a9983571dc40b2f9ee16cf5/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=e7070dd019d70b089a9983571dc40b2f9ee16cf5", "patch": "@@ -115,8 +115,13 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     Ok(ref callee_mir) if self.should_inline(callsite, callee_mir) => {\n                         callee_mir.subst(self.tcx, callsite.substs)\n                     }\n+                    Ok(_) => continue,\n \n-                    _ => continue,\n+                    Err(mut bug) => {\n+                        // FIXME(#43542) shouldn't have to cancel an error\n+                        bug.cancel();\n+                        continue\n+                    }\n                 };\n \n                 let start = caller_mir.basic_blocks().len();"}]}