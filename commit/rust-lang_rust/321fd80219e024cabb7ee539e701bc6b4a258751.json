{"sha": "321fd80219e024cabb7ee539e701bc6b4a258751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMWZkODAyMTllMDI0Y2FiYjdlZTUzOWU3MDFiYzZiNGEyNTg3NTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-10T00:11:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-10T00:40:58Z"}, "message": "Add an infinite loop construct\n\nAdd a loop {} construct for infinite loops, and use it in test\ncases. See #1906 for details.", "tree": {"sha": "a0dc81403ffd175f75c704e1a26765339b63907a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0dc81403ffd175f75c704e1a26765339b63907a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/321fd80219e024cabb7ee539e701bc6b4a258751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/321fd80219e024cabb7ee539e701bc6b4a258751", "html_url": "https://github.com/rust-lang/rust/commit/321fd80219e024cabb7ee539e701bc6b4a258751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/321fd80219e024cabb7ee539e701bc6b4a258751/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ffcb959744194413ca20223274d2c351ad7686c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffcb959744194413ca20223274d2c351ad7686c", "html_url": "https://github.com/rust-lang/rust/commit/4ffcb959744194413ca20223274d2c351ad7686c"}], "stats": {"total": 330, "additions": 208, "deletions": 122}, "files": [{"sha": "776965d350a1175f344a293b7f048d28350e0848", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -138,7 +138,7 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n }\n \n /*\n-Function: loop\n+Function: iterate\n \n Iterate over the range [`lo`..`hi`), or stop when requested\n \n@@ -153,7 +153,7 @@ Returns:\n `true` If execution proceeded correctly, `false` if it was interrupted,\n that is if `it` returned `false` at any point.\n */\n-fn loop(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n+fn iterate(lo: uint, hi: uint, it: fn(uint) -> bool) -> bool {\n     let mut i = lo;\n     while i < hi {\n         if (!it(i)) { ret false; }"}, {"sha": "6797ad9873d0a719d639eebc475f3373a5f7ddc3", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -53,11 +53,11 @@ enum uv_loop {\n #[nolink]\n native mod rustrt {\n     fn rust_uv_loop_new() -> *ctypes::void;\n-    fn rust_uv_loop_delete(loop: *ctypes::void);\n+    fn rust_uv_loop_delete(lp: *ctypes::void);\n     fn rust_uv_loop_set_data(\n-        loop: *ctypes::void,\n+        lp: *ctypes::void,\n         data: *uv_loop_data);\n-    fn rust_uv_bind_op_cb(loop: *ctypes::void, cb: *u8)\n+    fn rust_uv_bind_op_cb(lp: *ctypes::void, cb: *u8)\n         -> *ctypes::void;\n     fn rust_uv_stop_op_cb(handle: *ctypes::void);\n     fn rust_uv_run(loop_handle: *ctypes::void);\n@@ -317,37 +317,37 @@ fn loop_new() -> uv_loop unsafe {\n     ret comm::recv(ret_recv_port);\n }\n \n-fn loop_delete(loop: uv_loop) {\n-    let loop_ptr = get_loop_ptr_from_uv_loop(loop);\n+fn loop_delete(lp: uv_loop) {\n+    let loop_ptr = get_loop_ptr_from_uv_loop(lp);\n     rustrt::rust_uv_loop_delete(loop_ptr);\n }\n \n-fn run(loop: uv_loop) {\n+fn run(lp: uv_loop) {\n     let end_port = comm::port::<bool>();\n     let end_chan = comm::chan::<bool>(end_port);\n-    let loop_chan = get_loop_chan_from_uv_loop(loop);\n+    let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg_run(end_chan));\n     comm::recv(end_port);\n }\n \n-fn run_in_bg(loop: uv_loop) {\n-    let loop_chan = get_loop_chan_from_uv_loop(loop);\n+fn run_in_bg(lp: uv_loop) {\n+    let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg_run_in_bg);\n }\n \n fn async_init (\n-    loop: uv_loop,\n+    lp: uv_loop,\n     async_cb: fn~(uv_handle),\n     after_cb: fn~(uv_handle)) {\n     let msg = msg_async_init(async_cb, after_cb);\n-    let loop_chan = get_loop_chan_from_uv_loop(loop);\n+    let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg);\n }\n \n fn async_send(async: uv_handle) {\n     alt async {\n-      uv_async(id, loop) {\n-        let loop_chan = get_loop_chan_from_uv_loop(loop);\n+      uv_async(id, lp) {\n+        let loop_chan = get_loop_chan_from_uv_loop(lp);\n         comm::send(loop_chan, msg_async_send(id));\n       }\n       _ {\n@@ -362,18 +362,18 @@ fn close(h: uv_handle, cb: fn~()) {\n     comm::send(loop_chan, msg_close(h, cb));\n }\n \n-fn timer_init(loop: uv_loop, after_cb: fn~(uv_handle)) {\n+fn timer_init(lp: uv_loop, after_cb: fn~(uv_handle)) {\n     let msg = msg_timer_init(after_cb);\n-    let loop_chan = get_loop_chan_from_uv_loop(loop);\n+    let loop_chan = get_loop_chan_from_uv_loop(lp);\n     comm::send(loop_chan, msg);\n }\n \n fn timer_start(the_timer: uv_handle, timeout: u32, repeat:u32,\n                timer_cb: fn~(uv_handle)) {\n     alt the_timer {\n-      uv_timer(id, loop) {\n+      uv_timer(id, lp) {\n         let msg = msg_timer_start(id, timeout, repeat, timer_cb);\n-        let loop_chan = get_loop_chan_from_uv_loop(loop);\n+        let loop_chan = get_loop_chan_from_uv_loop(lp);\n         comm::send(loop_chan, msg);\n       }\n       _ {\n@@ -385,8 +385,8 @@ fn timer_start(the_timer: uv_handle, timeout: u32, repeat:u32,\n \n fn timer_stop(the_timer: uv_handle, after_cb: fn~(uv_handle)) {\n     alt the_timer {\n-      uv_timer(id, loop) {\n-        let loop_chan = get_loop_chan_from_uv_loop(loop);\n+      uv_timer(id, lp) {\n+        let loop_chan = get_loop_chan_from_uv_loop(lp);\n         let msg = msg_timer_stop(id, after_cb);\n         comm::send(loop_chan, msg);\n       }\n@@ -423,8 +423,8 @@ fn get_loop_chan_from_data(data: *uv_loop_data)\n fn get_loop_chan_from_handle(handle: uv_handle)\n     -> comm::chan<uv_msg> {\n     alt handle {\n-      uv_async(id,loop) | uv_timer(id,loop) {\n-        let loop_chan = get_loop_chan_from_uv_loop(loop);\n+      uv_async(id,lp) | uv_timer(id,lp) {\n+        let loop_chan = get_loop_chan_from_uv_loop(lp);\n         ret loop_chan;\n       }\n       _ {\n@@ -434,15 +434,15 @@ fn get_loop_chan_from_handle(handle: uv_handle)\n     }\n }\n \n-fn get_loop_ptr_from_uv_loop(loop: uv_loop) -> *ctypes::void {\n-    alt loop {\n+fn get_loop_ptr_from_uv_loop(lp: uv_loop) -> *ctypes::void {\n+    alt lp {\n       uv_loop_new(loop_chan, loop_ptr) {\n         ret loop_ptr;\n       }\n     }\n }\n-fn get_loop_chan_from_uv_loop(loop: uv_loop) -> comm::chan<uv_msg> {\n-    alt loop {\n+fn get_loop_chan_from_uv_loop(lp: uv_loop) -> comm::chan<uv_msg> {\n+    alt lp {\n       uv_loop_new(loop_chan, loop_ptr) {\n         ret loop_chan;\n       }\n@@ -451,7 +451,7 @@ fn get_loop_chan_from_uv_loop(loop: uv_loop) -> comm::chan<uv_msg> {\n \n fn get_id_from_handle(handle: uv_handle) -> [u8] {\n     alt handle {\n-      uv_async(id,loop) | uv_timer(id,loop) {\n+      uv_async(id,lp) | uv_timer(id,lp) {\n         ret id;\n       }\n       _ {\n@@ -462,7 +462,7 @@ fn get_id_from_handle(handle: uv_handle) -> [u8] {\n \n // crust\n crust fn process_operation(\n-        loop: *ctypes::void,\n+        lp: *ctypes::void,\n         data: *uv_loop_data) unsafe {\n     let op_port = (*data).operation_port;\n     let loop_chan = get_loop_chan_from_data(data);\n@@ -472,7 +472,7 @@ crust fn process_operation(\n           op_async_init(id) {\n             let id_ptr = vec::unsafe::to_ptr(id);\n             let async_handle = rustrt::rust_uv_async_init(\n-                loop,\n+                lp,\n                 process_async_send,\n                 id_ptr);\n             comm::send(loop_chan, uv_async_init(\n@@ -485,7 +485,7 @@ crust fn process_operation(\n           op_timer_init(id) {\n             let id_ptr = vec::unsafe::to_ptr(id);\n             let timer_handle = rustrt::rust_uv_timer_init(\n-                loop,\n+                lp,\n                 process_timer_call,\n                 id_ptr);\n             comm::send(loop_chan, uv_timer_init(\n@@ -515,12 +515,12 @@ crust fn process_operation(\n fn handle_op_close(handle: uv_handle, handle_ptr: *ctypes::void) {\n     // it's just like im doing C\n     alt handle {\n-      uv_async(id, loop) {\n+      uv_async(id, lp) {\n         let cb = process_close_async;\n         rustrt::rust_uv_close(\n             handle_ptr, cb);\n       }\n-      uv_timer(id, loop) {\n+      uv_timer(id, lp) {\n         let cb = process_close_timer;\n         rustrt::rust_uv_close(\n             handle_ptr, cb);"}, {"sha": "8aeefe084dcd0594a949f61de660a0d6b586e9ad", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 66, "deletions": 45, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -2419,6 +2419,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                 /*@syntax::ast::local*//*@syntax::ast::expr*/\n                 /*syntax::ast::blk*/\n                 /*syntax::ast::blk*//*@syntax::ast::expr*/\n+                /*syntax::ast::blk*/\n                 /*@syntax::ast::expr*//*[syntax::ast::arm]*/\n                 /*syntax::ast::alt_mode*/\n                 /*syntax::ast::proto*//*syntax::ast::fn_decl*/\n@@ -2683,8 +2684,20 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                                 }\n                                             })\n                       }\n+                      syntax::ast::expr_loop(v0) {\n+                        s.emit_enum_variant(\"syntax::ast::expr_loop\", 13u, 1u,\n+                                            {||\n+                                                {\n+                                                    s.emit_enum_variant_arg(0u,\n+                                                                            {||\n+                                                                                serialize_83(s,\n+                                                                                             v0)\n+                                                                            })\n+                                                }\n+                                            })\n+                      }\n                       syntax::ast::expr_alt(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_alt\", 13u, 3u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_alt\", 14u, 3u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2706,7 +2719,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_fn(v0, v1, v2, v3) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_fn\", 14u, 4u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_fn\", 15u, 4u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2733,7 +2746,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_fn_block(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_fn_block\", 15u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_fn_block\", 16u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -2751,7 +2764,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_block(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_block\", 16u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_block\", 17u,\n                                             1u,\n                                             {||\n                                                 {\n@@ -2764,7 +2777,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_copy(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_copy\", 17u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_copy\", 18u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2776,7 +2789,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_move(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_move\", 18u, 2u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_move\", 19u, 2u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2793,7 +2806,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_assign(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_assign\", 19u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_assign\", 20u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -2811,7 +2824,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_swap(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_swap\", 20u, 2u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_swap\", 21u, 2u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2829,7 +2842,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                       }\n                       syntax::ast::expr_assign_op(v0, v1, v2) {\n                         s.emit_enum_variant(\"syntax::ast::expr_assign_op\",\n-                                            21u, 3u,\n+                                            22u, 3u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2851,7 +2864,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_field(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_field\", 22u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_field\", 23u,\n                                             3u,\n                                             {||\n                                                 {\n@@ -2874,7 +2887,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_index(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_index\", 23u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_index\", 24u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -2892,7 +2905,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_path(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_path\", 24u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_path\", 25u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2904,7 +2917,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_addr_of(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_addr_of\", 25u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_addr_of\", 26u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -2922,7 +2935,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_fail(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_fail\", 26u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_fail\", 27u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2934,15 +2947,15 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_break {\n-                        s.emit_enum_variant(\"syntax::ast::expr_break\", 27u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_break\", 28u,\n                                             0u, {|| })\n                       }\n                       syntax::ast::expr_cont {\n-                        s.emit_enum_variant(\"syntax::ast::expr_cont\", 28u, 0u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_cont\", 29u, 0u,\n                                             {|| })\n                       }\n                       syntax::ast::expr_ret(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_ret\", 29u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_ret\", 30u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2954,7 +2967,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_be(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_be\", 30u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_be\", 31u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2966,7 +2979,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_log(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_log\", 31u, 3u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_log\", 32u, 3u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -2988,7 +3001,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_assert(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_assert\", 32u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_assert\", 33u,\n                                             1u,\n                                             {||\n                                                 {\n@@ -3001,7 +3014,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_check(v0, v1) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_check\", 33u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_check\", 34u,\n                                             2u,\n                                             {||\n                                                 {\n@@ -3019,7 +3032,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_if_check(v0, v1, v2) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_if_check\", 34u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_if_check\", 35u,\n                                             3u,\n                                             {||\n                                                 {\n@@ -3042,7 +3055,7 @@ fn serialize_74<S: std::serialization::serializer>(s: S,\n                                             })\n                       }\n                       syntax::ast::expr_mac(v0) {\n-                        s.emit_enum_variant(\"syntax::ast::expr_mac\", 35u, 1u,\n+                        s.emit_enum_variant(\"syntax::ast::expr_mac\", 36u, 1u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -6596,6 +6609,8 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n \n                 /*syntax::ast::blk*//*@syntax::ast::expr*/\n \n+                /*syntax::ast::blk*/\n+\n                 /*@syntax::ast::expr*//*[syntax::ast::arm]*/\n                 /*syntax::ast::alt_mode*/\n \n@@ -6788,6 +6803,12 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                    }))\n                                               }\n                                               13u {\n+                                                syntax::ast::expr_loop(s.read_enum_variant_arg(0u,\n+                                                                                               {||\n+                                                                                                   deserialize_83(s)\n+                                                                                               }))\n+                                              }\n+                                              14u {\n                                                 syntax::ast::expr_alt(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_72(s)\n@@ -6801,7 +6822,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                   deserialize_123(s)\n                                                                                               }))\n                                               }\n-                                              14u {\n+                                              15u {\n                                                 syntax::ast::expr_fn(s.read_enum_variant_arg(0u,\n                                                                                              {||\n                                                                                                  deserialize_39(s)\n@@ -6819,7 +6840,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                  deserialize_124(s)\n                                                                                              }))\n                                               }\n-                                              15u {\n+                                              16u {\n                                                 syntax::ast::expr_fn_block(s.read_enum_variant_arg(0u,\n                                                                                                    {||\n                                                                                                        deserialize_40(s)\n@@ -6829,19 +6850,19 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                        deserialize_83(s)\n                                                                                                    }))\n                                               }\n-                                              16u {\n+                                              17u {\n                                                 syntax::ast::expr_block(s.read_enum_variant_arg(0u,\n                                                                                                 {||\n                                                                                                     deserialize_83(s)\n                                                                                                 }))\n                                               }\n-                                              17u {\n+                                              18u {\n                                                 syntax::ast::expr_copy(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_72(s)\n                                                                                                }))\n                                               }\n-                                              18u {\n+                                              19u {\n                                                 syntax::ast::expr_move(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_72(s)\n@@ -6851,7 +6872,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                    deserialize_72(s)\n                                                                                                }))\n                                               }\n-                                              19u {\n+                                              20u {\n                                                 syntax::ast::expr_assign(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n                                                                                                      deserialize_72(s)\n@@ -6861,7 +6882,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                      deserialize_72(s)\n                                                                                                  }))\n                                               }\n-                                              20u {\n+                                              21u {\n                                                 syntax::ast::expr_swap(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_72(s)\n@@ -6871,7 +6892,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                    deserialize_72(s)\n                                                                                                }))\n                                               }\n-                                              21u {\n+                                              22u {\n                                                 syntax::ast::expr_assign_op(s.read_enum_variant_arg(0u,\n                                                                                                     {||\n                                                                                                         deserialize_81(s)\n@@ -6885,7 +6906,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                         deserialize_72(s)\n                                                                                                     }))\n                                               }\n-                                              22u {\n+                                              23u {\n                                                 syntax::ast::expr_field(s.read_enum_variant_arg(0u,\n                                                                                                 {||\n                                                                                                     deserialize_72(s)\n@@ -6899,7 +6920,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                     deserialize_55(s)\n                                                                                                 }))\n                                               }\n-                                              23u {\n+                                              24u {\n                                                 syntax::ast::expr_index(s.read_enum_variant_arg(0u,\n                                                                                                 {||\n                                                                                                     deserialize_72(s)\n@@ -6909,13 +6930,13 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                     deserialize_72(s)\n                                                                                                 }))\n                                               }\n-                                              24u {\n+                                              25u {\n                                                 syntax::ast::expr_path(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_51(s)\n                                                                                                }))\n                                               }\n-                                              25u {\n+                                              26u {\n                                                 syntax::ast::expr_addr_of(s.read_enum_variant_arg(0u,\n                                                                                                   {||\n                                                                                                       deserialize_33(s)\n@@ -6925,27 +6946,27 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                       deserialize_72(s)\n                                                                                                   }))\n                                               }\n-                                              26u {\n+                                              27u {\n                                                 syntax::ast::expr_fail(s.read_enum_variant_arg(0u,\n                                                                                                {||\n                                                                                                    deserialize_79(s)\n                                                                                                }))\n                                               }\n-                                              27u { syntax::ast::expr_break }\n-                                              28u { syntax::ast::expr_cont }\n-                                              29u {\n+                                              28u { syntax::ast::expr_break }\n+                                              29u { syntax::ast::expr_cont }\n+                                              30u {\n                                                 syntax::ast::expr_ret(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_79(s)\n                                                                                               }))\n                                               }\n-                                              30u {\n+                                              31u {\n                                                 syntax::ast::expr_be(s.read_enum_variant_arg(0u,\n                                                                                              {||\n                                                                                                  deserialize_72(s)\n                                                                                              }))\n                                               }\n-                                              31u {\n+                                              32u {\n                                                 syntax::ast::expr_log(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_129(s)\n@@ -6959,13 +6980,13 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                   deserialize_72(s)\n                                                                                               }))\n                                               }\n-                                              32u {\n+                                              33u {\n                                                 syntax::ast::expr_assert(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n                                                                                                      deserialize_72(s)\n                                                                                                  }))\n                                               }\n-                                              33u {\n+                                              34u {\n                                                 syntax::ast::expr_check(s.read_enum_variant_arg(0u,\n                                                                                                 {||\n                                                                                                     deserialize_130(s)\n@@ -6975,7 +6996,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                     deserialize_72(s)\n                                                                                                 }))\n                                               }\n-                                              34u {\n+                                              35u {\n                                                 syntax::ast::expr_if_check(s.read_enum_variant_arg(0u,\n                                                                                                    {||\n                                                                                                        deserialize_72(s)\n@@ -6989,7 +7010,7 @@ fn deserialize_74<S: std::serialization::deserializer>(s: S) ->\n                                                                                                        deserialize_79(s)\n                                                                                                    }))\n                                               }\n-                                              35u {\n+                                              36u {\n                                                 syntax::ast::expr_mac(s.read_enum_variant_arg(0u,\n                                                                                               {||\n                                                                                                   deserialize_69(s)"}, {"sha": "fab8cd146d47f2a0902c036fc061dd5986de8121", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -33,7 +33,7 @@ enum is_last_use {\n type last_uses = std::map::hashmap<node_id, is_last_use>;\n \n enum seen { unset, seen(node_id), }\n-enum block_type { func, loop, }\n+enum block_type { func, lp, }\n \n enum use { var_use(node_id), close_over(node_id), }\n type set = [{def: node_id, uses: list<use>}];\n@@ -97,13 +97,13 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         visit::visit_expr_opt(oexpr, cx, v);\n         leave_fn(cx);\n       }\n-      expr_break { add_block_exit(cx, loop); }\n-      expr_while(_, _) | expr_do_while(_, _) {\n-        visit_block(loop, cx) {|| visit::visit_expr(ex, cx, v);}\n+      expr_break { add_block_exit(cx, lp); }\n+      expr_while(_, _) | expr_do_while(_, _) | expr_loop(_) {\n+        visit_block(lp, cx) {|| visit::visit_expr(ex, cx, v);}\n       }\n       expr_for(_, coll, blk) {\n         v.visit_expr(coll, cx, v);\n-        visit_block(loop, cx) {|| visit::visit_block(blk, cx, v);}\n+        visit_block(lp, cx) {|| visit::visit_block(blk, cx, v);}\n       }\n       expr_alt(input, arms, _) {\n         v.visit_expr(input, cx, v);"}, {"sha": "0a8c0350b40aea4b31c0b38b82cafe75c80c76a9", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -2029,6 +2029,17 @@ fn trans_do_while(cx: block, body: ast::blk, cond: @ast::expr) ->\n     ret next_cx;\n }\n \n+fn trans_loop(cx:block, body: ast::blk) -> block {\n+    let next_cx = sub_block(cx, \"next\");\n+    let body_cx =\n+        loop_scope_block(cx, cont_self, next_cx,\n+                                  \"infinite loop body\", body.span);\n+    let body_end = trans_block(body_cx, body, ignore);\n+    cleanup_and_Br(body_end, body_cx, body_cx.llbb);\n+    Br(cx, body_cx.llbb);\n+    ret next_cx;\n+}\n+\n type generic_info = {item_type: ty::t,\n                      static_tis: [option<@tydesc_info>],\n                      tydescs: [ValueRef],\n@@ -3255,6 +3266,10 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert dest == ignore;\n         ret trans_while(bcx, cond, body);\n       }\n+      ast::expr_loop(body) {\n+        assert dest == ignore;\n+        ret trans_loop(bcx, body);\n+      }\n       ast::expr_do_while(body, cond) {\n         assert dest == ignore;\n         ret trans_do_while(bcx, body, cond);\n@@ -3293,7 +3308,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         assert dest == ignore;\n         ret trans_assign_op(bcx, e, op, dst, src);\n       }\n-      _ { bcx.tcx().sess.span_bug(e.span, \"trans_expr reached\\\n+      _ { bcx.tcx().sess.span_bug(e.span, \"trans_expr reached \\\n              fall-through case\"); }\n \n     }"}, {"sha": "5b6d5cc2911e2ed2182067ec4672954ab62b2fbe", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -446,6 +446,19 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                                        expr_pp(fcx.ccx, test)]),\n                          loop_postcond);\n       }\n+      expr_loop(body) {\n+        find_pre_post_block(fcx, body);\n+        /* Infinite loop: if control passes it, everything is true. */\n+        let loop_postcond = false_postcond(num_local_vars);\n+        /* Conservative approximation: if the body has any nonlocal exits,\n+         the poststate is blank since we don't know what parts of it\n+          execute. */\n+        if has_nonlocal_exits(body) {\n+            loop_postcond = empty_poststate(num_local_vars);\n+        }\n+        set_pre_and_post(fcx.ccx, e.id, block_precond(fcx.ccx, body),\n+                         loop_postcond);\n+      }\n       expr_for(d, index, body) {\n         find_pre_post_loop(fcx, d, index, body, e.id);\n       }"}, {"sha": "d85f9731ece4c70a1c896fd49ebbe2975f0d9b1b", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -354,7 +354,6 @@ fn find_pre_post_state_cap_clause(fcx: fn_ctxt, e_id: node_id,\n fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n     let num_constrs = num_constraints(fcx.enclosing);\n \n-\n     alt e.node {\n       expr_vec(elts, _) {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n@@ -489,8 +488,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         */\n         let loop_pres =\n             intersect_states(block_poststate(fcx.ccx, body), pres);\n-        // aux::log_tritv_err(fcx, loop_pres);\n-        // #error(\"---------------\");\n \n         let changed =\n             set_prestate_ann(fcx.ccx, e.id, loop_pres) |\n@@ -545,6 +542,21 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret changed;\n       }\n+      expr_loop(body) {\n+        let loop_pres =\n+            intersect_states(block_poststate(fcx.ccx, body), pres);\n+        let changed = set_prestate_ann(fcx.ccx, e.id, loop_pres)\n+              | find_pre_post_state_block(fcx, loop_pres, body);\n+        /* conservative approximation: if a loop contains a break\n+           or cont, we assume nothing about the poststate */\n+        /* which is still unsound -- see [Break-unsound] */\n+        if has_nonlocal_exits(body) {\n+            ret changed | set_poststate_ann(fcx.ccx, e.id, pres);\n+        } else {\n+            ret changed | set_poststate_ann(fcx.ccx, e.id,\n+                             block_poststate(fcx.ccx, body));\n+        }\n+      }\n       expr_for(d, index, body) {\n         ret find_pre_post_state_loop(fcx, pres, d, index, body, e.id);\n       }"}, {"sha": "4bdc6592dd4fe562b3b4f83db96309dfb9e1b9f2", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -2323,6 +2323,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n               check_block_no_value(fcx, body);\n         write_ty(tcx, id, block_ty(tcx, body));\n       }\n+      ast::expr_loop(body) {\n+          check_block_no_value(fcx, body);\n+          write_ty(tcx, id, ty::mk_nil(tcx));\n+      }\n       ast::expr_alt(expr, arms, _) {\n         bot = check_expr(fcx, expr);\n \n@@ -2613,7 +2617,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           }\n         }\n       }\n-      _ { tcx.sess.unimpl(\"expr type in typeck::check_expr\"); }\n     }\n     if bot { write_ty(tcx, expr.id, ty::mk_bot(tcx)); }\n "}, {"sha": "fdd40e6e199d70de4ad89bbb1891120dfd5d6b76", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -229,6 +229,10 @@ enum expr_ {\n     expr_while(@expr, blk),\n     expr_for(@local, @expr, blk),\n     expr_do_while(blk, @expr),\n+    /* Conditionless loop (can be exited with break, cont, ret, or fail)\n+       Same semantics as while(true) { body }, but typestate knows that the\n+       (implicit) condition is always true. */\n+    expr_loop(blk),\n     expr_alt(@expr, [arm], alt_mode),\n     expr_fn(proto, fn_decl, blk, @capture_clause),\n     expr_fn_block(fn_decl, blk),"}, {"sha": "dbdd8cd9b366bed374e5ec744367573231a00f77", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -380,7 +380,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n     let fold_mac = bind fold_mac_(_, fld);\n \n     ret alt e {\n-            expr_vec(exprs, mutt) {\n+          expr_vec(exprs, mutt) {\n             expr_vec(fld.map_exprs(fld.fold_expr, exprs), mutt)\n           }\n           expr_rec(fields, maybe_expr) {\n@@ -417,6 +417,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_do_while(blk, expr) {\n             expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n           }\n+          expr_loop(body) {\n+              expr_loop(fld.fold_block(body))\n+          }\n           expr_alt(expr, arms, mode) {\n             expr_alt(fld.fold_expr(expr), vec::map(arms, fld.fold_arm), mode)\n           }"}, {"sha": "53f75d8f7c3e40d7e71ca76cb71554d9d9a4e81b", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -146,11 +146,11 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n fn bad_expr_word_table() -> hashmap<str, ()> {\n     let words = new_str_hash();\n     for word in [\"alt\", \"assert\", \"be\", \"break\", \"check\", \"claim\",\n-                 \"class\", \"const\", \"cont\", \"copy\", \"do\", \"else\", \"enum\",\n-                 \"export\", \"fail\", \"fn\", \"for\", \"if\",  \"iface\", \"impl\",\n-                 \"import\", \"let\", \"log\", \"mod\", \"mutable\", \"native\", \"pure\",\n-                 \"resource\", \"ret\", \"trait\", \"type\", \"unchecked\", \"unsafe\",\n-                 \"while\", \"crust\", \"mut\"] {\n+                 \"class\", \"const\", \"cont\", \"copy\", \"crust\", \"do\", \"else\",\n+                 \"enum\", \"export\", \"fail\", \"fn\", \"for\", \"if\",  \"iface\",\n+                 \"impl\", \"import\", \"let\", \"log\", \"loop\", \"mod\", \"mut\",\n+                 \"mutable\", \"native\", \"pure\", \"resource\", \"ret\", \"trait\",\n+                 \"type\", \"unchecked\", \"unsafe\", \"while\"] {\n         words.insert(word, ());\n     }\n     words\n@@ -839,6 +839,8 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(parse_while_expr(p));\n     } else if eat_word(p, \"do\") {\n         ret pexpr(parse_do_while_expr(p));\n+    } else if eat_word(p, \"loop\") {\n+        ret pexpr(parse_loop_expr(p));\n     } else if eat_word(p, \"alt\") {\n         ret pexpr(parse_alt_expr(p));\n     } else if eat_word(p, \"fn\") {\n@@ -1399,6 +1401,13 @@ fn parse_do_while_expr(p: parser) -> @ast::expr {\n     ret mk_expr(p, lo, hi, ast::expr_do_while(body, cond));\n }\n \n+fn parse_loop_expr(p: parser) -> @ast::expr {\n+    let lo = p.last_span.lo;\n+    let body = parse_block_no_value(p);\n+    let hi = body.span.hi;\n+    ret mk_expr(p, lo, hi, ast::expr_loop(body));\n+}\n+\n fn parse_alt_expr(p: parser) -> @ast::expr {\n     let lo = p.last_span.lo;\n     let mode = if eat_word(p, \"check\") { ast::alt_check }\n@@ -1691,7 +1700,7 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n       ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n       | ast::expr_alt(_, _, _) | ast::expr_block(_)\n       | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n-      | ast::expr_for(_, _, _)\n+      | ast::expr_loop(_) | ast::expr_for(_, _, _)\n       | ast::expr_call(_, _, true) {\n         false\n       }"}, {"sha": "ba9c76c748f08474620e8cf85094d08f53f93639", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -913,6 +913,11 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n+      ast::expr_loop(blk) {\n+        head(s, \"loop\");\n+        space(s.s);\n+        print_block(s, blk);\n+      }\n       ast::expr_for(decl, expr, blk) {\n         head(s, \"for\");\n         print_for_decl(s, decl, expr);"}, {"sha": "d9060ea2cfd51666d339c846b89b37b4aa9eb207", "filename": "src/rustc/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustc%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fvisit.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -343,6 +343,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         visit_expr_opt(eo, e, v);\n       }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n+      expr_loop(b)     { v.visit_block(b, e, v); }\n       expr_for(dcl, x, b) {\n         v.visit_local(dcl, e, v);\n         v.visit_expr(x, e, v);"}, {"sha": "7f84c8393b5f7b53fceaeee5f8d2bca5b2088c03", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -289,7 +289,7 @@ fn future_writer() -> (writer, future::future<str>) {\n     };\n     let future = future::from_fn {||\n         let res = \"\";\n-        while true {\n+        loop {\n             alt comm::recv(port) {\n               write(s) { res += s }\n               done { break }"}, {"sha": "d86eecc9699d844d3dd79cd3daad73546042e10f", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -43,7 +43,7 @@ type page_chan = comm::chan<option<doc::page>>;\n \n fn make_doc_from_pages(page_port: page_port) -> doc::doc {\n     let mut pages = [];\n-    while true {\n+    loop {\n         let val = comm::recv(page_port);\n         if option::is_some(val) {\n             pages += [option::unwrap(val)];"}, {"sha": "29b821a75d79f4137a1b86b0d900700730a41b9b", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -60,7 +60,7 @@ fn parse_opts(argv: [str]) -> config {\n \n fn stress_task(&&id: int) {\n     let i = 0;\n-    while true {\n+    loop {\n         let n = 15;\n         assert (fib(n) == fib(n));\n         i += 1;"}, {"sha": "938e0013dd5e5135b9ffeb75f2943b49b82ee12f", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -34,7 +34,7 @@ import comm::send;\n fn map(&&filename: [u8], emit: map_reduce::putter<[u8], int>) {\n     let f = io::file_reader(str::from_bytes(filename));\n \n-    while true {\n+    loop {\n         alt read_word(f) {\n           some(w) { emit(str::bytes(w), 1); }\n           none { break; }\n@@ -45,7 +45,7 @@ fn map(&&filename: [u8], emit: map_reduce::putter<[u8], int>) {\n fn reduce(&&_word: [u8], get: map_reduce::getter<int>) {\n     let count = 0;\n \n-    while true { alt get() { some(_) { count += 1; } none { break; } } }\n+    loop { alt get() { some(_) { count += 1; } none { break; } } }\n }\n \n mod map_reduce {"}, {"sha": "cce242d195e76acbde7ff310fd972f5f739b737a", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -25,15 +25,15 @@ fn map(input: str, emit: map_reduce::putter) {\n     let f = io::str_reader(input);\n \n \n-    while true {\n+    loop {\n         alt read_word(f) { some(w) { emit(w, 1); } none { break; } }\n     }\n }\n \n fn reduce(_word: str, get: map_reduce::getter) {\n     let count = 0;\n \n-    while true { alt get() { some(_) { count += 1; } none { break; } } }\n+    loop { alt get() { some(_) { count += 1; } none { break; } } }\n }\n \n mod map_reduce {"}, {"sha": "da0069212671b691a7957c4f1b012ab45e2015b0", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:mismatched types: expected `()` but found `bool`\n \n fn main() {\n-    while true {\n+    loop {\n         true\n     }\n }\n\\ No newline at end of file"}, {"sha": "231fb299898e635862a2a6ce711514dd7c05335f", "filename": "src/test/compile-fail/while-bypass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-bypass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-bypass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-bypass.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: precondition constraint\n \n-fn f() -> int { let x: int; while true { x = 10; } ret x; }\n+fn f() -> int { let x: int; while 1 == 1 { x = 10; } ret x; }\n \n fn main() { f(); }"}, {"sha": "38c1d471593ee32934a7a5dbb504333e4d0f7ced", "filename": "src/test/compile-fail/while-loop-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -3,11 +3,11 @@ fn main() {\n \n     let y: int = 42;\n     let x: int;\n-    while true {\n+    loop {\n         log(debug, y);\n-        while true {\n-            while true {\n-                while true { x <- y; }\n+        loop {\n+            loop {\n+                loop { x <- y; }\n             }\n         }\n     }"}, {"sha": "abc73c86b60812ae96f944d44ee9193255f9c283", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -9,8 +9,8 @@ fn main() {\n     let y: int = 42;\n     let x: int = 1;\n     check (even(y));\n-    while true {\n+    loop {\n         print_even(y);\n-        while true { while true { while true { y += x; } } }\n+        loop { loop { loop { y += x; } } }\n     }\n }"}, {"sha": "21fb2f174bd5934aa2544e807336eab121212b50", "filename": "src/test/run-pass/acyclic-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -15,7 +15,7 @@ fn f(c: comm::_chan<int>) {\n     comm::send(c, 1);\n \n \n-    while true {\n+    loop {\n         // spin waiting for the parent to kill us.\n         #debug(\"child waiting to die...\");\n "}, {"sha": "3aaadb759f70fcc3794c919e8c2d0a621813d707", "filename": "src/test/run-pass/break-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak-value.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -1,3 +1,3 @@\n fn int_id(x: int) -> int { ret x; }\n \n-fn main() { while true { int_id(break); } }\n+fn main() { loop { int_id(break); } }"}, {"sha": "82b751b3b0b3966dab12bf36b3ecb39b32fe9948", "filename": "src/test/run-pass/infinite-loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfinite-loops.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -14,7 +14,7 @@ fn loop(n: int) {\n     if n > 0 { t1 = spawn loop(n - 1); t2 = spawn loop(n - 1); }\n \n \n-    while true { }\n+    loop { }\n }\n \n fn main() { let t: task = spawn loop(5); join(t); }\n\\ No newline at end of file"}, {"sha": "1bb4f69fb022bb447353923dc605c8e4404a479f", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -18,7 +18,7 @@ fn producer(c: chan<[u8]>) {\n fn packager(cb: chan<chan<[u8]>>, msg: chan<msg>) {\n     let p: port<[u8]> = port();\n     send(cb, chan(p));\n-    while true {\n+    loop {\n         #debug(\"waiting for bytes\");\n         let data = recv(p);\n         #debug(\"got bytes\");\n@@ -46,7 +46,7 @@ fn main() {\n     let source_chan: chan<[u8]> = recv(recv_reader);\n     let prod = task::spawn {|| producer(source_chan); };\n \n-    while true {\n+    loop {\n         let msg = recv(p);\n         alt msg {\n           closed { #debug(\"Got close message\"); break; }"}, {"sha": "dea4e2031a5b9e58054ef19e27c15cdb1c5f0341", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -17,7 +17,7 @@ fn main() {\n \n     // Check that no false positives are found in loops.\n     let q = ~40, p = 10;\n-    while true {\n+    loop {\n         let i = q;\n         p += *i;\n         if p > 100 { break; }"}, {"sha": "6915c35b2f68435fde4d438b2277c219ba676c25", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -1,6 +1,6 @@\n // Issue #1818\n \n-fn loop<T>(s: str, f: fn(str) -> T) -> T {\n+fn lp<T>(s: str, f: fn(str) -> T) -> T {\n     while false {\n         let r = f(s);\n         ret r;"}, {"sha": "3b53864497617b5addee3b02de7a81f0694db846", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -6,7 +6,7 @@ fn starve_main(alive: chan<int>) {\n     alive <| 1;\n     #debug(\"starving main\");\n     let i: int = 0;\n-    while true { i += 1; }\n+    loop { i += 1; }\n }\n \n fn main() {"}, {"sha": "4aa058700b6cd6227e0fbfcbd17dcc9991649036", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -12,7 +12,7 @@ fn iloop() {\n     task::spawn {|| die(); };\n     let p = comm::port::<()>();\n     let c = comm::chan(p);\n-    while true {\n+    loop {\n         // Sending and receiving here because these actions yield,\n         // at which point our child can kill us\n         comm::send(c, ());"}, {"sha": "11e5ca3f645c587ebf9d4c2871c7d833bdf199f7", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -4,7 +4,7 @@\n \n use std;\n \n-fn test_break() { while true { let x: @int = break; } }\n+fn test_break() { loop { let x: @int = break; } }\n \n fn test_cont() { let i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n "}, {"sha": "d229448ce02edc66e7ef78801172624ac7da525a", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -23,7 +23,7 @@ fn log_fail() { log(error, fail); }\n \n fn log_ret() { log(error, ret); }\n \n-fn log_break() { while true { log(error, break); } }\n+fn log_break() { loop { log(error, break); } }\n \n fn log_cont() { do { log(error, cont); } while false }\n "}, {"sha": "af942417ae8790a78d1639762b0ae3a9389ac55a", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321fd80219e024cabb7ee539e701bc6b4a258751/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=321fd80219e024cabb7ee539e701bc6b4a258751", "patch": "@@ -55,7 +55,7 @@ fn canttouchthis() -> uint {\n }\n \n fn angrydome() {\n-    while true { if break { } }\n+    loop { if break { } }\n     let i = 0;\n     do  { i += 1; if i == 1 { alt cont { _ { } } } } while false\n }"}]}