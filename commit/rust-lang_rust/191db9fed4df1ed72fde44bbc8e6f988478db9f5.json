{"sha": "191db9fed4df1ed72fde44bbc8e6f988478db9f5", "node_id": "C_kwDOAAsO6NoAKDE5MWRiOWZlZDRkZjFlZDcyZmRlNDRiYmM4ZTZmOTg4NDc4ZGI5ZjU", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T16:43:59Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T17:18:39Z"}, "message": "stub missing APIs", "tree": {"sha": "42c8d335794adde050d614da97f90f15716ab6a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c8d335794adde050d614da97f90f15716ab6a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191db9fed4df1ed72fde44bbc8e6f988478db9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191db9fed4df1ed72fde44bbc8e6f988478db9f5", "html_url": "https://github.com/rust-lang/rust/commit/191db9fed4df1ed72fde44bbc8e6f988478db9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191db9fed4df1ed72fde44bbc8e6f988478db9f5/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00bc060ba311f5177f5f34424279e7f3000bde54", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bc060ba311f5177f5f34424279e7f3000bde54", "html_url": "https://github.com/rust-lang/rust/commit/00bc060ba311f5177f5f34424279e7f3000bde54"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "267668783041a2e1c70e8e424568b48dcbddb930", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=191db9fed4df1ed72fde44bbc8e6f988478db9f5", "patch": "@@ -14,12 +14,13 @@ use super::proc_macro::{\n };\n \n mod token_stream;\n-pub use token_stream::*;\n+pub use token_stream::TokenStream;\n+use token_stream::TokenStreamBuilder;\n \n mod symbol;\n pub use symbol::*;\n \n-use std::iter::FromIterator;\n+use std::{iter::FromIterator, ops::Bound};\n \n type Group = tt::Subtree;\n type TokenTree = tt::TokenTree;\n@@ -76,6 +77,13 @@ impl server::FreeFunctions for RustAnalyzer {\n         // https://github.com/rust-lang/rust/pull/71858\n     }\n     fn track_path(&mut self, _path: &str) {}\n+\n+    fn literal_from_str(\n+        &mut self,\n+        _s: &str,\n+    ) -> Result<bridge::Literal<Self::Span, Self::Symbol>, ()> {\n+        todo!()\n+    }\n }\n \n impl server::TokenStream for RustAnalyzer {\n@@ -92,7 +100,7 @@ impl server::TokenStream for RustAnalyzer {\n     }\n     fn from_token_tree(\n         &mut self,\n-        tree: bridge::TokenTree<Self::TokenStream, Self::Span, Self::Ident, Self::Literal>,\n+        tree: bridge::TokenTree<Self::TokenStream, Self::Span, Self::Symbol>,\n     ) -> Self::TokenStream {\n         match tree {\n             bridge::TokenTree::Group(group) => {\n@@ -107,19 +115,20 @@ impl server::TokenStream for RustAnalyzer {\n                 Self::TokenStream::from_iter(vec![tree])\n             }\n \n-            bridge::TokenTree::Ident(symbol) => {\n-                todo!(\"implement\");\n+            bridge::TokenTree::Ident(_symbol) => {\n+                todo!(\"convert Ident bridge=>TokenStream\");\n                 // let IdentData(ident) = self.ident_interner.get(index).clone();\n                 // let ident: tt::Ident = ident;\n                 // let leaf = tt::Leaf::from(ident);\n                 // let tree = TokenTree::from(leaf);\n                 // Self::TokenStream::from_iter(vec![tree])\n             }\n \n-            bridge::TokenTree::Literal(literal) => {\n-                let leaf = tt::Leaf::from(literal);\n-                let tree = TokenTree::from(leaf);\n-                Self::TokenStream::from_iter(vec![tree])\n+            bridge::TokenTree::Literal(_literal) => {\n+                todo!(\"convert Literal bridge=>TokenStream\");\n+                // let leaf = tt::Leaf::from(literal);\n+                // let tree = TokenTree::from(leaf);\n+                // Self::TokenStream::from_iter(vec![tree])\n             }\n \n             bridge::TokenTree::Punct(p) => {\n@@ -142,7 +151,7 @@ impl server::TokenStream for RustAnalyzer {\n     fn concat_trees(\n         &mut self,\n         base: Option<Self::TokenStream>,\n-        trees: Vec<bridge::TokenTree<Self::TokenStream, Self::Span, Self::Ident, Self::Literal>>,\n+        trees: Vec<bridge::TokenTree<Self::TokenStream, Self::Span, Self::Symbol>>,\n     ) -> Self::TokenStream {\n         let mut builder = TokenStreamBuilder::new();\n         if let Some(base) = base {\n@@ -172,15 +181,18 @@ impl server::TokenStream for RustAnalyzer {\n     fn into_trees(\n         &mut self,\n         stream: Self::TokenStream,\n-    ) -> Vec<bridge::TokenTree<Self::TokenStream, Self::Span, Self::Ident, Self::Literal>> {\n+    ) -> Vec<bridge::TokenTree<Self::TokenStream, Self::Span, Self::Symbol>> {\n         stream\n             .into_iter()\n             .map(|tree| match tree {\n-                tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n-                    todo!(\"implement\");\n+                tt::TokenTree::Leaf(tt::Leaf::Ident(_ident)) => {\n+                    todo!(\"convert Ident tt=>bridge\");\n                     // bridge::TokenTree::Ident(Symbol(self.ident_interner.intern(&IdentData(ident))))\n                 }\n-                tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => bridge::TokenTree::Literal(lit),\n+                tt::TokenTree::Leaf(tt::Leaf::Literal(_lit)) => {\n+                    todo!(\"convert Literal tt=>bridge\");\n+                    // bridge::TokenTree::Literal(lit)\n+                }\n                 tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => {\n                     bridge::TokenTree::Punct(bridge::Punct {\n                         ch: punct.char as u8,\n@@ -317,6 +329,15 @@ impl server::Span for RustAnalyzer {\n         // Just return the first span again, because some macros will unwrap the result.\n         Some(first)\n     }\n+    fn subspan(\n+        &mut self,\n+        span: Self::Span,\n+        _start: Bound<usize>,\n+        _end: Bound<usize>,\n+    ) -> Option<Self::Span> {\n+        // Just return the span again, because some macros will unwrap the result.\n+        Some(span)\n+    }\n     fn resolved_at(&mut self, _span: Self::Span, _at: Self::Span) -> Self::Span {\n         // FIXME handle span\n         tt::TokenId::unspecified()\n@@ -343,6 +364,12 @@ impl server::MultiSpan for RustAnalyzer {\n     }\n }\n \n+impl server::Symbol for RustAnalyzer {\n+    fn normalize_and_validate_ident(&mut self, _string: &str) -> Result<Self::Symbol, ()> {\n+        todo!()\n+    }\n+}\n+\n impl server::Server for RustAnalyzer {\n     fn globals(&mut self) -> bridge::ExpnGlobals<Self::Span> {\n         bridge::ExpnGlobals {\n@@ -351,6 +378,14 @@ impl server::Server for RustAnalyzer {\n             mixed_site: Span::unspecified(),\n         }\n     }\n+\n+    fn intern_symbol(_ident: &str) -> Self::Symbol {\n+        todo!(\"intern_symbol\")\n+    }\n+\n+    fn with_symbol_string(_symbol: &Self::Symbol, _f: impl FnOnce(&str)) {\n+        todo!(\"with_symbol_string\")\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "b045f762b880e86dc8f3b3a91d37d1e2406d8265", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server/symbol.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs?ref=191db9fed4df1ed72fde44bbc8e6f988478db9f5", "patch": "@@ -14,13 +14,14 @@ struct IdentInterner {\n impl IdentInterner {\n     fn intern(&mut self, data: &str) -> Symbol {\n         if let Some(index) = self.idents.get(data) {\n-            return *index;\n+            return Symbol(*index);\n         }\n \n         let index = self.idents.len() as u32;\n+        let data = SmolStr::from(data);\n         self.ident_data.push(data.clone());\n-        self.idents.insert(data.clone(), index);\n-        index\n+        self.idents.insert(data, index);\n+        Symbol(index)\n     }\n \n     fn get(&self, index: u32) -> &SmolStr {"}, {"sha": "c8bf2ecdd3d9db0328f0ee674dced227977829ae", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server/token_stream.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Ftoken_stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191db9fed4df1ed72fde44bbc8e6f988478db9f5/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Ftoken_stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Ftoken_stream.rs?ref=191db9fed4df1ed72fde44bbc8e6f988478db9f5", "patch": "@@ -163,20 +163,15 @@ pub mod token_stream {\n }\n \n impl TokenStreamBuilder {\n-    fn new() -> TokenStreamBuilder {\n+    pub(super) fn new() -> TokenStreamBuilder {\n         TokenStreamBuilder { acc: TokenStream::new() }\n     }\n \n-    fn push(&mut self, stream: TokenStream) {\n+    pub(super) fn push(&mut self, stream: TokenStream) {\n         self.acc.extend(stream.into_iter())\n     }\n \n-    fn build(self) -> TokenStream {\n+    pub(super) fn build(self) -> TokenStream {\n         self.acc\n     }\n }\n-\n-#[derive(Clone)]\n-pub struct TokenStreamIter {\n-    trees: std::vec::IntoIter<TokenTree>,\n-}"}]}