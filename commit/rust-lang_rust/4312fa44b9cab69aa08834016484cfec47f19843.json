{"sha": "4312fa44b9cab69aa08834016484cfec47f19843", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTJmYTQ0YjljYWI2OWFhMDg4MzQwMTY0ODRjZmVjNDdmMTk4NDM=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-16T22:45:21Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:31:38Z"}, "message": "BFS now tries a number of search keys.", "tree": {"sha": "556fd6b7f0f711830cdf417fc3c4c6fe8ee0608e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556fd6b7f0f711830cdf417fc3c4c6fe8ee0608e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4312fa44b9cab69aa08834016484cfec47f19843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4312fa44b9cab69aa08834016484cfec47f19843", "html_url": "https://github.com/rust-lang/rust/commit/4312fa44b9cab69aa08834016484cfec47f19843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4312fa44b9cab69aa08834016484cfec47f19843/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a79f5174ea1be8a90d7e02957ebbf7837916931b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79f5174ea1be8a90d7e02957ebbf7837916931b", "html_url": "https://github.com/rust-lang/rust/commit/a79f5174ea1be8a90d7e02957ebbf7837916931b"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "0d5fb486ba61c265be127424af42c1b2b2c4354d", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4312fa44b9cab69aa08834016484cfec47f19843/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4312fa44b9cab69aa08834016484cfec47f19843/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=4312fa44b9cab69aa08834016484cfec47f19843", "patch": "@@ -115,14 +115,30 @@ fn make_graph(N: uint, edges: [(node_id, node_id)]) -> graph {\n     }\n \n     graph.map() {|v|\n-        let mut neighbors = [];\n-        v.each_key() {|u|\n-            neighbors += [u];\n-            true\n-        };\n+        map::vec_from_set(v)\n+    }\n+}\n+\n+fn gen_search_keys(graph: graph, n: uint) -> [node_id] {\n+    let keys = map::int_hash();\n+    let r = rand::rng();\n+\n+    impl methods for rand::rng {\n+        fn r64() -> u64 {\n+            self.next() as u64 << 32u + self.next() as u64\n+        }\n+    }\n \n-        neighbors\n+    while keys.size() < n {\n+        let k = r.r64() % graph.len() as node_id;\n+\n+        if graph[k].len() > 0u && vec::any(graph[k]) {|i|\n+            i != k\n+        } {\n+            map::set_add(keys, k);\n+        }\n     }\n+    map::vec_from_set(keys)\n }\n \n #[doc=\"Returns a vector of all the parents in the BFS tree rooted at key.\n@@ -315,7 +331,9 @@ fn validate(edges: [(node_id, node_id)],\n }\n \n fn main() {\n-    let scale = 14u;\n+    let scale = 15u;\n+    let num_keys = 16u;\n+    let do_validate = false;\n \n     let start = time::precise_time_s();\n     let edges = make_edges(scale, 16u);\n@@ -335,21 +353,54 @@ fn main() {\n                                  total_edges / 2u,\n                                  stop - start));\n \n-    let root = 0;\n+    let mut total_seq = 0.0;\n+    let mut total_par = 0.0;\n+\n+    gen_search_keys(graph, num_keys).map() {|root|\n+        io::stdout().write_line(\"\");\n+        io::stdout().write_line(#fmt(\"Search key: %?\", root));\n     \n-    let start = time::precise_time_s();\n-    let bfs_tree = pbfs(graph, root);\n-    let stop = time::precise_time_s();\n+        let start = time::precise_time_s();\n+        let bfs_tree = bfs(graph, root);\n+        let stop = time::precise_time_s();\n \n-    io::stdout().write_line(#fmt(\"BFS completed in %? seconds.\",\n-                                 stop - start));\n+        total_seq += stop - start;\n \n-    let start = time::precise_time_s();\n-    assert(validate(edges, root, bfs_tree));\n-    let stop = time::precise_time_s();\n+        io::stdout().write_line(#fmt(\"Sequential BFS completed in %? seconds.\",\n+                                     stop - start));\n \n-    io::stdout().write_line(#fmt(\"Validation completed in %? seconds.\",\n-                                 stop - start));\n+        if do_validate {\n+            let start = time::precise_time_s();\n+            assert(validate(edges, root, bfs_tree));\n+            let stop = time::precise_time_s();\n+            \n+            io::stdout().write_line(#fmt(\"Validation completed in %? seconds.\",\n+                                         stop - start));\n+        }\n+\n+        let start = time::precise_time_s();\n+        let bfs_tree = pbfs(graph, root);\n+        let stop = time::precise_time_s();\n+\n+        total_par += stop - start;\n+\n+        io::stdout().write_line(#fmt(\"Parallel BFS completed in %? seconds.\",\n+                                     stop - start));\n+\n+        if do_validate {\n+            let start = time::precise_time_s();\n+            assert(validate(edges, root, bfs_tree));\n+            let stop = time::precise_time_s();\n+            \n+            io::stdout().write_line(#fmt(\"Validation completed in %? seconds.\",\n+                                         stop - start));\n+        }\n+    };\n+\n+    io::stdout().write_line(\"\");\n+    io::stdout().write_line(\n+        #fmt(\"Total sequential: %? \\t Total Parallel: %? \\t Speedup: %?x\",\n+             total_seq, total_par, total_seq / total_par));\n }\n \n "}]}