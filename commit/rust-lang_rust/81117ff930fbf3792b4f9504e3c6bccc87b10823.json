{"sha": "81117ff930fbf3792b4f9504e3c6bccc87b10823", "node_id": "C_kwDOAAsO6NoAKDgxMTE3ZmY5MzBmYmYzNzkyYjRmOTUwNGUzYzZiY2NjODdiMTA4MjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T13:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T13:41:48Z"}, "message": "Auto merge of #89847 - JohnTitor:rollup-xfymeo4, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #89768 (add some more testcases)\n - #89777 (Edit explanation of test for nested type ascriptions)\n - #89781 (Add missing words in `Infallible` docs)\n - #89782 (Improve CJK font in rustdoc)\n - #89794 (Add #[must_use] to to_value conversions)\n - #89814 (Fix uppercase/lowercase error)\n - #89816 (Fix invalid rules in .gitignore)\n - #89817 (Add #[inline] to int log10 functions.)\n - #89818 (Use Option::map_or instead of open coding it)\n - #89828 (Fix config.toml overflow-checks options)\n - #89840 (fix the stage0 tools config file path in `config.toml.example`)\n - #89845 (Add davidtwco to the `.mailmap`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "482f94bab819f43aff8f02d7225f58826d438004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482f94bab819f43aff8f02d7225f58826d438004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81117ff930fbf3792b4f9504e3c6bccc87b10823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81117ff930fbf3792b4f9504e3c6bccc87b10823", "html_url": "https://github.com/rust-lang/rust/commit/81117ff930fbf3792b4f9504e3c6bccc87b10823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81117ff930fbf3792b4f9504e3c6bccc87b10823/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5728bd64b49b0e78d0180efed75ef0870ae60266", "url": "https://api.github.com/repos/rust-lang/rust/commits/5728bd64b49b0e78d0180efed75ef0870ae60266", "html_url": "https://github.com/rust-lang/rust/commit/5728bd64b49b0e78d0180efed75ef0870ae60266"}, {"sha": "e21f8920d33e7e42f64c7afbb27f77a8b110db35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21f8920d33e7e42f64c7afbb27f77a8b110db35", "html_url": "https://github.com/rust-lang/rust/commit/e21f8920d33e7e42f64c7afbb27f77a8b110db35"}], "stats": {"total": 303, "additions": 278, "deletions": 25}, "files": [{"sha": "87437a16fb392c2b09e3fca8beea5a3997f27243", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -69,8 +69,8 @@ __pycache__/\n *$py.class\n \n ## Node\n-**node_modules\n-**package-lock.json\n+node_modules\n+package-lock.json\n \n ## Rustdoc GUI tests\n src/test/rustdoc-gui/src/**.lock"}, {"sha": "3b3e7334b759879790c962f2f977f4f3d5633db1", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -72,6 +72,7 @@ Daniel Ramos <dan@daramos.com>\n David Klein <david.klein@baesystemsdetica.com>\n David Manescu <david.manescu@gmail.com> <dman2626@uni.sydney.edu.au>\n David Ross <daboross@daboross.net>\n+David Wood <david@davidtw.co> <david.wood@huawei.com>\n Deadbeef <ent3rm4n@gmail.com> <fee1-dead-beef@protonmail.com>\n Derek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\n Diggory Hardy <diggory.hardy@gmail.com> Diggory Hardy <github@dhardy.name>"}, {"sha": "573124c8ec9a8fa3d0d9bb030272bc81e6a4b685", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -841,7 +841,7 @@ impl<T: Idx> GrowableBitSet<T> {\n     #[inline]\n     pub fn contains(&self, elem: T) -> bool {\n         let (word_index, mask) = word_index_and_mask(elem);\n-        if let Some(word) = self.bit_set.words.get(word_index) { (word & mask) != 0 } else { false }\n+        self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)\n     }\n }\n "}, {"sha": "61e57eee782b8f3d68ad7891b06f4a3a0efb536c", "filename": "config.toml.example", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -202,15 +202,15 @@ changelog-seen = 2\n # You can use \"$ROOT\" to indicate the root of the git repository.\n #build-dir = \"build\"\n \n-# Instead of downloading the src/stage0.txt version of Cargo specified, use\n+# Instead of downloading the src/stage0.json version of Cargo specified, use\n # this Cargo binary instead to build all Rust code\n #cargo = \"/path/to/cargo\"\n \n-# Instead of downloading the src/stage0.txt version of the compiler\n+# Instead of downloading the src/stage0.json version of the compiler\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n #rustc = \"/path/to/rustc\"\n \n-# Instead of download the src/stage0.txt version of rustfmt specified,\n+# Instead of download the src/stage0.json version of rustfmt specified,\n # use this rustfmt binary instead as the stage0 snapshot rustfmt.\n #rustfmt = \"/path/to/rustfmt\"\n \n@@ -423,6 +423,18 @@ changelog-seen = 2\n # set this value to `true`.\n #debug-logging = rust.debug-assertions (boolean)\n \n+# Whether or not overflow checks are enabled for the compiler and standard\n+# library.\n+#\n+# Defaults to rust.debug value\n+#overflow-checks = rust.debug (boolean)\n+\n+# Whether or not overflow checks are enabled for the standard library.\n+# Overrides the `overflow-checks` option, if defined.\n+#\n+# Defaults to rust.overflow-checks value\n+#overflow-checks-std = rust.overflow-checks (boolean)\n+\n # Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n # `0` - no debug info\n # `1` - line tables only - sufficient to generate backtraces that include line"}, {"sha": "e1d0ee42f4e901a8c7839c80f6f6fb0b25475b28", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -538,7 +538,7 @@ impl str {\n     /// [`make_ascii_uppercase`]: str::make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n     #[cfg(not(no_global_oom_handling))]\n-    #[must_use = \"to uppercase the value in-place, use `make_ascii_lowercase()`\"]\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> String {"}, {"sha": "3c4972bd3c9a47f74046c7022098021104200fc4", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -328,9 +328,11 @@ impl char {\n     ///\n     /// ```should_panic\n     /// // this panics\n-    /// '1'.to_digit(37);\n+    /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");"}, {"sha": "fb8305273a83cbb3740d32fbef0c4f8b26fc320d", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -664,7 +664,7 @@ impl AsMut<str> for str {\n ///\n /// However there is one case where `!` syntax can be used\n /// before `!` is stabilized as a full-fledged type: in the position of a function\u2019s return type.\n-/// Specifically, it is possible implementations for two different function pointer types:\n+/// Specifically, it is possible to have implementations for two different function pointer types:\n ///\n /// ```\n /// trait MyTrait {}"}, {"sha": "a8455fb355b3ce16eba03d21fd70b7cd100c56da", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -1,5 +1,6 @@\n mod unchecked {\n     // 0 < val <= u8::MAX\n+    #[inline]\n     pub const fn u8(val: u8) -> u32 {\n         let val = val as u32;\n \n@@ -20,6 +21,7 @@ mod unchecked {\n     }\n \n     // 0 < val < 100_000\n+    #[inline]\n     const fn less_than_5(val: u32) -> u32 {\n         // Similar to u8, when adding one of these constants to val,\n         // we get two possible bit patterns above the low 17 bits,\n@@ -40,11 +42,13 @@ mod unchecked {\n     }\n \n     // 0 < val <= u16::MAX\n+    #[inline]\n     pub const fn u16(val: u16) -> u32 {\n         less_than_5(val as u32)\n     }\n \n     // 0 < val <= u32::MAX\n+    #[inline]\n     pub const fn u32(mut val: u32) -> u32 {\n         let mut log = 0;\n         if val >= 100_000 {\n@@ -55,6 +59,7 @@ mod unchecked {\n     }\n \n     // 0 < val <= u64::MAX\n+    #[inline]\n     pub const fn u64(mut val: u64) -> u32 {\n         let mut log = 0;\n         if val >= 10_000_000_000 {\n@@ -69,6 +74,7 @@ mod unchecked {\n     }\n \n     // 0 < val <= u128::MAX\n+    #[inline]\n     pub const fn u128(mut val: u128) -> u32 {\n         let mut log = 0;\n         if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n@@ -84,33 +90,39 @@ mod unchecked {\n     }\n \n     // 0 < val <= i8::MAX\n+    #[inline]\n     pub const fn i8(val: i8) -> u32 {\n         u8(val as u8)\n     }\n \n     // 0 < val <= i16::MAX\n+    #[inline]\n     pub const fn i16(val: i16) -> u32 {\n         u16(val as u16)\n     }\n \n     // 0 < val <= i32::MAX\n+    #[inline]\n     pub const fn i32(val: i32) -> u32 {\n         u32(val as u32)\n     }\n \n     // 0 < val <= i64::MAX\n+    #[inline]\n     pub const fn i64(val: i64) -> u32 {\n         u64(val as u64)\n     }\n \n     // 0 < val <= i128::MAX\n+    #[inline]\n     pub const fn i128(val: i128) -> u32 {\n         u128(val as u128)\n     }\n }\n \n macro_rules! impl_checked {\n     ($T:ident) => {\n+        #[inline]\n         pub const fn $T(val: $T) -> Option<u32> {\n             if val > 0 { Some(unchecked::$T(val)) } else { None }\n         }"}, {"sha": "ee93f00a7fb9be46c97b0b309774554fdbd34ca2", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -242,6 +242,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (NonNull<()>, <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self.as_ptr()))\n@@ -386,6 +388,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "6827d3a8d2448342218881c9fc6c66a0116dd257", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -1342,6 +1342,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n@@ -1367,6 +1369,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -1437,6 +1441,8 @@ impl CStr {\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<'_, str>\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         String::from_utf8_lossy(self.to_bytes())"}, {"sha": "46c9aa5e627c502082a5cabb691c5107eabd6ed6", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -576,6 +576,8 @@ impl OsStr {\n     /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -627,6 +629,8 @@ impl OsStr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -644,6 +648,8 @@ impl OsStr {\n     /// assert_eq!(os_string, OsString::from(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }"}, {"sha": "e5e9fedb61eaf1b70833540079c8b6534f6ac494", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -426,6 +426,8 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     pub const fn to_canonical(&self) -> IpAddr {\n@@ -901,6 +903,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -926,6 +930,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -1648,6 +1654,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n@@ -1685,6 +1693,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n@@ -1708,9 +1718,11 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n     /// ```\n-    #[inline]\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n+    #[inline]\n     pub const fn to_canonical(&self) -> IpAddr {\n         if let Some(mapped) = self.to_ipv4_mapped() {\n             return IpAddr::V4(mapped);"}, {"sha": "47156dc33e518d1902c7d3b061927c1a416afffe", "filename": "library/std/src/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -1952,6 +1952,8 @@ impl Path {\n     /// assert_eq!(path.to_str(), Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -1978,6 +1980,8 @@ impl Path {\n     /// Had `path` contained invalid unicode, the `to_string_lossy` call might\n     /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -1994,6 +1998,8 @@ impl Path {\n     /// assert_eq!(path_buf, std::path::PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[rustc_conversion_suggestion]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_path_buf(&self) -> PathBuf {\n         PathBuf::from(self.inner.to_os_string())"}, {"sha": "7818b8b7d515d6d76e26a9feac184f230b331904", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -982,7 +982,8 @@ impl Config {\n         config.rust_debug_assertions_std =\n             debug_assertions_std.unwrap_or(config.rust_debug_assertions);\n         config.rust_overflow_checks = overflow_checks.unwrap_or(default);\n-        config.rust_overflow_checks_std = overflow_checks_std.unwrap_or(default);\n+        config.rust_overflow_checks_std =\n+            overflow_checks_std.unwrap_or(config.rust_overflow_checks);\n \n         config.rust_debug_logging = debug_logging.unwrap_or(config.rust_debug_assertions);\n "}, {"sha": "94424cb4548fa5d0f5d8ef21ed4ef9291ef90550", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -75,7 +75,9 @@ def v(*args):\n o(\"llvm-assertions\", \"llvm.assertions\", \"build LLVM with assertions\")\n o(\"llvm-plugins\", \"llvm.plugins\", \"build LLVM with plugin interface\")\n o(\"debug-assertions\", \"rust.debug-assertions\", \"build with debugging assertions\")\n+o(\"debug-assertions-std\", \"rust.debug-assertions-std\", \"build the standard library with debugging assertions\")\n o(\"overflow-checks\", \"rust.overflow-checks\", \"build with overflow checks\")\n+o(\"overflow-checks-std\", \"rust.overflow-checks-std\", \"build the standard library with overflow checks\")\n o(\"llvm-release-debuginfo\", \"llvm.release-debuginfo\", \"build LLVM with debugger metadata\")\n v(\"debuginfo-level\", \"rust.debuginfo-level\", \"debuginfo level for Rust code\")\n v(\"debuginfo-level-rustc\", \"rust.debuginfo-level-rustc\", \"debuginfo level for the compiler\")"}, {"sha": "e4c2556118aebf359ca84bd0e81fb75582ff6abc", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -39,8 +39,9 @@ static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n         \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,\n         \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n-        \"noto-sans-kr-v13-korean-regular.woff\" => static_files::noto_sans_kr::REGULAR,\n-        \"noto-sans-kr-v13-korean-regular-LICENSE.txt\" => static_files::noto_sans_kr::LICENSE,\n+        \"noto-sans-kr-regular.woff2\" => static_files::noto_sans_kr::REGULAR2,\n+        \"noto-sans-kr-regular.woff\" => static_files::noto_sans_kr::REGULAR,\n+        \"noto-sans-kr-LICENSE.txt\" => static_files::noto_sans_kr::LICENSE,\n         \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n         \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n         \"COPYRIGHT.txt\" => static_files::COPYRIGHT,"}, {"sha": "11c54876dea30ff07b5c957714d6302ae4884d83", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -75,12 +75,13 @@\n \tfont-display: swap;\n }\n \n-/* Avoid using legacy CJK serif fonts in Windows like Batang */\n+/* Avoid using legacy CJK serif fonts in Windows like Batang. */\n @font-face {\n \tfont-family: 'Noto Sans KR';\n-\tsrc: url(\"noto-sans-kr-v13-korean-regular.woff\") format(\"woff\");\n+\tsrc: url(\"noto-sans-kr-regular.woff2\") format(\"woff2\"),\n+\t\turl(\"noto-sans-kr-regular.woff\") format(\"woff\");\n \tfont-display: swap;\n-\tunicode-range: U+A960-A97F, U+AC00-D7AF, U+D7B0-D7FF;\n+\tunicode-range: U+AC00-D7AF, U+3130-318F, U+1100-11FF, U+A960-A97F, U+D7B0-D7FF;\n }\n \n * {"}, {"sha": "922d5fdc18dc9666ee3238485185749242476562", "filename": "src/librustdoc/html/static/fonts/noto-sans-kr-LICENSE.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-LICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-LICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-LICENSE.txt?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "previous_filename": "src/librustdoc/html/static/fonts/noto-sans-kr-v13-korean-regular-LICENSE.txt"}, {"sha": "65e939c6b9f540950bc2bd4c41d60c556ddca6f7", "filename": "src/librustdoc/html/static/fonts/noto-sans-kr-regular.woff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "previous_filename": "src/librustdoc/html/static/fonts/noto-sans-kr-v13-korean-regular.woff"}, {"sha": "8126492e41df33eb26bc6f0351cd8ae77777e961", "filename": "src/librustdoc/html/static/fonts/noto-sans-kr-regular.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2Fnoto-sans-kr-regular.woff2?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823"}, {"sha": "924e3f1d29dc99948a509087aa558456bae74d9c", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -157,15 +157,14 @@ crate mod source_code_pro {\n }\n \n crate mod noto_sans_kr {\n-    /// The file `noto-sans-kr-v13-korean-regular.woff`, the Regular variant of the Noto Sans KR\n-    /// font.\n-    crate static REGULAR: &[u8] =\n-        include_bytes!(\"static/fonts/noto-sans-kr-v13-korean-regular.woff\");\n+    /// The file `noto-sans-kr.woff`, the Regular variant of the Noto Sans KR font.\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/noto-sans-kr-regular.woff\");\n \n-    /// The file `noto-sans-kr-v13-korean-regular-LICENSE.txt`, the license text of the Noto Sans KR\n-    /// font.\n-    crate static LICENSE: &[u8] =\n-        include_bytes!(\"static/fonts/noto-sans-kr-v13-korean-regular-LICENSE.txt\");\n+    /// The file `noto-sans-kr.woff2`, the Regular variant of the Noto Sans KR font.\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/noto-sans-kr-regular.woff2\");\n+\n+    /// The file `noto-sans-kr-LICENSE.txt`, the license text of the Noto Sans KR font.\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/noto-sans-kr-LICENSE.txt\");\n }\n \n /// Files related to the sidebar in rustdoc sources."}, {"sha": "a2d4a642128b4f9471b8fe3c46a31b448f5f7c63", "filename": "src/test/ui/consts/issue-88071.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+//\n+// regression test for #88071\n+\n+#![feature(const_btree_new)]\n+#![feature(const_fn_trait_bound)]\n+\n+use std::collections::BTreeMap;\n+\n+pub struct CustomMap<K, V>(BTreeMap<K, V>);\n+\n+impl<K, V> CustomMap<K, V>\n+where\n+    K: Ord,\n+{\n+    pub const fn new() -> Self {\n+        CustomMap(BTreeMap::new())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "89bd79ac2991e16a06df7751bbceeee0b6d8aa3a", "filename": "src/test/ui/generic-associated-types/issue-87750.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,22 @@\n+#![feature(generic_associated_types)]\n+\n+trait PointerFamily {\n+    type Pointer<T>;\n+}\n+\n+struct Rc<T>(Box<T>);\n+struct RcFamily;\n+\n+impl PointerFamily for RcFamily {\n+    type Pointer<T> = Rc<T>;\n+}\n+\n+#[allow(dead_code)]\n+enum Node<T, P: PointerFamily> where P::Pointer<Node<T, P>>: Sized {\n+    Cons(P::Pointer<Node<T, P>>),\n+}\n+\n+fn main() {\n+    let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n+    //~^ ERROR overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n+}"}, {"sha": "854541f3d8fdaf421a73f5576258b5240da4b085", "filename": "src/test/ui/generic-associated-types/issue-87750.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,9 @@\n+error[E0275]: overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n+  --> $DIR/issue-87750.rs:20:16\n+   |\n+LL |     let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "a709e34b5014cb0779a5125dd8330805343f669f", "filename": "src/test/ui/pattern/bindings-after-at/nested-type-ascription-syntactically-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-type-ascription-syntactically-invalid.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -1,5 +1,5 @@\n // Here we check that type ascription is syntactically invalid when\n-// not in the top position of a ascribing a let binding or function parameter.\n+// not in the top position of an ascribing `let` binding or function parameter.\n \n \n // This has no effect."}, {"sha": "d72598d5d594257a11a4cef1eaf963b709a2632b", "filename": "src/test/ui/traits/issue-52893.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,57 @@\n+// check-fail\n+//\n+// regression test for issue 52893\n+trait At<Name> {\n+    type AtRes;\n+    fn at(self) -> Self::AtRes;\n+}\n+\n+trait Push<T> {\n+    type PushRes;\n+    fn push(self, other: T) -> Self::PushRes;\n+}\n+\n+trait AddClass<Name, F> {\n+    type AddRes;\n+    fn init(self, func: F);\n+}\n+\n+trait ToRef {\n+    type RefRes;\n+    fn to_ref(&self) -> Self::RefRes;\n+}\n+\n+struct Class<P>(P);\n+\n+impl<P> Class<P> {\n+    fn with<Name, F>(self) -> <Self as AddClass<Name, F>>::AddRes\n+    where\n+        Self: AddClass<Name, F>,\n+    {\n+        todo!()\n+    }\n+\n+    fn from<F>(self) -> <Self as AddClass<P, F>>::AddRes\n+    where\n+        Self: AddClass<P, F>,\n+    {\n+        todo!()\n+    }\n+}\n+\n+impl<F, Name, P> AddClass<Name, F> for Class<P>\n+where\n+    Self: At<Name>,\n+    <Self as At<Name>>::AtRes: Push<F>,\n+    <<Self as At<Name>>::AtRes as Push<F>>::PushRes: ToRef<RefRes = Self> + Push<F>,\n+{\n+    type AddRes = ();\n+\n+    fn init(self, func: F) {\n+        let builder = self.at().push(func);\n+        let output = builder.to_ref();\n+        builder.push(output); //~ ERROR mismatched types [E0308]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bf732e2491566f9f51386560f3fb1ffce2788525", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52893.rs:53:22\n+   |\n+LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n+   |      - this type parameter\n+...\n+LL |         builder.push(output);\n+   |                      ^^^^^^ expected type parameter `F`, found struct `Class`\n+   |\n+   = note: expected type parameter `F`\n+                      found struct `Class<P>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7ff54539adc5bb721c5f41797b3b407503246300", "filename": "src/test/ui/traits/issue-68295.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.rs?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,47 @@\n+// check-fail\n+//\n+// regression test for #68295\n+\n+struct Matrix<R, C, S>(R, C, S);\n+\n+impl<R, C, S> Matrix<R, C, S> {\n+    fn into_owned(self) -> Matrix<R, C, Owned<R, C, ()>>\n+    where\n+        (): Allocator<R, C>,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<D, S> Matrix<D, D, S> {\n+    fn hermitian_part(&self) -> Matrix<D, D, Owned<D, D, ()>>\n+    where\n+        (): Allocator<D, D>,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+trait Allocator<R, C> {\n+    type Buffer;\n+}\n+\n+trait Trait<R, C, A> {\n+    type Power;\n+}\n+\n+impl<R, C, A: Allocator<R, C>> Trait<R, C, A> for () {\n+    type Power = A::Buffer;\n+}\n+\n+type Owned<R, C, G> = <G as Trait<R, C, ()>>::Power;\n+\n+fn crash<R, C>(input: Matrix<R, C, ()>) -> Matrix<R, C, u32>\n+where\n+    (): Allocator<R, C>,\n+{\n+    input.into_owned()\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "cb6e6e0769cb8d8d1611a3a796334c7a21b6059a", "filename": "src/test/ui/traits/issue-68295.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81117ff930fbf3792b4f9504e3c6bccc87b10823/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-68295.stderr?ref=81117ff930fbf3792b4f9504e3c6bccc87b10823", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68295.rs:43:5\n+   |\n+LL | fn crash<R, C>(input: Matrix<R, C, ()>) -> Matrix<R, C, u32>\n+   |                                            ----------------- expected `Matrix<R, C, u32>` because of return type\n+...\n+LL |     input.into_owned()\n+   |     ^^^^^^^^^^^^^^^^^^ expected `u32`, found associated type\n+   |\n+   = note: expected struct `Matrix<_, _, u32>`\n+              found struct `Matrix<_, _, <() as Allocator<R, C>>::Buffer>`\n+   = help: consider constraining the associated type `<() as Allocator<R, C>>::Buffer` to `u32`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}