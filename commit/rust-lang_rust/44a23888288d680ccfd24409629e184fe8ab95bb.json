{"sha": "44a23888288d680ccfd24409629e184fe8ab95bb", "node_id": "C_kwDOAAsO6NoAKDQ0YTIzODg4Mjg4ZDY4MGNjZmQyNDQwOTYyOWUxODRmZThhYjk1YmI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-01-31T16:42:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-13T17:44:18Z"}, "message": "Make Ok value of repeat_while_none more general", "tree": {"sha": "b1d2ca6c68322d1da0a585fa91229c8637d04541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d2ca6c68322d1da0a585fa91229c8637d04541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a23888288d680ccfd24409629e184fe8ab95bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPqdvIACgkQgTGiTgx5\n76/cVBAAvwGaUq0fei/rXtRApHfv/NRTJfqWRVNFmkzC2d72lI+ufVGV8SdrrISL\nhcP98LgAD0DO0jmAMukkJLQBaLuU2w6/hLYgmuMW8QrMvpYC5wqg5u2VRL8q7M8N\n19CBx3LuxbnGGPisBFtEis5nI8PhKQUo7sYLbSsjR3Ezg7hiR22EFxXoVeHigSzV\nZsLhcQp6Ag7XMaavygy8Zi1xXj9OzfCoRLeCpS14222RD2QjBxGZzm3OiKWDQJuz\nlXY/uXDLplqxqnaxhQ/qcflNnjO9h56O/eioeCMcgAtETtdGZv8c5VuYPjMyQHuC\nsj9XXeA2ZiOj0UnBWNYU+RuWX2bB9haQ64PlQYSgXBvqRiSBZMdXCdLdo2sOw05Y\nX/m2zAx0MxMZ++oucZwxquCPLJix2xwppLBStRO3MVcgQkGyiR9ktRLyG1Ig84Be\ngIFsWE6YQWzSJxUi1pf2PXQlDmfBon6qAttMIzvSG5Le+Zh5mQbDZgmcqXPmoW2Y\nL3HxpDyKKM8/8CSO8jBtSQgPTZl/RKmr3McQ0efAeMFAOnwzoo6aao++4g6NIfnC\nEmOu2EptLI5H6iRWoaHct9t2ALgzek+DIhTOQQM1/oO5uTWq1Ck33dnDdm/l+M/B\nlrFoapXv3so8P4KKfSIcckjWgcx20XAH459ZEND1WGDIapPn+AU=\n=kakM\n-----END PGP SIGNATURE-----", "payload": "tree b1d2ca6c68322d1da0a585fa91229c8637d04541\nparent 0b439b119b8d49450bddbbea317afeb0d4166f70\nauthor Santiago Pastorino <spastorino@gmail.com> 1675183320 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676310258 -0300\n\nMake Ok value of repeat_while_none more general\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a23888288d680ccfd24409629e184fe8ab95bb", "html_url": "https://github.com/rust-lang/rust/commit/44a23888288d680ccfd24409629e184fe8ab95bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a23888288d680ccfd24409629e184fe8ab95bb/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b439b119b8d49450bddbbea317afeb0d4166f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b439b119b8d49450bddbbea317afeb0d4166f70", "html_url": "https://github.com/rust-lang/rust/commit/0b439b119b8d49450bddbbea317afeb0d4166f70"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "e3f8f7cddaba097a0c16f28726de10e5743ec0a1", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/44a23888288d680ccfd24409629e184fe8ab95bb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a23888288d680ccfd24409629e184fe8ab95bb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=44a23888288d680ccfd24409629e184fe8ab95bb", "patch": "@@ -485,35 +485,38 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         mut goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,\n     ) -> Result<Certainty, NoSolution> {\n         let mut new_goals = Vec::new();\n-        self.repeat_while_none(|this| {\n-            let mut has_changed = Err(Certainty::Yes);\n-            for goal in goals.drain(..) {\n-                let (changed, certainty) = match this.evaluate_goal(goal) {\n-                    Ok(result) => result,\n-                    Err(NoSolution) => return Some(Err(NoSolution)),\n-                };\n-\n-                if changed {\n-                    has_changed = Ok(());\n-                }\n+        self.repeat_while_none(\n+            |_| Certainty::Maybe(MaybeCause::Overflow),\n+            |this| {\n+                let mut has_changed = Err(Certainty::Yes);\n+                for goal in goals.drain(..) {\n+                    let (changed, certainty) = match this.evaluate_goal(goal) {\n+                        Ok(result) => result,\n+                        Err(NoSolution) => return Some(Err(NoSolution)),\n+                    };\n+\n+                    if changed {\n+                        has_changed = Ok(());\n+                    }\n \n-                match certainty {\n-                    Certainty::Yes => {}\n-                    Certainty::Maybe(_) => {\n-                        new_goals.push(goal);\n-                        has_changed = has_changed.map_err(|c| c.unify_and(certainty));\n+                    match certainty {\n+                        Certainty::Yes => {}\n+                        Certainty::Maybe(_) => {\n+                            new_goals.push(goal);\n+                            has_changed = has_changed.map_err(|c| c.unify_and(certainty));\n+                        }\n                     }\n                 }\n-            }\n \n-            match has_changed {\n-                Ok(()) => {\n-                    mem::swap(&mut new_goals, &mut goals);\n-                    None\n+                match has_changed {\n+                    Ok(()) => {\n+                        mem::swap(&mut new_goals, &mut goals);\n+                        None\n+                    }\n+                    Err(certainty) => Some(Ok(certainty)),\n                 }\n-                Err(certainty) => Some(Ok(certainty)),\n-            }\n-        })\n+            },\n+        )\n     }\n \n     // Recursively evaluates a list of goals to completion, making a query response."}, {"sha": "c472dfe5a009de34809d582a541350bf6a30e59f", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44a23888288d680ccfd24409629e184fe8ab95bb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a23888288d680ccfd24409629e184fe8ab95bb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=44a23888288d680ccfd24409629e184fe8ab95bb", "patch": "@@ -63,10 +63,11 @@ impl<'tcx> SearchGraph<'tcx> {\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// A `while`-loop which tracks overflow.\n-    pub fn repeat_while_none(\n+    pub fn repeat_while_none<T>(\n         &mut self,\n-        mut loop_body: impl FnMut(&mut Self) -> Option<Result<Certainty, NoSolution>>,\n-    ) -> Result<Certainty, NoSolution> {\n+        mut overflow_body: impl FnMut(&mut Self) -> T,\n+        mut loop_body: impl FnMut(&mut Self) -> Option<Result<T, NoSolution>>,\n+    ) -> Result<T, NoSolution> {\n         let start_depth = self.search_graph.overflow_data.additional_depth;\n         let depth = self.search_graph.stack.len();\n         while !self.search_graph.overflow_data.has_overflow(depth) {\n@@ -79,6 +80,6 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n         self.search_graph.overflow_data.additional_depth = start_depth;\n         self.search_graph.overflow_data.deal_with_overflow();\n-        Ok(Certainty::Maybe(MaybeCause::Overflow))\n+        Ok(overflow_body(self))\n     }\n }"}]}