{"sha": "1c365cedf8933c42538a6707999fec7f466e834a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzY1Y2VkZjg5MzNjNDI1MzhhNjcwNzk5OWZlYzdmNDY2ZTgzNGE=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-03-15T11:03:10Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-03-15T14:01:48Z"}, "message": "Revert \"Remove RefCell::borrow_state\"\n\nThis reverts commit 313aab8fbeb98730f8ffa741ccf54f843d5e3525.", "tree": {"sha": "b73e9e652cba9370bcd73ec56f5e5f4e41a3ac19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b73e9e652cba9370bcd73ec56f5e5f4e41a3ac19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c365cedf8933c42538a6707999fec7f466e834a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c365cedf8933c42538a6707999fec7f466e834a", "html_url": "https://github.com/rust-lang/rust/commit/1c365cedf8933c42538a6707999fec7f466e834a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c365cedf8933c42538a6707999fec7f466e834a/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70d1150478c3d4f9b959f558cffc1863f1527654", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d1150478c3d4f9b959f558cffc1863f1527654", "html_url": "https://github.com/rust-lang/rust/commit/70d1150478c3d4f9b959f558cffc1863f1527654"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "304b8dffe98679c9f6fea3e7d2558757c1797563", "filename": "src/doc/unstable-book/src/library-features/borrow-state.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c365cedf8933c42538a6707999fec7f466e834a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c365cedf8933c42538a6707999fec7f466e834a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fborrow-state.md?ref=1c365cedf8933c42538a6707999fec7f466e834a", "patch": "@@ -0,0 +1,7 @@\n+# `borrow_state`\n+\n+The tracking issue for this feature is: [#27733]\n+\n+[#27733]: https://github.com/rust-lang/rust/issues/27733\n+\n+------------------------"}, {"sha": "64c63e5ce1a54ecd015639afa519fed00acf0c6c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1c365cedf8933c42538a6707999fec7f466e834a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c365cedf8933c42538a6707999fec7f466e834a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=1c365cedf8933c42538a6707999fec7f466e834a", "patch": "@@ -569,6 +569,20 @@ pub struct RefCell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n+/// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+#[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+#[allow(deprecated)]\n+pub enum BorrowState {\n+    /// The cell is currently being read, there is at least one active `borrow`.\n+    Reading,\n+    /// The cell is currently being written to, there is an active `borrow_mut`.\n+    Writing,\n+    /// There are no outstanding borrows on this cell.\n+    Unused,\n+}\n+\n /// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n pub struct BorrowError {\n@@ -753,6 +767,41 @@ impl<T> RefCell<T> {\n }\n \n impl<T: ?Sized> RefCell<T> {\n+    /// Query the current state of this `RefCell`\n+    ///\n+    /// The returned value can be dispatched on to determine if a call to\n+    /// `borrow` or `borrow_mut` would succeed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(borrow_state)]\n+    ///\n+    /// use std::cell::{BorrowState, RefCell};\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// match c.borrow_state() {\n+    ///     BorrowState::Writing => println!(\"Cannot be borrowed\"),\n+    ///     BorrowState::Reading => println!(\"Cannot be borrowed mutably\"),\n+    ///     BorrowState::Unused => println!(\"Can be borrowed (mutably as well)\"),\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n+    #[rustc_deprecated(since = \"1.15.0\", reason = \"use `try_borrow` instead\")]\n+    #[allow(deprecated)]\n+    #[inline]\n+    pub fn borrow_state(&self) -> BorrowState {\n+        let borrow = self.borrow.get();\n+        if is_writing(borrow) {\n+            BorrowState::Writing\n+        } else if is_reading(borrow) {\n+            BorrowState::Reading\n+        } else {\n+            BorrowState::Unused\n+        }\n+    }\n+\n     /// Immutably borrows the wrapped value.\n     ///\n     /// The borrow lasts until the returned `Ref` exits scope. Multiple"}]}