{"sha": "40b5470b0db1997fe28bd774171b4f958fa7d240", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYjU0NzBiMGRiMTk5N2ZlMjhiZDc3NDE3MWI0Zjk1OGZhN2QyNDA=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-11-30T20:24:48Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2020-12-01T18:34:39Z"}, "message": "Address review comments.\n\nGo back to CRATE_DEF_INDEX\n\nMinor niceness improvements\n\nDon't output hidden items\n\nRemove striped items from fields\n\nAdd $TEST_BASE_DIR\n\nSmall catch", "tree": {"sha": "c8d71df14507bc1df479f4a832859bd21a9fc662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d71df14507bc1df479f4a832859bd21a9fc662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40b5470b0db1997fe28bd774171b4f958fa7d240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40b5470b0db1997fe28bd774171b4f958fa7d240", "html_url": "https://github.com/rust-lang/rust/commit/40b5470b0db1997fe28bd774171b4f958fa7d240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40b5470b0db1997fe28bd774171b4f958fa7d240/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "html_url": "https://github.com/rust-lang/rust/commit/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c"}], "stats": {"total": 183, "additions": 80, "deletions": 103}, "files": [{"sha": "d294d8f02a80ffdab9117543f89d71c9c0a73fbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -2281,7 +2281,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n+            def_id: DefId::local(CRATE_DEF_INDEX),\n             visibility: self.vis.clean(cx),\n             stability: None,\n             const_stability: None,"}, {"sha": "4d57b33787963132ccc4afdf90ed302eacf655dc", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -12,43 +12,44 @@ use crate::doctree;\n use crate::formats::item_type::ItemType;\n use crate::json::types::*;\n \n-impl From<clean::Item> for Item {\n+impl From<clean::Item> for Option<Item> {\n     fn from(item: clean::Item) -> Self {\n         let item_type = ItemType::from(&item);\n         let clean::Item {\n             source,\n             name,\n             attrs,\n-            kind: inner,\n+            kind,\n             visibility,\n             def_id,\n             stability: _,\n             deprecation,\n         } = item;\n-        Item {\n-            id: def_id.into(),\n-            crate_id: def_id.krate.as_u32(),\n-            name,\n-            stripped: match inner {\n-                clean::StrippedItem(_) => true,\n-                _ => false,\n-            },\n-            source: source.into(),\n-            visibility: visibility.into(),\n-            docs: attrs.collapsed_doc_value().unwrap_or_default(),\n-            links: attrs\n-                .links\n-                .into_iter()\n-                .filter_map(|clean::ItemLink { link, did, .. }| did.map(|did| (link, did.into())))\n-                .collect(),\n-            attrs: attrs\n-                .other_attrs\n-                .iter()\n-                .map(rustc_ast_pretty::pprust::attribute_to_string)\n-                .collect(),\n-            deprecation: deprecation.map(Into::into),\n-            kind: item_type.into(),\n-            inner: inner.into(),\n+        match kind {\n+            clean::StrippedItem(_) => None,\n+            _ => Some(Item {\n+                id: def_id.into(),\n+                crate_id: def_id.krate.as_u32(),\n+                name,\n+                source: source.into(),\n+                visibility: visibility.into(),\n+                docs: attrs.collapsed_doc_value().unwrap_or_default(),\n+                links: attrs\n+                    .links\n+                    .into_iter()\n+                    .filter_map(|clean::ItemLink { link, did, .. }| {\n+                        did.map(|did| (link, did.into()))\n+                    })\n+                    .collect(),\n+                attrs: attrs\n+                    .other_attrs\n+                    .iter()\n+                    .map(rustc_ast_pretty::pprust::attribute_to_string)\n+                    .collect(),\n+                deprecation: deprecation.map(Into::into),\n+                kind: item_type.into(),\n+                inner: kind.into(),\n+            }),\n         }\n     }\n }\n@@ -194,10 +195,7 @@ impl From<clean::ItemKind> for ItemEnum {\n \n impl From<clean::Module> for Module {\n     fn from(module: clean::Module) -> Self {\n-        Module {\n-            is_crate: module.is_crate,\n-            items: module.items.into_iter().map(|i| i.def_id.into()).collect(),\n-        }\n+        Module { is_crate: module.is_crate, items: ids(module.items) }\n     }\n }\n \n@@ -208,7 +206,7 @@ impl From<clean::Struct> for Struct {\n             struct_type: struct_type.into(),\n             generics: generics.into(),\n             fields_stripped,\n-            fields: fields.into_iter().map(|i| i.def_id.into()).collect(),\n+            fields: ids(fields),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -221,7 +219,7 @@ impl From<clean::Union> for Struct {\n             struct_type: struct_type.into(),\n             generics: generics.into(),\n             fields_stripped,\n-            fields: fields.into_iter().map(|i| i.def_id.into()).collect(),\n+            fields: ids(fields),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -407,7 +405,7 @@ impl From<clean::Trait> for Trait {\n         Trait {\n             is_auto,\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n-            items: items.into_iter().map(|i| i.def_id.into()).collect(),\n+            items: ids(items),\n             generics: generics.into(),\n             bounds: bounds.into_iter().map(Into::into).collect(),\n             implementors: Vec::new(), // Added in JsonRenderer::item\n@@ -434,7 +432,7 @@ impl From<clean::Impl> for Impl {\n             provided_trait_methods: provided_trait_methods.into_iter().collect(),\n             trait_: trait_.map(Into::into),\n             for_: for_.into(),\n-            items: items.into_iter().map(|i| i.def_id.into()).collect(),\n+            items: ids(items),\n             negative: polarity == Some(clean::ImplPolarity::Negative),\n             synthetic,\n             blanket_impl: blanket_impl.map(Into::into),\n@@ -460,7 +458,7 @@ impl From<clean::Enum> for Enum {\n         Enum {\n             generics: generics.into(),\n             variants_stripped,\n-            variants: variants.into_iter().map(|i| i.def_id.into()).collect(),\n+            variants: ids(variants),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -473,7 +471,7 @@ impl From<clean::VariantStruct> for Struct {\n             struct_type: struct_type.into(),\n             generics: Default::default(),\n             fields_stripped,\n-            fields: fields.into_iter().map(|i| i.def_id.into()).collect(),\n+            fields: ids(fields),\n             impls: Vec::new(),\n         }\n     }\n@@ -485,7 +483,7 @@ impl From<clean::Variant> for Variant {\n         match variant.kind {\n             CLike => Variant::Plain,\n             Tuple(t) => Variant::Tuple(t.into_iter().map(Into::into).collect()),\n-            Struct(s) => Variant::Struct(s.fields.into_iter().map(|i| i.def_id.into()).collect()),\n+            Struct(s) => Variant::Struct(ids(s.fields)),\n         }\n     }\n }\n@@ -594,3 +592,7 @@ impl From<ItemType> for ItemKind {\n         }\n     }\n }\n+\n+fn ids(items: impl IntoIterator<Item = clean::Item>) -> Vec<Id> {\n+    items.into_iter().filter(|x| !x.is_stripped()).map(|i| i.def_id.into()).collect()\n+}"}, {"sha": "c080ad21c0f33f5d6a9c52e1195d771e12e4594a", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -99,7 +99,6 @@ impl JsonRenderer {\n                                 .0\n                                 .last()\n                                 .map(Clone::clone),\n-                            stripped: false,\n                             visibility: types::Visibility::Public,\n                             kind: types::ItemKind::Trait,\n                             inner: types::ItemEnum::TraitItem(trait_item.clone().into()),\n@@ -144,16 +143,17 @@ impl FormatRenderer for JsonRenderer {\n         item.kind.inner_items().for_each(|i| self.item(i.clone(), cache).unwrap());\n \n         let id = item.def_id;\n-        let mut new_item: types::Item = item.into();\n-        if let types::ItemEnum::TraitItem(ref mut t) = new_item.inner {\n-            t.implementors = self.get_trait_implementors(id, cache)\n-        } else if let types::ItemEnum::StructItem(ref mut s) = new_item.inner {\n-            s.impls = self.get_impls(id, cache)\n-        } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n-            e.impls = self.get_impls(id, cache)\n+        if let Some(mut new_item) = item.into(): Option<types::Item> {\n+            if let types::ItemEnum::TraitItem(ref mut t) = new_item.inner {\n+                t.implementors = self.get_trait_implementors(id, cache)\n+            } else if let types::ItemEnum::StructItem(ref mut s) = new_item.inner {\n+                s.impls = self.get_impls(id, cache)\n+            } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n+                e.impls = self.get_impls(id, cache)\n+            }\n+            self.index.borrow_mut().insert(id.into(), new_item);\n         }\n \n-        self.index.borrow_mut().insert(id.into(), new_item);\n         Ok(())\n     }\n "}, {"sha": "10bf2a2acc5b9e908d95aeb9b163ad79064053c5", "filename": "src/librustdoc/json/types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Ftypes.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -62,9 +62,6 @@ pub struct Item {\n     pub crate_id: u32,\n     /// Some items such as impls don't have names.\n     pub name: Option<String>,\n-    /// Whether this item is meant to be omitted from the generated documentation due to `#doc(hidden)`,\n-    /// because it is private, or because it was inlined.\n-    pub stripped: bool,\n     /// The source location of this item (absent if it came from a macro expansion or inline\n     /// assembly).\n     pub source: Option<Span>,"}, {"sha": "80a9c3811cf666c1cc00841b4509ae660d235147", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -14,6 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n #![feature(once_cell)]\n+#![feature(type_ascription)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "ad517ae95ebb6429e23c77f663b1bd87651343a4", "filename": "src/test/rustdoc-json/Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c/src%2Ftest%2Frustdoc-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2FMakefile?ref=1098cce27acb2d52cb3b5ddbcf28c3a06e38dc7c", "patch": "@@ -1,6 +0,0 @@\n--include ../tools.mk\n-\n-tests: *.rs\n-\t$(RUSTDOC) $< -o $(TMPDIR) --output-format json\n-\t$(PYTHON) check_missing_items.py $(TMPDIR)/$(basename $<).json\n-\t$(PYTHON) compare.py $(basename $<).expected $(TMPDIR)/$(basename $<).json"}, {"sha": "422e48ea39a018f1b2568a21725fb92990c971c0", "filename": "src/test/rustdoc-json/compare.py", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftest%2Frustdoc-json%2Fcompare.py", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftest%2Frustdoc-json%2Fcompare.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fcompare.py?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -34,23 +34,18 @@ def check_subset(expected_main, actual_main, base_dir):\n     def _check_subset(expected, actual, trace):\n         expected_type = type(expected)\n         actual_type = type(actual)\n+\n+        if actual_type is str:\n+            actual = actual.replace(base_dir, \"$TEST_BASE_DIR\")\n+\n         if expected_type is not actual_type:\n             raise SubsetException(\n                 \"expected type `{}`, got `{}`\".format(expected_type, actual_type), trace\n             )\n-        if expected_type in (str, int, bool) and expected != actual:\n-            if expected_type == str and actual.startswith(base_dir):\n-                if actual.replace(base_dir + \"/\", \"\") != expected:\n-                    raise SubsetException(\n-                        \"expected `{}`, got: `{}`\".format(\n-                            expected, actual.replace(base_dir + \"/\", \"\")\n-                        ),\n-                        trace,\n-                    )\n-            else:\n-                raise SubsetException(\n-                    \"expected `{}`, got: `{}`\".format(expected, actual), trace\n-                )\n+\n+\n+        if expected_type in (int, bool, str) and expected != actual:\n+            raise SubsetException(\"expected `{}`, got: `{}`\".format(expected, actual), trace)\n         if expected_type is dict:\n             for key in expected:\n                 if key not in actual:"}, {"sha": "799829de3fd6c9a6a29d52e6a8d90e9b30d24ea4", "filename": "src/test/rustdoc-json/structs.expected", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftest%2Frustdoc-json%2Fstructs.expected", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs.expected?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -7,7 +7,7 @@\n       \"crate_id\": 0,\n       \"name\": \"Unit\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           7,\n           0\n@@ -37,7 +37,7 @@\n       \"crate_id\": 0,\n       \"name\": \"1\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           5,\n           22\n@@ -72,7 +72,7 @@\n       \"crate_id\": 0,\n       \"name\": \"stuff\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           15,\n           4\n@@ -114,7 +114,7 @@\n       \"crate_id\": 0,\n       \"name\": \"WithPrimitives\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           9,\n           0\n@@ -141,18 +141,14 @@\n           ],\n           \"where_predicates\": []\n         },\n-        \"fields_stripped\": true,\n-        \"fields\": [\n-          \"0:13\",\n-          \"0:14\"\n-        ]\n+        \"fields_stripped\": true\n       }\n     },\n     \"0:14\": {\n       \"crate_id\": 0,\n       \"name\": \"s\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           11,\n           4\n@@ -184,7 +180,7 @@\n       \"crate_id\": 0,\n       \"name\": \"things\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           16,\n           4\n@@ -232,7 +228,7 @@\n       \"crate_id\": 0,\n       \"name\": \"WithGenerics\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           14,\n           0\n@@ -273,18 +269,14 @@\n           ],\n           \"where_predicates\": []\n         },\n-        \"fields_stripped\": true,\n-        \"fields\": [\n-          \"0:18\",\n-          \"0:19\"\n-        ]\n+        \"fields_stripped\": true\n       }\n     },\n     \"0:0\": {\n       \"crate_id\": 0,\n       \"name\": \"structs\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           1,\n           0\n@@ -315,7 +307,7 @@\n       \"crate_id\": 0,\n       \"name\": \"num\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           10,\n           4\n@@ -340,7 +332,7 @@\n       \"crate_id\": 0,\n       \"name\": \"Tuple\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           5,\n           0\n@@ -362,18 +354,14 @@\n           \"params\": [],\n           \"where_predicates\": []\n         },\n-        \"fields_stripped\": true,\n-        \"fields\": [\n-          \"0:7\",\n-          \"0:8\"\n-        ]\n+        \"fields_stripped\": true\n       }\n     },\n     \"0:4\": {\n       \"crate_id\": 0,\n       \"name\": \"PlainEmpty\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           3,\n           0\n@@ -403,7 +391,7 @@\n       \"crate_id\": 0,\n       \"name\": \"0\",\n       \"source\": {\n-        \"filename\": \"structs.rs\",\n+        \"filename\": \"$TEST_BASE_DIR/structs.rs\",\n         \"begin\": [\n           5,\n           17"}, {"sha": "e9089b4b15baa30b843018e0534cdce187505ce1", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b5470b0db1997fe28bd774171b4f958fa7d240/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=40b5470b0db1997fe28bd774171b4f958fa7d240", "patch": "@@ -1565,7 +1565,7 @@ impl<'test> TestCx<'test> {\n         self.compose_and_run_compiler(rustc, None)\n     }\n \n-    fn document(&self, out_dir: &Path, json: bool) -> ProcRes {\n+    fn document(&self, out_dir: &Path) -> ProcRes {\n         if self.props.build_aux_docs {\n             for rel_ab in &self.props.aux_builds {\n                 let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n@@ -1579,7 +1579,7 @@ impl<'test> TestCx<'test> {\n                 };\n                 // Create the directory for the stdout/stderr files.\n                 create_dir_all(aux_cx.output_base_dir()).unwrap();\n-                let auxres = aux_cx.document(out_dir, json);\n+                let auxres = aux_cx.document(out_dir);\n                 if !auxres.status.success() {\n                     return auxres;\n                 }\n@@ -1601,7 +1601,7 @@ impl<'test> TestCx<'test> {\n             .arg(&self.testpaths.file)\n             .args(&self.props.compile_flags);\n \n-        if json {\n+        if self.config.mode == RustdocJson {\n             rustdoc.arg(\"--output-format\").arg(\"json\");\n         }\n \n@@ -2336,7 +2336,7 @@ impl<'test> TestCx<'test> {\n         let _ = fs::remove_dir_all(&out_dir);\n         create_dir_all(&out_dir).unwrap();\n \n-        let proc_res = self.document(&out_dir, false);\n+        let proc_res = self.document(&out_dir);\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n         }\n@@ -2392,7 +2392,7 @@ impl<'test> TestCx<'test> {\n         rustc.arg(\"-L\").arg(&new_rustdoc.aux_output_dir_name());\n         new_rustdoc.build_all_auxiliary(&mut rustc);\n \n-        let proc_res = new_rustdoc.document(&compare_dir, false);\n+        let proc_res = new_rustdoc.document(&compare_dir);\n         if !proc_res.status.success() {\n             proc_res.fatal(Some(\"failed to run nightly rustdoc\"), || ());\n         }\n@@ -2482,7 +2482,7 @@ impl<'test> TestCx<'test> {\n         let _ = fs::remove_dir_all(&out_dir);\n         create_dir_all(&out_dir).unwrap();\n \n-        let proc_res = self.document(&out_dir, true);\n+        let proc_res = self.document(&out_dir);\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n         }\n@@ -3052,7 +3052,7 @@ impl<'test> TestCx<'test> {\n         if let Some(nodejs) = &self.config.nodejs {\n             let out_dir = self.output_base_dir();\n \n-            self.document(&out_dir, false);\n+            self.document(&out_dir);\n \n             let root = self.config.find_rust_src_root().unwrap();\n             let file_stem ="}]}