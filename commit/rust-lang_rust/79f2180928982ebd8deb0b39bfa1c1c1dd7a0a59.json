{"sha": "79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59", "node_id": "C_kwDOAAsO6NoAKDc5ZjIxODA5Mjg5ODJlYmQ4ZGViMGIzOWJmYTFjMWMxZGQ3YTBhNTk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-21T23:26:18Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-21T23:26:18Z"}, "message": "Add ui test", "tree": {"sha": "61cbe1502ce8c66553d51cb303c7e056f85515c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61cbe1502ce8c66553d51cb303c7e056f85515c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIUH5oACgkQbQF6ltjm\nwvlfxBAAgJxz7DP8BM1t+6edJ8Qn61pQ67+wuBHETo+VRS5G76d7OReoYpr8hbsb\n2lsPMnG3D1wrBms+cwk4BnXA6qfhAaorKkcFMM4eboLSqtxmcKxJ2VVoiqaPEk2y\nua1FTC/apj+Nfm44D8Ekc1tjY3/6HRbMw7Py+1v5iqKGSbO81clQPYYy55//IQ+k\nofb2Wm1RRGqxAL684RWbY4wGExt8lfWxbJbJuW9UCVatDcPxoi+nST/puUvF8vR7\nfqVRBq26+5ENADBPKRZQuQGLvuCJIZc33WagkE8fVKAYwzG12SLh2M8jqWVi+9h5\n3C54Dkms/QebGhPLpF/J5TK8jXuFUqyz45cqjtnH7bOi41ziTelsR0saLhd7ywcy\npunXIidqIksCahrxj2x5564tYOyrOyZ3EwB0z5rW8sY6q6mfLAsLlY46npZ+96GG\nKMmjfPx2wHopEDZtebRK+vt9DwkEcx0wfy57DK3Qvf7Mj823ovgXwqfxWTR3ZKWh\nJxikOPRr+qVO7LsU3JLlFhgpdAbS24CTTSfNKRc6hlU1L/BEOm0b6E8lBeP5soGi\nFvwrx/ZyeNCAiKazExLWO3y+vdvAruZ8mFKUN8rdpW5xRiY2PvxAWqFpdaPKq+WA\n4zur+ajzZGVXTjkP9wFrCYTvBDxygDwOiaeIqrMRnZPkgBkrkSk=\n=d8Lq\n-----END PGP SIGNATURE-----", "payload": "tree 61cbe1502ce8c66553d51cb303c7e056f85515c8\nparent 9c0141a4907e9255c5583304def3c16d357a5a14\nauthor Deadbeef <ent3rm4n@gmail.com> 1645485978 +1100\ncommitter Deadbeef <ent3rm4n@gmail.com> 1645485978 +1100\n\nAdd ui test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59", "html_url": "https://github.com/rust-lang/rust/commit/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0141a4907e9255c5583304def3c16d357a5a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0141a4907e9255c5583304def3c16d357a5a14", "html_url": "https://github.com/rust-lang/rust/commit/9c0141a4907e9255c5583304def3c16d357a5a14"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "2adf69f6514cd95a2fe50c27875ec91bcda2bcdf", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=79f2180928982ebd8deb0b39bfa1c1c1dd7a0a59", "patch": "@@ -0,0 +1,60 @@\n+// Test that we do not currently display `~const` in rustdoc\n+// as that syntax is currently provisional; `~const Drop` has\n+// no effect on stable code so it should be hidden as well.\n+//\n+// To future blessers: make sure that `const_trait_impl` is\n+// stabilized when changing `@!has` to `@has`, and please do\n+// not remove this test.\n+#![feature(const_trait_impl)]\n+#![crate_name = \"foo\"]\n+\n+pub struct S<T>(T);\n+\n+// @!has foo/trait.Tr.html '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n+// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' 'Drop'\n+// @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+pub trait Tr<T> {\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    #[default_method_body_is_const]\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where\"]' '~const'\n+// @!has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E\"]/h3[@class=\"code-header in-band\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+impl<T: ~const Drop + ~const Clone> const Tr<T> for T where Option<T>: ~const Drop + ~const Clone {\n+    fn a<A: ~const Drop + ~const Clone>() where Option<A>: ~const Drop + ~const Clone {}\n+}\n+\n+// @!has foo/fn.foo.html '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' 'Drop'\n+// @has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+pub const fn foo<F: ~const Drop + ~const Clone>() where Option<F>: ~const Drop + ~const Clone {\n+    F::a()\n+}\n+\n+impl<T> S<T> {\n+    // @!has foo/struct.S.html '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n+    // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' 'Drop'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n+    pub const fn foo<B: ~const Drop + ~const Clone>() where B: ~const Drop + ~const Clone {\n+        B::a()\n+    }\n+}"}]}