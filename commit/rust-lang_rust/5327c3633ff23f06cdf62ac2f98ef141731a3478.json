{"sha": "5327c3633ff23f06cdf62ac2f98ef141731a3478", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjdjMzYzM2ZmMjNmMDZjZGY2MmFjMmY5OGVmMTQxNzMxYTM0Nzg=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-10-19T07:56:32Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-19T07:56:32Z"}, "message": "handle field attributes when aligning a struct's fields (#3513)", "tree": {"sha": "7c1f28302b7292175375b295181c95b72e57a63a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1f28302b7292175375b295181c95b72e57a63a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5327c3633ff23f06cdf62ac2f98ef141731a3478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5327c3633ff23f06cdf62ac2f98ef141731a3478", "html_url": "https://github.com/rust-lang/rust/commit/5327c3633ff23f06cdf62ac2f98ef141731a3478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5327c3633ff23f06cdf62ac2f98ef141731a3478/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d16df9a4b294e3db339dacb0f83aab61f2acc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d16df9a4b294e3db339dacb0f83aab61f2acc5", "html_url": "https://github.com/rust-lang/rust/commit/a5d16df9a4b294e3db339dacb0f83aab61f2acc5"}], "stats": {"total": 127, "additions": 102, "deletions": 25}, "files": [{"sha": "401cf78d721b8d16ba078c6bf0f0d4d85b4e1025", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5327c3633ff23f06cdf62ac2f98ef141731a3478/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5327c3633ff23f06cdf62ac2f98ef141731a3478/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5327c3633ff23f06cdf62ac2f98ef141731a3478", "patch": "@@ -1617,7 +1617,7 @@ pub(crate) fn rewrite_struct_field(\n         shape,\n         attrs_extendable,\n     )?;\n-    let overhead = last_line_width(&attr_prefix);\n+    let overhead = trimmed_last_line_width(&attr_prefix);\n     let lhs_offset = lhs_max_width.saturating_sub(overhead);\n     for _ in 0..lhs_offset {\n         spacing.push(' ');"}, {"sha": "59b03789fb50dee070ee850a6b8fec08994496c7", "filename": "src/vertical.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5327c3633ff23f06cdf62ac2f98ef141731a3478/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5327c3633ff23f06cdf62ac2f98ef141731a3478/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=5327c3633ff23f06cdf62ac2f98ef141731a3478", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n \n-use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n+use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;\n use crate::expr::rewrite_field;\n use crate::items::{rewrite_struct_field, rewrite_struct_field_prefix};\n@@ -17,7 +17,9 @@ use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n-use crate::utils::{contains_skip, is_attributes_extendable, mk_sp, rewrite_ident};\n+use crate::utils::{\n+    contains_skip, is_attributes_extendable, mk_sp, rewrite_ident, trimmed_last_line_width,\n+};\n \n pub(crate) trait AlignedItem {\n     fn skip(&self) -> bool;\n@@ -183,13 +185,9 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n     fields\n         .iter()\n         .map(|field| {\n-            field.rewrite_prefix(context, shape).and_then(|field_str| {\n-                if field_str.contains('\\n') {\n-                    None\n-                } else {\n-                    Some(field_str.len())\n-                }\n-            })\n+            field\n+                .rewrite_prefix(context, shape)\n+                .map(|field_str| trimmed_last_line_width(&field_str))\n         })\n         .fold_options((0, ::std::usize::MAX), |(max_len, min_len), len| {\n             (cmp::max(max_len, len), cmp::min(min_len, len))\n@@ -255,6 +253,9 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     write_list(&items, &fmt)\n }\n \n+/// Returns the index in `fields` up to which a field belongs to the current group.\n+/// The returned string is the group separator to use when rewriting the fields.\n+/// Groups are defined by blank lines.\n fn group_aligned_items<T: AlignedItem>(\n     context: &RewriteContext<'_>,\n     fields: &[T],\n@@ -264,25 +265,19 @@ fn group_aligned_items<T: AlignedItem>(\n         if fields[i].skip() {\n             return (\"\", index);\n         }\n-        // See if there are comments or empty lines between fields.\n         let span = mk_sp(fields[i].get_span().hi(), fields[i + 1].get_span().lo());\n         let snippet = context\n             .snippet(span)\n             .lines()\n             .skip(1)\n             .collect::<Vec<_>>()\n             .join(\"\\n\");\n-        let spacings = if snippet\n+        let has_blank_line = snippet\n             .lines()\n             .dropping_back(1)\n-            .any(|l| l.trim().is_empty())\n-        {\n-            \"\\n\"\n-        } else {\n-            \"\"\n-        };\n-        if contains_comment(&snippet) || snippet.lines().count() > 1 {\n-            return (spacings, index);\n+            .any(|l| l.trim().is_empty());\n+        if has_blank_line {\n+            return (\"\\n\", index);\n         }\n         index += 1;\n     }"}, {"sha": "d18adfb462e9cf089a8464974a6c1e7cc3f5db5e", "filename": "tests/source/issue-2869.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Fsource%2Fissue-2869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Fsource%2Fissue-2869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2869.rs?ref=5327c3633ff23f06cdf62ac2f98ef141731a3478", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-struct_field_align_threshold: 50\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"PascalCase\")]\n+struct AuditLog1 {\n+    creation_time: String,\n+    id: String,\n+    operation: String,\n+    organization_id: String,\n+    record_type: u32,\n+    result_status: Option<String>,\n+    #[serde(rename = \"ClientIP\")]\n+    client_ip: Option<IpAddr>,\n+    object_id: String,\n+    actor: Option<Vec<IDType>>,\n+    actor_context_id: Option<String>,\n+    actor_ip_address: Option<IpAddr>,\n+    azure_active_directory_event_type: Option<u8>,\n+\n+    #[serde(rename = \"very\")]\n+    aaaaa: String,\n+    #[serde(rename = \"cool\")]\n+    bb: i32,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"PascalCase\")]\n+struct AuditLog2 {\n+    creation_time: String,\n+    id: String,\n+    operation: String,\n+    organization_id: String,\n+    record_type: u32,\n+    result_status: Option<String>,\n+    client_ip: Option<IpAddr>,\n+    object_id: String,\n+    actor: Option<Vec<IDType>>,\n+    actor_context_id: Option<String>,\n+    actor_ip_address: Option<IpAddr>,\n+    azure_active_directory_event_type: Option<u8>,\n+}"}, {"sha": "12a523e9d83df27ff2faf29d3699bf3d5bf5c5ff", "filename": "tests/target/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=5327c3633ff23f06cdf62ac2f98ef141731a3478", "patch": "@@ -38,12 +38,12 @@ fn main() {\n pub struct Foo {\n     #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n-    f: SomeType, // Comment beside a field\n+    f:     SomeType, // Comment beside a field\n     // Comment on a field\n     #[AnAttribute]\n-    g: SomeOtherType,\n+    g:     SomeOtherType,\n     /// A doc comment on a field\n-    h: AThirdType,\n+    h:     AThirdType,\n     pub i: TypeForPublicField,\n }\n \n@@ -66,7 +66,7 @@ struct X {\n pub struct Writebatch<K: Key> {\n     #[allow(dead_code)] // only used for holding the internal pointer\n     writebatch: RawWritebatch,\n-    marker: PhantomData<K>,\n+    marker:     PhantomData<K>,\n }\n \n struct Bar;\n@@ -323,7 +323,7 @@ fn main() {\n         // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n         // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor.\n-        first: item(),\n+        first:  item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n         // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n         second: Item,"}, {"sha": "6a68c2d95faa111862acb6b15dfe91f1e90647ad", "filename": "tests/target/issue-2869.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Ftarget%2Fissue-2869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5327c3633ff23f06cdf62ac2f98ef141731a3478/tests%2Ftarget%2Fissue-2869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2869.rs?ref=5327c3633ff23f06cdf62ac2f98ef141731a3478", "patch": "@@ -0,0 +1,41 @@\n+// rustfmt-struct_field_align_threshold: 50\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"PascalCase\")]\n+struct AuditLog1 {\n+    creation_time:                     String,\n+    id:                                String,\n+    operation:                         String,\n+    organization_id:                   String,\n+    record_type:                       u32,\n+    result_status:                     Option<String>,\n+    #[serde(rename = \"ClientIP\")]\n+    client_ip:                         Option<IpAddr>,\n+    object_id:                         String,\n+    actor:                             Option<Vec<IDType>>,\n+    actor_context_id:                  Option<String>,\n+    actor_ip_address:                  Option<IpAddr>,\n+    azure_active_directory_event_type: Option<u8>,\n+\n+    #[serde(rename = \"very\")]\n+    aaaaa: String,\n+    #[serde(rename = \"cool\")]\n+    bb:    i32,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"PascalCase\")]\n+struct AuditLog2 {\n+    creation_time:                     String,\n+    id:                                String,\n+    operation:                         String,\n+    organization_id:                   String,\n+    record_type:                       u32,\n+    result_status:                     Option<String>,\n+    client_ip:                         Option<IpAddr>,\n+    object_id:                         String,\n+    actor:                             Option<Vec<IDType>>,\n+    actor_context_id:                  Option<String>,\n+    actor_ip_address:                  Option<IpAddr>,\n+    azure_active_directory_event_type: Option<u8>,\n+}"}]}