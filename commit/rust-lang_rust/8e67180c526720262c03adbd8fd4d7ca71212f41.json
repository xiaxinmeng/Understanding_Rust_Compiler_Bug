{"sha": "8e67180c526720262c03adbd8fd4d7ca71212f41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjcxODBjNTI2NzIwMjYyYzAzYWRiZDhmZDRkN2NhNzEyMTJmNDE=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T06:34:31Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T09:26:57Z"}, "message": "Fix async/await ICE #64964", "tree": {"sha": "d0012b9530b5d232ac84a74161ad6cb65aed6e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0012b9530b5d232ac84a74161ad6cb65aed6e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e67180c526720262c03adbd8fd4d7ca71212f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e67180c526720262c03adbd8fd4d7ca71212f41", "html_url": "https://github.com/rust-lang/rust/commit/8e67180c526720262c03adbd8fd4d7ca71212f41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e67180c526720262c03adbd8fd4d7ca71212f41/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7130fc54e05e247f93c7ecc2d10f56b314c97831", "url": "https://api.github.com/repos/rust-lang/rust/commits/7130fc54e05e247f93c7ecc2d10f56b314c97831", "html_url": "https://github.com/rust-lang/rust/commit/7130fc54e05e247f93c7ecc2d10f56b314c97831"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "c58811cea190ca3e1317e0f945d97f72de6b994c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8e67180c526720262c03adbd8fd4d7ca71212f41", "patch": "@@ -316,6 +316,12 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub scope_span: Option<Span>,\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for GeneratorInteriorTypeCause<'tcx> {\n+        ty, span, scope_span\n+    }\n+}\n+\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to."}, {"sha": "c947d552a01a7cc0608bf289fa181bab3169faeb", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=8e67180c526720262c03adbd8fd4d7ca71212f41", "patch": "@@ -123,13 +123,6 @@ pub fn resolve_interior<'a, 'tcx>(\n     // Sort types by insertion order\n     types.sort_by_key(|t| t.1);\n \n-    // Store the generator types and spans into the tables for this generator.\n-    let interior_types = types.iter().cloned().map(|t| t.0).collect::<Vec<_>>();\n-    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n-\n-    // Extract type components\n-    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n-\n     // The types in the generator interior contain lifetimes local to the generator itself,\n     // which should not be exposed outside of the generator. Therefore, we replace these\n     // lifetimes with existentially-bound lifetimes, which reflect the exact value of the\n@@ -139,18 +132,29 @@ pub fn resolve_interior<'a, 'tcx>(\n     // if a Sync generator contains an &'\u03b1 T, we need to check whether &'\u03b1 T: Sync),\n     // so knowledge of the exact relationships between them isn't particularly important.\n \n-    debug!(\"types in generator {:?}, span = {:?}\", type_list, body.value.span);\n+    debug!(\n+        \"types in generator {:?}, span = {:?}\",\n+        types.iter().map(|t| (t.0).ty).collect::<Vec<_>>(),\n+        body.value.span,\n+    );\n \n     // Replace all regions inside the generator interior with late bound regions\n     // Note that each region slot in the types gets a new fresh late bound region,\n     // which means that none of the regions inside relate to any other, even if\n     // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n-    let type_list = fcx.tcx.fold_regions(&type_list, &mut false, |_, current_depth| {\n+    let types = fcx.tcx.fold_regions(&types, &mut false, |_, current_depth| {\n         counter += 1;\n         fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n     });\n \n+    // Store the generator types and spans into the tables for this generator.\n+    let interior_types = types.iter().map(|t| t.0.clone()).collect::<Vec<_>>();\n+    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n+\n+    // Extract type components\n+    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n+\n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n \n     debug!(\"types in generator after region replacement {:?}, span = {:?}\","}, {"sha": "af20bc5bf9a2b1889560d828e046357d65fba5e3", "filename": "src/test/ui/async-await/issues/issue-64964.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e67180c526720262c03adbd8fd4d7ca71212f41/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs?ref=8e67180c526720262c03adbd8fd4d7ca71212f41", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// compile-flags: -Z query-dep-graph\n+// edition:2018\n+\n+// Regression test for ICE related to `await`ing in a method. (#64964)\n+\n+struct Body;\n+impl Body {\n+    async fn next(&mut self) {\n+        async {}.await\n+    }\n+}\n+\n+// Another reproduction: `await`ing with a variable from for-loop.\n+\n+async fn bar() {\n+    for x in 0..10 {\n+        async { Some(x) }.await.unwrap();\n+    }\n+}\n+\n+fn main() {}"}]}