{"sha": "74bb5e07eeb1e70916f57f7809acb19375cd71a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YmI1ZTA3ZWViMWU3MDkxNmY1N2Y3ODA5YWNiMTkzNzVjZDcxYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T08:07:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-24T08:07:58Z"}, "message": "Auto merge of #4948 - lzutao:rustup-67538, r=phansch\n\nrustup \"Add span information to `ExprKind::Assign`\"\n\ncc https://github.com/rust-lang/rust/pull/67538\nchangelog: none", "tree": {"sha": "0883bcc8c9f06ebdfaf0844c06af446f9bd2fc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0883bcc8c9f06ebdfaf0844c06af446f9bd2fc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74bb5e07eeb1e70916f57f7809acb19375cd71a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74bb5e07eeb1e70916f57f7809acb19375cd71a5", "html_url": "https://github.com/rust-lang/rust/commit/74bb5e07eeb1e70916f57f7809acb19375cd71a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74bb5e07eeb1e70916f57f7809acb19375cd71a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b032571523a14dbd23710d7fe08cb7382ea895", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b032571523a14dbd23710d7fe08cb7382ea895", "html_url": "https://github.com/rust-lang/rust/commit/82b032571523a14dbd23710d7fe08cb7382ea895"}, {"sha": "652666b288b88da76328de0dad27fc62c57b2a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/652666b288b88da76328de0dad27fc62c57b2a17", "html_url": "https://github.com/rust-lang/rust/commit/652666b288b88da76328de0dad27fc62c57b2a17"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "1daaa6662bbc03527faa855dd207078b95f9f800", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                     }\n                 }\n             },\n-            hir::ExprKind::Assign(assignee, e) => {\n+            hir::ExprKind::Assign(assignee, e, _) => {\n                 if let hir::ExprKind::Binary(op, l, r) = &e.kind {\n                     #[allow(clippy::cognitive_complexity)]\n                     let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {"}, {"sha": "7bf37f9d479d348a4c4c6f9df2d4c4bd312a0918", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // Find a write to a local variable.\n         match expr.kind {\n-            ExprKind::Assign(ref lhs, _) | ExprKind::AssignOp(_, ref lhs, _) => {\n+            ExprKind::Assign(ref lhs, ..) | ExprKind::AssignOp(_, ref lhs, _) => {\n                 if let ExprKind::Path(ref qpath) = lhs.kind {\n                     if let QPath::Resolved(_, ref path) = *qpath {\n                         if path.segments.len() == 1 {\n@@ -224,7 +224,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> St\n         | ExprKind::Tup(_)\n         | ExprKind::MethodCall(..)\n         | ExprKind::Call(_, _)\n-        | ExprKind::Assign(_, _)\n+        | ExprKind::Assign(..)\n         | ExprKind::Index(_, _)\n         | ExprKind::Repeat(_, _)\n         | ExprKind::Struct(_, _, _) => {\n@@ -345,7 +345,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n /// Returns `true` if `expr` is the LHS of an assignment, like `expr = ...`.\n fn is_in_assignment_position(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     if let Some(parent) = get_parent_expr(cx, expr) {\n-        if let ExprKind::Assign(ref lhs, _) = parent.kind {\n+        if let ExprKind::Assign(ref lhs, ..) = parent.kind {\n             return lhs.hir_id == expr.hir_id;\n         }\n     }"}, {"sha": "d31b15cba9e299a98e5e38549ac250897ec77fbf", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -131,7 +131,7 @@ impl EarlyLintPass for Formatting {\n \n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n-    if let ExprKind::Assign(ref lhs, ref rhs) = expr.kind {\n+    if let ExprKind::Assign(ref lhs, ref rhs, _) = expr.kind {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion() {\n             let eq_span = lhs.span.between(rhs.span);\n             if let ExprKind::Unary(op, ref sub_rhs) = rhs.kind {"}, {"sha": "b0b82d981761d4cb1e0c570f0897ffd07bfc0125", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -615,7 +615,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mut, ref target) => {\n+            Assign(ref target, ..) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mut, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "264982d5e5aff3a04943221d156ee0ee69f64c05", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -169,7 +169,7 @@ fn check_assign<'a, 'tcx>(\n         if block.expr.is_none();\n         if let Some(expr) = block.stmts.iter().last();\n         if let hir::StmtKind::Semi(ref expr) = expr.kind;\n-        if let hir::ExprKind::Assign(ref var, ref value) = expr.kind;\n+        if let hir::ExprKind::Assign(ref var, ref value, _) = expr.kind;\n         if let hir::ExprKind::Path(ref qpath) = var.kind;\n         if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n         if decl == local_id;"}, {"sha": "1127edd0896ebddb29bf61c3fa1e390427513e4d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -682,7 +682,7 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         },\n         ExprKind::Call(ref e, ref es) => never_loop_expr_all(&mut once(&**e).chain(es.iter()), main_loop_id),\n         ExprKind::Binary(_, ref e1, ref e2)\n-        | ExprKind::Assign(ref e1, ref e2)\n+        | ExprKind::Assign(ref e1, ref e2, _)\n         | ExprKind::AssignOp(_, ref e1, ref e2)\n         | ExprKind::Index(ref e1, ref e2) => never_loop_expr_all(&mut [&**e1, &**e2].iter().cloned(), main_loop_id),\n         ExprKind::Loop(ref b, _, _) => {\n@@ -887,7 +887,7 @@ fn get_indexed_assignments<'a, 'tcx>(\n         e: &Expr,\n         var: HirId,\n     ) -> Option<(FixedOffsetVar, FixedOffsetVar)> {\n-        if let ExprKind::Assign(ref lhs, ref rhs) = e.kind {\n+        if let ExprKind::Assign(ref lhs, ref rhs, _) = e.kind {\n             match (\n                 get_fixed_offset_var(cx, lhs, var),\n                 fetch_cloned_fixed_offset_var(cx, rhs, var),\n@@ -1861,7 +1861,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n \n         let old = self.prefer_mutable;\n         match expr.kind {\n-            ExprKind::AssignOp(_, ref lhs, ref rhs) | ExprKind::Assign(ref lhs, ref rhs) => {\n+            ExprKind::AssignOp(_, ref lhs, ref rhs) | ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 self.prefer_mutable = true;\n                 self.visit_expr(lhs);\n                 self.prefer_mutable = false;\n@@ -2083,7 +2083,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                             }\n                         }\n                     },\n-                    ExprKind::Assign(ref lhs, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n+                    ExprKind::Assign(ref lhs, _, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n                         *state = VarState::DontWarn\n                     },\n@@ -2161,7 +2161,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                     ExprKind::AssignOp(_, ref lhs, _) if lhs.hir_id == expr.hir_id => {\n                         self.state = VarState::DontWarn;\n                     },\n-                    ExprKind::Assign(ref lhs, ref rhs) if lhs.hir_id == expr.hir_id => {\n+                    ExprKind::Assign(ref lhs, ref rhs, _) if lhs.hir_id == expr.hir_id => {\n                         self.state = if is_integer_const(&self.cx, rhs, 0) && self.depth == 0 {\n                             VarState::Warn\n                         } else {\n@@ -2303,7 +2303,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n             return;\n         }\n         match expr.kind {\n-            ExprKind::Assign(ref path, _) | ExprKind::AssignOp(_, ref path, _) => {\n+            ExprKind::Assign(ref path, _, _) | ExprKind::AssignOp(_, ref path, _) => {\n                 if match_var(path, self.iterator) {\n                     self.nesting = RuledOut;\n                 }"}, {"sha": "494f04d4bcd310a6f8167d8c60cbfc98f2f28845", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -590,7 +590,9 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     if let Some(parent) = get_parent_expr(cx, expr) {\n         match parent.kind {\n-            ExprKind::Assign(_, ref rhs) | ExprKind::AssignOp(_, _, ref rhs) => SpanlessEq::new(cx).eq_expr(rhs, expr),\n+            ExprKind::Assign(_, ref rhs, _) | ExprKind::AssignOp(_, _, ref rhs) => {\n+                SpanlessEq::new(cx).eq_expr(rhs, expr)\n+            },\n             _ => is_used(cx, parent),\n         }\n     } else {"}, {"sha": "f78e35948626ad5dfde69fedb0f10b9fe2c57918", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -451,7 +451,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 if let ExprKind::Closure(..) = t.kind;\n                 if let PatKind::Ident(_, ident, _) = local.pat.kind;\n                 if let StmtKind::Semi(ref second) = w[1].kind;\n-                if let ExprKind::Assign(_, ref call) = second.kind;\n+                if let ExprKind::Assign(_, ref call, _) = second.kind;\n                 if let ExprKind::Call(ref closure, _) = call.kind;\n                 if let ExprKind::Path(_, ref path) = closure.kind;\n                 then {"}, {"sha": "093b99e17f177d9aa1c4d365fc590ee6e41c6f2a", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SlowVectorInit {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // Matches initialization on reassignements. For example: `vec = Vec::with_capacity(100)`\n         if_chain! {\n-            if let ExprKind::Assign(ref left, ref right) = expr.kind;\n+            if let ExprKind::Assign(ref left, ref right, _) = expr.kind;\n \n             // Extract variable name\n             if let ExprKind::Path(QPath::Resolved(_, ref path)) = left.kind;"}, {"sha": "7b1be6f8c7cf5847242287df6f2fe717d494b69e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n                 if !is_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n                     let parent = get_parent_expr(cx, e);\n                     if let Some(p) = parent {\n-                        if let ExprKind::Assign(ref target, _) = p.kind {\n+                        if let ExprKind::Assign(ref target, _, _) = p.kind {\n                             // avoid duplicate matches\n                             if SpanlessEq::new(cx).eq_expr(target, left) {\n                                 return;\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n                     \"you added something to a string. Consider using `String::push_str()` instead\",\n                 );\n             }\n-        } else if let ExprKind::Assign(ref target, ref src) = e.kind {\n+        } else if let ExprKind::Assign(ref target, ref src, _) = e.kind {\n             if is_string(cx, target) && is_add(cx, src, target) {\n                 span_lint(\n                     cx,"}, {"sha": "58b3f558e9c5d1762ee2d9de011ac9c05ad479f9", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -86,11 +86,11 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n \n             // foo() = bar();\n             if let StmtKind::Semi(ref first) = w[1].kind;\n-            if let ExprKind::Assign(ref lhs1, ref rhs1) = first.kind;\n+            if let ExprKind::Assign(ref lhs1, ref rhs1, _) = first.kind;\n \n             // bar() = t;\n             if let StmtKind::Semi(ref second) = w[2].kind;\n-            if let ExprKind::Assign(ref lhs2, ref rhs2) = second.kind;\n+            if let ExprKind::Assign(ref lhs2, ref rhs2, _) = second.kind;\n             if let ExprKind::Path(QPath::Resolved(None, ref rhs2)) = rhs2.kind;\n             if rhs2.segments.len() == 1;\n \n@@ -222,8 +222,8 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n             if let StmtKind::Semi(ref first) = w[0].kind;\n             if let StmtKind::Semi(ref second) = w[1].kind;\n             if !differing_macro_contexts(first.span, second.span);\n-            if let ExprKind::Assign(ref lhs0, ref rhs0) = first.kind;\n-            if let ExprKind::Assign(ref lhs1, ref rhs1) = second.kind;\n+            if let ExprKind::Assign(ref lhs0, ref rhs0, _) = first.kind;\n+            if let ExprKind::Assign(ref lhs1, ref rhs1, _) = second.kind;\n             if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs0, rhs1);\n             if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, rhs0);\n             then {"}, {"sha": "4b0c4abc44e36f2f2aa721c17ff6f15ab414ecb9", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(TemporaryAssignment => [TEMPORARY_ASSIGNMENT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TemporaryAssignment {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::Assign(target, _) = &expr.kind {\n+        if let ExprKind::Assign(target, ..) = &expr.kind {\n             let mut base = target;\n             while let ExprKind::Field(f, _) | ExprKind::Index(f, _) = &base.kind {\n                 base = f;"}, {"sha": "fe3bcfd2cc9b7dcf1171504ffffac54dc5e6bec8", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -380,10 +380,13 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = block_pat;\n                 self.visit_block(block);\n             },\n-            ExprKind::Assign(ref target, ref value) => {\n+            ExprKind::Assign(ref target, ref value, _) => {\n                 let target_pat = self.next(\"target\");\n                 let value_pat = self.next(\"value\");\n-                println!(\"Assign(ref {}, ref {}) = {};\", target_pat, value_pat, current);\n+                println!(\n+                    \"Assign(ref {}, ref {}, ref _span) = {};\",\n+                    target_pat, value_pat, current\n+                );\n                 self.current = target_pat;\n                 self.visit_expr(target);\n                 self.current = value_pat;"}, {"sha": "a32614c8e07bd4a7ded8186c26b688a987ac9975", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n                 both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n             },\n-            (&ExprKind::Assign(ref ll, ref lr), &ExprKind::Assign(ref rl, ref rr)) => {\n+            (&ExprKind::Assign(ref ll, ref lr, _), &ExprKind::Assign(ref rl, ref rr, _)) => {\n                 self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n             },\n             (&ExprKind::AssignOp(ref lo, ref ll, ref lr), &ExprKind::AssignOp(ref ro, ref rl, ref rr)) => {\n@@ -412,7 +412,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n             },\n-            ExprKind::Assign(ref l, ref r) => {\n+            ExprKind::Assign(ref l, ref r, _) => {\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },"}, {"sha": "ca933c65d6f5538b95d42cef4a4e976bb1629e91", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -229,7 +229,7 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n         hir::ExprKind::Block(_, _) => {\n             println!(\"{}Block\", ind);\n         },\n-        hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+        hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             println!(\"{}Assign\", ind);\n             println!(\"{}lhs:\", ind);\n             print_expr(cx, lhs, indent + 1);"}, {"sha": "57ccd5ea190411872f777c997bafaf6a7f15a00c", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -395,7 +395,7 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n                 }\n                 idx += 1;\n             },\n-            ExprKind::Assign(lhs, rhs) => {\n+            ExprKind::Assign(lhs, rhs, _) => {\n                 if let ExprKind::Lit(_) = rhs.kind {\n                     if let ExprKind::Path(_, p) = &lhs.kind {\n                         let mut all_simple = true;"}, {"sha": "81ede955347d73b57d16791eddd3f1e489e2497a", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -26,7 +26,7 @@ if_chain! {\n     if let ExprKind::Path(ref path3) = inner.kind;\n     if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;\n-    if let ExprKind::Assign(ref target, ref value) = arms1[0].body.kind;\n+    if let ExprKind::Assign(ref target, ref value, ref _span) = arms1[0].body.kind;\n     if let ExprKind::Path(ref path4) = target.kind;\n     if match_qpath(path4, &[\"__next\"]);\n     if let ExprKind::Path(ref path5) = value.kind;"}, {"sha": "a05cc7fee81ab82261f6665e0dc9defb1a82d4b5", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -41,8 +41,6 @@ fn generic<T>(t: T) -> T {\n     t\n }\n \n-// FIXME: Depends on the `const_transmute` and `const_fn` feature gates.\n-// In the future Clippy should be able to suggest this as const, too.\n fn sub(x: u32) -> usize {\n     unsafe { transmute(&x) }\n }"}, {"sha": "708e7e467b9a85cecb0760c7eb5e220563e55a82", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74bb5e07eeb1e70916f57f7809acb19375cd71a5/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=74bb5e07eeb1e70916f57f7809acb19375cd71a5", "patch": "@@ -50,12 +50,20 @@ LL | | }\n    | |_^\n \n error: this could be a const_fn\n-  --> $DIR/could_be_const.rs:65:9\n+  --> $DIR/could_be_const.rs:44:1\n+   |\n+LL | / fn sub(x: u32) -> usize {\n+LL | |     unsafe { transmute(&x) }\n+LL | | }\n+   | |_^\n+\n+error: this could be a const_fn\n+  --> $DIR/could_be_const.rs:63:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}