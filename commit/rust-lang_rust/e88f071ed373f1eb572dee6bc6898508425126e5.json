{"sha": "e88f071ed373f1eb572dee6bc6898508425126e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGYwNzFlZDM3M2YxZWI1NzJkZWU2YmM2ODk4NTA4NDI1MTI2ZTU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-10-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-09T08:33:49Z"}, "message": "Document sanitizers in unstable-book", "tree": {"sha": "9ddc621e47dfffb366dd82bdabd7a6db64c43cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ddc621e47dfffb366dd82bdabd7a6db64c43cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88f071ed373f1eb572dee6bc6898508425126e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88f071ed373f1eb572dee6bc6898508425126e5", "html_url": "https://github.com/rust-lang/rust/commit/e88f071ed373f1eb572dee6bc6898508425126e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88f071ed373f1eb572dee6bc6898508425126e5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae57259403957ce31760b1fe83ec55343155696f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae57259403957ce31760b1fe83ec55343155696f", "html_url": "https://github.com/rust-lang/rust/commit/ae57259403957ce31760b1fe83ec55343155696f"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "cbb90bd3bb3316512f357e24add4366dbb88c2ec", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/e88f071ed373f1eb572dee6bc6898508425126e5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/e88f071ed373f1eb572dee6bc6898508425126e5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=e88f071ed373f1eb572dee6bc6898508425126e5", "patch": "@@ -0,0 +1,163 @@\n+# `sanitizer`\n+\n+The tracking issue for this feature is: [#39699](https://github.com/rust-lang/rust/issues/39699).\n+\n+------------------------\n+\n+This feature allows for use of one of following sanitizers:\n+\n+* [AddressSanitizer][clang-asan] a faster memory error detector. Can\n+  detect out-of-bounds access to heap, stack, and globals, use after free, use\n+  after return, double free, invalid free, memory leaks.\n+* [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n+* [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n+* [ThreadSanitizer][clang-tsan] a fast data race detector.\n+\n+To enable a sanitizer compile with `-Zsanitizer=...` option, where value is one\n+of `address`, `leak`, `memory` or `thread`.\n+\n+# Examples\n+\n+This sections show various issues that can be detected with sanitizers.  For\n+simplicity, the examples are prepared under assumption that optimization level\n+used is zero.\n+\n+## AddressSanitizer\n+\n+Stack buffer overflow:\n+\n+```shell\n+$ cat a.rs\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}\n+$ rustc -Zsanitizer=address a.rs\n+$ ./a\n+=================================================================\n+==10029==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcc15f43d0 at pc 0x55f77dc015c5 bp 0x7ffcc15f4390 sp 0x7ffcc15f4388\n+READ of size 4 at 0x7ffcc15f43d0 thread T0\n+    #0 0x55f77dc015c4 in a::main::hab3bd2a745c2d0ac (/tmp/a+0xa5c4)\n+    #1 0x55f77dc01cdb in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::haa8c76d1faa7b7ca (/tmp/a+0xacdb)\n+    #2 0x55f77dc90f02 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hfeb9a1aef9ac820d /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/rt.rs:48:12\n+    #3 0x55f77dc90f02 in std::panicking::try::do_call::h12f0919717b8e0a6 /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panicking.rs:288:39\n+    #4 0x55f77dc926c9 in __rust_maybe_catch_panic /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libpanic_unwind/lib.rs:80:7\n+    #5 0x55f77dc9197c in std::panicking::try::h413b21cdcd6cfd86 /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panicking.rs:267:12\n+    #6 0x55f77dc9197c in std::panic::catch_unwind::hc5cc8ef2fd73424d /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panic.rs:396:8\n+    #7 0x55f77dc9197c in std::rt::lang_start_internal::h2039f418ab92218f /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/rt.rs:47:24\n+    #8 0x55f77dc01c61 in std::rt::lang_start::ha905d28f6b61d691 (/tmp/a+0xac61)\n+    #9 0x55f77dc0163a in main (/tmp/a+0xa63a)\n+    #10 0x7f9b3cf5bbba in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x26bba)\n+    #11 0x55f77dc01289 in _start (/tmp/a+0xa289)\n+\n+Address 0x7ffcc15f43d0 is located in stack of thread T0 at offset 48 in frame\n+    #0 0x55f77dc0135f in a::main::hab3bd2a745c2d0ac (/tmp/a+0xa35f)\n+\n+  This frame has 1 object(s):\n+    [32, 48) 'xs' <== Memory access at offset 48 overflows this variable\n+HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n+      (longjmp and C++ exceptions *are* supported)\n+SUMMARY: AddressSanitizer: stack-buffer-overflow (/tmp/a+0xa5c4) in a::main::hab3bd2a745c2d0ac\n+Shadow bytes around the buggy address:\n+  0x1000182b6820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+=>0x1000182b6870: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n+  0x1000182b6880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+Shadow byte legend (one shadow byte represents 8 application bytes):\n+  Addressable:           00\n+  Partially addressable: 01 02 03 04 05 06 07 \n+  Heap left redzone:       fa\n+  Freed heap region:       fd\n+  Stack left redzone:      f1\n+  Stack mid redzone:       f2\n+  Stack right redzone:     f3\n+  Stack after return:      f5\n+  Stack use after scope:   f8\n+  Global redzone:          f9\n+  Global init order:       f6\n+  Poisoned by user:        f7\n+  Container overflow:      fc\n+  Array cookie:            ac\n+  Intra object redzone:    bb\n+  ASan internal:           fe\n+  Left alloca redzone:     ca\n+  Right alloca redzone:    cb\n+  Shadow gap:              cc\n+==10029==ABORTING\n+```\n+\n+## MemorySanitizer\n+\n+Use of uninitialized memory. Note that we are using `-Zbuild-std` to instrument\n+standard library, and passing `-msan-track-origins=2` to the LLVM to track\n+origins of uninitialized memory:\n+\n+```shell\n+$ cat src/main.rs\n+use std::mem::MaybeUninit;\n+\n+fn main() {\n+    unsafe {\n+        let a = MaybeUninit::<[usize; 4]>::uninit();\n+        let a = a.assume_init();\n+        println!(\"{}\", a[2]);\n+    }\n+}\n+\n+$ env RUSTFLAGS=\"-Zsanitizer=memory -Cllvm-args=-msan-track-origins=2\" cargo -Zbuild-std run --target x86_64-unknown-linux-gnu\n+==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n+    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n+...\n+  Uninitialized value was stored to memory at\n+    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n+    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n+\n+  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n+    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n+```\n+\n+\n+# Instrumentation of external dependencies and std\n+\n+The sanitizers to varying degrees work correctly with partially instrumented\n+code. On the one extreme is LeakSanitizer that doesn't use any compile time\n+instrumentation, on the other is MemorySanitizer that requires that all program\n+code to be instrumented (failing to achieve that will inevitably result in\n+false positives).\n+\n+It is strongly recommended to combine sanitizers with recompiled and\n+instrumented standard library, for example using [cargo `-Zbuild-std`\n+functionality][build-std].\n+\n+[build-std]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n+\n+# Build scripts and procedural macros\n+\n+Use of sanitizers together with build scripts and procedural macros is\n+technically possible, but in almost all cases it would be best avoided.  This\n+is especially true for procedural macros which would require an instrumented\n+version of rustc.\n+\n+In more practical terms when using cargo always remember to pass `--target`\n+flag, so that rustflags will not be applied to build scripts and procedural\n+macros.\n+\n+# Additional Information\n+\n+* [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n+* [AddressSanitizer in Clang][clang-asan]\n+* [LeakSanitizer in Clang][clang-lsan]\n+* [MemorySanitizer in Clang][clang-msan]\n+* [ThreadSanitizer in Clang][clang-tsan]\n+\n+[clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n+[clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n+[clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n+[clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}]}