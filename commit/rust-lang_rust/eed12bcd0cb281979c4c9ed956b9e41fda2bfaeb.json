{"sha": "eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDEyYmNkMGNiMjgxOTc5YzRjOWVkOTU2YjllNDFmZGEyYmZhZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T13:40:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T13:40:58Z"}, "message": "Auto merge of #68635 - JohnTitor:rollup-jsc34ac, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #67722 (Minor: note how Any is an unsafe trait in SAFETY comments)\n - #68586 (Make conflicting_repr_hints a deny-by-default c-future-compat lint)\n - #68598 (Fix null synthetic_implementors error)\n - #68603 (Changelog: Demonstrate final build-override syntax)\n - #68609 (Set lld flavor for MSVC to link.exe)\n - #68611 (Correct ICE caused by macros generating invalid spans.)\n - #68627 (Document that write_all will not call write if given an empty buffer)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fdf73820fb17548b3ae1a65849819d42d1783dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf73820fb17548b3ae1a65849819d42d1783dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "html_url": "https://github.com/rust-lang/rust/commit/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb368491551a77d77a48446d4ee88b35490c565", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb368491551a77d77a48446d4ee88b35490c565", "html_url": "https://github.com/rust-lang/rust/commit/edb368491551a77d77a48446d4ee88b35490c565"}, {"sha": "50df7880a77912702de51f454e58ae65a48d9e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/50df7880a77912702de51f454e58ae65a48d9e29", "html_url": "https://github.com/rust-lang/rust/commit/50df7880a77912702de51f454e58ae65a48d9e29"}], "stats": {"total": 139, "additions": 98, "deletions": 41}, "files": [{"sha": "10e485c1a40d56f4c4ea92a33fbc0f1ec518b40e", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -62,9 +62,9 @@ Cargo\n - [Cargo.lock now uses a more git friendly format that should help to reduce\n   merge conflicts.][cargo/7579]\n - [You can now override specific dependencies's build settings][cargo/7591] E.g.\n-  `[profile.dev.overrides.image] opt-level = 2` sets the `image` crate's\n+  `[profile.dev.package.image] opt-level = 2` sets the `image` crate's\n   optimisation level to `2` for debug builds. You can also use\n-  `[profile.<profile>.build_overrides]` to override build scripts and\n+  `[profile.<profile>.build-override]` to override build scripts and\n   their dependencies.\n \n Misc"}, {"sha": "97ef513cbcc63d14ad7bbca205f04f38f20a3213", "filename": "src/libcore/any.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -194,7 +194,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&*(self as *const dyn Any as *const T)) }\n         } else {\n             None\n@@ -228,7 +230,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&mut *(self as *mut dyn Any as *mut T)) }\n         } else {\n             None"}, {"sha": "03fa426460dab2f8bb7b301fd794550d0cf5ba5b", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem, TraitItemKind};\n-use rustc_session::lint::builtin::UNUSED_ATTRIBUTES;\n+use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast::Attribute;\n@@ -196,7 +196,7 @@ impl CheckAttrVisitor<'tcx> {\n             self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n-        self.check_repr(attrs, span, target, item);\n+        self.check_repr(attrs, span, target, item, hir_id);\n         self.check_used(attrs, target);\n     }\n \n@@ -357,6 +357,7 @@ impl CheckAttrVisitor<'tcx> {\n         span: &Span,\n         target: Target,\n         item: Option<&Item<'_>>,\n+        hir_id: HirId,\n     ) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n         // ```\n@@ -446,13 +447,15 @@ impl CheckAttrVisitor<'tcx> {\n             || (is_simd && is_c)\n             || (int_reprs == 1 && is_c && item.map_or(false, |item| is_c_like_enum(item)))\n         {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                hint_spans.collect::<Vec<Span>>(),\n-                E0566,\n-                \"conflicting representation hints\",\n-            )\n-            .emit();\n+            self.tcx\n+                .struct_span_lint_hir(\n+                    CONFLICTING_REPR_HINTS,\n+                    hir_id,\n+                    hint_spans.collect::<Vec<Span>>(),\n+                    \"conflicting representation hints\",\n+                )\n+                .code(rustc_errors::error_code!(E0566))\n+                .emit();\n         }\n     }\n "}, {"sha": "7ef623807d03bb2397b679118e841560aa15f52f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -19,6 +19,7 @@ use crate::{\n     pluralize, CodeSuggestion, Diagnostic, DiagnosticId, Level, SubDiagnostic, SuggestionStyle,\n };\n \n+use log::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -2108,7 +2109,13 @@ impl<'a> Drop for WritableDst<'a> {\n /// Whether the original and suggested code are visually similar enough to warrant extra wording.\n pub fn is_case_difference(sm: &SourceMap, suggested: &str, sp: Span) -> bool {\n     // FIXME: this should probably be extended to also account for `FO0` \u2192 `FOO` and unicode.\n-    let found = sm.span_to_snippet(sp).unwrap();\n+    let found = match sm.span_to_snippet(sp) {\n+        Ok(snippet) => snippet,\n+        Err(e) => {\n+            warn!(\"Invalid span {:?}. Err={:?}\", sp, e);\n+            return false;\n+        }\n+    };\n     let ascii_confusables = &['c', 'f', 'i', 'k', 'o', 's', 'u', 'v', 'w', 'x', 'y', 'z'];\n     // All the chars that differ in capitalization are confusable (above):\n     let confusable = found"}, {"sha": "c326061100b063adbf0792061bb5a7b816976cd6", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -18,6 +18,16 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    pub CONFLICTING_REPR_HINTS,\n+    Deny,\n+    \"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #68585 <https://github.com/rust-lang/rust/issues/68585>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     pub META_VARIABLE_MISUSE,\n     Allow,\n@@ -520,6 +530,7 @@ declare_lint_pass! {\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n         ILL_FORMED_ATTRIBUTE_INPUT,\n+        CONFLICTING_REPR_HINTS,\n         META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,"}, {"sha": "52b166df93996c55d470ccc24a4b554be4f96266", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -1,9 +1,11 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let pre_args = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n     let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Msvc, vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()]);\n+    args.insert(LinkerFlavor::Msvc, pre_args.clone());\n+    args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_args);\n \n     TargetOptions {\n         function_sections: true,\n@@ -21,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         // language packs, and avoid generating Non-UTF-8 error\n         // messages if a link error occurred.\n         link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n+        lld_flavor: LldFlavor::Link,\n         pre_link_args: args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,"}, {"sha": "44fd8b929f3a3105bb87a55569a05079c21a9871", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -1895,21 +1895,23 @@ function getSearchElement() {\n         var implementors = document.getElementById(\"implementors-list\");\n         var synthetic_implementors = document.getElementById(\"synthetic-implementors-list\");\n \n-        // This `inlined_types` variable is used to avoid having the same implementation showing\n-        // up twice. For example \"String\" in the \"Sync\" doc page.\n-        //\n-        // By the way, this is only used by and useful for traits implemented automatically (like\n-        // \"Send\" and \"Sync\").\n-        var inlined_types = new Set();\n-        onEachLazy(synthetic_implementors.getElementsByClassName(\"impl\"), function(el) {\n-            var aliases = el.getAttribute(\"aliases\");\n-            if (!aliases) {\n-                return;\n-            }\n-            aliases.split(\",\").forEach(function(alias) {\n-                inlined_types.add(alias);\n+        if (synthetic_implementors) {\n+            // This `inlined_types` variable is used to avoid having the same implementation\n+            // showing up twice. For example \"String\" in the \"Sync\" doc page.\n+            //\n+            // By the way, this is only used by and useful for traits implemented automatically\n+            // (like \"Send\" and \"Sync\").\n+            var inlined_types = new Set();\n+            onEachLazy(synthetic_implementors.getElementsByClassName(\"impl\"), function(el) {\n+                var aliases = el.getAttribute(\"aliases\");\n+                if (!aliases) {\n+                    return;\n+                }\n+                aliases.split(\",\").forEach(function(alias) {\n+                    inlined_types.add(alias);\n+                });\n             });\n-        });\n+        }\n \n         var libs = Object.getOwnPropertyNames(imp);\n         var llength = libs.length;"}, {"sha": "67b382c7a845e81def77162b2b7039bdd5bf1272", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -1327,6 +1327,8 @@ pub trait Write {\n     /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n+    /// If the buffer contains no data, this will never call [`write`].\n+    ///\n     /// # Errors\n     ///\n     /// This function will return the first error of"}, {"sha": "09dade20992ba15234337205d6345200214e9b1a", "filename": "src/test/ui/conflicting-repr-hints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -11,11 +11,13 @@ enum B {\n }\n \n #[repr(C, u64)] //~ ERROR conflicting representation hints\n+//~^ WARN this was previously accepted\n enum C {\n     C,\n }\n \n #[repr(u32, u64)] //~ ERROR conflicting representation hints\n+//~^ WARN this was previously accepted\n enum D {\n     D,\n }"}, {"sha": "43b76bf649778ec84706635c4796ca4caac24ed9", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -3,45 +3,52 @@ error[E0566]: conflicting representation hints\n    |\n LL | #[repr(C, u64)]\n    |        ^  ^^^\n+   |\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n \n error[E0566]: conflicting representation hints\n-  --> $DIR/conflicting-repr-hints.rs:18:8\n+  --> $DIR/conflicting-repr-hints.rs:19:8\n    |\n LL | #[repr(u32, u64)]\n    |        ^^^  ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:27:1\n+  --> $DIR/conflicting-repr-hints.rs:29:1\n    |\n LL | struct F(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:31:1\n+  --> $DIR/conflicting-repr-hints.rs:33:1\n    |\n LL | struct G(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:35:1\n+  --> $DIR/conflicting-repr-hints.rs:37:1\n    |\n LL | struct H(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:38:1\n+  --> $DIR/conflicting-repr-hints.rs:40:1\n    |\n LL | struct I(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:42:1\n+  --> $DIR/conflicting-repr-hints.rs:44:1\n    |\n LL | struct J(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:48:1\n+  --> $DIR/conflicting-repr-hints.rs:50:1\n    |\n LL | / union X {\n LL | |\n@@ -50,7 +57,7 @@ LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:55:1\n+  --> $DIR/conflicting-repr-hints.rs:57:1\n    |\n LL | / union Y {\n LL | |\n@@ -59,7 +66,7 @@ LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:62:1\n+  --> $DIR/conflicting-repr-hints.rs:64:1\n    |\n LL | / union Z {\n LL | |"}, {"sha": "c527404f57270c732d6c5e17ab5cc6f02d43180d", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -2,6 +2,7 @@\n struct Foo(u64, u64);\n \n #[repr(C)] //~ ERROR conflicting representation hints\n+//~^ WARN this was previously accepted\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Bar(u64, u64);\n "}, {"sha": "013bad069d8cd3c3e89e1d415a6a38032e62578e", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -8,7 +8,7 @@ LL | #[repr(simd)]\n    = help: add `#![feature(repr_simd)]` to the crate attributes to enable\n \n error[E0658]: SIMD types are experimental and possibly buggy\n-  --> $DIR/feature-gate-repr-simd.rs:5:1\n+  --> $DIR/feature-gate-repr-simd.rs:6:1\n    |\n LL | #[repr(simd)]\n    | ^^^^^^^^^^^^^\n@@ -21,8 +21,13 @@ error[E0566]: conflicting representation hints\n    |\n LL | #[repr(C)]\n    |        ^\n+LL |\n LL | #[repr(simd)]\n    |        ^^^^\n+   |\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c5d37feb1447fd3a8e2f900a90f45794b77c229a", "filename": "src/test/ui/issues/issue-47094.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47094.rs?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -1,10 +1,12 @@\n #[repr(C, u8)] //~ ERROR conflicting representation hints\n+//~^ WARN this was previously accepted\n enum Foo {\n     A,\n     B,\n }\n \n #[repr(C)] //~ ERROR conflicting representation hints\n+//~^ WARN this was previously accepted\n #[repr(u8)]\n enum Bar {\n     A,"}, {"sha": "e323ce660290c68d9f1184e212d566c554504484", "filename": "src/test/ui/issues/issue-47094.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr?ref=eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "patch": "@@ -3,14 +3,22 @@ error[E0566]: conflicting representation hints\n    |\n LL | #[repr(C, u8)]\n    |        ^  ^^\n+   |\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n \n error[E0566]: conflicting representation hints\n-  --> $DIR/issue-47094.rs:7:8\n+  --> $DIR/issue-47094.rs:8:8\n    |\n LL | #[repr(C)]\n    |        ^\n+LL |\n LL | #[repr(u8)]\n    |        ^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n \n error: aborting due to 2 previous errors\n "}]}