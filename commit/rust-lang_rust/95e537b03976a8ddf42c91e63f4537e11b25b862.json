{"sha": "95e537b03976a8ddf42c91e63f4537e11b25b862", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTUzN2IwMzk3NmE4ZGRmNDJjOTFlNjNmNDUzN2UxMWIyNWI4NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T09:43:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-18T09:43:42Z"}, "message": "Auto merge of #3987 - phansch:rustfix_option_map_or_none, r=flip1995\n\nAdd run-rustfix for option_map_or_none lint\n\n* Extracts `option_map_or_none` tests into separate file\n * Adds `// run-rustfix` to `tests/ui/option_map_or_none.rs`\n\ncc #3630", "tree": {"sha": "edaf45fece855f66bed79fed09c3729487fe378b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edaf45fece855f66bed79fed09c3729487fe378b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e537b03976a8ddf42c91e63f4537e11b25b862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e537b03976a8ddf42c91e63f4537e11b25b862", "html_url": "https://github.com/rust-lang/rust/commit/95e537b03976a8ddf42c91e63f4537e11b25b862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e537b03976a8ddf42c91e63f4537e11b25b862/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b834dbb2d5924c947c3cbe47c863ea5b7470e567", "url": "https://api.github.com/repos/rust-lang/rust/commits/b834dbb2d5924c947c3cbe47c863ea5b7470e567", "html_url": "https://github.com/rust-lang/rust/commit/b834dbb2d5924c947c3cbe47c863ea5b7470e567"}, {"sha": "0f69aac3d98dd37911a2f6ba4be5aaf1c200864b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f69aac3d98dd37911a2f6ba4be5aaf1c200864b", "html_url": "https://github.com/rust-lang/rust/commit/0f69aac3d98dd37911a2f6ba4be5aaf1c200864b"}], "stats": {"total": 127, "additions": 73, "deletions": 54}, "files": [{"sha": "3a8aedcd65980492ef0b6d3f5be051cf26a7d76f", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=95e537b03976a8ddf42c91e63f4537e11b25b862", "patch": "@@ -148,7 +148,6 @@ impl Mul<T> for T {\n /// Checks implementation of the following lints:\n /// * `OPTION_MAP_UNWRAP_OR`\n /// * `OPTION_MAP_UNWRAP_OR_ELSE`\n-/// * `OPTION_MAP_OR_NONE`\n #[rustfmt::skip]\n fn option_methods() {\n     let opt = Some(1);\n@@ -204,15 +203,6 @@ fn option_methods() {\n     // Macro case.\n     // Should not lint.\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n-\n-    // Check `OPTION_MAP_OR_NONE`.\n-    // Single line case.\n-    let _ = opt.map_or(None, |x| Some(x + 1));\n-    // Multi-line case.\n-    let _ = opt.map_or(None, |x| {\n-                        Some(x + 1)\n-                       }\n-                );\n }\n \n /// Checks implementation of `FILTER_NEXT` lint."}, {"sha": "ba93be5f4623ba31bad9c0497d104a6952a2beb9", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=95e537b03976a8ddf42c91e63f4537e11b25b862", "patch": "@@ -29,7 +29,7 @@ LL |     fn new(self) -> Self {\n    |            ^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:158:13\n+  --> $DIR/methods.rs:157:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,7 +41,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:162:13\n+  --> $DIR/methods.rs:161:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -51,7 +51,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:166:13\n+  --> $DIR/methods.rs:165:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -61,15 +61,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:171:13\n+  --> $DIR/methods.rs:170:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:173:13\n+  --> $DIR/methods.rs:172:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -79,7 +79,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:177:13\n+  --> $DIR/methods.rs:176:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -90,15 +90,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:187:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:192:13\n+  --> $DIR/methods.rs:191:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:196:13\n+  --> $DIR/methods.rs:195:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:200:13\n+  --> $DIR/methods.rs:199:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -129,32 +129,8 @@ LL | |                     0\n LL | |                 );\n    | |_________________^\n \n-error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:210:13\n-   |\n-LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n-   |\n-   = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n-\n-error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:212:13\n-   |\n-LL |       let _ = opt.map_or(None, |x| {\n-   |  _____________^\n-LL | |                         Some(x + 1)\n-LL | |                        }\n-LL | |                 );\n-   | |_________________^\n-help: try using and_then instead\n-   |\n-LL |     let _ = opt.and_then(|x| {\n-LL |                         Some(x + 1)\n-LL |                        });\n-   |\n-\n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:224:13\n+  --> $DIR/methods.rs:214:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +139,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:227:13\n+  --> $DIR/methods.rs:217:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -173,7 +149,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:243:13\n+  --> $DIR/methods.rs:233:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -182,7 +158,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:246:13\n+  --> $DIR/methods.rs:236:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -192,15 +168,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:252:13\n+  --> $DIR/methods.rs:242:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:255:13\n+  --> $DIR/methods.rs:245:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -210,15 +186,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:261:13\n+  --> $DIR/methods.rs:251:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:264:13\n+  --> $DIR/methods.rs:254:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -228,12 +204,12 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:279:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "e637f973c2ead8091fd04000cfa8b95d8485d8d0", "filename": "tests/ui/option_map_or_none.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.fixed?ref=95e537b03976a8ddf42c91e63f4537e11b25b862", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn main() {\n+    let opt = Some(1);\n+\n+    // Check `OPTION_MAP_OR_NONE`.\n+    // Single line case.\n+    let _ = opt.and_then(|x| Some(x + 1));\n+    // Multi-line case.\n+    #[rustfmt::skip]\n+    let _ = opt.and_then(|x| {\n+                        Some(x + 1)\n+                       });\n+}"}, {"sha": "4b9b247880a0cf7ef0b282354d8b018c3644d451", "filename": "tests/ui/option_map_or_none.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.rs?ref=95e537b03976a8ddf42c91e63f4537e11b25b862", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn main() {\n+    let opt = Some(1);\n+\n+    // Check `OPTION_MAP_OR_NONE`.\n+    // Single line case.\n+    let _ = opt.map_or(None, |x| Some(x + 1));\n+    // Multi-line case.\n+    #[rustfmt::skip]\n+    let _ = opt.map_or(None, |x| {\n+                        Some(x + 1)\n+                       });\n+}"}, {"sha": "66ed1e9f0451c512798a82858c4dc736c687b297", "filename": "tests/ui/option_map_or_none.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95e537b03976a8ddf42c91e63f4537e11b25b862/tests%2Fui%2Foption_map_or_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.stderr?ref=95e537b03976a8ddf42c91e63f4537e11b25b862", "patch": "@@ -0,0 +1,25 @@\n+error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+  --> $DIR/option_map_or_none.rs:8:13\n+   |\n+LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n+   |\n+   = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n+\n+error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+  --> $DIR/option_map_or_none.rs:11:13\n+   |\n+LL |       let _ = opt.map_or(None, |x| {\n+   |  _____________^\n+LL | |                         Some(x + 1)\n+LL | |                        });\n+   | |_________________________^\n+help: try using and_then instead\n+   |\n+LL |     let _ = opt.and_then(|x| {\n+LL |                         Some(x + 1)\n+LL |                        });\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}]}