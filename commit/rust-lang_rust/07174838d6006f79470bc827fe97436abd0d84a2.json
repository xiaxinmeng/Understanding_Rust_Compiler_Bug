{"sha": "07174838d6006f79470bc827fe97436abd0d84a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTc0ODM4ZDYwMDZmNzk0NzBiYzgyN2ZlOTc0MzZhYmQwZDg0YTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T15:55:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-26T15:55:16Z"}, "message": "Rollup merge of #64787 - tmandry:fuchsia-exitstatus, r=cramertj\n\nFix ExitStatus on Fuchsia\n\nFuchsia exit codes don't follow the convention of libc::WEXITSTATUS et\nal, and they are 64 bits instead of 32 bits. This gives Fuchsia its own\nrepresentation of ExitStatus.\n\nAdditionally, the zircon syscall structs were out of date, causing us to\nsee bogus exit codes.\n\nr? @cramertj @alexcrichton", "tree": {"sha": "2ac92a00fee4c75b8c143505d462ee6b849b2c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac92a00fee4c75b8c143505d462ee6b849b2c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07174838d6006f79470bc827fe97436abd0d84a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjN9lCRBK7hj4Ov3rIwAAdHIIABgprowjwTEe4ALF/h66mhvt\nrmai/ewGjmPtbon5LEayaDUeejvHbLV0Cbz0t3pCvTxlajyB0WDdq9r+F2xNahCC\nwzmLG4mCvS61g8KJkuOJcxcYHc3rokkLhFDsJuO/ON3sxs8GISWyrzOtClyR4fHP\nRFUT0qG+6HDPczDVT9oPxOtvRCC+QSNSq2LJx5k+RDDRQ2/UgHp24hKNhoySw8PQ\nJjuVGA5Bty857WLODCfdDpKoa/+fFqzFaMsSf9EzhCEOSv0cZR+BIrmpMlWGDFSb\nN91ktoKzWgGpmA+FeYRd2CEGhHcVVbbbkjPzxnID/gzPiWY7PxOsOxOPK1wRd/Y=\n=LkE6\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ac92a00fee4c75b8c143505d462ee6b849b2c7c\nparent 95ea4a1a8a0c8786fdb0d6c63669ece927820ad3\nparent 80db06d6daa290fbc722fbae6dbfa0728ca259b5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569513316 +0200\ncommitter GitHub <noreply@github.com> 1569513316 +0200\n\nRollup merge of #64787 - tmandry:fuchsia-exitstatus, r=cramertj\n\nFix ExitStatus on Fuchsia\n\nFuchsia exit codes don't follow the convention of libc::WEXITSTATUS et\nal, and they are 64 bits instead of 32 bits. This gives Fuchsia its own\nrepresentation of ExitStatus.\n\nAdditionally, the zircon syscall structs were out of date, causing us to\nsee bogus exit codes.\n\nr? @cramertj @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07174838d6006f79470bc827fe97436abd0d84a2", "html_url": "https://github.com/rust-lang/rust/commit/07174838d6006f79470bc827fe97436abd0d84a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07174838d6006f79470bc827fe97436abd0d84a2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ea4a1a8a0c8786fdb0d6c63669ece927820ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ea4a1a8a0c8786fdb0d6c63669ece927820ad3", "html_url": "https://github.com/rust-lang/rust/commit/95ea4a1a8a0c8786fdb0d6c63669ece927820ad3"}, {"sha": "80db06d6daa290fbc722fbae6dbfa0728ca259b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/80db06d6daa290fbc722fbae6dbfa0728ca259b5", "html_url": "https://github.com/rust-lang/rust/commit/80db06d6daa290fbc722fbae6dbfa0728ca259b5"}], "stats": {"total": 168, "additions": 93, "deletions": 75}, "files": [{"sha": "553e980f08e972c71bbc5d9fdc85aceb2c8c24d2", "filename": "src/libstd/sys/unix/process/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=07174838d6006f79470bc827fe97436abd0d84a2", "patch": "@@ -1,5 +1,5 @@\n-pub use self::process_common::{Command, ExitStatus, ExitCode, Stdio, StdioPipes};\n-pub use self::process_inner::Process;\n+pub use self::process_common::{Command, ExitCode, Stdio, StdioPipes};\n+pub use self::process_inner::{ExitStatus, Process};\n pub use crate::ffi::OsString as EnvKey;\n \n mod process_common;"}, {"sha": "4edd2ebf8c59862b02e3abeda8185261f6836a83", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=07174838d6006f79470bc827fe97436abd0d84a2", "patch": "@@ -393,57 +393,6 @@ impl fmt::Debug for Command {\n     }\n }\n \n-/// Unix exit statuses\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitStatus(c_int);\n-\n-impl ExitStatus {\n-    pub fn new(status: c_int) -> ExitStatus {\n-        ExitStatus(status)\n-    }\n-\n-    fn exited(&self) -> bool {\n-        unsafe { libc::WIFEXITED(self.0) }\n-    }\n-\n-    pub fn success(&self) -> bool {\n-        self.code() == Some(0)\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        if self.exited() {\n-            Some(unsafe { libc::WEXITSTATUS(self.0) })\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn signal(&self) -> Option<i32> {\n-        if !self.exited() {\n-            Some(unsafe { libc::WTERMSIG(self.0) })\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl From<c_int> for ExitStatus {\n-    fn from(a: c_int) -> ExitStatus {\n-        ExitStatus(a)\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let Some(code) = self.code() {\n-            write!(f, \"exit code: {}\", code)\n-        } else {\n-            let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n-        }\n-    }\n-}\n-\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub struct ExitCode(u8);\n "}, {"sha": "2b1a3ecfd70f590fd57977841ce18bb1610e02e5", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=07174838d6006f79470bc827fe97436abd0d84a2", "patch": "@@ -1,11 +1,13 @@\n+use crate::convert::TryInto;\n use crate::io;\n+use crate::fmt;\n use crate::mem;\n use crate::ptr;\n \n use crate::sys::process::zircon::{Handle, zx_handle_t};\n use crate::sys::process::process_common::*;\n \n-use libc::size_t;\n+use libc::{c_int, size_t};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -160,7 +162,7 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(ExitStatus::new(proc_info.rec.return_code))\n+        Ok(ExitStatus(proc_info.return_code))\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n@@ -190,6 +192,36 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(Some(ExitStatus::new(proc_info.rec.return_code)))\n+        Ok(Some(ExitStatus(proc_info.return_code)))\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitStatus(i64);\n+\n+impl ExitStatus {\n+    pub fn success(&self) -> bool {\n+        self.code() == Some(0)\n+    }\n+\n+    pub fn code(&self) -> Option<i32> {\n+        // FIXME: support extracting return code as an i64\n+        self.0.try_into().ok()\n+    }\n+\n+    pub fn signal(&self) -> Option<i32> {\n+        None\n+    }\n+}\n+\n+impl From<c_int> for ExitStatus {\n+    fn from(a: c_int) -> ExitStatus {\n+        ExitStatus(a as i64)\n+    }\n+}\n+\n+impl fmt::Display for ExitStatus {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"exit code: {}\", self.0)\n     }\n }"}, {"sha": "507dc6892613a57655df204efe17aa2f7f7037ef", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=07174838d6006f79470bc827fe97436abd0d84a2", "patch": "@@ -1,3 +1,4 @@\n+use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::ptr;\n use crate::sys::cvt;\n@@ -441,3 +442,54 @@ impl Process {\n         }\n     }\n }\n+\n+/// Unix exit statuses\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitStatus(c_int);\n+\n+impl ExitStatus {\n+    pub fn new(status: c_int) -> ExitStatus {\n+        ExitStatus(status)\n+    }\n+\n+    fn exited(&self) -> bool {\n+        unsafe { libc::WIFEXITED(self.0) }\n+    }\n+\n+    pub fn success(&self) -> bool {\n+        self.code() == Some(0)\n+    }\n+\n+    pub fn code(&self) -> Option<i32> {\n+        if self.exited() {\n+            Some(unsafe { libc::WEXITSTATUS(self.0) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn signal(&self) -> Option<i32> {\n+        if !self.exited() {\n+            Some(unsafe { libc::WTERMSIG(self.0) })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl From<c_int> for ExitStatus {\n+    fn from(a: c_int) -> ExitStatus {\n+        ExitStatus(a)\n+    }\n+}\n+\n+impl fmt::Display for ExitStatus {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if let Some(code) = self.code() {\n+            write!(f, \"exit code: {}\", code)\n+        } else {\n+            let signal = self.signal().unwrap();\n+            write!(f, \"signal: {}\", signal)\n+        }\n+    }\n+}"}, {"sha": "188a6b5f2da4a22f10176cffb06ce6c604835d48", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07174838d6006f79470bc827fe97436abd0d84a2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=07174838d6006f79470bc827fe97436abd0d84a2", "patch": "@@ -65,29 +65,14 @@ impl Drop for Handle {\n     }\n }\n \n-// Common ZX_INFO header\n-#[derive(Default)]\n-#[repr(C)]\n-pub struct zx_info_header_t {\n-    pub topic: u32,              // identifies the info struct\n-    pub avail_topic_size: u16,   // \u201cnative\u201d size of the struct\n-    pub topic_size: u16,         // size of the returned struct (<=topic_size)\n-    pub avail_count: u32,        // number of records the kernel has\n-    pub count: u32,              // number of records returned (limited by buffer size)\n-}\n-\n-#[derive(Default)]\n-#[repr(C)]\n-pub struct zx_record_process_t {\n-    pub return_code: c_int,\n-}\n-\n // Returned for topic ZX_INFO_PROCESS\n #[derive(Default)]\n #[repr(C)]\n pub struct zx_info_process_t {\n-    pub hdr: zx_info_header_t,\n-    pub rec: zx_record_process_t,\n+    pub return_code: i64,\n+    pub started: bool,\n+    pub exited: bool,\n+    pub debugger_attached: bool,\n }\n \n extern {"}]}