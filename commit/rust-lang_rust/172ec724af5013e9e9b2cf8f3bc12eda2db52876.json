{"sha": "172ec724af5013e9e9b2cf8f3bc12eda2db52876", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MmVjNzI0YWY1MDEzZTllOWIyY2Y4ZjNiYzEyZWRhMmRiNTI4NzY=", "commit": {"author": {"name": "yui-knk", "email": "spiketeika@gmail.com", "date": "2018-12-02T09:33:12Z"}, "committer": {"name": "yui-knk", "email": "spiketeika@gmail.com", "date": "2018-12-02T09:33:12Z"}, "message": "Fix \"line longer than 100 chars\"", "tree": {"sha": "af7de5d88a98670efa58976e86017ef7121075c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7de5d88a98670efa58976e86017ef7121075c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/172ec724af5013e9e9b2cf8f3bc12eda2db52876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/172ec724af5013e9e9b2cf8f3bc12eda2db52876", "html_url": "https://github.com/rust-lang/rust/commit/172ec724af5013e9e9b2cf8f3bc12eda2db52876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/172ec724af5013e9e9b2cf8f3bc12eda2db52876/comments", "author": {"login": "yui-knk", "id": 5356517, "node_id": "MDQ6VXNlcjUzNTY1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5356517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yui-knk", "html_url": "https://github.com/yui-knk", "followers_url": "https://api.github.com/users/yui-knk/followers", "following_url": "https://api.github.com/users/yui-knk/following{/other_user}", "gists_url": "https://api.github.com/users/yui-knk/gists{/gist_id}", "starred_url": "https://api.github.com/users/yui-knk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yui-knk/subscriptions", "organizations_url": "https://api.github.com/users/yui-knk/orgs", "repos_url": "https://api.github.com/users/yui-knk/repos", "events_url": "https://api.github.com/users/yui-knk/events{/privacy}", "received_events_url": "https://api.github.com/users/yui-knk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yui-knk", "id": 5356517, "node_id": "MDQ6VXNlcjUzNTY1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5356517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yui-knk", "html_url": "https://github.com/yui-knk", "followers_url": "https://api.github.com/users/yui-knk/followers", "following_url": "https://api.github.com/users/yui-knk/following{/other_user}", "gists_url": "https://api.github.com/users/yui-knk/gists{/gist_id}", "starred_url": "https://api.github.com/users/yui-knk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yui-knk/subscriptions", "organizations_url": "https://api.github.com/users/yui-knk/orgs", "repos_url": "https://api.github.com/users/yui-knk/repos", "events_url": "https://api.github.com/users/yui-knk/events{/privacy}", "received_events_url": "https://api.github.com/users/yui-knk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70371fde17ea4b1e3aa4d443103a15157eafdcdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/70371fde17ea4b1e3aa4d443103a15157eafdcdc", "html_url": "https://github.com/rust-lang/rust/commit/70371fde17ea4b1e3aa4d443103a15157eafdcdc"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "4884e5e28c0aeb3a1c839aed17585742fee187f8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/172ec724af5013e9e9b2cf8f3bc12eda2db52876/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172ec724af5013e9e9b2cf8f3bc12eda2db52876/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=172ec724af5013e9e9b2cf8f3bc12eda2db52876", "patch": "@@ -6282,9 +6282,10 @@ impl<'a> Parser<'a> {\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`, `pub(self)` for `pub(in self)`\n-    /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n-    /// a function definition, it's not a tuple struct field) and the contents within the parens\n+    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n+    /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    /// If the following element can't be a tuple (i.e. it's a function definition,\n+    /// it's not a tuple struct field) and the contents within the parens\n     /// isn't valid, emit a proper diagnostic.\n     pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);"}]}