{"sha": "89bc660d21de48cc759f3aab9fd781bf5441c657", "node_id": "C_kwDOAAsO6NoAKDg5YmM2NjBkMjFkZTQ4Y2M3NTlmM2FhYjlmZDc4MWJmNTQ0MWM2NTc", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-03-09T20:07:34Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-09T20:08:31Z"}, "message": "rust-lang/portable-simd#255: run Miri on CI\n\nThis is allowed to fail, but might produce useful results to check on.", "tree": {"sha": "14f32eab0520fe33579dacf1a02d9606630c733f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f32eab0520fe33579dacf1a02d9606630c733f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bc660d21de48cc759f3aab9fd781bf5441c657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bc660d21de48cc759f3aab9fd781bf5441c657", "html_url": "https://github.com/rust-lang/rust/commit/89bc660d21de48cc759f3aab9fd781bf5441c657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bc660d21de48cc759f3aab9fd781bf5441c657/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d13059ae9162997c5b88997bda44443615f12ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d13059ae9162997c5b88997bda44443615f12ab", "html_url": "https://github.com/rust-lang/rust/commit/2d13059ae9162997c5b88997bda44443615f12ab"}, {"sha": "4023d77e39c3af4a735b8d0974414ec06d5391c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4023d77e39c3af4a735b8d0974414ec06d5391c7", "html_url": "https://github.com/rust-lang/rust/commit/4023d77e39c3af4a735b8d0974414ec06d5391c7"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "54d747647906da4f5a0dfa2c6e57e65e4279bb12", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89bc660d21de48cc759f3aab9fd781bf5441c657/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/89bc660d21de48cc759f3aab9fd781bf5441c657/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=89bc660d21de48cc759f3aab9fd781bf5441c657", "patch": "@@ -58,6 +58,23 @@ jobs:\n       - name: Run Clippy\n         run: cargo clippy --all-targets --target ${{ matrix.target }}\n \n+  miri:\n+    name: \"miri\"\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Install Miri\n+        run: |\n+          rustup toolchain install nightly --component miri\n+          rustup override set nightly\n+          cargo miri setup\n+      - name: Test with Miri (failures allowed)\n+        continue-on-error: true\n+        run: |\n+          cargo miri test --test i32_ops\n+          cargo miri test --test f32_ops\n+          cargo miri test --test cast\n+\n   x86-tests:\n     name: \"${{ matrix.target_feature }} on ${{ matrix.target }}\"\n     runs-on: ${{ matrix.os }}"}, {"sha": "8bf7f5ed3d2a483ec3618f15060ffbc5c49cf04f", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89bc660d21de48cc759f3aab9fd781bf5441c657/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bc660d21de48cc759f3aab9fd781bf5441c657/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=89bc660d21de48cc759f3aab9fd781bf5441c657", "patch": "@@ -77,19 +77,29 @@ impl<T: core::fmt::Debug + DefaultStrategy, const LANES: usize> DefaultStrategy\n     }\n }\n \n+#[cfg(not(miri))]\n+fn make_runner() -> proptest::test_runner::TestRunner {\n+    Default::default()\n+}\n+#[cfg(miri)]\n+fn make_runner() -> proptest::test_runner::TestRunner {\n+    // Only run a few tests on Miri\n+    proptest::test_runner::TestRunner::new(proptest::test_runner::Config::with_cases(4))\n+}\n+\n /// Test a function that takes a single value.\n pub fn test_1<A: core::fmt::Debug + DefaultStrategy>(\n     f: &dyn Fn(A) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner.run(&A::default_strategy(), f).unwrap();\n }\n \n /// Test a function that takes two values.\n pub fn test_2<A: core::fmt::Debug + DefaultStrategy, B: core::fmt::Debug + DefaultStrategy>(\n     f: &dyn Fn(A, B) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner\n         .run(&(A::default_strategy(), B::default_strategy()), |(a, b)| {\n             f(a, b)\n@@ -105,7 +115,7 @@ pub fn test_3<\n >(\n     f: &dyn Fn(A, B, C) -> proptest::test_runner::TestCaseResult,\n ) {\n-    let mut runner = proptest::test_runner::TestRunner::default();\n+    let mut runner = make_runner();\n     runner\n         .run(\n             &(\n@@ -361,24 +371,28 @@ macro_rules! test_lanes {\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_8() {\n                     implementation::<8>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_16() {\n                     implementation::<16>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_32() {\n                     implementation::<32>();\n                 }\n \n                 #[test]\n                 #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n+                #[cfg(not(miri))] // Miri intrinsic implementations are uniform and larger tests are sloooow\n                 fn lanes_64() {\n                     implementation::<64>();\n                 }"}]}