{"sha": "b34c5a23ab0996321a414d47729a9076364a79c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNGM1YTIzYWIwOTk2MzIxYTQxNGQ0NzcyOWE5MDc2MzY0YTc5YzY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-03T12:45:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-03T12:45:01Z"}, "message": "incr.comp.: Make ConstEval dep-node anonymous.", "tree": {"sha": "c970e347d038d21d74c7435ec5fa0cb4a0b7af9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c970e347d038d21d74c7435ec5fa0cb4a0b7af9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b34c5a23ab0996321a414d47729a9076364a79c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b34c5a23ab0996321a414d47729a9076364a79c6", "html_url": "https://github.com/rust-lang/rust/commit/b34c5a23ab0996321a414d47729a9076364a79c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b34c5a23ab0996321a414d47729a9076364a79c6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb0693fdebb68020911f3b9245cebc6f134154e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb0693fdebb68020911f3b9245cebc6f134154e", "html_url": "https://github.com/rust-lang/rust/commit/6bb0693fdebb68020911f3b9245cebc6f134154e"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "c6f9cb2fceadd3f454121d8aecaa0fa56739cfcd", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b34c5a23ab0996321a414d47729a9076364a79c6/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34c5a23ab0996321a414d47729a9076364a79c6/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b34c5a23ab0996321a414d47729a9076364a79c6", "patch": "@@ -66,7 +66,6 @@ use hir::map::DefPathHash;\n use ich::Fingerprint;\n use ty::{TyCtxt, Instance, InstanceDef};\n use ty::fast_reject::SimplifiedType;\n-use ty::subst::Substs;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use ich::StableHashingContext;\n use std::fmt;\n@@ -104,6 +103,8 @@ macro_rules! define_dep_nodes {\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n+                            $(return !anon_attr_to_bool!($anon);)*\n+\n                             // tuple args\n                             $({\n                                 return <( $($tuple_arg,)* ) as DepNodeParams>\n@@ -112,6 +113,7 @@ macro_rules! define_dep_nodes {\n \n                             // struct args\n                             $({\n+\n                                 return <( $($struct_arg_ty,)* ) as DepNodeParams>\n                                     ::CAN_RECONSTRUCT_QUERY_KEY;\n                             })*\n@@ -445,17 +447,17 @@ define_dep_nodes!( <'tcx>\n     [] TypeckBodiesKrate,\n     [] TypeckTables(DefId),\n     [] HasTypeckTables(DefId),\n-    [] ConstEval { def_id: DefId, substs: &'tcx Substs<'tcx> },\n+    [anon] ConstEval,\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },\n     [] SpecializationGraph(DefId),\n     [] ObjectSafety(DefId),\n \n-    [anon] IsCopy(DefId),\n-    [anon] IsSized(DefId),\n-    [anon] IsFreeze(DefId),\n-    [anon] NeedsDrop(DefId),\n-    [anon] Layout(DefId),\n+    [anon] IsCopy,\n+    [anon] IsSized,\n+    [anon] IsFreeze,\n+    [anon] NeedsDrop,\n+    [anon] Layout,\n \n     // The set of impls for a given trait.\n     [] TraitImpls(DefId),"}, {"sha": "a2e335c00b26ad22d475cd3b50bd651878b6905e", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b34c5a23ab0996321a414d47729a9076364a79c6/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34c5a23ab0996321a414d47729a9076364a79c6/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=b34c5a23ab0996321a414d47729a9076364a79c6", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n use middle::const_val;\n@@ -1036,10 +1036,9 @@ fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TypeckBodiesKrate\n }\n \n-fn const_eval_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n+fn const_eval_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                              -> DepConstructor<'tcx> {\n-    let (def_id, substs) = key.value;\n-    DepConstructor::ConstEval { def_id, substs }\n+    DepConstructor::ConstEval\n }\n \n fn mir_keys<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n@@ -1054,32 +1053,22 @@ fn relevant_trait_impls_for<'tcx>((def_id, t): (DefId, SimplifiedType)) -> DepCo\n     DepConstructor::RelevantTraitImpls(def_id, t)\n }\n \n-fn is_copy_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsCopy(def_id)\n+fn is_copy_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsCopy\n }\n \n-fn is_sized_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsSized(def_id)\n+fn is_sized_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsSized\n }\n \n-fn is_freeze_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsFreeze(def_id)\n+fn is_freeze_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsFreeze\n }\n \n-fn needs_drop_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::NeedsDrop(def_id)\n+fn needs_drop_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::NeedsDrop\n }\n \n-fn layout_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::Layout(def_id)\n+fn layout_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::Layout\n }"}]}