{"sha": "7f0637da5144c7435e88ea3805021882f077d50c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMDYzN2RhNTE0NGM3NDM1ZTg4ZWEzODA1MDIxODgyZjA3N2Q1MGM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-12T03:29:32Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-12T03:36:01Z"}, "message": "Shrink `SubregionOrigin`.\n\nIt's currently 120 bytes on x86-64, due to one oversized variant\n(`Subtype`). This commit boxes `Subtype`'s contents, reducing the size\nof `SubregionOrigin` to 32 bytes.\n\nThe change speeds things up by avoiding lots of `memcpy` calls, mostly\nrelating to `RegionConstraintData::constraints`, which is a `BTreeMap`\nwith `SubregionOrigin` values.", "tree": {"sha": "92596d57c675c314cf4091cdaa731963c3017737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92596d57c675c314cf4091cdaa731963c3017737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0637da5144c7435e88ea3805021882f077d50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0637da5144c7435e88ea3805021882f077d50c", "html_url": "https://github.com/rust-lang/rust/commit/7f0637da5144c7435e88ea3805021882f077d50c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0637da5144c7435e88ea3805021882f077d50c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8116dced2c6c5d02e1c4359e89dc0919d6001b", "html_url": "https://github.com/rust-lang/rust/commit/2b8116dced2c6c5d02e1c4359e89dc0919d6001b"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "96d40bc81add2633eecb641999b0a4daf965baea", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -97,7 +97,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n                self.tag(),\n                a,\n                b);\n-        let origin = Subtype(self.fields.trace.clone());\n+        let origin = Subtype(box self.fields.trace.clone());\n         self.fields.infcx.borrow_region_constraints()\n                          .make_eqregion(origin, a, b);\n         Ok(a)"}, {"sha": "5f3c5fed3a3b25c5c778acfa296d0ad51f27dc80", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -30,7 +30,7 @@ impl NiceRegionError<'me, 'tcx> {\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -50,7 +50,7 @@ impl NiceRegionError<'me, 'tcx> {\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -70,7 +70,7 @@ impl NiceRegionError<'me, 'tcx> {\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -92,7 +92,7 @@ impl NiceRegionError<'me, 'tcx> {\n                 _,\n                 _,\n                 _,\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -108,7 +108,7 @@ impl NiceRegionError<'me, 'tcx> {\n             )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -125,7 +125,7 @@ impl NiceRegionError<'me, 'tcx> {\n             )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),\n@@ -142,7 +142,7 @@ impl NiceRegionError<'me, 'tcx> {\n             )),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(TypeTrace {\n+                SubregionOrigin::Subtype(box TypeTrace {\n                     cause,\n                     values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                 }),"}, {"sha": "115ffea97bf1a47a3e3a0809f3a90163068d70e7", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                           sup: Region<'tcx>)\n                                           -> DiagnosticBuilder<'tcx> {\n         match origin {\n-            infer::Subtype(trace) => {\n+            infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, &terr);\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err, \"\", sup, \"...\");\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx> {\n         // I can't think how to do better than this right now. -nikomatsakis\n         match placeholder_origin {\n-            infer::Subtype(trace) => {\n+            infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsPlaceholderMismatch;\n                 self.report_and_explain_type_error(trace, &terr)\n             }"}, {"sha": "10e45321a6d6ae5e2d3ecf4fbc3b40546f7e6f13", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -57,7 +57,7 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n                a,\n                b);\n \n-        let origin = Subtype(self.fields.trace.clone());\n+        let origin = Subtype(box self.fields.trace.clone());\n         Ok(self.fields.infcx.borrow_region_constraints().glb_regions(self.tcx(), origin, a, b))\n     }\n "}, {"sha": "8b64cda7bd26d7e22e335c47f4fd3cfa4d5ed13d", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -57,7 +57,7 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n                a,\n                b);\n \n-        let origin = Subtype(self.fields.trace.clone());\n+        let origin = Subtype(box self.fields.trace.clone());\n         Ok(self.fields.infcx.borrow_region_constraints().lub_regions(self.tcx(), origin, a, b))\n     }\n "}, {"sha": "a886c44a4792d2513666a746e69cdf05ac251eb0", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -254,7 +254,7 @@ pub struct TypeTrace<'tcx> {\n #[derive(Clone, Debug)]\n pub enum SubregionOrigin<'tcx> {\n     /// Arose from a subtyping relation\n-    Subtype(TypeTrace<'tcx>),\n+    Subtype(Box<TypeTrace<'tcx>>),\n \n     /// Stack-allocated closures cannot outlive innermost loop\n     /// or function so as to ensure we only require finite stack\n@@ -340,6 +340,10 @@ pub enum SubregionOrigin<'tcx> {\n     },\n }\n \n+// `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(SubregionOrigin<'_>, 32);\n+\n /// Places that type/region parameters can appear.\n #[derive(Clone, Copy, Debug)]\n pub enum ParameterOrigin {"}, {"sha": "76db55ecfa8ef70a4dc8d28f44d8c59e155c98d3", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0637da5144c7435e88ea3805021882f077d50c/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=7f0637da5144c7435e88ea3805021882f077d50c", "patch": "@@ -130,7 +130,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         // FIXME -- we have more fine-grained information available\n         // from the \"cause\" field, we could perhaps give more tailored\n         // error messages.\n-        let origin = SubregionOrigin::Subtype(self.fields.trace.clone());\n+        let origin = SubregionOrigin::Subtype(box self.fields.trace.clone());\n         self.fields.infcx.borrow_region_constraints()\n                          .make_subregion(origin, a, b);\n "}]}