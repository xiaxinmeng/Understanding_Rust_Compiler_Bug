{"sha": "31aad2528f53349e9a0601c756d3c9f86ca9154c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYWFkMjUyOGY1MzM0OWU5YTA2MDFjNzU2ZDNjOWY4NmNhOTE1NGM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-08T20:14:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-08T20:14:30Z"}, "message": "Fix edge case for ImportGranularity guessing", "tree": {"sha": "d2250c8e6ccb80eb236e1731db9f4e5c80e48e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2250c8e6ccb80eb236e1731db9f4e5c80e48e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31aad2528f53349e9a0601c756d3c9f86ca9154c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31aad2528f53349e9a0601c756d3c9f86ca9154c", "html_url": "https://github.com/rust-lang/rust/commit/31aad2528f53349e9a0601c756d3c9f86ca9154c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31aad2528f53349e9a0601c756d3c9f86ca9154c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590472607c9629fdd37e3f6f33dacfdc2a3f56cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/590472607c9629fdd37e3f6f33dacfdc2a3f56cc", "html_url": "https://github.com/rust-lang/rust/commit/590472607c9629fdd37e3f6f33dacfdc2a3f56cc"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "10bbafe7765098785324524d7326340102f09e91", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=31aad2528f53349e9a0601c756d3c9f86ca9154c", "patch": "@@ -120,15 +120,19 @@ impl ImportScope {\n             if eq_visibility(prev_vis, curr_vis.clone()) && eq_attrs(prev_attrs, curr_attrs.clone())\n             {\n                 if let Some((prev_path, curr_path)) = prev.path().zip(curr.path()) {\n-                    if let Some(_) = common_prefix(&prev_path, &curr_path) {\n+                    if let Some((prev_prefix, _)) = common_prefix(&prev_path, &curr_path) {\n                         if prev.use_tree_list().is_none() && curr.use_tree_list().is_none() {\n-                            // Same prefix but no use tree lists so this has to be of item style.\n-                            break ImportGranularityGuess::Item; // this overwrites CrateOrModule, technically the file doesn't adhere to anything here.\n-                        } else {\n-                            // Same prefix with item tree lists, has to be module style as it\n-                            // can't be crate style since the trees wouldn't share a prefix then.\n-                            break ImportGranularityGuess::Module;\n+                            let prefix_c = prev_prefix.qualifiers().count();\n+                            let curr_c = curr_path.qualifiers().count() - prefix_c;\n+                            let prev_c = prev_path.qualifiers().count() - prefix_c;\n+                            if curr_c <= 1 || prev_c <= 1 {\n+                                // Same prefix but no use tree lists so this has to be of item style.\n+                                break ImportGranularityGuess::Item; // this overwrites CrateOrModule, technically the file doesn't adhere to anything here.\n+                            }\n                         }\n+                        // Same prefix with item tree lists, has to be module style as it\n+                        // can't be crate style since the trees wouldn't share a prefix then.\n+                        break ImportGranularityGuess::Module;\n                     }\n                 }\n             }"}, {"sha": "70b11bf81f2086b3de344eb9b6607cbf029473bc", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=31aad2528f53349e9a0601c756d3c9f86ca9154c", "patch": "@@ -660,6 +660,13 @@ fn guess_item() {\n         r\"\n use foo::bar::baz;\n use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Item,\n+    );\n+    check_guess(\n+        r\"\n+use foo::bar::Bar;\n+use foo::baz;\n \",\n         ImportGranularityGuess::Item,\n     );\n@@ -679,6 +686,14 @@ use foo::bar::{qux, quux};\n         r\"\n use foo::bar::baz;\n use foo::{baz::{qux, quux}, bar};\n+\",\n+        ImportGranularityGuess::Module,\n+    );\n+    check_guess(\n+        r\"\n+use foo::bar::Bar;\n+use foo::baz::Baz;\n+use foo::{Foo, Qux};\n \",\n         ImportGranularityGuess::Module,\n     );"}, {"sha": "a60bc5ad95d2a5ef94efc8e1ad8d5d809103db8d", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31aad2528f53349e9a0601c756d3c9f86ca9154c/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=31aad2528f53349e9a0601c756d3c9f86ca9154c", "patch": "@@ -259,11 +259,14 @@ impl ast::Path {\n     }\n \n     pub fn segments(&self) -> impl Iterator<Item = ast::PathSegment> + Clone {\n-        // cant make use of SyntaxNode::siblings, because the returned Iterator is not clone\n         successors(self.first_segment(), |p| {\n             p.parent_path().parent_path().and_then(|p| p.segment())\n         })\n     }\n+\n+    pub fn qualifiers(&self) -> impl Iterator<Item = ast::Path> + Clone {\n+        successors(self.qualifier(), |p| p.qualifier())\n+    }\n }\n impl ast::UseTree {\n     pub fn is_simple_path(&self) -> bool {"}]}