{"sha": "dc639c944af8a47c5017317eebe2764087c8f776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjM5Yzk0NGFmOGE0N2M1MDE3MzE3ZWViZTI3NjQwODdjOGY3NzY=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-14T13:34:28Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-14T14:29:35Z"}, "message": "Warn about useless assignments of variables/fields to themselves", "tree": {"sha": "6c04bf1c5c1e8afe73aaf0d45e02bbeec251a17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c04bf1c5c1e8afe73aaf0d45e02bbeec251a17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc639c944af8a47c5017317eebe2764087c8f776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc639c944af8a47c5017317eebe2764087c8f776", "html_url": "https://github.com/rust-lang/rust/commit/dc639c944af8a47c5017317eebe2764087c8f776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc639c944af8a47c5017317eebe2764087c8f776/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08f25a7ef2800af5525762e981c24d96c14febe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08f25a7ef2800af5525762e981c24d96c14febe", "html_url": "https://github.com/rust-lang/rust/commit/a08f25a7ef2800af5525762e981c24d96c14febe"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "713d572b93a0ba725696d49465d996d6465c64ce", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -150,6 +150,59 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n     }\n \n+    fn check_for_self_assign(&mut self, assign: &'tcx hir::Expr<'tcx>) {\n+        fn check_for_self_assign_helper(\n+            tcx: TyCtxt<'tcx>,\n+            typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+            lhs: &'tcx hir::Expr<'tcx>,\n+            rhs: &'tcx hir::Expr<'tcx>,\n+        ) -> bool {\n+            match (&lhs.kind, &rhs.kind) {\n+                (hir::ExprKind::Path(ref qpath_l), hir::ExprKind::Path(ref qpath_r)) => {\n+                    if let (Res::Local(id_l), Res::Local(id_r)) = (\n+                        typeck_results.qpath_res(qpath_l, lhs.hir_id),\n+                        typeck_results.qpath_res(qpath_r, rhs.hir_id),\n+                    ) {\n+                        if id_l == id_r {\n+                            return true;\n+                        }\n+                    }\n+                    return false;\n+                }\n+                (hir::ExprKind::Field(lhs_l, ident_l), hir::ExprKind::Field(lhs_r, ident_r)) => {\n+                    if ident_l == ident_r {\n+                        return check_for_self_assign_helper(tcx, typeck_results, lhs_l, lhs_r);\n+                    }\n+                    return false;\n+                }\n+                _ => {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        if let hir::ExprKind::Assign(lhs, rhs, _) = assign.kind {\n+            if check_for_self_assign_helper(self.tcx, self.typeck_results(), lhs, rhs)\n+                && !assign.span.from_expansion()\n+            {\n+                let is_field_assign = matches!(lhs.kind, hir::ExprKind::Field(..));\n+                self.tcx.struct_span_lint_hir(\n+                    lint::builtin::DEAD_CODE,\n+                    assign.hir_id,\n+                    assign.span,\n+                    |lint| {\n+                        lint.build(&format!(\n+                            \"useless assignment of {} of type `{}` to itself\",\n+                            if is_field_assign { \"field\" } else { \"variable\" },\n+                            self.typeck_results().expr_ty(lhs),\n+                        ))\n+                        .emit();\n+                    },\n+                )\n+            }\n+        }\n+    }\n+\n     fn handle_field_pattern_match(\n         &mut self,\n         lhs: &hir::Pat<'_>,\n@@ -287,6 +340,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             }\n             hir::ExprKind::Assign(ref left, ref right, ..) => {\n                 self.handle_assign(left);\n+                self.check_for_self_assign(expr);\n                 self.visit_expr(right);\n                 return;\n             }"}, {"sha": "840c7ff8355d0f20c8a8f736833a455f5a7a7f2a", "filename": "src/test/ui/issues/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3290.rs?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n pub fn main() {\n    let mut x: Box<_> = box 3;"}, {"sha": "b8bf7d860c415a34311c1299cd5fb44af14dd529", "filename": "src/test/ui/lint/dead-code/self-assign.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.rs?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -0,0 +1,50 @@\n+// Test that dead code warnings are issued for superfluous assignments of\n+// fields or variables to themselves (issue #75356).\n+\n+// check-pass\n+#![allow(unused_assignments)]\n+#![warn(dead_code)]\n+\n+fn main() {\n+    let mut x = 0;\n+    x = x;\n+    //~^ WARNING: useless assignment of variable of type `i32` to itself\n+\n+    x = (x);\n+    //~^ WARNING: useless assignment of variable of type `i32` to itself\n+\n+    x = {x};\n+    // block expressions don't count as self-assignments\n+\n+\n+    struct S<'a> { f: &'a str }\n+    let mut s = S { f: \"abc\" };\n+    s = s;\n+    //~^ WARNING: useless assignment of variable of type `S` to itself\n+\n+    s.f = s.f;\n+    //~^ WARNING: useless assignment of field of type `&str` to itself\n+\n+\n+    struct N0 { x: Box<i32> }\n+    struct N1 { n: N0 }\n+    struct N2(N1);\n+    struct N3 { n: N2 };\n+    let mut n3 = N3 { n: N2(N1 { n: N0 { x: Box::new(42) } }) };\n+    n3.n.0.n.x = n3.n.0.n.x;\n+    //~^ WARNING: useless assignment of field of type `Box<i32>` to itself\n+\n+    let mut t = (1, ((2, 3, (4, 5)),));\n+    t.1.0.2.1 = t.1.0.2.1;\n+    //~^ WARNING: useless assignment of field of type `i32` to itself\n+\n+\n+    let mut y = 0;\n+    macro_rules! assign_to_y {\n+        ($cur:expr) => {{\n+            y = $cur;\n+        }};\n+    }\n+    assign_to_y!(y);\n+    // self-assignments in macro expansions are not reported either\n+}"}, {"sha": "bb79c0ec72a3460efedb6b4e5da4d19ad908a80f", "filename": "src/test/ui/lint/dead-code/self-assign.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fself-assign.stderr?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -0,0 +1,44 @@\n+warning: useless assignment of variable of type `i32` to itself\n+  --> $DIR/self-assign.rs:10:5\n+   |\n+LL |     x = x;\n+   |     ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/self-assign.rs:6:9\n+   |\n+LL | #![warn(dead_code)]\n+   |         ^^^^^^^^^\n+\n+warning: useless assignment of variable of type `i32` to itself\n+  --> $DIR/self-assign.rs:13:5\n+   |\n+LL |     x = (x);\n+   |     ^^^^^^^\n+\n+warning: useless assignment of variable of type `S` to itself\n+  --> $DIR/self-assign.rs:22:5\n+   |\n+LL |     s = s;\n+   |     ^^^^^\n+\n+warning: useless assignment of field of type `&str` to itself\n+  --> $DIR/self-assign.rs:25:5\n+   |\n+LL |     s.f = s.f;\n+   |     ^^^^^^^^^\n+\n+warning: useless assignment of field of type `Box<i32>` to itself\n+  --> $DIR/self-assign.rs:34:5\n+   |\n+LL |     n3.n.0.n.x = n3.n.0.n.x;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: useless assignment of field of type `i32` to itself\n+  --> $DIR/self-assign.rs:38:5\n+   |\n+LL |     t.1.0.2.1 = t.1.0.2.1;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "2458b171e645851b864c976842950fce9a4f9b35", "filename": "src/test/ui/nll/issue-50461-used-mut-from-moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fnll%2Fissue-50461-used-mut-from-moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50461-used-mut-from-moves.rs?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![deny(unused_mut)]\n+#![allow(dead_code)]\n \n struct Foo {\n     pub value: i32"}, {"sha": "88e8614683227117abbb41dac3d7d69e87dc998b", "filename": "src/test/ui/self/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc639c944af8a47c5017317eebe2764087c8f776/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-re-assign.rs?ref=dc639c944af8a47c5017317eebe2764087c8f776", "patch": "@@ -3,6 +3,7 @@\n // that we do not glue_drop before we glue_take (#3290).\n \n #![feature(box_syntax)]\n+#![allow(dead_code)]\n \n use std::rc::Rc;\n "}]}