{"sha": "a0a61904f4b38c76fe32c7cda57626be94b9c65a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYTYxOTA0ZjRiMzhjNzZmZTMyYzdjZGE1NzYyNmJlOTRiOWM2NWE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-13T18:51:33Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:12:49Z"}, "message": "Addressed more points raised in review.", "tree": {"sha": "169a26efcedc0b19a3326f19be1c3f153109ccd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169a26efcedc0b19a3326f19be1c3f153109ccd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0a61904f4b38c76fe32c7cda57626be94b9c65a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a61904f4b38c76fe32c7cda57626be94b9c65a", "html_url": "https://github.com/rust-lang/rust/commit/a0a61904f4b38c76fe32c7cda57626be94b9c65a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0a61904f4b38c76fe32c7cda57626be94b9c65a/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783b713b5d90747dec1aabdbc8bfc348593a00c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/783b713b5d90747dec1aabdbc8bfc348593a00c5", "html_url": "https://github.com/rust-lang/rust/commit/783b713b5d90747dec1aabdbc8bfc348593a00c5"}], "stats": {"total": 88, "additions": 38, "deletions": 50}, "files": [{"sha": "a4b9ed0a206b91a74f3c0e9ca21eca8d548a4459", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=a0a61904f4b38c76fe32c7cda57626be94b9c65a", "patch": "@@ -63,9 +63,7 @@ pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_\n pub use self::util::{\n     supertraits, supertrait_def_ids, transitive_bounds, Supertraits, SupertraitDefIds,\n };\n-pub use self::util::{\n-    expand_trait_aliases, TraitAliasExpander, TraitAliasExpansionInfoDignosticBuilder,\n-};\n+pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n \n pub use self::chalk_fulfill::{\n     CanonicalGoal as ChalkCanonicalGoal,"}, {"sha": "5ba23a9c45a4f3bf90bb80fd033c94aefbd9e120", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=a0a61904f4b38c76fe32c7cda57626be94b9c65a", "patch": "@@ -132,18 +132,18 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let mut predicates: Vec<_> = predicates.predicates\n+                let predicates = predicates.predicates\n                     .iter()\n-                    .map(|(pred, _)| pred.subst_supertrait(tcx, &data.to_poly_trait_ref()))\n-                    .collect();\n+                    .map(|(pred, _)| pred.subst_supertrait(tcx, &data.to_poly_trait_ref()));\n                 debug!(\"super_predicates: data={:?} predicates={:?}\",\n-                       data, predicates);\n+                       data, predicates.clone());\n \n                 // Only keep those bounds that we haven't already seen.\n                 // This is necessary to prevent infinite recursion in some\n                 // cases. One common case is when people define\n                 // `trait Sized: Sized { }` rather than `trait Sized { }`.\n-                predicates.retain(|pred| self.visited.insert(pred));\n+                let visited = &mut self.visited;\n+                let predicates = predicates.filter(|pred| visited.insert(pred));\n \n                 self.stack.extend(predicates);\n             }\n@@ -298,13 +298,21 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n         }\n     }\n \n-    fn clone_and_push(&self, trait_ref: ty::PolyTraitRef<'tcx>, span: Span) -> Self {\n-        let mut path = self.path.clone();\n-        path.push((trait_ref, span));\n-\n-        Self {\n-            path\n+    /// Adds diagnostic labels to `diag` for the expansion path of a trait through all intermediate\n+    /// trait aliases.\n+    pub fn label_with_exp_info(&self,\n+        diag: &mut DiagnosticBuilder<'_>,\n+        top_label: &str,\n+        use_desc: &str\n+    ) {\n+        diag.span_label(self.top().1, top_label);\n+        if self.path.len() > 1 {\n+            for (_, sp) in self.path.iter().rev().skip(1).take(self.path.len() - 2) {\n+                diag.span_label(*sp, format!(\"referenced here ({})\", use_desc));\n+            }\n         }\n+        diag.span_label(self.bottom().1,\n+            format!(\"trait alias used in trait object type ({})\", use_desc));\n     }\n \n     pub fn trait_ref(&self) -> &ty::PolyTraitRef<'tcx> {\n@@ -318,33 +326,14 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n     pub fn bottom(&self) -> &(ty::PolyTraitRef<'tcx>, Span) {\n         self.path.first().unwrap()\n     }\n-}\n \n-/// Emits diagnostic information relating to the expansion of a trait via trait aliases\n-/// (see [`TraitAliasExpansionInfo`]).\n-pub trait TraitAliasExpansionInfoDignosticBuilder {\n-    fn label_with_exp_info<'tcx>(&mut self,\n-        info: &TraitAliasExpansionInfo<'tcx>,\n-        top_label: &str,\n-        use_desc: &str\n-    ) -> &mut Self;\n-}\n+    fn clone_and_push(&self, trait_ref: ty::PolyTraitRef<'tcx>, span: Span) -> Self {\n+        let mut path = self.path.clone();\n+        path.push((trait_ref, span));\n \n-impl<'a> TraitAliasExpansionInfoDignosticBuilder for DiagnosticBuilder<'a> {\n-    fn label_with_exp_info<'tcx>(&mut self,\n-        info: &TraitAliasExpansionInfo<'tcx>,\n-        top_label: &str,\n-        use_desc: &str\n-    ) -> &mut Self {\n-        self.span_label(info.top().1, top_label);\n-        if info.path.len() > 1 {\n-            for (_, sp) in info.path.iter().rev().skip(1).take(info.path.len() - 2) {\n-                self.span_label(*sp, format!(\"referenced here ({})\", use_desc));\n-            }\n+        Self {\n+            path\n         }\n-        self.span_label(info.bottom().1,\n-            format!(\"trait alias used in trait object type ({})\", use_desc));\n-        self\n     }\n }\n \n@@ -388,16 +377,15 @@ impl<'cx, 'gcx, 'tcx> TraitAliasExpander<'cx, 'gcx, 'tcx> {\n         // Get components of trait alias.\n         let predicates = tcx.super_predicates_of(trait_ref.def_id());\n \n-        let items: Vec<_> = predicates.predicates\n+        let items = predicates.predicates\n             .iter()\n             .rev()\n             .filter_map(|(pred, span)| {\n                 pred.subst_supertrait(tcx, &trait_ref)\n                     .to_opt_poly_trait_ref()\n                     .map(|trait_ref| item.clone_and_push(trait_ref, *span))\n-            })\n-            .collect();\n-        debug!(\"expand_trait_aliases: items={:?}\", items);\n+            });\n+        debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n \n         self.stack.extend(items);\n "}, {"sha": "ce5963e3ce5c273b278099bf2ef882b9e89963aa", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a61904f4b38c76fe32c7cda57626be94b9c65a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a0a61904f4b38c76fe32c7cda57626be94b9c65a", "patch": "@@ -11,7 +11,7 @@ use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n-use rustc::traits::{self, TraitAliasExpansionInfoDignosticBuilder};\n+use rustc::traits;\n use rustc::ty::{self, DefIdTree, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n@@ -976,6 +976,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let mut projection_bounds = Vec::new();\n         let mut potential_assoc_types = Vec::new();\n         let dummy_self = self.tcx().types.trait_object_dummy_self;\n+        // FIXME: we want to avoid collecting into a `Vec` here, but simply cloning the iterator is\n+        // not straightforward due to the borrow checker.\n         let bound_trait_refs: Vec<_> = trait_bounds\n             .iter()\n             .rev()\n@@ -998,14 +1000,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         if regular_traits.len() > 1 {\n             let first_trait = &regular_traits[0];\n             let additional_trait = &regular_traits[1];\n-            struct_span_err!(tcx.sess, additional_trait.bottom().1, E0225,\n+            let mut err = struct_span_err!(tcx.sess, additional_trait.bottom().1, E0225,\n                 \"only auto traits can be used as additional traits in a trait object\"\n-            )\n-                .label_with_exp_info(additional_trait, \"additional non-auto trait\",\n-                    \"additional use\")\n-                .label_with_exp_info(first_trait, \"first non-auto trait\",\n-                    \"first use\")\n-                .emit();\n+            );\n+            additional_trait.label_with_exp_info(&mut err,\n+                \"additional non-auto trait\", \"additional use\");\n+            first_trait.label_with_exp_info(&mut err,\n+                \"first non-auto trait\", \"first use\");\n+            err.emit();\n         }\n \n         if regular_traits.is_empty() && auto_traits.is_empty() {"}]}