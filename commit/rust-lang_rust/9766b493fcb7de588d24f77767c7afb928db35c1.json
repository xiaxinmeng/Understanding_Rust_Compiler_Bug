{"sha": "9766b493fcb7de588d24f77767c7afb928db35c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjZiNDkzZmNiN2RlNTg4ZDI0Zjc3NzY3YzdhZmI5MjhkYjM1YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T06:41:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T06:41:17Z"}, "message": "auto merge of #15369 : omasanori/rust/asctime, r=alexcrichton\n\nIn C, `ctime(t)` is equivalent to `asctime(localtime(t))`, so the result should depend on the local timezone. Current `ctime` is compatible with `asctime` in C, not `ctime`.\r\n\r\nThis commit renames `ctime` to `asctime` and adds `ctime` which converts the time to the local timezone before formatting it.\r\n\r\nThis commit also fixes the documentation of them. Current documentation of `ctime` says it returns \"a string of the current time.\" However, it actually returns a string of the time represented as `self`, not the time when it is called.", "tree": {"sha": "e7bd950d4c2e74d6030230da200d50bd972e83d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7bd950d4c2e74d6030230da200d50bd972e83d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9766b493fcb7de588d24f77767c7afb928db35c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9766b493fcb7de588d24f77767c7afb928db35c1", "html_url": "https://github.com/rust-lang/rust/commit/9766b493fcb7de588d24f77767c7afb928db35c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9766b493fcb7de588d24f77767c7afb928db35c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bff1ff810dcfa8064c11e2b84473f053d1f69f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bff1ff810dcfa8064c11e2b84473f053d1f69f1", "html_url": "https://github.com/rust-lang/rust/commit/1bff1ff810dcfa8064c11e2b84473f053d1f69f1"}, {"sha": "4530f8b2ef3a44eb976715f95c7bedb4c3905e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4530f8b2ef3a44eb976715f95c7bedb4c3905e61", "html_url": "https://github.com/rust-lang/rust/commit/4530f8b2ef3a44eb976715f95c7bedb4c3905e61"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "0e4de41959a33de9717bb41f8d73cdefac62a9a0", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9766b493fcb7de588d24f77767c7afb928db35c1/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9766b493fcb7de588d24f77767c7afb928db35c1/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=9766b493fcb7de588d24f77767c7afb928db35c1", "patch": "@@ -316,10 +316,24 @@ impl Tm {\n     }\n \n     /**\n-     * Return a string of the current time in the form\n-     * \"Thu Jan  1 00:00:00 1970\".\n+     * Returns a time string formatted according to the `asctime` format in ISO\n+     * C, in the local timezone.\n+     *\n+     * Example: \"Thu Jan  1 00:00:00 1970\"\n+     */\n+    pub fn ctime(&self) -> String {\n+        self.to_local().asctime()\n+    }\n+\n+    /**\n+     * Returns a time string formatted according to the `asctime` format in ISO\n+     * C.\n+     *\n+     * Example: \"Thu Jan  1 00:00:00 1970\"\n      */\n-    pub fn ctime(&self) -> String { self.strftime(\"%c\") }\n+    pub fn asctime(&self) -> String {\n+        self.strftime(\"%c\")\n+    }\n \n     /// Formats the time according to the format string.\n     pub fn strftime(&self, format: &str) -> String {\n@@ -1372,6 +1386,19 @@ mod tests {\n         assert_eq!(strptime(\"360\", \"%Y-%m-%d\"), Err(\"Invalid year\".to_string()))\n     }\n \n+    fn test_asctime() {\n+        set_time_zone();\n+\n+        let time = Timespec::new(1234567890, 54321);\n+        let utc   = at_utc(time);\n+        let local = at(time);\n+\n+        debug!(\"test_ctime: {:?} {:?}\", utc.asctime(), local.asctime());\n+\n+        assert_eq!(utc.asctime(), \"Fri Feb 13 23:31:30 2009\".to_string());\n+        assert_eq!(local.asctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n+    }\n+\n     fn test_ctime() {\n         set_time_zone();\n \n@@ -1381,7 +1408,7 @@ mod tests {\n \n         debug!(\"test_ctime: {:?} {:?}\", utc.ctime(), local.ctime());\n \n-        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_string());\n+        assert_eq!(utc.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n         assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n     }\n \n@@ -1436,11 +1463,13 @@ mod tests {\n         assert_eq!(local.strftime(\"%z\"), \"-0800\".to_string());\n         assert_eq!(local.strftime(\"%%\"), \"%\".to_string());\n \n+        assert_eq!(local.asctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n         assert_eq!(local.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n         assert_eq!(local.rfc822z(), \"Fri, 13 Feb 2009 15:31:30 -0800\".to_string());\n         assert_eq!(local.rfc3339(), \"2009-02-13T15:31:30-08:00\".to_string());\n \n-        assert_eq!(utc.ctime(), \"Fri Feb 13 23:31:30 2009\".to_string());\n+        assert_eq!(utc.asctime(), \"Fri Feb 13 23:31:30 2009\".to_string());\n+        assert_eq!(utc.ctime(), \"Fri Feb 13 15:31:30 2009\".to_string());\n         assert_eq!(utc.rfc822(), \"Fri, 13 Feb 2009 23:31:30 GMT\".to_string());\n         assert_eq!(utc.rfc822z(), \"Fri, 13 Feb 2009 23:31:30 -0000\".to_string());\n         assert_eq!(utc.rfc3339(), \"2009-02-13T23:31:30Z\".to_string());\n@@ -1489,6 +1518,7 @@ mod tests {\n         test_to_timespec();\n         test_conversions();\n         test_strptime();\n+        test_asctime();\n         test_ctime();\n         test_strftime();\n         test_timespec_eq_ord();"}]}