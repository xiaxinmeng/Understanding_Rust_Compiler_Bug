{"sha": "fbc17410b24719f2b3ff18f622bd677c76f59fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzE3NDEwYjI0NzE5ZjJiM2ZmMThmNjIyYmQ2NzdjNzZmNTlmZGU=", "commit": {"author": {"name": "Lonami", "email": "totufals@hotmail.com", "date": "2021-02-27T15:16:41Z"}, "committer": {"name": "Lonami Exo", "email": "totufals@hotmail.com", "date": "2021-03-06T15:01:01Z"}, "message": "Improve transmute docs with further clarifications\n\nCloses #82493.", "tree": {"sha": "d248b0ed12b09332c36372ba0481c871b3691845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d248b0ed12b09332c36372ba0481c871b3691845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc17410b24719f2b3ff18f622bd677c76f59fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc17410b24719f2b3ff18f622bd677c76f59fde", "html_url": "https://github.com/rust-lang/rust/commit/fbc17410b24719f2b3ff18f622bd677c76f59fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc17410b24719f2b3ff18f622bd677c76f59fde/comments", "author": {"login": "Lonami", "id": 6297805, "node_id": "MDQ6VXNlcjYyOTc4MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6297805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lonami", "html_url": "https://github.com/Lonami", "followers_url": "https://api.github.com/users/Lonami/followers", "following_url": "https://api.github.com/users/Lonami/following{/other_user}", "gists_url": "https://api.github.com/users/Lonami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lonami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lonami/subscriptions", "organizations_url": "https://api.github.com/users/Lonami/orgs", "repos_url": "https://api.github.com/users/Lonami/repos", "events_url": "https://api.github.com/users/Lonami/events{/privacy}", "received_events_url": "https://api.github.com/users/Lonami/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lonami", "id": 6297805, "node_id": "MDQ6VXNlcjYyOTc4MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6297805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lonami", "html_url": "https://github.com/Lonami", "followers_url": "https://api.github.com/users/Lonami/followers", "following_url": "https://api.github.com/users/Lonami/following{/other_user}", "gists_url": "https://api.github.com/users/Lonami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lonami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lonami/subscriptions", "organizations_url": "https://api.github.com/users/Lonami/orgs", "repos_url": "https://api.github.com/users/Lonami/repos", "events_url": "https://api.github.com/users/Lonami/events{/privacy}", "received_events_url": "https://api.github.com/users/Lonami/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3", "html_url": "https://github.com/rust-lang/rust/commit/8e863eb59a10fb0900d7377524a0dc7bf44b9ae3"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "9ca29b81c7d497a924a071e0bfa9ba7933c6b438", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fbc17410b24719f2b3ff18f622bd677c76f59fde/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc17410b24719f2b3ff18f622bd677c76f59fde/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=fbc17410b24719f2b3ff18f622bd677c76f59fde", "patch": "@@ -846,6 +846,12 @@ extern \"rust-intrinsic\" {\n     /// destination value, then forgets the original. It's equivalent to C's\n     /// `memcpy` under the hood, just like `transmute_copy`.\n     ///\n+    /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n+    /// themselves* is not a concern. As with any other function, the compiler already ensures\n+    /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n+    /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n+    /// alignment of the pointed-to values.\n+    ///\n     /// `transmute` is **incredibly** unsafe. There are a vast number of ways to\n     /// cause [undefined behavior][ub] with this function. `transmute` should be\n     /// the absolute last resort.\n@@ -965,7 +971,13 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(b\"Rust\", &[82, 117, 115, 116]);\n     /// ```\n     ///\n-    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n+    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`.\n+    ///\n+    /// To transmute the inner type of the contents of a container, you must make sure to not\n+    /// violate any of the container's invariants. For `Vec`, this means that both the size\n+    /// *and alignment* of the inner types have to match. Other containers might rely on the\n+    /// size of the type, alignment, or even the `TypeId`, in which case transmuting wouldn't\n+    /// be possible at all without violating the container invariants.\n     ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n@@ -991,14 +1003,11 @@ extern \"rust-intrinsic\" {\n     ///\n     /// let v_clone = v_orig.clone();\n     ///\n-    /// // The no-copy, unsafe way, still using transmute, but not relying on the data layout.\n-    /// // Like the first approach, this reuses the `Vec` internals.\n-    /// // Therefore, the new inner type must have the\n-    /// // exact same size, *and the same alignment*, as the old type.\n-    /// // The same caveats exist for this method as transmute, for\n-    /// // the original inner type (`&i32`) to the converted inner type\n-    /// // (`Option<&i32>`), so read the nomicon pages linked above and also\n-    /// // consult the [`from_raw_parts`] documentation.\n+    /// // This is the proper no-copy, unsafe way of \"transmuting\" a `Vec`, without relying on the\n+    /// // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but\n+    /// // in terms of converting the original inner type (`&i32`) to the new one (`Option<&i32>`),\n+    /// // this has all the same caveats. Besides the information provided above, also consult the\n+    /// // [`from_raw_parts`] documentation.\n     /// let v_from_raw = unsafe {\n     // FIXME Update this when vec_into_raw_parts is stabilized\n     ///     // Ensure the original vector is not dropped."}]}