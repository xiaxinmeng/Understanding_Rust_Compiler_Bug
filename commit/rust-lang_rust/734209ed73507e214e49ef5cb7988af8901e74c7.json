{"sha": "734209ed73507e214e49ef5cb7988af8901e74c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDIwOWVkNzM1MDdlMjE0ZTQ5ZWY1Y2I3OTg4YWY4OTAxZTc0Yzc=", "commit": {"author": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-09-06T21:11:28Z"}, "committer": {"name": "ThePuzzlemaker", "email": "tpzker@thepuzzlemaker.info", "date": "2021-09-06T21:30:44Z"}, "message": "Normalize assoc types when checking ret ty of main\n\nThis fixes #88609.\n\nPreviously, the return type of `fn main()` would not have any associated\ntype projections within normalized before checking if it implements the\nstandard library trait `std::process::Termination`. This commit appears\nto fix it.\n\nThis feels vaguely symptomatic of a problem in the underlying trait\nsolving engine, but I am not sure how I would solve that. I am unsure\nwhy the example in #88609 with `assert_impl_termination` and `fn foo()`\nwork, but simply `fn main()` doesn't. The way that I solved this is also\nprobably not the best way to do this, so please let me know if there is\na better way to do this.\n\nI have added a build-pass regression test for this issue.", "tree": {"sha": "c5d18c15ab264f37b15b6b09db90ed0129e7a930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d18c15ab264f37b15b6b09db90ed0129e7a930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734209ed73507e214e49ef5cb7988af8901e74c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEcJXCCpIkPbZRdwewlozZ1xyfu2wFAmE2iIwACgkQlozZ1xyf\nu2wlkgv/aqONAn9Evj9Mn+cALRHM9kXj+X4+Wm87SvqyhsJQ3dduKTPNlI/Ssnr2\nfaW1EHvPdxlqesfIQJeKhE8ERt9OvI3FFy9vfv+OMFu+JcYUOwUtLW+OoH/c/584\n33881zwmqEpGs4PYTs4MUCquiRmGDCB59OQ8Mosnw4lWr27eQ+pa2oY9HqatsUd9\niAQAt25u23hPl8jNfXAWDzfLjaer/4zZWonsPYf+pwo7x6/7JlPlSyF7EpDMBtzx\nUdBMEIYa+FhoBsagC32xgBgCpApxQ2heejHIklfd4HcOzd6ZbXiMN6g3jtBNGRqX\nnBB4krSoP69pNEcDbLtJNhqhddCf9WgKNdUXF9HzMvQZFy0TtxfqLDeGMpxFotf4\nBn6NRS5qHAkCebv/dtqvF8Lw1cxHjhjbU1lSsQfeceIImvuDSelyxP2UpHP1pBB3\n8TZ279SSCXVvQa9hmzh2nRP+LnZBVZB5IipQeoqrvAv0AzRvp0CocH0g1cYcyBge\nFfSG5QMV\n=BLNm\n-----END PGP SIGNATURE-----", "payload": "tree c5d18c15ab264f37b15b6b09db90ed0129e7a930\nparent 8ceea01bb442b9746a51b062ce25abbf46d866b2\nauthor ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1630962688 -0500\ncommitter ThePuzzlemaker <tpzker@thepuzzlemaker.info> 1630963844 -0500\n\nNormalize assoc types when checking ret ty of main\n\nThis fixes #88609.\n\nPreviously, the return type of `fn main()` would not have any associated\ntype projections within normalized before checking if it implements the\nstandard library trait `std::process::Termination`. This commit appears\nto fix it.\n\nThis feels vaguely symptomatic of a problem in the underlying trait\nsolving engine, but I am not sure how I would solve that. I am unsure\nwhy the example in #88609 with `assert_impl_termination` and `fn foo()`\nwork, but simply `fn main()` doesn't. The way that I solved this is also\nprobably not the best way to do this, so please let me know if there is\na better way to do this.\n\nI have added a build-pass regression test for this issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734209ed73507e214e49ef5cb7988af8901e74c7", "html_url": "https://github.com/rust-lang/rust/commit/734209ed73507e214e49ef5cb7988af8901e74c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734209ed73507e214e49ef5cb7988af8901e74c7/comments", "author": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThePuzzlemaker", "id": 12666617, "node_id": "MDQ6VXNlcjEyNjY2NjE3", "avatar_url": "https://avatars.githubusercontent.com/u/12666617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePuzzlemaker", "html_url": "https://github.com/ThePuzzlemaker", "followers_url": "https://api.github.com/users/ThePuzzlemaker/followers", "following_url": "https://api.github.com/users/ThePuzzlemaker/following{/other_user}", "gists_url": "https://api.github.com/users/ThePuzzlemaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePuzzlemaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePuzzlemaker/subscriptions", "organizations_url": "https://api.github.com/users/ThePuzzlemaker/orgs", "repos_url": "https://api.github.com/users/ThePuzzlemaker/repos", "events_url": "https://api.github.com/users/ThePuzzlemaker/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePuzzlemaker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ceea01bb442b9746a51b062ce25abbf46d866b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ceea01bb442b9746a51b062ce25abbf46d866b2", "html_url": "https://github.com/rust-lang/rust/commit/8ceea01bb442b9746a51b062ce25abbf46d866b2"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "e5d5ca3362bf4ae82bf83beca4f909b8c5b3b2f2", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/734209ed73507e214e49ef5cb7988af8901e74c7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734209ed73507e214e49ef5cb7988af8901e74c7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=734209ed73507e214e49ef5cb7988af8901e74c7", "patch": "@@ -109,6 +109,7 @@ use rustc_middle::util;\n use rustc_session::config::EntryFnType;\n use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt as _,\n@@ -328,7 +329,22 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n                 ObligationCauseCode::MainFunctionType,\n             );\n             let mut fulfillment_cx = traits::FulfillmentContext::new();\n-            fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), return_ty, term_id, cause);\n+            // normalize any potential projections in the return type, then add\n+            // any possible obligations to the fulfillment context.\n+            // HACK(ThePuzzlemaker) this feels symptomatic of a problem within\n+            // checking trait fulfillment, not this here. I'm not sure why it\n+            // works in the example in `fn test()` given in #88609? This also\n+            // probably isn't the best way to do this.\n+            let normalized = infcx.partially_normalize_associated_types_in(\n+                cause.clone(),\n+                ty::ParamEnv::empty(),\n+                return_ty,\n+            );\n+            let new_ty = normalized.value;\n+            for obligation in normalized.obligations {\n+                fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n+            }\n+            fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), new_ty, term_id, cause);\n             if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                 infcx.report_fulfillment_errors(&err, None, false);\n                 error = true;"}, {"sha": "dc459c885fa70fd56a9b1fd5516f9e570594beef", "filename": "src/test/ui/typeck/issue-88609.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/734209ed73507e214e49ef5cb7988af8901e74c7/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734209ed73507e214e49ef5cb7988af8901e74c7/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88609.rs?ref=734209ed73507e214e49ef5cb7988af8901e74c7", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #88609:\n+// The return type for `main` is not normalized while checking if it implements\n+// the trait `std::process::Termination`.\n+\n+// build-pass\n+\n+trait Same {\n+    type Output;\n+}\n+\n+impl<T> Same for T {\n+    type Output = T;\n+}\n+\n+type Unit = <() as Same>::Output;\n+\n+fn main() -> Result<Unit, std::io::Error> {\n+    unimplemented!()\n+}"}]}