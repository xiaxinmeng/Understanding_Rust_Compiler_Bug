{"sha": "6d8e300e350a7b91c86a616477e40d678cb71f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGUzMDBlMzUwYTdiOTFjODZhNjE2NDc3ZTQwZDY3OGNiNzFmNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T16:59:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-14T12:40:42Z"}, "message": "TAIT: feature gate recursive locations", "tree": {"sha": "86381c3e8a73a507d3632f191daa27d2c4149c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86381c3e8a73a507d3632f191daa27d2c4149c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8e300e350a7b91c86a616477e40d678cb71f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8e300e350a7b91c86a616477e40d678cb71f5a", "html_url": "https://github.com/rust-lang/rust/commit/6d8e300e350a7b91c86a616477e40d678cb71f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8e300e350a7b91c86a616477e40d678cb71f5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a49b523be28e3c2a408d7f8c95ab56f575eae85", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a49b523be28e3c2a408d7f8c95ab56f575eae85", "html_url": "https://github.com/rust-lang/rust/commit/6a49b523be28e3c2a408d7f8c95ab56f575eae85"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "b50b65faaac5c3e88cfd54abd661eb006613bb04", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6d8e300e350a7b91c86a616477e40d678cb71f5a/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8e300e350a7b91c86a616477e40d678cb71f5a/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=6d8e300e350a7b91c86a616477e40d678cb71f5a", "patch": "@@ -318,6 +318,27 @@ impl<'a> PostExpansionVisitor<'a> {\n             );\n         }\n     }\n+\n+    /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n+    fn check_impl_trait(&self, ty: &ast::Ty) {\n+        struct ImplTraitVisitor<'a> {\n+            vis: &'a PostExpansionVisitor<'a>,\n+        }\n+        impl Visitor<'_> for ImplTraitVisitor<'_> {\n+            fn visit_ty(&mut self, ty: &ast::Ty) {\n+                if let ast::TyKind::ImplTrait(..) = ty.kind {\n+                    gate_feature_post!(\n+                        &self.vis,\n+                        type_alias_impl_trait,\n+                        ty.span,\n+                        \"`impl Trait` in type aliases is unstable\"\n+                    );\n+                }\n+                visit::walk_ty(self, ty);\n+            }\n+        }\n+        ImplTraitVisitor { vis: self }.visit_ty(ty);\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -452,14 +473,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n-            ast::ItemKind::OpaqueTy(..) => {\n-                gate_feature_post!(\n-                    &self,\n-                    type_alias_impl_trait,\n-                    i.span,\n-                    \"`impl Trait` in type aliases is unstable\"\n-                );\n-            }\n+            ast::ItemKind::TyAlias(ref ty, ..) => self.check_impl_trait(&ty),\n \n             _ => {}\n         }\n@@ -633,9 +647,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n             ast::TraitItemKind::Type(_, ref default) => {\n-                // We use three if statements instead of something like match guards so that all\n-                // of these errors can be emitted if all cases apply.\n-                if default.is_some() {\n+                if let Some(ty) = default {\n+                    self.check_impl_trait(ty);\n                     gate_feature_post!(&self, associated_type_defaults, ti.span,\n                                        \"associated type defaults are unstable\");\n                 }\n@@ -660,15 +673,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        \"C-variadic functions are unstable\");\n                 }\n             }\n-            ast::ImplItemKind::OpaqueTy(..) => {\n-                gate_feature_post!(\n-                    &self,\n-                    type_alias_impl_trait,\n-                    ii.span,\n-                    \"`impl Trait` in type aliases is unstable\"\n-                );\n-            }\n-            ast::ImplItemKind::TyAlias(_) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n+                self.check_impl_trait(ty);\n                 self.check_gat(&ii.generics, ii.span);\n             }\n             _ => {}"}]}