{"sha": "0939837867e77f478dcd3735f3a6ce8823f5fd48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Mzk4Mzc4NjdlNzdmNDc4ZGNkMzczNWYzYTZjZTg4MjNmNWZkNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-09T20:39:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T13:51:17Z"}, "message": "Rename the cryptic cres and ures types.", "tree": {"sha": "686b18a44f6c1c7d93ebaf9331d3b2541dd28f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/686b18a44f6c1c7d93ebaf9331d3b2541dd28f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0939837867e77f478dcd3735f3a6ce8823f5fd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0939837867e77f478dcd3735f3a6ce8823f5fd48", "html_url": "https://github.com/rust-lang/rust/commit/0939837867e77f478dcd3735f3a6ce8823f5fd48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0939837867e77f478dcd3735f3a6ce8823f5fd48/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3317d68910900f135f9f38e43a7a699bc736b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3317d68910900f135f9f38e43a7a699bc736b4a", "html_url": "https://github.com/rust-lang/rust/commit/b3317d68910900f135f9f38e43a7a699bc736b4a"}], "stats": {"total": 303, "additions": 138, "deletions": 165}, "files": [{"sha": "91e1fea7ca52e8ccdde821b406dc7cb1b693c5f5", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -29,7 +29,7 @@ use middle::ty::BuiltinBounds;\n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n use middle::infer::combine::*;\n-use middle::infer::cres;\n+use middle::infer::CombineResult;\n use middle::infer::type_variable::BiTo;\n use util::ppaux::Repr;\n \n@@ -47,7 +47,7 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n     fn fields<'a>(&'a self) -> &'a CombineFields<'a, 'tcx> { &self.fields }\n \n     fn tys_with_variance(&self, v: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>\n+                         -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         match v {\n             ty::Invariant => self.equate().tys(a, b),\n@@ -58,7 +58,7 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n     }\n \n     fn regions_with_variance(&self, v: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>\n+                             -> CombineResult<'tcx, ty::Region>\n     {\n         match v {\n             ty::Invariant => self.equate().regions(a, b),\n@@ -68,14 +68,14 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n         }\n     }\n \n-    fn regions(&self, a: ty::Region, _: ty::Region) -> cres<'tcx, ty::Region> {\n+    fn regions(&self, a: ty::Region, _: ty::Region) -> CombineResult<'tcx, ty::Region> {\n         Ok(a)\n     }\n \n     fn builtin_bounds(&self,\n                       a: BuiltinBounds,\n                       b: BuiltinBounds)\n-                      -> cres<'tcx, BuiltinBounds>\n+                      -> CombineResult<'tcx, BuiltinBounds>\n     {\n         if a != b {\n             Err(ty::terr_builtin_bounds(expected_found(self, a, b)))\n@@ -84,7 +84,7 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n         }\n     }\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         debug!(\"{}.tys({}, {})\", self.tag(),\n                a.repr(self.fields.infcx.tcx), b.repr(self.fields.infcx.tcx));\n         if a == b { return Ok(a); }\n@@ -114,7 +114,7 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n         }\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         let a1 = ty::erase_late_bound_regions(self.tcx(), a);"}, {"sha": "220a23b183a982ab4a54631eee1549d474c4d532", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -38,7 +38,7 @@ use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n use super::unify::InferCtxtMethodsForSimplyUnifiableTypes;\n-use super::{InferCtxt, cres};\n+use super::{InferCtxt, CombineResult};\n use super::{MiscVariable, TypeTrace};\n use super::type_variable::{RelationDir, BiTo, EqTo, SubtypeOf, SupertypeOf};\n \n@@ -74,7 +74,7 @@ pub trait Combine<'tcx> : Sized {\n     fn lub<'a>(&'a self) -> Lub<'a, 'tcx> { Lub(self.fields().clone()) }\n     fn glb<'a>(&'a self) -> Glb<'a, 'tcx> { Glb(self.fields().clone()) }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n+    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> CombineResult<'tcx, ty::mt<'tcx>> {\n         debug!(\"{}.mts({}, {})\",\n                self.tag(),\n                a.repr(self.tcx()),\n@@ -94,20 +94,20 @@ pub trait Combine<'tcx> : Sized {\n     }\n \n     fn tys_with_variance(&self, variance: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>;\n+                         -> CombineResult<'tcx, Ty<'tcx>>;\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>>;\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>>;\n \n     fn regions_with_variance(&self, variance: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>;\n+                             -> CombineResult<'tcx, ty::Region>;\n \n-    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region>;\n+    fn regions(&self, a: ty::Region, b: ty::Region) -> CombineResult<'tcx, ty::Region>;\n \n     fn substs(&self,\n               item_def_id: ast::DefId,\n               a_subst: &subst::Substs<'tcx>,\n               b_subst: &subst::Substs<'tcx>)\n-              -> cres<'tcx, subst::Substs<'tcx>>\n+              -> CombineResult<'tcx, subst::Substs<'tcx>>\n     {\n         debug!(\"substs: item_def_id={} a_subst={} b_subst={}\",\n                item_def_id.repr(self.infcx().tcx),\n@@ -126,7 +126,7 @@ pub trait Combine<'tcx> : Sized {\n                         variances: Option<&ty::ItemVariances>,\n                         a_subst: &subst::Substs<'tcx>,\n                         b_subst: &subst::Substs<'tcx>)\n-                        -> cres<'tcx, subst::Substs<'tcx>>\n+                        -> CombineResult<'tcx, subst::Substs<'tcx>>\n     {\n         let mut substs = subst::Substs::empty();\n \n@@ -163,7 +163,7 @@ pub trait Combine<'tcx> : Sized {\n                                                       variances: Option<&[ty::Variance]>,\n                                                       a_tys: &[Ty<'tcx>],\n                                                       b_tys: &[Ty<'tcx>])\n-                                                      -> cres<'tcx, Vec<Ty<'tcx>>>\n+                                                      -> CombineResult<'tcx, Vec<Ty<'tcx>>>\n         {\n             if a_tys.len() != b_tys.len() {\n                 return Err(ty::terr_ty_param_size(expected_found(this,\n@@ -183,7 +183,7 @@ pub trait Combine<'tcx> : Sized {\n                                                         variances: Option<&[ty::Variance]>,\n                                                         a_rs: &[ty::Region],\n                                                         b_rs: &[ty::Region])\n-                                                        -> cres<'tcx, Vec<ty::Region>>\n+                                                        -> CombineResult<'tcx, Vec<ty::Region>>\n         {\n             let tcx = this.infcx().tcx;\n             let num_region_params = a_rs.len();\n@@ -212,7 +212,7 @@ pub trait Combine<'tcx> : Sized {\n     }\n \n     fn bare_fn_tys(&self, a: &ty::BareFnTy<'tcx>,\n-                   b: &ty::BareFnTy<'tcx>) -> cres<'tcx, ty::BareFnTy<'tcx>> {\n+                   b: &ty::BareFnTy<'tcx>) -> CombineResult<'tcx, ty::BareFnTy<'tcx>> {\n         let unsafety = try!(self.unsafeties(a.unsafety, b.unsafety));\n         let abi = try!(self.abi(a.abi, b.abi));\n         let sig = try!(self.binders(&a.sig, &b.sig));\n@@ -221,7 +221,7 @@ pub trait Combine<'tcx> : Sized {\n                          sig: sig})\n     }\n \n-    fn fn_sigs(&self, a: &ty::FnSig<'tcx>, b: &ty::FnSig<'tcx>) -> cres<'tcx, ty::FnSig<'tcx>> {\n+    fn fn_sigs(&self, a: &ty::FnSig<'tcx>, b: &ty::FnSig<'tcx>) -> CombineResult<'tcx, ty::FnSig<'tcx>> {\n         if a.variadic != b.variadic {\n             return Err(ty::terr_variadic_mismatch(expected_found(self, a.variadic, b.variadic)));\n         }\n@@ -248,7 +248,7 @@ pub trait Combine<'tcx> : Sized {\n         fn argvecs<'tcx, C>(combiner: &C,\n                             a_args: &[Ty<'tcx>],\n                             b_args: &[Ty<'tcx>])\n-                            -> cres<'tcx, Vec<Ty<'tcx>>>\n+                            -> CombineResult<'tcx, Vec<Ty<'tcx>>>\n                             where C: Combine<'tcx> {\n             if a_args.len() == b_args.len() {\n                 a_args.iter().zip(b_args.iter())\n@@ -259,19 +259,19 @@ pub trait Combine<'tcx> : Sized {\n         }\n     }\n \n-    fn args(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn args(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         self.tys_with_variance(ty::Contravariant, a, b).and_then(|t| Ok(t))\n     }\n \n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> CombineResult<'tcx, Unsafety> {\n         if a != b {\n             Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n         } else {\n             Ok(a)\n         }\n     }\n \n-    fn abi(&self, a: abi::Abi, b: abi::Abi) -> cres<'tcx, abi::Abi> {\n+    fn abi(&self, a: abi::Abi, b: abi::Abi) -> CombineResult<'tcx, abi::Abi> {\n         if a == b {\n             Ok(a)\n         } else {\n@@ -282,7 +282,7 @@ pub trait Combine<'tcx> : Sized {\n     fn projection_tys(&self,\n                       a: &ty::ProjectionTy<'tcx>,\n                       b: &ty::ProjectionTy<'tcx>)\n-                      -> cres<'tcx, ty::ProjectionTy<'tcx>>\n+                      -> CombineResult<'tcx, ty::ProjectionTy<'tcx>>\n     {\n         if a.item_name != b.item_name {\n             Err(ty::terr_projection_name_mismatched(\n@@ -296,7 +296,7 @@ pub trait Combine<'tcx> : Sized {\n     fn projection_predicates(&self,\n                              a: &ty::ProjectionPredicate<'tcx>,\n                              b: &ty::ProjectionPredicate<'tcx>)\n-                             -> cres<'tcx, ty::ProjectionPredicate<'tcx>>\n+                             -> CombineResult<'tcx, ty::ProjectionPredicate<'tcx>>\n     {\n         let projection_ty = try!(self.projection_tys(&a.projection_ty, &b.projection_ty));\n         let ty = try!(self.tys(a.ty, b.ty));\n@@ -306,7 +306,7 @@ pub trait Combine<'tcx> : Sized {\n     fn projection_bounds(&self,\n                          a: &Vec<ty::PolyProjectionPredicate<'tcx>>,\n                          b: &Vec<ty::PolyProjectionPredicate<'tcx>>)\n-                         -> cres<'tcx, Vec<ty::PolyProjectionPredicate<'tcx>>>\n+                         -> CombineResult<'tcx, Vec<ty::PolyProjectionPredicate<'tcx>>>\n     {\n         // To be compatible, `a` and `b` must be for precisely the\n         // same set of traits and item names. We always require that\n@@ -326,7 +326,7 @@ pub trait Combine<'tcx> : Sized {\n     fn existential_bounds(&self,\n                           a: &ty::ExistentialBounds<'tcx>,\n                           b: &ty::ExistentialBounds<'tcx>)\n-                          -> cres<'tcx, ty::ExistentialBounds<'tcx>>\n+                          -> CombineResult<'tcx, ty::ExistentialBounds<'tcx>>\n     {\n         let r = try!(self.regions_with_variance(ty::Contravariant, a.region_bound, b.region_bound));\n         let nb = try!(self.builtin_bounds(a.builtin_bounds, b.builtin_bounds));\n@@ -339,7 +339,7 @@ pub trait Combine<'tcx> : Sized {\n     fn builtin_bounds(&self,\n                       a: BuiltinBounds,\n                       b: BuiltinBounds)\n-                      -> cres<'tcx, BuiltinBounds>\n+                      -> CombineResult<'tcx, BuiltinBounds>\n     {\n         // Two sets of builtin bounds are only relatable if they are\n         // precisely the same (but see the coercion code).\n@@ -353,7 +353,7 @@ pub trait Combine<'tcx> : Sized {\n     fn trait_refs(&self,\n                   a: &ty::TraitRef<'tcx>,\n                   b: &ty::TraitRef<'tcx>)\n-                  -> cres<'tcx, ty::TraitRef<'tcx>>\n+                  -> CombineResult<'tcx, ty::TraitRef<'tcx>>\n     {\n         // Different traits cannot be related\n         if a.def_id != b.def_id {\n@@ -364,14 +364,14 @@ pub trait Combine<'tcx> : Sized {\n         }\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>;\n     // this must be overridden to do correctly, so as to account for higher-ranked\n     // behavior\n }\n \n pub trait Combineable<'tcx> : Repr<'tcx> + TypeFoldable<'tcx> {\n-    fn combine<C:Combine<'tcx>>(combiner: &C, a: &Self, b: &Self) -> cres<'tcx, Self>;\n+    fn combine<C:Combine<'tcx>>(combiner: &C, a: &Self, b: &Self) -> CombineResult<'tcx, Self>;\n }\n \n impl<'tcx,T> Combineable<'tcx> for Rc<T>\n@@ -380,7 +380,7 @@ impl<'tcx,T> Combineable<'tcx> for Rc<T>\n     fn combine<C>(combiner: &C,\n                   a: &Rc<T>,\n                   b: &Rc<T>)\n-                  -> cres<'tcx, Rc<T>>\n+                  -> CombineResult<'tcx, Rc<T>>\n                   where C: Combine<'tcx> {\n         Ok(Rc::new(try!(Combineable::combine(combiner, &**a, &**b))))\n     }\n@@ -390,7 +390,7 @@ impl<'tcx> Combineable<'tcx> for ty::TraitRef<'tcx> {\n     fn combine<C>(combiner: &C,\n                   a: &ty::TraitRef<'tcx>,\n                   b: &ty::TraitRef<'tcx>)\n-                  -> cres<'tcx, ty::TraitRef<'tcx>>\n+                  -> CombineResult<'tcx, ty::TraitRef<'tcx>>\n                   where C: Combine<'tcx> {\n         combiner.trait_refs(a, b)\n     }\n@@ -400,7 +400,7 @@ impl<'tcx> Combineable<'tcx> for Ty<'tcx> {\n     fn combine<C>(combiner: &C,\n                   a: &Ty<'tcx>,\n                   b: &Ty<'tcx>)\n-                  -> cres<'tcx, Ty<'tcx>>\n+                  -> CombineResult<'tcx, Ty<'tcx>>\n                   where C: Combine<'tcx> {\n         combiner.tys(*a, *b)\n     }\n@@ -410,7 +410,7 @@ impl<'tcx> Combineable<'tcx> for ty::ProjectionPredicate<'tcx> {\n     fn combine<C>(combiner: &C,\n                   a: &ty::ProjectionPredicate<'tcx>,\n                   b: &ty::ProjectionPredicate<'tcx>)\n-                  -> cres<'tcx, ty::ProjectionPredicate<'tcx>>\n+                  -> CombineResult<'tcx, ty::ProjectionPredicate<'tcx>>\n                   where C: Combine<'tcx> {\n         combiner.projection_predicates(a, b)\n     }\n@@ -420,7 +420,7 @@ impl<'tcx> Combineable<'tcx> for ty::FnSig<'tcx> {\n     fn combine<C>(combiner: &C,\n                   a: &ty::FnSig<'tcx>,\n                   b: &ty::FnSig<'tcx>)\n-                  -> cres<'tcx, ty::FnSig<'tcx>>\n+                  -> CombineResult<'tcx, ty::FnSig<'tcx>>\n                   where C: Combine<'tcx> {\n         combiner.fn_sigs(a, b)\n     }\n@@ -448,7 +448,7 @@ pub fn expected_found<'tcx, C, T>(this: &C,\n pub fn super_tys<'tcx, C>(this: &C,\n                           a: Ty<'tcx>,\n                           b: Ty<'tcx>)\n-                          -> cres<'tcx, Ty<'tcx>>\n+                          -> CombineResult<'tcx, Ty<'tcx>>\n                           where C: Combine<'tcx> {\n     let tcx = this.infcx().tcx;\n     let a_sty = &a.sty;\n@@ -616,7 +616,7 @@ pub fn super_tys<'tcx, C>(this: &C,\n                                         vid_is_expected: bool,\n                                         vid: ty::IntVid,\n                                         val: ty::IntVarValue)\n-                                        -> cres<'tcx, Ty<'tcx>>\n+                                        -> CombineResult<'tcx, Ty<'tcx>>\n                                         where C: Combine<'tcx> {\n         try!(this.infcx().simple_var_t(vid_is_expected, vid, val));\n         match val {\n@@ -629,7 +629,7 @@ pub fn super_tys<'tcx, C>(this: &C,\n                                      vid_is_expected: bool,\n                                      vid: ty::FloatVid,\n                                      val: ast::FloatTy)\n-                                     -> cres<'tcx, Ty<'tcx>>\n+                                     -> CombineResult<'tcx, Ty<'tcx>>\n                                      where C: Combine<'tcx> {\n         try!(this.infcx().simple_var_t(vid_is_expected, vid, val));\n         Ok(ty::mk_mach_float(this.tcx(), val))\n@@ -660,7 +660,7 @@ impl<'f, 'tcx> CombineFields<'f, 'tcx> {\n                        a_ty: Ty<'tcx>,\n                        dir: RelationDir,\n                        b_vid: ty::TyVid)\n-                       -> cres<'tcx, ()>\n+                       -> CombineResult<'tcx, ()>\n     {\n         let tcx = self.infcx.tcx;\n         let mut stack = Vec::new();\n@@ -746,7 +746,7 @@ impl<'f, 'tcx> CombineFields<'f, 'tcx> {\n                   ty: Ty<'tcx>,\n                   for_vid: ty::TyVid,\n                   make_region_vars: bool)\n-                  -> cres<'tcx, Ty<'tcx>>\n+                  -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         let mut generalize = Generalizer {\n             infcx: self.infcx,\n@@ -839,3 +839,23 @@ impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n         self.infcx.next_region_var(MiscVariable(self.span))\n     }\n }\n+\n+pub trait CombineResultCompare<'tcx, T> {\n+    fn compare<F>(&self, t: T, f: F) -> CombineResult<'tcx, T> where\n+        F: FnOnce() -> ty::type_err<'tcx>;\n+}\n+\n+impl<'tcx, T:Clone + PartialEq> CombineResultCompare<'tcx, T> for CombineResult<'tcx, T> {\n+    fn compare<F>(&self, t: T, f: F) -> CombineResult<'tcx, T> where\n+        F: FnOnce() -> ty::type_err<'tcx>,\n+    {\n+        (*self).clone().and_then(|s| {\n+            if s == t {\n+                (*self).clone()\n+            } else {\n+                Err(f())\n+            }\n+        })\n+    }\n+}\n+"}, {"sha": "59394d1dd37157c4f885ba3fd3cc5fca1bb4c788", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -11,7 +11,7 @@\n use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n use middle::infer::combine::*;\n-use middle::infer::cres;\n+use middle::infer::CombineResult;\n use middle::infer::Subtype;\n use middle::infer::type_variable::EqTo;\n use util::ppaux::Repr;\n@@ -30,20 +30,20 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n     fn fields<'a>(&'a self) -> &'a CombineFields<'a, 'tcx> { &self.fields }\n \n     fn tys_with_variance(&self, _: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>\n+                         -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         // Once we're equating, it doesn't matter what the variance is.\n         self.tys(a, b)\n     }\n \n     fn regions_with_variance(&self, _: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>\n+                             -> CombineResult<'tcx, ty::Region>\n     {\n         // Once we're equating, it doesn't matter what the variance is.\n         self.regions(a, b)\n     }\n \n-    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n+    fn regions(&self, a: ty::Region, b: ty::Region) -> CombineResult<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),\n                a.repr(self.fields.infcx.tcx),\n@@ -52,7 +52,7 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         debug!(\"{}.tys({}, {})\", self.tag(),\n                a.repr(self.fields.infcx.tcx), b.repr(self.fields.infcx.tcx));\n         if a == b { return Ok(a); }\n@@ -82,7 +82,7 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         }\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         try!(self.sub().binders(a, b));"}, {"sha": "28c0b4df7f40224c299d64213fd9a3bce3faf9c5", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -11,7 +11,7 @@\n use super::combine::*;\n use super::lattice::*;\n use super::higher_ranked::HigherRankedRelations;\n-use super::cres;\n+use super::CombineResult;\n use super::Subtype;\n \n use middle::ty::{self, Ty};\n@@ -32,7 +32,7 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n     fn fields<'a>(&'a self) -> &'a CombineFields<'a, 'tcx> { &self.fields }\n \n     fn tys_with_variance(&self, v: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>\n+                         -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         match v {\n             ty::Invariant => self.equate().tys(a, b),\n@@ -43,7 +43,7 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n     }\n \n     fn regions_with_variance(&self, v: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>\n+                             -> CombineResult<'tcx, ty::Region>\n     {\n         match v {\n             ty::Invariant => self.equate().regions(a, b),\n@@ -53,7 +53,7 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         }\n     }\n \n-    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n+    fn regions(&self, a: ty::Region, b: ty::Region) -> CombineResult<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),\n                a.repr(self.fields.infcx.tcx),\n@@ -62,11 +62,11 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         Ok(self.fields.infcx.region_vars.glb_regions(Subtype(self.trace()), a, b))\n     }\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         super_lattice_tys(self, a, b)\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         self.higher_ranked_glb(a, b)"}, {"sha": "3754f52d0585dd2e1d3cf66f664e341f3978a041", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -11,7 +11,7 @@\n //! Helper routines for higher-ranked things. See the `doc` module at\n //! the end of the file for details.\n \n-use super::{CombinedSnapshot, cres, InferCtxt, HigherRankedType, SkolemizationMap};\n+use super::{CombinedSnapshot, CombineResult, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::{Combine, Combineable};\n \n use middle::subst;\n@@ -22,13 +22,13 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n pub trait HigherRankedRelations<'tcx> {\n-    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> cres<'tcx, Binder<T>>\n+    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>;\n \n-    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> cres<'tcx, Binder<T>>\n+    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>;\n \n-    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> cres<'tcx, Binder<T>>\n+    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>;\n }\n \n@@ -44,7 +44,7 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n     where C : Combine<'tcx>\n {\n     fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>)\n-                            -> cres<'tcx, Binder<T>>\n+                            -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         debug!(\"higher_ranked_sub(a={}, b={})\",\n@@ -104,7 +104,7 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n         });\n     }\n \n-    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> cres<'tcx, Binder<T>>\n+    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         // Start a snapshot so we can examine \"all bindings that were\n@@ -194,7 +194,7 @@ impl<'tcx,C> HigherRankedRelations<'tcx> for C\n         }\n     }\n \n-    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> cres<'tcx, Binder<T>>\n+    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> CombineResult<'tcx, Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         debug!(\"{}.higher_ranked_glb({}, {})\","}, {"sha": "6cbf20f26aefd7b03a77ac7a3bd165dcd108b156", "filename": "src/librustc/middle/infer/lattice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -41,11 +41,11 @@ use util::ppaux::Repr;\n pub trait LatticeDir<'tcx> {\n     // Relates the type `v` to `a` and `b` such that `v` represents\n     // the LUB/GLB of `a` and `b` as appropriate.\n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, ()>;\n+    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, ()>;\n }\n \n impl<'a, 'tcx> LatticeDir<'tcx> for Lub<'a, 'tcx> {\n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, ()> {\n+    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, ()> {\n         let sub = self.sub();\n         try!(sub.tys(a, v));\n         try!(sub.tys(b, v));\n@@ -54,7 +54,7 @@ impl<'a, 'tcx> LatticeDir<'tcx> for Lub<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> LatticeDir<'tcx> for Glb<'a, 'tcx> {\n-    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, ()> {\n+    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, ()> {\n         let sub = self.sub();\n         try!(sub.tys(v, a));\n         try!(sub.tys(v, b));\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> LatticeDir<'tcx> for Glb<'a, 'tcx> {\n pub fn super_lattice_tys<'tcx, L:LatticeDir<'tcx>+Combine<'tcx>>(this: &L,\n                                                                  a: Ty<'tcx>,\n                                                                  b: Ty<'tcx>)\n-                                                                 -> cres<'tcx, Ty<'tcx>>\n+                                                                 -> CombineResult<'tcx, Ty<'tcx>>\n {\n     debug!(\"{}.lattice_tys({}, {})\",\n            this.tag(),"}, {"sha": "123b6cbcc0a6c1e374b358e3e8eb71c3ce585891", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -11,7 +11,7 @@\n use super::combine::*;\n use super::higher_ranked::HigherRankedRelations;\n use super::lattice::*;\n-use super::cres;\n+use super::CombineResult;\n use super::Subtype;\n \n use middle::ty::{self, Ty};\n@@ -32,7 +32,7 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n     fn fields<'a>(&'a self) -> &'a CombineFields<'a, 'tcx> { &self.fields }\n \n     fn tys_with_variance(&self, v: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>\n+                         -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         match v {\n             ty::Invariant => self.equate().tys(a, b),\n@@ -43,7 +43,7 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n     }\n \n     fn regions_with_variance(&self, v: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>\n+                             -> CombineResult<'tcx, ty::Region>\n     {\n         match v {\n             ty::Invariant => self.equate().regions(a, b),\n@@ -53,7 +53,7 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         }\n     }\n \n-    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n+    fn regions(&self, a: ty::Region, b: ty::Region) -> CombineResult<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),\n                a.repr(self.tcx()),\n@@ -62,11 +62,11 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         Ok(self.infcx().region_vars.lub_regions(Subtype(self.trace()), a, b))\n     }\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         super_lattice_tys(self, a, b)\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         self.higher_ranked_lub(a, b)"}, {"sha": "bb94d95dc571f9fbd30ad5d2d3b4c119b2f75f75", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 21, "deletions": 72, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -63,8 +63,8 @@ pub mod unify;\n \n pub type Bound<T> = Option<T>;\n \n-pub type cres<'tcx, T> = Result<T,ty::type_err<'tcx>>; // \"combine result\"\n-pub type ures<'tcx> = cres<'tcx, ()>; // \"unify result\"\n+pub type CombineResult<'tcx, T> = Result<T,ty::type_err<'tcx>>; // \"combine result\"\n+pub type UnitResult<'tcx> = CombineResult<'tcx, ()>; // \"unify result\"\n pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n \n pub struct InferCtxt<'a, 'tcx: 'a> {\n@@ -359,7 +359,7 @@ pub fn mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n                           origin: TypeOrigin,\n                           a: Ty<'tcx>,\n                           b: Ty<'tcx>)\n-                          -> ures<'tcx>\n+                          -> UnitResult<'tcx>\n {\n     debug!(\"mk_subty({} <: {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n     cx.commit_if_ok(|| {\n@@ -370,18 +370,18 @@ pub fn mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n pub fn can_mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n                               a: Ty<'tcx>,\n                               b: Ty<'tcx>)\n-                              -> ures<'tcx> {\n+                              -> UnitResult<'tcx> {\n     debug!(\"can_mk_subty({} <: {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n     cx.probe(|_| {\n         let trace = TypeTrace {\n             origin: Misc(codemap::DUMMY_SP),\n             values: Types(expected_found(true, a, b))\n         };\n-        cx.sub(true, trace).tys(a, b).to_ures()\n+        cx.sub(true, trace).tys(a, b).map(|_| ())\n     })\n }\n \n-pub fn can_mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> ures<'tcx>\n+pub fn can_mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> UnitResult<'tcx>\n {\n     cx.can_equate(&a, &b)\n }\n@@ -401,7 +401,7 @@ pub fn mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n                          origin: TypeOrigin,\n                          a: Ty<'tcx>,\n                          b: Ty<'tcx>)\n-                         -> ures<'tcx>\n+                         -> UnitResult<'tcx>\n {\n     debug!(\"mk_eqty({} <: {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n     cx.commit_if_ok(\n@@ -413,7 +413,7 @@ pub fn mk_sub_poly_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n                                    origin: TypeOrigin,\n                                    a: ty::PolyTraitRef<'tcx>,\n                                    b: ty::PolyTraitRef<'tcx>)\n-                                   -> ures<'tcx>\n+                                   -> UnitResult<'tcx>\n {\n     debug!(\"mk_sub_trait_refs({} <: {})\",\n            a.repr(cx.tcx), b.repr(cx.tcx));\n@@ -433,57 +433,6 @@ fn expected_found<T>(a_is_expected: bool,\n     }\n }\n \n-trait then<'tcx> {\n-    fn then<T, F>(&self, f: F) -> Result<T, ty::type_err<'tcx>> where\n-        T: Clone,\n-        F: FnOnce() -> Result<T, ty::type_err<'tcx>>;\n-}\n-\n-impl<'tcx> then<'tcx> for ures<'tcx> {\n-    fn then<T, F>(&self, f: F) -> Result<T, ty::type_err<'tcx>> where\n-        T: Clone,\n-        F: FnOnce() -> Result<T, ty::type_err<'tcx>>,\n-    {\n-        self.and_then(move |_| f())\n-    }\n-}\n-\n-trait ToUres<'tcx> {\n-    fn to_ures(&self) -> ures<'tcx>;\n-}\n-\n-impl<'tcx, T> ToUres<'tcx> for cres<'tcx, T> {\n-    fn to_ures(&self) -> ures<'tcx> {\n-        match *self {\n-          Ok(ref _v) => Ok(()),\n-          Err(ref e) => Err((*e))\n-        }\n-    }\n-}\n-\n-trait CresCompare<'tcx, T> {\n-    fn compare<F>(&self, t: T, f: F) -> cres<'tcx, T> where\n-        F: FnOnce() -> ty::type_err<'tcx>;\n-}\n-\n-impl<'tcx, T:Clone + PartialEq> CresCompare<'tcx, T> for cres<'tcx, T> {\n-    fn compare<F>(&self, t: T, f: F) -> cres<'tcx, T> where\n-        F: FnOnce() -> ty::type_err<'tcx>,\n-    {\n-        (*self).clone().and_then(move |s| {\n-            if s == t {\n-                (*self).clone()\n-            } else {\n-                Err(f())\n-            }\n-        })\n-    }\n-}\n-\n-pub fn uok<'tcx>() -> ures<'tcx> {\n-    Ok(())\n-}\n-\n #[must_use = \"once you start a snapshot, you should always consume it\"]\n pub struct CombinedSnapshot {\n     type_snapshot: type_variable::Snapshot,\n@@ -691,12 +640,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                      origin: TypeOrigin,\n                      a: Ty<'tcx>,\n                      b: Ty<'tcx>)\n-                     -> ures<'tcx>\n+                     -> UnitResult<'tcx>\n     {\n         debug!(\"sub_types({} <: {})\", a.repr(self.tcx), b.repr(self.tcx));\n         self.commit_if_ok(|| {\n             let trace = TypeTrace::types(origin, a_is_expected, a, b);\n-            self.sub(a_is_expected, trace).tys(a, b).to_ures()\n+            self.sub(a_is_expected, trace).tys(a, b).map(|_| ())\n         })\n     }\n \n@@ -705,11 +654,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     origin: TypeOrigin,\n                     a: Ty<'tcx>,\n                     b: Ty<'tcx>)\n-                    -> ures<'tcx>\n+                    -> UnitResult<'tcx>\n     {\n         self.commit_if_ok(|| {\n             let trace = TypeTrace::types(origin, a_is_expected, a, b);\n-            self.equate(a_is_expected, trace).tys(a, b).to_ures()\n+            self.equate(a_is_expected, trace).tys(a, b).map(|_| ())\n         })\n     }\n \n@@ -718,7 +667,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                           origin: TypeOrigin,\n                           a: Rc<ty::TraitRef<'tcx>>,\n                           b: Rc<ty::TraitRef<'tcx>>)\n-                          -> ures<'tcx>\n+                          -> UnitResult<'tcx>\n     {\n         debug!(\"sub_trait_refs({} <: {})\",\n                a.repr(self.tcx),\n@@ -728,7 +677,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 origin: origin,\n                 values: TraitRefs(expected_found(a_is_expected, a.clone(), b.clone()))\n             };\n-            self.sub(a_is_expected, trace).trait_refs(&*a, &*b).to_ures()\n+            self.sub(a_is_expected, trace).trait_refs(&*a, &*b).map(|_| ())\n         })\n     }\n \n@@ -737,7 +686,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                origin: TypeOrigin,\n                                a: ty::PolyTraitRef<'tcx>,\n                                b: ty::PolyTraitRef<'tcx>)\n-                               -> ures<'tcx>\n+                               -> UnitResult<'tcx>\n     {\n         debug!(\"sub_poly_trait_refs({} <: {})\",\n                a.repr(self.tcx),\n@@ -747,7 +696,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 origin: origin,\n                 values: PolyTraitRefs(expected_found(a_is_expected, a.clone(), b.clone()))\n             };\n-            self.sub(a_is_expected, trace).binders(&a, &b).to_ures()\n+            self.sub(a_is_expected, trace).binders(&a, &b).map(|_| ())\n         })\n     }\n \n@@ -774,7 +723,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn leak_check(&self,\n                       skol_map: &SkolemizationMap,\n                       snapshot: &CombinedSnapshot)\n-                      -> ures<'tcx>\n+                      -> UnitResult<'tcx>\n     {\n         /*! See `higher_ranked::leak_check` */\n \n@@ -799,7 +748,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn equality_predicate(&self,\n                               span: Span,\n                               predicate: &ty::PolyEquatePredicate<'tcx>)\n-                              -> ures<'tcx> {\n+                              -> UnitResult<'tcx> {\n         self.try(|snapshot| {\n             let (ty::EquatePredicate(a, b), skol_map) =\n                 self.skolemize_late_bound_regions(predicate, snapshot);\n@@ -812,7 +761,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn region_outlives_predicate(&self,\n                                      span: Span,\n                                      predicate: &ty::PolyRegionOutlivesPredicate)\n-                                     -> ures<'tcx> {\n+                                     -> UnitResult<'tcx> {\n         self.try(|snapshot| {\n             let (ty::OutlivesPredicate(r_a, r_b), skol_map) =\n                 self.skolemize_late_bound_regions(predicate, snapshot);\n@@ -1104,7 +1053,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.region_vars.verify_generic_bound(origin, kind, a, bs);\n     }\n \n-    pub fn can_equate<T>(&self, a: &T, b: &T) -> ures<'tcx>\n+    pub fn can_equate<T>(&self, a: &T, b: &T) -> UnitResult<'tcx>\n         where T : Combineable<'tcx> + Repr<'tcx>\n     {\n         debug!(\"can_equate({}, {})\", a.repr(self.tcx), b.repr(self.tcx));\n@@ -1118,7 +1067,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                     values: Types(expected_found(true, e, e)) };\n             let eq = self.equate(true, trace);\n             Combineable::combine(&eq, a, b)\n-        }).to_ures()\n+        }).map(|_| ())\n     }\n }\n "}, {"sha": "e7c5d1111a216bcd100fe16974e8d6c8d3699359", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -18,7 +18,7 @@ pub use self::RegionResolutionError::*;\n pub use self::VarValue::*;\n use self::Classification::*;\n \n-use super::cres;\n+use super::CombineResult;\n use super::{RegionVariableOrigin, SubregionOrigin, TypeTrace, MiscVariable};\n \n use middle::region;\n@@ -799,7 +799,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     /// regions are given as argument, in any order, a consistent result is returned.\n     fn lub_free_regions(&self,\n                         a: &FreeRegion,\n-                        b: &FreeRegion) -> ty::Region\n+                        b: &FreeRegion)\n+                        -> ty::Region\n     {\n         return match a.cmp(b) {\n             Less => helper(self, a, b),\n@@ -824,7 +825,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     fn glb_concrete_regions(&self,\n                             a: Region,\n                             b: Region)\n-                         -> cres<'tcx, Region> {\n+                            -> CombineResult<'tcx, Region>\n+    {\n         debug!(\"glb_concrete_regions({:?}, {:?})\", a, b);\n         match (a, b) {\n             (ReLateBound(..), _) |\n@@ -898,7 +900,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     /// returned.\n     fn glb_free_regions(&self,\n                         a: &FreeRegion,\n-                        b: &FreeRegion) -> cres<'tcx, ty::Region>\n+                        b: &FreeRegion)\n+                        -> CombineResult<'tcx, ty::Region>\n     {\n         return match a.cmp(b) {\n             Less => helper(self, a, b),\n@@ -908,7 +911,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n         fn helper<'a, 'tcx>(this: &RegionVarBindings<'a, 'tcx>,\n                             a: &FreeRegion,\n-                            b: &FreeRegion) -> cres<'tcx, ty::Region>\n+                            b: &FreeRegion) -> CombineResult<'tcx, ty::Region>\n         {\n             if this.tcx.region_maps.sub_free_region(*a, *b) {\n                 Ok(ty::ReFree(*a))\n@@ -926,7 +929,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                         region_a: ty::Region,\n                         region_b: ty::Region,\n                         scope_a: region::CodeExtent,\n-                        scope_b: region::CodeExtent) -> cres<'tcx, Region>\n+                        scope_b: region::CodeExtent)\n+                        -> CombineResult<'tcx, Region>\n     {\n         // We want to generate the intersection of two\n         // scopes or two free regions.  So, if one of"}, {"sha": "d58a911e86064fe01a7ef14be23288e8b045497e", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use super::combine::*;\n-use super::cres;\n+use super::CombineResult;\n use super::higher_ranked::HigherRankedRelations;\n use super::Subtype;\n use super::type_variable::{SubtypeOf, SupertypeOf};\n@@ -33,7 +33,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n     fn fields<'a>(&'a self) -> &'a CombineFields<'a, 'tcx> { &self.fields }\n \n     fn tys_with_variance(&self, v: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n-                         -> cres<'tcx, Ty<'tcx>>\n+                         -> CombineResult<'tcx, Ty<'tcx>>\n     {\n         match v {\n             ty::Invariant => self.equate().tys(a, b),\n@@ -44,7 +44,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n     }\n \n     fn regions_with_variance(&self, v: ty::Variance, a: ty::Region, b: ty::Region)\n-                             -> cres<'tcx, ty::Region>\n+                             -> CombineResult<'tcx, ty::Region>\n     {\n         match v {\n             ty::Invariant => self.equate().regions(a, b),\n@@ -54,7 +54,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         }\n     }\n \n-    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n+    fn regions(&self, a: ty::Region, b: ty::Region) -> CombineResult<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),\n                a.repr(self.tcx()),\n@@ -63,7 +63,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n+    fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CombineResult<'tcx, Ty<'tcx>> {\n         debug!(\"{}.tys({}, {})\", self.tag(),\n                a.repr(self.tcx()), b.repr(self.tcx()));\n         if a == b { return Ok(a); }\n@@ -99,7 +99,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         }\n     }\n \n-    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> cres<'tcx, ty::Binder<T>>\n+    fn binders<T>(&self, a: &ty::Binder<T>, b: &ty::Binder<T>) -> CombineResult<'tcx, ty::Binder<T>>\n         where T : Combineable<'tcx>\n     {\n         self.higher_ranked_sub(a, b)"}, {"sha": "de96e9b49feee976bf408db4167bf6666e9e6f53", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -14,7 +14,7 @@ use std::marker;\n \n use middle::ty::{expected_found, IntVarValue};\n use middle::ty::{self, Ty};\n-use middle::infer::{uok, ures};\n+use middle::infer::UnitResult;\n use middle::infer::InferCtxt;\n use std::cell::RefCell;\n use std::fmt::Debug;\n@@ -236,7 +236,7 @@ pub trait SimplyUnifiable<'tcx> : Clone + PartialEq + Debug {\n pub fn err<'tcx, V:SimplyUnifiable<'tcx>>(a_is_expected: bool,\n                                           a_t: V,\n                                           b_t: V)\n-                                          -> ures<'tcx> {\n+                                          -> UnitResult<'tcx> {\n     if a_is_expected {\n         Err(SimplyUnifiable::to_type_err(\n             ty::expected_found {expected: a_t, found: b_t}))\n@@ -255,12 +255,12 @@ pub trait InferCtxtMethodsForSimplyUnifiableTypes<'tcx,K,V>\n                    a_is_expected: bool,\n                    a_id: K,\n                    b_id: K)\n-                   -> ures<'tcx>;\n+                   -> UnitResult<'tcx>;\n     fn simple_var_t(&self,\n                     a_is_expected: bool,\n                     a_id: K,\n                     b: V)\n-                    -> ures<'tcx>;\n+                    -> UnitResult<'tcx>;\n     fn probe_var(&self, a_id: K) -> Option<Ty<'tcx>>;\n }\n \n@@ -276,7 +276,7 @@ impl<'a,'tcx,V,K> InferCtxtMethodsForSimplyUnifiableTypes<'tcx,K,V> for InferCtx\n                    a_is_expected: bool,\n                    a_id: K,\n                    b_id: K)\n-                   -> ures<'tcx>\n+                   -> UnitResult<'tcx>\n     {\n         let tcx = self.tcx;\n         let table = UnifyKey::unification_table(self);\n@@ -285,7 +285,7 @@ impl<'a,'tcx,V,K> InferCtxtMethodsForSimplyUnifiableTypes<'tcx,K,V> for InferCtx\n         let a_id = node_a.key.clone();\n         let b_id = node_b.key.clone();\n \n-        if a_id == b_id { return uok(); }\n+        if a_id == b_id { return Ok(()); }\n \n         let combined = {\n             match (&node_a.value, &node_b.value) {\n@@ -317,7 +317,7 @@ impl<'a,'tcx,V,K> InferCtxtMethodsForSimplyUnifiableTypes<'tcx,K,V> for InferCtx\n                     a_is_expected: bool,\n                     a_id: K,\n                     b: V)\n-                    -> ures<'tcx>\n+                    -> UnitResult<'tcx>\n     {\n         let tcx = self.tcx;\n         let table = UnifyKey::unification_table(self);"}, {"sha": "d48927c61d2c7542453fccfa7fbb8b48941b417e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -62,7 +62,7 @@\n \n use check::{autoderef, FnCtxt, NoPreference, PreferMutLvalue, UnresolvedTypeAction};\n \n-use middle::infer::{self, cres, Coercion, TypeTrace};\n+use middle::infer::{self, CombineResult, Coercion, TypeTrace};\n use middle::infer::combine::Combine;\n use middle::infer::sub::Sub;\n use middle::subst;\n@@ -79,7 +79,7 @@ struct Coerce<'a, 'tcx: 'a> {\n     trace: TypeTrace<'tcx>\n }\n \n-type CoerceResult<'tcx> = cres<'tcx, Option<ty::AutoAdjustment<'tcx>>>;\n+type CoerceResult<'tcx> = CombineResult<'tcx, Option<ty::AutoAdjustment<'tcx>>>;\n \n impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn tcx(&self) -> &ty::ctxt<'tcx> {\n@@ -534,7 +534,7 @@ pub fn mk_assignty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                              expr: &ast::Expr,\n                              a: Ty<'tcx>,\n                              b: Ty<'tcx>)\n-                             -> cres<'tcx, ()> {\n+                             -> CombineResult<'tcx, ()> {\n     debug!(\"mk_assignty({} -> {})\", a.repr(fcx.tcx()), b.repr(fcx.tcx()));\n     let adjustment = try!(indent(|| {\n         fcx.infcx().commit_if_ok(|| {"}, {"sha": "e203019bd0638fe43d2fe0ea2d8d307c35db27b5", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0939837867e77f478dcd3735f3a6ce8823f5fd48/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=0939837867e77f478dcd3735f3a6ce8823f5fd48", "patch": "@@ -1130,7 +1130,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // MISCELLANY\n \n-    fn make_sub_ty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>) -> infer::ures<'tcx> {\n+    fn make_sub_ty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>) -> infer::UnitResult<'tcx> {\n         self.infcx().sub_types(false, infer::Misc(DUMMY_SP), sub, sup)\n     }\n "}]}