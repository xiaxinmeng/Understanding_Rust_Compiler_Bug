{"sha": "98442b69055024c50c38bad11a18f71cc3858c84", "node_id": "C_kwDOAAsO6NoAKDk4NDQyYjY5MDU1MDI0YzUwYzM4YmFkMTFhMThmNzFjYzM4NThjODQ", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-26T16:30:33Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate pattern inlining error diagnostics", "tree": {"sha": "3b40d85d4ef0a936b6dce3d934fd366177aed6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b40d85d4ef0a936b6dce3d934fd366177aed6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98442b69055024c50c38bad11a18f71cc3858c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98442b69055024c50c38bad11a18f71cc3858c84", "html_url": "https://github.com/rust-lang/rust/commit/98442b69055024c50c38bad11a18f71cc3858c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98442b69055024c50c38bad11a18f71cc3858c84/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "c7bfd007194a0f4062a8809996b60f2700dd4652", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfd007194a0f4062a8809996b60f2700dd4652", "html_url": "https://github.com/rust-lang/rust/commit/c7bfd007194a0f4062a8809996b60f2700dd4652"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "610e16ab7d8e77ea08d1889c4f0139f301e9deac", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=98442b69055024c50c38bad11a18f71cc3858c84", "patch": "@@ -183,3 +183,11 @@ mir_build_non_exhaustive_patterns_type_not_empty = non-exhaustive patterns: type\n     .reference_note = references are always considered inhabited\n     .suggestion = ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n     .help = ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n+\n+mir_build_static_in_pattern = statics cannot be referenced in patterns\n+\n+mir_build_assoc_const_in_pattern = associated consts cannot be referenced in patterns\n+\n+mir_build_const_param_in_pattern = const parameters cannot be referenced in patterns\n+\n+mir_build_non_const_path = runtime values cannot be referenced in patterns"}, {"sha": "ceaf057bb465b4449afb91cbe637aed108652e8a", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=98442b69055024c50c38bad11a18f71cc3858c84", "patch": "@@ -429,3 +429,31 @@ impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_>\n         diag\n     }\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::static_in_pattern, code = \"E0158\")]\n+pub struct StaticInPattern {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::assoc_const_in_pattern, code = \"E0158\")]\n+pub struct AssocConstInPattern {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::const_param_in_pattern, code = \"E0158\")]\n+pub struct ConstParamInPattern {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::non_const_path, code = \"E0080\")]\n+pub struct NonConstPath {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "42c87871029149504de2e4f1a2f2ec7a34e1c1f3", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98442b69055024c50c38bad11a18f71cc3858c84/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=98442b69055024c50c38bad11a18f71cc3858c84", "patch": "@@ -4,7 +4,7 @@ use super::usefulness::{\n };\n use super::{PatCtxt, PatternError};\n \n-use crate::errors::NonExhaustivePatternsTypeNotEmpty;\n+use crate::errors::*;\n \n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n@@ -109,28 +109,20 @@ impl PatCtxt<'_, '_> {\n         for error in &self.errors {\n             match *error {\n                 PatternError::StaticInPattern(span) => {\n-                    self.span_e0158(span, \"statics cannot be referenced in patterns\")\n+                    self.tcx.sess.emit_err(StaticInPattern { span });\n                 }\n                 PatternError::AssocConstInPattern(span) => {\n-                    self.span_e0158(span, \"associated consts cannot be referenced in patterns\")\n+                    self.tcx.sess.emit_err(AssocConstInPattern { span });\n                 }\n                 PatternError::ConstParamInPattern(span) => {\n-                    self.span_e0158(span, \"const parameters cannot be referenced in patterns\")\n+                    self.tcx.sess.emit_err(ConstParamInPattern { span });\n                 }\n                 PatternError::NonConstPath(span) => {\n-                    rustc_middle::mir::interpret::struct_error(\n-                        self.tcx.at(span),\n-                        \"runtime values cannot be referenced in patterns\",\n-                    )\n-                    .emit();\n+                    self.tcx.sess.emit_err(NonConstPath { span });\n                 }\n             }\n         }\n     }\n-\n-    fn span_e0158(&self, span: Span, text: &str) {\n-        struct_span_err!(self.tcx.sess, span, E0158, \"{}\", text).emit();\n-    }\n }\n \n impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {"}]}