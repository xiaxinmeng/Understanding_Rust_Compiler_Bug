{"sha": "4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzFmYmMwYThjYjRiMmIwZGY0MzFkOGZmY2YzMDhmODM3ZTA3ZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-03T13:37:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-03T13:52:15Z"}, "message": "Condense StringReader's API to a single function", "tree": {"sha": "fa8fe4841b0f2a8a267b8156bd8658f10f06f628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa8fe4841b0f2a8a267b8156bd8658f10f06f628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "html_url": "https://github.com/rust-lang/rust/commit/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08deb863bdebfcbbb71c18acf903eca84f1df4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08deb863bdebfcbbb71c18acf903eca84f1df4e7", "html_url": "https://github.com/rust-lang/rust/commit/08deb863bdebfcbbb71c18acf903eca84f1df4e7"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "8099b8a24658d71cdeaa8064efcc59e1dc1e18a7", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "patch": "@@ -1,22 +1,19 @@\n use rustc_ast::ast::AttrStyle;\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n-use rustc_ast::tokenstream::IsJoint;\n-use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError};\n-use rustc_lexer::Base;\n-use rustc_lexer::{unescape, RawStrError};\n+use rustc_ast::tokenstream::{IsJoint, TokenStream};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_lexer::unescape::{self, Mode};\n+use rustc_lexer::{Base, DocStyle, RawStrError};\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Pos, Span};\n \n-use std::char;\n use tracing::debug;\n \n mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;\n \n-use rustc_lexer::{unescape::Mode, DocStyle};\n use unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n #[derive(Clone, Debug)]\n@@ -28,7 +25,17 @@ pub struct UnmatchedBrace {\n     pub candidate_span: Option<Span>,\n }\n \n-crate struct StringReader<'a> {\n+crate fn parse_token_trees<'a>(\n+    sess: &'a ParseSess,\n+    src: &'a str,\n+    start_pos: BytePos,\n+    override_span: Option<Span>,\n+) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n+    StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }\n+        .into_token_trees()\n+}\n+\n+struct StringReader<'a> {\n     sess: &'a ParseSess,\n     /// Initial position, read-only.\n     start_pos: BytePos,\n@@ -37,31 +44,11 @@ crate struct StringReader<'a> {\n     /// Stop reading src at this index.\n     end_src_index: usize,\n     /// Source text to tokenize.\n-    src: Lrc<String>,\n+    src: &'a str,\n     override_span: Option<Span>,\n }\n \n impl<'a> StringReader<'a> {\n-    crate fn new(\n-        sess: &'a ParseSess,\n-        source_file: Lrc<rustc_span::SourceFile>,\n-        override_span: Option<Span>,\n-    ) -> Self {\n-        let src = source_file.src.clone().unwrap_or_else(|| {\n-            sess.span_diagnostic\n-                .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n-        });\n-\n-        StringReader {\n-            sess,\n-            start_pos: source_file.start_pos,\n-            pos: source_file.start_pos,\n-            end_src_index: src.len(),\n-            src,\n-            override_span,\n-        }\n-    }\n-\n     fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {\n         self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))\n     }"}, {"sha": "357b10ab89d41020579503068625cf9bfd3c0059", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "patch": "@@ -12,7 +12,7 @@ use rustc_errors::PResult;\n use rustc_span::Span;\n \n impl<'a> StringReader<'a> {\n-    crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n+    pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {\n         let mut tt_reader = TokenTreesReader {\n             string_reader: self,\n             token: Token::dummy(),"}, {"sha": "40e2e34aa05892980a1ccec354932da9bb295119", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "patch": "@@ -332,7 +332,7 @@ const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n     ('\"', \"Quotation Mark\", None),\n ];\n \n-crate fn check_for_substitution<'a>(\n+pub(super) fn check_for_substitution<'a>(\n     reader: &StringReader<'a>,\n     pos: BytePos,\n     ch: char,"}, {"sha": "b804e8a825f375401ac317eb62a33abffef6edd9", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=4231fbc0a8cb4b2b0df431d8ffcf308f837e07e3", "patch": "@@ -200,8 +200,13 @@ pub fn maybe_file_to_stream(\n     source_file: Lrc<SourceFile>,\n     override_span: Option<Span>,\n ) -> Result<(TokenStream, Vec<lexer::UnmatchedBrace>), Vec<Diagnostic>> {\n-    let srdr = lexer::StringReader::new(sess, source_file, override_span);\n-    let (token_trees, unmatched_braces) = srdr.into_token_trees();\n+    let src = source_file.src.as_ref().unwrap_or_else(|| {\n+        sess.span_diagnostic\n+            .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n+    });\n+\n+    let (token_trees, unmatched_braces) =\n+        lexer::parse_token_trees(sess, src.as_str(), source_file.start_pos, override_span);\n \n     match token_trees {\n         Ok(stream) => Ok((stream, unmatched_braces)),"}]}