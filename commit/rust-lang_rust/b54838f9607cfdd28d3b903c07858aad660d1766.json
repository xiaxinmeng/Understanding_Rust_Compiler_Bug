{"sha": "b54838f9607cfdd28d3b903c07858aad660d1766", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDgzOGY5NjA3Y2ZkZDI4ZDNiOTAzYzA3ODU4YWFkNjYwZDE3NjY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-22T22:01:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-22T22:01:05Z"}, "message": "Rollup merge of #79295 - ssomers:btree_fix_78903, r=Mark-Simulacrum\n\nBTreeMap: fix minor testing mistakes in #78903\n\nMostly a duplicate test case\nr? `@Mark-Simulacrum`", "tree": {"sha": "b26c41ee6c7c5e8a57cea7fe79358a1e94213a13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26c41ee6c7c5e8a57cea7fe79358a1e94213a13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54838f9607cfdd28d3b903c07858aad660d1766", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfut+hCRBK7hj4Ov3rIwAAdHIIAGGRmeyZT233GSr32IxRDZmE\n/ipd8BJL2cPPx2az3T+bh0hhPk6StzYBPE+jFHu1lQDTcawdH4L5okn9x/IHCNbp\nFBvfHg+FQTotCxDmFrgZOZ9OeHsIgJaVtBwE9ae/7jHJBHLZPakCCVAP2RRDu1mA\nKzGMwq/oUnxOT3Ex+fvvbeY0vHSdMk4WUYTM6a/AoIb4oGptFQwoyNPD+FwQEDwt\nJWzS/OCjnZfycLG7iuYprieuNqryBXNXgoBx/jcq1O4mA2Dirj/1/saDbQ2Vh0sn\nI7bnKB6GeFOnABD/g2Wuv80rUP6B5IlwJSHXyOmOnTFqFcmTR9DRjeU4J4eT3Kw=\n=+Lem\n-----END PGP SIGNATURE-----\n", "payload": "tree b26c41ee6c7c5e8a57cea7fe79358a1e94213a13\nparent 138845d43c31a1d5a9494ac3f996d6607f415cb5\nparent 9186c073fc411ec55ce9bfa12bbaaf76fc598037\nauthor Mara Bos <m-ou.se@m-ou.se> 1606082465 +0100\ncommitter GitHub <noreply@github.com> 1606082465 +0100\n\nRollup merge of #79295 - ssomers:btree_fix_78903, r=Mark-Simulacrum\n\nBTreeMap: fix minor testing mistakes in #78903\n\nMostly a duplicate test case\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54838f9607cfdd28d3b903c07858aad660d1766", "html_url": "https://github.com/rust-lang/rust/commit/b54838f9607cfdd28d3b903c07858aad660d1766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54838f9607cfdd28d3b903c07858aad660d1766/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138845d43c31a1d5a9494ac3f996d6607f415cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/138845d43c31a1d5a9494ac3f996d6607f415cb5", "html_url": "https://github.com/rust-lang/rust/commit/138845d43c31a1d5a9494ac3f996d6607f415cb5"}, {"sha": "9186c073fc411ec55ce9bfa12bbaaf76fc598037", "url": "https://api.github.com/repos/rust-lang/rust/commits/9186c073fc411ec55ce9bfa12bbaaf76fc598037", "html_url": "https://github.com/rust-lang/rust/commit/9186c073fc411ec55ce9bfa12bbaaf76fc598037"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "23cd4f3d83d624c09078e9819f00d1f73a90e6b4", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b54838f9607cfdd28d3b903c07858aad660d1766/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54838f9607cfdd28d3b903c07858aad660d1766/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=b54838f9607cfdd28d3b903c07858aad660d1766", "patch": "@@ -57,24 +57,23 @@ impl<K, V> BTreeMap<K, V> {\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n \n-            // Check consistenty of `length` and some of the navigation.\n+            // Check consistency of `length` with what navigation code encounters.\n             assert_eq!(self.length, root_node.calc_length());\n-            assert_eq!(self.length, self.keys().count());\n \n             // Lastly, check the invariant causing the least harm.\n             root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n-            // Check consistenty of `length` and some of the navigation.\n             assert_eq!(self.length, 0);\n-            assert_eq!(self.length, self.keys().count());\n         }\n+\n+        // Check that `assert_strictly_ascending` will encounter all keys.\n+        assert_eq!(self.length, self.keys().count());\n     }\n \n     // Panics if the map is corrupted or if the keys are not in strictly\n     // ascending order, in the current opinion of the `Ord` implementation.\n-    // If the `Ord` implementation does not honor transitivity, this method\n-    // does not guarantee that all the keys are unique, just that adjacent\n-    // keys are unique.\n+    // If the `Ord` implementation violates transitivity, this method does not\n+    // guarantee that all keys are unique, just that adjacent keys are unique.\n     fn check(&self)\n     where\n         K: Debug + Ord,\n@@ -880,6 +879,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator, where most test cases drop it instantly.\n     #[test]\n     fn consumed_keeping_all() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -888,6 +888,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator, where most test cases drop it instantly.\n     #[test]\n     fn consumed_removing_all() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -897,15 +898,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n-    #[test]\n-    fn dropped_removing_all() {\n-        let pairs = (0..3).map(|i| (i, i));\n-        let mut map: BTreeMap<_, _> = pairs.collect();\n-        map.drain_filter(|_, _| true);\n-        assert!(map.is_empty());\n-        map.check();\n-    }\n-\n+    // Explicitly consumes the iterator and modifies values through it.\n     #[test]\n     fn mutating_and_keeping() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -922,6 +915,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator and modifies values through it.\n     #[test]\n     fn mutating_and_removing() {\n         let pairs = (0..3).map(|i| (i, i));"}, {"sha": "96ce7c15790463b3770285f6395859d64ea9afdc", "filename": "library/alloc/src/collections/btree/map/tests/ord_chaos.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b54838f9607cfdd28d3b903c07858aad660d1766/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54838f9607cfdd28d3b903c07858aad660d1766/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs?ref=b54838f9607cfdd28d3b903c07858aad660d1766", "patch": "@@ -2,6 +2,7 @@ use std::cell::Cell;\n use std::cmp::Ordering::{self, *};\n use std::ptr;\n \n+// Minimal type with an `Ord` implementation violating transitivity.\n #[derive(Debug)]\n pub enum Cyclic3 {\n     A,\n@@ -34,6 +35,7 @@ impl PartialEq for Cyclic3 {\n \n impl Eq for Cyclic3 {}\n \n+// Controls the ordering of values wrapped by `Governed`.\n #[derive(Debug)]\n pub struct Governor {\n     flipped: Cell<bool>,\n@@ -49,6 +51,9 @@ impl Governor {\n     }\n }\n \n+// Type with an `Ord` implementation that forms a total order at any moment\n+// (assuming that `T` respects total order), but can suddenly be made to invert\n+// that total order.\n #[derive(Debug)]\n pub struct Governed<'a, T>(pub T, pub &'a Governor);\n "}]}