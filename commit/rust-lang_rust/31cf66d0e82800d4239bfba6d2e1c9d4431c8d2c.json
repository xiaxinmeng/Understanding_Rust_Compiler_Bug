{"sha": "31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxY2Y2NmQwZTgyODAwZDQyMzliZmJhNmQyZTFjOWQ0NDMxYzhkMmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-02T00:24:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-05T17:06:40Z"}, "message": "remove our array drop glue and use rustc's instead; implement the new Offset and SizeOf operators", "tree": {"sha": "4e8ac8b7e5e6b7064cfdddf700508ff453b80dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8ac8b7e5e6b7064cfdddf700508ff453b80dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "html_url": "https://github.com/rust-lang/rust/commit/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14848b3badb64bf0c9eab43eb87ce07d61f8a4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14848b3badb64bf0c9eab43eb87ce07d61f8a4d2", "html_url": "https://github.com/rust-lang/rust/commit/14848b3badb64bf0c9eab43eb87ce07d61f8a4d2"}], "stats": {"total": 268, "additions": 52, "deletions": 216}, "files": [{"sha": "b2cd1a665d364267015f1da5b76d8ff85d9aa7a7", "filename": "src/eval_context.rs", "status": "modified", "additions": 15, "deletions": 182, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -4,7 +4,6 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::middle::const_val::ConstVal;\n-use rustc_const_math::{ConstInt, ConstUsize};\n use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size};\n@@ -15,7 +14,6 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax::codemap::{self, DUMMY_SP, Span};\n use syntax::ast;\n use syntax::abi::Abi;\n-use syntax::symbol::Symbol;\n \n use error::{EvalError, EvalResult};\n use lvalue::{Global, GlobalId, Lvalue, LvalueExtra};\n@@ -43,9 +41,6 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n     pub(crate) steps_remaining: u64,\n-\n-    /// Drop glue for arrays and slices\n-    pub(crate) seq_drop_glue: &'tcx mir::Mir<'tcx>,\n }\n \n /// A stack frame.\n@@ -127,188 +122,13 @@ impl Default for ResourceLimits {\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, limits: ResourceLimits) -> Self {\n-        // Register array drop glue code\n-        let source_info = mir::SourceInfo {\n-            span: DUMMY_SP,\n-            scope: mir::ARGUMENT_VISIBILITY_SCOPE\n-        };\n-        // i = 0; len = Len(*a0); goto head;\n-        let start_block = mir::BasicBlockData {\n-            statements: vec![\n-                mir::Statement {\n-                    source_info,\n-                    kind: mir::StatementKind::Assign(\n-                        mir::Lvalue::Local(mir::Local::new(2)),\n-                        mir::Rvalue::Use(mir::Operand::Constant(Box::new(mir::Constant {\n-                            span: DUMMY_SP,\n-                            ty: tcx.types.usize,\n-                            literal: mir::Literal::Value {\n-                                value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(0, tcx.sess.target.uint_type).unwrap())),\n-                            },\n-                        })))\n-                    )\n-                },\n-                mir::Statement {\n-                    source_info,\n-                    kind: mir::StatementKind::Assign(\n-                        mir::Lvalue::Local(mir::Local::new(3)),\n-                        mir::Rvalue::Len(mir::Lvalue::Projection(Box::new(mir::LvalueProjection {\n-                            base: mir::Lvalue::Local(mir::Local::new(1)),\n-                            elem: mir::ProjectionElem::Deref,\n-                        }))),\n-                    )\n-                },\n-            ],\n-            terminator: Some(mir::Terminator {\n-                source_info: source_info,\n-                kind: mir::TerminatorKind::Goto { target: mir::BasicBlock::new(1) },\n-            }),\n-            is_cleanup: false\n-        };\n-        // head: done = i == len; switch done { 1 => ret, 0 => loop }\n-        let head = mir::BasicBlockData {\n-            statements: vec![\n-                mir::Statement {\n-                    source_info,\n-                    kind: mir::StatementKind::Assign(\n-                        mir::Lvalue::Local(mir::Local::new(4)),\n-                        mir::Rvalue::BinaryOp(\n-                            mir::BinOp::Eq,\n-                            mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(2))),\n-                            mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(3))),\n-                        )\n-                    )\n-                },\n-            ],\n-            terminator: Some(mir::Terminator {\n-                source_info: source_info,\n-                kind: mir::TerminatorKind::SwitchInt {\n-                    targets: vec![\n-                        mir::BasicBlock::new(2),\n-                        mir::BasicBlock::new(4),\n-                    ],\n-                    discr: mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(4))),\n-                    switch_ty: tcx.types.bool,\n-                    values: vec![ConstInt::U8(0)].into(),\n-                },\n-            }),\n-            is_cleanup: false\n-        };\n-        // loop: drop (*a0)[i]; goto inc;\n-        let loop_ = mir::BasicBlockData {\n-            statements: Vec::new(),\n-            terminator: Some(mir::Terminator {\n-                source_info: source_info,\n-                kind: mir::TerminatorKind::Drop {\n-                    target: mir::BasicBlock::new(3),\n-                    unwind: None,\n-                    location: mir::Lvalue::Projection(Box::new(\n-                        mir::LvalueProjection {\n-                            base: mir::Lvalue::Projection(Box::new(\n-                                mir::LvalueProjection {\n-                                    base: mir::Lvalue::Local(mir::Local::new(1)),\n-                                    elem: mir::ProjectionElem::Deref,\n-                                }\n-                            )),\n-                            elem: mir::ProjectionElem::Index(mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(2)))),\n-                        }\n-                    )),\n-                },\n-            }),\n-            is_cleanup: false\n-        };\n-        // inc: i++; goto head;\n-        let inc = mir::BasicBlockData {\n-            statements: vec![\n-                mir::Statement {\n-                    source_info,\n-                    kind: mir::StatementKind::Assign(\n-                        mir::Lvalue::Local(mir::Local::new(2)),\n-                        mir::Rvalue::BinaryOp(\n-                            mir::BinOp::Add,\n-                            mir::Operand::Consume(mir::Lvalue::Local(mir::Local::new(2))),\n-                            mir::Operand::Constant(Box::new(mir::Constant {\n-                                span: DUMMY_SP,\n-                                ty: tcx.types.usize,\n-                                literal: mir::Literal::Value {\n-                                    value: ConstVal::Integral(ConstInt::Usize(ConstUsize::new(1, tcx.sess.target.uint_type).unwrap())),\n-                                },\n-                            })),\n-                        )\n-                    )\n-                },\n-            ],\n-            terminator: Some(mir::Terminator {\n-                source_info: source_info,\n-                kind: mir::TerminatorKind::Goto { target: mir::BasicBlock::new(1) },\n-            }),\n-            is_cleanup: false\n-        };\n-        // ret: return;\n-        let ret = mir::BasicBlockData {\n-            statements: Vec::new(),\n-            terminator: Some(mir::Terminator {\n-                source_info: source_info,\n-                kind: mir::TerminatorKind::Return,\n-            }),\n-            is_cleanup: false\n-        };\n-        let locals = vec![\n-            mir::LocalDecl {\n-                mutability: mir::Mutability::Mut,\n-                ty: tcx.mk_nil(),\n-                name: None,\n-                source_info,\n-                is_user_variable: false,\n-            },\n-            mir::LocalDecl {\n-                mutability: mir::Mutability::Mut,\n-                ty: tcx.mk_mut_ptr(tcx.mk_slice(tcx.mk_param(0, Symbol::intern(\"T\")))),\n-                name: None,\n-                source_info,\n-                is_user_variable: false,\n-            },\n-            mir::LocalDecl {\n-                mutability: mir::Mutability::Mut,\n-                ty: tcx.types.usize,\n-                name: None,\n-                source_info,\n-                is_user_variable: false,\n-            },\n-            mir::LocalDecl {\n-                mutability: mir::Mutability::Mut,\n-                ty: tcx.types.usize,\n-                name: None,\n-                source_info,\n-                is_user_variable: false,\n-            },\n-            mir::LocalDecl {\n-                mutability: mir::Mutability::Mut,\n-                ty: tcx.types.bool,\n-                name: None,\n-                source_info,\n-                is_user_variable: false,\n-            },\n-        ];\n-        let seq_drop_glue = mir::Mir::new(\n-            vec![start_block, head, loop_, inc, ret].into_iter().collect(),\n-            Vec::new().into_iter().collect(), // vis scopes\n-            Vec::new().into_iter().collect(), // promoted\n-            tcx.mk_nil(), // return type\n-            locals.into_iter().collect(),\n-            1, // arg_count\n-            Vec::new(), // upvars\n-            DUMMY_SP,\n-        );\n-        let seq_drop_glue = tcx.alloc_mir(seq_drop_glue);\n         EvalContext {\n             tcx,\n             memory: Memory::new(&tcx.data_layout, limits.memory_size),\n             globals: HashMap::new(),\n             stack: Vec::new(),\n             stack_limit: limits.stack_limit,\n             steps_remaining: limits.step_limit,\n-            seq_drop_glue: seq_drop_glue,\n         }\n     }\n \n@@ -631,6 +451,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_value(value, dest, dest_ty)?;\n             }\n \n+            BinaryOp(mir::BinOp::Offset, ref left, ref right) => {\n+                let pointer_ty = self.operand_ty(left);\n+                let pointee_ty = pointer_ty.builtin_deref(true, ty::LvaluePreference::NoPreference).expect(\"Offset called on non-ptr type\").ty;\n+                // FIXME: assuming here that type size is < i64::max_value()\n+                let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n+                let offset = self.eval_operand_to_primval(right)?.to_i128()? as i64;\n+\n+                let ptr = self.eval_operand_to_primval(left)?.to_ptr()?;\n+                let result_ptr = ptr.signed_offset(offset * pointee_size);\n+                self.write_primval(dest, PrimVal::Ptr(result_ptr), dest_ty)?;\n+            }\n+\n             BinaryOp(bin_op, ref left, ref right) => {\n                 // ignore overflow bit, rustc inserts check branches for us\n                 self.intrinsic_overflowing(bin_op, left, right, dest, dest_ty)?;\n@@ -823,8 +655,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n             }\n \n-            NullaryOp(mir::NullOp::SizeOf, _ty) => {\n-                unimplemented!()\n+            NullaryOp(mir::NullOp::SizeOf, ty) => {\n+                let size = self.type_size(ty)?.expect(\"SizeOf nullary MIR operator called for unsized type\");\n+                self.write_primval(dest, PrimVal::from_u128(size as u128), dest_ty)?;\n             }\n \n             Cast(kind, ref operand, cast_ty) => {"}, {"sha": "1d796d254d78464a0e2d1739bda1affbfbf9cbe6", "filename": "src/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let n_ptr = self.eval_operand(operand)?;\n                 let usize = self.tcx.types.usize;\n                 let n = self.value_to_primval(n_ptr, usize)?.to_u64()?;\n-                assert!(n < len);\n+                assert!(n < len, \"Tried to access element {} of array/slice with length {}\", n, len);\n                 let ptr = base_ptr.offset(n * elem_size);\n                 (ptr, LvalueExtra::None)\n             }"}, {"sha": "776061954251c59c5f1467aa5df47edf2ce09d7e", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -1,6 +1,5 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n-use rustc::ty::subst::Kind;\n use syntax::codemap::Span;\n \n use error::EvalResult;\n@@ -21,7 +20,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         };\n         self.drop(val, instance, ty, span)\n     }\n-    pub(crate) fn drop(&mut self, mut arg: Value, mut instance: ty::Instance<'tcx>, ty: Ty<'tcx>, span: Span) -> EvalResult<'tcx> {\n+    pub(crate) fn drop(&mut self, arg: Value, mut instance: ty::Instance<'tcx>, ty: Ty<'tcx>, span: Span) -> EvalResult<'tcx> {\n         trace!(\"drop: {:#?}, {:?}, {:?}\", arg, ty.sty, instance.def);\n \n         if let ty::InstanceDef::DropGlue(_, None) = instance.def {\n@@ -44,23 +43,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     None => return Ok(()),\n                 }\n             },\n-            ty::TyArray(elem, n) => {\n-                instance.substs = self.tcx.mk_substs([\n-                    Kind::from(elem),\n-                ].iter().cloned());\n-                let ptr = match arg {\n-                    Value::ByVal(PrimVal::Ptr(src_ptr)) => src_ptr,\n-                    _ => bug!(\"expected thin ptr, got {:?}\", arg),\n-                };\n-                arg = Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::Bytes(n as u128));\n-                self.seq_drop_glue\n-            },\n-            ty::TySlice(elem) => {\n-                instance.substs = self.tcx.mk_substs([\n-                    Kind::from(elem),\n-                ].iter().cloned());\n-                self.seq_drop_glue\n-            },\n             _ => self.load_mir(instance.def)?,\n         };\n "}, {"sha": "0ca12ee50633c466e0ede43342b1c2de1e1b1fef", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -360,11 +360,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"size_of\" => {\n                 let ty = substs.type_at(0);\n-                // FIXME: change the `box_free` lang item to take `T: ?Sized` and have it use the\n-                // `size_of_val` intrinsic, then change this back to\n-                // .expect(\"size_of intrinsic called on unsized value\")\n-                // see https://github.com/rust-lang/rust/pull/37708\n-                let size = self.type_size(ty)?.unwrap_or(!0) as u128;\n+                let size = self.type_size(ty)?.expect(\"size_of intrinsic called on unsized value\") as u128;\n                 self.write_primval(dest, PrimVal::from_u128(size), dest_ty)?;\n             }\n "}, {"sha": "c2131d6627edde55e7c2f5c5c2dba4bc1be325e2", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::{self, TypeVariants, Ty, TypeAndMut};\n+use rustc::ty::{self, TypeVariants, Ty};\n use rustc::ty::layout::Layout;\n use syntax::codemap::Span;\n use syntax::attr;\n@@ -730,12 +730,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let dtor = if dtor_ptr.is_null_ptr() { None } else { Some(self.memory.get_fn(dtor_ptr.alloc_id)?) };\n \n                 // Figure out how large a pthread TLS key actually is. This is libc::pthread_key_t.\n-                let key_size = match self.operand_ty(&arg_operands[0]).sty {\n-                    TypeVariants::TyRawPtr(TypeAndMut { ty, .. }) => {\n-                        let layout = self.type_layout(ty)?;\n-                        layout.size(&self.tcx.data_layout)\n-                    }\n-                    _ => return Err(EvalError::AbiViolation(\"Wrong signature used for pthread_key_create: First argument must be a raw pointer.\".to_owned()))\n+                let key_type = self.operand_ty(&arg_operands[0]).builtin_deref(true, ty::LvaluePreference::NoPreference)\n+                                   .ok_or(EvalError::AbiViolation(\"Wrong signature used for pthread_key_create: First argument must be a raw pointer.\".to_owned()))?.ty;\n+                let key_size = {\n+                    let layout = self.type_layout(key_type)?;\n+                    layout.size(&self.tcx.data_layout)\n                 };\n \n                 // Create key and write it into the memory where key_ptr wants it"}, {"sha": "68dbf61da4ead54dfac4772432592f8c8478295c", "filename": "tests/run-pass/call_drop_on_array_elements.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/tests%2Frun-pass%2Fcall_drop_on_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/tests%2Frun-pass%2Fcall_drop_on_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_on_array_elements.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -1,4 +1,4 @@\n-struct Bar;\n+struct Bar(i32); // ZSTs are tested separately\n \n static mut DROP_COUNT: usize = 0;\n \n@@ -9,8 +9,13 @@ impl Drop for Bar {\n }\n \n fn main() {\n-    let b = [Bar, Bar, Bar, Bar];\n+    let b = [Bar(0), Bar(0), Bar(0), Bar(0)];\n     assert_eq!(unsafe { DROP_COUNT }, 0);\n     drop(b);\n     assert_eq!(unsafe { DROP_COUNT }, 4);\n+\n+    // check empty case\n+    let b : [Bar; 0] = [];\n+    drop(b);\n+    assert_eq!(unsafe { DROP_COUNT }, 4);\n }"}, {"sha": "1887130fdd8a4704b64990e5228e8c03ef0dd67f", "filename": "tests/run-pass/call_drop_on_zst_array_elements.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/tests%2Frun-pass%2Fcall_drop_on_zst_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c/tests%2Frun-pass%2Fcall_drop_on_zst_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_on_zst_array_elements.rs?ref=31cf66d0e82800d4239bfba6d2e1c9d4431c8d2c", "patch": "@@ -0,0 +1,21 @@\n+struct Bar;\n+\n+static mut DROP_COUNT: usize = 0;\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {\n+        unsafe { DROP_COUNT += 1; }\n+    }\n+}\n+\n+fn main() {\n+    let b = [Bar, Bar, Bar, Bar];\n+    assert_eq!(unsafe { DROP_COUNT }, 0);\n+    drop(b);\n+    assert_eq!(unsafe { DROP_COUNT }, 4);\n+\n+    // check empty case\n+    let b : [Bar; 0] = [];\n+    drop(b);\n+    assert_eq!(unsafe { DROP_COUNT }, 4);\n+}"}]}