{"sha": "b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDg1Yzg2ZmM2YzBjMGE0ODIzN2U1OTY2ZjBmYzU0YjZiNDVlOWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-15T05:53:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-03T01:24:07Z"}, "message": "Suggest constraint on `impl Trait` in return type\n\nFix #71035.", "tree": {"sha": "9366ecd7445afa590f449941fe1884dd43ff33a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9366ecd7445afa590f449941fe1884dd43ff33a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "html_url": "https://github.com/rust-lang/rust/commit/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6648a08b30636cffa9dafd258b372a1bc25da549", "url": "https://api.github.com/repos/rust-lang/rust/commits/6648a08b30636cffa9dafd258b372a1bc25da549", "html_url": "https://github.com/rust-lang/rust/commit/6648a08b30636cffa9dafd258b372a1bc25da549"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "8d57f39c1a2b2888eb18edf8a4922af18eb270e4", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "patch": "@@ -552,7 +552,7 @@ impl<T> Trait<T> for X {\n                             continue;\n                         }\n \n-                        if self.constrain_associated_type_structured_suggestion(\n+                        if self.constrain_generic_bound_associated_type_structured_suggestion(\n                             db,\n                             &trait_ref,\n                             pred.bounds,\n@@ -569,7 +569,7 @@ impl<T> Trait<T> for X {\n                         == Some(def_id)\n                     {\n                         // This is type param `A` in `<A as T>::Foo`.\n-                        return self.constrain_associated_type_structured_suggestion(\n+                        return self.constrain_generic_bound_associated_type_structured_suggestion(\n                             db,\n                             &trait_ref,\n                             param.bounds,\n@@ -629,15 +629,16 @@ impl<T> Trait<T> for X {\n                 | ObligationCauseCode::CompareImplTypeObligation { .. }\n                 | ObligationCauseCode::CompareImplConstObligation\n         );\n+        let assoc = self.associated_item(proj_ty.item_def_id);\n         if !callable_scope || impl_comparison {\n             // We do not want to suggest calling functions when the reason of the\n             // type error is a comparison of an `impl` with its `trait` or when the\n             // scope is outside of a `Body`.\n         } else {\n-            let assoc = self.associated_item(proj_ty.item_def_id);\n             let items = self.associated_items(assoc.container.id());\n             // Find all the methods in the trait that could be called to construct the\n             // expected associated type.\n+            // FIXME: consider suggesting the use of associated `const`s.\n             let methods: Vec<(Span, String)> = items\n                 .items\n                 .iter()\n@@ -739,6 +740,18 @@ impl<T> Trait<T> for X {\n                 _ => {}\n             }\n         }\n+        if let ty::Opaque(def_id, _) = proj_ty.self_ty().kind {\n+            // When the expected `impl Trait` is not defined in the current item, it will come from\n+            // a return type. This can occur when dealing with `TryStream` (#71035).\n+            suggested |= self.constrain_associated_type_structured_suggestion(\n+                db,\n+                self.def_span(def_id),\n+                &assoc,\n+                values.found,\n+                &msg,\n+            );\n+        }\n+\n         if !suggested && !impl_comparison {\n             // Generic suggestion when we can't be more specific.\n             if callable_scope {\n@@ -771,7 +784,7 @@ fn foo(&self) -> Self::T { String::new() }\n         }\n     }\n \n-    fn constrain_associated_type_structured_suggestion(\n+    fn constrain_generic_bound_associated_type_structured_suggestion(\n         &self,\n         db: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::TraitRef<'tcx>,\n@@ -785,28 +798,41 @@ fn foo(&self) -> Self::T { String::new() }\n             match bound {\n                 hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::None) => {\n                     // Relate the type param against `T` in `<A as T>::Foo`.\n-                    if ptr.trait_ref.trait_def_id() == Some(trait_ref.def_id) {\n-                        if let Ok(has_params) = self\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(ptr.span)\n-                            .map(|snippet| snippet.ends_with('>'))\n-                        {\n-                            let (span, sugg) = if has_params {\n-                                let pos = ptr.span.hi() - BytePos(1);\n-                                let span = Span::new(pos, pos, ptr.span.ctxt());\n-                                (span, format!(\", {} = {}\", assoc.ident, ty))\n-                            } else {\n-                                (ptr.span.shrink_to_hi(), format!(\"<{} = {}>\", assoc.ident, ty))\n-                            };\n-                            db.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n-                            return true;\n-                        }\n+                    if ptr.trait_ref.trait_def_id() == Some(trait_ref.def_id)\n+                        && self.constrain_associated_type_structured_suggestion(\n+                            db, ptr.span, assoc, ty, msg,\n+                        )\n+                    {\n+                        return true;\n                     }\n                 }\n                 _ => {}\n             }\n         }\n         false\n     }\n+\n+    fn constrain_associated_type_structured_suggestion(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        assoc: &ty::AssocItem,\n+        ty: Ty<'tcx>,\n+        msg: &str,\n+    ) -> bool {\n+        if let Ok(has_params) =\n+            self.sess.source_map().span_to_snippet(span).map(|snippet| snippet.ends_with('>'))\n+        {\n+            let (span, sugg) = if has_params {\n+                let pos = span.hi() - BytePos(1);\n+                let span = Span::new(pos, pos, span.ctxt());\n+                (span, format!(\", {} = {}\", assoc.ident, ty))\n+            } else {\n+                (span.shrink_to_hi(), format!(\"<{} = {}>\", assoc.ident, ty))\n+            };\n+            db.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n+            return true;\n+        }\n+        false\n+    }\n }"}, {"sha": "8036655d27592c86c8ca9b16bd7fff2ac6ec0a51", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs?ref=b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "patch": "@@ -0,0 +1,33 @@\n+trait Foo {\n+    type Item;\n+}\n+\n+trait Bar: Foo {}\n+\n+struct S;\n+\n+impl Foo for S {\n+    type Item = i32;\n+}\n+impl Bar for S {}\n+\n+struct T;\n+\n+impl Foo for T {\n+    type Item = u32;\n+}\n+impl Bar for T {}\n+\n+fn bar() -> impl Bar {\n+    T\n+}\n+\n+fn baz() -> impl Bar<Item = i32> {\n+//~^ ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+    bar()\n+}\n+\n+fn main() {\n+    let _ = baz();\n+}\n+"}, {"sha": "566e390a31e4820cd68b60192ba1d320f69cdad9", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=b0085c86fc6c0c0a48237e5966f0fc54b6b45e9b", "patch": "@@ -0,0 +1,20 @@\n+error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+  --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n+   |\n+LL | fn bar() -> impl Bar {\n+   |             -------- the expected opaque type\n+...\n+LL | fn baz() -> impl Bar<Item = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n+   |\n+   = note: expected associated type `<impl Bar as Foo>::Item`\n+                         found type `i32`\n+   = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n+   |\n+LL | fn bar() -> impl Bar<Item = i32> {\n+   |                     ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}