{"sha": "92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZmMxZjhmOWUwYjM4ZTZkMjkyNTE0YTZmM2E2ZTg2MjdhZTBjZGM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-28T13:41:02Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-28T14:29:11Z"}, "message": "build-manifest: include artifacts in a new table\n\nThis commit adds to the generated manifest all files we ship that are\nnot rustup components, namely:\n\n* Source code tarballs (rustc-{channel}-src.tar.xz)\n* Windows installers (rust-{channel}-{target}.msi)\n* macOS installers (rust-{channel}-{target}.pkg)\n\nThose files are included in a new \"artifacts\" table of the manifest, to\navoid interfering with existing rustup installations.", "tree": {"sha": "379bbc8752040bf1ca85f5e70c6fce4fdd77cf61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379bbc8752040bf1ca85f5e70c6fce4fdd77cf61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+ZgDkACgkQPgar6Auq\n8ZwzKQ/9GdMMjWt2Y0TZ2w9JICoTB3lZYchnxkeNOjC6qTQWn9Zphfdo6QVCFPmY\nT9eGmbIpgZO/cPZHXBPXfCEo/BfgpEgmeiROciMv1JXipXavce4QK4qYavtfH2dB\nDSbJG6ukvxWsHSPxDyeCy6mqyKQU/4JNb2+cDlx//knEy/HDAkX4jUtOkzo4Erls\nf23dCpIHLs/0wnwAE4KAdSpDntlCJ4YkmVQk6qH+WFEYGoxsolMhXklI+eVQBsE9\nOefaTRPCphCzZpV6W/M5XppfKSGnaRbZRly2enyMlOmlC0d/k7rXxWEKUpn7I5lz\nxSD94JU7hGejOxuLcE1yWtZxBfu3GSkDU1wvt1QoBIpcgUGGcRVIsBAgnMWA7OG4\nKerygFpV5YHAloQ4ivvRVf3atcGr3xQRo01F5e/73Mv/d/TS6QOr7F1xRjLVqhpy\nTe4+R6IsEhrpxnwaEfewN4PNpfz5as7qQfr8o1hWQqhPgHPftE8NpeA2txv5dgSV\nMZWOtnYTGdsY2KsvrqnvlsVVWP/+NblDqPVjRxTPgucudHHDZNqeEr+rt5dXNy8F\nDcVEmExCoAdzOK4fgYnnmJsoUsR/9p6uhyl3d30viwqAlA3E182R5+LdLoKebbgq\nMQV37ZFjSJrkh+doFTnniRsv441Dd66eig/3bO8c+tJxqMAb8iA=\n=iChq\n-----END PGP SIGNATURE-----", "payload": "tree 379bbc8752040bf1ca85f5e70c6fce4fdd77cf61\nparent 2eb4fc800aaf5006f89af3af591e2aa34f469d81\nauthor Pietro Albini <pietro@pietroalbini.org> 1603892462 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1603895351 +0100\n\nbuild-manifest: include artifacts in a new table\n\nThis commit adds to the generated manifest all files we ship that are\nnot rustup components, namely:\n\n* Source code tarballs (rustc-{channel}-src.tar.xz)\n* Windows installers (rust-{channel}-{target}.msi)\n* macOS installers (rust-{channel}-{target}.pkg)\n\nThose files are included in a new \"artifacts\" table of the manifest, to\navoid interfering with existing rustup installations.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "html_url": "https://github.com/rust-lang/rust/commit/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb4fc800aaf5006f89af3af591e2aa34f469d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb4fc800aaf5006f89af3af591e2aa34f469d81", "html_url": "https://github.com/rust-lang/rust/commit/2eb4fc800aaf5006f89af3af591e2aa34f469d81"}], "stats": {"total": 147, "additions": 125, "deletions": 22}, "files": [{"sha": "e36a43ff37f7393fea68b1d5134ca5f9bd28c444", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "patch": "@@ -171,6 +171,16 @@ static DOCS_TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-musl\",\n ];\n \n+static MSI_INSTALLERS: &[&str] = &[\n+    \"aarch64-pc-windows-msvc\",\n+    \"i686-pc-windows-gnu\",\n+    \"i686-pc-windows-msvc\",\n+    \"x86_64-pc-windows-gnu\",\n+    \"x86_64-pc-windows-msvc\",\n+];\n+\n+static PKG_INSTALLERS: &[&str] = &[\"x86_64-apple-darwin\", \"aarch64-apple-darwin\"];\n+\n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n@@ -313,10 +323,12 @@ impl Builder {\n             manifest_version: \"2\".to_string(),\n             date: self.date.to_string(),\n             pkg: BTreeMap::new(),\n+            artifacts: BTreeMap::new(),\n             renames: BTreeMap::new(),\n             profiles: BTreeMap::new(),\n         };\n         self.add_packages_to(&mut manifest);\n+        self.add_artifacts_to(&mut manifest);\n         self.add_profiles_to(&mut manifest);\n         self.add_renames_to(&mut manifest);\n         manifest.pkg.insert(\"rust\".to_string(), self.rust_package(&manifest));\n@@ -345,6 +357,27 @@ impl Builder {\n         package(\"llvm-tools-preview\", TARGETS);\n     }\n \n+    fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n+        manifest.add_artifact(\"source-code\", |artifact| {\n+            let tarball = self.versions.tarball_name(&PkgType::Rustc, \"src\").unwrap();\n+            artifact.add_tarball(self, \"*\", &tarball);\n+        });\n+\n+        manifest.add_artifact(\"installer-msi\", |artifact| {\n+            for target in MSI_INSTALLERS {\n+                let msi = self.versions.archive_name(&PkgType::Rust, target, \"msi\").unwrap();\n+                artifact.add_file(self, target, &msi);\n+            }\n+        });\n+\n+        manifest.add_artifact(\"installer-pkg\", |artifact| {\n+            for target in PKG_INSTALLERS {\n+                let pkg = self.versions.archive_name(&PkgType::Rust, target, \"pkg\").unwrap();\n+                artifact.add_file(self, target, &pkg);\n+            }\n+        });\n+    }\n+\n     fn add_profiles_to(&mut self, manifest: &mut Manifest) {\n         let mut profile = |name, pkgs| self.profile(name, &mut manifest.profiles, pkgs);\n         profile(\"minimal\", &[\"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\"]);"}, {"sha": "547c270d89ab70465949cbd5477c567fdef867b5", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 76, "deletions": 19, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "patch": "@@ -9,10 +9,19 @@ pub(crate) struct Manifest {\n     pub(crate) manifest_version: String,\n     pub(crate) date: String,\n     pub(crate) pkg: BTreeMap<String, Package>,\n+    pub(crate) artifacts: BTreeMap<String, Artifact>,\n     pub(crate) renames: BTreeMap<String, Rename>,\n     pub(crate) profiles: BTreeMap<String, Vec<String>>,\n }\n \n+impl Manifest {\n+    pub(crate) fn add_artifact(&mut self, name: &str, f: impl FnOnce(&mut Artifact)) {\n+        let mut artifact = Artifact { target: BTreeMap::new() };\n+        f(&mut artifact);\n+        self.artifacts.insert(name.to_string(), artifact);\n+    }\n+}\n+\n #[derive(Serialize)]\n pub(crate) struct Package {\n     pub(crate) version: String,\n@@ -25,6 +34,42 @@ pub(crate) struct Rename {\n     pub(crate) to: String,\n }\n \n+#[derive(Serialize)]\n+pub(crate) struct Artifact {\n+    pub(crate) target: BTreeMap<String, Vec<ArtifactFile>>,\n+}\n+\n+impl Artifact {\n+    pub(crate) fn add_file(&mut self, builder: &mut Builder, target: &str, path: &str) {\n+        if let Some(path) = record_shipped_file(builder, builder.input.join(path)) {\n+            self.target.entry(target.into()).or_insert_with(Vec::new).push(ArtifactFile {\n+                url: builder.url(&path),\n+                hash_sha256: FileHash::Missing(path),\n+            });\n+        }\n+    }\n+\n+    pub(crate) fn add_tarball(&mut self, builder: &mut Builder, target: &str, base_path: &str) {\n+        let files = self.target.entry(target.into()).or_insert_with(Vec::new);\n+        let base_path = builder.input.join(base_path);\n+        for compression in &[\"gz\", \"xz\"] {\n+            if let Some(tarball) = tarball_variant(builder, &base_path, compression) {\n+                files.push(ArtifactFile {\n+                    url: builder.url(&tarball),\n+                    hash_sha256: FileHash::Missing(tarball),\n+                });\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Serialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub(crate) struct ArtifactFile {\n+    pub(crate) url: String,\n+    pub(crate) hash_sha256: FileHash,\n+}\n+\n #[derive(Serialize, Default)]\n pub(crate) struct Target {\n     pub(crate) available: bool,\n@@ -39,8 +84,8 @@ pub(crate) struct Target {\n impl Target {\n     pub(crate) fn from_compressed_tar(builder: &mut Builder, base_path: &str) -> Self {\n         let base_path = builder.input.join(base_path);\n-        let gz = Self::tarball_variant(builder, &base_path, \"gz\");\n-        let xz = Self::tarball_variant(builder, &base_path, \"xz\");\n+        let gz = tarball_variant(builder, &base_path, \"gz\");\n+        let xz = tarball_variant(builder, &base_path, \"xz\");\n \n         if gz.is_none() {\n             return Self::unavailable();\n@@ -59,23 +104,6 @@ impl Target {\n         }\n     }\n \n-    fn tarball_variant(builder: &mut Builder, base: &Path, ext: &str) -> Option<PathBuf> {\n-        let mut path = base.to_path_buf();\n-        path.set_extension(ext);\n-        if path.is_file() {\n-            builder.shipped_files.insert(\n-                path.file_name()\n-                    .expect(\"missing filename\")\n-                    .to_str()\n-                    .expect(\"non-utf-8 filename\")\n-                    .to_string(),\n-            );\n-            Some(path)\n-        } else {\n-            None\n-        }\n-    }\n-\n     pub(crate) fn unavailable() -> Self {\n         Self::default()\n     }\n@@ -111,6 +139,27 @@ impl Serialize for FileHash {\n     }\n }\n \n+fn tarball_variant(builder: &mut Builder, base: &Path, ext: &str) -> Option<PathBuf> {\n+    let mut path = base.to_path_buf();\n+    path.set_extension(ext);\n+    record_shipped_file(builder, path)\n+}\n+\n+fn record_shipped_file(builder: &mut Builder, path: PathBuf) -> Option<PathBuf> {\n+    if path.is_file() {\n+        builder.shipped_files.insert(\n+            path.file_name()\n+                .expect(\"missing filename\")\n+                .to_str()\n+                .expect(\"non-utf-8 filename\")\n+                .to_string(),\n+        );\n+        Some(path)\n+    } else {\n+        None\n+    }\n+}\n+\n pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut FileHash)) {\n     for pkg in manifest.pkg.values_mut() {\n         for target in pkg.target.values_mut() {\n@@ -122,4 +171,12 @@ pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut\n             }\n         }\n     }\n+\n+    for artifact in manifest.artifacts.values_mut() {\n+        for target in artifact.target.values_mut() {\n+            for file in target {\n+                f(&mut file.hash_sha256);\n+            }\n+        }\n+    }\n }"}, {"sha": "f1a42e7145f907243992fbc532bd1473074ad028", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "patch": "@@ -13,6 +13,7 @@ const RUSTC_VERSION: &str = include_str!(\"../../../version\");\n pub(crate) enum PkgType {\n     Rust,\n     RustSrc,\n+    Rustc,\n     Cargo,\n     Rls,\n     RustAnalyzer,\n@@ -28,6 +29,7 @@ impl PkgType {\n         match component {\n             \"rust\" => PkgType::Rust,\n             \"rust-src\" => PkgType::RustSrc,\n+            \"rustc\" => PkgType::Rustc,\n             \"cargo\" => PkgType::Cargo,\n             \"rls\" | \"rls-preview\" => PkgType::Rls,\n             \"rust-analyzer\" | \"rust-analyzer-preview\" => PkgType::RustAnalyzer,\n@@ -44,6 +46,7 @@ impl PkgType {\n         match self {\n             PkgType::Rust => \"rust\",\n             PkgType::RustSrc => \"rust-src\",\n+            PkgType::Rustc => \"rustc\",\n             PkgType::Cargo => \"cargo\",\n             PkgType::Rls => \"rls\",\n             PkgType::RustAnalyzer => \"rust-analyzer\",\n@@ -69,6 +72,7 @@ impl PkgType {\n \n             PkgType::Rust => true,\n             PkgType::RustSrc => true,\n+            PkgType::Rustc => true,\n             PkgType::Other(_) => true,\n         }\n     }\n@@ -165,10 +169,11 @@ impl Versions {\n         }\n     }\n \n-    pub(crate) fn tarball_name(\n+    pub(crate) fn archive_name(\n         &mut self,\n         package: &PkgType,\n         target: &str,\n+        extension: &str,\n     ) -> Result<String, Error> {\n         let component_name = package.tarball_component_name();\n         let version = match self.channel.as_str() {\n@@ -179,12 +184,20 @@ impl Versions {\n         };\n \n         if package.target_independent() {\n-            Ok(format!(\"{}-{}.tar.gz\", component_name, version))\n+            Ok(format!(\"{}-{}.{}\", component_name, version, extension))\n         } else {\n-            Ok(format!(\"{}-{}-{}.tar.gz\", component_name, version, target))\n+            Ok(format!(\"{}-{}-{}.{}\", component_name, version, target, extension))\n         }\n     }\n \n+    pub(crate) fn tarball_name(\n+        &mut self,\n+        package: &PkgType,\n+        target: &str,\n+    ) -> Result<String, Error> {\n+        self.archive_name(package, target, \"tar.gz\")\n+    }\n+\n     pub(crate) fn rustc_version(&self) -> &str {\n         RUSTC_VERSION\n     }"}]}