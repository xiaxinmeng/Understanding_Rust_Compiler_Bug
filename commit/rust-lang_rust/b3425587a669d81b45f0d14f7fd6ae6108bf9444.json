{"sha": "b3425587a669d81b45f0d14f7fd6ae6108bf9444", "node_id": "C_kwDOAAsO6NoAKGIzNDI1NTg3YTY2OWQ4MWI0NWYwZDE0ZjdmZDZhZTYxMDhiZjk0NDQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T21:29:16Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T21:29:16Z"}, "message": "tidy + move logic to fn", "tree": {"sha": "d188f0c58247d0b90008651350fe5c1040db5e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d188f0c58247d0b90008651350fe5c1040db5e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3425587a669d81b45f0d14f7fd6ae6108bf9444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3425587a669d81b45f0d14f7fd6ae6108bf9444", "html_url": "https://github.com/rust-lang/rust/commit/b3425587a669d81b45f0d14f7fd6ae6108bf9444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3425587a669d81b45f0d14f7fd6ae6108bf9444/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b", "html_url": "https://github.com/rust-lang/rust/commit/ca5a6e43dd6fcfddf436d36f6907d8ef44c7105b"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "62f004da0cae34f162975e40f4075064ba89efbc", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=b3425587a669d81b45f0d14f7fd6ae6108bf9444", "patch": "@@ -147,6 +147,6 @@ hir_analysis_const_impl_for_non_const_trait =\n hir_analysis_const_bound_for_non_const_trait =\n     ~const can only be applied to `#[const_trait]` traits\n \n-hir_analysis_self_in_impl_self = \n+hir_analysis_self_in_impl_self =\n     `Self` is not valid in the self type of an impl block\n-    .note = replace `Self` with a different type\n\\ No newline at end of file\n+    .note = replace `Self` with a different type"}, {"sha": "9a9e40a3f43a7212ca78de76773bcb7113ea4583", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b3425587a669d81b45f0d14f7fd6ae6108bf9444", "patch": "@@ -2418,6 +2418,30 @@ impl<'hir> Ty<'hir> {\n         }\n         final_ty\n     }\n+\n+    pub fn find_self_aliases(&self) -> Vec<Span> {\n+        use crate::intravisit::Visitor;\n+        struct MyVisitor(Vec<Span>);\n+        impl<'v> Visitor<'v> for MyVisitor {\n+            fn visit_ty(&mut self, t: &'v Ty<'v>) {\n+                if matches!(\n+                    &t.kind,\n+                    TyKind::Path(QPath::Resolved(\n+                        _,\n+                        Path { res: crate::def::Res::SelfTyAlias { .. }, .. },\n+                    ))\n+                ) {\n+                    self.0.push(t.span);\n+                    return;\n+                }\n+                crate::intravisit::walk_ty(self, t);\n+            }\n+        }\n+\n+        let mut my_visitor = MyVisitor(vec![]);\n+        my_visitor.visit_ty(self);\n+        my_visitor.0\n+    }\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`."}, {"sha": "20903a68d6d935622beaabe532b0b01ea0212a25", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3425587a669d81b45f0d14f7fd6ae6108bf9444/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b3425587a669d81b45f0d14f7fd6ae6108bf9444", "patch": "@@ -319,36 +319,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(\n-                    hir::Impl { self_ty, .. }\n-                ) => {\n-                    struct MyVisitor(Vec<Span>);\n-                    impl<'v> hir::intravisit::Visitor<'v> for MyVisitor {\n-                        fn visit_ty(&mut self, t: &'v Ty<'v>) {\n-                            if matches!(\n-                                &t.kind,\n-                                TyKind::Path(hir::QPath::Resolved(\n-                                    _,\n-                                    Path {\n-                                        res: hir::def::Res::SelfTyAlias { .. },\n-                                        ..\n-                                    },\n-                                ))\n-                            ) {\n-                                self.0.push(t.span);\n-                                return;\n-                            }\n-                            hir::intravisit::walk_ty(self, t);\n-                        }\n-                    }\n-\n-                    let mut my_visitor = MyVisitor(vec![]);\n-                    my_visitor.visit_ty(self_ty);\n-\n-                    match my_visitor.0 {\n-                        spans if spans.len() > 0 => { \n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => {\n+                    match self_ty.find_self_aliases() {\n+                        spans if spans.len() > 0 => {\n                             tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: (), });\n-                            tcx.ty_error() \n+                            tcx.ty_error()\n                         },\n                         _ => icx.to_ty(*self_ty),\n                     }"}]}