{"sha": "1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWY0MjBlMWIxYzk1YWMxNWM1ZmE4NGU5ZTJiYmJkNWFjM2YzMDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-01T06:07:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T06:07:38Z"}, "message": "Rollup merge of #82628 - vakaras:realloc-doc, r=Mark-Simulacrum\n\nTry to clarify GlobalAlloc::realloc documentation comment.\n\nThis PR tries to improve the documentation of [GlobalAlloc::realloc](https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#method.realloc) with two aspects:\n\n1. Explicitly mention that `realloc` preserves the contents of the original memory block.\n2. Explicitly mention which layout should be used to deallocate the reallocated block.", "tree": {"sha": "c6d5a697949ed3925e8050697d622b647dbb9455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6d5a697949ed3925e8050697d622b647dbb9455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPISrCRBK7hj4Ov3rIwAAdHIIAGhhHupwUZ2kWkZdG48ZdZTk\nawq6yFOjPYpeXXotOpUbOQBKSTiZXZXpEyovXNlxqaQhN84rGJShw7mUru1NcVvv\n7fZq4uDrplqlNMtj5eWTs+tPVkUdBphT9aeNsUZa9pNxgwVX3NNp24mZpGJRZ+4p\nezZdkLsnmc/NIXPglDG1eg6GT0UodwwmJrlfERjj8wzmn5HH5WPFHymEHTxZsuLh\nvGeILg5cL4so2dAqyPKYhI+BUcFV+AOJhqYNrFPCKJExBbxx2xs1xCY7X+OW2i2G\nScZsJzhNS/5ONOEzsQarT81FyGmU66Phdu4DTfYz85QPCqAW1aL6SUf9Ky9blzc=\n=szKs\n-----END PGP SIGNATURE-----\n", "payload": "tree c6d5a697949ed3925e8050697d622b647dbb9455\nparent d65b231ceca9ba38c95fb19b8486a09fc7f44fa9\nparent cdfff98394d01054acbe27f8416e8de2d6178c3b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614578858 +0900\ncommitter GitHub <noreply@github.com> 1614578858 +0900\n\nRollup merge of #82628 - vakaras:realloc-doc, r=Mark-Simulacrum\n\nTry to clarify GlobalAlloc::realloc documentation comment.\n\nThis PR tries to improve the documentation of [GlobalAlloc::realloc](https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#method.realloc) with two aspects:\n\n1. Explicitly mention that `realloc` preserves the contents of the original memory block.\n2. Explicitly mention which layout should be used to deallocate the reallocated block.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308", "html_url": "https://github.com/rust-lang/rust/commit/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65b231ceca9ba38c95fb19b8486a09fc7f44fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65b231ceca9ba38c95fb19b8486a09fc7f44fa9", "html_url": "https://github.com/rust-lang/rust/commit/d65b231ceca9ba38c95fb19b8486a09fc7f44fa9"}, {"sha": "cdfff98394d01054acbe27f8416e8de2d6178c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfff98394d01054acbe27f8416e8de2d6178c3b", "html_url": "https://github.com/rust-lang/rust/commit/cdfff98394d01054acbe27f8416e8de2d6178c3b"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "6dcc110f1539c104ba3a560599bb47ffe7e096ca", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=1b9f420e1b1c95ac15c5fa84e9e2bbbd5ac3f308", "patch": "@@ -122,7 +122,7 @@ pub unsafe trait GlobalAlloc {\n     ///   this allocator,\n     ///\n     /// * `layout` must be the same layout that was used\n-    ///   to allocate that block of memory,\n+    ///   to allocate that block of memory.\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n \n@@ -167,7 +167,10 @@ pub unsafe trait GlobalAlloc {\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n     /// this method). The new memory block is allocated with `layout`, but\n-    /// with the `size` updated to `new_size`.\n+    /// with the `size` updated to `new_size`. This new layout should be\n+    /// used when deallocating the new memory block with `dealloc`. The range\n+    /// `0..min(layout.size(), new_size)` of the new memory block is\n+    /// guaranteed to have the same values as the original block.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}]}