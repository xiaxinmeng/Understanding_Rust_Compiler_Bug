{"sha": "ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNmE4NWE1MzY1Mzc0ODg2ZmU0YjFlMmY0ZmViMWQ5MjcwZWM1ZGE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-04-02T23:03:53Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-06-16T01:44:18Z"}, "message": "Small fixes", "tree": {"sha": "79517a009629626c55aec530727d60c3e1c72faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79517a009629626c55aec530727d60c3e1c72faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "html_url": "https://github.com/rust-lang/rust/commit/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23259660030a583dd78f0d8f263ab5811fc9f75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/23259660030a583dd78f0d8f263ab5811fc9f75b", "html_url": "https://github.com/rust-lang/rust/commit/23259660030a583dd78f0d8f263ab5811fc9f75b"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "dba95a888261837e83ae86dd7efc7786c97377d5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "patch": "@@ -1312,16 +1312,17 @@ pub fn init_env_logger(env: &str) {\n     tracing::subscriber::set_global_default(subscriber).unwrap();\n }\n \n+#[cfg(unix)]\n extern \"C\" {\n-    // Only available in glibc\n     fn backtrace_symbols_fd(buffer: *const *mut libc::c_void, size: libc::c_int, fd: libc::c_int);\n }\n \n #[cfg(unix)]\n-fn print_stack_trace(_: libc::c_int) {\n+extern \"C\" fn print_stack_trace(_: libc::c_int) {\n+    const MAX_FRAMES: usize = 256;\n+    static mut STACK_TRACE: [*mut libc::c_void; MAX_FRAMES] = [std::ptr::null_mut(); MAX_FRAMES];\n     unsafe {\n-        static mut STACK_TRACE: [*mut libc::c_void; 256] = [std::ptr::null_mut(); 256];\n-        let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), 256);\n+        let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), MAX_FRAMES as i32);\n         if depth == 0 {\n             return;\n         }\n@@ -1332,35 +1333,34 @@ fn print_stack_trace(_: libc::c_int) {\n #[cfg(unix)]\n // When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n // process, print a stack trace and then exit.\n-fn print_stack_trace_on_error_signal() {\n+fn install_signal_handler() {\n     unsafe {\n         const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;\n         let mut alt_stack: libc::stack_t = std::mem::zeroed();\n         alt_stack.ss_sp =\n-            std::alloc::alloc(std::alloc::Layout::from_size_align_unchecked(ALT_STACK_SIZE, 1))\n+            std::alloc::alloc(std::alloc::Layout::from_size_align(ALT_STACK_SIZE, 1).unwrap())\n                 as *mut libc::c_void;\n         alt_stack.ss_size = ALT_STACK_SIZE;\n         libc::sigaltstack(&mut alt_stack, std::ptr::null_mut());\n \n         let mut sa: libc::sigaction = std::mem::zeroed();\n-        sa.sa_sigaction =\n-            print_stack_trace as fn(libc::c_int) as *mut libc::c_void as libc::sighandler_t;\n+        sa.sa_sigaction = print_stack_trace as libc::sighandler_t;\n         sa.sa_flags = libc::SA_NODEFER | libc::SA_RESETHAND | libc::SA_ONSTACK;\n         libc::sigemptyset(&mut sa.sa_mask);\n         libc::sigaction(libc::SIGSEGV, &sa, std::ptr::null_mut());\n     }\n }\n \n-#[cfg(windows)]\n+#[cfg(not(unix))]\n // When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n // process, print a stack trace and then exit.\n-fn print_stack_trace_on_error_signal() {}\n+fn install_signal_handler() {}\n \n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n     init_rustc_env_logger();\n-    print_stack_trace_on_error_signal();\n+    install_signal_handler();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n     let exit_code = catch_with_exit_code(|| {"}]}