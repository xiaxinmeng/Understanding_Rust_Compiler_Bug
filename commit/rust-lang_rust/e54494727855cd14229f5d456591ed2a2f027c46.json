{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDQ5NDcyNzg1NWNkMTQyMjlmNWQ0NTY1OTFlZDJhMmYwMjdjNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T13:08:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T13:08:30Z"}, "message": "Auto merge of #56951 - oli-obk:auto_toolstate_issue, r=kennytm\n\nAutomatically open an issue when a tool breaks\n\ncc @nikomatsakis\n\nfixes https://github.com/rust-lang-nursery/rust-toolstate/issues/6\n\ndocumentation about issue opening via the github api: https://developer.github.com/v3/issues/#create-an-issue", "tree": {"sha": "e86e6492fcbd4a5b6201cd1e2c486bee5ad77947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86e6492fcbd4a5b6201cd1e2c486bee5ad77947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e54494727855cd14229f5d456591ed2a2f027c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c005afcb1ea399ac60f20c784c0833757bb84bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c005afcb1ea399ac60f20c784c0833757bb84bc5", "html_url": "https://github.com/rust-lang/rust/commit/c005afcb1ea399ac60f20c784c0833757bb84bc5"}, {"sha": "6ed4401609817e18a0ff781529e35b2a209ff0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed4401609817e18a0ff781529e35b2a209ff0da", "html_url": "https://github.com/rust-lang/rust/commit/6ed4401609817e18a0ff781529e35b2a209ff0da"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "ed697fc5425352b5b9d01eca284219ce010bdf3c", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e54494727855cd14229f5d456591ed2a2f027c46/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/e54494727855cd14229f5d456591ed2a2f027c46/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=e54494727855cd14229f5d456591ed2a2f027c46", "patch": "@@ -24,6 +24,17 @@\n     'rust-by-example': '@steveklabnik @marioidival @projektir',\n }\n \n+REPOS = {\n+    'miri': 'https://github.com/solson/miri',\n+    'clippy-driver': 'https://github.com/rust-lang/rust-clippy',\n+    'rls': 'https://github.com/rust-lang/rls',\n+    'rustfmt': 'https://github.com/rust-lang/rustfmt',\n+    'book': 'https://github.com/rust-lang/book',\n+    'nomicon': 'https://github.com/rust-lang-nursery/nomicon',\n+    'reference': 'https://github.com/rust-lang-nursery/reference',\n+    'rust-by-example': 'https://github.com/rust-lang/rust-by-example',\n+}\n+\n \n def read_current_status(current_commit, path):\n     '''Reads build status of `current_commit` from content of `history/*.tsv`\n@@ -35,11 +46,48 @@ def read_current_status(current_commit, path):\n                 return json.loads(status)\n     return {}\n \n+def issue(\n+    tool,\n+    maintainers,\n+    relevant_pr_number,\n+    relevant_pr_user,\n+    pr_reviewer,\n+):\n+    # Open an issue about the toolstate failure.\n+    gh_url = 'https://api.github.com/repos/rust-lang/rust/issues'\n+    assignees = [x.strip() for x in maintainers.split('@') if x != '']\n+    assignees.append(relevant_pr_user)\n+    response = urllib2.urlopen(urllib2.Request(\n+        gh_url,\n+        json.dumps({\n+            'body': textwrap.dedent('''\\\n+            Hello, this is your friendly neighborhood mergebot.\n+            After merging PR {}, I observed that the tool {} no longer builds.\n+            A follow-up PR to the repository {} is needed to fix the fallout.\n+\n+            cc @{}, do you think you would have time to do the follow-up work?\n+            If so, that would be great!\n+\n+            cc @{}, the PR reviewer, and @rust-lang/compiler -- nominating for prioritization.\n+\n+            ''').format(relevant_pr_number, tool, REPOS[tool], relevant_pr_user, pr_reviewer),\n+            'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n+            'assignees': assignees,\n+            'labels': ['T-compiler', 'I-nominated'],\n+        }),\n+        {\n+            'Authorization': 'token ' + github_token,\n+            'Content-Type': 'application/json',\n+        }\n+    ))\n+    response.read()\n \n def update_latest(\n     current_commit,\n     relevant_pr_number,\n     relevant_pr_url,\n+    relevant_pr_user,\n+    pr_reviewer,\n     current_datetime\n ):\n     '''Updates `_data/latest.json` to match build result of the given commit.\n@@ -64,19 +112,41 @@ def update_latest(\n         for status in latest:\n             tool = status['tool']\n             changed = False\n+            build_failed = False\n \n             for os, s in current_status.items():\n                 old = status[os]\n                 new = s.get(tool, old)\n                 status[os] = new\n                 if new > old:\n+                    # things got fixed or at least the status quo improved\n                     changed = True\n                     message += '\ud83c\udf89 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n                         .format(tool, os, old, new, MAINTAINERS.get(tool))\n                 elif new < old:\n+                    # tests or builds are failing and were not failing before\n                     changed = True\n-                    message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n-                        .format(tool, os, old, new, MAINTAINERS.get(tool))\n+                    title = '\ud83d\udc94 {} on {}: {} \u2192 {}' \\\n+                        .format(tool, os, old, new)\n+                    message += '{} (cc {}, @rust-lang/infra).\\n' \\\n+                        .format(title, MAINTAINERS.get(tool))\n+                    # only create issues for build failures. Other failures can be spurious\n+                    if new == 'build-fail':\n+                        build_failed = True\n+\n+            if build_failed:\n+                try:\n+                    issue(\n+                        tool, MAINTAINERS.get(tool),\n+                        relevant_pr_number, relevant_pr_user, pr_reviewer,\n+                    )\n+                except IOError as (errno, strerror):\n+                    # network errors will simply end up not creating an issue, but that's better\n+                    # than failing the entire build job\n+                    print \"I/O error({0}): {1}\".format(errno, strerror)\n+                except:\n+                    print \"Unexpected error:\", sys.exc_info()[0]\n+                    raise\n \n             if changed:\n                 status['commit'] = current_commit\n@@ -99,20 +169,30 @@ def update_latest(\n     save_message_to_path = sys.argv[3]\n     github_token = sys.argv[4]\n \n-    relevant_pr_match = re.search('#([0-9]+)', cur_commit_msg)\n+    # assume that PR authors are also owners of the repo where the branch lives\n+    relevant_pr_match = re.search(\n+        'Auto merge of #([0-9]+) - ([^:]+):[^,]+ r=([^\\s]+)',\n+        cur_commit_msg,\n+    )\n     if relevant_pr_match:\n         number = relevant_pr_match.group(1)\n+        relevant_pr_user = relevant_pr_match.group(2)\n         relevant_pr_number = 'rust-lang/rust#' + number\n         relevant_pr_url = 'https://github.com/rust-lang/rust/pull/' + number\n+        pr_reviewer = relevant_pr_match.group(3)\n     else:\n         number = '-1'\n+        relevant_pr_user = '<unknown user>'\n         relevant_pr_number = '<unknown PR>'\n         relevant_pr_url = '<unknown>'\n+        pr_reviewer = '<unknown reviewer>'\n \n     message = update_latest(\n         cur_commit,\n         relevant_pr_number,\n         relevant_pr_url,\n+        relevant_pr_user,\n+        pr_reviewer,\n         cur_datetime\n     )\n     if not message:"}]}