{"sha": "43bee03a677f1a942dabe872d7e2965659c73e27", "node_id": "C_kwDOAAsO6NoAKDQzYmVlMDNhNjc3ZjFhOTQyZGFiZTg3MmQ3ZTI5NjU2NTljNzNlMjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-10T14:01:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-10T14:01:44Z"}, "message": "Rollup merge of #105239 - gh2o:no-heap-alloc-on-thread-start, r=cuviper\n\nAvoid heap allocation when truncating thread names\n\nEnsure that heap allocation does not occur in a thread until `std::thread` is ready. This fixes issues with custom allocators that call `std::thread::current()`, since doing so prematurely initializes `THREAD_INFO` and causes the following `thread_info::set()` to fail.", "tree": {"sha": "d81607a5ef19f806ff3380964f4cf579d6b0fdbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81607a5ef19f806ff3380964f4cf579d6b0fdbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43bee03a677f1a942dabe872d7e2965659c73e27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjlJFICRBK7hj4Ov3rIwAAae8IACcX0DLR6silaYPjDjM5Z/xA\ntcXZxyga4oMGO7URa/0hAKscD2/gCsGQ3uY2RXQDO1v7LjNgAG0TJl61I9JRTcyX\nKYRku/vlB2CX395lRLPr3lGbZf0YwLCaw1fDid8aVifg0zHJmmrlGyDa/8k3YFbs\nbIcoHL/G1RmBYzs6/FMFgCcsVWmQKbEdlgECEXBP3RJ0v+LvVR3GqVHpBZwxyHoV\nc/GDKDpQCZQ3ILMBQY3WFgpeBz5dX3HOFB02vCrzbdnDH/AI43qyNtDemGuyOolT\nS02Ny6xyfLHfvNhtZX/ZzTubhwb9mqlW+T+pkeNMVFIgwIfpRQ+kTJ5OPB/Cu88=\n=IYkd\n-----END PGP SIGNATURE-----\n", "payload": "tree d81607a5ef19f806ff3380964f4cf579d6b0fdbd\nparent b66e123677ac5f4fade3bb67888f8f40f0bb28ec\nparent 3c55af5b09877c22405ed345c2873b9c5b33a20a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670680904 +0100\ncommitter GitHub <noreply@github.com> 1670680904 +0100\n\nRollup merge of #105239 - gh2o:no-heap-alloc-on-thread-start, r=cuviper\n\nAvoid heap allocation when truncating thread names\n\nEnsure that heap allocation does not occur in a thread until `std::thread` is ready. This fixes issues with custom allocators that call `std::thread::current()`, since doing so prematurely initializes `THREAD_INFO` and causes the following `thread_info::set()` to fail.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43bee03a677f1a942dabe872d7e2965659c73e27", "html_url": "https://github.com/rust-lang/rust/commit/43bee03a677f1a942dabe872d7e2965659c73e27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43bee03a677f1a942dabe872d7e2965659c73e27/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66e123677ac5f4fade3bb67888f8f40f0bb28ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66e123677ac5f4fade3bb67888f8f40f0bb28ec", "html_url": "https://github.com/rust-lang/rust/commit/b66e123677ac5f4fade3bb67888f8f40f0bb28ec"}, {"sha": "3c55af5b09877c22405ed345c2873b9c5b33a20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c55af5b09877c22405ed345c2873b9c5b33a20a", "html_url": "https://github.com/rust-lang/rust/commit/3c55af5b09877c22405ed345c2873b9c5b33a20a"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "6ecf5bdcf86d2bf792695eb1720f3c10c403eadf", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43bee03a677f1a942dabe872d7e2965659c73e27/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43bee03a677f1a942dabe872d7e2965659c73e27/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=43bee03a677f1a942dabe872d7e2965659c73e27", "patch": "@@ -136,7 +136,7 @@ impl Thread {\n \n         unsafe {\n             // Available since glibc 2.12, musl 1.1.16, and uClibc 1.0.20.\n-            let name = truncate_cstr(name, TASK_COMM_LEN);\n+            let name = truncate_cstr::<{ TASK_COMM_LEN }>(name);\n             let res = libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n             // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n             debug_assert_eq!(res, 0);\n@@ -153,7 +153,7 @@ impl Thread {\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n-            let name = truncate_cstr(name, libc::MAXTHREADNAMESIZE);\n+            let name = truncate_cstr::<{ libc::MAXTHREADNAMESIZE }>(name);\n             let res = libc::pthread_setname_np(name.as_ptr());\n             // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n             debug_assert_eq!(res, 0);\n@@ -285,17 +285,12 @@ impl Drop for Thread {\n }\n \n #[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n-fn truncate_cstr(cstr: &CStr, max_with_nul: usize) -> crate::borrow::Cow<'_, CStr> {\n-    use crate::{borrow::Cow, ffi::CString};\n-\n-    if cstr.to_bytes_with_nul().len() > max_with_nul {\n-        let bytes = cstr.to_bytes()[..max_with_nul - 1].to_vec();\n-        // SAFETY: the non-nul bytes came straight from a CStr.\n-        // (CString will add the terminating nul.)\n-        Cow::Owned(unsafe { CString::from_vec_unchecked(bytes) })\n-    } else {\n-        Cow::Borrowed(cstr)\n+fn truncate_cstr<const MAX_WITH_NUL: usize>(cstr: &CStr) -> [libc::c_char; MAX_WITH_NUL] {\n+    let mut result = [0; MAX_WITH_NUL];\n+    for (src, dst) in cstr.to_bytes().iter().zip(&mut result[..MAX_WITH_NUL - 1]) {\n+        *dst = *src as libc::c_char;\n     }\n+    result\n }\n \n pub fn available_parallelism() -> io::Result<NonZeroUsize> {"}]}