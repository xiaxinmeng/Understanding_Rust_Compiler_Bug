{"sha": "2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MjdlZWRkZTk3ZTNlOTRlNzg2ZmFmOGRmZTYxMmQ2NWQ4YTZmYTY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-09T01:05:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-09T12:28:15Z"}, "message": "Avoid deleting temporary files on error\n\nPreviously if the compiler error'd, fatally, then temporary directories which\nshould be preserved by -Csave-temps would be deleted due to fatal compiler\nerrors being implemented as panics.", "tree": {"sha": "611458fef048494d488ccb19c63dae5b77310563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611458fef048494d488ccb19c63dae5b77310563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "html_url": "https://github.com/rust-lang/rust/commit/2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceedf1d5febd65b012b8bcd513d70a0a6a091210", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceedf1d5febd65b012b8bcd513d70a0a6a091210", "html_url": "https://github.com/rust-lang/rust/commit/ceedf1d5febd65b012b8bcd513d70a0a6a091210"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "684cd82c83730dd3215579850963bed3dc7f6ef3", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -3363,6 +3363,7 @@ dependencies = [\n  \"smallvec 1.4.0\",\n  \"stable_deref_trait\",\n  \"stacker\",\n+ \"tempfile\",\n  \"tracing\",\n  \"winapi 0.3.8\",\n ]"}, {"sha": "e06edb2fe6ccc625ee2cc056b93af350106ec306", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLib};\n@@ -23,7 +24,7 @@ use super::rpath::{self, RPathConfig};\n use crate::{looks_like_rust_object_file, CodegenResults, CrateInfo, METADATA_FILENAME};\n \n use cc::windows_registry;\n-use tempfile::{Builder as TempFileBuilder, TempDir};\n+use tempfile::Builder as TempFileBuilder;\n \n use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n@@ -70,35 +71,29 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             }\n         });\n \n-        let tmpdir = TempFileBuilder::new()\n-            .prefix(\"rustc\")\n-            .tempdir()\n-            .unwrap_or_else(|err| sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n-\n         if outputs.outputs.should_codegen() {\n+            let tmpdir = TempFileBuilder::new()\n+                .prefix(\"rustc\")\n+                .tempdir()\n+                .unwrap_or_else(|err| sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n+            let path = MaybeTempDir::new(tmpdir, sess.opts.cg.save_temps);\n             let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n             match crate_type {\n                 CrateType::Rlib => {\n                     let _timer = sess.timer(\"link_rlib\");\n-                    link_rlib::<B>(\n-                        sess,\n-                        codegen_results,\n-                        RlibFlavor::Normal,\n-                        &out_filename,\n-                        &tmpdir,\n-                    )\n-                    .build();\n+                    link_rlib::<B>(sess, codegen_results, RlibFlavor::Normal, &out_filename, &path)\n+                        .build();\n                 }\n                 CrateType::Staticlib => {\n-                    link_staticlib::<B>(sess, codegen_results, &out_filename, &tmpdir);\n+                    link_staticlib::<B>(sess, codegen_results, &out_filename, &path);\n                 }\n                 _ => {\n                     link_natively::<B>(\n                         sess,\n                         crate_type,\n                         &out_filename,\n                         codegen_results,\n-                        tmpdir.path(),\n+                        path.as_ref(),\n                         target_cpu,\n                     );\n                 }\n@@ -107,10 +102,6 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                 sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename, \"link\");\n             }\n         }\n-\n-        if sess.opts.cg.save_temps {\n-            let _ = tmpdir.into_path();\n-        }\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n@@ -279,8 +270,8 @@ pub fn each_linked_rlib(\n /// building an `.rlib` (stomping over one another), or writing an `.rmeta` into a\n /// directory being searched for `extern crate` (observing an incomplete file).\n /// The returned path is the temporary file containing the complete metadata.\n-pub fn emit_metadata(sess: &Session, metadata: &EncodedMetadata, tmpdir: &TempDir) -> PathBuf {\n-    let out_filename = tmpdir.path().join(METADATA_FILENAME);\n+pub fn emit_metadata(sess: &Session, metadata: &EncodedMetadata, tmpdir: &MaybeTempDir) -> PathBuf {\n+    let out_filename = tmpdir.as_ref().join(METADATA_FILENAME);\n     let result = fs::write(&out_filename, &metadata.raw_data);\n \n     if let Err(e) = result {\n@@ -301,7 +292,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     flavor: RlibFlavor,\n     out_filename: &Path,\n-    tmpdir: &TempDir,\n+    tmpdir: &MaybeTempDir,\n ) -> B {\n     info!(\"preparing rlib to {:?}\", out_filename);\n     let mut ab = <B as ArchiveBuilder>::new(sess, out_filename, None);\n@@ -406,7 +397,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n     out_filename: &Path,\n-    tempdir: &TempDir,\n+    tempdir: &MaybeTempDir,\n ) {\n     let mut ab =\n         link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir);"}, {"sha": "65812cc4e687ddeae7d9100347fe6e073c6ca760", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -30,6 +30,7 @@ bitflags = \"1.2.1\"\n measureme = \"0.7.1\"\n libc = \"0.2\"\n stacker = \"0.1.9\"\n+tempfile = \"3.0.5\"\n \n [dependencies.parking_lot]\n version = \"0.10\""}, {"sha": "3884fc051056edff3bbbee3da634077916797320", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -95,6 +95,7 @@ pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;\n+pub mod temp_dir;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "0d9b3e3ca25c0a744e131615d47b60d6b76f4174", "filename": "src/librustc_data_structures/temp_dir.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2Ftemp_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_data_structures%2Ftemp_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftemp_dir.rs?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -0,0 +1,34 @@\n+use std::mem::ManuallyDrop;\n+use std::path::Path;\n+use tempfile::TempDir;\n+\n+/// This is used to avoid TempDir being dropped on error paths unintentionally.\n+#[derive(Debug)]\n+pub struct MaybeTempDir {\n+    dir: ManuallyDrop<TempDir>,\n+    // Whether the TempDir should be deleted on drop.\n+    keep: bool,\n+}\n+\n+impl Drop for MaybeTempDir {\n+    fn drop(&mut self) {\n+        // Safety: We are in the destructor, and no further access will\n+        // occur.\n+        let dir = unsafe { ManuallyDrop::take(&mut self.dir) };\n+        if self.keep {\n+            dir.into_path();\n+        }\n+    }\n+}\n+\n+impl AsRef<Path> for MaybeTempDir {\n+    fn as_ref(&self) -> &Path {\n+        self.dir.path()\n+    }\n+}\n+\n+impl MaybeTempDir {\n+    pub fn new(dir: TempDir, keep_on_drop: bool) -> MaybeTempDir {\n+        MaybeTempDir { dir: ManuallyDrop::new(dir), keep: keep_on_drop }\n+    }\n+}"}, {"sha": "701fca8e4b53488f80fcbc1184c1acaa8caa5201", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2627eedde97e3e94e786faf8dfe612d65d8a6fa6/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=2627eedde97e3e94e786faf8dfe612d65d8a6fa6", "patch": "@@ -9,6 +9,7 @@ use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n@@ -974,6 +975,7 @@ fn encode_and_write_metadata(\n             .prefix(\"rmeta\")\n             .tempdir_in(out_filename.parent().unwrap())\n             .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n+        let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n         let metadata_filename = emit_metadata(tcx.sess, &metadata, &metadata_tmpdir);\n         if let Err(e) = fs::rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));"}]}