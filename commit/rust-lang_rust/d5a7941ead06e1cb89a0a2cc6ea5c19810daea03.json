{"sha": "d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTc5NDFlYWQwNmUxY2I4OWEwYTJjYzZlYTVjMTk4MTBkYWVhMDM=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-16T16:56:08Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-17T16:42:18Z"}, "message": "Fix message for `match_wildcard_for_single_variant`", "tree": {"sha": "ff4d80b8d7db6d8e3d7a56da8fd1397778286576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff4d80b8d7db6d8e3d7a56da8fd1397778286576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBSMW4ACgkQ2lnoZDo37QYb3gEAnefHNN5gqR8FLgoxKpaNXa3W\nmak+3EwR4XbIiYxlSpYBAOxE3wsio3Zo8Jz5GqIrxhmreeclqmaZvz4XxL8dgiQP\n=NIjS\n-----END PGP SIGNATURE-----", "payload": "tree ff4d80b8d7db6d8e3d7a56da8fd1397778286576\nparent 6cc9cac4bc7a2eca8528bfa78383dac68cc5b7bf\nauthor Jason Newcomb <jsnewcomb@pm.me> 1615913768 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1615999338 -0400\n\nFix message for `match_wildcard_for_single_variant`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "html_url": "https://github.com/rust-lang/rust/commit/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc9cac4bc7a2eca8528bfa78383dac68cc5b7bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc9cac4bc7a2eca8528bfa78383dac68cc5b7bf", "html_url": "https://github.com/rust-lang/rust/commit/6cc9cac4bc7a2eca8528bfa78383dac68cc5b7bf"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "d43cb32ee513e061430e663d72f658a7cdce571c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "patch": "@@ -1106,7 +1106,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             cx,\n             MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n             wildcard_span,\n-            \"match on non-exhaustive enum doesn't explicitly match all known variants\",\n+            \"wildcard matches only a single variant and will also match any future added variants\",\n             \"try this\",\n             format_suggestion(x),\n             Applicability::MaybeIncorrect,\n@@ -1115,9 +1115,9 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             let mut suggestions: Vec<_> = variants.iter().cloned().map(format_suggestion).collect();\n             let message = if adt_def.is_variant_list_non_exhaustive() {\n                 suggestions.push(\"_\".into());\n-                \"match on non-exhaustive enum doesn't explicitly match all known variants\"\n+                \"wildcard matches known variants and will also match future added variants\"\n             } else {\n-                \"wildcard match will miss any future added variants\"\n+                \"wildcard match will also match any future added variants\"\n             };\n \n             span_lint_and_sugg("}, {"sha": "34538dea8e5f437e836daa4e8aa4bf2dc8074ffd", "filename": "tests/ui/match_wildcard_for_single_variants.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr?ref=d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "patch": "@@ -1,48 +1,48 @@\n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:24:13\n    |\n LL |             _ => (),\n    |             ^ help: try this: `Self::Rgb(..)`\n    |\n    = note: `-D clippy::match-wildcard-for-single-variants` implied by `-D warnings`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:34:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `Foo::C`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:44:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `Color::Blue`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:52:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `Color::Blue`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:58:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `Color::Blue`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:75:9\n    |\n LL |         &_ => (),\n    |         ^^ help: try this: `Color::Blue`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:84:9\n    |\n LL |         _ => (),\n    |         ^ help: try this: `C::Blue`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches only a single variant and will also match any future added variants\n   --> $DIR/match_wildcard_for_single_variants.rs:91:9\n    |\n LL |         _ => (),"}, {"sha": "a513a62c748d6a7a683e70c9721ff93289f6b59c", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7941ead06e1cb89a0a2cc6ea5c19810daea03/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=d5a7941ead06e1cb89a0a2cc6ea5c19810daea03", "patch": "@@ -1,4 +1,4 @@\n-error: wildcard match will miss any future added variants\n+error: wildcard match will also match any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n@@ -10,25 +10,25 @@ note: the lint level is defined here\n LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: wildcard match will miss any future added variants\n+error: wildcard match will also match any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:43:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n-error: wildcard match will miss any future added variants\n+error: wildcard match will also match any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:47:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n-error: wildcard match will miss any future added variants\n+error: wildcard match will also match any future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:63:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n-error: match on non-exhaustive enum doesn't explicitly match all known variants\n+error: wildcard matches known variants and will also match future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},"}]}