{"sha": "e4a259b5e480ea5b444384f9ff9cd862a46a9d16", "node_id": "C_kwDOAAsO6NoAKGU0YTI1OWI1ZTQ4MGVhNWI0NDQzODRmOWZmOWNkODYyYTQ2YTlkMTY", "commit": {"author": {"name": "Jan Behrens", "email": "jbe@magnetkern.de", "date": "2022-07-19T21:53:40Z"}, "committer": {"name": "Jan Behrens", "email": "jbe@magnetkern.de", "date": "2022-07-19T21:53:40Z"}, "message": "fixup! docs: Improve AsRef / AsMut docs on blanket impls\n\nBetter conform to Rust API Documentation Conventions", "tree": {"sha": "17b9985faee818f5f247d490b353e918c2be8d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b9985faee818f5f247d490b353e918c2be8d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a259b5e480ea5b444384f9ff9cd862a46a9d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a259b5e480ea5b444384f9ff9cd862a46a9d16", "html_url": "https://github.com/rust-lang/rust/commit/e4a259b5e480ea5b444384f9ff9cd862a46a9d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a259b5e480ea5b444384f9ff9cd862a46a9d16/comments", "author": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JanBeh", "id": 76393822, "node_id": "MDQ6VXNlcjc2MzkzODIy", "avatar_url": "https://avatars.githubusercontent.com/u/76393822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanBeh", "html_url": "https://github.com/JanBeh", "followers_url": "https://api.github.com/users/JanBeh/followers", "following_url": "https://api.github.com/users/JanBeh/following{/other_user}", "gists_url": "https://api.github.com/users/JanBeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanBeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanBeh/subscriptions", "organizations_url": "https://api.github.com/users/JanBeh/orgs", "repos_url": "https://api.github.com/users/JanBeh/repos", "events_url": "https://api.github.com/users/JanBeh/events{/privacy}", "received_events_url": "https://api.github.com/users/JanBeh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f68e3ef1b3bc0a7f1ce4d7ff7fc74bcaa2d42ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f68e3ef1b3bc0a7f1ce4d7ff7fc74bcaa2d42ad", "html_url": "https://github.com/rust-lang/rust/commit/9f68e3ef1b3bc0a7f1ce4d7ff7fc74bcaa2d42ad"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "bdd862f39c80127fb8885391fb8abcead38b35b2", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4a259b5e480ea5b444384f9ff9cd862a46a9d16/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a259b5e480ea5b444384f9ff9cd862a46a9d16/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=e4a259b5e480ea5b444384f9ff9cd862a46a9d16", "patch": "@@ -146,8 +146,9 @@ pub const fn identity<T>(x: T) -> T {\n /// let y: &i32 = &x;\n /// ```\n ///\n-/// Types which implement [`Deref`][core::ops::Deref] should consider implementing `AsRef` as\n-/// follows:\n+/// Types which implement [`Deref`] should consider implementing `AsRef<T>` as follows:\n+///\n+/// [`Deref`]: core::ops::Deref\n ///\n /// ```\n /// # use core::ops::Deref;\n@@ -172,12 +173,14 @@ pub const fn identity<T>(x: T) -> T {\n /// # Reflexivity\n ///\n /// Ideally, `AsRef` would be reflexive, that is there is an `impl<T: ?Sized> AsRef<T> for T`, with\n-/// [`as_ref`][AsRef::as_ref] simply returning its argument unchanged.\n+/// [`as_ref`] simply returning its argument unchanged.\n /// Such a blanket implementation is currently *not* provided due to technical restrictions of\n /// Rust's type system (it would be overlapping with another existing blanket implementation for\n /// `&T where T: AsRef<U>` which allows `AsRef` to auto-dereference, see \"Generic Implementations\"\n /// above).\n ///\n+/// [`as_ref`]: AsRef::as_ref\n+///\n /// A trivial implementation of `AsRef<T> for T` must be added explicitly for a particular type `T`\n /// where needed or desired. Note, however, that not all types from `std` contain such an\n /// implementation, and those cannot be added by external code due to orphan rules.\n@@ -249,8 +252,10 @@ pub trait AsRef<T: ?Sized> {\n /// let y: &mut i32 = &mut x;\n /// ```\n ///\n-/// Types which implement [`DerefMut`](core::ops::DerefMut) should consider to add an\n-/// implementation of `AsMut` as follows:\n+/// Types which implement [`DerefMut`] should consider to add an implementation of `AsMut<T>` as\n+/// follows:\n+///\n+/// [`DerefMut`]: core::ops::DerefMut\n ///\n /// ```\n /// # use core::ops::{Deref, DerefMut};\n@@ -279,12 +284,14 @@ pub trait AsRef<T: ?Sized> {\n /// # Reflexivity\n ///\n /// Ideally, `AsMut` would be reflexive, that is there is an `impl<T: ?Sized> AsMut<T> for T`, with\n-/// [`as_mut`][AsMut::as_mut] simply returning its argument unchanged.\n+/// [`as_mut`] simply returning its argument unchanged.\n /// Such a blanket implementation is currently *not* provided due to technical restrictions of\n /// Rust's type system (it would be overlapping with another existing blanket implementation for\n /// `&mut T where T: AsMut<U>` which allows `AsMut` to auto-dereference, see \"Generic\n /// Implementations\" above).\n ///\n+/// [`as_mut`]: AsMut::as_mut\n+///\n /// A trivial implementation of `AsMut<T> for T` must be added explicitly for a particular type `T`\n /// where needed or desired. Note, however, that not all types from `std` contain such an\n /// implementation, and those cannot be added by external code due to orphan rules.\n@@ -298,7 +305,7 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// In the following, the example functions `caesar` and `null_terminate` provide a generic\n /// interface which work with any type that can be converted by cheap mutable-to-mutable conversion\n-/// into a byte slice or byte `Vec`, respectively.\n+/// into a byte slice (`[u8]`) or byte vector (`Vec<u8>`), respectively.\n ///\n /// [dereference]: core::ops::DerefMut\n /// [target type]: core::ops::Deref::Target"}]}