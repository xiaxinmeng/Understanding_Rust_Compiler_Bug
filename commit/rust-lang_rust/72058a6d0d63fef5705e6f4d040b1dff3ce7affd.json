{"sha": "72058a6d0d63fef5705e6f4d040b1dff3ce7affd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDU4YTZkMGQ2M2ZlZjU3MDVlNmY0ZDA0MGIxZGZmM2NlN2FmZmQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-06T07:40:36Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-06T07:40:36Z"}, "message": "Simplify , removing a FIXME", "tree": {"sha": "65f723ff873e2d2f98f0983e36a7f48cb78b869a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f723ff873e2d2f98f0983e36a7f48cb78b869a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72058a6d0d63fef5705e6f4d040b1dff3ce7affd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72058a6d0d63fef5705e6f4d040b1dff3ce7affd", "html_url": "https://github.com/rust-lang/rust/commit/72058a6d0d63fef5705e6f4d040b1dff3ce7affd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72058a6d0d63fef5705e6f4d040b1dff3ce7affd/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d42949c43f10e71e4cd51d1243829522b0b724", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d42949c43f10e71e4cd51d1243829522b0b724", "html_url": "https://github.com/rust-lang/rust/commit/c3d42949c43f10e71e4cd51d1243829522b0b724"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "321a45322fd282bf56ebb0728056b840c5903138", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72058a6d0d63fef5705e6f4d040b1dff3ce7affd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72058a6d0d63fef5705e6f4d040b1dff3ce7affd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=72058a6d0d63fef5705e6f4d040b1dff3ce7affd", "patch": "@@ -1126,7 +1126,6 @@ mod test {\n }\n \n pub fn match_def_path<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, did: DefId, syms: &[&str]) -> bool {\n-    // HACK: find a way to use symbols from clippy or just go fully to diagnostic items\n-    let syms: Vec<_> = syms.iter().map(|sym| Symbol::intern(sym)).collect();\n-    cx.match_def_path(did, &syms)\n+    let path = cx.get_def_path(did);\n+    path.len() == syms.len() && path.into_iter().zip(syms.iter()).all(|(a, &b)| a.as_str() == b)\n }"}]}