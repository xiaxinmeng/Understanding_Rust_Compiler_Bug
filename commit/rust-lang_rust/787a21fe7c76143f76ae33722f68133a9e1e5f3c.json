{"sha": "787a21fe7c76143f76ae33722f68133a9e1e5f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4N2EyMWZlN2M3NjE0M2Y3NmFlMzM3MjJmNjgxMzNhOWUxZTVmM2M=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-31T23:47:58Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-01T01:33:55Z"}, "message": "Fix some typos in SSE-AVX intrinsics.\n\nI believe everything that doesn't take a constant integer up to SSE4.2\nshould now be correct (I don't have any reason to believe that those\nthat do take constant integers are wrong; they're just more complicated\nand I just haven't tested them in detail).", "tree": {"sha": "764b4900785c4fb8cd4edae6d2dbabee67683a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764b4900785c4fb8cd4edae6d2dbabee67683a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787a21fe7c76143f76ae33722f68133a9e1e5f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787a21fe7c76143f76ae33722f68133a9e1e5f3c", "html_url": "https://github.com/rust-lang/rust/commit/787a21fe7c76143f76ae33722f68133a9e1e5f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787a21fe7c76143f76ae33722f68133a9e1e5f3c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b", "html_url": "https://github.com/rust-lang/rust/commit/bb6be30d6f7bf502e5e6fa28f460902ea03cd75b"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "abd0b369573a0e8c8158f14d0913d7ddf8fd8c86", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=787a21fe7c76143f76ae33722f68133a9e1e5f3c", "patch": "@@ -19,8 +19,8 @@\n             \"intrinsic\": \"_madd_epi16\",\n             \"width\": [128],\n             \"llvm\": \"pmadd.wd\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\"]\n         },\n         {\n             \"intrinsic\": \"_max_{0.data_type}\",\n@@ -68,11 +68,11 @@\n             \"intrinsic\": \"_mul_epu32\",\n             \"width\": [128],\n             \"llvm\": \"pmulu.dq\",\n-            \"ret\": \"s64\",\n+            \"ret\": \"u64\",\n             \"args\": [\"0dn\", \"0dn\"]\n         },\n         {\n-            \"intrinsic\": \"_mulhi_ep{0.kind}16\",\n+            \"intrinsic\": \"_mulhi_{0.data_type}\",\n             \"width\": [128],\n             \"llvm\": \"pmulh{0.kind_short}.w\",\n             \"ret\": \"i16\","}, {"sha": "de792cd1060bbec74a67560efab31e9e743b9ec7", "filename": "src/etc/platform-intrinsics/x86/sse41.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "raw_url": "https://github.com/rust-lang/rust/raw/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json?ref=787a21fe7c76143f76ae33722f68133a9e1e5f3c", "patch": "@@ -39,7 +39,7 @@\n         {\n             \"intrinsic\": \"_mul_epi32\",\n             \"width\": [128],\n-            \"llvm\": \"muldq\",\n+            \"llvm\": \"pmuldq\",\n             \"ret\": \"s64\",\n             \"args\": [\"s32\", \"s32\"]\n         },\n@@ -58,9 +58,9 @@\n             \"args\": [\"u64\", \"u64\"]\n         },\n         {\n-            \"intrinsic\": \"_testncz_si128\",\n+            \"intrinsic\": \"_testnzc_si128\",\n             \"width\": [128],\n-            \"llvm\": \"ptest.nzc\",\n+            \"llvm\": \"ptestnzc\",\n             \"ret\": \"S32\",\n             \"args\": [\"u64\", \"u64\"]\n         },"}, {"sha": "af6afbb19a26d0669d852c7e78f12f0ef6e8252b", "filename": "src/etc/platform-intrinsics/x86/ssse3.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json?ref=787a21fe7c76143f76ae33722f68133a9e1e5f3c", "patch": "@@ -4,7 +4,7 @@\n         {\n             \"intrinsic\": \"_abs_{0.data_type}\",\n             \"width\": [128],\n-            \"llvm\": \"pabs.{0.data_type_short}\",\n+            \"llvm\": \"pabs.{0.data_type_short}.128\",\n             \"ret\": \"s(8-32)\",\n             \"args\": [\"0\"]\n         },\n@@ -41,7 +41,7 @@\n             \"width\": [128],\n             \"llvm\": \"pmadd.ub.sw.128\",\n             \"ret\": \"s16\",\n-            \"args\": [\"s8\", \"s8\"]\n+            \"args\": [\"u8\", \"s8\"]\n         },\n         {\n             \"intrinsic\": \"_mulhrs_epi16\",\n@@ -61,7 +61,7 @@\n             \"intrinsic\": \"_sign_{0.data_type}\",\n             \"width\": [128],\n             \"llvm\": \"psign.{0.data_type_short}.128\",\n-            \"ret\": \"s(8-16)\",\n+            \"ret\": \"s(8-32)\",\n             \"args\": [\"0\", \"0\"]\n         }\n     ]"}, {"sha": "64c31ccb50d4ae4206a82f12c5efa21ffe508f84", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787a21fe7c76143f76ae33722f68133a9e1e5f3c/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=787a21fe7c76143f76ae33722f68133a9e1e5f3c", "patch": "@@ -82,7 +82,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         },\n         \"_madd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n-            output: v(i(16), 8),\n+            output: v(i(32), 4),\n             definition: Named(\"llvm.x86.sse2.pmadd.wd\")\n         },\n         \"_max_epi16\" => Intrinsic {\n@@ -126,11 +126,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.sse2.pmovmskb.128\")\n         },\n         \"_mul_epu32\" => Intrinsic {\n-            inputs: vec![v(i(32), 4), v(i(32), 4)],\n-            output: v(i(64), 2),\n+            inputs: vec![v(u(32), 4), v(u(32), 4)],\n+            output: v(u(64), 2),\n             definition: Named(\"llvm.x86.sse2.pmulu.dq\")\n         },\n-        \"_mulhi_eps16\" => Intrinsic {\n+        \"_mulhi_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.sse2.pmulh.w\")\n@@ -218,17 +218,17 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         \"_abs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16)],\n             output: v(i(8), 16),\n-            definition: Named(\"llvm.x86.ssse3.pabs.b\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.b.128\")\n         },\n         \"_abs_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8)],\n             output: v(i(16), 8),\n-            definition: Named(\"llvm.x86.ssse3.pabs.w\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.w.128\")\n         },\n         \"_abs_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4)],\n             output: v(i(32), 4),\n-            definition: Named(\"llvm.x86.ssse3.pabs.d\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.d.128\")\n         },\n         \"_hadd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n@@ -261,7 +261,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.ssse3.phsub.sw.128\")\n         },\n         \"_maddubs_epi16\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            inputs: vec![v(u(8), 16), v(i(8), 16)],\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.ssse3.pmadd.ub.sw.128\")\n         },\n@@ -285,6 +285,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.ssse3.psign.w.128\")\n         },\n+        \"_sign_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.ssse3.psign.d.128\")\n+        },\n         \"_dp_ps\" => Intrinsic {\n             inputs: vec![v(f(32), 4), v(f(32), 4), i_(32, 8)],\n             output: v(f(32), 4),\n@@ -348,7 +353,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         \"_mul_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4), v(i(32), 4)],\n             output: v(i(64), 2),\n-            definition: Named(\"llvm.x86.sse41.muldq\")\n+            definition: Named(\"llvm.x86.sse41.pmuldq\")\n         },\n         \"_packus_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4), v(i(32), 4)],\n@@ -360,10 +365,10 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: i(32),\n             definition: Named(\"llvm.x86.sse41.ptestc\")\n         },\n-        \"_testncz_si128\" => Intrinsic {\n+        \"_testnzc_si128\" => Intrinsic {\n             inputs: vec![v(u(64), 2), v(u(64), 2)],\n             output: i(32),\n-            definition: Named(\"llvm.x86.sse41.ptest.nzc\")\n+            definition: Named(\"llvm.x86.sse41.ptestnzc\")\n         },\n         \"_testz_si128\" => Intrinsic {\n             inputs: vec![v(u(64), 2), v(u(64), 2)],"}]}