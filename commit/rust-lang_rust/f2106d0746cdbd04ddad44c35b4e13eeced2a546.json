{"sha": "f2106d0746cdbd04ddad44c35b4e13eeced2a546", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMTA2ZDA3NDZjZGJkMDRkZGFkNDRjMzViNGUxM2VlY2VkMmE1NDY=", "commit": {"author": {"name": "Sebastian Geisler", "email": "sebastian@blockstream.io", "date": "2018-11-16T06:56:07Z"}, "committer": {"name": "Sebastian Geisler", "email": "sebastian@blockstream.io", "date": "2018-11-16T06:56:07Z"}, "message": "use ? operator instead of match", "tree": {"sha": "f1632da493641386c0ce885f12379009e60ae997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1632da493641386c0ce885f12379009e60ae997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2106d0746cdbd04ddad44c35b4e13eeced2a546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2106d0746cdbd04ddad44c35b4e13eeced2a546", "html_url": "https://github.com/rust-lang/rust/commit/f2106d0746cdbd04ddad44c35b4e13eeced2a546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2106d0746cdbd04ddad44c35b4e13eeced2a546/comments", "author": {"login": "sgeisler", "id": 1876998, "node_id": "MDQ6VXNlcjE4NzY5OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1876998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgeisler", "html_url": "https://github.com/sgeisler", "followers_url": "https://api.github.com/users/sgeisler/followers", "following_url": "https://api.github.com/users/sgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/sgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgeisler/subscriptions", "organizations_url": "https://api.github.com/users/sgeisler/orgs", "repos_url": "https://api.github.com/users/sgeisler/repos", "events_url": "https://api.github.com/users/sgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/sgeisler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgeisler", "id": 1876998, "node_id": "MDQ6VXNlcjE4NzY5OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1876998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgeisler", "html_url": "https://github.com/sgeisler", "followers_url": "https://api.github.com/users/sgeisler/followers", "following_url": "https://api.github.com/users/sgeisler/following{/other_user}", "gists_url": "https://api.github.com/users/sgeisler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgeisler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgeisler/subscriptions", "organizations_url": "https://api.github.com/users/sgeisler/orgs", "repos_url": "https://api.github.com/users/sgeisler/repos", "events_url": "https://api.github.com/users/sgeisler/events{/privacy}", "received_events_url": "https://api.github.com/users/sgeisler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ef38b3b7a24959ca11a29c79cf921ed5986bc9", "html_url": "https://github.com/rust-lang/rust/commit/86ef38b3b7a24959ca11a29c79cf921ed5986bc9"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "514629282ac2bfbc9ef09b001816c7db18a9ed0a", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2106d0746cdbd04ddad44c35b4e13eeced2a546/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2106d0746cdbd04ddad44c35b4e13eeced2a546/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=f2106d0746cdbd04ddad44c35b4e13eeced2a546", "patch": "@@ -46,25 +46,18 @@ impl Timespec {\n     }\n \n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = match other\n+        let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `i64`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n-        {\n-            Some(ts) => ts,\n-            None => return None,\n-        };\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n         let mut nsec = other.subsec_nanos() + self.t.tv_nsec as u32;\n         if nsec >= NSEC_PER_SEC as u32 {\n             nsec -= NSEC_PER_SEC as u32;\n-            secs = match secs.checked_add(1) {\n-                Some(ts) => ts,\n-                None => return None,\n-            }\n+            secs = secs.checked_add(1)?;\n         }\n         Some(Timespec {\n             t: syscall::TimeSpec {"}, {"sha": "6c7ee3dd922df7ac7f70f8a924e37fc93e8794cf", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2106d0746cdbd04ddad44c35b4e13eeced2a546/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2106d0746cdbd04ddad44c35b4e13eeced2a546/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=f2106d0746cdbd04ddad44c35b4e13eeced2a546", "patch": "@@ -47,25 +47,18 @@ impl Timespec {\n     }\n \n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = match other\n+        let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n-        {\n-            Some(ts) => ts,\n-            None => return None,\n-        };\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n         let mut nsec = other.subsec_nanos() + self.t.tv_nsec as u32;\n         if nsec >= NSEC_PER_SEC as u32 {\n             nsec -= NSEC_PER_SEC as u32;\n-            secs = match secs.checked_add(1) {\n-                Some(ts) => ts,\n-                None => return None,\n-            }\n+            secs = secs.checked_add(1)?;\n         }\n         Some(Timespec {\n             t: libc::timespec {"}]}