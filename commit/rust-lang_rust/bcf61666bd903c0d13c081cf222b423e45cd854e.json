{"sha": "bcf61666bd903c0d13c081cf222b423e45cd854e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjYxNjY2YmQ5MDNjMGQxM2MwODFjZjIyMmI0MjNlNDVjZDg1NGU=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T11:11:18Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-14T14:01:07Z"}, "message": "Merge `option_unwrap_used` and `result_unwrap_used` lints into `unwrap_used` lint", "tree": {"sha": "d482932a748af1e7c87aa45ab08439e8b2aedbe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d482932a748af1e7c87aa45ab08439e8b2aedbe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf61666bd903c0d13c081cf222b423e45cd854e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf61666bd903c0d13c081cf222b423e45cd854e", "html_url": "https://github.com/rust-lang/rust/commit/bcf61666bd903c0d13c081cf222b423e45cd854e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf61666bd903c0d13c081cf222b423e45cd854e/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "html_url": "https://github.com/rust-lang/rust/commit/6cbdd1e49dbb2355ac1036946a5a635e22023c6f"}], "stats": {"total": 95, "additions": 37, "deletions": 58}, "files": [{"sha": "78f98bba2b44ec1584661ed8862b29d87138508d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -1501,7 +1501,6 @@ Released 2018-09-13\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n-[`option_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_unwrap_used\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n@@ -1622,6 +1621,7 @@ Released 2018-09-13\n [`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n [`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n+[`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding"}, {"sha": "bb3bc0b454530e523f89e4591dccd890d70df893", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -680,11 +680,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OPTION_AS_REF_DEREF,\n         &methods::OPTION_EXPECT_USED,\n         &methods::OPTION_MAP_OR_NONE,\n-        &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n-        &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n         &methods::SINGLE_CHAR_PATTERN,\n@@ -695,6 +693,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::UNINIT_ASSUMED_INIT,\n         &methods::UNNECESSARY_FILTER_MAP,\n         &methods::UNNECESSARY_FOLD,\n+        &methods::UNWRAP_USED,\n         &methods::USELESS_ASREF,\n         &methods::WRONG_PUB_SELF_CONVENTION,\n         &methods::WRONG_SELF_CONVENTION,\n@@ -1090,9 +1089,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILETYPE_IS_FILE),\n         LintId::of(&methods::GET_UNWRAP),\n         LintId::of(&methods::OPTION_EXPECT_USED),\n-        LintId::of(&methods::OPTION_UNWRAP_USED),\n         LintId::of(&methods::RESULT_EXPECT_USED),\n-        LintId::of(&methods::RESULT_UNWRAP_USED),\n+        LintId::of(&methods::UNWRAP_USED),\n         LintId::of(&methods::WRONG_PUB_SELF_CONVENTION),\n         LintId::of(&misc::FLOAT_CMP_CONST),\n         LintId::of(&misc_early::UNNEEDED_FIELD_PATTERN),"}, {"sha": "1af4d03c7a22702622f83441fa5838271a354caa", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -33,40 +33,15 @@ use crate::utils::{\n };\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `.unwrap()` calls on `Option`s.\n+    /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n-    /// **Why is this bad?** Usually it is better to handle the `None` case, or to\n-    /// at least call `.expect(_)` with a more helpful message. Still, for a lot of\n+    /// **Why is this bad?** It is better to handle the `None` or `Err` case,\n+    /// or at least call `.expect(_)` with a more helpful message. Still, for a lot of\n     /// quick-and-dirty code, `unwrap` is a good choice, which is why this lint is\n     /// `Allow` by default.\n     ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n-    /// Using unwrap on an `Option`:\n-    ///\n-    /// ```rust\n-    /// let opt = Some(1);\n-    /// opt.unwrap();\n-    /// ```\n-    ///\n-    /// Better:\n-    ///\n-    /// ```rust\n-    /// let opt = Some(1);\n-    /// opt.expect(\"more helpful message\");\n-    /// ```\n-    pub OPTION_UNWRAP_USED,\n-    restriction,\n-    \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `.unwrap()` calls on `Result`s.\n-    ///\n-    /// **Why is this bad?** `result.unwrap()` will let the thread panic on `Err`\n-    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// `result.unwrap()` will let the thread panic on `Err` values.\n+    /// Normally, you want to implement more sophisticated error handling,\n     /// and propagate errors upwards with `?` operator.\n     ///\n     /// Even if you want to panic on errors, not all `Error`s implement good\n@@ -75,23 +50,31 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:**\n-    /// Using unwrap on an `Result`:\n-    ///\n+    /// **Examples:**\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n-    /// res.unwrap();\n+    /// # let opt = Some(1);\n+    ///\n+    /// // Bad\n+    /// opt.unwrap();\n+    ///\n+    /// // Good\n+    /// opt.expect(\"more helpful message\");\n     /// ```\n     ///\n-    /// Better:\n+    /// // or\n     ///\n     /// ```rust\n-    /// let res: Result<usize, ()> = Ok(1);\n+    /// # let res: Result<usize, ()> = Ok(1);\n+    ///\n+    /// // Bad\n+    /// res.unwrap();\n+    ///\n+    /// // Good\n     /// res.expect(\"more helpful message\");\n     /// ```\n-    pub RESULT_UNWRAP_USED,\n+    pub UNWRAP_USED,\n     restriction,\n-    \"using `Result.unwrap()`, which might be better handled\"\n+    \"using `.unwrap()` on `Result` or `Option`, which should at least get a better message using `expect()`\"\n }\n \n declare_clippy_lint! {\n@@ -1267,8 +1250,7 @@ declare_clippy_lint! {\n }\n \n declare_lint_pass!(Methods => [\n-    OPTION_UNWRAP_USED,\n-    RESULT_UNWRAP_USED,\n+    UNWRAP_USED,\n     OPTION_EXPECT_USED,\n     RESULT_EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n@@ -2397,9 +2379,9 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&unwrap_args[0]));\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n-        Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))\n+        Some((UNWRAP_USED, \"an Option\", \"None\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n-        Some((RESULT_UNWRAP_USED, \"a Result\", \"Err\"))\n+        Some((UNWRAP_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n     };"}, {"sha": "5cbf3ef028c7ed885e7a942fe0aa1273dc5adc1c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -1627,13 +1627,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n-    Lint {\n-        name: \"option_unwrap_used\",\n-        group: \"restriction\",\n-        desc: \"using `Option.unwrap()`, which should at least get a better message using `expect()`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"or_fun_call\",\n         group: \"perf\",\n@@ -2404,6 +2397,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"unwrap_used\",\n+        group: \"restriction\",\n+        desc: \"using `.unwrap()` on `Result` or `Option`, which should at least get a better message using `expect()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"use_debug\",\n         group: \"restriction\","}, {"sha": "a4a3cd1d37977d3dcb16181db4ad8c20a54ffaab", "filename": "tests/ui/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/tests%2Fui%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/tests%2Fui%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.rs?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::option_unwrap_used, clippy::result_unwrap_used)]\n+#![warn(clippy::unwrap_used)]\n \n fn unwrap_option() {\n     let opt = Some(0);"}, {"sha": "4f0858005f6e7f140cd0c69bcea3c9111e82b673", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcf61666bd903c0d13c081cf222b423e45cd854e/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcf61666bd903c0d13c081cf222b423e45cd854e/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=bcf61666bd903c0d13c081cf222b423e45cd854e", "patch": "@@ -4,7 +4,7 @@ error: used `unwrap()` on `an Option` value\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: used `unwrap()` on `a Result` value\n@@ -13,7 +13,6 @@ error: used `unwrap()` on `a Result` value\n LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n    = help: if you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n \n error: aborting due to 2 previous errors"}]}