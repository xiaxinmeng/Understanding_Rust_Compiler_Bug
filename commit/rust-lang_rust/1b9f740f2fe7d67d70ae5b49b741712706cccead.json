{"sha": "1b9f740f2fe7d67d70ae5b49b741712706cccead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWY3NDBmMmZlN2Q2N2Q3MGFlNWI0OWI3NDE3MTI3MDZjY2NlYWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-14T05:43:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-14T05:44:19Z"}, "message": "librustc: Reset the mode context to MoveValue for block lambdas. rs=bugfix", "tree": {"sha": "1827aa3a66fbbdbe28ddc54509b1098f90bf6502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1827aa3a66fbbdbe28ddc54509b1098f90bf6502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9f740f2fe7d67d70ae5b49b741712706cccead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9f740f2fe7d67d70ae5b49b741712706cccead", "html_url": "https://github.com/rust-lang/rust/commit/1b9f740f2fe7d67d70ae5b49b741712706cccead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9f740f2fe7d67d70ae5b49b741712706cccead/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4559895b12c5ce40739362d7cd0993bbb61afa52", "url": "https://api.github.com/repos/rust-lang/rust/commits/4559895b12c5ce40739362d7cd0993bbb61afa52", "html_url": "https://github.com/rust-lang/rust/commit/4559895b12c5ce40739362d7cd0993bbb61afa52"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "28fa77d625d93f86652bbd73f26f01ae10fae4b7", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b9f740f2fe7d67d70ae5b49b741712706cccead/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9f740f2fe7d67d70ae5b49b741712706cccead/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=1b9f740f2fe7d67d70ae5b49b741712706cccead", "patch": "@@ -32,17 +32,27 @@ struct VisitContext {\n \n fn compute_modes_for_fn_args(callee_id: node_id,\n                              args: &[@expr],\n+                             last_arg_is_block: bool,\n                              &&cx: VisitContext,\n                              v: vt<VisitContext>) {\n     let arg_tys = ty::ty_fn_args(ty::node_id_to_type(cx.tcx, callee_id));\n+    let mut i = 0;\n     for vec::each2(args, arg_tys) |arg, arg_ty| {\n-        match ty::resolved_mode(cx.tcx, arg_ty.mode) {\n-            by_ref => {\n-                let arg_cx = VisitContext { mode: ReadValue, ..cx };\n-                compute_modes_for_expr(*arg, arg_cx, v);\n+        if last_arg_is_block && i == args.len() - 1 {\n+            let block_cx = VisitContext { mode: MoveValue, ..cx };\n+            compute_modes_for_expr(*arg, block_cx, v);\n+        } else {\n+            match ty::resolved_mode(cx.tcx, arg_ty.mode) {\n+                by_ref => {\n+                    let arg_cx = VisitContext { mode: ReadValue, ..cx };\n+                    compute_modes_for_expr(*arg, arg_cx, v);\n+                }\n+                by_val | by_move | by_copy => {\n+                    compute_modes_for_expr(*arg, cx, v);\n+                }\n             }\n-            by_val | by_move | by_copy => compute_modes_for_expr(*arg, cx, v)\n         }\n+        i += 1;\n     }\n }\n \n@@ -80,10 +90,10 @@ fn compute_modes_for_expr(expr: @expr,\n     };\n \n     match expr.node {\n-        expr_call(callee, args, _) => {\n+        expr_call(callee, args, is_block) => {\n             let callee_cx = VisitContext { mode: ReadValue, ..cx };\n             compute_modes_for_expr(callee, callee_cx, v);\n-            compute_modes_for_fn_args(callee.id, args, cx, v);\n+            compute_modes_for_fn_args(callee.id, args, is_block, cx, v);\n         }\n         expr_path(*) => {\n             record_mode_for_expr(expr, cx);\n@@ -92,7 +102,7 @@ fn compute_modes_for_expr(expr: @expr,\n             let callee_cx = VisitContext { mode: CopyValue, ..cx };\n             compute_modes_for_expr(expr, callee_cx, v);\n         }\n-        expr_method_call(callee, _, _, args, _) => {\n+        expr_method_call(callee, _, _, args, is_block) => {\n             // The LHS of the dot may or may not result in a move, depending\n             // on the method map entry.\n             let callee_mode;\n@@ -111,7 +121,7 @@ fn compute_modes_for_expr(expr: @expr,\n             let callee_cx = VisitContext { mode: callee_mode, ..cx };\n             compute_modes_for_expr(callee, callee_cx, v);\n \n-            compute_modes_for_fn_args(expr.callee_id, args, cx, v);\n+            compute_modes_for_fn_args(expr.callee_id, args, is_block, cx, v);\n         }\n         expr_binary(_, lhs, rhs) | expr_assign_op(_, lhs, rhs) => {\n             // The signatures of these take their arguments by-ref, so they"}, {"sha": "020dadfc96cd2ce23fa85478cb8b98730df52c9f", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b9f740f2fe7d67d70ae5b49b741712706cccead/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9f740f2fe7d67d70ae5b49b741712706cccead/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=1b9f740f2fe7d67d70ae5b49b741712706cccead", "patch": "@@ -0,0 +1,27 @@\n+struct S {\n+    x: ~E\n+}\n+\n+enum E {\n+    Foo(~S),\n+    Bar(~int),\n+    Baz\n+}\n+\n+fn f(s: &S, g: &fn(&S)) {\n+    g(s)\n+}\n+\n+fn main() {\n+    let s = S { x: ~Bar(~42) };\n+    loop {\n+        do f(&s) |hellothere| {\n+            match hellothere.x {    //~ ERROR moving out of immutable field\n+                ~Foo(_) => {}\n+                ~Bar(x) => io::println(x.to_str()),\n+                ~Baz => {}\n+            }\n+        }\n+    }\n+}\n+"}]}