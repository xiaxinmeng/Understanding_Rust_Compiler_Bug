{"sha": "0fb37fc67d0d0278022f355bed2aac0c2b772835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjM3ZmM2N2QwZDAyNzgwMjJmMzU1YmVkMmFhYzBjMmI3NzI4MzU=", "commit": {"author": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-11-11T15:21:49Z"}, "committer": {"name": "Jeroen Bollen", "email": "contact@jeroenbollen.eu", "date": "2017-11-11T18:45:32Z"}, "message": "Improvided map_entry_replace examples\n\nThe current examples should be more realistic.", "tree": {"sha": "1359bb526162ff1df984926d73fa9914ea86c99e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1359bb526162ff1df984926d73fa9914ea86c99e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb37fc67d0d0278022f355bed2aac0c2b772835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb37fc67d0d0278022f355bed2aac0c2b772835", "html_url": "https://github.com/rust-lang/rust/commit/0fb37fc67d0d0278022f355bed2aac0c2b772835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb37fc67d0d0278022f355bed2aac0c2b772835/comments", "author": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Binero", "id": 6867251, "node_id": "MDQ6VXNlcjY4NjcyNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6867251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Binero", "html_url": "https://github.com/Binero", "followers_url": "https://api.github.com/users/Binero/followers", "following_url": "https://api.github.com/users/Binero/following{/other_user}", "gists_url": "https://api.github.com/users/Binero/gists{/gist_id}", "starred_url": "https://api.github.com/users/Binero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Binero/subscriptions", "organizations_url": "https://api.github.com/users/Binero/orgs", "repos_url": "https://api.github.com/users/Binero/repos", "events_url": "https://api.github.com/users/Binero/events{/privacy}", "received_events_url": "https://api.github.com/users/Binero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f8ee171b2d78acaee2fb3c7774af531510d945b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8ee171b2d78acaee2fb3c7774af531510d945b", "html_url": "https://github.com/rust-lang/rust/commit/0f8ee171b2d78acaee2fb3c7774af531510d945b"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "7a79a472d58d9b8701aa8546c075651cebec9896", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0fb37fc67d0d0278022f355bed2aac0c2b772835/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb37fc67d0d0278022f355bed2aac0c2b772835/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=0fb37fc67d0d0278022f355bed2aac0c2b772835", "patch": "@@ -2247,17 +2247,18 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// ```\n     /// #![feature(map_entry_replace)]\n     /// use std::collections::hash_map::{Entry, HashMap};\n+    /// use std::rc::Rc;\n     ///\n-    /// let mut map: HashMap<String, u32> = HashMap::new();\n-    /// map.insert(\"poneyland\".to_string(), 15);\n+    /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n+    /// map.insert(Rc::new(\"Stringthing\".to_string()), 15);\n     ///\n-    /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n-    ///     let (old_key, old_value): (String, u32) = entry.replace_entry(16);\n-    ///     assert_eq!(old_key, \"poneyland\");\n-    ///     assert_eq!(old_value, 15);\n+    /// let my_key = Rc::new(\"Stringthing\".to_string());\n+    ///\n+    /// if let Entry::Occupied(entry) = map.entry(my_key) {\n+    ///     // Also replace the key with a handle to our other key.\n+    ///     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);\n     /// }\n     ///\n-    /// assert_eq!(map.get(\"poneyland\"), Some(&16));\n     /// ```\n     #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n     pub fn replace_entry(mut self, value: V) -> (K, V) {\n@@ -2276,13 +2277,22 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// ```\n     /// #![feature(map_entry_replace)]\n     /// use std::collections::hash_map::{Entry, HashMap};\n+    /// use std::rc::Rc;\n+    ///\n+    /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n+    /// let mut known_strings: Vec<Rc<String>> = Vec::new();\n+    ///\n+    /// // Initialise known strings, run program, etc.\n     ///\n-    /// let mut map: HashMap<String, u32> = HashMap::new();\n-    /// map.insert(\"poneyland\".to_string(), 15);\n+    /// reclaim_memory(&mut map, &known_strings);\n     ///\n-    /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n-    ///     let old_key = entry.replace_key();\n-    ///     assert_eq!(old_key, \"poneyland\");\n+    /// fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {\n+    ///     for s in known_strings {\n+    ///         if let Entry::Occupied(entry) = map.entry(s.clone()) {\n+    ///             // Replaces the entry's key with our version of it in `known_strings`.\n+    ///             entry.replace_key();\n+    ///         }\n+    ///     }\n     /// }\n     /// ```\n     #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]"}]}