{"sha": "9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYTdkZDFlNmFmYzBmOGM5NDRjNjM0NThmYmEwZWExOWFlMmMzOTI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-08T21:02:23Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-01-12T01:43:10Z"}, "message": "Specialize Box clones to try to avoid locals\n\nFor generic `T: Clone`, we can allocate an uninitialized box beforehand,\nwhich gives the optimizer a chance to create the clone directly in the\nheap. For `T: Copy`, we can go further and do a simple memory copy,\nregardless of optimization level.", "tree": {"sha": "3b142ea782aa5edc03f4179fcf14c410cee6ab22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b142ea782aa5edc03f4179fcf14c410cee6ab22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "html_url": "https://github.com/rust-lang/rust/commit/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe531d5a5f1404281e3fb237daaf87b8180bd13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe531d5a5f1404281e3fb237daaf87b8180bd13d", "html_url": "https://github.com/rust-lang/rust/commit/fe531d5a5f1404281e3fb237daaf87b8180bd13d"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "7a9cf1948ea0c05178d3e75e30e3eb5cfde3716f", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=9aa7dd1e6afc0f8c944c63458fba0ea19ae2c392", "patch": "@@ -1014,10 +1014,14 @@ impl<T: Clone, A: Allocator + Clone> Clone for Box<T, A> {\n     /// // But they are unique objects\n     /// assert_ne!(&*x as *const i32, &*y as *const i32);\n     /// ```\n-    #[rustfmt::skip]\n     #[inline]\n     fn clone(&self) -> Self {\n-        Self::new_in((**self).clone(), self.1.clone())\n+        // Pre-allocate memory to allow writing the cloned value directly.\n+        let mut boxed = Self::new_uninit_in(self.1.clone());\n+        unsafe {\n+            (**self).write_clone_into_raw(boxed.as_mut_ptr());\n+            boxed.assume_init()\n+        }\n     }\n \n     /// Copies `source`'s contents into `self` without creating a new allocation.\n@@ -1043,6 +1047,28 @@ impl<T: Clone, A: Allocator + Clone> Clone for Box<T, A> {\n     }\n }\n \n+/// Specialize clones into pre-allocated, uninitialized memory.\n+pub(crate) trait WriteCloneIntoRaw: Sized {\n+    unsafe fn write_clone_into_raw(&self, target: *mut Self);\n+}\n+\n+impl<T: Clone> WriteCloneIntoRaw for T {\n+    #[inline]\n+    default unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n+        // Having allocated *first* may allow the optimizer to create\n+        // the cloned value in-place, skipping the local and move.\n+        unsafe { target.write(self.clone()) };\n+    }\n+}\n+\n+impl<T: Copy> WriteCloneIntoRaw for T {\n+    #[inline]\n+    unsafe fn write_clone_into_raw(&self, target: *mut Self) {\n+        // We can always copy in-place, without ever involving a local value.\n+        unsafe { target.copy_from_nonoverlapping(self, 1) };\n+    }\n+}\n+\n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n impl Clone for Box<str> {\n     fn clone(&self) -> Self {"}]}