{"sha": "6997adfee7a317ed758fa26e86298c7f1e4c01f0", "node_id": "C_kwDOAAsO6NoAKDY5OTdhZGZlZTdhMzE3ZWQ3NThmYTI2ZTg2Mjk4YzdmMWU0YzAxZjA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T15:07:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T15:07:51Z"}, "message": "simplify attribute parsing", "tree": {"sha": "b1dc83fa4c5ccc4db0dae283f2b20ee701c1dd67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1dc83fa4c5ccc4db0dae283f2b20ee701c1dd67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6997adfee7a317ed758fa26e86298c7f1e4c01f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6997adfee7a317ed758fa26e86298c7f1e4c01f0", "html_url": "https://github.com/rust-lang/rust/commit/6997adfee7a317ed758fa26e86298c7f1e4c01f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6997adfee7a317ed758fa26e86298c7f1e4c01f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13da3d93f9be7200dda0635b0822e56b965194c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/13da3d93f9be7200dda0635b0822e56b965194c5", "html_url": "https://github.com/rust-lang/rust/commit/13da3d93f9be7200dda0635b0822e56b965194c5"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "30d3d4421ac9d4f2b84fbbfdc0d08af1b40326b5", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6997adfee7a317ed758fa26e86298c7f1e4c01f0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6997adfee7a317ed758fa26e86298c7f1e4c01f0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=6997adfee7a317ed758fa26e86298c7f1e4c01f0", "patch": "@@ -27,11 +27,7 @@ pub(super) fn expr_with_attrs(p: &mut Parser) -> bool {\n     let success = cm.is_some();\n \n     match (has_attrs, cm) {\n-        (true, Some(cm)) => {\n-            let kind = cm.kind();\n-            cm.undo_completion(p).abandon(p);\n-            m.complete(p, kind);\n-        }\n+        (true, Some(cm)) => cm.extend_to(p, m),\n         _ => m.abandon(p),\n     }\n \n@@ -92,11 +88,9 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n         //     { #[A] bar!()? }\n         //     #[B] &()\n         // }\n-        if let Some(cm) = cm {\n-            cm.undo_completion(p).abandon(p);\n-            m.complete(p, kind);\n-        } else {\n-            m.abandon(p);\n+        match cm {\n+            Some(cm) => cm.extend_to(p, m),\n+            None => m.abandon(p),\n         }\n     } else {\n         // test no_semi_after_block"}, {"sha": "f6b8308c57a0718746b0bbd07c02c9626e7b96ca", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6997adfee7a317ed758fa26e86298c7f1e4c01f0/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6997adfee7a317ed758fa26e86298c7f1e4c01f0/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=6997adfee7a317ed758fa26e86298c7f1e4c01f0", "patch": "@@ -285,9 +285,8 @@ impl Marker {\n             }\n             _ => unreachable!(),\n         }\n-        let finish_pos = p.events.len() as u32;\n         p.push_event(Event::Finish);\n-        CompletedMarker::new(self.pos, finish_pos, kind)\n+        CompletedMarker::new(self.pos, kind)\n     }\n \n     /// Abandons the syntax tree node. All its children\n@@ -305,14 +304,13 @@ impl Marker {\n }\n \n pub(crate) struct CompletedMarker {\n-    start_pos: u32,\n-    finish_pos: u32,\n+    pos: u32,\n     kind: SyntaxKind,\n }\n \n impl CompletedMarker {\n-    fn new(start_pos: u32, finish_pos: u32, kind: SyntaxKind) -> Self {\n-        CompletedMarker { start_pos, finish_pos, kind }\n+    fn new(pos: u32, kind: SyntaxKind) -> Self {\n+        CompletedMarker { pos, kind }\n     }\n \n     /// This method allows to create a new node which starts\n@@ -330,29 +328,22 @@ impl CompletedMarker {\n     /// distance to `NEWSTART` into forward_parent(=2 in this case);\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n         let new_pos = p.start();\n-        let idx = self.start_pos as usize;\n+        let idx = self.pos as usize;\n         match &mut p.events[idx] {\n             Event::Start { forward_parent, .. } => {\n-                *forward_parent = Some(new_pos.pos - self.start_pos);\n+                *forward_parent = Some(new_pos.pos - self.pos);\n             }\n             _ => unreachable!(),\n         }\n         new_pos\n     }\n \n-    /// Undo this completion and turns into a `Marker`\n-    pub(crate) fn undo_completion(self, p: &mut Parser) -> Marker {\n-        let start_idx = self.start_pos as usize;\n-        let finish_idx = self.finish_pos as usize;\n-        match &mut p.events[start_idx] {\n-            Event::Start { kind, forward_parent: None } => *kind = TOMBSTONE,\n-            _ => unreachable!(),\n-        }\n-        match &mut p.events[finish_idx] {\n-            slot @ Event::Finish => *slot = Event::tombstone(),\n-            _ => unreachable!(),\n-        }\n-        Marker::new(self.start_pos)\n+    /// Extends this completed marker *to the left* up to `m`.\n+    pub(crate) fn extend_to(self, p: &mut Parser, mut m: Marker) {\n+        assert!(m.pos <= self.pos);\n+        m.bomb.defuse();\n+\n+        p.events.swap(self.pos as usize, m.pos as usize);\n     }\n \n     pub(crate) fn kind(&self) -> SyntaxKind {"}]}