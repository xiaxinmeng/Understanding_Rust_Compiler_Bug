{"sha": "a59d312280d7fdc5537a9216c2d4eff2594b8515", "node_id": "C_kwDOAAsO6NoAKGE1OWQzMTIyODBkN2ZkYzU1MzdhOTIxNmMyZDRlZmYyNTk0Yjg1MTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-11T06:48:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-11T06:48:08Z"}, "message": "Rollup merge of #93861 - JulianKnodt:notraitace, r=wesleywiser\n\nFix ICE if no trait assoc const eq\n\nFixes #93835", "tree": {"sha": "8ed1149fbe630834213696d428c56149dc04fdab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed1149fbe630834213696d428c56149dc04fdab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59d312280d7fdc5537a9216c2d4eff2594b8515", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBgaoCRBK7hj4Ov3rIwAAuLYIAJ5GVFt0aoKT6S+DvzFdsifc\nmN+Z2gXwOloNK65bxj0OScrswv9u8JPMXGrLUG5WnBWLnK0cy1IAjj++mkmRXP95\ndsDV2ryqF5YV/kM0Ahpvt2jY7k2UtheVek6sFH1OHam2N4K9PSoxFDbLGqiltllD\nVbzuJPXjvQbTk0nHUz5O94M+dYf4wqpvALQEcFxJ7IS5G0es0NOXgGFSQBMfiGPS\ncArPg4KqjQ4V8WA4xkUAm/a2GWcYsGbUBrYc3bTcCUJvhLC7wkz9e3DGnxBB5Xex\nDan4DYgBodAInd4lZx4STkIyNkRDsyEzhhPBdtINaWHZ7DxeHIvB7ZNSST8cNaU=\n=Ndg+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ed1149fbe630834213696d428c56149dc04fdab\nparent ddba967855d8795c37d7690fa1586a42af2923b6\nparent 6bc28c82c4bf729d6d0ad98df01b53653443b6fc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644562088 +0100\ncommitter GitHub <noreply@github.com> 1644562088 +0100\n\nRollup merge of #93861 - JulianKnodt:notraitace, r=wesleywiser\n\nFix ICE if no trait assoc const eq\n\nFixes #93835\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59d312280d7fdc5537a9216c2d4eff2594b8515", "html_url": "https://github.com/rust-lang/rust/commit/a59d312280d7fdc5537a9216c2d4eff2594b8515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59d312280d7fdc5537a9216c2d4eff2594b8515/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddba967855d8795c37d7690fa1586a42af2923b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddba967855d8795c37d7690fa1586a42af2923b6", "html_url": "https://github.com/rust-lang/rust/commit/ddba967855d8795c37d7690fa1586a42af2923b6"}, {"sha": "6bc28c82c4bf729d6d0ad98df01b53653443b6fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc28c82c4bf729d6d0ad98df01b53653443b6fc", "html_url": "https://github.com/rust-lang/rust/commit/6bc28c82c4bf729d6d0ad98df01b53653443b6fc"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "471cd2e6ccb1cbf50e9dab3a85d6f7d83001200a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a59d312280d7fdc5537a9216c2d4eff2594b8515/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59d312280d7fdc5537a9216c2d4eff2594b8515/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a59d312280d7fdc5537a9216c2d4eff2594b8515", "patch": "@@ -508,8 +508,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                               })\n                       }) =>\n                 {\n-                  // FIXME(associated_const_equality) when does this unwrap fail? I have no idea what case it would.\n-                  let trait_def_id = trait_ref.trait_def_id().unwrap();\n+                  let Some(trait_def_id) = trait_ref.trait_def_id() else {\n+                    return tcx.ty_error_with_message(DUMMY_SP, \"Could not find trait\");\n+                  };\n                   let assoc_items = tcx.associated_items(trait_def_id);\n                   let assoc_item = assoc_items.find_by_name_and_kind(\n                     tcx, binding.ident, ty::AssocKind::Const, def_id.to_def_id(),"}, {"sha": "5c7b065983e194f3af96f0c321e2355912882bf2", "filename": "src/test/ui/associated-consts/issue-93835.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59d312280d7fdc5537a9216c2d4eff2594b8515/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59d312280d7fdc5537a9216c2d4eff2594b8515/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.rs?ref=a59d312280d7fdc5537a9216c2d4eff2594b8515", "patch": "@@ -0,0 +1,10 @@\n+fn e() {\n+    p:a<p:p<e=6>>\n+    //~^ ERROR comparison operators\n+    //~| ERROR cannot find value\n+    //~| ERROR associated const equality\n+    //~| ERROR associated const equality\n+    //~| ERROR associated type bounds\n+}\n+\n+fn main() {}"}, {"sha": "12df0e4381d15c552bae91681969d6f2007809d4", "filename": "src/test/ui/associated-consts/issue-93835.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a59d312280d7fdc5537a9216c2d4eff2594b8515/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a59d312280d7fdc5537a9216c2d4eff2594b8515/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93835.stderr?ref=a59d312280d7fdc5537a9216c2d4eff2594b8515", "patch": "@@ -0,0 +1,66 @@\n+error: comparison operators cannot be chained\n+  --> $DIR/issue-93835.rs:2:8\n+   |\n+LL | fn e() {\n+   |        - while parsing this struct\n+LL |     p:a<p:p<e=6>>\n+   |        ^        ^\n+   |\n+   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   = help: or use `(...)` if you meant to specify fn arguments\n+\n+error[E0425]: cannot find value `p` in this scope\n+  --> $DIR/issue-93835.rs:2:5\n+   |\n+LL |     p:a<p:p<e=6>>\n+   |     ^ not found in this scope\n+   |\n+help: you might have meant to write a `struct` literal\n+   |\n+LL ~ fn e() { SomeStruct {\n+LL |     p:a<p:p<e=6>>\n+LL |\n+LL |\n+LL |\n+LL |\n+ ...\n+help: maybe you meant to write a path separator here\n+   |\n+LL |     p::a<p:p<e=6>>\n+   |      ~~\n+help: maybe you meant to write an assignment here\n+   |\n+LL |     let p:a<p:p<e=6>>\n+   |     ~~~~~\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-93835.rs:2:13\n+   |\n+LL |     p:a<p:p<e=6>>\n+   |             ^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-93835.rs:2:13\n+   |\n+LL |     p:a<p:p<e=6>>\n+   |             ^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/issue-93835.rs:2:9\n+   |\n+LL |     p:a<p:p<e=6>>\n+   |         ^^^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0425, E0658.\n+For more information about an error, try `rustc --explain E0425`."}]}