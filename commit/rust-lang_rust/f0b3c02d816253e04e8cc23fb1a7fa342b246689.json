{"sha": "f0b3c02d816253e04e8cc23fb1a7fa342b246689", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYjNjMDJkODE2MjUzZTA0ZThjYzIzZmIxYTdmYTM0MmIyNDY2ODk=", "commit": {"author": {"name": "Luca Barbieri", "email": "luca@luca-barbieri.com", "date": "2019-07-17T11:25:34Z"}, "committer": {"name": "Luca Barbieri", "email": "luca@luca-barbieri.com", "date": "2019-07-17T11:25:34Z"}, "message": "Optimize RefCell read borrowing\n\nInstead of doing two comparisons we can do only one with a bit of\ncleverness.\n\nLLVM currently can't do this optimization itself on x86-64.", "tree": {"sha": "70528f8ee01f624585b4100862fc687cd10b47fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70528f8ee01f624585b4100862fc687cd10b47fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0b3c02d816253e04e8cc23fb1a7fa342b246689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b3c02d816253e04e8cc23fb1a7fa342b246689", "html_url": "https://github.com/rust-lang/rust/commit/f0b3c02d816253e04e8cc23fb1a7fa342b246689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0b3c02d816253e04e8cc23fb1a7fa342b246689/comments", "author": {"login": "luca-barbieri", "id": 298418, "node_id": "MDQ6VXNlcjI5ODQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/298418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luca-barbieri", "html_url": "https://github.com/luca-barbieri", "followers_url": "https://api.github.com/users/luca-barbieri/followers", "following_url": "https://api.github.com/users/luca-barbieri/following{/other_user}", "gists_url": "https://api.github.com/users/luca-barbieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/luca-barbieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luca-barbieri/subscriptions", "organizations_url": "https://api.github.com/users/luca-barbieri/orgs", "repos_url": "https://api.github.com/users/luca-barbieri/repos", "events_url": "https://api.github.com/users/luca-barbieri/events{/privacy}", "received_events_url": "https://api.github.com/users/luca-barbieri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luca-barbieri", "id": 298418, "node_id": "MDQ6VXNlcjI5ODQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/298418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luca-barbieri", "html_url": "https://github.com/luca-barbieri", "followers_url": "https://api.github.com/users/luca-barbieri/followers", "following_url": "https://api.github.com/users/luca-barbieri/following{/other_user}", "gists_url": "https://api.github.com/users/luca-barbieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/luca-barbieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luca-barbieri/subscriptions", "organizations_url": "https://api.github.com/users/luca-barbieri/orgs", "repos_url": "https://api.github.com/users/luca-barbieri/repos", "events_url": "https://api.github.com/users/luca-barbieri/events{/privacy}", "received_events_url": "https://api.github.com/users/luca-barbieri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c7febb879689a3d24e3ba34531026930313c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c7febb879689a3d24e3ba34531026930313c4c", "html_url": "https://github.com/rust-lang/rust/commit/a9c7febb879689a3d24e3ba34531026930313c4c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ea803bd3a1fb6e7101cf56b0d383c5b0059ae254", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0b3c02d816253e04e8cc23fb1a7fa342b246689/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b3c02d816253e04e8cc23fb1a7fa342b246689/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f0b3c02d816253e04e8cc23fb1a7fa342b246689", "patch": "@@ -1101,13 +1101,13 @@ struct BorrowRef<'b> {\n impl<'b> BorrowRef<'b> {\n     #[inline]\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {\n-        let b = borrow.get();\n-        if is_writing(b) || b == isize::max_value() {\n+        let b = borrow.get().wrapping_add(1);\n+        if !is_reading(b) {\n             // If there's currently a writing borrow, or if incrementing the\n             // refcount would overflow into a writing borrow.\n             None\n         } else {\n-            borrow.set(b + 1);\n+            borrow.set(b);\n             Some(BorrowRef { borrow })\n         }\n     }"}]}