{"sha": "a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjlmYTZhODMyYTUxM2NkMTUzNGQxYTY1NjZlNDU4NGNhNWZiNmE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T16:13:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T20:48:47Z"}, "message": "Intern VariableKinds", "tree": {"sha": "4e6cec1c218f2844953d7df25c9536af0de852b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6cec1c218f2844953d7df25c9536af0de852b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "html_url": "https://github.com/rust-lang/rust/commit/a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a169fa6a832a513cd1534d1a6566e4584ca5fb6a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63726a91b721e119622e0c7ea106fc5c2e866bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63726a91b721e119622e0c7ea106fc5c2e866bf3", "html_url": "https://github.com/rust-lang/rust/commit/63726a91b721e119622e0c7ea106fc5c2e866bf3"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "7a3bd41d4ae9c467a32886970f76335dda76fce0", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a169fa6a832a513cd1534d1a6566e4584ca5fb6a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a169fa6a832a513cd1534d1a6566e4584ca5fb6a/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "patch": "@@ -4,7 +4,10 @@\n use super::tls;\n use base_db::salsa::InternId;\n use chalk_ir::{GenericArg, Goal, GoalData};\n-use hir_def::TypeAliasId;\n+use hir_def::{\n+    intern::{impl_internable, InternStorage, Internable, Interned},\n+    TypeAliasId,\n+};\n use smallvec::SmallVec;\n use std::{fmt, sync::Arc};\n \n@@ -26,6 +29,11 @@ pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub struct InternedVariableKindsInner(Vec<chalk_ir::VariableKind<Interner>>);\n+\n+impl_internable!(InternedVariableKindsInner,);\n+\n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Arc<chalk_ir::TyData<Self>>;\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n@@ -38,7 +46,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedProgramClause = Arc<chalk_ir::ProgramClauseData<Self>>;\n     type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n-    type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n+    type InternedVariableKinds = Interned<InternedVariableKindsInner>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type InternedVariances = Arc<[chalk_ir::Variance]>;\n@@ -322,14 +330,16 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n     ) -> Result<Self::InternedVariableKinds, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedVariableKindsInner(\n+            data.into_iter().collect::<Result<Vec<_>, E>>()?,\n+        )))\n     }\n \n     fn variable_kinds_data<'a>(\n         &self,\n         parameter_kinds: &'a Self::InternedVariableKinds,\n     ) -> &'a [chalk_ir::VariableKind<Self>] {\n-        &parameter_kinds\n+        &parameter_kinds.as_ref().0\n     }\n \n     fn intern_canonical_var_kinds<E>("}]}