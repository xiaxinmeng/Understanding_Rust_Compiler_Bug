{"sha": "b6a2d7e82249bba271599732e16ffba176ae7de8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YTJkN2U4MjI0OWJiYTI3MTU5OTczMmUxNmZmYmExNzZhZTdkZTg=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-04-01T03:06:34Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-07-11T20:27:54Z"}, "message": "support pub(restricted) in thread_local!", "tree": {"sha": "91a59892ecf239db97bd9425abfe229d9c4cf56c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a59892ecf239db97bd9425abfe229d9c4cf56c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a2d7e82249bba271599732e16ffba176ae7de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a2d7e82249bba271599732e16ffba176ae7de8", "html_url": "https://github.com/rust-lang/rust/commit/b6a2d7e82249bba271599732e16ffba176ae7de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a2d7e82249bba271599732e16ffba176ae7de8/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1475e2c923746c253da8027079c462d7e3d1022d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1475e2c923746c253da8027079c462d7e3d1022d", "html_url": "https://github.com/rust-lang/rust/commit/1475e2c923746c253da8027079c462d7e3d1022d"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "49ceaff8d3efebcd4167065eda58530850eff038", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b6a2d7e82249bba271599732e16ffba176ae7de8/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a2d7e82249bba271599732e16ffba176ae7de8/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=b6a2d7e82249bba271599732e16ffba176ae7de8", "patch": "@@ -115,7 +115,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// # Syntax\n ///\n /// The macro wraps any number of static declarations and makes them thread local.\n-/// Each static may be public or private, and attributes are allowed. Example:\n+/// Publicity and attributes for each static are allowed. Example:\n ///\n /// ```\n /// use std::cell::RefCell;\n@@ -136,31 +136,40 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n macro_rules! thread_local {\n-    // rule 0: empty (base case for the recursion)\n+    // empty (base case for the recursion)\n     () => {};\n \n-    // rule 1: process multiple declarations where the first one is private\n+    // process multiple declarations where the first one is private\n     ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* static $name: $t = $init); // go to rule 2\n+        __thread_local_inner!($(#[$attr])* [] $name, $t, $init);\n         thread_local!($($rest)*);\n     );\n \n-    // rule 2: handle a single private declaration\n+    // handle a single private declaration\n     ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr) => (\n-        $(#[$attr])* static $name: $crate::thread::LocalKey<$t> =\n-            __thread_local_inner!($t, $init);\n+        __thread_local_inner!($(#[$attr])* [] $name, $t, $init);\n     );\n \n-    // rule 3: handle multiple declarations where the first one is public\n+    // handle multiple declarations where the first one is public\n     ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* pub static $name: $t = $init); // go to rule 4\n+        __thread_local_inner!($(#[$attr])* [pub] $name, $t, $init);\n         thread_local!($($rest)*);\n     );\n \n-    // rule 4: handle a single public declaration\n+    // handle a single public declaration\n     ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr) => (\n-        $(#[$attr])* pub static $name: $crate::thread::LocalKey<$t> =\n-            __thread_local_inner!($t, $init);\n+        __thread_local_inner!($(#[$attr])* [pub] $name, $t, $init);\n+    );\n+\n+    // handle multiple declarations where the first one is restricted public\n+    ($(#[$attr:meta])* pub $vis:tt static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n+        __thread_local_inner!($(#[$attr])* [pub $vis] $name, $t, $init);\n+        thread_local!($($rest)*);\n+    );\n+\n+    // handle a single restricted public declaration\n+    ($(#[$attr:meta])* pub $vis:tt static $name:ident: $t:ty = $init:expr) => (\n+        __thread_local_inner!($(#[$attr])* [pub $vis] $name, $t, $init);\n     );\n }\n \n@@ -171,27 +180,29 @@ macro_rules! thread_local {\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! __thread_local_inner {\n-    ($t:ty, $init:expr) => {{\n-        fn __init() -> $t { $init }\n-\n-        fn __getit() -> $crate::option::Option<\n-            &'static $crate::cell::UnsafeCell<\n-                $crate::option::Option<$t>>>\n-        {\n-            #[thread_local]\n-            #[cfg(target_thread_local)]\n-            static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n-                $crate::thread::__FastLocalKeyInner::new();\n-\n-            #[cfg(not(target_thread_local))]\n-            static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n-                $crate::thread::__OsLocalKeyInner::new();\n-\n-            __KEY.get()\n-        }\n+    ($(#[$attr:meta])* [$($vis:tt)*] $name:ident, $t:ty, $init:expr) => {\n+        $(#[$attr])* $($vis)* static $name: $crate::thread::LocalKey<$t> = {\n+            fn __init() -> $t { $init }\n+\n+            fn __getit() -> $crate::option::Option<\n+                &'static $crate::cell::UnsafeCell<\n+                    $crate::option::Option<$t>>>\n+            {\n+                #[thread_local]\n+                #[cfg(target_thread_local)]\n+                static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n+                    $crate::thread::__FastLocalKeyInner::new();\n+\n+                #[cfg(not(target_thread_local))]\n+                static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n+                    $crate::thread::__OsLocalKeyInner::new();\n+\n+                __KEY.get()\n+            }\n \n-        $crate::thread::LocalKey::new(__getit, __init)\n-    }}\n+            $crate::thread::LocalKey::new(__getit, __init)\n+        };\n+    }\n }\n \n /// Indicator of the state of a thread local storage key."}, {"sha": "373824122fd51d90eca3c39aa387f55e4357afb3", "filename": "src/test/run-pass/thread-local-syntax.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6a2d7e82249bba271599732e16ffba176ae7de8/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a2d7e82249bba271599732e16ffba176ae7de8/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs?ref=b6a2d7e82249bba271599732e16ffba176ae7de8", "patch": "@@ -11,13 +11,21 @@\n #![deny(missing_docs)]\n //! this tests the syntax of `thread_local!`\n \n-thread_local! {\n-    // no docs\n-    #[allow(unused)]\n-    static FOO: i32 = 42;\n-    /// docs\n-    pub static BAR: String = String::from(\"bar\");\n+mod foo {\n+    mod bar {\n+        thread_local! {\n+            // no docs\n+            #[allow(unused)]\n+            static FOO: i32 = 42;\n+            /// docs\n+            pub static BAR: String = String::from(\"bar\");\n+\n+            // look at these restrictions!!\n+            pub(crate) static BAZ: usize = 0;\n+            pub(in foo) static QUUX: usize = 0;\n+        }\n+        thread_local!(static SPLOK: u32 = 0);\n+    }\n }\n-thread_local!(static BAZ: u32 = 0);\n \n fn main() {}"}]}