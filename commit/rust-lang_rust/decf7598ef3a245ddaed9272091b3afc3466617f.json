{"sha": "decf7598ef3a245ddaed9272091b3afc3466617f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlY2Y3NTk4ZWYzYTI0NWRkYWVkOTI3MjA5MWIzYWZjMzQ2NjYxN2Y=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-24T15:06:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-24T15:06:39Z"}, "message": "rustc: use tcx.at(span) to set the location of a query.", "tree": {"sha": "537cf185b8c1c8b3ddd32e43261fdbdbb621c823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537cf185b8c1c8b3ddd32e43261fdbdbb621c823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decf7598ef3a245ddaed9272091b3afc3466617f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decf7598ef3a245ddaed9272091b3afc3466617f", "html_url": "https://github.com/rust-lang/rust/commit/decf7598ef3a245ddaed9272091b3afc3466617f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decf7598ef3a245ddaed9272091b3afc3466617f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "html_url": "https://github.com/rust-lang/rust/commit/9bde6b6d96ccb76825c8e3bca54c28727ceeed63"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "74026abe64db2fd1c27a0b4a000bfbc490e04c5b", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -14,7 +14,7 @@ pub use rustc_const_math::ConstInt;\n use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use ty::{self, TyCtxt};\n+use ty::TyCtxt;\n use ty::subst::Substs;\n use util::common::ErrorReported;\n use rustc_const_math::*;\n@@ -228,7 +228,7 @@ pub fn eval_length(tcx: TyCtxt,\n     let count_expr = &tcx.hir.body(count).value;\n     let count_def_id = tcx.hir.body_owner_def_id(count);\n     let substs = Substs::empty();\n-    match ty::queries::const_eval::get(tcx, count_expr.span, (count_def_id, substs)) {\n+    match tcx.at(count_expr.span).const_eval((count_def_id, substs)) {\n         Ok(Integral(Usize(count))) => {\n             let val = count.as_u64(tcx.sess.target.uint_type);\n             assert_eq!(val as usize as u64, val);"}, {"sha": "1407e57dc2a6a7e48f56b027aaa34ca24462dd8d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -21,6 +21,7 @@ use util::nodemap::NodeSet;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n+use std::ops::Deref;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -329,14 +330,6 @@ macro_rules! define_maps {\n                 Self::try_get_with(tcx, span, key, Clone::clone)\n             }\n \n-            $(#[$attr])*\n-            pub fn get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) -> $V {\n-                Self::try_get(tcx, span, key).unwrap_or_else(|e| {\n-                    tcx.report_cycle(e);\n-                    Value::from_cycle_error(tcx.global_tcx())\n-                })\n-            }\n-\n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n                 // FIXME(eddyb) Move away from using `DepTrackingMap`\n                 // so we don't have to explicitly ignore a false edge:\n@@ -351,10 +344,42 @@ macro_rules! define_maps {\n             }\n         })*\n \n+        #[derive(Copy, Clone)]\n+        pub struct TyCtxtAt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+            pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+            pub span: Span,\n+        }\n+\n+        impl<'a, 'gcx, 'tcx> Deref for TyCtxtAt<'a, 'gcx, 'tcx> {\n+            type Target = TyCtxt<'a, 'gcx, 'tcx>;\n+            fn deref(&self) -> &Self::Target {\n+                &self.tcx\n+            }\n+        }\n+\n         impl<'a, $tcx, 'lcx> TyCtxt<'a, $tcx, 'lcx> {\n+            /// Return a transparent wrapper for `TyCtxt` which uses\n+            /// `span` as the location of queries performed through it.\n+            pub fn at(self, span: Span) -> TyCtxtAt<'a, $tcx, 'lcx> {\n+                TyCtxtAt {\n+                    tcx: self,\n+                    span\n+                }\n+            }\n+\n+            $($(#[$attr])*\n+            pub fn $name(self, key: $K) -> $V {\n+                self.at(DUMMY_SP).$name(key)\n+            })*\n+        }\n+\n+        impl<'a, $tcx, 'lcx> TyCtxtAt<'a, $tcx, 'lcx> {\n             $($(#[$attr])*\n             pub fn $name(self, key: $K) -> $V {\n-                queries::$name::get(self, DUMMY_SP, key)\n+                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|e| {\n+                    self.report_cycle(e);\n+                    Value::from_cycle_error(self.global_tcx())\n+                })\n             })*\n         }\n "}, {"sha": "a923ae154027b882d6130d53c194deddd2f65866", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -2699,9 +2699,8 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n /// A map for the local crate mapping each type to a vector of its\n /// inherent impls. This is not meant to be used outside of coherence;\n /// rather, you should request the vector for a specific type via\n-/// `ty::queries::inherent_impls::get(def_id)` so as to minimize your\n-/// dependencies (constructing this map requires touching the entire\n-/// crate).\n+/// `tcx.inherent_impls(def_id)` so as to minimize your dependencies\n+/// (constructing this map requires touching the entire crate).\n #[derive(Clone, Debug)]\n pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Rc<Vec<DefId>>>,"}, {"sha": "87921c80502e09a48f6d21d0cea212392d30b5ff", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::TyAdt(def, substs) => {\n                 let ty::DtorckConstraint {\n                     dtorck_types, outlives\n-                } = ty::queries::adt_dtorck_constraint::get(self, span, def.did);\n+                } = self.at(span).adt_dtorck_constraint(def.did);\n                 Ok(ty::DtorckConstraint {\n                     // FIXME: we can try to recursively `dtorck_constraint_on_ty`\n                     // there, but that needs some way to handle cycles."}, {"sha": "9470316c7e7e018799cc5677c4fed84f05842828", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -299,7 +299,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n           match cx.tables.qpath_def(qpath, e.id) {\n               Def::Const(def_id) |\n               Def::AssociatedConst(def_id) => {\n-                    match ty::queries::const_eval::get(tcx, e.span, (def_id, substs)) {\n+                    match tcx.at(e.span).const_eval((def_id, substs)) {\n                         Ok(val) => val,\n                         Err(ConstEvalErr { kind: TypeckError, .. }) => {\n                             signal!(e, TypeckError);"}, {"sha": "783e7604cdaf1b424e0effa9d38b4f0a94ece427", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n         let kind = match impl_item.kind {\n             ty::AssociatedKind::Const => {\n                 EntryKind::AssociatedConst(container,\n-                    ty::queries::mir_const_qualif::get(self.tcx, ast_item.span, def_id))\n+                    self.tcx.at(ast_item.span).mir_const_qualif(def_id))\n             }\n             ty::AssociatedKind::Method => {\n                 let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n@@ -656,7 +656,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             hir::ItemStatic(_, hir::MutMutable, _) => EntryKind::MutStatic,\n             hir::ItemStatic(_, hir::MutImmutable, _) => EntryKind::ImmStatic,\n             hir::ItemConst(..) => {\n-                EntryKind::Const(ty::queries::mir_const_qualif::get(tcx, item.span, def_id))\n+                EntryKind::Const(tcx.at(item.span).mir_const_qualif(def_id))\n             }\n             hir::ItemFn(_, _, constness, .., body) => {\n                 let data = FnData {\n@@ -732,7 +732,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n                 let coerce_unsized_info =\n                     trait_ref.and_then(|t| {\n                         if Some(t.def_id) == tcx.lang_items.coerce_unsized_trait() {\n-                            Some(ty::queries::coerce_unsized_info::get(tcx, item.span, def_id))\n+                            Some(tcx.at(item.span).coerce_unsized_info(def_id))\n                         } else {\n                             None\n                         }"}, {"sha": "7b267fa276b1873598cdd609c8496b6d9da5ea14", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -594,7 +594,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let c = &cx.tcx.hir.body(count).value;\n             let def_id = cx.tcx.hir.body_owner_def_id(count);\n             let substs = Substs::empty();\n-            let count = match ty::queries::const_eval::get(cx.tcx, c.span, (def_id, substs)) {\n+            let count = match cx.tcx.at(c.span).const_eval((def_id, substs)) {\n                 Ok(ConstVal::Integral(ConstInt::Usize(u))) => u,\n                 Ok(other) => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n                 Err(s) => cx.fatal_const_eval_err(&s, c.span, \"expression\")"}, {"sha": "afb775aa01e70a73c35726397186446ba8bc7a71", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -573,9 +573,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if substs.types().next().is_some() {\n                         self.add_type(constant.ty);\n                     } else {\n-                        let bits = ty::queries::mir_const_qualif::get(self.tcx,\n-                                                                      constant.span,\n-                                                                      def_id);\n+                        let bits = self.tcx.at(constant.span).mir_const_qualif(def_id);\n \n                         let qualif = Qualif::from_bits(bits).expect(\"invalid mir_const_qualif\");\n                         self.add(qualif);"}, {"sha": "c06e0bd5cede969552f7411de70e65cb63202069", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -238,7 +238,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n         let default_needs_object_self = |p: &ty::TypeParameterDef| {\n             if is_object && p.has_default {\n-                if ty::queries::type_of::get(tcx, span, p.def_id).has_self_ty() {\n+                if tcx.at(span).type_of(p.def_id).has_self_ty() {\n                     // There is no suitable inference default for a type parameter\n                     // that references self, in an object type.\n                     return true;\n@@ -307,7 +307,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     // This is a default type parameter.\n                     self.normalize_ty(\n                         span,\n-                        ty::queries::type_of::get(tcx, span, def.def_id)\n+                        tcx.at(span).type_of(def.def_id)\n                             .subst_spanned(tcx, substs, Some(span))\n                     )\n                 }\n@@ -600,7 +600,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n         self.normalize_ty(\n             span,\n-            ty::queries::type_of::get(self.tcx(), span, did).subst(self.tcx(), substs)\n+            self.tcx().at(span).type_of(did).subst(self.tcx(), substs)\n         )\n     }\n \n@@ -1018,7 +1018,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_type_params(&path.segments);\n \n-                let ty = ty::queries::type_of::get(tcx, span, def_id);\n+                let ty = tcx.at(span).type_of(def_id);\n                 if let Some(free_substs) = self.get_free_substs() {\n                     ty.subst(tcx, free_substs)\n                 } else {"}, {"sha": "70d7336820659c788a13e319d3b64084cac147f4", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_inherent_impl_candidates_for_type(&mut self, def_id: DefId) {\n-        let impl_def_ids = ty::queries::inherent_impls::get(self.tcx, self.span, def_id);\n+        let impl_def_ids = self.tcx.at(self.span).inherent_impls(def_id);\n         for &impl_def_id in impl_def_ids.iter() {\n             self.assemble_inherent_impl_probe(impl_def_id);\n         }"}, {"sha": "57193b3584dfa97b80f93be60cbb21ecf5910761", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -170,7 +170,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // course.\n     if impl_did.is_local() {\n         let span = tcx.def_span(impl_did);\n-        ty::queries::coerce_unsized_info::get(tcx, span, impl_did);\n+        tcx.at(span).coerce_unsized_info(impl_did);\n     }\n }\n "}, {"sha": "400aaf82fe428f5c7aa11e9b7238b936679d17a4", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -14,7 +14,7 @@\n //! for any change, but it is very cheap to compute. In practice, most\n //! code in the compiler never *directly* requests this map. Instead,\n //! it requests the inherent impls specific to some type (via\n-//! `ty::queries::inherent_impls::get(def_id)`). That value, however,\n+//! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n use rustc::dep_graph::DepNode;"}, {"sha": "099586e6bcc2a5b9482ab198b8f7ff254a626b0b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf7598ef3a245ddaed9272091b3afc3466617f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=decf7598ef3a245ddaed9272091b3afc3466617f", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n                                  def_id: DefId)\n                                  -> ty::GenericPredicates<'tcx>\n     {\n-        ty::queries::type_param_predicates::get(self.tcx, span, (self.item_def_id, def_id))\n+        self.tcx.at(span).type_param_predicates((self.item_def_id, def_id))\n     }\n \n     fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n@@ -475,7 +475,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n         hir::ItemTrait(..) => {\n             tcx.generics_of(def_id);\n             tcx.trait_def(def_id);\n-            ty::queries::super_predicates_of::get(tcx, it.span, def_id);\n+            tcx.at(it.span).super_predicates_of(def_id);\n             tcx.predicates_of(def_id);\n         },\n         hir::ItemStruct(ref struct_def, _) |\n@@ -556,7 +556,7 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n             let substs = Substs::empty();\n-            let result = ty::queries::const_eval::get(tcx, variant.span, (expr_did, substs));\n+            let result = tcx.at(variant.span).const_eval((expr_did, substs));\n \n             // enum variant evaluation happens before the global constant check\n             // so we need to report the real error\n@@ -725,7 +725,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Now require that immediate supertraits are converted,\n     // which will, in turn, reach indirect supertraits.\n     for bound in superbounds.iter().filter_map(|p| p.to_opt_poly_trait_ref()) {\n-        ty::queries::super_predicates_of::get(tcx, item.span, bound.def_id());\n+        tcx.at(item.span).super_predicates_of(bound.def_id());\n     }\n \n     ty::GenericPredicates {"}]}