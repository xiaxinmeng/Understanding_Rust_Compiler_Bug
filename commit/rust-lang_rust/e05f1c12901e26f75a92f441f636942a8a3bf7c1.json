{"sha": "e05f1c12901e26f75a92f441f636942a8a3bf7c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNWYxYzEyOTAxZTI2Zjc1YTkyZjQ0MWY2MzY5NDJhOGEzYmY3YzE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-02T15:10:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-02T15:10:49Z"}, "message": "Rollup merge of #42372 - frewsxcv:frewsxcv/improve-receiver-docs, r=QuietMisdreavus\n\nRewrite a couple `Receiver` doc examples.\n\nNone", "tree": {"sha": "909d2cd34d13bc8ec2d03df66a61d2f264ffb178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909d2cd34d13bc8ec2d03df66a61d2f264ffb178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05f1c12901e26f75a92f441f636942a8a3bf7c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05f1c12901e26f75a92f441f636942a8a3bf7c1", "html_url": "https://github.com/rust-lang/rust/commit/e05f1c12901e26f75a92f441f636942a8a3bf7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05f1c12901e26f75a92f441f636942a8a3bf7c1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a3d026094711ceb32f5f55d32b6cf2a4711b4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3d026094711ceb32f5f55d32b6cf2a4711b4c2", "html_url": "https://github.com/rust-lang/rust/commit/1a3d026094711ceb32f5f55d32b6cf2a4711b4c2"}, {"sha": "eb48ee72dba6646d92fb06e384d396759ff80f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb48ee72dba6646d92fb06e384d396759ff80f59", "html_url": "https://github.com/rust-lang/rust/commit/eb48ee72dba6646d92fb06e384d396759ff80f59"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "7d5e1929cd2a162683d96884a70085d9c16f6536", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e05f1c12901e26f75a92f441f636942a8a3bf7c1/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05f1c12901e26f75a92f441f636942a8a3bf7c1/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e05f1c12901e26f75a92f441f636942a8a3bf7c1", "patch": "@@ -1370,14 +1370,16 @@ impl<T> Receiver<T> {\n     /// let (send, recv) = channel();\n     ///\n     /// thread::spawn(move || {\n-    ///     send.send(1u8).unwrap();\n-    ///     send.send(2u8).unwrap();\n-    ///     send.send(3u8).unwrap();\n+    ///     send.send(1).unwrap();\n+    ///     send.send(2).unwrap();\n+    ///     send.send(3).unwrap();\n     /// });\n     ///\n-    /// for x in recv.iter() {\n-    ///     println!(\"Got: {}\", x);\n-    /// }\n+    /// let mut iter = recv.iter();\n+    /// assert_eq!(iter.next(), Some(1));\n+    /// assert_eq!(iter.next(), Some(2));\n+    /// assert_eq!(iter.next(), Some(3));\n+    /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n@@ -1393,29 +1395,34 @@ impl<T> Receiver<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```no_run\n     /// use std::sync::mpsc::channel;\n     /// use std::thread;\n     /// use std::time::Duration;\n     ///\n     /// let (sender, receiver) = channel();\n     ///\n-    /// // Nothing is in the buffer yet\n+    /// // nothing is in the buffer yet\n     /// assert!(receiver.try_iter().next().is_none());\n-    /// println!(\"Nothing in the buffer...\");\n     ///\n     /// thread::spawn(move || {\n+    ///     thread::sleep(Duration::from_secs(1));\n     ///     sender.send(1).unwrap();\n     ///     sender.send(2).unwrap();\n     ///     sender.send(3).unwrap();\n     /// });\n     ///\n-    /// println!(\"Going to sleep...\");\n-    /// thread::sleep(Duration::from_secs(2)); // block for two seconds\n+    /// // nothing is in the buffer yet\n+    /// assert!(receiver.try_iter().next().is_none());\n+    ///\n+    /// // block for two seconds\n+    /// thread::sleep(Duration::from_secs(2));\n     ///\n-    /// for x in receiver.try_iter() {\n-    ///     println!(\"Got: {}\", x);\n-    /// }\n+    /// let mut iter = receiver.try_iter();\n+    /// assert_eq!(iter.next(), Some(1));\n+    /// assert_eq!(iter.next(), Some(2));\n+    /// assert_eq!(iter.next(), Some(3));\n+    /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n     pub fn try_iter(&self) -> TryIter<T> {"}]}