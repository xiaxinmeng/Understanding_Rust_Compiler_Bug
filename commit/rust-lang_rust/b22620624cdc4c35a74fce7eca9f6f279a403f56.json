{"sha": "b22620624cdc4c35a74fce7eca9f6f279a403f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjYyMDYyNGNkYzRjMzVhNzRmY2U3ZWNhOWY2ZjI3OWE0MDNmNTY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-08T22:21:32Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-11T19:19:40Z"}, "message": "Get rid of a bunch of dead shape code. Closes #2552.", "tree": {"sha": "44a30c86ad3e7bdde486ac2825ec74792966c623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44a30c86ad3e7bdde486ac2825ec74792966c623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22620624cdc4c35a74fce7eca9f6f279a403f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22620624cdc4c35a74fce7eca9f6f279a403f56", "html_url": "https://github.com/rust-lang/rust/commit/b22620624cdc4c35a74fce7eca9f6f279a403f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22620624cdc4c35a74fce7eca9f6f279a403f56/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b79d1e32f29343af665d0fba26c255b9fcb58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b79d1e32f29343af665d0fba26c255b9fcb58f", "html_url": "https://github.com/rust-lang/rust/commit/70b79d1e32f29343af665d0fba26c255b9fcb58f"}], "stats": {"total": 379, "additions": 69, "deletions": 310}, "files": [{"sha": "7984fbd618e39fc4c667b8fce5c8c28d7ec24fd2", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=b22620624cdc4c35a74fce7eca9f6f279a403f56", "patch": "@@ -8,40 +8,36 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n \n     annihilator(const annihilator &other, const shape::ptr &in_dp)\n         : shape::data<annihilator,shape::ptr>(other.task, other.align,\n-                                        other.sp, other.params,\n+                                        other.sp,\n                                         other.tables, in_dp) {}\n \n     annihilator(const annihilator &other,\n           const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n           const rust_shape_tables *in_tables = NULL)\n         : shape::data<annihilator,shape::ptr>(other.task,\n                                         other.align,\n                                         in_sp,\n-                                        in_params,\n                                         in_tables ? in_tables : other.tables,\n                                         other.dp) {}\n \n     annihilator(const annihilator &other,\n           const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n           const rust_shape_tables *in_tables,\n           shape::ptr in_dp)\n         : shape::data<annihilator,shape::ptr>(other.task,\n                                         other.align,\n                                         in_sp,\n-                                        in_params,\n                                         in_tables,\n                                         in_dp) {}\n \n     annihilator(rust_task *in_task,\n           bool in_align,\n           const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n           const rust_shape_tables *in_tables,\n           uint8_t *in_data)\n         : shape::data<annihilator,shape::ptr>(in_task, in_align, in_sp,\n-                                        in_params, in_tables, in_data) {}\n+                                              in_tables,\n+                                              shape::ptr(in_data)) {}\n \n     void walk_vec2(bool is_pod) {\n         void *vec = shape::get_dp<void *>(dp);\n@@ -145,8 +141,7 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n         f(NULL, args->dtor->env, args->data);\n     }\n \n-    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n-                   const shape::type_param *params, const uint8_t *end_sp,\n+    void walk_res2(const shape::rust_fn *dtor, const uint8_t *end_sp,\n                    bool live) {\n         void *data = (void*)(uintptr_t)dp;\n         // Switch back to the Rust stack to run the destructor\n@@ -173,7 +168,7 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n     void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end) {\n-        annihilator sub(*this, variant_ptr_and_end.first, tinfo.params);\n+        annihilator sub(*this, variant_ptr_and_end.first);\n \n         const uint8_t *variant_end = variant_ptr_and_end.second;\n         while (sub.sp < variant_end) {\n@@ -194,11 +189,9 @@ annihilator::do_annihilate(rust_task *task, rust_opaque_box *box) {\n     const type_desc *tydesc = box->td;\n     uint8_t *p = (uint8_t*) box_body(box);\n     shape::arena arena;\n-    shape::type_param *params =\n-        shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n \n     annihilator annihilator(task, true, tydesc->shape,\n-                            params, tydesc->shape_tables, p);\n+                            tydesc->shape_tables, p);\n     annihilator.walk();\n     task->boxed.free(box);\n }"}, {"sha": "999e7d87c5a5f2b888205e5b22304cde66abf300", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=b22620624cdc4c35a74fce7eca9f6f279a403f56", "patch": "@@ -34,44 +34,39 @@ class irc : public shape::data<irc,shape::ptr> {\n \n     irc(const irc &other, const shape::ptr &in_dp)\n     : shape::data<irc,shape::ptr>(other.task, other.align, other.sp,\n-                                  other.params, other.tables, in_dp),\n+                                  other.tables, in_dp),\n       ircs(other.ircs) {}\n \n     irc(const irc &other,\n         const uint8_t *in_sp,\n-        const shape::type_param *in_params,\n         const rust_shape_tables *in_tables = NULL)\n     : shape::data<irc,shape::ptr>(other.task,\n                                   other.align,\n                                   in_sp,\n-                                  in_params,\n                                   in_tables ? in_tables : other.tables,\n                                   other.dp),\n       ircs(other.ircs) {}\n \n     irc(const irc &other,\n         const uint8_t *in_sp,\n-        const shape::type_param *in_params,\n         const rust_shape_tables *in_tables,\n         shape::ptr in_dp)\n     : shape::data<irc,shape::ptr>(other.task,\n                                   other.align,\n                                   in_sp,\n-                                  in_params,\n                                   in_tables,\n                                   in_dp),\n       ircs(other.ircs) {}\n \n     irc(rust_task *in_task,\n         bool in_align,\n         const uint8_t *in_sp,\n-        const shape::type_param *in_params,\n         const rust_shape_tables *in_tables,\n         uint8_t *in_data,\n         irc_map &in_ircs)\n-    : shape::data<irc,shape::ptr>(in_task, in_align, in_sp, in_params,\n-                                  in_tables, in_data),\n-      ircs(in_ircs) {}\n+        : shape::data<irc,shape::ptr>(in_task, in_align, in_sp,\n+                                      in_tables, shape::ptr(in_data)),\n+          ircs(in_ircs) {}\n \n \n     void walk_vec2(bool is_pod, std::pair<uint8_t *,uint8_t *> data_range) {\n@@ -80,8 +75,8 @@ class irc : public shape::data<irc,shape::ptr> {\n         if (is_pod)\n             return;\n \n-        irc sub(*this, data_range.first);\n-        shape::ptr data_end = sub.end_dp = data_range.second;\n+        irc sub(*this, shape::ptr(data_range.first));\n+        shape::ptr data_end = sub.end_dp = shape::ptr(data_range.second);\n         while (sub.dp < data_end) {\n             sub.walk_reset();\n             // FIXME: shouldn't this be 'sub.align = true;'?\n@@ -148,8 +143,7 @@ class irc : public shape::data<irc,shape::ptr> {\n     void walk_tydesc2(char) {\n     }\n \n-    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n-                   const shape::type_param *params, const uint8_t *end_sp,\n+    void walk_res2(const shape::rust_fn *dtor, const uint8_t *end_sp,\n                    bool live) {\n         while (this->sp != end_sp) {\n             this->walk();\n@@ -214,7 +208,7 @@ void\n irc::walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n-    irc sub(*this, variant_ptr_and_end.first, tinfo.params);\n+    irc sub(*this, variant_ptr_and_end.first);\n \n     assert(variant_id < 256);   // FIXME: Temporary sanity check.\n \n@@ -240,10 +234,8 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n             box, tydesc, body);\n \n         shape::arena arena;\n-        shape::type_param *params =\n-            shape::type_param::from_tydesc_and_data(tydesc, body, arena);\n \n-        irc irc(task, true, tydesc->shape, params, tydesc->shape_tables,\n+        irc irc(task, true, tydesc->shape, tydesc->shape_tables,\n                 body, ircs);\n         irc.walk();\n     }\n@@ -292,43 +284,38 @@ class mark : public shape::data<mark,shape::ptr> {\n \n     mark(const mark &other, const shape::ptr &in_dp)\n     : shape::data<mark,shape::ptr>(other.task, other.align, other.sp,\n-                                   other.params, other.tables, in_dp),\n+                                    other.tables, in_dp),\n       marked(other.marked) {}\n \n     mark(const mark &other,\n          const uint8_t *in_sp,\n-         const shape::type_param *in_params,\n          const rust_shape_tables *in_tables = NULL)\n     : shape::data<mark,shape::ptr>(other.task,\n                                    other.align,\n                                    in_sp,\n-                                   in_params,\n                                    in_tables ? in_tables : other.tables,\n                                    other.dp),\n       marked(other.marked) {}\n \n     mark(const mark &other,\n          const uint8_t *in_sp,\n-         const shape::type_param *in_params,\n          const rust_shape_tables *in_tables,\n          shape::ptr in_dp)\n     : shape::data<mark,shape::ptr>(other.task,\n                                    other.align,\n                                    in_sp,\n-                                   in_params,\n                                    in_tables,\n                                    in_dp),\n       marked(other.marked) {}\n \n     mark(rust_task *in_task,\n          bool in_align,\n          const uint8_t *in_sp,\n-         const shape::type_param *in_params,\n          const rust_shape_tables *in_tables,\n          uint8_t *in_data,\n          std::set<rust_opaque_box*> &in_marked)\n-    : shape::data<mark,shape::ptr>(in_task, in_align, in_sp, in_params,\n-                                   in_tables, in_data),\n+        : shape::data<mark,shape::ptr>(in_task, in_align, in_sp,\n+                                       in_tables, shape::ptr(in_data)),\n       marked(in_marked) {}\n \n     void walk_vec2(bool is_pod, std::pair<uint8_t *,uint8_t *> data_range) {\n@@ -340,8 +327,8 @@ class mark : public shape::data<mark,shape::ptr> {\n         if (data_range.second - data_range.first > 100000)\n             abort();    // FIXME: Temporary sanity check.\n \n-        mark sub(*this, data_range.first);\n-        shape::ptr data_end = sub.end_dp = data_range.second;\n+        mark sub(*this, shape::ptr(data_range.first));\n+        shape::ptr data_end = sub.end_dp = shape::ptr(data_range.second);\n         while (sub.dp < data_end) {\n             sub.walk_reset();\n             align = true;\n@@ -399,9 +386,8 @@ class mark : public shape::data<mark,shape::ptr> {\n         }\n     }\n \n-    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n-                  const shape::type_param *params, const uint8_t *end_sp,\n-                  bool live) {\n+    void walk_res2(const shape::rust_fn *dtor, const uint8_t *end_sp,\n+                   bool live) {\n         while (this->sp != end_sp) {\n             this->walk();\n             align = true;\n@@ -458,7 +444,7 @@ void\n mark::walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n-    mark sub(*this, variant_ptr_and_end.first, tinfo.params);\n+    mark sub(*this, variant_ptr_and_end.first);\n \n     assert(variant_id < 256);   // FIXME: Temporary sanity check.\n \n@@ -487,10 +473,8 @@ mark::do_mark(rust_task *task,\n \n             uint8_t *p = (uint8_t*) box_body(box);\n             shape::arena arena;\n-            shape::type_param *params =\n-                shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n \n-            mark mark(task, true, tydesc->shape, params, tydesc->shape_tables,\n+            mark mark(task, true, tydesc->shape, tydesc->shape_tables,\n                       p, marked);\n             mark.walk();\n         }\n@@ -543,8 +527,7 @@ do_final_cc(rust_task *task) {\n         cerr << \"Unreclaimed object found at \" << (void*) box << \": \";\n         const type_desc *td = box->td;\n         shape::arena arena;\n-        shape::type_param *params = shape::type_param::from_tydesc(td, arena);\n-        shape::log log(task, true, td->shape, params, td->shape_tables,\n+        shape::log log(task, true, td->shape, td->shape_tables,\n                        (uint8_t*)box_body(box), cerr);\n         log.walk();\n         cerr << \"\\n\";"}, {"sha": "267cd6bfd98205a56a75d1daa20cee0bde1a4864", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 12, "deletions": 111, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=b22620624cdc4c35a74fce7eca9f6f279a403f56", "patch": "@@ -21,66 +21,11 @@ const uint8_t CMP_EQ = 0u;\n const uint8_t CMP_LT = 1u;\n const uint8_t CMP_LE = 2u;\n \n-// Type parameters\n-\n-type_param *\n-type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n-                 arena &arena) {\n-    if (!n_tydescs)\n-        return NULL;\n-\n-    type_param *ptrs = arena.alloc<type_param>(n_tydescs);\n-    for (uint32_t i = 0; i < n_tydescs; i++) {\n-        const type_desc *subtydesc = tydescs[i];\n-        ptrs[i].shape = subtydesc->shape;\n-        ptrs[i].tables = subtydesc->shape_tables;\n-\n-        // FIXME: Doesn't handle a type-parametric object closing over a\n-        // type-parametric object type properly.\n-        ptrs[i].params = from_tydesc(subtydesc, arena);\n-    }\n-    return ptrs;\n-}\n-\n-// Constructs type parameters from an object shape. This is a bit messy,\n-// because it requires that the object shape have a specific format.\n-type_param *\n-type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n-    uint8_t shape = *sp++; assert(shape == SHAPE_STRUCT);\n-    get_u16_bump(sp);   // Skip over the size.\n-    shape = *sp++; assert(shape == SHAPE_PTR);\n-    shape = *sp++; assert(shape == SHAPE_STRUCT);\n-\n-    unsigned n_tydescs = get_u16_bump(sp);\n-\n-    // Type descriptors start right after the reference count.\n-    const type_desc **descs = (const type_desc **)(dp + sizeof(uintptr_t));\n-\n-    return make(descs, n_tydescs, arena);\n-}\n-\n-\n // A shape printer, useful for debugging\n \n void\n print::walk_tag1(tag_info &tinfo) {\n     DPRINT(\"tag%u\", tinfo.tag_id);\n-    if (!tinfo.n_params)\n-        return;\n-\n-    DPRINT(\"<\");\n-\n-    bool first = true;\n-    for (uint16_t i = 0; i < tinfo.n_params; i++) {\n-        if (!first)\n-            DPRINT(\",\");\n-        first = false;\n-\n-        ctxt<print> sub(*this, tinfo.params[i].shape);\n-        sub.walk();\n-    }\n-\n-    DPRINT(\">\");\n }\n \n void\n@@ -100,27 +45,9 @@ print::walk_struct1(const uint8_t *end_sp) {\n }\n \n void\n-print::walk_res1(const rust_fn *dtor, unsigned n_params,\n-                 const type_param *params, const uint8_t *end_sp) {\n+print::walk_res1(const rust_fn *dtor, const uint8_t *end_sp) {\n     DPRINT(\"res@%p\", dtor);\n \n-    // Print type parameters.\n-    if (n_params) {\n-        DPRINT(\"<\");\n-\n-        bool first = true;\n-        for (uint16_t i = 0; i < n_params; i++) {\n-            if (!first)\n-                DPRINT(\",\");\n-            first = false;\n-\n-            ctxt<print> sub(*this, params[i].shape);\n-            sub.walk();\n-        }\n-\n-        DPRINT(\">\");\n-    }\n-\n     // Print arguments.\n \n     if (sp == end_sp)\n@@ -140,15 +67,6 @@ print::walk_res1(const rust_fn *dtor, unsigned n_params,\n     DPRINT(\")\");\n }\n \n-void\n-print::walk_var1(uint8_t param_index) {\n-    DPRINT(\"%c=\", 'T' + param_index);\n-\n-    const type_param *param = &params[param_index];\n-    print sub(*this, param->shape, param->params, param->tables);\n-    sub.walk();\n-}\n-\n template<>\n void print::walk_number1<uint8_t>()      { DPRINT(\"u8\"); }\n template<>\n@@ -186,7 +104,7 @@ size_of::compute_tag_size(tag_info &tinfo) {\n         const uint8_t *variant_ptr = variant_ptr_and_end.first;\n         const uint8_t *variant_end = variant_ptr_and_end.second;\n \n-        size_of sub(*this, variant_ptr, tinfo.params, NULL);\n+        size_of sub(*this, variant_ptr, NULL);\n         sub.align = false;\n \n         // Compute the size of this variant.\n@@ -308,31 +226,27 @@ class cmp : public data<cmp,ptr_pair> {\n     cmp(rust_task *in_task,\n         bool in_align,\n         const uint8_t *in_sp,\n-        const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         uint8_t *in_data_0,\n         uint8_t *in_data_1)\n-    : data<cmp,ptr_pair>(in_task, in_align, in_sp, in_params, in_tables,\n+    : data<cmp,ptr_pair>(in_task, in_align, in_sp, in_tables,\n                          ptr_pair::make(in_data_0, in_data_1)),\n       result(0) {}\n \n     cmp(const cmp &other,\n         const uint8_t *in_sp,\n-        const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         ptr_pair &in_dp)\n-    : data<cmp,ptr_pair>(other.task, other.align, in_sp, in_params, in_tables,\n+    : data<cmp,ptr_pair>(other.task, other.align, in_sp, in_tables,\n                          in_dp),\n       result(0) {}\n \n     cmp(const cmp &other,\n         const uint8_t *in_sp = NULL,\n-        const type_param *in_params = NULL,\n         const rust_shape_tables *in_tables = NULL)\n     : data<cmp,ptr_pair>(other.task,\n                          other.align,\n                          in_sp ? in_sp : other.sp,\n-                         in_params ? in_params : other.params,\n                          in_tables ? in_tables : other.tables,\n                          other.dp),\n       result(0) {}\n@@ -341,7 +255,6 @@ class cmp : public data<cmp,ptr_pair> {\n     : data<cmp,ptr_pair>(other.task,\n                          other.align,\n                          other.sp,\n-                         other.params,\n                          other.tables,\n                          in_dp),\n       result(0) {}\n@@ -386,8 +299,7 @@ class cmp : public data<cmp,ptr_pair> {\n     void walk_tag2(tag_info &tinfo,\n                    const data_pair<tag_variant_t> &tag_variants);\n     void walk_struct2(const uint8_t *end_sp);\n-    void walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n-                   const type_param *ty_params_sp, const uint8_t *end_sp,\n+    void walk_res2(const rust_fn *dtor, const uint8_t *end_sp,\n                    const data_pair<uintptr_t> &live);\n     void walk_variant2(tag_info &tinfo,\n                        tag_variant_t variant_id,\n@@ -439,8 +351,7 @@ cmp::walk_struct2(const uint8_t *end_sp) {\n }\n \n void\n-cmp::walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n-              const type_param *ty_params_sp, const uint8_t *end_sp,\n+cmp::walk_res2(const rust_fn *dtor, const uint8_t *end_sp,\n               const data_pair<uintptr_t> &live) {\n     abort();    // TODO\n }\n@@ -450,7 +361,7 @@ cmp::walk_variant2(tag_info &tinfo,\n                    tag_variant_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n-    cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n+    cmp sub(*this, variant_ptr_and_end.first);\n \n     const uint8_t *variant_end = variant_ptr_and_end.second;\n     while (!result && sub.sp < variant_end) {\n@@ -532,7 +443,7 @@ log::walk_variant2(tag_info &tinfo,\n                    tag_variant_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n-    log sub(*this, variant_ptr_and_end.first, tinfo.params);\n+    log sub(*this, variant_ptr_and_end.first);\n     const uint8_t *variant_end = variant_ptr_and_end.second;\n \n     bool first = true;\n@@ -547,8 +458,7 @@ log::walk_variant2(tag_info &tinfo,\n }\n \n void\n-log::walk_res2(const rust_fn *dtor, unsigned n_params,\n-               const type_param *params, const uint8_t *end_sp, bool live) {\n+log::walk_res2(const rust_fn *dtor, const uint8_t *end_sp, bool live) {\n     out << prefix << \"res\";\n \n     if (this->sp == end_sp)\n@@ -576,12 +486,7 @@ shape_cmp_type(int8_t *result, const type_desc *tydesc,\n     rust_task *task = rust_get_current_task();\n     shape::arena arena;\n \n-    // FIXME: This may well be broken when comparing two closures or objects\n-    // that close over different sets of type parameters.\n-    shape::type_param *params =\n-        shape::type_param::from_tydesc_and_data(tydesc, data_0, arena);\n-\n-    shape::cmp cmp(task, true, tydesc->shape, params, tydesc->shape_tables,\n+    shape::cmp cmp(task, true, tydesc->shape, tydesc->shape_tables,\n                    data_0, data_1);\n     cmp.walk();\n \n@@ -597,11 +502,9 @@ shape_log_str(const type_desc *tydesc, uint8_t *data) {\n     rust_task *task = rust_get_current_task();\n \n     shape::arena arena;\n-    shape::type_param *params =\n-        shape::type_param::from_tydesc_and_data(tydesc, data, arena);\n \n     std::stringstream ss;\n-    shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,\n+    shape::log log(task, true, tydesc->shape, tydesc->shape_tables,\n                    data, ss);\n \n     log.walk();\n@@ -615,11 +518,9 @@ shape_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     rust_task *task = rust_get_current_task();\n \n     shape::arena arena;\n-    shape::type_param *params =\n-        shape::type_param::from_tydesc_and_data(tydesc, data, arena);\n \n     std::stringstream ss;\n-    shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,\n+    shape::log log(task, true, tydesc->shape, tydesc->shape_tables,\n                    data, ss);\n \n     log.walk();"}, {"sha": "a957bd1621d65b9904f516200b3e6f6ed078ad87", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 32, "deletions": 149, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=b22620624cdc4c35a74fce7eca9f6f279a403f56", "patch": "@@ -49,7 +49,6 @@ const uint8_t SHAPE_STRUCT = 17u;\n const uint8_t SHAPE_BOX_FN = 18u;\n const uint8_t SHAPE_OBJ = 19u;\n const uint8_t SHAPE_RES = 20u;\n-const uint8_t SHAPE_VAR = 21u;\n const uint8_t SHAPE_UNIQ = 22u;\n const uint8_t SHAPE_UNIQ_FN = 25u;\n const uint8_t SHAPE_STACK_FN = 26u;\n@@ -72,7 +71,6 @@ const uint8_t SHAPE_PTR = SHAPE_U32;\n struct rust_obj;\n struct size_align;\n class ptr;\n-class type_param;\n \n \n // Arenas; these functions must execute very quickly, so we use an arena\n@@ -183,8 +181,6 @@ struct tag_info {\n     uint16_t variant_count;                 // Number of variants in the tag.\n     const uint8_t *largest_variants_ptr;    // Ptr to largest variants table.\n     size_align tag_sa;                      // Size and align of this tag.\n-    uint16_t n_params;                      // Number of type parameters.\n-    const type_param *params;               // Array of type parameters.\n };\n \n \n@@ -229,29 +225,24 @@ template<typename T>\n class ctxt {\n public:\n     const uint8_t *sp;                  // shape pointer\n-    const type_param *params;           // shapes of type parameters\n     const rust_shape_tables *tables;\n     rust_task *task;\n     bool align;\n \n     ctxt(rust_task *in_task,\n          bool in_align,\n          const uint8_t *in_sp,\n-         const type_param *in_params,\n          const rust_shape_tables *in_tables)\n     : sp(in_sp),\n-      params(in_params),\n       tables(in_tables),\n       task(in_task),\n       align(in_align) {}\n \n     template<typename U>\n     ctxt(const ctxt<U> &other,\n          const uint8_t *in_sp = NULL,\n-         const type_param *in_params = NULL,\n          const rust_shape_tables *in_tables = NULL)\n     : sp(in_sp ? in_sp : other.sp),\n-      params(in_params ? in_params : other.params),\n       tables(in_tables ? in_tables : other.tables),\n       task(other.task),\n       align(other.align) {}\n@@ -278,7 +269,6 @@ class ctxt {\n     void walk_uniq0();\n     void walk_struct0();\n     void walk_res0();\n-    void walk_var0();\n     void walk_rptr0();\n     void walk_fixedvec0();\n     void walk_slice0();\n@@ -292,60 +282,6 @@ struct rust_fn {\n     void *env;\n };\n \n-// Type parameters\n-\n-class type_param {\n-private:\n-    static type_param *make(const type_desc **tydescs, unsigned n_tydescs,\n-                            arena &arena);\n-\n-public:\n-    const uint8_t *shape;\n-    const rust_shape_tables *tables;\n-    const type_param *params;   // subparameters\n-\n-    // Creates type parameters from an object shape description.\n-    static type_param *from_obj_shape(const uint8_t *sp, ptr dp,\n-                                      arena &arena);\n-\n-    template<typename T>\n-    inline void set(ctxt<T> *cx) {\n-        shape = cx->sp;\n-        tables = cx->tables;\n-        params = cx->params;\n-    }\n-\n-    // Creates type parameters from a type descriptor.\n-    static inline type_param *from_tydesc(const type_desc *tydesc,\n-                                          arena &arena) {\n-        // In order to find the type parameters of objects and functions, we\n-        // have to actually have the data pointer, since we don't statically\n-        // know from the type of an object or function which type parameters\n-        // it closes over.\n-        assert(!tydesc->n_obj_params && \"Type-parametric objects \"\n-               \"must go through from_tydesc_and_data() instead!\");\n-\n-        return make(tydesc->first_param, tydesc->n_params, arena);\n-    }\n-\n-    static type_param *from_tydesc_and_data(const type_desc *tydesc,\n-                                            uint8_t *dp, arena &arena) {\n-        if (tydesc->n_obj_params) {\n-            uintptr_t n_obj_params = tydesc->n_obj_params;\n-            const type_desc **first_param;\n-            // Object closure.\n-            DPRINT(\"n_obj_params OBJ %lu, tydesc %p, starting at %p\\n\",\n-                   (unsigned long)n_obj_params, tydesc,\n-                   dp + sizeof(uintptr_t) * 2);\n-            first_param = (const type_desc **)(dp + sizeof(uintptr_t) * 2);\n-            return make(first_param, n_obj_params, arena);\n-        }\n-\n-        return make(tydesc->first_param, tydesc->n_params, arena);\n-    }\n-};\n-\n-\n // Traversals\n \n #define WALK_NUMBER(c_type) \\\n@@ -372,7 +308,6 @@ ctxt<T>::walk() {\n     case SHAPE_BOX:      walk_box0();             break;\n     case SHAPE_STRUCT:   walk_struct0();          break;\n     case SHAPE_RES:      walk_res0();             break;\n-    case SHAPE_VAR:      walk_var0();             break;\n     case SHAPE_UNIQ:     walk_uniq0();            break;\n     case SHAPE_BOX_FN:\n     case SHAPE_UNIQ_FN:\n@@ -460,18 +395,9 @@ ctxt<T>::walk_tag0() {\n     // Determine the size and alignment.\n     tinfo.tag_sa = get_size_align(tinfo.info_ptr);\n \n-    // Determine the number of parameters.\n-    tinfo.n_params = get_u16_bump(sp);\n-\n-    // Read in the tag type parameters.\n-    type_param params[tinfo.n_params];\n-    for (uint16_t i = 0; i < tinfo.n_params; i++) {\n-        uint16_t len = get_u16_bump(sp);\n-        params[i].set(this);\n-        sp += len;\n-    }\n-\n-    tinfo.params = params;\n+    // Read in a dummy value; this used to be the number of parameters\n+    uint16_t number_of_params = get_u16_bump(sp);\n+    assert(number_of_params == 0 && \"tag has type parameters on it\");\n \n     // Call to the implementation.\n     static_cast<T *>(this)->walk_tag1(tinfo);\n@@ -551,55 +477,41 @@ ctxt<T>::walk_res0() {\n         reinterpret_cast<const rust_fn **>(tables->resources);\n     const rust_fn *dtor = resources[dtor_offset];\n \n+    // Read in the resource type parameters, but ignore them.\n+    // TODO: remove after snapshot\n     uint16_t n_ty_params = get_u16_bump(sp);\n-\n-    // Read in the tag type parameters.\n-    type_param params[n_ty_params];\n     for (uint16_t i = 0; i < n_ty_params; i++) {\n         uint16_t ty_param_len = get_u16_bump(sp);\n-        const uint8_t *next_sp = sp + ty_param_len;\n-        params[i].set(this);\n-        sp = next_sp;\n+        sp += ty_param_len;\n     }\n \n     uint16_t sp_size = get_u16_bump(sp);\n     const uint8_t *end_sp = sp + sp_size;\n \n-    static_cast<T *>(this)->walk_res1(dtor, n_ty_params, params, end_sp);\n+    static_cast<T *>(this)->walk_res1(dtor, end_sp);\n \n     sp = end_sp;\n }\n \n-template<typename T>\n-void\n-ctxt<T>::walk_var0() {\n-    uint8_t param = *sp++;\n-    static_cast<T *>(this)->walk_var1(param);\n-}\n-\n // A shape printer, useful for debugging\n \n class print : public ctxt<print> {\n public:\n     template<typename T>\n     print(const ctxt<T> &other,\n           const uint8_t *in_sp = NULL,\n-          const type_param *in_params = NULL,\n           const rust_shape_tables *in_tables = NULL)\n-    : ctxt<print>(other, in_sp, in_params, in_tables) {}\n+    : ctxt<print>(other, in_sp, in_tables) {}\n \n     print(rust_task *in_task,\n           bool in_align,\n           const uint8_t *in_sp,\n-          const type_param *in_params,\n           const rust_shape_tables *in_tables)\n-    : ctxt<print>(in_task, in_align, in_sp, in_params, in_tables) {}\n+    : ctxt<print>(in_task, in_align, in_sp, in_tables) {}\n \n     void walk_tag1(tag_info &tinfo);\n     void walk_struct1(const uint8_t *end_sp);\n-    void walk_res1(const rust_fn *dtor, unsigned n_params,\n-                   const type_param *params, const uint8_t *end_sp);\n-    void walk_var1(uint8_t param);\n+    void walk_res1(const rust_fn *dtor, const uint8_t *end_sp);\n \n     void walk_vec1(bool is_pod) {\n         DPRINT(\"vec<\"); walk(); DPRINT(\">\");\n@@ -665,16 +577,14 @@ class size_of : public ctxt<size_of> {\n public:\n     size_of(const size_of &other,\n             const uint8_t *in_sp = NULL,\n-            const type_param *in_params = NULL,\n             const rust_shape_tables *in_tables = NULL)\n-    : ctxt<size_of>(other, in_sp, in_params, in_tables) {}\n+    : ctxt<size_of>(other, in_sp, in_tables) {}\n \n     template<typename T>\n     size_of(const ctxt<T> &other,\n             const uint8_t *in_sp = NULL,\n-            const type_param *in_params = NULL,\n             const rust_shape_tables *in_tables = NULL)\n-    : ctxt<size_of>(other, in_sp, in_params, in_tables) {}\n+    : ctxt<size_of>(other, in_sp, in_tables) {}\n \n     void walk_tag1(tag_info &tinfo);\n     void walk_struct1(const uint8_t *end_sp);\n@@ -693,15 +603,7 @@ class size_of : public ctxt<size_of> {\n         sa.set(sizeof(void *), sizeof(void *));\n     }\n \n-    void walk_var1(uint8_t param_index) {\n-        const type_param *param = &params[param_index];\n-        size_of sub(*this, param->shape, param->params, param->tables);\n-        sub.walk();\n-        sa = sub.sa;\n-    }\n-\n-    void walk_res1(const rust_fn *dtor, unsigned n_params,\n-                   const type_param *params, const uint8_t *end_sp) {\n+    void walk_res1(const rust_fn *dtor, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n \n@@ -744,8 +646,8 @@ class ptr {\n     struct data { typedef T t; };\n \n     ptr() : p(NULL) {}\n-    ptr(uint8_t *in_p) : p(in_p) {}\n-    ptr(uintptr_t in_p) : p((uint8_t *)in_p) {}\n+    explicit ptr(uint8_t *in_p) : p(in_p) {}\n+    explicit ptr(uintptr_t in_p) : p((uint8_t *)in_p) {}\n \n     inline ptr operator+(const size_t amount) const {\n         return make(p + amount);\n@@ -961,10 +863,9 @@ class data : public ctxt< data<T,U> > {\n     data(rust_task *in_task,\n          bool in_align,\n          const uint8_t *in_sp,\n-         const type_param *in_params,\n          const rust_shape_tables *in_tables,\n          U const &in_dp)\n-    : ctxt< data<T,U> >(in_task, in_align, in_sp, in_params, in_tables),\n+    : ctxt< data<T,U> >(in_task, in_align, in_sp, in_tables),\n       dp(in_dp),\n       end_dp() {}\n \n@@ -1016,20 +917,10 @@ class data : public ctxt< data<T,U> > {\n         dp = next_dp;\n     }\n \n-    void walk_res1(const rust_fn *dtor, unsigned n_params,\n-                   const type_param *params, const uint8_t *end_sp) {\n+    void walk_res1(const rust_fn *dtor, const uint8_t *end_sp) {\n         typename U::template data<uintptr_t>::t live = bump_dp<uintptr_t>(dp);\n         // Delegate to the implementation.\n-        static_cast<T *>(this)->walk_res2(dtor, n_params, params, end_sp,\n-                                         live);\n-    }\n-\n-    void walk_var1(uint8_t param_index) {\n-        const type_param *param = &this->params[param_index];\n-        T sub(*static_cast<T *>(this), param->shape, param->params,\n-              param->tables);\n-        static_cast<T *>(this)->walk_subcontext2(sub);\n-        dp = sub.dp;\n+        static_cast<T *>(this)->walk_res2(dtor, end_sp, live);\n     }\n \n     template<typename WN>\n@@ -1050,8 +941,7 @@ data<T,U>::walk_box_contents1() {\n     if (body_td) {\n         U body_dp(dp.box_body());\n         arena arena;\n-        type_param *params = type_param::from_tydesc(body_td, arena);\n-        T sub(*static_cast<T *>(this), body_td->shape, params,\n+        T sub(*static_cast<T *>(this), body_td->shape,\n               body_td->shape_tables, body_dp);\n         sub.align = true;\n         static_cast<T *>(this)->walk_box_contents2(sub);\n@@ -1065,8 +955,7 @@ data<T,U>::walk_uniq_contents1() {\n     if (body_td) {\n         U body_dp(dp.box_body());\n         arena arena;\n-        type_param *params = type_param::from_tydesc(body_td, arena);\n-        T sub(*static_cast<T *>(this), body_td->shape, params,\n+        T sub(*static_cast<T *>(this), body_td->shape,\n               body_td->shape_tables, body_dp);\n         sub.align = true;\n         static_cast<T *>(this)->walk_uniq_contents2(sub);\n@@ -1102,8 +991,10 @@ data<T,U>::get_vec_data_range(ptr dp) {\n template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_vec_data_range(ptr_pair &dp) {\n-    std::pair<uint8_t *,uint8_t *> fst = get_vec_data_range(dp.fst);\n-    std::pair<uint8_t *,uint8_t *> snd = get_vec_data_range(dp.snd);\n+    std::pair<uint8_t *,uint8_t *> fst =\n+        get_vec_data_range(shape::ptr(dp.fst));\n+    std::pair<uint8_t *,uint8_t *> snd =\n+        get_vec_data_range(shape::ptr(dp.snd));\n     ptr_pair start(fst.first, snd.first);\n     ptr_pair end(fst.second, snd.second);\n     return std::make_pair(start, end);\n@@ -1122,9 +1013,9 @@ template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_slice_data_range(bool is_str, ptr_pair &dp) {\n     std::pair<uint8_t *,uint8_t *> fst =\n-        get_slice_data_range(is_str, dp.fst);\n+        get_slice_data_range(is_str, shape::ptr(dp.fst));\n     std::pair<uint8_t *,uint8_t *> snd =\n-        get_slice_data_range(is_str, dp.snd);\n+        get_slice_data_range(is_str, shape::ptr(dp.snd));\n     ptr_pair start(fst.first, snd.first);\n     ptr_pair end(fst.second, snd.second);\n     return std::make_pair(start, end);\n@@ -1142,9 +1033,9 @@ std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_fixedvec_data_range(uint16_t n_elts, size_t elt_sz,\n                                    ptr_pair &dp) {\n     std::pair<uint8_t *,uint8_t *> fst =\n-        get_fixedvec_data_range(n_elts, elt_sz, dp.fst);\n+        get_fixedvec_data_range(n_elts, elt_sz, shape::ptr(dp.fst));\n     std::pair<uint8_t *,uint8_t *> snd =\n-        get_fixedvec_data_range(n_elts, elt_sz, dp.snd);\n+        get_fixedvec_data_range(n_elts, elt_sz, shape::ptr(dp.snd));\n     ptr_pair start(fst.first, snd.first);\n     ptr_pair end(fst.second, snd.second);\n     return std::make_pair(start, end);\n@@ -1181,9 +1072,8 @@ void\n \n     arena arena;\n     const type_desc *closure_td = pair.env->td;\n-    type_param *params = type_param::from_tydesc(closure_td, arena);\n     ptr closure_dp((uintptr_t)box_body(pair.env));\n-    T sub(*static_cast<T *>(this), closure_td->shape, params,\n+    T sub(*static_cast<T *>(this), closure_td->shape,\n           closure_td->shape_tables, closure_dp);\n     sub.align = true;\n \n@@ -1208,26 +1098,22 @@ class log : public data<log,ptr> {\n \n     log(log &other,\n         const uint8_t *in_sp,\n-        const type_param *in_params,\n         const rust_shape_tables *in_tables = NULL)\n     : data<log,ptr>(other.task,\n                     other.align,\n                     in_sp,\n-                    in_params,\n                     in_tables ? in_tables : other.tables,\n                     other.dp),\n       out(other.out),\n       prefix(\"\") {}\n \n     log(log &other,\n         const uint8_t *in_sp,\n-        const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         ptr in_dp)\n     : data<log,ptr>(other.task,\n                     other.align,\n                     in_sp,\n-                    in_params,\n                     in_tables,\n                     in_dp),\n       out(other.out),\n@@ -1237,7 +1123,6 @@ class log : public data<log,ptr> {\n     : data<log,ptr>(other.task,\n                     other.align,\n                     other.sp,\n-                    other.params,\n                     other.tables,\n                     in_dp),\n       out(other.out),\n@@ -1334,9 +1219,7 @@ class log : public data<log,ptr> {\n                        const std::pair<const uint8_t *,const uint8_t *>\n                        variant_ptr_and_end);\n     void walk_string2(const std::pair<ptr,ptr> &data);\n-    void walk_res2(const rust_fn *dtor, unsigned n_params,\n-                   const type_param *params, const uint8_t *end_sp,\n-                   bool live);\n+    void walk_res2(const rust_fn *dtor, const uint8_t *end_sp, bool live);\n \n     template<typename T>\n     inline void walk_number2() {\n@@ -1348,11 +1231,11 @@ class log : public data<log,ptr> {\n     log(rust_task *in_task,\n         bool in_align,\n         const uint8_t *in_sp,\n-        const type_param *in_params,\n         const rust_shape_tables *in_tables,\n         uint8_t *in_data,\n         std::ostream &in_out)\n-    : data<log,ptr>(in_task, in_align, in_sp, in_params, in_tables, in_data),\n+        : data<log,ptr>(in_task, in_align, in_sp, in_tables,\n+                        ptr(in_data)),\n       out(in_out),\n       prefix(\"\") {}\n };"}, {"sha": "c5404a40196f682c11df8db860a3840168ecc3b8", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22620624cdc4c35a74fce7eca9f6f279a403f56/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=b22620624cdc4c35a74fce7eca9f6f279a403f56", "patch": "@@ -83,7 +83,6 @@ const shape_enum: u8 = 12u8;\n const shape_struct: u8 = 17u8;\n const shape_box_fn: u8 = 18u8;\n const shape_res: u8 = 20u8;\n-const shape_var: u8 = 21u8;\n const shape_uniq: u8 = 22u8;\n const shape_opaque_closure_ptr: u8 = 23u8; // the closure itself.\n const shape_uniq_fn: u8 = 25u8;"}]}