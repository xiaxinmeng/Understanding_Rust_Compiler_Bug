{"sha": "91385d5776a381b7fd24c0be41879f15fc834e43", "node_id": "C_kwDOAAsO6NoAKDkxMzg1ZDU3NzZhMzgxYjdmZDI0YzBiZTQxODc5ZjE1ZmM4MzRlNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T04:43:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T04:43:43Z"}, "message": "Auto merge of #104179 - Manishearth:rollup-yvsx5hh, r=Manishearth\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #100508 (avoid making substs of type aliases late bound when used as fn args)\n - #101381 (Test that target feature mix up with homogeneous floats is sound)\n - #103353 (Fix Access Violation when using lld & ThinLTO on windows-msvc)\n - #103521 (Avoid possible infinite  loop when next_point reaching the end of file)\n - #103559 (first move on a nested span_label)\n - #103778 (Update several crates for improved support of the new targets)\n - #103827 (Properly remap and check for substs compatibility in `confirm_impl_trait_in_trait_candidate`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "81cba8034ed39a068537dff105f1c69fbef5c9b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81cba8034ed39a068537dff105f1c69fbef5c9b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91385d5776a381b7fd24c0be41879f15fc834e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91385d5776a381b7fd24c0be41879f15fc834e43", "html_url": "https://github.com/rust-lang/rust/commit/91385d5776a381b7fd24c0be41879f15fc834e43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91385d5776a381b7fd24c0be41879f15fc834e43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2504a83ca6ee8f6717dedd0721b90ffcbe1300", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2504a83ca6ee8f6717dedd0721b90ffcbe1300", "html_url": "https://github.com/rust-lang/rust/commit/bc2504a83ca6ee8f6717dedd0721b90ffcbe1300"}, {"sha": "6c021cf07d8e47d33b8d764b9505d3442177e241", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c021cf07d8e47d33b8d764b9505d3442177e241", "html_url": "https://github.com/rust-lang/rust/commit/6c021cf07d8e47d33b8d764b9505d3442177e241"}], "stats": {"total": 843, "additions": 759, "deletions": 84}, "files": [{"sha": "544cb4faef22296e947518ed84839c612d05e86b", "filename": "Cargo.lock", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -2496,7 +2496,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\n dependencies = [\n  \"lock_api\",\n- \"parking_lot_core 0.9.3\",\n+ \"parking_lot_core 0.9.4\",\n ]\n \n [[package]]\n@@ -2515,15 +2515,15 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.9.3\"\n+version = \"0.9.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"09a279cbf25cb0757810394fbc1e359949b59e348145c643a939a525692e6929\"\n+checksum = \"4dc9e0dc2adc1c69d09143aff38d3d30c5c3f0df0dad82e6d25547af174ebec0\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n  \"libc\",\n  \"redox_syscall\",\n  \"smallvec\",\n- \"windows-sys 0.36.1\",\n+ \"windows-sys 0.42.0\",\n ]\n \n [[package]]\n@@ -2748,9 +2748,9 @@ dependencies = [\n \n [[package]]\n name = \"psm\"\n-version = \"0.1.16\"\n+version = \"0.1.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd136ff4382c4753fc061cb9e4712ab2af263376b95bbd5bd8cd50c020b78e69\"\n+checksum = \"5787f7cda34e3033a72192c018bc5883100330f362ef279a8cbccfce8bb4e874\"\n dependencies = [\n  \"cc\",\n ]\n@@ -4651,9 +4651,9 @@ checksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n \n [[package]]\n name = \"stacker\"\n-version = \"0.1.14\"\n+version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90939d5171a4420b3ff5fbc8954d641e7377335454c259dcb80786f3f21dc9b4\"\n+checksum = \"c886bd4480155fd3ef527d45e9ac8dd7118a898a46530b7b94c3e21866259fce\"\n dependencies = [\n  \"cc\",\n  \"cfg-if 1.0.0\",\n@@ -5473,17 +5473,25 @@ dependencies = [\n \n [[package]]\n name = \"windows-sys\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2\"\n+checksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\n dependencies = [\n- \"windows_aarch64_msvc 0.36.1\",\n- \"windows_i686_gnu 0.36.1\",\n- \"windows_i686_msvc 0.36.1\",\n- \"windows_x86_64_gnu 0.36.1\",\n- \"windows_x86_64_msvc 0.36.1\",\n+ \"windows_aarch64_gnullvm\",\n+ \"windows_aarch64_msvc 0.42.0\",\n+ \"windows_i686_gnu 0.42.0\",\n+ \"windows_i686_msvc 0.42.0\",\n+ \"windows_x86_64_gnu 0.42.0\",\n+ \"windows_x86_64_gnullvm\",\n+ \"windows_x86_64_msvc 0.42.0\",\n ]\n \n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e\"\n+\n [[package]]\n name = \"windows_aarch64_msvc\"\n version = \"0.28.0\"\n@@ -5492,9 +5500,9 @@ checksum = \"52695a41e536859d5308cc613b4a022261a274390b25bd29dfff4bf08505f3c2\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47\"\n+checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n@@ -5504,9 +5512,9 @@ checksum = \"f54725ac23affef038fecb177de6c9bf065787c2f432f79e3c373da92f3e1d8a\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6\"\n+checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n@@ -5516,9 +5524,9 @@ checksum = \"51d5158a43cc43623c0729d1ad6647e62fa384a3d135fd15108d37c683461f64\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024\"\n+checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n@@ -5528,9 +5536,15 @@ checksum = \"bc31f409f565611535130cfe7ee8e6655d3fa99c1c61013981e491921b5ce954\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1\"\n+checksum = \"09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n@@ -5540,9 +5554,9 @@ checksum = \"3f2b8c7cbd3bfdddd9ab98769f9746a7fad1bca236554cd032b78d768bc0e89f\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.36.1\"\n+version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680\"\n+checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n \n [[package]]\n name = \"xattr\""}, {"sha": "7f26e970e30947efbdc5d9f77bb6974f0c1e5b00", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -724,13 +724,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             borrow_span,\n             &self.describe_any_place(borrow.borrowed_place.as_ref()),\n         );\n-\n-        borrow_spans.var_span_label(\n+        borrow_spans.var_subdiag(\n             &mut err,\n-            {\n+            |var_span| {\n+                use crate::session_diagnostics::CaptureVarCause::*;\n                 let place = &borrow.borrowed_place;\n                 let desc_place = self.describe_any_place(place.as_ref());\n-                format!(\"borrow occurs due to use of {}{}\", desc_place, borrow_spans.describe())\n+                match borrow_spans {\n+                    UseSpans::ClosureUse { generator_kind, .. } => match generator_kind {\n+                        Some(_) => BorrowUsePlaceGenerator { place: desc_place, var_span },\n+                        None => BorrowUsePlaceClosure { place: desc_place, var_span },\n+                    },\n+                    _ => BorrowUsePlace { place: desc_place, var_span },\n+                }\n             },\n             \"mutable\",\n         );"}, {"sha": "61518378e3d0c7b0b738d73ef57367fb58e2ff9f", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -623,6 +623,26 @@ impl UseSpans<'_> {\n         }\n     }\n \n+    /// Add a subdiagnostic to the use of the captured variable, if it exists.\n+    pub(super) fn var_subdiag(\n+        self,\n+        err: &mut Diagnostic,\n+        f: impl Fn(Span) -> crate::session_diagnostics::CaptureVarCause,\n+        kind_desc: impl Into<String>,\n+    ) {\n+        if let UseSpans::ClosureUse { capture_kind_span, path_span, .. } = self {\n+            if capture_kind_span == path_span {\n+                err.subdiagnostic(f(capture_kind_span));\n+            } else {\n+                err.subdiagnostic(crate::session_diagnostics::CaptureVarKind {\n+                    kind_desc: kind_desc.into(),\n+                    kind_span: capture_kind_span,\n+                });\n+                err.subdiagnostic(f(path_span));\n+            }\n+        }\n+    }\n+\n     /// Returns `false` if this place is not used in a closure.\n     pub(super) fn for_closure(&self) -> bool {\n         match *self {"}, {"sha": "824f20a31bb097463e8ef1a55927ed5b3e81d711", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -148,3 +148,33 @@ pub(crate) enum RequireStaticErr {\n         multi_span: MultiSpan,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+#[label(borrowck_capture_kind_label)]\n+pub(crate) struct CaptureVarKind {\n+    pub kind_desc: String,\n+    #[primary_span]\n+    pub kind_span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum CaptureVarCause {\n+    #[label(borrowck_var_borrow_by_use_place)]\n+    BorrowUsePlace {\n+        place: String,\n+        #[primary_span]\n+        var_span: Span,\n+    },\n+    #[label(borrowck_var_borrow_by_use_place_in_generator)]\n+    BorrowUsePlaceGenerator {\n+        place: String,\n+        #[primary_span]\n+        var_span: Span,\n+    },\n+    #[label(borrowck_var_borrow_by_use_place_in_closure)]\n+    BorrowUsePlaceClosure {\n+        place: String,\n+        #[primary_span]\n+        var_span: Span,\n+    },\n+}"}, {"sha": "bf5ac4e503e3f65c4e691ad6d0a1b6b782aef95d", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n+use rustc_session::config::Lto;\n use rustc_target::abi::{\n     AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n@@ -303,7 +304,8 @@ impl<'ll> CodegenCx<'ll, '_> {\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n                 // dynamic linking when linker plugin based LTO is enabled.\n-                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled();\n+                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled() &&\n+                self.tcx.sess.lto() != Lto::Thin;\n \n             // If this assertion triggers, there's something wrong with commandline\n             // argument validation."}, {"sha": "5afce15e26bfcc55e3fa8c7454c010dc0aca2296", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -23,7 +23,7 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n smallvec = { version = \"1.8.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n stable_deref_trait = \"1.0.0\"\n-stacker = \"0.1.14\"\n+stacker = \"0.1.15\"\n tempfile = \"3.2\"\n thin-vec = \"0.2.9\"\n tracing = \"0.1\""}, {"sha": "80fc4c6e4f5d37098456abf6449eb1d55e1c82ed", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -58,3 +58,15 @@ borrowck_returned_lifetime_short =\n \n borrowck_used_impl_require_static =\n     the used `impl` has a `'static` requirement\n+\n+borrowck_capture_kind_label =\n+    capture is {$kind_desc} because of use here\n+\n+borrowck_var_borrow_by_use_place_in_generator =\n+    borrow occurs due to use of {$place} in closure in generator\n+\n+borrowck_var_borrow_by_use_place_in_closure =\n+    borrow occurs due to use of {$place} in closure\n+\n+borrowck_var_borrow_by_use_place =\n+    borrow occurs due to use of {$place}"}, {"sha": "c64177eea3f831f388189c3879f89ef9aa9c8567", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 99, "deletions": 5, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::bug;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -1781,7 +1781,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n \n     let mut late_bound = FxIndexSet::default();\n \n-    let mut constrained_by_input = ConstrainedCollector::default();\n+    let mut constrained_by_input = ConstrainedCollector { regions: Default::default(), tcx };\n     for arg_ty in decl.inputs {\n         constrained_by_input.visit_ty(arg_ty);\n     }\n@@ -1834,12 +1834,65 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n     debug!(?late_bound);\n     return Some(tcx.arena.alloc(late_bound));\n \n-    #[derive(Default)]\n-    struct ConstrainedCollector {\n+    /// Visits a `ty::Ty` collecting information about what generic parameters are constrained.\n+    ///\n+    /// The visitor does not operate on `hir::Ty` so that it can be called on the rhs of a `type Alias<...> = ...;`\n+    /// which may live in a separate crate so there would not be any hir available. Instead we use the `type_of`\n+    /// query to obtain a `ty::Ty` which will be present even in cross crate scenarios. It also naturally\n+    /// handles cycle detection as we go through the query system.\n+    ///\n+    /// This is necessary in the first place for the following case:\n+    /// ```\n+    /// type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+    /// fn foo<'a>(_: Alias<'a, ()>) -> Alias<'a, ()> { ... }\n+    /// ```\n+    ///\n+    /// If we conservatively considered `'a` unconstrained then we could break users who had written code before\n+    /// we started correctly handling aliases. If we considered `'a` constrained then it would become late bound\n+    /// causing an error during astconv as the `'a` is not constrained by the input type `<() as Trait<'a>>::Assoc`\n+    /// but appears in the output type `<() as Trait<'a>>::Assoc`.\n+    ///\n+    /// We must therefore \"look into\" the `Alias` to see whether we should consider `'a` constrained or not.\n+    ///\n+    /// See #100508 #85533 #47511 for additional context\n+    struct ConstrainedCollectorPostAstConv {\n+        arg_is_constrained: Box<[bool]>,\n+    }\n+\n+    use std::ops::ControlFlow;\n+    use ty::Ty;\n+    impl<'tcx> TypeVisitor<'tcx> for ConstrainedCollectorPostAstConv {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n+            match t.kind() {\n+                ty::Param(param_ty) => {\n+                    self.arg_is_constrained[param_ty.index as usize] = true;\n+                }\n+                ty::Projection(_) => return ControlFlow::Continue(()),\n+                _ => (),\n+            }\n+            t.super_visit_with(self)\n+        }\n+\n+        fn visit_const(&mut self, _: ty::Const<'tcx>) -> ControlFlow<!> {\n+            ControlFlow::Continue(())\n+        }\n+\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<!> {\n+            debug!(\"r={:?}\", r.kind());\n+            if let ty::RegionKind::ReEarlyBound(region) = r.kind() {\n+                self.arg_is_constrained[region.index as usize] = true;\n+            }\n+\n+            ControlFlow::Continue(())\n+        }\n+    }\n+\n+    struct ConstrainedCollector<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n         regions: FxHashSet<LocalDefId>,\n     }\n \n-    impl<'v> Visitor<'v> for ConstrainedCollector {\n+    impl<'v> Visitor<'v> for ConstrainedCollector<'_> {\n         fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n             match ty.kind {\n                 hir::TyKind::Path(\n@@ -1850,6 +1903,47 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n                     // (defined above)\n                 }\n \n+                hir::TyKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    hir::Path { res: Res::Def(DefKind::TyAlias, alias_def), segments, span },\n+                )) => {\n+                    // See comments on `ConstrainedCollectorPostAstConv` for why this arm does not just consider\n+                    // substs to be unconstrained.\n+                    let generics = self.tcx.generics_of(alias_def);\n+                    let mut walker = ConstrainedCollectorPostAstConv {\n+                        arg_is_constrained: vec![false; generics.params.len()].into_boxed_slice(),\n+                    };\n+                    walker.visit_ty(self.tcx.type_of(alias_def));\n+\n+                    match segments.last() {\n+                        Some(hir::PathSegment { args: Some(args), .. }) => {\n+                            let tcx = self.tcx;\n+                            for constrained_arg in\n+                                args.args.iter().enumerate().flat_map(|(n, arg)| {\n+                                    match walker.arg_is_constrained.get(n) {\n+                                        Some(true) => Some(arg),\n+                                        Some(false) => None,\n+                                        None => {\n+                                            tcx.sess.delay_span_bug(\n+                                                *span,\n+                                                format!(\n+                                                    \"Incorrect generic arg count for alias {:?}\",\n+                                                    alias_def\n+                                                ),\n+                                            );\n+                                            None\n+                                        }\n+                                    }\n+                                })\n+                            {\n+                                self.visit_generic_arg(constrained_arg);\n+                            }\n+                        }\n+                        Some(_) => (),\n+                        None => bug!(\"Path with no segments or self type\"),\n+                    }\n+                }\n+\n                 hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                     // consider only the lifetimes on the final\n                     // segment; I am not sure it's even currently"}, {"sha": "dc13374f992eb7589f6eb919b50024314ab5d1ba", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -430,7 +430,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Projection(_), ty::Projection(_)) => {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n-                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p)) => {\n+                    (ty::Param(p), ty::Projection(proj)) | (ty::Projection(proj), ty::Param(p))\n+                        if self.def_kind(proj.item_def_id) != DefKind::ImplTraitPlaceholder =>\n+                    {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n                         if !sp.contains(p_span) {"}, {"sha": "3baa2e03cbad722a30bcae70e468cc9b7c10392d", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -855,7 +855,8 @@ impl SourceMap {\n     /// Returns a new span representing the next character after the end-point of this span.\n     /// Special cases:\n     /// - if span is a dummy one, returns the same span\n-    /// - if next_point reached the end of source, return span with lo = hi\n+    /// - if next_point reached the end of source, return a span exceeding the end of source,\n+    ///   which means sm.span_to_snippet(next_point) will get `Err`\n     /// - respect multi-byte characters\n     pub fn next_point(&self, sp: Span) -> Span {\n         if sp.is_dummy() {\n@@ -864,9 +865,6 @@ impl SourceMap {\n         let start_of_next_point = sp.hi().0;\n \n         let width = self.find_width_of_character_at_span(sp, true);\n-        if width == 0 {\n-            return Span::new(sp.hi(), sp.hi(), sp.ctxt(), None);\n-        }\n         // If the width is 1, then the next span should only contain the next char besides current ending.\n         // However, in the case of a multibyte character, where the width != 1, the next span should\n         // span multiple bytes to include the whole character.\n@@ -938,7 +936,7 @@ impl SourceMap {\n         // Ensure indexes are also not malformed.\n         if start_index > end_index || end_index > source_len - 1 {\n             debug!(\"find_width_of_character_at_span: source indexes are malformed\");\n-            return 0;\n+            return 1;\n         }\n \n         let src = local_begin.sf.external_src.borrow();"}, {"sha": "3cab59e8dbe6cf6166b90d65ad62889e852782a7", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -511,16 +511,17 @@ fn test_next_point() {\n     assert_eq!(span.lo().0, 4);\n     assert_eq!(span.hi().0, 5);\n \n-    // A non-empty span at the last byte should advance to create an empty\n-    // span pointing at the end of the file.\n+    // Reaching to the end of file, return a span that will get error with `span_to_snippet`\n     let span = Span::with_root_ctxt(BytePos(4), BytePos(5));\n     let span = sm.next_point(span);\n     assert_eq!(span.lo().0, 5);\n-    assert_eq!(span.hi().0, 5);\n+    assert_eq!(span.hi().0, 6);\n+    assert!(sm.span_to_snippet(span).is_err());\n \n-    // Empty span pointing just past the last byte.\n+    // Reaching to the end of file, return a span that will get error with `span_to_snippet`\n     let span = Span::with_root_ctxt(BytePos(5), BytePos(5));\n     let span = sm.next_point(span);\n     assert_eq!(span.lo().0, 5);\n-    assert_eq!(span.hi().0, 5);\n+    assert_eq!(span.hi().0, 6);\n+    assert!(sm.span_to_snippet(span).is_err());\n }"}, {"sha": "572f82117cc0e701440b9b0308f6848b539ed214", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -2187,7 +2187,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n // Verify that the trait item and its implementation have compatible substs lists\n fn check_substs_compatible<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    assoc_ty: &ty::AssocItem,\n+    assoc_item: &ty::AssocItem,\n     substs: ty::SubstsRef<'tcx>,\n ) -> bool {\n     fn check_substs_compatible_inner<'tcx>(\n@@ -2219,7 +2219,10 @@ fn check_substs_compatible<'tcx>(\n         true\n     }\n \n-    check_substs_compatible_inner(tcx, tcx.generics_of(assoc_ty.def_id), substs.as_slice())\n+    let generics = tcx.generics_of(assoc_item.def_id);\n+    // Chop off any additional substs (RPITIT) substs\n+    let substs = &substs[0..generics.count().min(substs.len())];\n+    check_substs_compatible_inner(tcx, generics, substs)\n }\n \n fn confirm_impl_trait_in_trait_candidate<'tcx>(\n@@ -2248,11 +2251,27 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         };\n     }\n \n-    let impl_fn_def_id = leaf_def.item.def_id;\n     // Rebase from {trait}::{fn}::{opaque} to {impl}::{fn}::{opaque},\n     // since `data.substs` are the impl substs.\n     let impl_fn_substs =\n         obligation.predicate.substs.rebase_onto(tcx, tcx.parent(trait_fn_def_id), data.substs);\n+    let impl_fn_substs = translate_substs(\n+        selcx.infcx(),\n+        obligation.param_env,\n+        data.impl_def_id,\n+        impl_fn_substs,\n+        leaf_def.defining_node,\n+    );\n+\n+    if !check_substs_compatible(tcx, &leaf_def.item, impl_fn_substs) {\n+        let err = tcx.ty_error_with_message(\n+            obligation.cause.span,\n+            \"impl method and trait method have different parameters\",\n+        );\n+        return Progress { term: err.into(), obligations };\n+    }\n+\n+    let impl_fn_def_id = leaf_def.item.def_id;\n \n     let cause = ObligationCause::new(\n         obligation.cause.span,"}, {"sha": "e1a108cea9574a6a772ce946215cef328a8facf1", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -224,13 +224,13 @@ dependencies = [\n \n [[package]]\n name = \"fd-lock\"\n-version = \"3.0.6\"\n+version = \"3.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e11dcc7e4d79a8c89b9ab4c6f5c30b1fc4a83c420792da3542fd31179ed5f517\"\n+checksum = \"0c93a581058d957dc4176875aad04f82f81613e6611d64aa1a9c755bdfb16711\"\n dependencies = [\n  \"cfg-if\",\n  \"rustix\",\n- \"windows-sys\",\n+ \"windows-sys 0.42.0\",\n ]\n \n [[package]]\n@@ -528,7 +528,7 @@ dependencies = [\n  \"io-lifetimes\",\n  \"libc\",\n  \"linux-raw-sys\",\n- \"windows-sys\",\n+ \"windows-sys 0.36.1\",\n ]\n \n [[package]]\n@@ -721,43 +721,100 @@ version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2\"\n dependencies = [\n- \"windows_aarch64_msvc\",\n- \"windows_i686_gnu\",\n- \"windows_i686_msvc\",\n- \"windows_x86_64_gnu\",\n- \"windows_x86_64_msvc\",\n+ \"windows_aarch64_msvc 0.36.1\",\n+ \"windows_i686_gnu 0.36.1\",\n+ \"windows_i686_msvc 0.36.1\",\n+ \"windows_x86_64_gnu 0.36.1\",\n+ \"windows_x86_64_msvc 0.36.1\",\n ]\n \n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\n+dependencies = [\n+ \"windows_aarch64_gnullvm\",\n+ \"windows_aarch64_msvc 0.42.0\",\n+ \"windows_i686_gnu 0.42.0\",\n+ \"windows_i686_msvc 0.42.0\",\n+ \"windows_x86_64_gnu 0.42.0\",\n+ \"windows_x86_64_gnullvm\",\n+ \"windows_x86_64_msvc 0.42.0\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_gnullvm\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e\"\n+\n [[package]]\n name = \"windows_aarch64_msvc\"\n version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47\"\n \n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n+\n [[package]]\n name = \"windows_i686_gnu\"\n version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6\"\n \n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n+\n [[package]]\n name = \"windows_i686_msvc\"\n version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024\"\n \n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n+\n [[package]]\n name = \"windows_x86_64_gnu\"\n version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1\"\n \n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnullvm\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028\"\n+\n [[package]]\n name = \"windows_x86_64_msvc\"\n version = \"0.36.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680\"\n \n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n+\n [[package]]\n name = \"xattr\"\n version = \"0.2.3\""}, {"sha": "f74738437ea3a2e7ac0bd91b536b9ed8236e6c42", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -36,7 +36,7 @@ test = false\n \n [dependencies]\n cmake = \"0.1.38\"\n-fd-lock = \"3.0.6\"\n+fd-lock = \"3.0.7\"\n filetime = \"0.2\"\n getopts = \"0.2.19\"\n cc = \"1.0.69\""}, {"sha": "afb0dc42f443a8938cce94c2ca301a1cb1a7a9f3", "filename": "src/test/codegen/auxiliary/static_dllimport_aux.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fauxiliary%2Fstatic_dllimport_aux.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,13 @@\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+#[inline(always)]\n+pub fn memrchr() {\n+    fn detect() {}\n+\n+    static CROSS_CRATE_STATIC_ITEM: AtomicPtr<()> = AtomicPtr::new(detect as *mut ());\n+\n+    unsafe {\n+        let fun = CROSS_CRATE_STATIC_ITEM.load(Ordering::SeqCst);\n+        std::mem::transmute::<*mut (), fn()>(fun)()\n+    }\n+}"}, {"sha": "0b6ab4f7ecb3bb9342d255df88aa7344531c59d1", "filename": "src/test/codegen/issue-81408-dllimport-thinlto-windows.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O -C lto=thin -C prefer-dynamic=no\n+// only-windows\n+// aux-build:static_dllimport_aux.rs\n+\n+// Test that on Windows, when performing ThinLTO, we do not mark cross-crate static items with\n+// dllimport because lld does not fix the symbol names for us.\n+\n+extern crate static_dllimport_aux;\n+\n+// CHECK-LABEL: @{{.+}}CROSS_CRATE_STATIC_ITEM{{.+}} =\n+// CHECK-SAME: external local_unnamed_addr global %\"{{.+}}AtomicPtr\n+\n+pub fn main() {\n+    static_dllimport_aux::memrchr();\n+}"}, {"sha": "d7f5e19219ed6b7723adb8d9acc4a69910380110", "filename": "src/test/ui/abi/homogenous-floats-target-feature-mixup.rs", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fabi%2Fhomogenous-floats-target-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fabi%2Fhomogenous-floats-target-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fhomogenous-floats-target-feature-mixup.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,192 @@\n+// This test check that even if we mixup target feature of function with homogenous floats,\n+// the abi is sound and still produce the right answer.\n+//\n+// This is basically the same test as src/test/ui/simd/target-feature-mixup.rs but for floats and\n+// without #[repr(simd)]\n+\n+// run-pass\n+// ignore-emscripten\n+// ignore-sgx no processes\n+\n+#![feature(avx512_target_feature)]\n+\n+#![allow(overflowing_literals)]\n+#![allow(unused_variables)]\n+\n+use std::process::{Command, ExitStatus};\n+use std::env;\n+\n+fn main() {\n+    if let Some(level) = env::args().nth(1) {\n+        return test::main(&level)\n+    }\n+\n+    match std::env::var(\"TARGET\") {\n+        Ok(s) => {\n+            // Skip this tests on i586-unknown-linux-gnu where sse2 is disabled\n+            if s.contains(\"i586\") {\n+                return\n+            }\n+        }\n+        Err(_) => return,\n+    }\n+\n+    let me = env::current_exe().unwrap();\n+    for level in [\"sse\", \"avx\", \"avx512\"].iter() {\n+        let status = Command::new(&me).arg(level).status().unwrap();\n+        if status.success() {\n+            println!(\"success with {}\", level);\n+            continue\n+        }\n+\n+        // We don't actually know if our computer has the requisite target features\n+        // for the test below. Testing for that will get added to libstd later so\n+        // for now just assume sigill means this is a machine that can't run this test.\n+        if is_sigill(status) {\n+            println!(\"sigill with {}, assuming spurious\", level);\n+            continue\n+        }\n+        panic!(\"invalid status at {}: {}\", level, status);\n+    }\n+}\n+\n+#[cfg(unix)]\n+fn is_sigill(status: ExitStatus) -> bool {\n+    use std::os::unix::prelude::*;\n+    status.signal() == Some(4)\n+}\n+\n+#[cfg(windows)]\n+fn is_sigill(status: ExitStatus) -> bool {\n+    status.code() == Some(0xc000001d)\n+}\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+#[allow(nonstandard_style)]\n+mod test {\n+    #[derive(PartialEq, Debug, Clone, Copy)]\n+    struct f32x2(f32, f32);\n+\n+    #[derive(PartialEq, Debug, Clone, Copy)]\n+    struct f32x4(f32, f32, f32, f32);\n+\n+    #[derive(PartialEq, Debug, Clone, Copy)]\n+    struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);\n+\n+    pub fn main(level: &str) {\n+        unsafe {\n+            main_normal(level);\n+            main_sse(level);\n+            if level == \"sse\" {\n+                return\n+            }\n+            main_avx(level);\n+            if level == \"avx\" {\n+                return\n+            }\n+            main_avx512(level);\n+        }\n+    }\n+\n+    macro_rules! mains {\n+        ($(\n+            $(#[$attr:meta])*\n+            unsafe fn $main:ident(level: &str) {\n+                ...\n+            }\n+        )*) => ($(\n+            $(#[$attr])*\n+            unsafe fn $main(level: &str) {\n+                let m128 = f32x2(1., 2.);\n+                let m256 = f32x4(3., 4., 5., 6.);\n+                let m512 = f32x8(7., 8., 9., 10., 11., 12., 13., 14.);\n+                assert_eq!(id_sse_128(m128), m128);\n+                assert_eq!(id_sse_256(m256), m256);\n+                assert_eq!(id_sse_512(m512), m512);\n+\n+                if level == \"sse\" {\n+                    return\n+                }\n+                assert_eq!(id_avx_128(m128), m128);\n+                assert_eq!(id_avx_256(m256), m256);\n+                assert_eq!(id_avx_512(m512), m512);\n+\n+                if level == \"avx\" {\n+                    return\n+                }\n+                assert_eq!(id_avx512_128(m128), m128);\n+                assert_eq!(id_avx512_256(m256), m256);\n+                assert_eq!(id_avx512_512(m512), m512);\n+            }\n+        )*)\n+    }\n+\n+    mains! {\n+        unsafe fn main_normal(level: &str) { ... }\n+        #[target_feature(enable = \"sse2\")]\n+        unsafe fn main_sse(level: &str) { ... }\n+        #[target_feature(enable = \"avx\")]\n+        unsafe fn main_avx(level: &str) { ... }\n+        #[target_feature(enable = \"avx512bw\")]\n+        unsafe fn main_avx512(level: &str) { ... }\n+    }\n+\n+    #[target_feature(enable = \"sse2\")]\n+    unsafe fn id_sse_128(a: f32x2) -> f32x2 {\n+        assert_eq!(a, f32x2(1., 2.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"sse2\")]\n+    unsafe fn id_sse_256(a: f32x4) -> f32x4 {\n+        assert_eq!(a, f32x4(3., 4., 5., 6.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"sse2\")]\n+    unsafe fn id_sse_512(a: f32x8) -> f32x8 {\n+        assert_eq!(a, f32x8(7., 8., 9., 10., 11., 12., 13., 14.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx\")]\n+    unsafe fn id_avx_128(a: f32x2) -> f32x2 {\n+        assert_eq!(a, f32x2(1., 2.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx\")]\n+    unsafe fn id_avx_256(a: f32x4) -> f32x4 {\n+        assert_eq!(a, f32x4(3., 4., 5., 6.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx\")]\n+    unsafe fn id_avx_512(a: f32x8) -> f32x8 {\n+        assert_eq!(a, f32x8(7., 8., 9., 10., 11., 12., 13., 14.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx512bw\")]\n+    unsafe fn id_avx512_128(a: f32x2) -> f32x2 {\n+        assert_eq!(a, f32x2(1., 2.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx512bw\")]\n+    unsafe fn id_avx512_256(a: f32x4) -> f32x4 {\n+        assert_eq!(a, f32x4(3., 4., 5., 6.));\n+        a.clone()\n+    }\n+\n+    #[target_feature(enable = \"avx512bw\")]\n+    unsafe fn id_avx512_512(a: f32x8) -> f32x8 {\n+        assert_eq!(a, f32x8(7., 8., 9., 10., 11., 12., 13., 14.));\n+        a.clone()\n+    }\n+}\n+\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+mod test {\n+    pub fn main(level: &str) {}\n+}"}, {"sha": "cc0fc720ebbfd99e0fb87e74b1ca053239148d57", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,17 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct U;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl Foo for U {\n+    fn bar<T>(&self) {}\n+    //~^ ERROR method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+}\n+\n+fn main() {\n+    U.bar();\n+}"}, {"sha": "cd42683e0224d3f50e5881d212ac922dc3e3b140", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/generics-mismatch.rs:11:12\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |           - expected 0 type parameters\n+...\n+LL |     fn bar<T>(&self) {}\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "9d27d3710a6016e2d5f9b67bd2082824e83dfdf1", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n+// But we fixed an ICE anyways.\n+\n+#![feature(specialization)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+default impl<U> Foo for U\n+where\n+    U: Copy,\n+{\n+    fn bar(&self) -> U {\n+        //~^ ERROR method `bar` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+impl Foo for i32 {}\n+\n+fn main() {\n+    1i32.bar();\n+}"}, {"sha": "a30e6346b292714d4235c666ffd142a56d57c28e", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,23 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:16:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:9:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected fn pointer `fn(&U) -> impl Sized`\n+              found fn pointer `fn(&U) -> U`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "c9ee877db8ec52c4c7ecef269e4069d3b785d6c0", "filename": "src/test/ui/impl-trait/in-trait/specialization-substs-remap.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(specialization)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl<U> Foo for U\n+where\n+    U: Copy,\n+{\n+    fn bar(&self) -> U {\n+        *self\n+    }\n+}\n+\n+impl Foo for i32 {}\n+\n+fn main() {\n+    let _: i32 = 1i32.bar();\n+}"}, {"sha": "9998ee0e8d0c69c801528a509eb6371d10af4f86", "filename": "src/test/ui/issues/issue-47511.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc2504a83ca6ee8f6717dedd0721b90ffcbe1300/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc2504a83ca6ee8f6717dedd0721b90ffcbe1300/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr?ref=bc2504a83ca6ee8f6717dedd0721b90ffcbe1300", "patch": "@@ -1,18 +0,0 @@\n-error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n-  --> $DIR/issue-47511.rs:8:15\n-   |\n-LL | fn f(_: X) -> X {\n-   |               ^\n-   |\n-   = note: lifetimes appearing in an associated or opaque type are not considered constrained\n-   = note: consider introducing a named lifetime parameter\n-\n-error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n-  --> $DIR/issue-47511.rs:12:23\n-   |\n-LL | fn g<'a>(_: X<'a>) -> X<'a> {\n-   |                       ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0581`."}, {"sha": "5b9dc0e43087c1e8ec5f6e4894bf574406e649b3", "filename": "src/test/ui/late-bound-lifetimes/auxiliary/upstream_alias.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fauxiliary%2Fupstream_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fauxiliary%2Fupstream_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fauxiliary%2Fupstream_alias.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,5 @@\n+pub trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+pub type Alias<'a, T> = <T as Trait<'a>>::Assoc;"}, {"sha": "4154c279243236dac6c800e776743609e2d605df", "filename": "src/test/ui/late-bound-lifetimes/cross_crate_alias.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fcross_crate_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fcross_crate_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fcross_crate_alias.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:upstream_alias.rs\n+// check-pass\n+\n+extern crate upstream_alias;\n+\n+fn foo<'a, T: for<'b> upstream_alias::Trait<'b>>(_: upstream_alias::Alias<'a, T>) -> &'a () {\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "e56a34218e231c82d7f1c07e59cd449ee6706979", "filename": "src/test/ui/late-bound-lifetimes/downgraded_to_early_through_alias.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fdowngraded_to_early_through_alias.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+trait Gats<'a> {\n+    type Assoc;\n+    type Assoc2;\n+}\n+\n+trait Trait: for<'a> Gats<'a> {\n+    fn foo<'a>(_: &mut <Self as Gats<'a>>::Assoc) -> <Self as Gats<'a>>::Assoc2;\n+}\n+\n+impl<'a> Gats<'a> for () {\n+    type Assoc = &'a u32;\n+    type Assoc2 = ();\n+}\n+\n+type GatsAssoc<'a, T> = <T as Gats<'a>>::Assoc;\n+type GatsAssoc2<'a, T> = <T as Gats<'a>>::Assoc2;\n+\n+impl Trait for () {\n+    fn foo<'a>(_: &mut GatsAssoc<'a, Self>) -> GatsAssoc2<'a, Self> {}\n+}\n+\n+fn main() {}"}, {"sha": "7894435154082c91d2779695f04fbf5575fe22c9", "filename": "src/test/ui/late-bound-lifetimes/issue-47511.rs", "status": "renamed", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fissue-47511.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -1,9 +1,4 @@\n-// check-fail\n-// known-bug: #47511\n-\n-// Regression test for #47511: anonymous lifetimes can appear\n-// unconstrained in a return type, but only if they appear just once\n-// in the input, as the input to a projection.\n+// check-pass\n \n fn f(_: X) -> X {\n     unimplemented!()", "previous_filename": "src/test/ui/issues/issue-47511.rs"}, {"sha": "91839673c1f7a492fc28e9e63af62d9b1c1b395a", "filename": "src/test/ui/late-bound-lifetimes/late_bound_through_alias.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Flate_bound_through_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Flate_bound_through_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Flate_bound_through_alias.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+fn f(_: X) -> X {\n+    unimplemented!()\n+}\n+\n+fn g<'a>(_: X<'a>) -> X<'a> {\n+    unimplemented!()\n+}\n+\n+type X<'a> = &'a ();\n+\n+fn main() {\n+    let _: for<'a> fn(X<'a>) -> X<'a> = g;\n+    let _: for<'a> fn(X<'a>) -> X<'a> = f;\n+}"}, {"sha": "0b331e2039f25a94134cc41749ec3d415260722a", "filename": "src/test/ui/late-bound-lifetimes/mismatched_arg_count.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,12 @@\n+// ensures that we don't ICE when there are too many args supplied to the alias.\n+\n+trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+\n+fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+//~^ error: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+\n+fn main() {}"}, {"sha": "3704d9bb957ed2af6a2bfe18408047dfbb9175fe", "filename": "src/test/ui/late-bound-lifetimes/mismatched_arg_count.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flate-bound-lifetimes%2Fmismatched_arg_count.stderr?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: this type alias takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/mismatched_arg_count.rs:9:29\n+   |\n+LL | fn bar<'a, T: Trait<'a>>(_: Alias<'a, 'a, T>) {}\n+   |                             ^^^^^     -- help: remove this lifetime argument\n+   |                             |\n+   |                             expected 1 lifetime argument\n+   |\n+note: type alias defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/mismatched_arg_count.rs:7:6\n+   |\n+LL | type Alias<'a, T> = <T as Trait<'a>>::Assoc;\n+   |      ^^^^^ --\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "1fdb001488155c85085555d8a81db72ea94a20f7", "filename": "src/test/ui/parser/issue-103451.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected value, found struct `R`\n+struct R { }\n+struct S {\n+    x: [u8; R"}, {"sha": "eb3c92fb43d9b4dc028cb3de6c752e4ca962a66b", "filename": "src/test/ui/parser/issue-103451.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91385d5776a381b7fd24c0be41879f15fc834e43/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr?ref=91385d5776a381b7fd24c0be41879f15fc834e43", "patch": "@@ -0,0 +1,32 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-103451.rs:5:15\n+   |\n+LL | struct S {\n+   |          - unclosed delimiter\n+LL |     x: [u8; R\n+   |        -      ^\n+   |        |\n+   |        unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-103451.rs:5:15\n+   |\n+LL | struct S {\n+   |          - unclosed delimiter\n+LL |     x: [u8; R\n+   |        -      ^\n+   |        |\n+   |        unclosed delimiter\n+\n+error[E0423]: expected value, found struct `R`\n+  --> $DIR/issue-103451.rs:5:13\n+   |\n+LL | struct R { }\n+   | ------------ `R` defined here\n+LL | struct S {\n+LL |     x: [u8; R\n+   |             ^ help: use struct literal syntax instead: `R {}`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0423`."}]}