{"sha": "b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmU0MmZlMmFiNzVmMjZjZTBmMzRhODQ5YTYxMWM2YjhjZGRmMTM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-10-29T15:09:54Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-02T00:12:10Z"}, "message": "Clean up macro argument matches so they satisfy tidy checks", "tree": {"sha": "a75ccdf1bf94e0b334baa593a6bb1f0f702a4322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a75ccdf1bf94e0b334baa593a6bb1f0f702a4322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "html_url": "https://github.com/rust-lang/rust/commit/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e496de26d483447d309673a47c5e2013e46bf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e496de26d483447d309673a47c5e2013e46bf2b", "html_url": "https://github.com/rust-lang/rust/commit/4e496de26d483447d309673a47c5e2013e46bf2b"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "a893fb82b4892a9e75c83afe7fcc779f6c7591ca", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "patch": "@@ -23,7 +23,8 @@ newtype_index!(CrateNum nopub\n         const LOCAL_CRATE = 0,\n \n         /// Virtual crate for builtin macros\n-        // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get `CrateNum`s.\n+        // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n+        // `CrateNum`s.\n         const BUILTIN_MACROS_CRATE = u32::MAX,\n \n         /// A CrateNum value that indicates that something is wrong."}, {"sha": "f0b11dbc1f00be9cdf609ff2527af5a200f939c8", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46e42fe2ab75f26ce0f34a849a611c6b8cddf13/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=b46e42fe2ab75f26ce0f34a849a611c6b8cddf13", "patch": "@@ -86,7 +86,11 @@ macro_rules! newtype_index {\n     // ---- private rules ----\n \n     // Base case, user-defined constants (if any) have already been defined\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$debug_name:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         pub struct $type($($pub)* u32);\n \n@@ -110,8 +114,12 @@ macro_rules! newtype_index {\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists\n-    (@type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n-            derive [$($derives:ident),+] $($tokens:tt)*) => (\n+    (@type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$debug_name:expr]\n+                 derive [$($derives:ident),+]\n+                 $($tokens:tt)*) => (\n         newtype_index!(\n             @derives    [$($derives),+]\n             @type       [$type]\n@@ -122,7 +130,11 @@ macro_rules! newtype_index {\n     );\n \n     // The case where no derives are added\n-    (@type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr] $($tokens:tt)*) => (\n+    (@type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$debug_name:expr]\n+                 $($tokens:tt)*) => (\n         newtype_index!(\n             @derives    []\n             @type       [$type]\n@@ -133,8 +145,12 @@ macro_rules! newtype_index {\n     );\n \n     // Rewrite final without comma to one that includes comma\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n-            $name:ident = $constant:expr) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$debug_name:expr]\n+                 $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives    [$($derives),*]\n             @type       [$type]\n@@ -145,8 +161,13 @@ macro_rules! newtype_index {\n     );\n \n     // Rewrite final const without comma to one that includes comma\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$_max:expr] @debug_name[$debug_name:expr]\n-            $(#[doc = $doc:expr])* const $name:ident = $constant:expr) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$_max:expr]\n+     @debug_name [$debug_name:expr]\n+                 $(#[doc = $doc:expr])*\n+                 const $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives    [$($derives),*]\n             @type       [$type]\n@@ -157,8 +178,13 @@ macro_rules! newtype_index {\n     );\n \n     // Replace existing default for max\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$_max:expr] @debug_name[$debug_name:expr]\n-            MAX = $max:expr, $($tokens:tt)*) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$_max:expr]\n+     @debug_name [$debug_name:expr]\n+                 MAX = $max:expr,\n+                 $($tokens:tt)*) => (\n         newtype_index!(\n             @derives    [$($derives),*]\n             @type       [$type]\n@@ -169,8 +195,13 @@ macro_rules! newtype_index {\n     );\n \n     // Replace existing default for debug_name\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$_debug_name:expr]\n-            DEBUG_NAME = $debug_name:expr, $($tokens:tt)*) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$_debug_name:expr]\n+                 DEBUG_NAME = $debug_name:expr,\n+                 $($tokens:tt)*) => (\n         newtype_index!(\n             @derives    [$($derives),*]\n             @type       [$type]\n@@ -181,8 +212,14 @@ macro_rules! newtype_index {\n     );\n \n     // Assign a user-defined constant\n-    (@derives[$($derives:ident),*] @type[$type:ident] @pub[$($pub:tt)*] @max[$max:expr] @debug_name[$debug_name:expr]\n-            $(#[doc = $doc:expr])* const $name:ident = $constant:expr, $($tokens:tt)*) => (\n+    (@derives    [$($derives:ident),*]\n+     @type       [$type:ident]\n+     @pub        [$($pub:tt)*]\n+     @max        [$max:expr]\n+     @debug_name [$debug_name:expr]\n+                 $(#[doc = $doc:expr])*\n+                 const $name:ident = $constant:expr,\n+                 $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n         pub const $name: $type = $type($constant);\n         newtype_index!("}]}