{"sha": "5577ce635f5d2a7a773d08d403cb707001064742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzdjZTYzNWY1ZDJhN2E3NzNkMDhkNDAzY2I3MDcwMDEwNjQ3NDI=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-30T02:11:43Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:16:56Z"}, "message": "RIMOV, round 3\n\nfind ./ -type f -name \"*.rs\" -exec sed -i \"s/let \\(.*\\)\\[mut[ ]\\?/let\nmut \\1\\[/g\" {} \\;", "tree": {"sha": "4b7e957a876f5216273610999271a7f22c4aa1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7e957a876f5216273610999271a7f22c4aa1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5577ce635f5d2a7a773d08d403cb707001064742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5577ce635f5d2a7a773d08d403cb707001064742", "html_url": "https://github.com/rust-lang/rust/commit/5577ce635f5d2a7a773d08d403cb707001064742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5577ce635f5d2a7a773d08d403cb707001064742/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097c8aefea1feca5c3f5ff93025e9477cc6fbb0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/097c8aefea1feca5c3f5ff93025e9477cc6fbb0e", "html_url": "https://github.com/rust-lang/rust/commit/097c8aefea1feca5c3f5ff93025e9477cc6fbb0e"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "cef9f22908f5c9145f107a5bda5898f2e71e9f63", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -252,7 +252,7 @@ pub pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n     // Enough room to hold any number in any radix.\n     // Worst case: 64-bit number, binary-radix, with\n     // a leading negative sign = 65 bytes.\n-    let buf : [mut u8 * 65] = [mut 0u8, ..65];\n+    let mut buf : [mut u8 * 65] = [0u8, ..65];\n     let len = buf.len();\n \n     let mut i = len;"}, {"sha": "aa211544b37c190221197372b47b9bc5cc01ea9c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -3155,7 +3155,7 @@ mod tests {\n \n     #[test]\n     fn reverse_and_reversed() {\n-        let v: ~[mut int] = ~[mut 10, 20];\n+        let mut v: ~[mut int] = ~[10, 20];\n         assert (v[0] == 10);\n         assert (v[1] == 20);\n         reverse(v);\n@@ -3170,13 +3170,13 @@ mod tests {\n \n         let v4 = reversed::<int>(~[]);\n         assert (v4 == ~[]);\n-        let v3: ~[mut int] = ~[mut];\n+        let mut v3: ~[mut int] = ~[];\n         reverse::<int>(v3);\n     }\n \n     #[test]\n     fn reversed_mut() {\n-        let v2 = reversed::<int>(~[mut 10, 20]);\n+        let mut v2 = reversed::<int>(~[10, 20]);\n         assert (v2[0] == 20);\n         assert (v2[1] == 10);\n     }\n@@ -3302,7 +3302,7 @@ mod tests {\n     #[test]\n     fn cast_from_mut_no_copy() {\n         unsafe {\n-            let x = ~[mut 1, 2, 3];\n+            let mut x = ~[1, 2, 3];\n             let addr = raw::to_ptr(x);\n             let x_imm = cast_from_mut(x);\n             let addr_imm = raw::to_ptr(x_imm);\n@@ -3564,7 +3564,7 @@ mod tests {\n     #[ignore(windows)]\n     #[should_fail]\n     fn test_consume_mut_fail() {\n-        let v = ~[mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut v = ~[(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n         do consume_mut(v) |_i, _elt| {\n             if i == 2 {\n@@ -3592,7 +3592,7 @@ mod tests {\n     #[ignore(windows)]\n     #[should_fail]\n     fn test_map_fail() {\n-        let v = [mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {\n@@ -3918,7 +3918,7 @@ mod tests {\n     #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_mut_buf_fail() {\n-        let v = [mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_mut_buf(v) |_buf, _i| {\n             fail\n         }\n@@ -3929,7 +3929,7 @@ mod tests {\n     #[ignore(cfg(windows))]\n     fn test_copy_memory_oob() {\n         unsafe {\n-            let a = [mut 1, 2, 3, 4];\n+            let mut a = [1, 2, 3, 4];\n             let b = [1, 2, 3, 4, 5];\n             raw::copy_memory(a, b, 5);\n         }"}, {"sha": "80ba52e950f9df2d788fc9c1072fb02fb810a0d9", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -68,7 +68,7 @@ fn nop<T>(_x: T) { }\n \n fn test_cycles(r : rand::rng, k: uint, n: uint)\n {\n-    let v : ~[mut @pointy] = ~[mut];\n+    let mut v : ~[mut @pointy] = ~[];\n \n     // Create a graph with no edges\n     range(0u, vlen) {|_i|"}, {"sha": "b351c559eac0bea2587805ed516a77931122518c", "filename": "src/libfuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibfuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibfuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Frand_util.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -86,7 +86,7 @@ fn main()\n     log(error, choice(r, ~[10, 20, 30]));\n     log(error, if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" });\n \n-    let a = ~[mut 1, 2, 3];\n+    let mut a = ~[1, 2, 3];\n     shuffle(r, a);\n     log(error, a);\n "}, {"sha": "b7e2b8f6e71c00b282a12e85cb949b32473a20f9", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -1163,7 +1163,7 @@ pub mod node {\n         }\n \n         pub fn empty() -> T {\n-            let stack : ~[mut @Node] = ~[mut];\n+            let mut stack : ~[mut @Node] = ~[];\n             T { stack: stack, stackpos: -1 }\n         }\n "}, {"sha": "e376baad60a44d49d5d425bd0f16aa132bf79ee8", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -740,24 +740,24 @@ mod test_qsort3 {\n     #[test]\n     pub fn test() {\n         {\n-            let v1 = ~[mut 3, 7, 4, 5, 2, 9, 5, 8];\n-            let v2 = ~[mut 2, 3, 4, 5, 5, 7, 8, 9];\n+            let mut v1 = ~[3, 7, 4, 5, 2, 9, 5, 8];\n+            let mut v2 = ~[2, 3, 4, 5, 5, 7, 8, 9];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1 = ~[mut 1, 1, 1];\n-            let v2 = ~[mut 1, 1, 1];\n+            let mut v1 = ~[1, 1, 1];\n+            let mut v2 = ~[1, 1, 1];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1: ~[mut int] = ~[mut];\n-            let v2: ~[mut int] = ~[mut];\n+            let mut v1: ~[mut int] = ~[];\n+            let mut v2: ~[mut int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let v1 = ~[mut 9]; let v2 = ~[mut 9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n-            let v1 = ~[mut 9, 3, 3, 3, 9];\n-            let v2 = ~[mut 3, 3, 3, 9, 9];\n+            let mut v1 = ~[9, 3, 3, 3, 9];\n+            let mut v2 = ~[3, 3, 3, 9, 9];\n             check_sort(v1, v2);\n         }\n     }\n@@ -787,32 +787,32 @@ mod test_qsort {\n     #[test]\n     pub fn test() {\n         {\n-            let v1 = ~[mut 3, 7, 4, 5, 2, 9, 5, 8];\n-            let v2 = ~[mut 2, 3, 4, 5, 5, 7, 8, 9];\n+            let mut v1 = ~[3, 7, 4, 5, 2, 9, 5, 8];\n+            let mut v2 = ~[2, 3, 4, 5, 5, 7, 8, 9];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1 = ~[mut 1, 1, 1];\n-            let v2 = ~[mut 1, 1, 1];\n+            let mut v1 = ~[1, 1, 1];\n+            let mut v2 = ~[1, 1, 1];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1: ~[mut int] = ~[mut];\n-            let v2: ~[mut int] = ~[mut];\n+            let mut v1: ~[mut int] = ~[];\n+            let mut v2: ~[mut int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let v1 = ~[mut 9]; let v2 = ~[mut 9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n-            let v1 = ~[mut 9, 3, 3, 3, 9];\n-            let v2 = ~[mut 3, 3, 3, 9, 9];\n+            let mut v1 = ~[9, 3, 3, 3, 9];\n+            let mut v2 = ~[3, 3, 3, 9, 9];\n             check_sort(v1, v2);\n         }\n     }\n \n     // Regression test for #750\n     #[test]\n     pub fn test_simple() {\n-        let names = ~[mut 2, 1, 3];\n+        let mut names = ~[2, 1, 3];\n \n         let expected = ~[1, 2, 3];\n \n@@ -870,7 +870,7 @@ mod tests {\n     #[test]\n     pub fn test_merge_sort_mutable() {\n         pub pure fn le(a: &int, b: &int) -> bool { *a <= *b }\n-        let v1 = ~[mut 3, 2, 1];\n+        let mut v1 = ~[3, 2, 1];\n         let v2 = merge_sort(v1, le);\n         assert v2 == ~[1, 2, 3];\n     }\n@@ -937,24 +937,24 @@ mod test_tim_sort {\n     #[test]\n     fn test() {\n         {\n-            let v1 = ~[mut 3, 7, 4, 5, 2, 9, 5, 8];\n-            let v2 = ~[mut 2, 3, 4, 5, 5, 7, 8, 9];\n+            let mut v1 = ~[3, 7, 4, 5, 2, 9, 5, 8];\n+            let mut v2 = ~[2, 3, 4, 5, 5, 7, 8, 9];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1 = ~[mut 1, 1, 1];\n-            let v2 = ~[mut 1, 1, 1];\n+            let mut v1 = ~[1, 1, 1];\n+            let mut v2 = ~[1, 1, 1];\n             check_sort(v1, v2);\n         }\n         {\n-            let v1: ~[mut int] = ~[mut];\n-            let v2: ~[mut int] = ~[mut];\n+            let mut v1: ~[mut int] = ~[];\n+            let mut v2: ~[mut int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let v1 = ~[mut 9]; let v2 = ~[mut 9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[mut 9]; let v2 = ~[9]; check_sort(v1, v2); }\n         {\n-            let v1 = ~[mut 9, 3, 3, 3, 9];\n-            let v2 = ~[mut 3, 3, 3, 9, 9];\n+            let mut v1 = ~[9, 3, 3, 3, 9];\n+            let mut v2 = ~[3, 3, 3, 9, 9];\n             check_sort(v1, v2);\n         }\n     }"}, {"sha": "47aa84bb752116efda2c9557f0128f403b6190c1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -269,7 +269,7 @@ pub fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     }\n \n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let v: ~[mut @ast::meta_item] = vec::cast_to_mut(items);\n+    let mut v: ~[@ast::meta_item] = vec::cast_to_mut(items);\n     std::sort::quick_sort(v, lteq);\n     vec::cast_from_mut(move v)\n }"}, {"sha": "249dfa8bede3e5a3f644a3fe78e38a301ab115c4", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -148,9 +148,9 @@ pub fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n     // fall behind.\n     let n: uint = 3 * linewidth;\n     debug!(\"mk_printer %u\", linewidth);\n-    let token: ~[mut token] = vec::cast_to_mut(vec::from_elem(n, EOF));\n-    let size: ~[mut int] = vec::cast_to_mut(vec::from_elem(n, 0));\n-    let scan_stack: ~[mut uint] = vec::cast_to_mut(vec::from_elem(n, 0u));\n+    let mut token: ~[token] = vec::cast_to_mut(vec::from_elem(n, EOF));\n+    let mut size: ~[int] = vec::cast_to_mut(vec::from_elem(n, 0));\n+    let mut scan_stack: ~[uint] = vec::cast_to_mut(vec::from_elem(n, 0u));\n     printer_(@{out: out,\n                buf_len: n,\n                mut margin: linewidth as int,"}, {"sha": "9454faba17b355c409276923d4f26abf6f0d461e", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -120,7 +120,7 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n  * Nodes that are unreachable have a parent of -1.\n  */\n fn bfs(graph: graph, key: node_id) -> bfs_result {\n-    let marks : ~[mut node_id] \n+    let mut marks : ~[node_id] \n         = vec::cast_to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n     let Q = deque::create();"}, {"sha": "3239183bf1f9a16adb7ec09d3023f757f41e079b", "filename": "src/test/compile-fail/alt-vec-tail-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let a = [mut 1, 2, 3, 4];\n+    let mut a = [1, 2, 3, 4];\n     let _ = match a {\n         [1, 2, ..move tail] => tail,\n         _ => core::util::unreachable()"}, {"sha": "fbc9ad911e8682c36617e73e1cf17ea771fc5be1", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -17,13 +17,13 @@ fn takes_imm_elt(_v: &int, f: fn()) {\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_imm_elt(&v[0]) {\n     }\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_imm_elt(&v[0]) { //~ NOTE loan of mutable vec content granted here\n         v[1] = 4; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n@@ -34,7 +34,7 @@ fn takes_const_elt(_v: &const int, f: fn()) {\n }\n \n fn has_mut_vec_and_tries_to_change_it() {\n-    let v = ~[mut 1, 2, 3];\n+    let mut v = ~[1, 2, 3];\n     do takes_const_elt(&const v[0]) {\n         v[1] = 4;\n     }"}, {"sha": "aa2dc8cda3552f69bbcf2ad0053d41d13ee42930", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -11,7 +11,7 @@\n fn two_args<T>(x: T, y: T) { }\n \n fn main() {\n-    let x: ~[mut int] = ~[mut 3];\n+    let mut x: ~[mut int] = ~[3];\n     let y: ~[int] = ~[3];\n     let a: @mut int = @mut 3;\n     let b: @int = @3;"}, {"sha": "bb1ce5b82f5aa25ca4bce4c8f3fbc9875256f0a4", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -11,7 +11,7 @@\n // error-pattern: mismatched types\n \n fn main() {\n-    let v = ~[mut @mut ~mut ~[0]];\n+    let mut v = ~[@mut ~mut ~[0]];\n \n     fn f(&&v: ~[mut @mut ~mut ~[const int]]) {\n     }"}, {"sha": "404424ba44b8ed2c1d03311b9d98665acca4f2aa", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[int]] = ~[mut ~[0]];\n+    let mut v: ~[mut ~[int]] = ~[~[0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n         v[0] = ~[mut 3]"}, {"sha": "4ece2cb0c546a75b5bbb0eb963fd6400b7910ab2", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[mut int]] = ~[mut ~[mut 0]];\n+    let mut v: ~[mut ~[mut int]] = ~[mut ~[0]];\n \n     fn f(&&v: ~[mut ~[const int]]) {\n         v[0] = ~[3]"}, {"sha": "b95da9725ae9c18333925a3fa9dcdacec59b98e8", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let v: ~[mut ~[mut ~[int]]] = ~[mut ~[mut ~[0]]];\n+    let mut v: ~[mut ~[mut ~[int]]] = ~[mut ~[~[0]]];\n \n     fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n         v[0][1] = ~[mut 3]"}, {"sha": "37bc5697230c11f98b8aceaebf8345a62ecaa2f4", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -13,9 +13,9 @@ fn main() {\n     // Note: here we do not have any type annotations\n     // but we do express conflicting requirements:\n \n-    let v = ~[mut ~[0]];\n-    let w = ~[mut ~[mut 0]];\n-    let x = ~[mut ~[mut 0]];\n+    let mut v = ~[~[0]];\n+    let mut w = ~[mut ~[0]];\n+    let mut x = ~[mut ~[0]];\n \n     fn f(&&v: ~[mut ~[int]]) {\n         v[0] = ~[3]"}, {"sha": "bbd7ceb76369ffa8c4abdf911b8939e6f2889836", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let v: ~[mut int] = ~[mut]; }\n+fn main() { let mut v: ~[mut int] = ~[]; }"}, {"sha": "77d8d7c4e3d6ef43d18e6b443e13c5209a6b5ec1", "filename": "src/test/run-pass/explicit-self-objects-ext-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -16,7 +16,7 @@ pub trait ReaderUtil {\n impl<T: Reader> T : ReaderUtil {\n \n     fn read_bytes(&self, len: uint) {\n-        let count = self.read(&[mut 0], len);\n+        let mut count = self.read(&[0], len);\n     }\n \n }"}, {"sha": "77d8d7c4e3d6ef43d18e6b443e13c5209a6b5ec1", "filename": "src/test/run-pass/explicit-self-objects-ext-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -16,7 +16,7 @@ pub trait ReaderUtil {\n impl<T: Reader> T : ReaderUtil {\n \n     fn read_bytes(&self, len: uint) {\n-        let count = self.read(&[mut 0], len);\n+        let mut count = self.read(&[0], len);\n     }\n \n }"}, {"sha": "5c18fc549f30abfd3cf10d08f41abe9b9d34a36f", "filename": "src/test/run-pass/explicit-self-objects-ext-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -16,7 +16,7 @@ pub trait ReaderUtil {\n impl<T: Reader> T : ReaderUtil {\n \n     fn read_bytes(len: uint) {\n-        let count = self.read(&[mut 0], len);\n+        let mut count = self.read(&[0], len);\n     }\n \n }"}, {"sha": "28665ecedfb29f4819b67ff411c178d9f0460608", "filename": "src/test/run-pass/explicit-self-objects-ext-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -16,7 +16,7 @@ pub trait ReaderUtil {\n impl<T: Reader> T : ReaderUtil {\n \n     fn read_bytes(len: uint) {\n-        let count = self.read(&[mut 0], len);\n+        let mut count = self.read(&[0], len);\n     }\n \n }"}, {"sha": "a8f4597fd1464f726216e144721631250c97e7de", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -15,7 +15,7 @@\n fn two(it: fn(int)) { it(0); it(1); }\n \n fn main() {\n-    let a: ~[mut int] = ~[mut -1, -1, -1, -1];\n+    let mut a: ~[mut int] = ~[-1, -1, -1, -1];\n     let mut p: int = 0;\n     do two |i| {\n         do two |j| { a[p] = 10 * i + j; p += 1; }"}, {"sha": "636e847f538a47070f33d782027dbdd482b2fd22", "filename": "src/test/run-pass/impl-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-variance.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -21,6 +21,6 @@ fn main() {\n     assert v.foo() == 1u;\n     let v = ~[0];\n     assert v.foo() == 1u;\n-    let v = ~[mut 0];\n+    let mut v = ~[0];\n     assert v.foo() == 1u;\n }"}, {"sha": "532dee7e4da261de8f230c1a6387c169f9354adc", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -20,7 +20,7 @@ struct Smallintmap<T> {mut v: ~[mut option<T>]}\n struct V<T> { v: ~[mut option<T>] }\n \n fn mk<T>() -> @Smallintmap<T> {\n-    let v: ~[mut option<T>] = ~[mut];\n+    let mut v: ~[mut option<T>] = ~[];\n     return @Smallintmap {mut v: move v};\n }\n "}, {"sha": "e6b76c3ca591d7ea4d39f31f1a8dff2def8d20c5", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -21,6 +21,6 @@ fn len(v: ~[const int]) -> uint {\n fn main() {\n     let v0 = ~[1, 2, 3, 4, 5];\n     log(debug, len(v0));\n-    let v1 = ~[mut 1, 2, 3, 4, 5];\n+    let mut v1 = ~[1, 2, 3, 4, 5];\n     log(debug, len(v1));\n }"}, {"sha": "759e3c16e0f423407783a3bcd07fcbbdafaa67d5", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -13,6 +13,6 @@ struct Pair { a: int, b: int}\n \n fn main() {\n     // This just tests whether the vec leaks its members.\n-    let pvec: ~[mut @Pair] =\n+    let mut pvec: ~[@Pair] =\n         ~[mut @Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6}];\n }"}, {"sha": "30c7bb628ec2cb7cbbabdc38e1efdd86c89991c7", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     debug!(\"y==%d\", y);\n     assert y == 6;\n \n-    let x = ~[mut 1, 2, 3];\n+    let mut x = ~[1, 2, 3];\n     let y = x.sum();\n     debug!(\"y==%d\", y);\n     assert y == 6;"}, {"sha": "8cafe0d4ae5a210c4ee28b569b4edcd9ad6b3cc0", "filename": "src/test/run-pass/sendfn-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -13,7 +13,7 @@ fn main() { test05(); }\n fn mk_counter<A:Copy>() -> fn~(A) -> (A,uint) {\n     // The only reason that the counter is generic is so that it closes\n     // over both a type descriptor and some data.\n-    let v = ~[mut 0u];\n+    let mut v = ~[0u];\n     return fn~(a: A) -> (A,uint) {\n         let n = v[0];\n         v[0] = n + 1u;"}, {"sha": "7dc37cbc62eeff2c8811a196b8e19803759d28d6", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5577ce635f5d2a7a773d08d403cb707001064742/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=5577ce635f5d2a7a773d08d403cb707001064742", "patch": "@@ -11,7 +11,7 @@\n fn swap<T>(v: &[mut T], i: int, j: int) { v[i] <-> v[j]; }\n \n fn main() {\n-    let a: ~[mut int] = ~[mut 0, 1, 2, 3, 4, 5, 6];\n+    let mut a: ~[mut int] = ~[0, 1, 2, 3, 4, 5, 6];\n     swap(a, 2, 4);\n     assert (a[2] == 4);\n     assert (a[4] == 2);"}]}