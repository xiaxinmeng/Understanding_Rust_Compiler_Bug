{"sha": "8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "node_id": "C_kwDOAAsO6NoAKDhiODBiYzFiZjQ3MTkyNzBhOWI0YmY4ZjRjYzY4MmJiMThhNTc0Yzc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-19T19:26:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-19T19:26:01Z"}, "message": "Revert \"Improve code readability\"\n\nThis reverts commit eb93d1bedeab64c6f5d661df6a309a5b8a9273ca.", "tree": {"sha": "edcea190373c947f56360776e60d84baae9af0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edcea190373c947f56360776e60d84baae9af0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "html_url": "https://github.com/rust-lang/rust/commit/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "286a632e725826bb13f6710f188f4ed1af0d50cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/286a632e725826bb13f6710f188f4ed1af0d50cf", "html_url": "https://github.com/rust-lang/rust/commit/286a632e725826bb13f6710f188f4ed1af0d50cf"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "bc8badad38eb0578ea3a0b5f40310241b66eab0c", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "patch": "@@ -138,7 +138,7 @@ pub(super) fn write_shared(\n         Ok((ret, krates))\n     }\n \n-    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\ </code> format,\n+    /// Read a file and return all lines that match the <code>\"{crate}\":{data},\\</code> format,\n     /// and return a tuple `(Vec<DataString>, Vec<CrateNameString>)`.\n     ///\n     /// This forms the payload of files that look like this:"}, {"sha": "a8fc85a3ee1d8dcace919412733ec96f4c2c838f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8b80bc1bf4719270a9b4bf8f4cc682bb18a574c7", "patch": "@@ -187,16 +187,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    #[inline]\n-    fn add_to_current_mod(\n-        &mut self,\n-        item: &'tcx hir::Item<'_>,\n-        renamed: Option<Symbol>,\n-        parent_id: Option<hir::HirId>,\n-    ) {\n-        self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n-    }\n-\n     fn visit_item_inner(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n@@ -257,7 +247,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                     }\n \n-                    self.add_to_current_mod(item, renamed, parent_id);\n+                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n                 }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n@@ -277,7 +267,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 let nonexported = !self.cx.tcx.has_attr(def_id, sym::macro_export);\n \n                 if is_macro_2_0 || nonexported || self.inlining {\n-                    self.add_to_current_mod(item, renamed, None);\n+                    self.modules.last_mut().unwrap().items.push((item, renamed, None));\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -293,20 +283,20 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.add_to_current_mod(item, renamed, parent_id);\n+                self.modules.last_mut().unwrap().items.push((item, renamed, parent_id))\n             }\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if name != kw::Underscore {\n-                    self.add_to_current_mod(item, renamed, parent_id);\n+                    self.modules.last_mut().unwrap().items.push((item, renamed, parent_id));\n                 }\n             }\n             hir::ItemKind::Impl(impl_) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n                 if !self.inlining && impl_.of_trait.is_none() {\n-                    self.add_to_current_mod(item, None, None);\n+                    self.modules.last_mut().unwrap().items.push((item, None, None));\n                 }\n             }\n         }\n@@ -343,13 +333,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n         for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n-                let Some(local_def_id) = def_id.as_local() &&\n-                self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n-                inserted.insert(def_id)\n-            {\n-                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.push((item, None, None));\n+            if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n+                if let Some(local_def_id) = def_id.as_local() {\n+                    if self.cx.tcx.has_attr(def_id, sym::macro_export) {\n+                        if inserted.insert(def_id) {\n+                            let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                            top_level_module.items.push((item, None, None));\n+                        }\n+                    }\n+                }\n             }\n         }\n "}]}