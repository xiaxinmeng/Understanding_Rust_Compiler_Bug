{"sha": "abef7e1fd26e6828bbba457173a76d150b1378d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZWY3ZTFmZDI2ZTY4MjhiYmJhNDU3MTczYTc2ZDE1MGIxMzc4ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-05T10:50:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-05T10:50:11Z"}, "message": "Auto merge of #45019 - aidanhs:aphs-no-trans-worker-panic, r=alexcrichton\n\nDon't unwrap work item results as the panic trace is useless\n\nFixes #43402 now there's no multithreaded panic printouts\n\nAlso update a comment\n\n--------\n\nLikely regressed in #43506, where the code was changed to panic in worker threads on error.\n\nUnwrapping gives zero extra information since the stack trace is so short, so we may as well just surface that there was an error and exit the thread properly. Because there are then no multithreaded printouts, I think it should mean the output of the test for #26199 is deterministic and not interleaved (thanks to @philipc https://github.com/rust-lang/rust/issues/43402#issuecomment-333835271 for a hint).\n\nSadly the output is now:\n```\nthread '<unnamed>' panicked at 'aborting due to worker thread panic', src/librustc_trans/back/write.rs:1643:20\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: could not write output to : No such file or directory\n\nerror: aborting due to previous error\n```\nbut it's an improvement over the multi-panic situation before.\n\nr? @alexcrichton", "tree": {"sha": "1c6288dfe657b69bafd0b1d100f27763857d11fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c6288dfe657b69bafd0b1d100f27763857d11fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abef7e1fd26e6828bbba457173a76d150b1378d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abef7e1fd26e6828bbba457173a76d150b1378d8", "html_url": "https://github.com/rust-lang/rust/commit/abef7e1fd26e6828bbba457173a76d150b1378d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abef7e1fd26e6828bbba457173a76d150b1378d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0db04b62bde392fb9846d4a90e3973bab09147a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0db04b62bde392fb9846d4a90e3973bab09147a", "html_url": "https://github.com/rust-lang/rust/commit/a0db04b62bde392fb9846d4a90e3973bab09147a"}, {"sha": "4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "html_url": "https://github.com/rust-lang/rust/commit/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "1988b9f76e401046768e9a5ca110b996eb5aa53e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abef7e1fd26e6828bbba457173a76d150b1378d8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abef7e1fd26e6828bbba457173a76d150b1378d8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=abef7e1fd26e6828bbba457173a76d150b1378d8", "patch": "@@ -1636,9 +1636,9 @@ fn start_executing_work(tcx: TyCtxt,\n                     needs_lto.push(result);\n                 }\n                 Message::Done { result: Err(()), worker_id: _ } => {\n-                    shared_emitter.fatal(\"aborting due to worker thread panic\");\n+                    shared_emitter.fatal(\"aborting due to worker thread failure\");\n                     // Exit the coordinator thread\n-                    panic!(\"aborting due to worker thread panic\")\n+                    panic!(\"aborting due to worker thread failure\")\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1739,23 +1739,16 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n         // Execute the work itself, and if it finishes successfully then flag\n         // ourselves as a success as well.\n         //\n-        // Note that we ignore the result coming out of `execute_work_item`\n-        // which will tell us if the worker failed with a `FatalError`. If that\n-        // has happened, however, then a diagnostic was sent off to the main\n-        // thread, along with an `AbortIfErrors` message. In that case the main\n-        // thread is already exiting anyway most likely.\n-        //\n-        // In any case, there's no need for us to take further action here, so\n-        // we just ignore the result and then send off our message saying that\n-        // we're done, which if `execute_work_item` failed is unlikely to be\n-        // seen by the main thread, but hey we might as well try anyway.\n+        // Note that we ignore any `FatalError` coming out of `execute_work_item`,\n+        // as a diagnostic was already sent off to the main thread - just\n+        // surface that there was an error in this worker.\n         bomb.result = {\n             let _timing_guard = cgcx.time_graph.as_ref().map(|tg| {\n                 tg.start(time_graph::TimelineId(cgcx.worker),\n                          LLVM_WORK_PACKAGE_KIND,\n                          &work.name())\n             });\n-            Some(execute_work_item(&cgcx, work).unwrap())\n+            execute_work_item(&cgcx, work).ok()\n         };\n     });\n }"}]}