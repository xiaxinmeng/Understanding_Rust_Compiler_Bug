{"sha": "c9429b1cec47ae4d2be8c891a482142e9efd4b24", "node_id": "C_kwDOAAsO6NoAKGM5NDI5YjFjZWM0N2FlNGQyYmU4Yzg5MWE0ODIxNDJlOWVmZDRiMjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T00:46:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T01:37:56Z"}, "message": "Define index types within `thir_with_elements`.\n\nThe macro already generates other stuff, might as well generate these\nindex types as well.", "tree": {"sha": "84635981934f9b0406b17a46e837c00c150f83dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84635981934f9b0406b17a46e837c00c150f83dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9429b1cec47ae4d2be8c891a482142e9efd4b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9429b1cec47ae4d2be8c891a482142e9efd4b24", "html_url": "https://github.com/rust-lang/rust/commit/c9429b1cec47ae4d2be8c891a482142e9efd4b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9429b1cec47ae4d2be8c891a482142e9efd4b24/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4", "html_url": "https://github.com/rust-lang/rust/commit/a1bea1551b8312b6abfbbf7d49bafac2e6ce8ee4"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "9cb6763b663e580583b3d9294d9f5dffb6f54643", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c9429b1cec47ae4d2be8c891a482142e9efd4b24/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9429b1cec47ae4d2be8c891a482142e9efd4b24/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=c9429b1cec47ae4d2be8c891a482142e9efd4b24", "patch": "@@ -33,32 +33,17 @@ use std::ops::Index;\n \n pub mod visit;\n \n-newtype_index! {\n-    /// An index to an [`Arm`] stored in [`Thir::arms`]\n-    #[derive(HashStable)]\n-    pub struct ArmId {\n-        DEBUG_FORMAT = \"a{}\"\n-    }\n-}\n-\n-newtype_index! {\n-    /// An index to an [`Expr`] stored in [`Thir::exprs`]\n-    #[derive(HashStable)]\n-    pub struct ExprId {\n-        DEBUG_FORMAT = \"e{}\"\n-    }\n-}\n-\n-newtype_index! {\n-    #[derive(HashStable)]\n-    /// An index to a [`Stmt`] stored in [`Thir::stmts`]\n-    pub struct StmtId {\n-        DEBUG_FORMAT = \"s{}\"\n-    }\n-}\n-\n macro_rules! thir_with_elements {\n-    ($($name:ident: $id:ty => $value:ty,)*) => {\n+    ($($name:ident: $id:ty => $value:ty => $format:literal,)*) => {\n+        $(\n+            newtype_index! {\n+                #[derive(HashStable)]\n+                pub struct $id {\n+                    DEBUG_FORMAT = $format\n+                }\n+            }\n+        )*\n+\n         /// A container for a THIR body.\n         ///\n         /// This can be indexed directly by any THIR index (e.g. [`ExprId`]).\n@@ -91,9 +76,9 @@ macro_rules! thir_with_elements {\n }\n \n thir_with_elements! {\n-    arms: ArmId => Arm<'tcx>,\n-    exprs: ExprId => Expr<'tcx>,\n-    stmts: StmtId => Stmt<'tcx>,\n+    arms: ArmId => Arm<'tcx> => \"a{}\",\n+    exprs: ExprId => Expr<'tcx> => \"e{}\",\n+    stmts: StmtId => Stmt<'tcx> => \"s{}\",\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]"}]}