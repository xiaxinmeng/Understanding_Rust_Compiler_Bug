{"sha": "08d17c9ece01a9a6bd7915869dbd27f7bcef73fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDE3YzllY2UwMWE5YTZiZDc5MTU4NjlkYmQyN2Y3YmNlZjczZmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-20T13:29:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-20T13:29:50Z"}, "message": "Better rvalue handling", "tree": {"sha": "6f795c97ef082c7a80eef64c85d5ad1175e3f089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f795c97ef082c7a80eef64c85d5ad1175e3f089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc", "html_url": "https://github.com/rust-lang/rust/commit/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4adba2553bb747cc120307293377d49a8bb9a924", "url": "https://api.github.com/repos/rust-lang/rust/commits/4adba2553bb747cc120307293377d49a8bb9a924", "html_url": "https://github.com/rust-lang/rust/commit/4adba2553bb747cc120307293377d49a8bb9a924"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "1e0e0550e43712ec97aba39fa38a00058232f382", "filename": "src/base.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d17c9ece01a9a6bd7915869dbd27f7bcef73fc/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=08d17c9ece01a9a6bd7915869dbd27f7bcef73fc", "patch": "@@ -390,8 +390,42 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n         StatementKind::Assign(place, rval) => {\n             let ty = place.ty(&fx.mir.local_decls, fx.tcx).to_ty(fx.tcx);\n             let lval = trans_place(fx, place);\n-            let rval = trans_rval(fx, rval);\n-            do_memcpy(fx, lval, CValue::ByRef(rval), ty);\n+            match rval {\n+                Rvalue::Use(operand) => {\n+                    let val = trans_operand(fx, operand);\n+                    do_memcpy(fx, lval, val, ty);\n+                },\n+                Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n+                    let ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let lhs_ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let lhs = trans_operand(fx, lhs).load_value(fx, lhs_ty);\n+                    let rhs_ty = rhs.ty(&fx.mir.local_decls, fx.tcx);\n+                    let rhs = trans_operand(fx, rhs).load_value(fx, rhs_ty);\n+\n+                    let res = match ty.sty {\n+                        TypeVariants::TyUint(_) => {\n+                            match bin_op {\n+                                BinOp::Add => fx.bcx.ins().iadd(lhs, rhs),\n+                                BinOp::Sub => fx.bcx.ins().isub(lhs, rhs),\n+                                BinOp::Mul => fx.bcx.ins().imul(lhs, rhs),\n+                                BinOp::Div => fx.bcx.ins().udiv(lhs, rhs),\n+                                bin_op => unimplemented!(\"checked uint bin op {:?} {:?} {:?}\", bin_op, lhs, rhs),\n+                            }\n+                        }\n+                        _ => unimplemented!(),\n+                    };\n+                    do_memcpy(fx, lval, CValue::ByVal(res), ty);\n+                }\n+                Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n+                    let operand = trans_operand(fx, operand);\n+                    do_memcpy(fx, lval, operand, ty);\n+                }\n+                Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n+                    let operand = trans_operand(fx, operand);\n+                    do_memcpy(fx, lval, operand, ty);\n+                }\n+                rval => unimplemented!(\"rval {:?}\", rval),\n+            }\n         }\n         StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {}\n         _ => unimplemented!(\"stmt {:?}\", stmt),\n@@ -421,49 +455,6 @@ fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>)\n     }\n }\n \n-fn trans_rval<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, rval: &Rvalue<'tcx>) -> Value {\n-    match rval {\n-        Rvalue::Use(operand) => {\n-            let operand_ty = operand.ty(&fx.mir.local_decls, fx.tcx);\n-            trans_operand(fx, operand).force_stack(fx, operand_ty)\n-        },\n-        Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n-            match bin_op {\n-                BinOp::Mul => {\n-                    let ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n-                    let lhs_ty = lhs.ty(&fx.mir.local_decls, fx.tcx);\n-                    let lhs = trans_operand(fx, lhs).load_value(fx, lhs_ty);\n-                    let rhs_ty = rhs.ty(&fx.mir.local_decls, fx.tcx);\n-                    let rhs = trans_operand(fx, rhs).load_value(fx, rhs_ty);\n-                    let res = match ty.sty {\n-                        TypeVariants::TyUint(_) => {\n-                            fx.bcx.ins().imul(lhs, rhs)\n-                        }\n-                        _ => unimplemented!(),\n-                    };\n-                    let layout = fx.tcx.layout_of(ParamEnv::empty().and(rval.ty(&fx.mir.local_decls, fx.tcx))).unwrap();\n-                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                        kind: StackSlotKind::ExplicitSlot,\n-                        size: layout.size.bytes() as u32,\n-                        offset: None,\n-                    });\n-                    fx.bcx.ins().stack_store(res, stack_slot, 1);\n-                    fx.bcx.ins().stack_addr(types::I64, stack_slot, 1)\n-                }\n-                bin_op => unimplemented!(\"checked bin op {:?} {:?} {:?}\", bin_op, lhs, rhs),\n-            }\n-        }\n-        Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n-            let operand = trans_operand(fx, operand);\n-            operand.force_stack(fx, ty)\n-        }\n-        Rvalue::Cast(CastKind::UnsafeFnPointer, operand, ty) => {\n-            trans_operand(fx, operand).force_stack(fx, ty)\n-        }\n-        rval => unimplemented!(\"rval {:?}\", rval),\n-    }\n-}\n-\n fn trans_operand<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue {\n     match operand {\n         Operand::Move(place) |"}]}