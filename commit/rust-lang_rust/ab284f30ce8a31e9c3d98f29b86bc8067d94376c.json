{"sha": "ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjg0ZjMwY2U4YTMxZTljM2Q5OGYyOWI4NmJjODA2N2Q5NDM3NmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T10:34:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T10:34:36Z"}, "message": "Merge #3803\n\n3803: Cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3b39875c5988d6c417ebbef3062376ecc3598e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b39875c5988d6c417ebbef3062376ecc3598e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehG48CRBK7hj4Ov3rIwAAdHIIABLmKqRAJ2l4e7MjwS5ALcpt\n2tpIqk3aAfNGnciSJ3kJdFuWM24yoEbFPTdog1Iral6eLndrR321LYc4VEeCxwuf\nsulAyebMclQiG0EKZoKFqr3Xf2bmQYO9972oH4iosyYUraH67mhyAcoKVgqYIZah\nLrrw7NpEqamOH+da3b0fWTJ23ILjDh8nz792cgbvP2NGRqJ2R26LX22s7K1w9DCo\nfM8Hh+w1aqpzUdD8p2oqCpkaX6Y+X6byIrAawCcNI+nZmTxucywW9uCvfFBPVFnt\nTVsSXvBYsUMPnfhvGv6FePpwwIQJ247ejQdWHWcj3MvhXEKls/pyxSQuqrUhAsg=\n=KOji\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b39875c5988d6c417ebbef3062376ecc3598e03\nparent e3a1f1c0011d5df53d995068a27527492c195b78\nparent 65c89c3a200833099714e2943ead14184ae9c0df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585737276 +0000\ncommitter GitHub <noreply@github.com> 1585737276 +0000\n\nMerge #3803\n\n3803: Cleanup r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "html_url": "https://github.com/rust-lang/rust/commit/ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a1f1c0011d5df53d995068a27527492c195b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1f1c0011d5df53d995068a27527492c195b78", "html_url": "https://github.com/rust-lang/rust/commit/e3a1f1c0011d5df53d995068a27527492c195b78"}, {"sha": "65c89c3a200833099714e2943ead14184ae9c0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c89c3a200833099714e2943ead14184ae9c0df", "html_url": "https://github.com/rust-lang/rust/commit/65c89c3a200833099714e2943ead14184ae9c0df"}], "stats": {"total": 74, "additions": 35, "deletions": 39}, "files": [{"sha": "ee09d8de341c4032b7d882935366ef1c7978f56b", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "patch": "@@ -4,9 +4,9 @@\n mod conv;\n \n use std::{\n-    error, fmt,\n+    env, error, fmt,\n     io::{BufRead, BufReader},\n-    path::{Path, PathBuf},\n+    path::PathBuf,\n     process::{Command, Stdio},\n     time::Instant,\n };\n@@ -23,10 +23,10 @@ use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic};\n pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug)]\n-pub struct CheckConfig {\n-    pub args: Vec<String>,\n+pub struct FlycheckConfig {\n     pub command: String,\n     pub all_targets: bool,\n+    pub extra_args: Vec<String>,\n }\n \n /// Flycheck wraps the shared state and communication machinery used for\n@@ -42,12 +42,11 @@ pub struct Flycheck {\n }\n \n impl Flycheck {\n-    pub fn new(config: CheckConfig, workspace_root: PathBuf) -> Flycheck {\n+    pub fn new(config: FlycheckConfig, workspace_root: PathBuf) -> Flycheck {\n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            let mut check = FlycheckThread::new(config, workspace_root);\n-            check.run(&task_send, &cmd_recv);\n+            FlycheckThread::new(config, workspace_root).run(&task_send, &cmd_recv);\n         });\n         Flycheck { task_recv, cmd_send, handle }\n     }\n@@ -76,7 +75,7 @@ pub enum CheckCommand {\n }\n \n struct FlycheckThread {\n-    options: CheckConfig,\n+    config: FlycheckConfig,\n     workspace_root: PathBuf,\n     last_update_req: Option<Instant>,\n     // XXX: drop order is significant\n@@ -90,9 +89,9 @@ struct FlycheckThread {\n }\n \n impl FlycheckThread {\n-    fn new(options: CheckConfig, workspace_root: PathBuf) -> FlycheckThread {\n+    fn new(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckThread {\n         FlycheckThread {\n-            options,\n+            config,\n             workspace_root,\n             last_update_req: None,\n             message_recv: never(),\n@@ -216,27 +215,27 @@ impl FlycheckThread {\n         self.message_recv = never();\n         self.check_process = None;\n \n-        let mut args: Vec<String> = vec![\n-            self.options.command.clone(),\n-            \"--workspace\".to_string(),\n-            \"--message-format=json\".to_string(),\n-            \"--manifest-path\".to_string(),\n-            format!(\"{}/Cargo.toml\", self.workspace_root.display()),\n-        ];\n-        if self.options.all_targets {\n-            args.push(\"--all-targets\".to_string());\n-        }\n-        args.extend(self.options.args.iter().cloned());\n+        let cmd = {\n+            let mut cmd = Command::new(cargo_binary());\n+            cmd.arg(&self.config.command);\n+            cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n+            cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n+            if self.config.all_targets {\n+                cmd.arg(\"--all-targets\");\n+            }\n+            cmd.args(self.config.extra_args.iter());\n+            cmd.current_dir(&self.workspace_root);\n+            cmd\n+        };\n \n         let (message_send, message_recv) = unbounded();\n-        let workspace_root = self.workspace_root.to_owned();\n         self.message_recv = message_recv;\n         self.check_process = Some(jod_thread::spawn(move || {\n             // If we trigger an error here, we will do so in the loop instead,\n             // which will break out of the loop, and continue the shutdown\n             let _ = message_send.send(CheckEvent::Begin);\n \n-            let res = run_cargo(&args, Some(&workspace_root), &mut |message| {\n+            let res = run_cargo(cmd, &mut |message| {\n                 // Skip certain kinds of messages to only spend time on what's useful\n                 match &message {\n                     Message::CompilerArtifact(artifact) if artifact.fresh => return true,\n@@ -285,17 +284,11 @@ impl fmt::Display for CargoError {\n impl error::Error for CargoError {}\n \n fn run_cargo(\n-    args: &[String],\n-    current_dir: Option<&Path>,\n+    mut command: Command,\n     on_message: &mut dyn FnMut(cargo_metadata::Message) -> bool,\n ) -> Result<(), CargoError> {\n-    let mut command = Command::new(\"cargo\");\n-    if let Some(current_dir) = current_dir {\n-        command.current_dir(current_dir);\n-    }\n-\n+    dbg!(&command);\n     let mut child = command\n-        .args(args)\n         .stdout(Stdio::piped())\n         .stderr(Stdio::null())\n         .stdin(Stdio::null())\n@@ -346,9 +339,8 @@ fn run_cargo(\n             // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n             // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n             format!(\n-                \"the command produced no valid metadata (exit code: {:?}): cargo {}\",\n-                exit_code,\n-                args.join(\" \")\n+                \"the command produced no valid metadata (exit code: {:?}): {:?}\",\n+                exit_code, command\n             )\n         }\n         Err(err) => format!(\"io error: {:?}\", err),\n@@ -357,3 +349,7 @@ fn run_cargo(\n \n     Err(CargoError(err_msg))\n }\n+\n+fn cargo_binary() -> String {\n+    env::var(\"CARGO\").unwrap_or_else(|_| \"cargo\".to_string())\n+}"}, {"sha": "06122ed95e4bc71622c7b868f93d80a81d2ead87", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "patch": "@@ -21,7 +21,7 @@ use lsp_types::{\n     WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n };\n-use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckConfig, CheckTask};\n+use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckTask, FlycheckConfig};\n use ra_ide::{Canceled, FileId, InlayHintsConfig, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n@@ -102,10 +102,10 @@ fn get_config(\n             max_length: config.inlay_hints_max_length,\n         },\n         check: if config.cargo_watch_enable {\n-            Some(CheckConfig {\n-                args: config.cargo_watch_args.clone(),\n+            Some(FlycheckConfig {\n                 command: config.cargo_watch_command.clone(),\n                 all_targets: config.cargo_watch_all_targets,\n+                extra_args: config.cargo_watch_args.clone(),\n             })\n         } else {\n             None"}, {"sha": "2db058eb1207426d3975b1fa25944e8be22b4716", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab284f30ce8a31e9c3d98f29b86bc8067d94376c/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=ab284f30ce8a31e9c3d98f29b86bc8067d94376c", "patch": "@@ -11,7 +11,7 @@ use std::{\n use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n-use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckConfig, Flycheck};\n+use ra_flycheck::{url_from_path_with_drive_lowercasing, Flycheck, FlycheckConfig};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsConfig, LibraryData,\n     SourceRootId,\n@@ -58,7 +58,7 @@ pub struct Config {\n     pub line_folding_only: bool,\n     pub inlay_hints: InlayHintsConfig,\n     pub rustfmt_args: Vec<String>,\n-    pub check: Option<CheckConfig>,\n+    pub check: Option<FlycheckConfig>,\n     pub vscode_lldb: bool,\n     pub proc_macro_srv: Option<String>,\n }"}]}