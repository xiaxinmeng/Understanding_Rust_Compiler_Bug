{"sha": "3ddc0278d36179dc485a093b5bc2fc2347a746da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGMwMjc4ZDM2MTc5ZGM0ODVhMDkzYjViYzJmYzIzNDdhNzQ2ZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-12T14:23:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-12T15:21:57Z"}, "message": "validation: avoid some intermediate allocations", "tree": {"sha": "335c87ea4c5018877d2e009d14579008e15452ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335c87ea4c5018877d2e009d14579008e15452ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddc0278d36179dc485a093b5bc2fc2347a746da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc0278d36179dc485a093b5bc2fc2347a746da", "html_url": "https://github.com/rust-lang/rust/commit/3ddc0278d36179dc485a093b5bc2fc2347a746da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc0278d36179dc485a093b5bc2fc2347a746da/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f284f8b4be3a899bf2ecc03e2a1589f486b62a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f284f8b4be3a899bf2ecc03e2a1589f486b62a9f", "html_url": "https://github.com/rust-lang/rust/commit/f284f8b4be3a899bf2ecc03e2a1589f486b62a9f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "e4ac9bfec020c7e8c836e3ad7a2585aa5aeffecf", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ddc0278d36179dc485a093b5bc2fc2347a746da/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddc0278d36179dc485a093b5bc2fc2347a746da/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3ddc0278d36179dc485a093b5bc2fc2347a746da", "patch": "@@ -60,7 +60,7 @@ macro_rules! try_validation {\n             Ok(x) => x,\n             Err(_) => throw_validation_failure!($what, $where),\n         }\n-    }}\n+    }};\n }\n \n /// We want to show a nice path to the invalid field for diagnostics,\n@@ -428,7 +428,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                             err_unsup!(InvalidNullPointerUsage) =>\n                                 throw_validation_failure!(\"NULL reference\", self.path),\n                             err_unsup!(AlignmentCheckFailed { required, has }) =>\n-                                throw_validation_failure!(format!(\"unaligned reference \\\n+                                throw_validation_failure!(format_args!(\"unaligned reference \\\n                                     (required {} byte alignment but found {})\",\n                                     required.bytes(), has.bytes()), self.path),\n                             err_unsup!(ReadBytesAsPointer) =>\n@@ -519,7 +519,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         let value = try_validation!(value.not_undef(),\n             value,\n             self.path,\n-            format!(\n+            format_args!(\n                 \"something {}\",\n                 wrapping_range_format(&layout.valid_range, max_hi),\n             )\n@@ -532,7 +532,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         throw_validation_failure!(\n                             \"a potentially NULL pointer\",\n                             self.path,\n-                            format!(\n+                            format_args!(\n                                 \"something that cannot possibly fail to be {}\",\n                                 wrapping_range_format(&layout.valid_range, max_hi)\n                             )\n@@ -545,7 +545,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     throw_validation_failure!(\n                         \"a pointer\",\n                         self.path,\n-                        format!(\n+                        format_args!(\n                             \"something that cannot possibly fail to be {}\",\n                             wrapping_range_format(&layout.valid_range, max_hi)\n                         )\n@@ -562,7 +562,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             throw_validation_failure!(\n                 bits,\n                 self.path,\n-                format!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n+                format_args!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n             )\n         }\n     }"}]}