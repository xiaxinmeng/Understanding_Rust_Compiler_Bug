{"sha": "e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZGMzNDdjY2ZlOTJkOWQxZGQyM2YwYjRhMjU3YTFjYjM1MzI0NjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-01T00:10:06Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "libsyntax: Remove the `interner_get` function and all uses", "tree": {"sha": "c6540425182aabfc4fde8e45564c4f50c796c7e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6540425182aabfc4fde8e45564c4f50c796c7e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "html_url": "https://github.com/rust-lang/rust/commit/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1", "html_url": "https://github.com/rust-lang/rust/commit/a695b62118ffd1ed1df5e4898cb34d7d58b91bc1"}], "stats": {"total": 47, "additions": 13, "deletions": 34}, "files": [{"sha": "fd8e9dbfa67c06f910f6fd47b1637d2a65e246cd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "patch": "@@ -14,8 +14,8 @@ use codemap::{Span, Spanned, DUMMY_SP};\n use abi::AbiSet;\n use ast_util;\n use opt_vec::OptVec;\n-use parse::token::{InternedString, interner_get, special_idents};\n-use parse::token::{str_to_ident};\n+use parse::token::{InternedString, special_idents, str_to_ident};\n+use parse::token;\n \n use std::cell::RefCell;\n use std::hashmap::HashMap;\n@@ -126,7 +126,8 @@ pub type Mrk = u32;\n \n impl<S:Encoder> Encodable<S> for Ident {\n     fn encode(&self, s: &mut S) {\n-        s.emit_str(interner_get(self.name));\n+        let string = token::get_ident(self.name);\n+        s.emit_str(string.get());\n     }\n }\n "}, {"sha": "afedb62105ba7e80766d5a73f11369da4ec71cbf", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "patch": "@@ -25,7 +25,10 @@ use std::num;\n \n pub fn path_name_i(idents: &[Ident]) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n-    idents.map(|i| token::interner_get(i.name)).connect(\"::\")\n+    idents.map(|i| {\n+        let string = token::get_ident(i.name);\n+        string.get().to_str()\n+    }).connect(\"::\")\n }\n \n // totally scary function: ignores all but the last element, should have"}, {"sha": "86913711801140203a17a95e9cc727dfad8f9857", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "patch": "@@ -4178,7 +4178,8 @@ impl Parser {\n                 outer_attrs, \"path\") {\n             Some(d) => dir_path.join(d),\n             None => {\n-                let mod_name = token::interner_get(id.name).to_owned();\n+                let mod_string = token::get_ident(id.name);\n+                let mod_name = mod_string.get().to_owned();\n                 let default_path_str = mod_name + \".rs\";\n                 let secondary_path_str = mod_name + \"/mod.rs\";\n                 let default_path = dir_path.join(default_path_str.as_slice());"}, {"sha": "806c84c5553011a2991488495e1859f22232f981", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "patch": "@@ -651,11 +651,6 @@ pub fn gensym(str : &str) -> Name {\n     interner.gensym(str)\n }\n \n-// map an interned representation back to a string\n-pub fn interner_get(name : Name) -> @str {\n-    get_ident_interner().get(name)\n-}\n-\n // maps a string to an identifier with an empty syntax context\n pub fn str_to_ident(str : &str) -> ast::Ident {\n     ast::Ident::new(intern(str))\n@@ -679,28 +674,6 @@ pub fn fresh_name(src : &ast::Ident) -> Name {\n     gensym(format!(\"{}_{}\",ident_to_str(src),num))*/\n }\n \n-// it looks like there oughta be a str_ptr_eq fn, but no one bothered to implement it?\n-\n-// determine whether two @str values are pointer-equal\n-pub fn str_ptr_eq(a : @str, b : @str) -> bool {\n-    unsafe {\n-        let p : uint = cast::transmute(a);\n-        let q : uint = cast::transmute(b);\n-        let result = p == q;\n-        // got to transmute them back, to make sure the ref count is correct:\n-        let _junk1 : @str = cast::transmute(p);\n-        let _junk2 : @str = cast::transmute(q);\n-        result\n-    }\n-}\n-\n-// return true when two identifiers refer (through the intern table) to the same ptr_eq\n-// string. This is used to compare identifiers in places where hygienic comparison is\n-// not wanted (i.e. not lexical vars).\n-pub fn ident_spelling_eq(a : &ast::Ident, b : &ast::Ident) -> bool {\n-    str_ptr_eq(interner_get(a.name),interner_get(b.name))\n-}\n-\n // create a fresh mark.\n pub fn fresh_mark() -> Mrk {\n     gensym(\"mark\")"}, {"sha": "2e20560b9cac348bf6890541363a81b5139851b5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e5dc347ccfe92d9d1dd23f0b4a257a1cb3532462", "patch": "@@ -19,7 +19,7 @@ use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n use parse::classify::expr_is_simple_block;\n-use parse::token::{IdentInterner, interner_get};\n+use parse::token::IdentInterner;\n use parse::{comments, token};\n use parse;\n use print::pp::{break_offset, word, space, zerobreak, hardbreak};\n@@ -1544,7 +1544,8 @@ pub fn print_ident(s: &mut State, ident: ast::Ident) {\n }\n \n pub fn print_name(s: &mut State, name: ast::Name) {\n-    word(&mut s.s, interner_get(name));\n+    let string = token::get_ident(name);\n+    word(&mut s.s, string.get());\n }\n \n pub fn print_for_decl(s: &mut State, loc: &ast::Local, coll: &ast::Expr) {"}]}