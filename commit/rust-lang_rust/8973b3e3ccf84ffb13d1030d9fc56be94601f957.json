{"sha": "8973b3e3ccf84ffb13d1030d9fc56be94601f957", "node_id": "C_kwDOAAsO6NoAKDg5NzNiM2UzY2NmODRmZmIxM2QxMDMwZDlmYzU2YmU5NDYwMWY5NTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-24T21:26:14Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-24T21:37:00Z"}, "message": "Bubble up ErrorGuaranteed from region constraints in method item compare", "tree": {"sha": "535f12d23a89e9e21afbce2bc58be2a5a2fa6d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535f12d23a89e9e21afbce2bc58be2a5a2fa6d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8973b3e3ccf84ffb13d1030d9fc56be94601f957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8973b3e3ccf84ffb13d1030d9fc56be94601f957", "html_url": "https://github.com/rust-lang/rust/commit/8973b3e3ccf84ffb13d1030d9fc56be94601f957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8973b3e3ccf84ffb13d1030d9fc56be94601f957/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6161758b6dc5f656378eb5ae191808e441167daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6161758b6dc5f656378eb5ae191808e441167daa", "html_url": "https://github.com/rust-lang/rust/commit/6161758b6dc5f656378eb5ae191808e441167daa"}], "stats": {"total": 64, "additions": 24, "deletions": 40}, "files": [{"sha": "78b4ac42ac982cd53b65b59d3dd0c6fb7cab8475", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -468,7 +468,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Can have different predicates to their defining use\n         hir::OpaqueTyOrigin::TyAlias => {\n             let outlives_environment = OutlivesEnvironment::new(param_env);\n-            infcx.check_region_obligations_and_report_errors(\n+            let _ = infcx.check_region_obligations_and_report_errors(\n                 defining_use_anchor,\n                 &outlives_environment,\n             );"}, {"sha": "b80294c40bc3126fcaa3c87e0896707bc4df8b57", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -589,7 +589,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_m.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     let mut collected_tys = FxHashMap::default();\n     for (def_id, (ty, substs)) in collector.types {\n@@ -1617,9 +1617,9 @@ pub(crate) fn compare_impl_const_raw(\n         return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None));\n     }\n \n-    // FIXME return `ErrorReported` if region obligations error?\n     let outlives_environment = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment);\n+    infcx.check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment)?;\n+\n     Ok(())\n }\n \n@@ -1730,7 +1730,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     Ok(())\n }\n@@ -1944,7 +1944,7 @@ pub fn check_type_bounds<'tcx>(\n     infcx.check_region_obligations_and_report_errors(\n         impl_ty.def_id.expect_local(),\n         &outlives_environment,\n-    );\n+    )?;\n \n     let constraints = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n     for (key, value) in constraints {"}, {"sha": "4b8bb93f0c7d333ecf46ced7e3d473fbf319d43f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -115,7 +115,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     let outlives_environment =\n         OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n \n-    infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n+    let _ = infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n }\n \n fn check_well_formed(tcx: TyCtxt<'_>, def_id: hir::OwnerId) {"}, {"sha": "bfedf63da97a878b25202f9da6f204ee7e77c111", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -325,7 +325,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n                 // Finally, resolve all regions.\n                 let outlives_env = OutlivesEnvironment::new(param_env);\n-                infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+                let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n             }\n         }\n         _ => {\n@@ -565,7 +565,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n     // Finally, resolve all regions.\n     let outlives_env = OutlivesEnvironment::new(param_env);\n-    infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n+    let _ = infcx.check_region_obligations_and_report_errors(impl_did, &outlives_env);\n \n     CoerceUnsizedInfo { custom_kind: kind }\n }"}, {"sha": "a6b9e07263ca8c362c0e8e7017e5818e33015940", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -182,7 +182,7 @@ fn get_impl_substs(\n \n     let implied_bounds = infcx.implied_bounds_tys(param_env, impl1_hir_id, assumed_wf_types);\n     let outlives_env = OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n-    infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n+    let _ = infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}, {"sha": "b17a465eb38311c6dc3fada6037af41b5044db69", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -1693,7 +1693,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) -> Option<ErrorGuaranteed> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         let errors = self.resolve_regions(outlives_env);\n \n         if let None = self.tainted_by_errors() {\n@@ -1705,9 +1705,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             self.report_region_errors(generic_param_scope, &errors);\n         }\n \n-        (!errors.is_empty()).then(|| {\n-            self.tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, \"error should have been emitted\")\n-        })\n+        if errors.is_empty() {\n+            Ok(())\n+        } else {\n+            Err(self\n+                .tcx\n+                .sess\n+                .delay_span_bug(rustc_span::DUMMY_SP, \"error should have been emitted\"))\n+        }\n     }\n \n     // [Note-Type-error-reporting]"}, {"sha": "f71c39dc0d26a33e82fd144c4fa84fd4d60c3d7b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) -> Option<ErrorGuaranteed> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         self.process_registered_region_obligations(\n             outlives_env.region_bound_pairs(),\n             outlives_env.param_env,"}, {"sha": "e45bdcf92134045484115081675c18d934f2e911", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -15,7 +15,6 @@ impl<T> Foo for Fooy<T> {\n     //~^ ERROR impl has stricter requirements than trait\n     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n     //~^ ERROR impl has stricter requirements than trait\n-    //~| ERROR lifetime bound not satisfied\n     type C = String where Self: Copy;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied\n     fn d() where Self: Copy {}"}, {"sha": "3acd85c8ac6ba848d2e77a521b1d06c3336c351a", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8973b3e3ccf84ffb13d1030d9fc56be94601f957/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8973b3e3ccf84ffb13d1030d9fc56be94601f957/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=8973b3e3ccf84ffb13d1030d9fc56be94601f957", "patch": "@@ -16,28 +16,8 @@ LL |     type B<'a, 'b> where 'a: 'b;\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                                                ^^ impl has extra requirement `'b: 'a`\n \n-error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:16:22\n-   |\n-LL |     type B<'a, 'b> where 'a: 'b;\n-   |     -------------- definition of `B` from trait\n-...\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |                      ^^^^^^^^^^^^^^^             - help: try copying this clause from the trait: `, 'a: 'b`\n-   |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/impl_bounds.rs:16:12\n-   |\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |            ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/impl_bounds.rs:16:16\n-   |\n-LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |                ^^\n-\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:19:33\n+  --> $DIR/impl_bounds.rs:18:33\n    |\n LL |     type C = String where Self: Copy;\n    |                                 ^^^^ the trait `Copy` is not implemented for `T`\n@@ -62,7 +42,7 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:21:24\n+  --> $DIR/impl_bounds.rs:20:24\n    |\n LL |     fn d() where Self: Copy {}\n    |                        ^^^^ the trait `Copy` is not implemented for `T`\n@@ -86,7 +66,7 @@ help: consider restricting type parameter `T`\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       +++++++++++++++++++\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0276, E0277, E0478.\n+Some errors have detailed explanations: E0276, E0277.\n For more information about an error, try `rustc --explain E0276`."}]}