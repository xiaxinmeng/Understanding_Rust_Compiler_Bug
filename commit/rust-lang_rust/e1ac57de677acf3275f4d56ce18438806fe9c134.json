{"sha": "e1ac57de677acf3275f4d56ce18438806fe9c134", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYWM1N2RlNjc3YWNmMzI3NWY0ZDU2Y2UxODQzODgwNmZlOWMxMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T23:37:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T23:37:12Z"}, "message": "Auto merge of #26958 - alexcrichton:down-with-thread-dtors, r=brson\n\nTLS tests have been deadlocking on the OSX bots for quite some time now and this\r\ncommit is the result of the investigation into what's going on. It turns out\r\nthat a value in TLS which is being destroyed (e.g. the destructor is run) can be\r\nreset back to the initial state **while the destructor is running** if TLS is\r\nre-accessed.\r\n\r\nTo fix this we stop calling drop_in_place on OSX and instead move the data to a\r\ntemporary location on the stack.", "tree": {"sha": "f23d91b490cd389bdd9db255a62dbb6a61153b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23d91b490cd389bdd9db255a62dbb6a61153b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ac57de677acf3275f4d56ce18438806fe9c134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ac57de677acf3275f4d56ce18438806fe9c134", "html_url": "https://github.com/rust-lang/rust/commit/e1ac57de677acf3275f4d56ce18438806fe9c134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ac57de677acf3275f4d56ce18438806fe9c134/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d8767289351a6111c77a5dfa8ba35468f721f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d8767289351a6111c77a5dfa8ba35468f721f6", "html_url": "https://github.com/rust-lang/rust/commit/05d8767289351a6111c77a5dfa8ba35468f721f6"}, {"sha": "987dc84b521a9be98099b504aa91b7baa9d22409", "url": "https://api.github.com/repos/rust-lang/rust/commits/987dc84b521a9be98099b504aa91b7baa9d22409", "html_url": "https://github.com/rust-lang/rust/commit/987dc84b521a9be98099b504aa91b7baa9d22409"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "e2873601a7b6638e2463a932483e19cbaca0859d", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1ac57de677acf3275f4d56ce18438806fe9c134/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ac57de677acf3275f4d56ce18438806fe9c134/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=e1ac57de677acf3275f4d56ce18438806fe9c134", "patch": "@@ -275,6 +275,7 @@ mod imp {\n \n     use cell::{Cell, UnsafeCell};\n     use intrinsics;\n+    use ptr;\n \n     pub struct Key<T> {\n         inner: UnsafeCell<Option<T>>,\n@@ -327,7 +328,6 @@ mod imp {\n     #[cfg(target_os = \"linux\")]\n     unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n         use mem;\n-        use ptr;\n         use libc;\n         use sys_common::thread_local as os;\n \n@@ -394,7 +394,24 @@ mod imp {\n         // destructor as running for this thread so calls to `get` will return\n         // `None`.\n         (*ptr).dtor_running.set(true);\n-        intrinsics::drop_in_place((*ptr).inner.get());\n+\n+        // The OSX implementation of TLS apparently had an odd aspect to it\n+        // where the pointer we have may be overwritten while this destructor\n+        // is running. Specifically if a TLS destructor re-accesses TLS it may\n+        // trigger a re-initialization of all TLS variables, paving over at\n+        // least some destroyed ones with initial values.\n+        //\n+        // This means that if we drop a TLS value in place on OSX that we could\n+        // revert the value to its original state halfway through the\n+        // destructor, which would be bad!\n+        //\n+        // Hence, we use `ptr::read` on OSX (to move to a \"safe\" location)\n+        // instead of drop_in_place.\n+        if cfg!(target_os = \"macos\") {\n+            ptr::read((*ptr).inner.get());\n+        } else {\n+            intrinsics::drop_in_place((*ptr).inner.get());\n+        }\n     }\n }\n "}, {"sha": "ee835785cbe5d7aa0463631aee8ae7bb10db3d9d", "filename": "src/test/run-pass/down-with-thread-dtors.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e1ac57de677acf3275f4d56ce18438806fe9c134/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ac57de677acf3275f4d56ce18438806fe9c134/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdown-with-thread-dtors.rs?ref=e1ac57de677acf3275f4d56ce18438806fe9c134", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+thread_local!(static FOO: Foo = Foo);\n+thread_local!(static BAR: Bar = Bar(1));\n+thread_local!(static BAZ: Baz = Baz);\n+\n+struct Foo;\n+struct Bar(i32);\n+struct Baz;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        BAR.with(|_| {});\n+    }\n+}\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {\n+        assert_eq!(self.0, 1);\n+        self.0 = 2;\n+        BAZ.with(|_| {});\n+        assert_eq!(self.0, 2);\n+    }\n+}\n+\n+fn main() {\n+    std::thread::spawn(|| {\n+        FOO.with(|_| {});\n+    }).join().unwrap();\n+}"}]}