{"sha": "c0aedfef96b62302a2c2410d0214d94da5dff647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWVkZmVmOTZiNjIzMDJhMmMyNDEwZDAyMTRkOTRkYTVkZmY2NDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-09T15:42:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "[WIP] debuginfo for locals", "tree": {"sha": "3dbe918e9fe8ed1450a7ac3b5bc469a23a408ac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dbe918e9fe8ed1450a7ac3b5bc469a23a408ac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0aedfef96b62302a2c2410d0214d94da5dff647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0aedfef96b62302a2c2410d0214d94da5dff647", "html_url": "https://github.com/rust-lang/rust/commit/c0aedfef96b62302a2c2410d0214d94da5dff647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0aedfef96b62302a2c2410d0214d94da5dff647/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "306bf8ec1c13f22523e6aea74718357674bc30aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/306bf8ec1c13f22523e6aea74718357674bc30aa", "html_url": "https://github.com/rust-lang/rust/commit/306bf8ec1c13f22523e6aea74718357674bc30aa"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "91c2587331315e6e1abe4a4d14a4a6e2d3585478", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c0aedfef96b62302a2c2410d0214d94da5dff647", "patch": "@@ -21,6 +21,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n+    func.collect_debug_info();\n     let mut func_ctx = FunctionBuilderContext::new();\n     let mut bcx = FunctionBuilder::new(&mut func, &mut func_ctx);\n "}, {"sha": "0998236e5822905f06df5c279baa73591aadadb4", "filename": "src/debuginfo.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=c0aedfef96b62302a2c2410d0214d94da5dff647", "patch": "@@ -305,6 +305,48 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(end as u64));\n \n+        {\n+            let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n+\n+            for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n+                let live_ranges = RangeList(\n+                    Some(Range::BaseAddress {\n+                        address: Address::Symbol {\n+                            symbol: self.symbol,\n+                            addend: 0,\n+                        },\n+                    })\n+                    .into_iter()\n+                    .chain(\n+                        value_loc_ranges\n+                            .iter()\n+                            .map(|val_loc_range| Range::OffsetPair {\n+                                begin: u64::from(val_loc_range.start),\n+                                end: u64::from(val_loc_range.end),\n+                            }),\n+                    )\n+                    .collect(),\n+                );\n+                let live_ranges_id = self.debug_context.dwarf.unit.ranges.add(live_ranges);\n+\n+                let var_id = self\n+                    .debug_context\n+                    .dwarf\n+                    .unit\n+                    .add(self.entry_id, gimli::DW_TAG_variable);\n+                let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n+\n+                var_entry.set(\n+                    gimli::DW_AT_ranges,\n+                    AttributeValue::RangeListRef(live_ranges_id),\n+                );\n+                var_entry.set(\n+                    gimli::DW_AT_name,\n+                    AttributeValue::String(format!(\"{:?}\", value_label).into_bytes()),\n+                );\n+            }\n+        }\n+\n         self.debug_context\n             .unit_range_list\n             .0"}, {"sha": "8016a802dab30b791426dad36e42e0253fe9fc8b", "filename": "src/value_and_place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0aedfef96b62302a2c2410d0214d94da5dff647/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=c0aedfef96b62302a2c2410d0214d94da5dff647", "patch": "@@ -299,7 +299,11 @@ impl<'tcx> CPlace<'tcx> {\n     pub fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n         let layout = self.layout();\n         match self.inner {\n-            CPlaceInner::Var(var) => CValue::by_val(fx.bcx.use_var(mir_var(var)), layout),\n+            CPlaceInner::Var(var) => {\n+                let val = fx.bcx.use_var(mir_var(var));\n+                fx.bcx.set_val_label(val, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+                CValue::by_val(val, layout)\n+            }\n             CPlaceInner::Addr(addr, extra) => {\n                 assert!(extra.is_none(), \"unsized values are not yet supported\");\n                 CValue::by_ref(addr, layout)"}]}