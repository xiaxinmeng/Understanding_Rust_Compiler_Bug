{"sha": "01cf66bb3074f8de056905e09fb9839e15f4b816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxY2Y2NmJiMzA3NGY4ZGUwNTY5MDVlMDlmYjk4MzllMTVmNGI4MTY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T14:47:14Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:50Z"}, "message": "hir: remove NodeId from TraitRef", "tree": {"sha": "2ca10a7cf121c4dd09d6113e3ac9d406f1d631df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ca10a7cf121c4dd09d6113e3ac9d406f1d631df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01cf66bb3074f8de056905e09fb9839e15f4b816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01cf66bb3074f8de056905e09fb9839e15f4b816", "html_url": "https://github.com/rust-lang/rust/commit/01cf66bb3074f8de056905e09fb9839e15f4b816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01cf66bb3074f8de056905e09fb9839e15f4b816/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6a9c3f416cc73be8591f05c2b98862b7a500f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a9c3f416cc73be8591f05c2b98862b7a500f0", "html_url": "https://github.com/rust-lang/rust/commit/aa6a9c3f416cc73be8591f05c2b98862b7a500f0"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "738c7d770353be7de07c3d1722f64980ee06b297", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -2338,13 +2338,12 @@ impl<'a> LoweringContext<'a> {\n             let future_path =\n                 this.std_path(span, &[\"future\", \"Future\"], Some(future_params), false);\n \n-            let LoweredNodeId { node_id, hir_id } = this.next_id();\n+            let LoweredNodeId { node_id: _, hir_id } = this.next_id();\n             let mut bounds = vec![\n                 hir::GenericBound::Trait(\n                     hir::PolyTraitRef {\n                         trait_ref: hir::TraitRef {\n                             path: future_path,\n-                            ref_id: node_id,\n                             hir_ref_id: hir_id,\n                         },\n                         bound_generic_params: hir_vec![],\n@@ -2714,10 +2713,9 @@ impl<'a> LoweringContext<'a> {\n             hir::QPath::Resolved(None, path) => path.and_then(|path| path),\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(p.ref_id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(p.ref_id);\n         hir::TraitRef {\n             path,\n-            ref_id: node_id,\n             hir_ref_id: hir_id,\n         }\n     }\n@@ -5056,7 +5054,6 @@ impl<'a> LoweringContext<'a> {\n                             bound_generic_params: hir::HirVec::new(),\n                             trait_ref: hir::TraitRef {\n                                 path: path.and_then(|path| path),\n-                                ref_id: id.node_id,\n                                 hir_ref_id: id.hir_id,\n                             },\n                             span,"}, {"sha": "3a2a1f3f3dd04de114b2fa5f897e3dfce0bc2ebb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -2062,7 +2062,6 @@ pub enum UseKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitRef {\n     pub path: Path,\n-    pub ref_id: NodeId,\n     pub hir_ref_id: HirId,\n }\n "}, {"sha": "1bfb036495b57838c32b613e4e4353c7cbf2100b", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -385,8 +385,7 @@ impl_stable_hash_for!(enum hir::ImplicitSelfKind {\n });\n \n impl_stable_hash_for!(struct hir::TraitRef {\n-    // Don't hash the ref_id. It is tracked via the thing it is used to access\n-    ref_id -> _,\n+    // Don't hash the hir_ref_id. It is tracked via the thing it is used to access\n     hir_ref_id -> _,\n     path,\n });"}, {"sha": "5dbcf908020b0505a6b3c33014bd8220fb946719", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -718,7 +718,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n                 self.ast_type_binding_to_poly_projection_predicate(\n-                    trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n+                    trait_ref.hir_ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n             // okay to ignore Err because of ErrorReported (see above)\n             Some((predicate.ok()?, binding.span))\n         }));\n@@ -802,7 +802,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n     fn ast_type_binding_to_poly_projection_predicate(\n         &self,\n-        ref_id: ast::NodeId,\n+        hir_ref_id: hir::HirId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>,\n         speculative: bool,\n@@ -874,7 +874,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                           binding.item_name, binding.span)\n         }?;\n \n-        let hir_ref_id = self.tcx().hir().node_to_hir_id(ref_id);\n         let (assoc_ident, def_scope) =\n             tcx.adjust_ident(binding.item_name, candidate.def_id(), hir_ref_id);\n         let assoc_ty = tcx.associated_items(candidate.def_id()).find(|i| {"}, {"sha": "a918113b1fc0b44ac02c8ab8fe1dbbb85ea8536d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -386,8 +386,8 @@ pub fn hir_trait_to_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_trait:\n     // In case there are any projections etc, find the \"environment\"\n     // def-id that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n-    let env_node_id = tcx.hir().get_parent(hir_trait.ref_id);\n-    let env_def_id = tcx.hir().local_def_id(env_node_id);\n+    let env_hir_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n+    let env_def_id = tcx.hir().local_def_id_from_hir_id(env_hir_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n     let mut projections = Vec::new();\n     let (principal, _) = astconv::AstConv::instantiate_poly_trait_ref_inner("}, {"sha": "d07a4579ad5c3b20b73402846a7578e084a60133", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -115,7 +115,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         if result.is_auto() {\n             let trait_ = hir::TraitRef {\n                 path: get_path_for_type(self.cx.tcx, trait_def_id, hir::def::Def::Trait),\n-                ref_id: ast::DUMMY_NODE_ID,\n                 hir_ref_id: hir::DUMMY_HIR_ID,\n             };\n "}, {"sha": "5a13490eeccf23b8e4a52348d6df065393ee5645", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cf66bb3074f8de056905e09fb9839e15f4b816/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=01cf66bb3074f8de056905e09fb9839e15f4b816", "patch": "@@ -123,7 +123,6 @@ impl<'a, 'tcx, 'rcx> BlanketImplFinder <'a, 'tcx, 'rcx> {\n                             path: get_path_for_type(infcx.tcx,\n                                                     trait_def_id,\n                                                     hir::def::Def::Trait),\n-                            ref_id: ast::DUMMY_NODE_ID,\n                             hir_ref_id: hir::DUMMY_HIR_ID,\n                         };\n                         let provided_trait_methods ="}]}