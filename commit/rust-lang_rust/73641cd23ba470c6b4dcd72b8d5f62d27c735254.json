{"sha": "73641cd23ba470c6b4dcd72b8d5f62d27c735254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNjQxY2QyM2JhNDcwYzZiNGRjZDcyYjhkNWY2MmQyN2M3MzUyNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T12:31:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T12:31:11Z"}, "message": "Auto merge of #88161 - michaelwoerister:fix-whole-archive-no-bundle, r=petrochenkov\n\nFix handling of +whole-archive native link modifier.\n\nThis PR fixes a bug in `add_upstream_native_libraries` that led to the `+whole-archive` modifier being ignored when linking in native libs.\n\n~~Note that the PR does not address the situation when `+whole-archive` is combined with `+bundle`.~~\n`@wesleywiser's` commit adds validation code that turns combining `+whole-archive` with `+bundle` into an error.\n\nFixes https://github.com/rust-lang/rust/issues/88085.\n\nr? `@petrochenkov`\ncc `@wesleywiser` `@gcoakes`", "tree": {"sha": "8c9e072ae0c9aa7bac43a01e978bb0f5fb93af4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c9e072ae0c9aa7bac43a01e978bb0f5fb93af4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73641cd23ba470c6b4dcd72b8d5f62d27c735254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73641cd23ba470c6b4dcd72b8d5f62d27c735254", "html_url": "https://github.com/rust-lang/rust/commit/73641cd23ba470c6b4dcd72b8d5f62d27c735254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73641cd23ba470c6b4dcd72b8d5f62d27c735254/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385f8e2078b00282a7a7ffcd58aad17b405f57bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/385f8e2078b00282a7a7ffcd58aad17b405f57bf", "html_url": "https://github.com/rust-lang/rust/commit/385f8e2078b00282a7a7ffcd58aad17b405f57bf"}, {"sha": "70c7317d71c9b6627b4b39f3381449b1397135f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c7317d71c9b6627b4b39f3381449b1397135f7", "html_url": "https://github.com/rust-lang/rust/commit/70c7317d71c9b6627b4b39f3381449b1397135f7"}], "stats": {"total": 178, "additions": 168, "deletions": 10}, "files": [{"sha": "4fb51ecc1d347db0789d6e6de2fd03f73f6b6e8e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -36,6 +36,7 @@ use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use std::ffi::OsString;\n+use std::lazy::OnceCell;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -257,6 +258,19 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     // metadata of the rlib we're generating somehow.\n     for lib in codegen_results.crate_info.used_libraries.iter() {\n         match lib.kind {\n+            NativeLibKind::Static { bundle: None | Some(true), whole_archive: Some(true) }\n+                if flavor == RlibFlavor::Normal =>\n+            {\n+                // Don't allow mixing +bundle with +whole_archive since an rlib may contain\n+                // multiple native libs, some of which are +whole-archive and some of which are\n+                // -whole-archive and it isn't clear how we can currently handle such a\n+                // situation correctly.\n+                // See https://github.com/rust-lang/rust/issues/88085#issuecomment-901050897\n+                sess.err(\n+                    \"the linking modifiers `+bundle` and `+whole-archive` are not compatible \\\n+                        with each other when generating rlibs\",\n+                );\n+            }\n             NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n             NativeLibKind::Static { bundle: Some(false), .. }\n             | NativeLibKind::Dylib { .. }\n@@ -1255,6 +1269,7 @@ fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n     sess.target_filesearch(PathKind::Native).search_path_dirs()\n }\n \n+#[derive(PartialEq)]\n enum RlibFlavor {\n     Normal,\n     StaticlibBase,\n@@ -2034,7 +2049,7 @@ fn add_local_native_libraries(\n     let relevant_libs =\n         codegen_results.crate_info.used_libraries.iter().filter(|l| relevant_lib(sess, l));\n \n-    let search_path = archive_search_paths(sess);\n+    let search_path = OnceCell::new();\n     let mut last = (NativeLibKind::Unspecified, None);\n     for lib in relevant_libs {\n         let name = match lib.name {\n@@ -2056,7 +2071,11 @@ fn add_local_native_libraries(\n             }\n             NativeLibKind::Static { bundle: None | Some(true), .. }\n             | NativeLibKind::Static { whole_archive: Some(true), .. } => {\n-                cmd.link_whole_staticlib(name, verbatim, &search_path);\n+                cmd.link_whole_staticlib(\n+                    name,\n+                    verbatim,\n+                    &search_path.get_or_init(|| archive_search_paths(sess)),\n+                );\n             }\n             NativeLibKind::Static { .. } => cmd.link_staticlib(name, verbatim),\n             NativeLibKind::RawDylib => {\n@@ -2149,6 +2168,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     let mut compiler_builtins = None;\n+    let search_path = OnceCell::new();\n \n     for &cnum in deps.iter() {\n         if group_start == Some(cnum) {\n@@ -2182,16 +2202,35 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n                 if sess.opts.debugging_opts.link_native_libraries {\n-                    // Skip if this library is the same as the last.\n                     let mut last = None;\n                     for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n-                        if lib.name.is_some()\n-                            && relevant_lib(sess, lib)\n-                            && matches!(lib.kind, NativeLibKind::Static { bundle: Some(false), .. })\n-                            && last != lib.name\n-                        {\n-                            cmd.link_staticlib(lib.name.unwrap(), lib.verbatim.unwrap_or(false));\n-                            last = lib.name;\n+                        if !relevant_lib(sess, lib) {\n+                            // Skip libraries if they are disabled by `#[link(cfg=...)]`\n+                            continue;\n+                        }\n+\n+                        // Skip if this library is the same as the last.\n+                        if last == lib.name {\n+                            continue;\n+                        }\n+\n+                        if let Some(static_lib_name) = lib.name {\n+                            if let NativeLibKind::Static { bundle: Some(false), whole_archive } =\n+                                lib.kind\n+                            {\n+                                let verbatim = lib.verbatim.unwrap_or(false);\n+                                if whole_archive == Some(true) {\n+                                    cmd.link_whole_staticlib(\n+                                        static_lib_name,\n+                                        verbatim,\n+                                        search_path.get_or_init(|| archive_search_paths(sess)),\n+                                    );\n+                                } else {\n+                                    cmd.link_staticlib(static_lib_name, verbatim);\n+                                }\n+\n+                                last = lib.name;\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "634286770d1f92ccb45a27cfc815d02dcff298e2", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -3,6 +3,7 @@\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n+#![feature(once_cell)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]"}, {"sha": "799b5f6f5fc6f9a06ae84d1b575e5f44939587ee", "filename": "src/test/run-make/native-link-modifier-whole-archive/Makefile", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2FMakefile?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,39 @@\n+# ignore-cross-compile -- compiling C++ code does not work well when cross-compiling\n+\n+# This test case makes sure that native libraries are linked with --whole-archive semantics\n+# when the `-bundle,+whole-archive` modifiers are applied to them.\n+#\n+# The test works by checking that the resulting executables produce the expected output,\n+# part of which is emitted by otherwise unreferenced C code. If +whole-archive didn't work\n+# that code would never make it into the final executable and we'd thus be missing some\n+# of the output.\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all: $(TMPDIR)/$(call BIN,directly_linked) $(TMPDIR)/$(call BIN,indirectly_linked) $(TMPDIR)/$(call BIN,indirectly_linked_via_attr)\n+\t$(call RUN,directly_linked) | $(CGREP) 'static-initializer.directly_linked.'\n+\t$(call RUN,indirectly_linked) | $(CGREP) 'static-initializer.indirectly_linked.'\n+\t$(call RUN,indirectly_linked_via_attr) | $(CGREP) 'static-initializer.native_lib_in_src.'\n+\n+# Native lib linked directly into executable\n+$(TMPDIR)/$(call BIN,directly_linked): $(call NATIVE_STATICLIB,c_static_lib_with_constructor)\n+\t$(RUSTC) directly_linked.rs -Z unstable-options -l static:+whole-archive=c_static_lib_with_constructor\n+\n+# Native lib linked into RLIB via `-l static:-bundle,+whole-archive`, RLIB linked into executable\n+$(TMPDIR)/$(call BIN,indirectly_linked): $(TMPDIR)/librlib_with_cmdline_native_lib.rlib\n+\t$(RUSTC) indirectly_linked.rs\n+\n+# Native lib linked into RLIB via #[link] attribute, RLIB linked into executable\n+$(TMPDIR)/$(call BIN,indirectly_linked_via_attr): $(TMPDIR)/libnative_lib_in_src.rlib\n+\t$(RUSTC) indirectly_linked_via_attr.rs\n+\n+# Native lib linked into rlib with via commandline\n+$(TMPDIR)/librlib_with_cmdline_native_lib.rlib: $(call NATIVE_STATICLIB,c_static_lib_with_constructor)\n+\t$(RUSTC) rlib_with_cmdline_native_lib.rs -Z unstable-options --crate-type=rlib -l static:-bundle,+whole-archive=c_static_lib_with_constructor\n+\n+# Native lib linked into rlib via `#[link()]` attribute on extern block.\n+$(TMPDIR)/libnative_lib_in_src.rlib: $(call NATIVE_STATICLIB,c_static_lib_with_constructor)\n+\t$(RUSTC) native_lib_in_src.rs --crate-type=rlib\n+\n+$(TMPDIR)/libc_static_lib_with_constructor.o: c_static_lib_with_constructor.cpp\n+\t$(call COMPILE_OBJ_CXX,$@,$<)"}, {"sha": "c687eb0f092f956019a9356e52480f832b7170ca", "filename": "src/test/run-make/native-link-modifier-whole-archive/c_static_lib_with_constructor.cpp", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fc_static_lib_with_constructor.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fc_static_lib_with_constructor.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fc_static_lib_with_constructor.cpp?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,11 @@\n+#include <cstdio>\n+\n+// Since this is a global variable, its constructor will be called before\n+// main() is executed. But only if the object file containing it actually\n+// gets linked into the executable.\n+struct Foo {\n+    Foo() {\n+        printf(\"static-initializer.\");\n+        fflush(stdout);\n+    }\n+} FOO;"}, {"sha": "17518e8b2f9634abfc8f4fd35844c9175a6a7d30", "filename": "src/test/run-make/native-link-modifier-whole-archive/directly_linked.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fdirectly_linked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fdirectly_linked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fdirectly_linked.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,6 @@\n+use std::io::Write;\n+\n+fn main() {\n+    print!(\"directly_linked.\");\n+    std::io::stdout().flush().unwrap();\n+}"}, {"sha": "c8b83fcfe037da50c73c1c9016bc7a3f522e0f35", "filename": "src/test/run-make/native-link-modifier-whole-archive/indirectly_linked.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,5 @@\n+extern crate rlib_with_cmdline_native_lib;\n+\n+fn main() {\n+    rlib_with_cmdline_native_lib::hello();\n+}"}, {"sha": "b9e347609b2c00fc4472df53084cc7a117672f8c", "filename": "src/test/run-make/native-link-modifier-whole-archive/indirectly_linked_via_attr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked_via_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked_via_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Findirectly_linked_via_attr.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,5 @@\n+extern crate native_lib_in_src;\n+\n+fn main() {\n+    native_lib_in_src::hello();\n+}"}, {"sha": "373d89b7936e5348911c7f138d8c511a379c8271", "filename": "src/test/run-make/native-link-modifier-whole-archive/native_lib_in_src.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Fnative_lib_in_src.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,15 @@\n+#![feature(native_link_modifiers_bundle)]\n+#![feature(native_link_modifiers_whole_archive)]\n+#![feature(native_link_modifiers)]\n+\n+use std::io::Write;\n+\n+#[link(name = \"c_static_lib_with_constructor\",\n+       kind = \"static\",\n+       modifiers = \"-bundle,+whole-archive\")]\n+extern {}\n+\n+pub fn hello() {\n+    print!(\"native_lib_in_src.\");\n+    std::io::stdout().flush().unwrap();\n+}"}, {"sha": "ef2b702dd82097df3b6d3234b8b9621ddd94a856", "filename": "src/test/run-make/native-link-modifier-whole-archive/rlib_with_cmdline_native_lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Frlib_with_cmdline_native_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Frlib_with_cmdline_native_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fnative-link-modifier-whole-archive%2Frlib_with_cmdline_native_lib.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,6 @@\n+use std::io::Write;\n+\n+pub fn hello() {\n+    print!(\"indirectly_linked.\");\n+    std::io::stdout().flush().unwrap();\n+}"}, {"sha": "c3714a384518053bff409884a14b15380aa1c098", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zunstable-options --crate-type rlib\n+// build-fail\n+// error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+\n+#![feature(native_link_modifiers)]\n+#![feature(native_link_modifiers_bundle)]\n+#![feature(native_link_modifiers_whole_archive)]\n+\n+#[link(name = \"mylib\", kind = \"static\", modifiers = \"+bundle,+whole-archive\")]\n+extern \"C\" { }\n+\n+fn main() { }"}, {"sha": "246efb8d627cb5430ebd6a415b618e9625d673ba", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,6 @@\n+error: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+\n+error: could not find native static library `mylib`, perhaps an -L flag is missing?\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1d0768d99cffd9284c08ef03fd1b7215c4617a29", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,7 @@\n+// Mixing +bundle and +whole-archive is not allowed\n+\n+// compile-flags: -l static:+bundle,+whole-archive=mylib -Zunstable-options --crate-type rlib\n+// build-fail\n+// error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+\n+fn main() { }"}, {"sha": "246efb8d627cb5430ebd6a415b618e9625d673ba", "filename": "src/test/ui/native-library-link-flags/mix-bundle-and-whole-archive.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73641cd23ba470c6b4dcd72b8d5f62d27c735254/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr?ref=73641cd23ba470c6b4dcd72b8d5f62d27c735254", "patch": "@@ -0,0 +1,6 @@\n+error: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+\n+error: could not find native static library `mylib`, perhaps an -L flag is missing?\n+\n+error: aborting due to 2 previous errors\n+"}]}