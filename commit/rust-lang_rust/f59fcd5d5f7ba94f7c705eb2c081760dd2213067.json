{"sha": "f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OWZjZDVkNWY3YmE5NGY3YzcwNWViMmMwODE3NjBkZDIyMTMwNjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-19T21:05:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T22:20:50Z"}, "message": "core::rt: Store Task as a ~ pointer", "tree": {"sha": "cbbeaf2fa922c43feea9b84d328d1f71b493fba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbeaf2fa922c43feea9b84d328d1f71b493fba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "html_url": "https://github.com/rust-lang/rust/commit/f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c6f32ece85a7df86ee041771a54c097dae6a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c6f32ece85a7df86ee041771a54c097dae6a13", "html_url": "https://github.com/rust-lang/rust/commit/43c6f32ece85a7df86ee041771a54c097dae6a13"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3abbb1f79e59600ee21c182e02d1c9a2f2558d3c", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "patch": "@@ -350,16 +350,16 @@ pub struct Coroutine {\n     /// the task is dead\n     priv saved_context: Context,\n     /// The heap, GC, unwinding, local storage, logging\n-    task: Task\n+    task: ~Task\n }\n \n pub impl Coroutine {\n     fn new(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n-        Coroutine::with_task(stack_pool, Task::new(), start)\n+        Coroutine::with_task(stack_pool, ~Task::new(), start)\n     }\n \n     fn with_task(stack_pool: &mut StackPool,\n-                  task: Task,\n+                  task: ~Task,\n                   start: ~fn()) -> Coroutine {\n         let start = Coroutine::build_start_wrapper(start);\n         let mut stack = stack_pool.take_segment(MIN_STACK_SIZE);"}, {"sha": "65b7c885b5735fcd8ddaee62e6ceafe2695a065c", "filename": "src/libcore/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftask.rs?ref=f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "patch": "@@ -155,7 +155,7 @@ pub fn borrow_local_task(f: &fn(&mut Task)) {\n     do local_sched::borrow |sched| {\n         match sched.current_task {\n             Some(~ref mut task) => {\n-                f(&mut task.task)\n+                f(&mut *task.task)\n             }\n             None => {\n                 fail!(\"no local services for schedulers yet\")\n@@ -167,7 +167,7 @@ pub fn borrow_local_task(f: &fn(&mut Task)) {\n pub unsafe fn unsafe_borrow_local_task() -> *mut Task {\n     match (*local_sched::unsafe_borrow()).current_task {\n         Some(~ref mut task) => {\n-            let s: *mut Task = &mut task.task;\n+            let s: *mut Task = &mut *task.task;\n             return s;\n         }\n         None => {"}, {"sha": "66993041752cfbd2cc265dea2a8bc0db7407dbd3", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59fcd5d5f7ba94f7c705eb2c081760dd2213067/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=f59fcd5d5f7ba94f7c705eb2c081760dd2213067", "patch": "@@ -29,7 +29,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                         Task::without_unwinding(),\n+                                         ~Task::without_unwinding(),\n                                          f.take());\n         sched.enqueue_task(task);\n         sched.run();\n@@ -42,7 +42,7 @@ pub fn spawntask(f: ~fn()) {\n \n     let mut sched = local_sched::take();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     Task::without_unwinding(),\n+                                     ~Task::without_unwinding(),\n                                      f);\n     do sched.switch_running_tasks_and_then(task) |task| {\n         let task = Cell(task);\n@@ -57,7 +57,7 @@ pub fn spawntask_immediately(f: ~fn()) {\n \n     let mut sched = local_sched::take();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     Task::without_unwinding(),\n+                                     ~Task::without_unwinding(),\n                                      f);\n     do sched.switch_running_tasks_and_then(task) |task| {\n         let task = Cell(task);\n@@ -73,7 +73,7 @@ pub fn spawntask_later(f: ~fn()) {\n \n     let mut sched = local_sched::take();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     Task::without_unwinding(),\n+                                     ~Task::without_unwinding(),\n                                      f);\n \n     sched.enqueue_task(task);\n@@ -90,7 +90,7 @@ pub fn spawntask_random(f: ~fn()) {\n \n     let mut sched = local_sched::take();\n     let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                     Task::without_unwinding(),\n+                                     ~Task::without_unwinding(),\n                                      f);\n \n     if run_now {\n@@ -156,7 +156,7 @@ pub fn spawntask_thread(f: ~fn()) -> Thread {\n     let thread = do Thread::start {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,\n-                                         Task::without_unwinding(),\n+                                         ~Task::without_unwinding(),\n                                          f.take());\n         sched.enqueue_task(task);\n         sched.run();"}]}