{"sha": "e123117cb7c1b7f8854858721ccbdbca4e918061", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjMxMTdjYjdjMWI3Zjg4NTQ4NTg3MjFjY2JkYmNhNGU5MTgwNjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-11-27T16:37:18Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T19:50:39Z"}, "message": "Refactoring: Allow `BlockSets.on_entry` to denote locally accumulated intrablock state.\n\n(Still musing about whether it could make sense to revise the design\nhere to make these constraints on usage explicit.)", "tree": {"sha": "bc527be5f4c82861a02f9dda1ac51977ccc0d4e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc527be5f4c82861a02f9dda1ac51977ccc0d4e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e123117cb7c1b7f8854858721ccbdbca4e918061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e123117cb7c1b7f8854858721ccbdbca4e918061", "html_url": "https://github.com/rust-lang/rust/commit/e123117cb7c1b7f8854858721ccbdbca4e918061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e123117cb7c1b7f8854858721ccbdbca4e918061/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4add5d52a87e0a1d45505a302d28a577bbe05c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4add5d52a87e0a1d45505a302d28a577bbe05c2", "html_url": "https://github.com/rust-lang/rust/commit/d4add5d52a87e0a1d45505a302d28a577bbe05c2"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f7efd7fe7da038ba3a9facda305eccde2da36830", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e123117cb7c1b7f8854858721ccbdbca4e918061/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e123117cb7c1b7f8854858721ccbdbca4e918061/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e123117cb7c1b7f8854858721ccbdbca4e918061", "patch": "@@ -195,7 +195,12 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n         for (bb, data) in self.mir.basic_blocks().iter_enumerated() {\n             let &mir::BasicBlockData { ref statements, ref terminator, is_cleanup: _ } = data;\n \n+            let mut interim_state;\n             let sets = &mut self.flow_state.sets.for_block(bb.index());\n+            if BD::accumulates_intrablock_state() {\n+                interim_state = sets.on_entry.to_owned();\n+                sets.on_entry = &mut interim_state;\n+            }\n             for j_stmt in 0..statements.len() {\n                 let location = Location { block: bb, statement_index: j_stmt };\n                 self.flow_state.operator.statement_effect(sets, location);\n@@ -560,6 +565,31 @@ pub trait BitDenotation: BitwiseOperator {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n+    /// Some analyses want to accumulate knowledge within a block when\n+    /// analyzing its statements for building the gen/kill sets. Override\n+    /// this method to return true in such cases.\n+    ///\n+    /// When this returns true, the statement-effect (re)construction\n+    /// will clone the `on_entry` state and pass along a reference via\n+    /// `sets.on_entry` to that local clone into `statement_effect` and\n+    /// `terminator_effect`).\n+    ///\n+    /// When its false, no local clone is constucted; instead a\n+    /// reference directly into `on_entry` is passed along via\n+    /// `sets.on_entry` instead, which represents the flow state at\n+    /// the block's start, not necessarily the state immediately prior\n+    /// to the statement/terminator under analysis.\n+    ///\n+    /// In either case, the passed reference is mutable; but this is a\n+    /// wart from using the `BlockSets` type in the API; the intention\n+    /// is that the `statement_effect` and `terminator_effect` methods\n+    /// mutate only the gen/kill sets.\n+    ///\n+    /// FIXME: We should consider enforcing the intention described in\n+    /// the previous paragraph by passing the three sets in separate\n+    /// parameters to encode their distinct mutabilities.\n+    fn accumulates_intrablock_state() -> bool { false }\n+\n     /// A name describing the dataflow analysis that this\n     /// BitDenotation is supporting.  The name should be something\n     /// suitable for plugging in as part of a filename e.g. avoid"}]}