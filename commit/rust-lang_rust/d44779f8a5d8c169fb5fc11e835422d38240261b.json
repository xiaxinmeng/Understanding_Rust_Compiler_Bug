{"sha": "d44779f8a5d8c169fb5fc11e835422d38240261b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDc3OWY4YTVkOGMxNjlmYjVmYzExZTgzNTQyMmQzODI0MDI2MWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-17T18:35:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T18:35:36Z"}, "message": "Merge #10260\n\n10260: fix: fix names generation in `Generate function` r=Veykril a=iDawer\n\n- Improve fn name computation (close #10176).\r\n- Handle tuple indexing expressions in argument position (should close  #10241)\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "ed1ad2d3539ab179c63df351302119230743ae31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1ad2d3539ab179c63df351302119230743ae31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44779f8a5d8c169fb5fc11e835422d38240261b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRN/4CRBK7hj4Ov3rIwAAQYAIADhETWXJq94noWXi7nuIStfU\nhC6B9AUZzJBsETdsDbHCpoHJhIf+NT7Y3re1NIz9Ou4v6y5yoL252rny7nGtZbEF\nyYLX9AWnuMyi4PUYAFMpaf62YDp8oHtZTQ3v6DOfaP8Q4uZMnkGi5AJsJfYZTiZ7\ncYKfXRm7+g67IAQKdY0+pccGkDR8u0edyHOompzCCu3ut/VjaSw+rL4oUWJlPYkn\nG3Y2C6R63AQh12aDcU7Ncxea6BW0qEGlIWxtJozYG2+kH3ILAFCCAedBA7HOqCWg\npeYrfn4gJiYFsodLoGPdgrr6ygNV4Udt1ShhHeXIv6orKE5kyjNAGmowqIS+W1Q=\n=db9H\n-----END PGP SIGNATURE-----\n", "payload": "tree ed1ad2d3539ab179c63df351302119230743ae31\nparent 5964750e956c9855a22c2b1165421d8c0206a2d4\nparent 1d94e234d5d31f945c0cece38b8af1997fa28d82\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631903736 +0000\ncommitter GitHub <noreply@github.com> 1631903736 +0000\n\nMerge #10260\n\n10260: fix: fix names generation in `Generate function` r=Veykril a=iDawer\n\n- Improve fn name computation (close #10176).\r\n- Handle tuple indexing expressions in argument position (should close  #10241)\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44779f8a5d8c169fb5fc11e835422d38240261b", "html_url": "https://github.com/rust-lang/rust/commit/d44779f8a5d8c169fb5fc11e835422d38240261b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44779f8a5d8c169fb5fc11e835422d38240261b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5964750e956c9855a22c2b1165421d8c0206a2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5964750e956c9855a22c2b1165421d8c0206a2d4", "html_url": "https://github.com/rust-lang/rust/commit/5964750e956c9855a22c2b1165421d8c0206a2d4"}, {"sha": "1d94e234d5d31f945c0cece38b8af1997fa28d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d94e234d5d31f945c0cece38b8af1997fa28d82", "html_url": "https://github.com/rust-lang/rust/commit/1d94e234d5d31f945c0cece38b8af1997fa28d82"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "954ad2db085302fd06852d3b65b175abb945cd22", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 64, "deletions": 24, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -71,12 +71,13 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n     let path = path_expr.path()?;\n-    let fn_name = fn_name(&path)?;\n+    let name_ref = path.segment()?.name_ref()?;\n     if ctx.sema.resolve_path(&path).is_some() {\n         // The function call already resolves, no need to add a function\n         return None;\n     }\n \n+    let fn_name = &*name_ref.text();\n     let target_module;\n     let mut adt_name = None;\n \n@@ -93,7 +94,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                 if current_module.krate() != module.krate() {\n                     return None;\n                 }\n-                let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n+                let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n                 let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n                 adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n                 (target, file, insert_offset)\n@@ -107,7 +108,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             get_fn_target(ctx, &target_module, call.clone())?\n         }\n     };\n-    let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module, target)?;\n+    let function_builder = FunctionBuilder::from_call(ctx, &call, fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let label = format!(\"Generate {} function\", function_builder.fn_name);\n     add_func_to_accumulator(\n@@ -241,13 +242,13 @@ impl FunctionBuilder {\n     fn from_call(\n         ctx: &AssistContext,\n         call: &ast::CallExpr,\n-        path: &ast::Path,\n+        fn_name: &str,\n         target_module: Option<hir::Module>,\n         target: GeneratedFunctionTarget,\n     ) -> Option<Self> {\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| current_module(target.syntax(), ctx))?;\n-        let fn_name = fn_name(path)?;\n+        let fn_name = make::name(fn_name);\n         let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call.clone()))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n@@ -428,11 +429,6 @@ impl GeneratedFunctionTarget {\n     }\n }\n \n-fn fn_name(call: &ast::Path) -> Option<ast::Name> {\n-    let name = call.segment()?.syntax().to_string();\n-    Some(make::name(&name))\n-}\n-\n /// Computes the type variables and arguments required for the generated function\n fn fn_args(\n     ctx: &AssistContext,\n@@ -442,10 +438,7 @@ fn fn_args(\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n     for arg in call.arg_list()?.args() {\n-        arg_names.push(match fn_arg_name(&arg) {\n-            Some(name) => name,\n-            None => String::from(\"arg\"),\n-        });\n+        arg_names.push(fn_arg_name(&arg));\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n@@ -510,18 +503,21 @@ fn deduplicate_arg_names(arg_names: &mut Vec<String>) {\n     }\n }\n \n-fn fn_arg_name(fn_arg: &ast::Expr) -> Option<String> {\n-    match fn_arg {\n-        ast::Expr::CastExpr(cast_expr) => fn_arg_name(&cast_expr.expr()?),\n-        _ => {\n-            let s = fn_arg\n-                .syntax()\n-                .descendants()\n-                .filter(|d| ast::NameRef::can_cast(d.kind()))\n-                .last()?\n-                .to_string();\n+fn fn_arg_name(arg_expr: &ast::Expr) -> String {\n+    let name = (|| match arg_expr {\n+        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(&cast_expr.expr()?)),\n+        expr => {\n+            let s = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?.to_string();\n             Some(to_lower_snake_case(&s))\n         }\n+    })();\n+    match name {\n+        Some(mut name) if name.starts_with(|c: char| c.is_ascii_digit()) => {\n+            name.insert_str(0, \"arg\");\n+            name\n+        }\n+        Some(name) => name,\n+        None => \"arg\".to_string(),\n     }\n }\n \n@@ -1643,6 +1639,50 @@ fn bar() ${0:-> _} {\n     todo!()\n }\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn no_panic_on_invalid_global_path() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn main() {\n+    ::foo$0();\n+}\n+\",\n+            r\"\n+fn main() {\n+    ::foo();\n+}\n+\n+fn foo() ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn handle_tuple_indexing() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn main() {\n+    let a = ((),);\n+    foo$0(a.0);\n+}\n+\",\n+            r\"\n+fn main() {\n+    let a = ((),);\n+    foo(a.0);\n+}\n+\n+fn foo(arg0: ()) ${0:-> _} {\n+    todo!()\n+}\n \",\n         )\n     }"}, {"sha": "c8ba638c523116362cb8cbc200daa6f2aae3f1b1", "filename": "crates/syntax/src/token_text.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44779f8a5d8c169fb5fc11e835422d38240261b/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftoken_text.rs?ref=d44779f8a5d8c169fb5fc11e835422d38240261b", "patch": "@@ -21,9 +21,9 @@ impl<'a> TokenText<'a> {\n     }\n \n     pub fn as_str(&self) -> &str {\n-        match self.0 {\n-            Repr::Borrowed(it) => it,\n-            Repr::Owned(ref green) => green.text(),\n+        match &self.0 {\n+            &Repr::Borrowed(it) => it,\n+            Repr::Owned(green) => green.text(),\n         }\n     }\n }"}]}