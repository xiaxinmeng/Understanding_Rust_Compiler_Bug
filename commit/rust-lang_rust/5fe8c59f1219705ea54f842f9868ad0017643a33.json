{"sha": "5fe8c59f1219705ea54f842f9868ad0017643a33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZThjNTlmMTIxOTcwNWVhNTRmODQyZjk4NjhhZDAwMTc2NDNhMzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-12T13:47:38Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-16T10:29:40Z"}, "message": "Stabilize core::hint::unreachable_unchecked.\n\nCloses #43751.", "tree": {"sha": "7064fbd65a6788fc62b571646e227fee40580b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7064fbd65a6788fc62b571646e227fee40580b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe8c59f1219705ea54f842f9868ad0017643a33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrUexQACgkQ/vbIBR0O\nATwcXg/+LInBVVFUHzJDtvAfwcZsTgm2IE8915Rlp9C0pWK3kHf5W0ynTVZErwwE\nDFNr2p4cDXM+8gTWef8I7Bm7ayFHARzXmnLX6Ou1S6qhoWQPuLNNd3ewD5ZV0v97\nBAU9UsfkBYu+M/hCrVXmAxVm2IZEN37r7+gcWRsohpZsjcMqdtL9Mk1VaDhS8mVJ\nRE1BZirWHaRbek/6X3+Xj+LJBt0gsoERi9KAYTO7AWPmKhlKsCwZGwoYR5v9ztFZ\nOAcX3GPu692hKeeid50uFA+xEOrbl9/LAxnRCAC+E8gs718vRr0DD/yjyLp9SA/Z\ner1XGt1DUBmH6NU6kmjDJE+RSXjxODtypEmC8caML9FMXrIiGYWjAB0JdRtG6e3D\n4t3tgu72dUdfoGcrV0SRzcZTpWpsbMrrUnY7dLm3mUP9yq7TwIoFXXCmzs9NzPV3\n+hgYANuwI1Ycw4eaFu742eeeDAWI5o3pMxTrNdmrH8SM8iFK1IMTAYD04ARmYcEb\nWPfIjMdvnsmyGWLgWS6euMJFU7Y+2raR7xDOeodric0aLx3OgEayDZHaM5MsMRY7\nS+KxURhRKLkRwH47twPz85oqB2hi9b3/O30C6GwVvkUhDNfpQD9J0mg+G5BV1Wam\n6jNjbFr/Ylg0Y02jdulphDCi3MI2l3QLgqndq/mPOPeeGhG5onQ=\n=KiMT\n-----END PGP SIGNATURE-----", "payload": "tree 7064fbd65a6788fc62b571646e227fee40580b43\nparent 3e70dfd65542a09db3a5ae31e6334a0f7cc20035\nauthor kennytm <kennytm@gmail.com> 1523540858 +0800\ncommitter kennytm <kennytm@gmail.com> 1523874580 +0800\n\nStabilize core::hint::unreachable_unchecked.\n\nCloses #43751.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe8c59f1219705ea54f842f9868ad0017643a33", "html_url": "https://github.com/rust-lang/rust/commit/5fe8c59f1219705ea54f842f9868ad0017643a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe8c59f1219705ea54f842f9868ad0017643a33/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e70dfd65542a09db3a5ae31e6334a0f7cc20035", "html_url": "https://github.com/rust-lang/rust/commit/3e70dfd65542a09db3a5ae31e6334a0f7cc20035"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "f4e96e67b2c66aeea3b8b7b73e7949fd2d1ffba2", "filename": "src/libcore/hint.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"core_hint\", since = \"1.27.0\")]\n+\n+//! Hints to compiler that affects how code should be emitted or optimized.\n+\n+use intrinsics;\n+\n+/// Informs the compiler that this point in the code is not reachable, enabling\n+/// further optimizations.\n+///\n+/// # Safety\n+///\n+/// Reaching this function is completely *undefined behavior* (UB). In\n+/// particular, the compiler assumes that all UB must never happen, and\n+/// therefore will eliminate all branches that reach to a call to\n+/// `unreachable_unchecked()`.\n+///\n+/// Like all instances of UB, if this assumption turns out to be wrong, i.e. the\n+/// `unreachable_unchecked()` call is actually reachable among all possible\n+/// control flow, the compiler will apply the wrong optimization strategy, and\n+/// may sometimes even corrupt seemingly unrelated code, causing\n+/// difficult-to-debug problems.\n+///\n+/// Use this function only when you can prove that the code will never call it.\n+///\n+/// The [`unreachable!()`] macro is the safe counterpart of this function, which\n+/// will panic instead when executed.\n+///\n+/// [`unreachable!()`]: ../macro.unreachable.html\n+///\n+/// # Example\n+///\n+/// ```\n+/// fn div_1(a: u32, b: u32) -> u32 {\n+///     use std::hint::unreachable_unchecked;\n+///\n+///     // `b.saturating_add(1)` is always positive (not zero),\n+///     // hence `checked_div` will never return None.\n+///     // Therefore, the else branch is unreachable.\n+///     a.checked_div(b.saturating_add(1))\n+///         .unwrap_or_else(|| unsafe { unreachable_unchecked() })\n+/// }\n+///\n+/// assert_eq!(div_1(7, 0), 7);\n+/// assert_eq!(div_1(9, 1), 4);\n+/// assert_eq!(div_1(11, std::u32::MAX), 0);\n+/// ```\n+#[inline]\n+#[stable(feature = \"unreachable\", since = \"1.27.0\")]\n+pub unsafe fn unreachable_unchecked() -> ! {\n+    intrinsics::unreachable()\n+}"}, {"sha": "fb0d2d9c882196da3d7189d234ad7a9a992e5c93", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -638,6 +638,9 @@ extern \"rust-intrinsic\" {\n     /// NB: This is very different from the `unreachable!()` macro: Unlike the\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::hint::unreachable_unchecked`](../../std/hint/fn.unreachable_unchecked.html).\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "1968c11d06223ba880d778fe6da49c2d6f757ecc", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -149,6 +149,7 @@ pub mod intrinsics;\n pub mod mem;\n pub mod nonzero;\n pub mod ptr;\n+pub mod hint;\n \n /* Core language traits */\n "}, {"sha": "1e2551e36f54442214c0d732e0ee6cc28164b985", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -420,13 +420,13 @@ macro_rules! writeln {\n /// * Iterators that dynamically terminate.\n ///\n /// If the determination that the code is unreachable proves incorrect, the\n-/// program immediately terminates with a [`panic!`].  The function [`unreachable`],\n-/// which belongs to the [`std::intrinsics`] module, informs the compilier to\n+/// program immediately terminates with a [`panic!`].  The function [`unreachable_unchecked`],\n+/// which belongs to the [`std::hint`] module, informs the compilier to\n /// optimize the code out of the release version entirely.\n ///\n /// [`panic!`]:  ../std/macro.panic.html\n-/// [`unreachable`]: ../std/intrinsics/fn.unreachable.html\n-/// [`std::intrinsics`]: ../std/intrinsics/index.html\n+/// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n+/// [`std::hint`]: ../std/hint/index.html\n ///\n /// # Panics\n ///"}, {"sha": "10efab82ddff586d6c44671388968ecf8e8a318f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -1094,18 +1094,6 @@ impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n     }\n }\n \n-/// Tells LLVM that this point in the code is not reachable, enabling further\n-/// optimizations.\n-///\n-/// NB: This is very different from the `unreachable!()` macro: Unlike the\n-/// macro, which panics when it is executed, it is *undefined behavior* to\n-/// reach code marked with this function.\n-#[inline]\n-#[unstable(feature = \"unreachable\", issue = \"43751\")]\n-pub unsafe fn unreachable() -> ! {\n-    intrinsics::unreachable()\n-}\n-\n /// A pinned reference.\n ///\n /// A pinned reference is a lot like a mutable reference, except that it is not"}, {"sha": "d92a45265493b939f34f08c3737fc2a5cc5a1910", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe8c59f1219705ea54f842f9868ad0017643a33/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5fe8c59f1219705ea54f842f9868ad0017643a33", "patch": "@@ -457,6 +457,8 @@ pub use alloc_crate::vec;\n pub use core::char;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n pub use core::u128;\n+#[stable(feature = \"core_hint\", since = \"1.27.0\")]\n+pub use core::hint;\n \n pub mod f32;\n pub mod f64;"}]}