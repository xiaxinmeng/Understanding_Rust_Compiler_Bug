{"sha": "5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODg2MzQyYmU3NWVmNDY1YThlMGZmZTZmNGU3YzIzN2ZiOGZkNjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T01:50:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T01:50:32Z"}, "message": "syntax: fix up dynamic borrow errors in libsyntax", "tree": {"sha": "19b6f9a7fd4b3619de7a84e616a9e56586ee5c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b6f9a7fd4b3619de7a84e616a9e56586ee5c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "html_url": "https://github.com/rust-lang/rust/commit/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbaf8399c8d4670b16684a7d94c8ed70839ffc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbaf8399c8d4670b16684a7d94c8ed70839ffc8e", "html_url": "https://github.com/rust-lang/rust/commit/fbaf8399c8d4670b16684a7d94c8ed70839ffc8e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "163c7852132a5dac9e352e6a2ce678bbc6344efe", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "patch": "@@ -163,7 +163,7 @@ fn string_advance_token(r: @mut StringReader) {\n     }\n }\n \n-fn byte_offset(rdr: @mut StringReader) -> BytePos {\n+fn byte_offset(rdr: &StringReader) -> BytePos {\n     (rdr.pos - rdr.filemap.start_pos)\n }\n \n@@ -176,7 +176,7 @@ pub fn get_str_from(rdr: @mut StringReader, start: BytePos) -> ~str {\n \n // EFFECT: advance the StringReader by one character. If a newline is\n // discovered, add it to the FileMap's list of line start offsets.\n-pub fn bump(rdr: @mut StringReader) {\n+pub fn bump(rdr: &mut StringReader) {\n     rdr.last_pos = rdr.pos;\n     let current_byte_offset = byte_offset(rdr).to_uint();;\n     if current_byte_offset < (*rdr.src).len() {"}, {"sha": "457c6df8db254c140e9f023aee0d97f4e9b1d4dc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "patch": "@@ -1607,9 +1607,9 @@ pub impl Parser {\n             token::LBRACE | token::LPAREN | token::LBRACKET => {\n                 self.parse_matcher_subseq(\n                     name_idx,\n-                    &*self.token,\n+                    *self.token,\n                     // tjc: not sure why we need a copy\n-                    &token::flip_delimiter(&*self.token)\n+                    token::flip_delimiter(&*self.token)\n                 )\n             }\n             _ => self.fatal(~\"expected open delimiter\")\n@@ -1623,15 +1623,15 @@ pub impl Parser {\n     fn parse_matcher_subseq(\n         &self,\n         name_idx: @mut uint,\n-        bra: &token::Token,\n-        ket: &token::Token\n+        bra: token::Token,\n+        ket: token::Token\n     ) -> ~[matcher] {\n         let mut ret_val = ~[];\n         let mut lparens = 0u;\n \n-        self.expect(bra);\n+        self.expect(&bra);\n \n-        while *self.token != *ket || lparens > 0u {\n+        while *self.token != ket || lparens > 0u {\n             if *self.token == token::LPAREN { lparens += 1u; }\n             if *self.token == token::RPAREN { lparens -= 1u; }\n             ret_val.push(self.parse_matcher(name_idx));\n@@ -1651,8 +1651,8 @@ pub impl Parser {\n                 let name_idx_lo = *name_idx;\n                 let ms = self.parse_matcher_subseq(\n                     name_idx,\n-                    &token::LPAREN,\n-                    &token::RPAREN\n+                    token::LPAREN,\n+                    token::RPAREN\n                 );\n                 if ms.len() == 0u {\n                     self.fatal(~\"repetition body must be nonempty\");"}]}