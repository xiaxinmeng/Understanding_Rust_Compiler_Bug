{"sha": "4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjVjNjM3NWVjZjdiZWFhMmFlZGVhMmYwZDMyMTliODU2ZTViZDI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-29T07:29:58Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-30T10:40:39Z"}, "message": "Allow access of the state field before the generator transform. Fixes #47482, #46476", "tree": {"sha": "a9363221838d35bfbfe3fb11146035c07008d3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9363221838d35bfbfe3fb11146035c07008d3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "html_url": "https://github.com/rust-lang/rust/commit/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77bc26f4f3cb5f053dbe72b363b55a53f626f0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/77bc26f4f3cb5f053dbe72b363b55a53f626f0cd", "html_url": "https://github.com/rust-lang/rust/commit/77bc26f4f3cb5f053dbe72b363b55a53f626f0cd"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "d20cf556b71c0a9e9333be81a45398eebd6bef79", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "patch": "@@ -390,14 +390,21 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n         state.map(move |d| d.ty.subst(tcx, self.substs))\n     }\n \n+    /// This is the types of the fields of a generate which\n+    /// is available before the generator transformation.\n+    /// It includes the upvars and the state discriminant which is u32.\n+    pub fn pre_transforms_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n+        impl Iterator<Item=Ty<'tcx>> + 'a\n+    {\n+        self.upvar_tys(def_id, tcx).chain(iter::once(tcx.types.u32))\n+    }\n+\n     /// This is the types of all the fields stored in a generator.\n     /// It includes the upvars, state types and the state discriminant which is u32.\n     pub fn field_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'a\n     {\n-        let upvars = self.upvar_tys(def_id, tcx);\n-        let state = self.state_tys(def_id, tcx);\n-        upvars.chain(iter::once(tcx.types.u32)).chain(state)\n+        self.pre_transforms_tys(def_id, tcx).chain(self.state_tys(def_id, tcx))\n     }\n }\n "}, {"sha": "dc302b6cc354eb25ec7a1a7f7edaef4854959676", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "patch": "@@ -533,15 +533,17 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                     }\n                 }\n                 ty::TyGenerator(def_id, substs, _) => {\n-                    // Try upvars first. `field_tys` requires final optimized MIR.\n-                    if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field.index()) {\n+                    // Try pre-transform fields first (upvars and current state)\n+                    if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field.index()) {\n                         return Ok(ty);\n                     }\n \n+                    // Then try `field_tys` which contains all the fields, but it\n+                    // requires the final optimized MIR.\n                     return match substs.field_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.field_tys(def_id, tcx).count() + 1,\n+                            field_count: substs.field_tys(def_id, tcx).count(),\n                         }),\n                     };\n                 }\n@@ -1233,13 +1235,16 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             AggregateKind::Generator(def_id, substs, _) => {\n-                if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field_index) {\n+                // Try pre-transform fields first (upvars and current state)\n+                if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field_index) {\n                     Ok(ty)\n                 } else {\n+                    // Then try `field_tys` which contains all the fields, but it\n+                    // requires the final optimized MIR.\n                     match substs.field_tys(def_id, tcx).nth(field_index) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.field_tys(def_id, tcx).count() + 1,\n+                            field_count: substs.field_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }"}, {"sha": "0f7d2e540d80a8b6e5f3b5aa063f45f999509e7e", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "patch": "@@ -1,12 +1,3 @@\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/generator-with-nll.rs:20:17\n-   |\n-20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                 ^^^^^^^^^\n-21 |         //~^ borrow may still be in use when generator yields (Mir)\n-22 |         yield ();\n-   |         -------- possible yield occurs here\n-\n error[E0626]: borrow may still be in use when generator yields (Ast)\n   --> $DIR/generator-with-nll.rs:19:23\n    |\n@@ -25,5 +16,14 @@ error[E0626]: borrow may still be in use when generator yields (Ast)\n 22 |         yield ();\n    |         -------- possible yield occurs here\n \n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/generator-with-nll.rs:20:17\n+   |\n+20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+   |                 ^^^^^^^^^\n+21 |         //~^ borrow may still be in use when generator yields (Mir)\n+22 |         yield ();\n+   |         -------- possible yield occurs here\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "114fe8ffcab0e02d6d3d0282c84b63d3b690eac1", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4325c6375ecf7beaa2aedea2f0d3219b856e5bd2/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=4325c6375ecf7beaa2aedea2f0d3219b856e5bd2", "patch": "@@ -1,12 +1,3 @@\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:24:17\n-   |\n-24 |         let a = &mut 3;\n-   |                 ^^^^^^\n-...\n-27 |         yield();\n-   |         ------- possible yield occurs here\n-\n error[E0626]: borrow may still be in use when generator yields (Ast)\n   --> $DIR/yield-while-local-borrowed.rs:24:22\n    |\n@@ -25,6 +16,15 @@ error[E0626]: borrow may still be in use when generator yields (Ast)\n 55 |             yield();\n    |             ------- possible yield occurs here\n \n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/yield-while-local-borrowed.rs:24:17\n+   |\n+24 |         let a = &mut 3;\n+   |                 ^^^^^^\n+...\n+27 |         yield();\n+   |         ------- possible yield occurs here\n+\n error[E0626]: borrow may still be in use when generator yields (Mir)\n   --> $DIR/yield-while-local-borrowed.rs:52:21\n    |"}]}