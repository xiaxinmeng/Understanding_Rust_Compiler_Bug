{"sha": "552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MjA4MGE1YjdjNGVjMDFkM2VkNzRiNDExYmZlZmFhZWJmNzBmZWI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T19:22:30Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Fix imports.", "tree": {"sha": "13d0e7aa76c5d89513f1b61fd1f268fa377f2299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d0e7aa76c5d89513f1b61fd1f268fa377f2299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "html_url": "https://github.com/rust-lang/rust/commit/552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/comments", "author": null, "committer": null, "parents": [{"sha": "d9ec0f2b36cc53e770193fa5a409f51cc3a7cc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ec0f2b36cc53e770193fa5a409f51cc3a7cc5a", "html_url": "https://github.com/rust-lang/rust/commit/d9ec0f2b36cc53e770193fa5a409f51cc3a7cc5a"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "bedacf705ac486699a9605ef92b5f7bb146a2cdd", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "patch": "@@ -63,7 +63,9 @@ pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n     EvalContextExt as StackedBorEvalContextExt, Item, Permission, PtrId, Stack, Stacks, Tag,\n };\n-pub use crate::threads::EvalContextExt as ThreadsEvalContextExt;\n+pub use crate::threads::{\n+    EvalContextExt as ThreadsEvalContextExt, ThreadId, ThreadManager, ThreadState,\n+};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power."}, {"sha": "23d4e37c66d1790a20c11594af75dbeb01e77e04", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "patch": "@@ -28,8 +28,6 @@ use rustc_target::abi::{LayoutOf, Size};\n \n use crate::*;\n \n-pub use crate::threads::{ThreadId, ThreadManager, ThreadState};\n-\n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations"}, {"sha": "da0c585958a3c7540fca5b1bd3a6f22ac268fceb", "filename": "src/shims/tls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552080a5b7c4ec01d3ed74b411bfefaaebf70feb/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=552080a5b7c4ec01d3ed74b411bfefaaebf70feb", "patch": "@@ -8,8 +8,10 @@ use log::trace;\n use rustc_middle::ty;\n use rustc_target::abi::{Size, HasDataLayout};\n \n-use crate::{HelpersEvalContextExt, ThreadsEvalContextExt, InterpResult, MPlaceTy, Scalar, StackPopCleanup, Tag};\n-use crate::machine::{ThreadId, ThreadState};\n+use crate::{\n+    HelpersEvalContextExt, InterpResult, MPlaceTy, Scalar, StackPopCleanup, Tag, ThreadId,\n+    ThreadState, ThreadsEvalContextExt,\n+};\n \n pub type TlsKey = u128;\n "}]}