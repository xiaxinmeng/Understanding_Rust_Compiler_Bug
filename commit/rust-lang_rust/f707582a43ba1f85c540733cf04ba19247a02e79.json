{"sha": "f707582a43ba1f85c540733cf04ba19247a02e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MDc1ODJhNDNiYTFmODVjNTQwNzMzY2YwNGJhMTkyNDdhMDJlNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-07T12:59:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-07T12:59:50Z"}, "message": "Auto merge of #36289 - euclio:self-suggestion, r=jseyfried\n\nresolve: Suggest `use self` when import resolves\n\nImproves errors messages by replacing \"Maybe a missing `extern crate`\" messages\nwith \"Did you mean `self::...`\" when the `self` import would succeed.\n\nFixes #34191.\n\nThank you for the help @jseyfried!", "tree": {"sha": "0cd73489702c9bfbe3f60f865715211b44bd8926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd73489702c9bfbe3f60f865715211b44bd8926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f707582a43ba1f85c540733cf04ba19247a02e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f707582a43ba1f85c540733cf04ba19247a02e79", "html_url": "https://github.com/rust-lang/rust/commit/f707582a43ba1f85c540733cf04ba19247a02e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f707582a43ba1f85c540733cf04ba19247a02e79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2819eca69cc053afaf975f4702abbde83c6b7cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2819eca69cc053afaf975f4702abbde83c6b7cdc", "html_url": "https://github.com/rust-lang/rust/commit/2819eca69cc053afaf975f4702abbde83c6b7cdc"}, {"sha": "288e7caf19b415007787f47424c9e00913cb7803", "url": "https://api.github.com/repos/rust-lang/rust/commits/288e7caf19b415007787f47424c9e00913cb7803", "html_url": "https://github.com/rust-lang/rust/commit/288e7caf19b415007787f47424c9e00913cb7803"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "74f88433b3584fa07f24ff310dcde453d2da827b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f707582a43ba1f85c540733cf04ba19247a02e79/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f707582a43ba1f85c540733cf04ba19247a02e79/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=f707582a43ba1f85c540733cf04ba19247a02e79", "patch": "@@ -588,7 +588,19 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         let module = match module_result {\n             Success(module) => module,\n             Indeterminate => return Indeterminate,\n-            Failed(err) => return Failed(err),\n+            Failed(err) => {\n+                let self_module = self.module_map[&self.current_module.normal_ancestor_id.unwrap()];\n+\n+                let resolve_from_self_result = self.resolve_module_path_from_root(\n+                    &self_module, &module_path, 0, Some(span));\n+\n+                return if let Success(_) = resolve_from_self_result {\n+                    let msg = format!(\"Did you mean `self::{}`?\", &names_to_string(module_path));\n+                    Failed(Some((span, msg)))\n+                } else {\n+                    Failed(err)\n+                };\n+            },\n         };\n \n         let (name, value_result, type_result) = match directive.subclass {"}, {"sha": "0a9a437569730367b17de8bed377d0b8c17d9e64", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f707582a43ba1f85c540733cf04ba19247a02e79/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f707582a43ba1f85c540733cf04ba19247a02e79/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=f707582a43ba1f85c540733cf04ba19247a02e79", "patch": "@@ -35,3 +35,23 @@ mod food {\n         }\n     }\n }\n+\n+mod m {\n+    enum MyEnum {\n+        MyVariant\n+    }\n+\n+    use MyEnum::*; //~ ERROR unresolved import `MyEnum::*` [E0432]\n+                   //~^ Did you mean `self::MyEnum`?\n+}\n+\n+mod items {\n+    enum Enum {\n+        Variant\n+    }\n+\n+    use Enum::*; //~ ERROR unresolved import `Enum::*` [E0432]\n+                 //~^ Did you mean `self::Enum`?\n+\n+    fn item() {}\n+}"}]}