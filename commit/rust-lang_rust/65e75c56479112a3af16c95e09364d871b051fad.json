{"sha": "65e75c56479112a3af16c95e09364d871b051fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTc1YzU2NDc5MTEyYTNhZjE2Yzk1ZTA5MzY0ZDg3MWIwNTFmYWQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-04T19:25:13Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-04T19:51:15Z"}, "message": "Fix excessive indentation in if_chain!", "tree": {"sha": "43bc3b8d07ff58c53597d1e8f9763568f24bc0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43bc3b8d07ff58c53597d1e8f9763568f24bc0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e75c56479112a3af16c95e09364d871b051fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e75c56479112a3af16c95e09364d871b051fad", "html_url": "https://github.com/rust-lang/rust/commit/65e75c56479112a3af16c95e09364d871b051fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e75c56479112a3af16c95e09364d871b051fad/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "html_url": "https://github.com/rust-lang/rust/commit/0c43b60dd4870f92e0a3938ddbb9276fe6814b68"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "74465b64051719ce9fae5b4b8e19c06ef9104903", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/65e75c56479112a3af16c95e09364d871b051fad/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e75c56479112a3af16c95e09364d871b051fad/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=65e75c56479112a3af16c95e09364d871b051fad", "patch": "@@ -118,45 +118,47 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                 let self_ty = cx.tcx\n                     .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n                 if_chain! {\n-                                    if same_tys(cx, self_ty, return_ty(cx, id));\n-                                    if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n-                                    if !implements_trait(cx, self_ty, default_trait_id, &[]);\n-                                    then {\n-                                        if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n-                                            span_lint_and_then(cx,\n-                                                               NEW_WITHOUT_DEFAULT_DERIVE, span,\n-                                                               &format!(\"you should consider deriving a \\\n-                                                                         `Default` implementation for `{}`\",\n-                                                                        self_ty),\n-                                                               |db| {\n-                                                db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n-                                            });\n-                                        } else {\n-                                            span_lint_and_then(cx,\n-                                                               NEW_WITHOUT_DEFAULT, span,\n-                                                               &format!(\"you should consider adding a \\\n-                                                                        `Default` implementation for `{}`\",\n-                                                                        self_ty),\n-                                                               |db| {\n-                                            db.suggest_prepend_item(cx,\n-                                                                      span,\n-                                                                      \"try this\",\n-                                                                      &format!(\n-\"impl Default for {} {{\n-    fn default() -> Self {{\n-        Self::new()\n-    }}\n-}}\",\n-                                                                               self_ty));\n-                                            });\n-                                        }\n-                                    }\n+                    if same_tys(cx, self_ty, return_ty(cx, id));\n+                    if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+                    if !implements_trait(cx, self_ty, default_trait_id, &[]);\n+                    then {\n+                        if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n+                            span_lint_and_then(\n+                                cx,\n+                                NEW_WITHOUT_DEFAULT_DERIVE,\n+                                span,\n+                                &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n+                                |db| {\n+                                    db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n+                                });\n+                        } else {\n+                            span_lint_and_then(\n+                                cx,\n+                                NEW_WITHOUT_DEFAULT,\n+                                span,\n+                                &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty),\n+                                |db| {\n+                                    db.suggest_prepend_item(cx, span, \"try this\", &create_new_without_default_suggest_msg(self_ty));\n+                                },\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }\n     }\n }\n \n+fn create_new_without_default_suggest_msg(ty: Ty) -> String {\n+    #[rustfmt_skip]\n+    format!(\n+\"impl Default for {} {{\n+    fn default() -> Self {{\n+        Self::new()\n+    }}\n+}}\", ty)\n+}\n+\n fn can_derive_default<'t, 'c>(ty: Ty<'t>, cx: &LateContext<'c, 't>, default_trait_id: DefId) -> Option<Span> {\n     match ty.sty {\n         ty::TyAdt(adt_def, substs) if adt_def.is_struct() => {"}]}