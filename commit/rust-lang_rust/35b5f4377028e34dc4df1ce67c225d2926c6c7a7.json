{"sha": "35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjVmNDM3NzAyOGUzNGRjNGRmMWNlNjdjMjI1ZDI5MjZjNmM3YTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-07T02:08:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-10T00:04:25Z"}, "message": "Special-case literals in `parse_bottom_expr`.\n\nThis makes parsing faster, particularly for code with large constants,\nfor two reasons:\n- it skips all the keyword comparisons for literals;\n- it replaces the unnecessary `parse_literal_maybe_minus` call with\n  `parse_lit`, avoiding an unnecessary allocation via `mk_expr`.", "tree": {"sha": "a793a51b7fc0b78a031842344318e77190cf3b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a793a51b7fc0b78a031842344318e77190cf3b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "html_url": "https://github.com/rust-lang/rust/commit/35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b5f4377028e34dc4df1ce67c225d2926c6c7a7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d132f544f9d74e3cc047ef211e57eae60b78e5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d132f544f9d74e3cc047ef211e57eae60b78e5c5", "html_url": "https://github.com/rust-lang/rust/commit/d132f544f9d74e3cc047ef211e57eae60b78e5c5"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "9b9954859be4949005e7577ac4c5c255cd9eb36e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/35b5f4377028e34dc4df1ce67c225d2926c6c7a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b5f4377028e34dc4df1ce67c225d2926c6c7a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35b5f4377028e34dc4df1ce67c225d2926c6c7a7", "patch": "@@ -2002,8 +2002,29 @@ impl<'a> Parser<'a> {\n \n         let ex: ExprKind;\n \n+        macro_rules! parse_lit {\n+            () => {\n+                match self.parse_lit() {\n+                    Ok(literal) => {\n+                        hi = self.prev_span;\n+                        ex = ExprKind::Lit(literal);\n+                    }\n+                    Err(mut err) => {\n+                        self.cancel(&mut err);\n+                        return Err(self.expected_expression_found());\n+                    }\n+                }\n+            }\n+        }\n+\n         // Note: when adding new syntax here, don't forget to adjust TokenKind::can_begin_expr().\n         match self.token.kind {\n+            // This match arm is a special-case of the `_` match arm below and\n+            // could be removed without changing functionality, but it's faster\n+            // to have it here, especially for programs with large constants.\n+            token::Literal(_) => {\n+                parse_lit!()\n+            }\n             token::OpenDelim(token::Paren) => {\n                 self.bump();\n \n@@ -2249,16 +2270,7 @@ impl<'a> Parser<'a> {\n                         self.bump();\n                         return Ok(self.mk_expr(self.span, ExprKind::Err, ThinVec::new()));\n                     }\n-                    match self.parse_literal_maybe_minus() {\n-                        Ok(expr) => {\n-                            hi = expr.span;\n-                            ex = expr.node.clone();\n-                        }\n-                        Err(mut err) => {\n-                            self.cancel(&mut err);\n-                            return Err(self.expected_expression_found());\n-                        }\n-                    }\n+                    parse_lit!()\n                 }\n             }\n         }"}]}