{"sha": "a6535d78dc5237574e323682fb56cff2575840bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTM1ZDc4ZGM1MjM3NTc0ZTMyMzY4MmZiNTZjZmYyNTc1ODQwYmQ=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-01-13T05:46:42Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-01-13T05:46:42Z"}, "message": "Change #[must_use] message of Iterator", "tree": {"sha": "aeb49cb06e3dc37ee949b006f7676bbcbeb6c936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb49cb06e3dc37ee949b006f7676bbcbeb6c936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6535d78dc5237574e323682fb56cff2575840bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6535d78dc5237574e323682fb56cff2575840bd", "html_url": "https://github.com/rust-lang/rust/commit/a6535d78dc5237574e323682fb56cff2575840bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6535d78dc5237574e323682fb56cff2575840bd/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d442938e04a851dc8b01ad810e150fb04129986", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d442938e04a851dc8b01ad810e150fb04129986", "html_url": "https://github.com/rust-lang/rust/commit/6d442938e04a851dc8b01ad810e150fb04129986"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "640af748172826294af275cdf165539557b34508", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6535d78dc5237574e323682fb56cff2575840bd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6535d78dc5237574e323682fb56cff2575840bd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=a6535d78dc5237574e323682fb56cff2575840bd", "patch": "@@ -88,7 +88,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2c3fe1526bcb32b12653251c7b64f1046346aba2", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a6535d78dc5237574e323682fb56cff2575840bd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6535d78dc5237574e323682fb56cff2575840bd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=a6535d78dc5237574e323682fb56cff2575840bd", "patch": "@@ -404,7 +404,7 @@ impl<R: Try> LoopState<R::Ok, R> {\n /// [`rev`]: trait.Iterator.html#method.rev\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rev<T> {\n     iter: T\n@@ -505,7 +505,7 @@ unsafe impl<I> TrustedLen for Rev<I>\n /// [`copied`]: trait.Iterator.html#method.copied\n /// [`Iterator`]: trait.Iterator.html\n #[unstable(feature = \"iter_copied\", issue = \"57127\")]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Copied<I> {\n     it: I,\n@@ -605,7 +605,7 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Copied<I>\n /// [`cloned`]: trait.Iterator.html#method.cloned\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Cloned<I> {\n     it: I,\n@@ -717,7 +717,7 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n /// [`cycle`]: trait.Iterator.html#method.cycle\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cycle<I> {\n     orig: I,\n@@ -757,7 +757,7 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n ///\n /// [`step_by`]: trait.Iterator.html#method.step_by\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n #[derive(Clone, Debug)]\n pub struct StepBy<I> {\n@@ -849,7 +849,7 @@ impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}\n /// [`chain`]: trait.Iterator.html#method.chain\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<A, B> {\n     a: A,\n@@ -1100,7 +1100,7 @@ unsafe impl<A, B> TrustedLen for Chain<A, B>\n /// [`zip`]: trait.Iterator.html#method.zip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Zip<A, B> {\n     a: A,\n@@ -1400,7 +1400,7 @@ unsafe impl<A, B> TrustedLen for Zip<A, B>\n ///     println!(\"{:?}\", pair);\n /// }\n /// ```\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n@@ -1511,7 +1511,7 @@ unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n ///\n /// [`filter`]: trait.Iterator.html#method.filter\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n@@ -1643,7 +1643,7 @@ impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n ///\n /// [`filter_map`]: trait.Iterator.html#method.filter_map\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct FilterMap<I, F> {\n@@ -1754,7 +1754,7 @@ impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n /// [`enumerate`]: trait.Iterator.html#method.enumerate\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Enumerate<I> {\n     iter: I,\n@@ -1915,7 +1915,7 @@ unsafe impl<I> TrustedLen for Enumerate<I>\n /// [`peekable`]: trait.Iterator.html#method.peekable\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Peekable<I: Iterator> {\n     iter: I,\n@@ -2066,7 +2066,7 @@ impl<I: Iterator> Peekable<I> {\n ///\n /// [`skip_while`]: trait.Iterator.html#method.skip_while\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct SkipWhile<I, P> {\n@@ -2149,7 +2149,7 @@ impl<I, P> FusedIterator for SkipWhile<I, P>\n ///\n /// [`take_while`]: trait.Iterator.html#method.take_while\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct TakeWhile<I, P> {\n@@ -2233,7 +2233,7 @@ impl<I, P> FusedIterator for TakeWhile<I, P>\n /// [`skip`]: trait.Iterator.html#method.skip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Skip<I> {\n     iter: I,\n@@ -2371,7 +2371,7 @@ impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n /// [`take`]: trait.Iterator.html#method.take\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<I> {\n     iter: I,\n@@ -2458,7 +2458,7 @@ unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n ///\n /// [`scan`]: trait.Iterator.html#method.scan\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Scan<I, St, F> {\n@@ -2518,7 +2518,7 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n ///\n /// [`flat_map`]: trait.Iterator.html#method.flat_map\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct FlatMap<I, U: IntoIterator, F> {\n     inner: FlattenCompat<Map<I, F>, <U as IntoIterator>::IntoIter>\n@@ -2603,7 +2603,7 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n ///\n /// [`flatten`]: trait.Iterator.html#method.flatten\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub struct Flatten<I: Iterator>\n where I::Item: IntoIterator {\n@@ -2832,7 +2832,7 @@ impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n /// [`fuse`]: trait.Iterator.html#method.fuse\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Fuse<I> {\n     iter: I,\n@@ -3056,7 +3056,7 @@ impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n ///\n /// [`inspect`]: trait.Iterator.html#method.inspect\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Inspect<I, F> {"}, {"sha": "e0184164b3ac22c68975dc89d1cc15899d7b0a49", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6535d78dc5237574e323682fb56cff2575840bd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6535d78dc5237574e323682fb56cff2575840bd/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=a6535d78dc5237574e323682fb56cff2575840bd", "patch": "@@ -28,7 +28,7 @@ fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /*\n \n // Full example of enumerate iterator\n \n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n struct StreamEnumerate<I> {\n     iter: I,\n     count: usize,"}]}