{"sha": "d4c5bf7828035d33e70362b6a72aed0065d3c97c", "node_id": "C_kwDOAAsO6NoAKGQ0YzViZjc4MjgwMzVkMzNlNzAzNjJiNmE3MmFlZDAwNjVkM2M5N2M", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-21T23:20:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T23:20:16Z"}, "message": "Merge #11092\n\n11092: internal: Directly use self param in completions instead of searching r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f28125efa62cddc767856ee1766b02bfed0a92e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28125efa62cddc767856ee1766b02bfed0a92e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c5bf7828035d33e70362b6a72aed0065d3c97c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwmEwCRBK7hj4Ov3rIwAAwRYIAGVksE2OAAdYUbVjkxxVBMqd\nY296Z3pjxMWrowdm6JIJm9jrYxOfxKsV4KMWZgkmZApTb90ZlVCohawZHZ6E1irj\nLRcDwnuOUmOsCBeBb4/Hd2luwlkfvwrFZ+w7t6QSVwzGK9pJiuNDAjZUdrPkbSA0\n0NLjFKAUUvDRlSBT4OucGzOQHNf/vZpgqGbA7fOnhHJU62J+jvNRK6UIuDQnp1z0\n8G4pmIf9C+9vIkYzsEqFpUAg4iBlXm5vYtK3n4WjPyK0r9LjVeSPW0M6Vr4lpeH8\nzDHQ0cR769lyP52asiP5aXO29VoEHV+lRdhfEU6SwOy0huU2aYIWMBOUPFD3bYA=\n=lcoq\n-----END PGP SIGNATURE-----\n", "payload": "tree f28125efa62cddc767856ee1766b02bfed0a92e4\nparent 47fad0ed7328f1a39defe9b0e857fec7e042d6ae\nparent 276687a6eeefbbc0721ded81980f88edd2178ebe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640128816 +0000\ncommitter GitHub <noreply@github.com> 1640128816 +0000\n\nMerge #11092\n\n11092: internal: Directly use self param in completions instead of searching r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c5bf7828035d33e70362b6a72aed0065d3c97c", "html_url": "https://github.com/rust-lang/rust/commit/d4c5bf7828035d33e70362b6a72aed0065d3c97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c5bf7828035d33e70362b6a72aed0065d3c97c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/47fad0ed7328f1a39defe9b0e857fec7e042d6ae", "html_url": "https://github.com/rust-lang/rust/commit/47fad0ed7328f1a39defe9b0e857fec7e042d6ae"}, {"sha": "276687a6eeefbbc0721ded81980f88edd2178ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/276687a6eeefbbc0721ded81980f88edd2178ebe", "html_url": "https://github.com/rust-lang/rust/commit/276687a6eeefbbc0721ded81980f88edd2178ebe"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "0ced029b84d3064d60bb9f3c6199f1ccd93fe064", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4c5bf7828035d33e70362b6a72aed0065d3c97c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c5bf7828035d33e70362b6a72aed0065d3c97c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d4c5bf7828035d33e70362b6a72aed0065d3c97c", "patch": "@@ -1483,6 +1483,19 @@ impl SelfParam {\n             .and_then(|params| params.self_param())\n             .map(|value| InFile { file_id, value })\n     }\n+\n+    pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n+        let resolver = self.func.resolver(db.upcast());\n+        let krate = self.func.lookup(db.upcast()).container.module(db.upcast()).krate();\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let environment = db.trait_environment(self.func.into());\n+\n+        Type {\n+            krate,\n+            env: environment.clone(),\n+            ty: ctx.lower_ty(&db.function_data(self.func).params[0].1),\n+        }\n+    }\n }\n \n impl HasVisibility for Function {"}, {"sha": "e08a70ac7eb79a06243783f2270e1eeddeaa66da", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d4c5bf7828035d33e70362b6a72aed0065d3c97c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c5bf7828035d33e70362b6a72aed0065d3c97c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=d4c5bf7828035d33e70362b6a72aed0065d3c97c", "patch": "@@ -1,7 +1,6 @@\n //! Completes references after dot (fields and method calls).\n \n use either::Either;\n-use hir::ScopeDef;\n use rustc_hash::FxHashSet;\n \n use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n@@ -36,24 +35,22 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path() || ctx.is_path_disallowed() || !ctx.expects_expression() {\n         return;\n     }\n-    ctx.scope.process_all_names(&mut |name, def| {\n-        if let ScopeDef::Local(local) = &def {\n-            if local.is_self(ctx.db) {\n-                let ty = local.ty(ctx.db);\n-                complete_fields(ctx, &ty, |field, ty| match field {\n-                    either::Either::Left(field) => {\n-                        acc.add_field(ctx, Some(name.clone()), field, &ty)\n-                    }\n-                    either::Either::Right(tuple_idx) => {\n-                        acc.add_tuple_field(ctx, Some(name.clone()), tuple_idx, &ty)\n-                    }\n-                });\n-                complete_methods(ctx, &ty, |func| {\n-                    acc.add_method(ctx, func, Some(name.clone()), None)\n-                });\n-            }\n+    if let Some(func) = ctx.function_def.as_ref().and_then(|fn_| ctx.sema.to_def(fn_)) {\n+        if let Some(self_) = func.self_param(ctx.db) {\n+            let ty = self_.ty(ctx.db);\n+            complete_fields(ctx, &ty, |field, ty| match field {\n+                either::Either::Left(field) => {\n+                    acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty)\n+                }\n+                either::Either::Right(tuple_idx) => {\n+                    acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), tuple_idx, &ty)\n+                }\n+            });\n+            complete_methods(ctx, &ty, |func| {\n+                acc.add_method(ctx, func, Some(hir::known::SELF_PARAM), None)\n+            });\n         }\n-    });\n+    }\n }\n \n fn complete_fields("}]}