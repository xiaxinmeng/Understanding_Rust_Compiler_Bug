{"sha": "126e09e5e5f0eeb7098188126e57169c3a622563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNmUwOWU1ZTVmMGVlYjcwOTgxODgxMjZlNTcxNjljM2E2MjI1NjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-14T22:51:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-29T04:46:40Z"}, "message": "test: Move run-make tests into compiletest\n\nForcing them to be embedded in makefiles precludes being able to run them in\nrustbuild, and adding them to compiletest gives us a great way to leverage\nfuture enhancements to our \"all encompassing test suite runner\" as well as just\nmoving more things into Rust.\n\nAll tests are still Makefile-based in the sense that they rely on `make` being\navailable to run them, but there's no longer any Makefile-trickery to run them\nand rustbuild can now run them out of the box as well.", "tree": {"sha": "78e72a5d6106945505a96da3f363777c4ac7eac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e72a5d6106945505a96da3f363777c4ac7eac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/126e09e5e5f0eeb7098188126e57169c3a622563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/126e09e5e5f0eeb7098188126e57169c3a622563", "html_url": "https://github.com/rust-lang/rust/commit/126e09e5e5f0eeb7098188126e57169c3a622563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/126e09e5e5f0eeb7098188126e57169c3a622563/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092b0738b7f00740c997a3fb99dd0b8b50c4c157", "url": "https://api.github.com/repos/rust-lang/rust/commits/092b0738b7f00740c997a3fb99dd0b8b50c4c157", "html_url": "https://github.com/rust-lang/rust/commit/092b0738b7f00740c997a3fb99dd0b8b50c4c157"}], "stats": {"total": 445, "additions": 237, "deletions": 208}, "files": [{"sha": "48f1ecec3a704632d4fc9ef1367376697795c751", "filename": "mk/cfg/i586-pc-windows-msvc.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-pc-windows-msvc.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -1,16 +1,16 @@\n # i586-pc-windows-msvc configuration\n-CC_i586-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-LINK_i586-pc-windows-msvc=\"$(CFG_MSVC_LINK_i386)\" -nologo\n-CXX_i586-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-CPP_i586-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-AR_i586-pc-windows-msvc=\"$(CFG_MSVC_LIB_i386)\" -nologo\n+CC_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+LINK_i586-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n+CXX_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+CPP_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+AR_i586-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n CFG_LIB_NAME_i586-pc-windows-msvc=$(1).dll\n CFG_STATIC_LIB_NAME_i586-pc-windows-msvc=$(1).lib\n CFG_LIB_GLOB_i586-pc-windows-msvc=$(1)-*.{dll,lib}\n CFG_LIB_DSYM_GLOB_i586-pc-windows-msvc=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i586-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i586-pc-windows-msvc := -MD -arch:IA32\n-CFG_GCCISH_CXXFLAGS_i586-pc-windows-msvc := -MD -arch:IA32\n+CFG_GCCISH_CFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n+CFG_GCCISH_CXXFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n CFG_GCCISH_LINK_FLAGS_i586-pc-windows-msvc :=\n CFG_GCCISH_DEF_FLAG_i586-pc-windows-msvc :=\n CFG_LLC_FLAGS_i586-pc-windows-msvc :="}, {"sha": "b0289b9892e206244e101afc858c28349a403f16", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -1,16 +1,16 @@\n # i686-pc-windows-msvc configuration\n-CC_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-LINK_i686-pc-windows-msvc=\"$(CFG_MSVC_LINK_i386)\" -nologo\n-CXX_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-CPP_i686-pc-windows-msvc=\"$(CFG_MSVC_CL_i386)\" -nologo\n-AR_i686-pc-windows-msvc=\"$(CFG_MSVC_LIB_i386)\" -nologo\n+CC_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+LINK_i686-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n+CXX_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+CPP_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n+AR_i686-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n CFG_LIB_NAME_i686-pc-windows-msvc=$(1).dll\n CFG_STATIC_LIB_NAME_i686-pc-windows-msvc=$(1).lib\n CFG_LIB_GLOB_i686-pc-windows-msvc=$(1)-*.{dll,lib}\n CFG_LIB_DSYM_GLOB_i686-pc-windows-msvc=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i686-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i686-pc-windows-msvc := -MD\n-CFG_GCCISH_CXXFLAGS_i686-pc-windows-msvc := -MD\n+CFG_GCCISH_CFLAGS_i686-pc-windows-msvc := -MD -nologo\n+CFG_GCCISH_CXXFLAGS_i686-pc-windows-msvc := -MD -nologo\n CFG_GCCISH_LINK_FLAGS_i686-pc-windows-msvc :=\n CFG_GCCISH_DEF_FLAG_i686-pc-windows-msvc :=\n CFG_LLC_FLAGS_i686-pc-windows-msvc :="}, {"sha": "30e996a97273f11b6af50cfd328ab117f8a10c0a", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -1,16 +1,16 @@\n # x86_64-pc-windows-msvc configuration\n-CC_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n-LINK_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LINK_x86_64)\" -nologo\n-CXX_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n-CPP_x86_64-pc-windows-msvc=\"$(CFG_MSVC_CL_x86_64)\" -nologo\n-AR_x86_64-pc-windows-msvc=\"$(CFG_MSVC_LIB_x86_64)\" -nologo\n+CC_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n+LINK_x86_64-pc-windows-msvc=$(CFG_MSVC_LINK_x86_64)\n+CXX_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n+CPP_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n+AR_x86_64-pc-windows-msvc=$(CFG_MSVC_LIB_x86_64)\n CFG_LIB_NAME_x86_64-pc-windows-msvc=$(1).dll\n CFG_STATIC_LIB_NAME_x86_64-pc-windows-msvc=$(1).lib\n CFG_LIB_GLOB_x86_64-pc-windows-msvc=$(1)-*.{dll,lib}\n CFG_LIB_DSYM_GLOB_x86_64-pc-windows-msvc=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-msvc := -MD\n-CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-msvc := -MD\n+CFG_GCCISH_CFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n+CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-msvc :=\n CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-msvc :=\n CFG_LLC_FLAGS_x86_64-pc-windows-msvc :="}, {"sha": "59c8f7726c92f048ebe9f3ad8718166e601fd636", "filename": "mk/platform.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -148,7 +148,7 @@ define CC_MACROS\n   CFG_CC_INCLUDE_$(1)=-I $$(1)\n   ifeq ($$(findstring msvc,$(1)),msvc)\n     CFG_CC_OUTPUT_$(1)=-Fo:$$(1)\n-    CFG_CREATE_ARCHIVE_$(1)=$$(AR_$(1)) -OUT:$$(1)\n+    CFG_CREATE_ARCHIVE_$(1)='$$(AR_$(1))' -OUT:$$(1)\n   else\n     CFG_CC_OUTPUT_$(1)=-o $$(1)\n     CFG_CREATE_ARCHIVE_$(1)=$$(AR_$(1)) crus $$(1)\n@@ -187,7 +187,7 @@ define CFG_MAKE_TOOLCHAIN\n     endif\n   endif\n \n-  CFG_COMPILE_C_$(1) = $$(CC_$(1)) \\\n+  CFG_COMPILE_C_$(1) = '$$(CC_$(1))' \\\n         $$(CFLAGS) \\\n         $$(CFG_GCCISH_CFLAGS) \\\n         $$(CFG_GCCISH_CFLAGS_$(1)) \\\n@@ -198,7 +198,7 @@ define CFG_MAKE_TOOLCHAIN\n         $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CXX_$(1)) \\\n+  CFG_COMPILE_CXX_$(1) = '$$(CXX_$(1))' \\\n         $$(CXXFLAGS) \\\n         $$(CFG_GCCISH_CFLAGS) \\\n         $$(CFG_GCCISH_CXXFLAGS) \\"}, {"sha": "9d45203b7b65076c83767c296b506901042e3b3f", "filename": "mk/tests.mk", "status": "modified", "additions": 21, "deletions": 68, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -450,6 +450,7 @@ CODEGEN_RS := $(call rwildcard,$(S)src/test/codegen/,*.rs)\n CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n INCREMENTAL_RS := $(call rwildcard,$(S)src/test/incremental/,*.rs)\n+RMAKE_RS := $(wildcard $(S)src/test/run-make/*/Makefile)\n RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n \n RPASS_TESTS := $(RPASS_RS)\n@@ -466,6 +467,7 @@ DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n+RMAKE_TESTS := $(RMAKE_RS)\n RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n@@ -533,6 +535,11 @@ CTEST_BUILD_BASE_incremental = incremental\n CTEST_MODE_incremental = incremental\n CTEST_RUNTOOL_incremental = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_rmake = run-make\n+CTEST_BUILD_BASE_rmake = run-make\n+CTEST_MODE_rmake = run-make\n+CTEST_RUNTOOL_rmake = $(CTEST_RUNTOOL)\n+\n CTEST_SRC_BASE_rustdocck = rustdoc\n CTEST_BUILD_BASE_rustdocck = rustdoc\n CTEST_MODE_rustdocck = rustdoc\n@@ -629,6 +636,11 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --host-rustcflags \"$(RUSTC_FLAGS_$(3)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(3))\" \\\n         --lldb-python-dir=$(CFG_LLDB_PYTHON_DIR) \\\n         --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n+\t--cc '$$(CC_$(3))' \\\n+\t--cxx '$$(CXX_$(3))' \\\n+\t--cflags \"$$(CFG_GCCISH_CFLAGS_$(3))\" \\\n+\t--llvm-components \"$$(LLVM_ALL_COMPONENTS_$(3))\" \\\n+\t--llvm-cxxflags \"$$(LLVM_CXXFLAGS_$(3))\" \\\n         $$(CTEST_TESTARGS)\n \n ifdef CFG_VALGRIND_RPASS\n@@ -658,6 +670,9 @@ CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n CTEST_DEPS_codegen-units_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_UNITS_TESTS)\n CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n+CTEST_DEPS_rmake_$(1)-T-$(2)-H-$(3) = $$(RMAKE_TESTS) \\\n+\t$$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n+\n CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n \t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t\t$(S)src/etc/htmldocck.py\n@@ -702,6 +717,10 @@ endif\n endif\n \n ifeq ($$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)),)\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n@@ -724,7 +743,8 @@ endif\n endef\n \n CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n-\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental\n+\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental \\\n+\trmake\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -1009,70 +1029,3 @@ endef\n \n $(foreach crate,$(TEST_CRATES), \\\n  $(eval $(call DEF_CHECK_CRATE,$(crate))))\n-\n-######################################################################\n-# RMAKE rules\n-######################################################################\n-\n-RMAKE_TESTS := $(shell ls -d $(S)src/test/run-make/*/)\n-RMAKE_TESTS := $(RMAKE_TESTS:$(S)src/test/run-make/%/=%)\n-\n-define DEF_RMAKE_FOR_T_H\n-# $(1) the stage\n-# $(2) target triple\n-# $(3) host triple\n-\n-\n-ifeq ($(2)$(3),$$(CFG_BUILD)$$(CFG_BUILD))\n-check-stage$(1)-T-$(2)-H-$(3)-rmake-exec: \\\n-\t\t$$(call TEST_OK_FILE,$(1),$(2),$(3),rmake)\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),rmake): \\\n-\t\t$$(RMAKE_TESTS:%=$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok)\n-\t@touch $$@\n-\n-$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n-$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n-$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n-\texport MSVC_LIB := \"$$(CFG_MSVC_LIB_$$(HOST_$(3)))\"\n-$(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n-\t\t$(S)src/test/run-make/%/Makefile \\\n-\t\t$$(CSREQ$(1)_T_$(2)_H_$(3))\n-\t@rm -rf $(3)/test/run-make/$$*\n-\t@mkdir -p $(3)/test/run-make/$$*\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(CFG_PYTHON) $(S)src/etc/maketest.py $$(dir $$<) \\\n-        $$(MAKE) \\\n-\t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t    $(3)/test/run-make/$$* \\\n-\t    '$$(CC_$(3))' \\\n-\t    \"$$(CFG_GCCISH_CFLAGS_$(3))\" \\\n-\t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t    \"$$(TESTNAME)\" \\\n-\t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\\n-\t    \"$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\" \\\n-\t    \"$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\" \\\n-\t    $(1) \\\n-\t    $$(S) \\\n-\t    $(3) \\\n-\t    \"$$(LLVM_LIBDIR_RUSTFLAGS_$(3))\" \\\n-\t    \"$$(LLVM_ALL_COMPONENTS_$(3))\" \\\n-\t    \"$$(LLVM_CXXFLAGS_$(3))\" \\\n-\t    '$$(CXX_$(3))'\n-\t@touch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-# FIXME #11094 - The above rule doesn't work right for multiple targets\n-check-stage$(1)-T-$(2)-H-$(3)-rmake-exec:\n-\t@true\n-\n-endif\n-\n-\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach host,$(CFG_HOST), \\\n-   $(eval $(call DEF_RMAKE_FOR_T_H,$(stage),$(target),$(host))))))"}, {"sha": "a376b021a8a82243283dfb6f0235c3bb17631284", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -12,6 +12,8 @@ use std::fs;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n+use build_helper::output;\n+\n use build::{Build, Compiler};\n \n pub fn linkcheck(build: &Build, stage: u32, host: &str) {\n@@ -112,6 +114,33 @@ pub fn compiletest(build: &Build,\n         cmd.arg(\"--verbose\");\n     }\n \n+    if suite == \"run-make\" {\n+        let llvm_config = build.llvm_config(target);\n+        let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n+        let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n+        cmd.arg(\"--cc\").arg(build.cc(target))\n+           .arg(\"--cxx\").arg(build.cxx(target))\n+           .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n+           .arg(\"--llvm-components\").arg(llvm_components.trim())\n+           .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n+    } else {\n+        cmd.arg(\"--cc\").arg(\"\")\n+           .arg(\"--cxx\").arg(\"\")\n+           .arg(\"--cflags\").arg(\"\")\n+           .arg(\"--llvm-components\").arg(\"\")\n+           .arg(\"--llvm-cxxflags\").arg(\"\");\n+    }\n+\n+    // Running a C compiler on MSVC requires a few env vars to be set, to be\n+    // sure to set them here.\n+    if target.contains(\"msvc\") {\n+        for &(ref k, ref v) in build.cc[target].0.env() {\n+            if k != \"PATH\" {\n+                cmd.env(k, v);\n+            }\n+        }\n+    }\n+\n     build.run(&mut cmd);\n }\n "}, {"sha": "97be285ce01d0eae2aab7ff85ff77c2ca23e2a61", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -314,6 +314,10 @@ impl Build {\n                 CheckErrorIndex { compiler } => {\n                     check::error_index(self, &compiler);\n                 }\n+                CheckRMake { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-make\", \"run-make\")\n+                }\n \n                 DistDocs { stage } => dist::docs(self, stage, target.target),\n                 DistMingw { _dummy } => dist::mingw(self, target.target),"}, {"sha": "59d644730a2d1fd289b0e06d4088a85e86b1811c", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -98,6 +98,7 @@ macro_rules! targets {\n             (check_cfail_full, CheckCFailFull { compiler: Compiler<'a> }),\n             (check_docs, CheckDocs { compiler: Compiler<'a> }),\n             (check_error_index, CheckErrorIndex { compiler: Compiler<'a> }),\n+            (check_rmake, CheckRMake { compiler: Compiler<'a> }),\n \n             // Distribution targets, creating tarballs\n             (dist, Dist { stage: u32 }),\n@@ -345,6 +346,7 @@ impl<'a> Step<'a> {\n                     self.check_cfail_full(compiler),\n                     self.check_error_index(compiler),\n                     self.check_docs(compiler),\n+                    self.check_rmake(compiler),\n                     self.check_linkcheck(stage),\n                     self.check_tidy(stage),\n                     self.dist(stage),\n@@ -384,7 +386,8 @@ impl<'a> Step<'a> {\n                 ]\n             }\n             Source::CheckRPassFull { compiler } |\n-            Source::CheckCFailFull { compiler } => {\n+            Source::CheckCFailFull { compiler } |\n+            Source::CheckRMake { compiler } => {\n                 vec![self.librustc(compiler),\n                      self.tool_compiletest(compiler.stage)]\n             }"}, {"sha": "c7d17b23bffff6f9f467ea2fadc5f674b86b9eb7", "filename": "src/etc/maketest.py", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/092b0738b7f00740c997a3fb99dd0b8b50c4c157/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/092b0738b7f00740c997a3fb99dd0b8b50c4c157/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=092b0738b7f00740c997a3fb99dd0b8b50c4c157", "patch": "@@ -1,96 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import subprocess\n-import os\n-import sys\n-\n-target_triple = sys.argv[14]\n-\n-def normalize_path(v):\n-    \"\"\"msys1/msys2 automatically converts `/abs/path1:/abs/path2` into\n-    `c:\\real\\abs\\path1;c:\\real\\abs\\path2` (semicolons) if shell thinks\n-    the value is list of paths.\n-    (if there is only one path, it becomes `c:/real/abs/path`.)\n-    this causes great confusion and error: shell and Makefile doesn't like\n-    windows paths so it is really error-prone. revert it for peace.\"\"\"\n-    v = v.replace('\\\\', '/')\n-    # c:/path -> /c/path\n-    # \"c:/path\" -> \"/c/path\"\n-    start = v.find(':/')\n-    while start != -1:\n-        v = v[:start - 1] + '/' + v[start - 1:start] + v[start + 1:]\n-        start = v.find(':/')\n-    return v\n-\n-\n-def putenv(name, value):\n-    if os.name == 'nt':\n-        value = normalize_path(value)\n-    os.putenv(name, value)\n-\n-\n-def convert_path_spec(name, value):\n-    if os.name == 'nt' and name != 'PATH':\n-        value = \":\".join(normalize_path(v) for v in value.split(\";\"))\n-    return value\n-\n-make = sys.argv[2]\n-putenv('RUSTC', os.path.abspath(sys.argv[3]))\n-putenv('TMPDIR', os.path.abspath(sys.argv[4]))\n-putenv('CC', sys.argv[5] + ' ' + sys.argv[6])\n-putenv('CFLAGS', sys.argv[6])\n-putenv('RUSTDOC', os.path.abspath(sys.argv[7]))\n-filt = sys.argv[8]\n-putenv('LD_LIB_PATH_ENVVAR', sys.argv[9])\n-putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[10]))\n-putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[11]))\n-putenv('RUST_BUILD_STAGE', sys.argv[12])\n-putenv('S', os.path.abspath(sys.argv[13]))\n-putenv('RUSTFLAGS', sys.argv[15])\n-putenv('LLVM_COMPONENTS', sys.argv[16])\n-putenv('LLVM_CXXFLAGS', sys.argv[17])\n-putenv('CXX', sys.argv[18])\n-putenv('PYTHON', sys.executable)\n-os.putenv('TARGET', target_triple)\n-\n-if 'msvc' in target_triple:\n-    os.putenv('IS_MSVC', '1')\n-\n-if filt not in sys.argv[1]:\n-    sys.exit(0)\n-print('maketest: ' + os.path.basename(os.path.dirname(sys.argv[1])))\n-\n-path = sys.argv[1]\n-if path[-1] == '/':\n-    # msys1 has a bug that `make` fails to include `../tools.mk` (parent dir)\n-    # if `-C path` option is given and `path` is absolute directory with\n-    # trailing slash (`c:/path/to/test/`).\n-    # the easist workaround is to remove the slash (`c:/path/to/test`).\n-    # msys2 seems to fix this problem.\n-    path = path[:-1]\n-\n-proc = subprocess.Popen([make, '-C', path],\n-                        stdout=subprocess.PIPE,\n-                        stderr=subprocess.PIPE)\n-out, err = proc.communicate()\n-i = proc.wait()\n-\n-if i != 0:\n-    print \"\"\"\\\n------ %s --------------------\n------- stdout ---------------------------------------------\n-%s\n------- stderr ---------------------------------------------\n-%s\n-------        ---------------------------------------------\n-\"\"\" % (sys.argv[1], out, err)\n-\n-    sys.exit(i)"}, {"sha": "1e8568626a6a15d25c30ee27871e18badca1ccc7", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -2,6 +2,6 @@\n \n all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n-\t$(HOST_RPATH_ENV) $(RUSTDOC) --test --cfg 'feature=\"bar\"' \\\n+\t$(HOST_RPATH_ENV) '$(RUSTDOC)' --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n \t\tgrep -q 'test foo_0 ... ok'"}, {"sha": "38afa42a2935abfabf8beface4890d8cfb07d24d", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -5,7 +5,7 @@ HOST_RPATH_ENV = \\\n TARGET_RPATH_ENV = \\\n     $(LD_LIB_PATH_ENVVAR)=\"$(TMPDIR):$(TARGET_RPATH_DIR):$($(LD_LIB_PATH_ENVVAR))\"\n \n-BARE_RUSTC := $(HOST_RPATH_ENV) $(RUSTC)\n+BARE_RUSTC := $(HOST_RPATH_ENV) '$(RUSTC)'\n RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR) $(RUSTFLAGS)\n #CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py"}, {"sha": "e7019de8f4315d1a55efc7d084156df433a5ed64", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -27,6 +27,7 @@ pub enum Mode {\n     Rustdoc,\n     CodegenUnits,\n     Incremental,\n+    RunMake,\n }\n \n impl FromStr for Mode {\n@@ -45,6 +46,7 @@ impl FromStr for Mode {\n           \"rustdoc\" => Ok(Rustdoc),\n           \"codegen-units\" => Ok(CodegenUnits),\n           \"incremental\" => Ok(Incremental),\n+          \"run-make\" => Ok(RunMake),\n           _ => Err(()),\n         }\n     }\n@@ -65,6 +67,7 @@ impl fmt::Display for Mode {\n             Rustdoc => \"rustdoc\",\n             CodegenUnits => \"codegen-units\",\n             Incremental => \"incremental\",\n+            RunMake => \"run-make\",\n         }, f)\n     }\n }\n@@ -165,4 +168,12 @@ pub struct Config {\n \n     // Print one character per test instead of one line\n     pub quiet: bool,\n+\n+    // Configuration for various run-make tests frobbing things like C compilers\n+    // or querying about various LLVM component information.\n+    pub cc: String,\n+    pub cxx: String,\n+    pub cflags: String,\n+    pub llvm_components: String,\n+    pub llvm_cxxflags: String,\n }"}, {"sha": "c8df8739f5271ec998b4595268a3923bf2e1ebbe", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -291,6 +291,9 @@ pub fn early_props(config: &Config, testfile: &Path) -> EarlyProps {\n fn iter_header(testfile: &Path,\n                cfg: Option<&str>,\n                it: &mut FnMut(&str)) {\n+    if testfile.is_dir() {\n+        return\n+    }\n     let rdr = BufReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {\n         // Assume that any directives will be found before the first"}, {"sha": "26382967c6b610adc28ecee23a4bcd74dbdd41b1", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -35,7 +35,7 @@ use std::io;\n use std::path::{Path, PathBuf};\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n-use common::{Pretty, DebugInfoGdb, DebugInfoLldb};\n+use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n use test::TestPaths;\n use util::logv;\n \n@@ -100,6 +100,11 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n           optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\"),\n+          reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\"),\n+          reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\"),\n+          reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\"),\n+          reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\"),\n+          reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\"),\n           optflag(\"h\", \"help\", \"show this message\"));\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -175,6 +180,12 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n+\n+        cc: matches.opt_str(\"cc\").unwrap(),\n+        cxx: matches.opt_str(\"cxx\").unwrap(),\n+        cflags: matches.opt_str(\"cflags\").unwrap(),\n+        llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n+        llvm_cxxflags: matches.opt_str(\"llvm-cxxflags\").unwrap(),\n     }\n }\n \n@@ -307,9 +318,19 @@ fn collect_tests_from_dir(config: &Config,\n     // `compiletest-ignore-dir`.\n     for file in fs::read_dir(dir)? {\n         let file = file?;\n-        if file.file_name() == *\"compiletest-ignore-dir\" {\n+        let name = file.file_name();\n+        if name == *\"compiletest-ignore-dir\" {\n             return Ok(());\n         }\n+        if name == *\"Makefile\" && config.mode == Mode::RunMake {\n+            let paths = TestPaths {\n+                file: dir.to_path_buf(),\n+                base: base.to_path_buf(),\n+                relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n+            };\n+            tests.push(make_test(config, &paths));\n+            return Ok(())\n+        }\n     }\n \n     let dirs = fs::read_dir(dir)?;"}, {"sha": "53b7cd059be275f8ccd64db3811a422ec8dd5ab6", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -14,16 +14,20 @@ use std::io::prelude::*;\n use std::path::PathBuf;\n use std::process::{ExitStatus, Command, Child, Output, Stdio};\n \n-fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n-    // Need to be sure to put both the lib_path and the aux path in the dylib\n-    // search path for the child.\n-    let var = if cfg!(windows) {\n+pub fn dylib_env_var() -> &'static str {\n+    if cfg!(windows) {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n-    };\n+    }\n+}\n+\n+fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n+    // Need to be sure to put both the lib_path and the aux path in the dylib\n+    // search path for the child.\n+    let var = dylib_env_var();\n     let mut path = env::split_paths(&env::var_os(var).unwrap_or(OsString::new()))\n                        .collect::<Vec<_>>();\n     if let Some(p) = aux_path {"}, {"sha": "fb296d57ebf8d9800041046624a8ece97013567e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 107, "deletions": 10, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126e09e5e5f0eeb7098188126e57169c3a622563/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=126e09e5e5f0eeb7098188126e57169c3a622563", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n-use common::{Incremental};\n+use common::{Incremental, RunMake};\n use errors::{self, ErrorKind, Error};\n use json;\n use header::TestProps;\n@@ -24,7 +24,7 @@ use std::env;\n use std::collections::HashSet;\n use std::fmt;\n use std::fs::{self, File};\n-use std::io::BufReader;\n+use std::io::{self, BufReader};\n use std::io::prelude::*;\n use std::net::TcpStream;\n use std::path::{Path, PathBuf};\n@@ -62,6 +62,7 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n         Rustdoc => run_rustdoc_test(&config, &props, &testpaths),\n         CodegenUnits => run_codegen_units_test(&config, &props, &testpaths),\n         Incremental => run_incremental_test(&config, &props, &testpaths),\n+        RunMake => run_rmake_test(&config, &props, &testpaths),\n     }\n }\n \n@@ -1233,7 +1234,7 @@ fn compose_and_run_compiler(config: &Config, props: &TestProps,\n                             testpaths: &TestPaths, args: ProcArgs,\n                             input: Option<String>) -> ProcRes {\n     if !props.aux_builds.is_empty() {\n-        ensure_dir(&aux_output_dir_name(config, testpaths));\n+        create_dir_racy(&aux_output_dir_name(config, testpaths));\n     }\n \n     let aux_dir = aux_output_dir_name(config, testpaths);\n@@ -1307,11 +1308,6 @@ fn compose_and_run_compiler(config: &Config, props: &TestProps,\n                     input)\n }\n \n-fn ensure_dir(path: &Path) {\n-    if path.is_dir() { return; }\n-    fs::create_dir_all(path).unwrap();\n-}\n-\n fn compose_and_run(config: &Config,\n                    testpaths: &TestPaths,\n                    ProcArgs{ args, prog }: ProcArgs,\n@@ -1373,6 +1369,7 @@ fn make_compile_args<F>(config: &Config,\n         DebugInfoLldb |\n         Codegen |\n         Rustdoc |\n+        RunMake |\n         CodegenUnits => {\n             // do not use JSON output\n         }\n@@ -1520,6 +1517,7 @@ fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n }\n \n fn dump_output(config: &Config, testpaths: &TestPaths, out: &str, err: &str) {\n+    create_dir_racy(output_base_name(config, testpaths).parent().unwrap());\n     dump_output_file(config, testpaths, out, \"out\");\n     dump_output_file(config, testpaths, err, \"err\");\n     maybe_dump_to_stdout(config, out, err);\n@@ -1825,7 +1823,7 @@ fn run_rustdoc_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n \n     let out_dir = output_base_name(config, testpaths);\n     let _ = fs::remove_dir_all(&out_dir);\n-    ensure_dir(&out_dir);\n+    create_dir_racy(&out_dir);\n \n     let proc_res = document(config, props, testpaths, &out_dir);\n     if !proc_res.status.success() {\n@@ -2029,7 +2027,7 @@ fn run_incremental_test(config: &Config, props: &TestProps, testpaths: &TestPath\n     if incremental_dir.exists() {\n         fs::remove_dir_all(&incremental_dir).unwrap();\n     }\n-    fs::create_dir_all(&incremental_dir).unwrap();\n+    create_dir_racy(&incremental_dir);\n \n     if config.verbose {\n         print!(\"incremental_dir={}\", incremental_dir.display());\n@@ -2063,3 +2061,102 @@ fn run_incremental_test(config: &Config, props: &TestProps, testpaths: &TestPath\n         }\n     }\n }\n+\n+fn run_rmake_test(config: &Config, _props: &TestProps, testpaths: &TestPaths) {\n+    let cwd = env::current_dir().unwrap();\n+    let src_root = config.src_base.parent().unwrap().parent().unwrap()\n+                                  .parent().unwrap();\n+    let src_root = cwd.join(&src_root);\n+\n+    let tmpdir = cwd.join(output_base_name(config, testpaths));\n+    if tmpdir.exists() {\n+        aggressive_rm_rf(&tmpdir).unwrap();\n+    }\n+    create_dir_racy(&tmpdir);\n+\n+    let mut cmd = Command::new(\"make\");\n+    cmd.current_dir(&testpaths.file)\n+       .env(\"TARGET\", &config.target)\n+       .env(\"PYTHON\", &config.docck_python)\n+       .env(\"S\", src_root)\n+       .env(\"RUST_BUILD_STAGE\", &config.stage_id)\n+       .env(\"RUSTC\", cwd.join(&config.rustc_path))\n+       .env(\"RUSTDOC\", cwd.join(&config.rustdoc_path))\n+       .env(\"TMPDIR\", &tmpdir)\n+       .env(\"LD_LIB_PATH_ENVVAR\", procsrv::dylib_env_var())\n+       .env(\"HOST_RPATH_DIR\", cwd.join(&config.compile_lib_path))\n+       .env(\"TARGET_RPATH_DIR\", cwd.join(&config.run_lib_path))\n+       .env(\"LLVM_COMPONENTS\", &config.llvm_components)\n+       .env(\"LLVM_CXXFLAGS\", &config.llvm_cxxflags);\n+\n+    if config.target.contains(\"msvc\") {\n+        // We need to pass a path to `lib.exe`, so assume that `cc` is `cl.exe`\n+        // and that `lib.exe` lives next to it.\n+        let lib = Path::new(&config.cc).parent().unwrap().join(\"lib.exe\");\n+\n+        // MSYS doesn't like passing flags of the form `/foo` as it thinks it's\n+        // a path and instead passes `C:\\msys64\\foo`, so convert all\n+        // `/`-arguments to MSVC here to `-` arguments.\n+        let cflags = config.cflags.split(' ').map(|s| s.replace(\"/\", \"-\"))\n+                           .collect::<Vec<_>>().join(\" \");\n+\n+        cmd.env(\"IS_MSVC\", \"1\")\n+           .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n+           .env(\"CC\", format!(\"'{}' {}\", config.cc, cflags))\n+           .env(\"CXX\", &config.cxx);\n+    } else {\n+        cmd.env(\"CC\", format!(\"{} {}\", config.cc, config.cflags))\n+           .env(\"CXX\", format!(\"{} {}\", config.cxx, config.cflags));\n+    }\n+\n+    let output = cmd.output().expect(\"failed to spawn `make`\");\n+    if !output.status.success() {\n+        let res = ProcRes {\n+            status: Status::Normal(output.status),\n+            stdout: String::from_utf8_lossy(&output.stdout).into_owned(),\n+            stderr: String::from_utf8_lossy(&output.stderr).into_owned(),\n+            cmdline: format!(\"{:?}\", cmd),\n+        };\n+        fatal_proc_rec(None, \"make failed\", &res);\n+    }\n+}\n+\n+fn aggressive_rm_rf(path: &Path) -> io::Result<()> {\n+    for e in try!(path.read_dir()) {\n+        let entry = try!(e);\n+        let path = entry.path();\n+        if try!(entry.file_type()).is_dir() {\n+            try!(aggressive_rm_rf(&path));\n+        } else {\n+            // Remove readonly files as well on windows (by default we can't)\n+            try!(fs::remove_file(&path).or_else(|e| {\n+                if cfg!(windows) && e.kind() == io::ErrorKind::PermissionDenied {\n+                    let mut meta = try!(entry.metadata()).permissions();\n+                    meta.set_readonly(false);\n+                    try!(fs::set_permissions(&path, meta));\n+                    fs::remove_file(&path)\n+                } else {\n+                    Err(e)\n+                }\n+            }))\n+        }\n+    }\n+    fs::remove_dir(path)\n+}\n+\n+// Like std::fs::create_dir_all, except handles concurrent calls among multiple\n+// threads or processes.\n+fn create_dir_racy(path: &Path) {\n+    match fs::create_dir(path) {\n+        Ok(()) => return,\n+        Err(ref e) if e.kind() == io::ErrorKind::AlreadyExists => return,\n+        Err(ref e) if e.kind() == io::ErrorKind::NotFound => {}\n+        Err(e) => panic!(\"failed to create dir {:?}: {}\", path, e),\n+    }\n+    create_dir_racy(path.parent().unwrap());\n+    match fs::create_dir(path) {\n+        Ok(()) => {}\n+        Err(ref e) if e.kind() == io::ErrorKind::AlreadyExists => {}\n+        Err(e) => panic!(\"failed to create dir {:?}: {}\", path, e),\n+    }\n+}"}]}