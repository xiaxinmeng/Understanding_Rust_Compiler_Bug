{"sha": "cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "node_id": "C_kwDOAAsO6NoAKGNmNWU3NTM4OWRkMGM2N2ZmZThlMTE2OWNiYmFlN2ExZDBhYmUwNWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T09:07:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-30T09:07:16Z"}, "message": "Auto merge of #2090 - dtolnay-contrib:addcarry, r=oli-obk\n\nImplement llvm.x86.addcarry.64\n\nThis is the only new shim I need for https://github.com/dtolnay/precise/issues/2. It's used by the `num-bigint` crate for bigint addition.", "tree": {"sha": "985823738cb1c7a00ccf7aaa835a140c0b07525b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/985823738cb1c7a00ccf7aaa835a140c0b07525b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "html_url": "https://github.com/rust-lang/rust/commit/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9407f8687637716ec57001f174f204c918fe40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9407f8687637716ec57001f174f204c918fe40b", "html_url": "https://github.com/rust-lang/rust/commit/c9407f8687637716ec57001f174f204c918fe40b"}, {"sha": "a893618854b3c22fbe54a9b771ade85edada4143", "url": "https://api.github.com/repos/rust-lang/rust/commits/a893618854b3c22fbe54a9b771ade85edada4143", "html_url": "https://github.com/rust-lang/rust/commit/a893618854b3c22fbe54a9b771ade85edada4143"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8a79ed03162e323ebb39aea07eb5ac4b32869045", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "patch": "@@ -671,6 +671,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Architecture-specific shims\n+            \"llvm.x86.addcarry.64\" if this.tcx.sess.target.arch == \"x86_64\" => {\n+                // Computes u8+u64+u64, returning tuple (u8,u64) comprising the output carry and truncated sum.\n+                let &[ref c_in, ref a, ref b] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n+                let c_in = this.read_scalar(c_in)?.to_u8()?;\n+                let a = this.read_scalar(a)?.to_u64()?;\n+                let b = this.read_scalar(b)?.to_u64()?;\n+\n+                let wide_sum = c_in as u128 + a as u128 + b as u128;\n+                let (c_out, sum) = ((wide_sum >> 64) as u8, wide_sum as u64);\n+\n+                let c_out_field = this.place_field(dest, 0)?;\n+                this.write_scalar(Scalar::from_u8(c_out), &c_out_field)?;\n+                let sum_field = this.place_field(dest, 1)?;\n+                this.write_scalar(Scalar::from_u64(sum), &sum_field)?;\n+            }\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n                 let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.yield_active_thread();"}, {"sha": "88cd782e70a467fad604b5f9c421f7bcee3e1036", "filename": "tests/run-pass/intrinsics-x86.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e/tests%2Frun-pass%2Fintrinsics-x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e/tests%2Frun-pass%2Fintrinsics-x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-x86.rs?ref=cf5e75389dd0c67ffe8e1169cbbae7a1d0abe05e", "patch": "@@ -0,0 +1,22 @@\n+#[cfg(target_arch = \"x86_64\")]\n+mod x86_64 {\n+    use core::arch::x86_64 as arch;\n+\n+    fn adc(c_in: u8, a: u64, b: u64) -> (u8, u64) {\n+        let mut sum = 0;\n+        // SAFETY: There are no safety requirements for calling `_addcarry_u64`.\n+        // It's just unsafe for API consistency with other intrinsics.\n+        let c_out = unsafe { arch::_addcarry_u64(c_in, a, b, &mut sum) };\n+        (c_out, sum)\n+    }\n+\n+    pub fn main() {\n+        assert_eq!(adc(1, 1, 1), (0, 3));\n+        assert_eq!(adc(3, u64::MAX, u64::MAX), (2, 1));\n+    }\n+}\n+\n+fn main() {\n+    #[cfg(target_arch = \"x86_64\")]\n+    x86_64::main();\n+}"}]}