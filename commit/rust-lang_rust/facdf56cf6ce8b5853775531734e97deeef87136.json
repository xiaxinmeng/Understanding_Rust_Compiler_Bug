{"sha": "facdf56cf6ce8b5853775531734e97deeef87136", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhY2RmNTZjZjZjZThiNTg1Mzc3NTUzMTczNGU5N2RlZWVmODcxMzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T12:34:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T12:34:31Z"}, "message": "Merge #3807\n\n3807: Generalize rustfmt config r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e93efc23b3eeb2e40ccc2fb0069a4d2e693b8407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93efc23b3eeb2e40ccc2fb0069a4d2e693b8407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/facdf56cf6ce8b5853775531734e97deeef87136", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehIpXCRBK7hj4Ov3rIwAAdHIIAJbEt2JQr9ktb7atdDyQzQmr\nmJm/KB5nPMOn11ziJigrzfMSKsVbo1PJmHDIk22QQzcKaEhAe0AEzev9uED3Q6yO\nN9WnyZfsK92Kc5zMaieieC5ys35UFoND1Mcw05Nnw3Jxu9Bc1mcGR7//BQNZI6or\nIiQoxrP0mihihvxZr3FfQwxL6PQUzd2Ti5rGK9tveqO7iKozyfJzlwsa3r1O2ArV\natnKzrHmuDTz6b9krpwGKgW1Wh7uR4txXU6+ygf3iJyhl6C5gRruwxo+I5HynhNw\nxe0CMaUi7Qf1t1R2+19KaVUUwAR8fJRUJYg/axQYN4wcVn3mE8G/WopTEu5mrYs=\n=uNj2\n-----END PGP SIGNATURE-----\n", "payload": "tree e93efc23b3eeb2e40ccc2fb0069a4d2e693b8407\nparent a0cc66475ada092daffd2a4df3df7e67858737c5\nparent b9bf29019d1dd733d45bae8aed986ecd330565bc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585744471 +0000\ncommitter GitHub <noreply@github.com> 1585744471 +0000\n\nMerge #3807\n\n3807: Generalize rustfmt config r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/facdf56cf6ce8b5853775531734e97deeef87136", "html_url": "https://github.com/rust-lang/rust/commit/facdf56cf6ce8b5853775531734e97deeef87136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/facdf56cf6ce8b5853775531734e97deeef87136/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0cc66475ada092daffd2a4df3df7e67858737c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cc66475ada092daffd2a4df3df7e67858737c5", "html_url": "https://github.com/rust-lang/rust/commit/a0cc66475ada092daffd2a4df3df7e67858737c5"}, {"sha": "b9bf29019d1dd733d45bae8aed986ecd330565bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bf29019d1dd733d45bae8aed986ecd330565bc", "html_url": "https://github.com/rust-lang/rust/commit/b9bf29019d1dd733d45bae8aed986ecd330565bc"}], "stats": {"total": 154, "additions": 94, "deletions": 60}, "files": [{"sha": "fb7895ce078523b0d24e4c87ff29d6a0b2519e0f", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=facdf56cf6ce8b5853775531734e97deeef87136", "patch": "@@ -9,9 +9,77 @@\n \n use rustc_hash::FxHashMap;\n \n+use lsp_types::TextDocumentClientCapabilities;\n+use ra_flycheck::FlycheckConfig;\n+use ra_ide::InlayHintsConfig;\n use ra_project_model::CargoFeatures;\n use serde::{Deserialize, Deserializer};\n \n+#[derive(Debug, Clone)]\n+pub struct Config {\n+    pub publish_decorations: bool,\n+    pub supports_location_link: bool,\n+    pub line_folding_only: bool,\n+    pub inlay_hints: InlayHintsConfig,\n+    pub rustfmt: RustfmtConfig,\n+    pub check: Option<FlycheckConfig>,\n+    pub vscode_lldb: bool,\n+    pub proc_macro_srv: Option<String>,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub enum RustfmtConfig {\n+    Rustfmt {\n+        extra_args: Vec<String>,\n+    },\n+    #[allow(unused)]\n+    CustomCommand {\n+        command: String,\n+        args: Vec<String>,\n+    },\n+}\n+\n+impl Default for RustfmtConfig {\n+    fn default() -> Self {\n+        RustfmtConfig::Rustfmt { extra_args: Vec::new() }\n+    }\n+}\n+\n+pub(crate) fn get_config(\n+    config: &ServerConfig,\n+    text_document_caps: Option<&TextDocumentClientCapabilities>,\n+) -> Config {\n+    Config {\n+        publish_decorations: config.publish_decorations,\n+        supports_location_link: text_document_caps\n+            .and_then(|it| it.definition)\n+            .and_then(|it| it.link_support)\n+            .unwrap_or(false),\n+        line_folding_only: text_document_caps\n+            .and_then(|it| it.folding_range.as_ref())\n+            .and_then(|it| it.line_folding_only)\n+            .unwrap_or(false),\n+        inlay_hints: InlayHintsConfig {\n+            type_hints: config.inlay_hints_type,\n+            parameter_hints: config.inlay_hints_parameter,\n+            chaining_hints: config.inlay_hints_chaining,\n+            max_length: config.inlay_hints_max_length,\n+        },\n+        check: if config.cargo_watch_enable {\n+            Some(FlycheckConfig::CargoCommand {\n+                command: config.cargo_watch_command.clone(),\n+                all_targets: config.cargo_watch_all_targets,\n+                extra_args: config.cargo_watch_args.clone(),\n+            })\n+        } else {\n+            None\n+        },\n+        rustfmt: RustfmtConfig::Rustfmt { extra_args: config.rustfmt_args.clone() },\n+        vscode_lldb: config.vscode_lldb,\n+        proc_macro_srv: None, // FIXME: get this from config\n+    }\n+}\n+\n /// Client provided initialization options\n #[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n #[serde(rename_all = \"camelCase\", default)]"}, {"sha": "de40e2ac2c8345190385d0ae82c4f8a930559b76", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=facdf56cf6ce8b5853775531734e97deeef87136", "patch": "@@ -21,8 +21,8 @@ use lsp_types::{\n     WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n };\n-use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckTask, FlycheckConfig};\n-use ra_ide::{Canceled, FileId, InlayHintsConfig, LibraryData, SourceRootId};\n+use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckTask};\n+use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n@@ -31,14 +31,15 @@ use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n use crate::{\n+    config::get_config,\n     diagnostics::DiagnosticTask,\n     feature_flags::FeatureFlags,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n     },\n     req,\n-    world::{Config, WorldSnapshot, WorldState},\n+    world::{WorldSnapshot, WorldState},\n     Result, ServerConfig,\n };\n use req::ConfigurationParams;\n@@ -81,41 +82,6 @@ fn get_feature_flags(config: &ServerConfig, connection: &Connection) -> FeatureF\n     ff\n }\n \n-fn get_config(\n-    config: &ServerConfig,\n-    text_document_caps: Option<&TextDocumentClientCapabilities>,\n-) -> Config {\n-    Config {\n-        publish_decorations: config.publish_decorations,\n-        supports_location_link: text_document_caps\n-            .and_then(|it| it.definition)\n-            .and_then(|it| it.link_support)\n-            .unwrap_or(false),\n-        line_folding_only: text_document_caps\n-            .and_then(|it| it.folding_range.as_ref())\n-            .and_then(|it| it.line_folding_only)\n-            .unwrap_or(false),\n-        inlay_hints: InlayHintsConfig {\n-            type_hints: config.inlay_hints_type,\n-            parameter_hints: config.inlay_hints_parameter,\n-            chaining_hints: config.inlay_hints_chaining,\n-            max_length: config.inlay_hints_max_length,\n-        },\n-        check: if config.cargo_watch_enable {\n-            Some(FlycheckConfig::CargoCommand {\n-                command: config.cargo_watch_command.clone(),\n-                all_targets: config.cargo_watch_all_targets,\n-                extra_args: config.cargo_watch_args.clone(),\n-            })\n-        } else {\n-            None\n-        },\n-        rustfmt_args: config.rustfmt_args.clone(),\n-        vscode_lldb: config.vscode_lldb,\n-        proc_macro_srv: None, // FIXME: get this from config\n-    }\n-}\n-\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,"}, {"sha": "bb99b38a8e7fc208848bc3d7a4a2962d7f3def6a", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=facdf56cf6ce8b5853775531734e97deeef87136", "patch": "@@ -31,6 +31,7 @@ use stdx::format_to;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n+    config::RustfmtConfig,\n     conv::{\n         to_call_hierarchy_item, to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith,\n         TryConvWithToVec,\n@@ -610,13 +611,24 @@ pub fn handle_formatting(\n     let file_line_index = world.analysis().file_line_index(file_id)?;\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n-    let mut rustfmt = process::Command::new(\"rustfmt\");\n-    rustfmt.args(&world.config.rustfmt_args);\n-    if let Some(&crate_id) = crate_ids.first() {\n-        // Assume all crates are in the same edition\n-        let edition = world.analysis().crate_edition(crate_id)?;\n-        rustfmt.args(&[\"--edition\", &edition.to_string()]);\n-    }\n+    let mut rustfmt = match &world.config.rustfmt {\n+        RustfmtConfig::Rustfmt { extra_args } => {\n+            let mut cmd = process::Command::new(\"rustfmt\");\n+            cmd.args(extra_args);\n+            if let Some(&crate_id) = crate_ids.first() {\n+                // Assume all crates are in the same edition\n+                let edition = world.analysis().crate_edition(crate_id)?;\n+                cmd.arg(\"--edition\");\n+                cmd.arg(edition.to_string());\n+            }\n+            cmd\n+        }\n+        RustfmtConfig::CustomCommand { command, args } => {\n+            let mut cmd = process::Command::new(command);\n+            cmd.args(args);\n+            cmd\n+        }\n+    };\n \n     if let Ok(path) = params.text_document.uri.to_file_path() {\n         if let Some(parent) = path.parent() {"}, {"sha": "124de4d8ec751c0382177c2c8020e96764a44264", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facdf56cf6ce8b5853775531734e97deeef87136/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=facdf56cf6ce8b5853775531734e97deeef87136", "patch": "@@ -11,17 +11,17 @@ use std::{\n use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n-use ra_flycheck::{url_from_path_with_drive_lowercasing, Flycheck, FlycheckConfig};\n+use ra_flycheck::{url_from_path_with_drive_lowercasing, Flycheck};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsConfig, LibraryData,\n-    SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use stdx::format_to;\n \n use crate::{\n+    config::Config,\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     feature_flags::FeatureFlags,\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n@@ -51,18 +51,6 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &Config) -> Option<F\n         })\n }\n \n-#[derive(Debug, Clone)]\n-pub struct Config {\n-    pub publish_decorations: bool,\n-    pub supports_location_link: bool,\n-    pub line_folding_only: bool,\n-    pub inlay_hints: InlayHintsConfig,\n-    pub rustfmt_args: Vec<String>,\n-    pub check: Option<FlycheckConfig>,\n-    pub vscode_lldb: bool,\n-    pub proc_macro_srv: Option<String>,\n-}\n-\n /// `WorldState` is the primary mutable state of the language server\n ///\n /// The most interesting components are `vfs`, which stores a consistent"}]}