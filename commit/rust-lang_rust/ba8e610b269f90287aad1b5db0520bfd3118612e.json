{"sha": "ba8e610b269f90287aad1b5db0520bfd3118612e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGU2MTBiMjY5ZjkwMjg3YWFkMWI1ZGIwNTIwYmZkMzExODYxMmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T19:26:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T12:57:04Z"}, "message": "Inline driver::codegen_crate", "tree": {"sha": "585e9062140e8a4338b94fe7fd1befe838dbe062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585e9062140e8a4338b94fe7fd1befe838dbe062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8e610b269f90287aad1b5db0520bfd3118612e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8e610b269f90287aad1b5db0520bfd3118612e", "html_url": "https://github.com/rust-lang/rust/commit/ba8e610b269f90287aad1b5db0520bfd3118612e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8e610b269f90287aad1b5db0520bfd3118612e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e9fedfe579b0062645e3be06284a9246228b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e9fedfe579b0062645e3be06284a9246228b8e", "html_url": "https://github.com/rust-lang/rust/commit/d9e9fedfe579b0062645e3be06284a9246228b8e"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "f1d30ba4bdce07b22916d6d54f367643fb82c1b9", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=ba8e610b269f90287aad1b5db0520bfd3118612e", "patch": "@@ -152,7 +152,7 @@ fn module_codegen(\n     codegen_result\n }\n \n-pub(super) fn run_aot(\n+pub(crate) fn run_aot(\n     tcx: TyCtxt<'_>,\n     backend_config: BackendConfig,\n     metadata: EncodedMetadata,"}, {"sha": "bcc7a494499afa0338f4a81ed2cbecfe45ddb50e", "filename": "src/driver/jit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=ba8e610b269f90287aad1b5db0520bfd3118612e", "patch": "@@ -20,9 +20,13 @@ thread_local! {\n     pub static CURRENT_MODULE: RefCell<Option<JITModule>> = RefCell::new(None);\n }\n \n-pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n+pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     if !tcx.sess.opts.output_types.should_codegen() {\n-        tcx.sess.fatal(\"JIT mode doesn't work with `cargo check`.\");\n+        tcx.sess.fatal(\"JIT mode doesn't work with `cargo check`\");\n+    }\n+\n+    if !tcx.sess.crate_types().contains(&rustc_session::config::CrateType::Executable) {\n+        tcx.sess.fatal(\"can't jit non-executable crate\");\n     }\n \n     let imported_symbols = load_imported_symbols_for_jit(tcx);"}, {"sha": "8dde9992b35fb53b8dfd80648f47727a4fb573cd", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=ba8e610b269f90287aad1b5db0520bfd3118612e", "patch": "@@ -1,43 +1,13 @@\n //! Drivers are responsible for calling [`codegen_mono_item`] and performing any further actions\n //! like JIT executing or writing object files.\n \n-use std::any::Any;\n-\n-use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n-use crate::CodegenMode;\n \n-mod aot;\n+pub(crate) mod aot;\n #[cfg(feature = \"jit\")]\n-mod jit;\n-\n-pub(crate) fn codegen_crate(\n-    tcx: TyCtxt<'_>,\n-    metadata: EncodedMetadata,\n-    need_metadata_module: bool,\n-    backend_config: crate::BackendConfig,\n-) -> Box<dyn Any> {\n-    tcx.sess.abort_if_errors();\n-\n-    match backend_config.codegen_mode {\n-        CodegenMode::Aot => aot::run_aot(tcx, backend_config, metadata, need_metadata_module),\n-        CodegenMode::Jit | CodegenMode::JitLazy => {\n-            let is_executable =\n-                tcx.sess.crate_types().contains(&rustc_session::config::CrateType::Executable);\n-            if !is_executable {\n-                tcx.sess.fatal(\"can't jit non-executable crate\");\n-            }\n-\n-            #[cfg(feature = \"jit\")]\n-            let _: ! = jit::run_jit(tcx, backend_config);\n-\n-            #[cfg(not(feature = \"jit\"))]\n-            tcx.sess.fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n-        }\n-    }\n-}\n+pub(crate) mod jit;\n \n fn predefine_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "e15d21a123d100e10a3f668b8494dbb5c6111659", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8e610b269f90287aad1b5db0520bfd3118612e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ba8e610b269f90287aad1b5db0520bfd3118612e", "patch": "@@ -177,13 +177,23 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n+        tcx.sess.abort_if_errors();\n         let config = if let Some(config) = self.config.clone() {\n             config\n         } else {\n             BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n                 .unwrap_or_else(|err| tcx.sess.fatal(&err))\n         };\n-        driver::codegen_crate(tcx, metadata, need_metadata_module, config)\n+        match config.codegen_mode {\n+            CodegenMode::Aot => driver::aot::run_aot(tcx, config, metadata, need_metadata_module),\n+            CodegenMode::Jit | CodegenMode::JitLazy => {\n+                #[cfg(feature = \"jit\")]\n+                let _: ! = driver::jit::run_jit(tcx, config);\n+\n+                #[cfg(not(feature = \"jit\"))]\n+                tcx.sess.fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n+            }\n+        }\n     }\n \n     fn join_codegen("}]}