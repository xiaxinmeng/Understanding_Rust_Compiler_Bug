{"sha": "8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTc1YTJiM2E3Y2I4M2Y0NGEyODJhZTY3MWUwZjFlYjhlNjdhNjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T08:40:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T08:40:28Z"}, "message": "Rollup merge of #76628 - jyn514:default-config-files, r=Mark-Simulacrum\n\nAdd sample defaults for config.toml\n\n- Allow including defaults in `src/bootstrap/defaults` using `profile = \"...\"`.\n- Add default config files, with a README noting they're experimental and asking you to open an issue if you run into trouble. The config files have comments explaining why the defaults are set.\n- Combine config files using the `merge` dependency.\n\nThis introduces a new dependency on `merge` that hasn't yet been vetted.\n\nI want to improve the output when `include = \"x\"` isn't found:\n\n```\nthread 'main' panicked at 'fs::read_to_string(&file) failed with No such file or directory (os error 2) (\"configuration file did not exist\")', src/bootstrap/config.rs:522:28\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nfailed to run: /home/joshua/rustc/build/bootstrap/debug/bootstrap test tidy\nBuild completed unsuccessfully in 0:00:00\n```\n\nHowever that seems like it could be fixed in a follow-up.\n\nCloses #76619", "tree": {"sha": "f9b2eb9ed5a4527876de482d95a2326118e16979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b2eb9ed5a4527876de482d95a2326118e16979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaGb8CRBK7hj4Ov3rIwAAdHIIAKURXVlfqBQO2AOobhvGhSPz\nxCQfk1NqSgq3ln0TMFuSOZcTVOpZYjxkGDm3216m/ia+WZ9k19dAvnmIr5EY4QZM\nJs1brHJTLvSicnOEmG5eNSYyH9f1LJLPGd9gnMgekGEoE/XC53SueT3HmBjk/8W4\nBWX3g/7PZ0dj2qo4+IxTXo/MxVACHz+gfzawUwR4ECF3TYniAQM58IlCbyCzeEVO\nALydfQ64SmFOkh9F0xD31r1TPMbl5tzhi7WsudjRR8UAtqJ5oJWzaQe54b9pMLfI\nanLvXAPdJkMAdaeBhsvuTu2sAZtsmR0D3qA2a1Ya7rgntEXSDYL72s2cxNvI+AU=\n=cLgP\n-----END PGP SIGNATURE-----\n", "payload": "tree f9b2eb9ed5a4527876de482d95a2326118e16979\nparent c3abb8290879d3b5f5a34aba243defbb74cfdc6c\nparent c9c8fb88cf1be7e0a6bd6fd049d8d28fb5d86135\nauthor Ralf Jung <post@ralfj.de> 1600677628 +0200\ncommitter GitHub <noreply@github.com> 1600677628 +0200\n\nRollup merge of #76628 - jyn514:default-config-files, r=Mark-Simulacrum\n\nAdd sample defaults for config.toml\n\n- Allow including defaults in `src/bootstrap/defaults` using `profile = \"...\"`.\n- Add default config files, with a README noting they're experimental and asking you to open an issue if you run into trouble. The config files have comments explaining why the defaults are set.\n- Combine config files using the `merge` dependency.\n\nThis introduces a new dependency on `merge` that hasn't yet been vetted.\n\nI want to improve the output when `include = \"x\"` isn't found:\n\n```\nthread 'main' panicked at 'fs::read_to_string(&file) failed with No such file or directory (os error 2) (\"configuration file did not exist\")', src/bootstrap/config.rs:522:28\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nfailed to run: /home/joshua/rustc/build/bootstrap/debug/bootstrap test tidy\nBuild completed unsuccessfully in 0:00:00\n```\n\nHowever that seems like it could be fixed in a follow-up.\n\nCloses #76619\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "html_url": "https://github.com/rust-lang/rust/commit/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3abb8290879d3b5f5a34aba243defbb74cfdc6c", "html_url": "https://github.com/rust-lang/rust/commit/c3abb8290879d3b5f5a34aba243defbb74cfdc6c"}, {"sha": "c9c8fb88cf1be7e0a6bd6fd049d8d28fb5d86135", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c8fb88cf1be7e0a6bd6fd049d8d28fb5d86135", "html_url": "https://github.com/rust-lang/rust/commit/c9c8fb88cf1be7e0a6bd6fd049d8d28fb5d86135"}], "stats": {"total": 161, "additions": 136, "deletions": 25}, "files": [{"sha": "136ccf8ec4acac9f7849ef9af311f762fc3784ae", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -207,6 +207,7 @@ dependencies = [\n  \"ignore\",\n  \"lazy_static\",\n  \"libc\",\n+ \"merge\",\n  \"num_cpus\",\n  \"opener\",\n  \"pretty_assertions\",\n@@ -1909,6 +1910,28 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"merge\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"10bbef93abb1da61525bbc45eeaff6473a41907d19f8f9aa5168d214e10693e9\"\n+dependencies = [\n+ \"merge_derive\",\n+ \"num-traits\",\n+]\n+\n+[[package]]\n+name = \"merge_derive\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"209d075476da2e63b4b29e72a2ef627b840589588e71400a25e3565c4f849d07\"\n+dependencies = [\n+ \"proc-macro-error\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"minifier\"\n version = \"0.0.33\""}, {"sha": "8bf1b48ce830ee3741086337bf50940bd777e821", "filename": "config.toml.example", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -9,6 +9,16 @@\n # a custom configuration file can also be specified with `--config` to the build\n # system.\n \n+# =============================================================================\n+# Global Settings\n+# =============================================================================\n+\n+# Use different pre-set defaults than the global defaults.\n+#\n+# See `src/bootstrap/defaults` for more information.\n+# Note that this has no default value (x.py uses the defaults in `config.toml.example`).\n+#profile = <none>\n+\n # =============================================================================\n # Tweaking how LLVM is compiled\n # ============================================================================="}, {"sha": "e04128d1b0b2569409c05de9de37a268a1a3c331", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -49,6 +49,7 @@ lazy_static = \"1.3.0\"\n time = \"0.1\"\n ignore = \"0.4.10\"\n opener = \"0.4\"\n+merge = \"0.1.0\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "801ed5ac6eeea600de34ac40d28221e5fec52c0c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 51, "deletions": 25, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -16,6 +16,7 @@ use crate::flags::Flags;\n pub use crate::flags::Subcommand;\n use crate::util::exe;\n use build_helper::t;\n+use merge::Merge;\n use serde::Deserialize;\n \n macro_rules! check_ci_llvm {\n@@ -278,10 +279,31 @@ struct TomlConfig {\n     rust: Option<Rust>,\n     target: Option<HashMap<String, TomlTarget>>,\n     dist: Option<Dist>,\n+    profile: Option<String>,\n+}\n+\n+impl Merge for TomlConfig {\n+    fn merge(&mut self, TomlConfig { build, install, llvm, rust, dist, target, profile: _ }: Self) {\n+        fn do_merge<T: Merge>(x: &mut Option<T>, y: Option<T>) {\n+            if let Some(new) = y {\n+                if let Some(original) = x {\n+                    original.merge(new);\n+                } else {\n+                    *x = Some(new);\n+                }\n+            }\n+        };\n+        do_merge(&mut self.build, build);\n+        do_merge(&mut self.install, install);\n+        do_merge(&mut self.llvm, llvm);\n+        do_merge(&mut self.rust, rust);\n+        do_merge(&mut self.dist, dist);\n+        assert!(target.is_none(), \"merging target-specific config is not currently supported\");\n+    }\n }\n \n /// TOML representation of various global build decisions.\n-#[derive(Deserialize, Default, Clone)]\n+#[derive(Deserialize, Default, Clone, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Build {\n     build: Option<String>,\n@@ -321,7 +343,7 @@ struct Build {\n }\n \n /// TOML representation of various global install decisions.\n-#[derive(Deserialize, Default, Clone)]\n+#[derive(Deserialize, Default, Clone, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Install {\n     prefix: Option<String>,\n@@ -338,7 +360,7 @@ struct Install {\n }\n \n /// TOML representation of how the LLVM build is configured.\n-#[derive(Deserialize, Default)]\n+#[derive(Deserialize, Default, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Llvm {\n     skip_rebuild: Option<bool>,\n@@ -365,7 +387,7 @@ struct Llvm {\n     download_ci_llvm: Option<bool>,\n }\n \n-#[derive(Deserialize, Default, Clone)]\n+#[derive(Deserialize, Default, Clone, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Dist {\n     sign_folder: Option<String>,\n@@ -389,7 +411,7 @@ impl Default for StringOrBool {\n }\n \n /// TOML representation of how the Rust build is configured.\n-#[derive(Deserialize, Default)]\n+#[derive(Deserialize, Default, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Rust {\n     optimize: Option<bool>,\n@@ -434,7 +456,7 @@ struct Rust {\n }\n \n /// TOML representation of how each build target is configured.\n-#[derive(Deserialize, Default)]\n+#[derive(Deserialize, Default, Merge)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct TomlTarget {\n     cc: Option<String>,\n@@ -524,27 +546,31 @@ impl Config {\n         }\n \n         #[cfg(test)]\n-        let toml = TomlConfig::default();\n+        let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n-        let toml = flags\n-            .config\n-            .map(|file| {\n-                use std::process;\n-\n-                let contents = t!(fs::read_to_string(&file));\n-                match toml::from_str(&contents) {\n-                    Ok(table) => table,\n-                    Err(err) => {\n-                        println!(\n-                            \"failed to parse TOML configuration '{}': {}\",\n-                            file.display(),\n-                            err\n-                        );\n-                        process::exit(2);\n-                    }\n+        let get_toml = |file: PathBuf| {\n+            use std::process;\n+\n+            let contents = t!(fs::read_to_string(&file), \"configuration file did not exist\");\n+            match toml::from_str(&contents) {\n+                Ok(table) => table,\n+                Err(err) => {\n+                    println!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n+                    process::exit(2);\n                 }\n-            })\n-            .unwrap_or_else(TomlConfig::default);\n+            }\n+        };\n+\n+        let mut toml = flags.config.map(get_toml).unwrap_or_else(TomlConfig::default);\n+        if let Some(include) = &toml.profile {\n+            let mut include_path = config.src.clone();\n+            include_path.push(\"src\");\n+            include_path.push(\"bootstrap\");\n+            include_path.push(\"defaults\");\n+            include_path.push(format!(\"config.toml.{}\", include));\n+            let included_toml = get_toml(include_path);\n+            toml.merge(included_toml);\n+        }\n \n         let build = toml.build.unwrap_or_default();\n "}, {"sha": "a91fc3538eb55f0e3aed94377d5a08cb1f23ac0f", "filename": "src/bootstrap/defaults/README.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2FREADME.md?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -0,0 +1,11 @@\n+# About bootstrap defaults\n+\n+These defaults are intended to be a good starting point for working with x.py,\n+with the understanding that no one set of defaults make sense for everyone.\n+\n+They are still experimental, and we'd appreciate your help improving them!\n+If you use a setting that's not in these defaults that you think others would benefit from, please [file an issue] or make a PR with the changes.\n+Similarly, if one of these defaults doesn't match what you use personally,\n+please open an issue to get it changed.\n+\n+[file an issue]: https://github.com/rust-lang/rust/issues/new/choose"}, {"sha": "a9505922ca7fc9a81232ae8404320503f838bc6c", "filename": "src/bootstrap/defaults/config.toml.codegen", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.codegen", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.codegen", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.codegen?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -0,0 +1,13 @@\n+# These defaults are meant for contributors to the compiler who modify codegen or LLVM\n+[llvm]\n+# This enables debug-assertions in LLVM,\n+# catching logic errors in codegen much earlier in the process.\n+assertions = true\n+\n+[rust]\n+# This enables `RUSTC_LOG=debug`, avoiding confusing situations\n+# where adding `debug!()` appears to do nothing.\n+# However, it makes running the compiler slightly slower.\n+debug-logging = true\n+# This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n+incremental = true"}, {"sha": "4772de8a2cb22c27a40890009555f54a7ecda134", "filename": "src/bootstrap/defaults/config.toml.compiler", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.compiler", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.compiler", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.compiler?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -0,0 +1,8 @@\n+# These defaults are meant for contributors to the compiler who do not modify codegen or LLVM\n+[rust]\n+# This enables `RUSTC_LOG=debug`, avoiding confusing situations\n+# where adding `debug!()` appears to do nothing.\n+# However, it makes running the compiler slightly slower.\n+debug-logging = true\n+# This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n+incremental = true"}, {"sha": "e4316f4d8644050ea15b0d803351b76874967bde", "filename": "src/bootstrap/defaults/config.toml.library", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.library", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.library", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.library?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -0,0 +1,10 @@\n+# These defaults are meant for contributors to the standard library and documentation.\n+[build]\n+# When building the standard library, you almost never want to build the compiler itself.\n+build-stage = 0\n+test-stage = 0\n+bench-stage = 0\n+\n+[rust]\n+# This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n+incremental = true"}, {"sha": "6647061d88fcbc99005ed446871d4ab2c420273c", "filename": "src/bootstrap/defaults/config.toml.user", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.user", "raw_url": "https://github.com/rust-lang/rust/raw/8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.user", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.toml.user?ref=8fa75a2b3a7cb83f44a282ae671e0f1eb8e67a67", "patch": "@@ -0,0 +1,9 @@\n+# These defaults are meant for users and distro maintainers building from source, without intending to make multiple changes.\n+[build]\n+# When compiling from source, you almost always want a full stage 2 build,\n+# which has all the latest optimizations from nightly.\n+build-stage = 2\n+test-stage = 2\n+doc-stage = 2\n+# When compiling from source, you usually want all tools.\n+extended = true"}]}