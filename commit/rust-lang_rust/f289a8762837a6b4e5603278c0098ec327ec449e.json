{"sha": "f289a8762837a6b4e5603278c0098ec327ec449e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODlhODc2MjgzN2E2YjRlNTYwMzI3OGMwMDk4ZWMzMjdlYzQ0OWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-11-03T15:43:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-11-03T16:03:30Z"}, "message": "Print a summary of which test suite failed\n\nEspecially on CI, where cross-compiling is common and single builder may end up\nwith multiple hosts and multiple targets, it can be annoying to scroll back to\nthe nearest start of test marker. This prints out a summary of the test suite\nbeing run directly in compiletest.", "tree": {"sha": "d04a2382d8a1455ac33416433ea979e33ae9e66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04a2382d8a1455ac33416433ea979e33ae9e66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f289a8762837a6b4e5603278c0098ec327ec449e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f289a8762837a6b4e5603278c0098ec327ec449e", "html_url": "https://github.com/rust-lang/rust/commit/f289a8762837a6b4e5603278c0098ec327ec449e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f289a8762837a6b4e5603278c0098ec327ec449e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8939b8045b7af6076fb718e2e298844aaf4650", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8939b8045b7af6076fb718e2e298844aaf4650", "html_url": "https://github.com/rust-lang/rust/commit/8e8939b8045b7af6076fb718e2e298844aaf4650"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "84d69e52de635f6486d44bdc5b944a85350ab128", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f289a8762837a6b4e5603278c0098ec327ec449e", "patch": "@@ -1039,6 +1039,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n+        cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);\n         cmd.arg(\"--target\").arg(target.rustc_target_arg());\n         cmd.arg(\"--host\").arg(&*compiler.host.triple);"}, {"sha": "24ef98cd784d8b4fe408eaf6cbde9c58efa4e7b1", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=f289a8762837a6b4e5603278c0098ec327ec449e", "patch": "@@ -224,6 +224,10 @@ pub struct Config {\n     /// The test mode, compile-fail, run-fail, ui\n     pub mode: Mode,\n \n+    /// The test suite (essentially which directory is running, but without the\n+    /// directory prefix such as src/test)\n+    pub suite: String,\n+\n     /// The debugger to use in debuginfo mode. Unset otherwise.\n     pub debugger: Option<Debugger>,\n "}, {"sha": "4bcbd89f09510eff0b945ebdf749e811c2c8f66f", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=f289a8762837a6b4e5603278c0098ec327ec449e", "patch": "@@ -39,6 +39,7 @@ fn config() -> Config {\n     let args = &[\n         \"compiletest\",\n         \"--mode=ui\",\n+        \"--suite=ui\",\n         \"--compile-lib-path=\",\n         \"--run-lib-path=\",\n         \"--rustc-path=\","}, {"sha": "2b167ac8e9fb288c19b4293383a3de8f4e2a70d2", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f289a8762837a6b4e5603278c0098ec327ec449e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f289a8762837a6b4e5603278c0098ec327ec449e", "patch": "@@ -70,6 +70,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"compile-fail | run-fail | run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n              codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n         )\n+        .reqopt(\n+            \"\",\n+            \"suite\",\n+            \"which suite of compile tests to run. used for nicer error reporting.\",\n+            \"SUITE\",\n+        )\n         .optopt(\n             \"\",\n             \"pass\",\n@@ -201,6 +207,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         build_base: opt_path(matches, \"build-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode: matches.opt_str(\"mode\").unwrap().parse().expect(\"invalid mode\"),\n+        suite: matches.opt_str(\"suite\").unwrap(),\n         debugger: None,\n         run_ignored,\n         filter: matches.free.first().cloned(),\n@@ -340,7 +347,7 @@ pub fn run_tests(config: Config) {\n             configs.extend(configure_lldb(&config));\n         }\n     } else {\n-        configs.push(config);\n+        configs.push(config.clone());\n     };\n \n     let mut tests = Vec::new();\n@@ -351,11 +358,32 @@ pub fn run_tests(config: Config) {\n     let res = test::run_tests_console(&opts, tests);\n     match res {\n         Ok(true) => {}\n-        Ok(false) => panic!(\"Some tests failed\"),\n+        Ok(false) => {\n+            // We want to report that the tests failed, but we also want to give\n+            // some indication of just what tests we were running. Especially on\n+            // CI, where there can be cross-compiled tests for a lot of\n+            // architectures, without this critical information it can be quite\n+            // easy to miss which tests failed, and as such fail to reproduce\n+            // the failure locally.\n+\n+            eprintln!(\n+                \"Some tests failed in compiletest suite={}{} mode={} host={} target={}\",\n+                config.suite,\n+                config.compare_mode.map(|c| format!(\" compare_mode={:?}\", c)).unwrap_or_default(),\n+                config.mode,\n+                config.host,\n+                config.target\n+            );\n+\n+            std::process::exit(1);\n+        }\n         Err(e) => {\n             // We don't know if tests passed or not, but if there was an error\n             // during testing we don't want to just suceeed (we may not have\n             // tested something), so fail.\n+            //\n+            // This should realistically \"never\" happen, so don't try to make\n+            // this a pretty error message.\n             panic!(\"I/O failure during tests: {:?}\", e);\n         }\n     }"}]}