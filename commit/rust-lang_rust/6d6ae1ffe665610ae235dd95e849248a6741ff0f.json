{"sha": "6d6ae1ffe665610ae235dd95e849248a6741ff0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNmFlMWZmZTY2NTYxMGFlMjM1ZGQ5NWU4NDkyNDhhNjc0MWZmMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-10T13:01:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-10T13:01:03Z"}, "message": "Auto merge of #32173 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 8 pull requests\n\n- Successful merges: #31830, #32091, #32125, #32136, #32147, #32148, #32149, #32150\n- Failed merges:", "tree": {"sha": "c68821847bb7619762f997c075d499966ba1370c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68821847bb7619762f997c075d499966ba1370c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6ae1ffe665610ae235dd95e849248a6741ff0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6ae1ffe665610ae235dd95e849248a6741ff0f", "html_url": "https://github.com/rust-lang/rust/commit/6d6ae1ffe665610ae235dd95e849248a6741ff0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6ae1ffe665610ae235dd95e849248a6741ff0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a23271f424107965c0a44db2993c263b79b9fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a23271f424107965c0a44db2993c263b79b9fa", "html_url": "https://github.com/rust-lang/rust/commit/25a23271f424107965c0a44db2993c263b79b9fa"}, {"sha": "4f8d0291f3377a9e0c99300ecbef2962117b6cd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8d0291f3377a9e0c99300ecbef2962117b6cd6", "html_url": "https://github.com/rust-lang/rust/commit/4f8d0291f3377a9e0c99300ecbef2962117b6cd6"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "e071bfdf8bce1b89624d4d427aec3c2f24ed34ed", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -295,7 +295,7 @@ Rust warns us that we haven\u2019t used the `Result` value. This warning comes from\n a special annotation that `io::Result` has. Rust is trying to tell you that\n you haven\u2019t handled a possible error. The right way to suppress the error is\n to actually write error handling. Luckily, if we want to crash if there\u2019s\n-a problem, we can use these two little methods. If we can recover from the\n+a problem, we can use `expect()`. If we can recover from the\n error somehow, we\u2019d do something else, but we\u2019ll save that for a future\n project.\n "}, {"sha": "a5a2d7ce74e7d741271a8dcd447a120f2147bab7", "filename": "src/doc/book/inline-assembly.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Finline-assembly.md?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -2,8 +2,7 @@\n \n For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `asm!` macro. The syntax roughly matches\n-that of GCC & Clang:\n+assembly to do this via the `asm!` macro.\n \n ```ignore\n asm!(assembly template"}, {"sha": "59d07e4f81c6e923aa08fa3967873395e47c1178", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -515,7 +515,3 @@ you add more examples.\n \n We haven\u2019t covered all of the details with writing documentation tests. For more,\n please see the [Documentation chapter](documentation.html).\n-\n-One final note: documentation tests *cannot* be run on binary crates.\n-To see more on file arrangement see the [Crates and\n-Modules](crates-and-modules.html) section."}, {"sha": "4c5fd31b96ed1522bb6ee48003076edba45ba618", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -3328,6 +3328,10 @@ The primitive types are the following:\n * The boolean type `bool` with values `true` and `false`.\n * The machine types (integer and floating-point).\n * The machine-dependent integer types.\n+* Arrays\n+* Tuples\n+* Slices\n+* Function pointers\n \n #### Machine types\n "}, {"sha": "b5d7279edb006f7bb92d0e6a54d350d8c1512628", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -201,11 +201,12 @@ impl<T> Arc<T> {\n         Arc { _ptr: unsafe { Shared::new(Box::into_raw(x)) } }\n     }\n \n-    /// Unwraps the contained value if the `Arc<T>` has only one strong reference.\n-    /// This will succeed even if there are outstanding weak references.\n+    /// Unwraps the contained value if the `Arc<T>` has exactly one strong reference.\n     ///\n     /// Otherwise, an `Err` is returned with the same `Arc<T>`.\n     ///\n+    /// This will succeed even if there are outstanding weak references.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "dc283f5acdff83be285f73e0b8ce954077389001", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -224,11 +224,12 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Unwraps the contained value if the `Rc<T>` has only one strong reference.\n-    /// This will succeed even if there are outstanding weak references.\n+    /// Unwraps the contained value if the `Rc<T>` has exactly one strong reference.\n     ///\n     /// Otherwise, an `Err` is returned with the same `Rc<T>`.\n     ///\n+    /// This will succeed even if there are outstanding weak references.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "dc653b446da457c624ba25d79217d44705d70110", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -38,6 +38,36 @@ use Bound;\n /// [`Ord`]: ../../core/cmp/trait.Ord.html\n /// [`Cell`]: ../../std/cell/struct.Cell.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::BTreeSet;\n+///\n+/// // Type inference lets us omit an explicit type signature (which\n+/// // would be `BTreeSet<&str>` in this example).\n+/// let mut books = BTreeSet::new();\n+///\n+/// // Add some books.\n+/// books.insert(\"A Dance With Dragons\");\n+/// books.insert(\"To Kill a Mockingbird\");\n+/// books.insert(\"The Odyssey\");\n+/// books.insert(\"The Great Gatsby\");\n+///\n+/// // Check for a specific one.\n+/// if !books.contains(\"The Winds of Winter\") {\n+///     println!(\"We have {} books, but The Winds of Winter ain't one.\",\n+///              books.len());\n+/// }\n+///\n+/// // Remove a book.\n+/// books.remove(\"The Odyssey\");\n+///\n+/// // Iterate over everything.\n+/// for book in &books {\n+///     println!(\"{}\", book);\n+/// }\n+/// ```\n #[derive(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeSet<T> {"}, {"sha": "342071f1b51b7b42673f2c96932085829eabd448", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -19,15 +19,17 @@ use super::Hasher;\n ///\n /// See: http://131002.net/siphash/\n ///\n-/// Consider this as a main \"general-purpose\" hash for all hashtables: it\n-/// runs at good speed (competitive with spooky and city) and permits\n-/// strong _keyed_ hashing. Key your hashtables from a strong RNG,\n-/// such as `rand::Rng`.\n+/// This is currently the default hashing function used by standard library\n+/// (eg. `collections::HashMap` uses it by default).\n ///\n-/// Although the SipHash algorithm is considered to be cryptographically\n-/// strong, this implementation has not been reviewed for such purposes.\n-/// As such, all cryptographic uses of this implementation are strongly\n-/// discouraged.\n+/// SipHash is a general-purpose hashing function: it runs at a good\n+/// speed (competitive with Spooky and City) and permits strong _keyed_\n+/// hashing. This lets you key your hashtables from a strong RNG, such as\n+/// [`rand::os::OsRng`](https://doc.rust-lang.org/rand/rand/os/struct.OsRng.html).\n+///\n+/// Although the SipHash algorithm is considered to be generally strong,\n+/// it is not intended for cryptographic purposes. As such, all\n+/// cryptographic uses of this implementation are _strongly discouraged_.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SipHasher {\n     k0: u64,"}, {"sha": "cdf7e1bd33aa9fe4977df3b0909884c666d98a88", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -141,7 +141,8 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             if !static_sources.is_empty() {\n                 err.fileline_note(\n                     span,\n-                    \"found defined static methods, maybe a `self` is missing?\");\n+                    \"found the following associated functions; to be used as \\\n+                     methods, functions must have a `self` parameter\");\n \n                 report_candidates(fcx, &mut err, span, item_name, static_sources);\n             }"}, {"sha": "3cb30981b673c0ff0aa8278f4b5915d722dd743b", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6ae1ffe665610ae235dd95e849248a6741ff0f/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=6d6ae1ffe665610ae235dd95e849248a6741ff0f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // Test the mechanism for warning about possible missing `self` declarations.\n+// ignore-tidy-linelength\n \n trait CtxtFn {\n     fn f8(self, usize) -> usize;\n@@ -72,15 +73,15 @@ impl ManyImplTrait for Myisize {}\n fn no_param_bound(u: usize, m: Myisize) -> usize {\n     u.f8(42) + u.f9(342) + m.fff(42)\n             //~^ ERROR no method named `f9` found for type `usize` in the current scope\n-            //~^^ NOTE found defined static methods, maybe a `self` is missing?\n+            //~^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n             //~^^^ ERROR no method named `fff` found for type `Myisize` in the current scope\n-            //~^^^^ NOTE found defined static methods, maybe a `self` is missing?\n+            //~^^^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n }\n \n fn param_bound<T: ManyImplTrait>(t: T) -> bool {\n     t.is_str()\n     //~^ ERROR no method named `is_str` found for type `T` in the current scope\n-    //~^^ NOTE found defined static methods, maybe a `self` is missing?\n+    //~^^ NOTE found the following associated functions; to be used as methods, functions must have a `self` parameter\n }\n \n fn main() {"}]}