{"sha": "f055b0bb0847ecf08fe452a270faae8324b55b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTViMGJiMDg0N2VjZjA4ZmU0NTJhMjcwZmFhZTgzMjRiNTViMDU=", "commit": {"author": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2020-09-18T17:55:03Z"}, "committer": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2020-09-18T17:55:03Z"}, "message": "Rename method to `assert_len`", "tree": {"sha": "d280ee7158a689b69729863dd4c2bec24d27a5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d280ee7158a689b69729863dd4c2bec24d27a5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f055b0bb0847ecf08fe452a270faae8324b55b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f055b0bb0847ecf08fe452a270faae8324b55b05", "html_url": "https://github.com/rust-lang/rust/commit/f055b0bb0847ecf08fe452a270faae8324b55b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f055b0bb0847ecf08fe452a270faae8324b55b05/comments", "author": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb63168e007058dad4af758faf1dca449c049777", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb63168e007058dad4af758faf1dca449c049777", "html_url": "https://github.com/rust-lang/rust/commit/eb63168e007058dad4af758faf1dca449c049777"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "4d6c681e44c1c479dc4cdb66839b678ca3c24a66", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -1089,7 +1089,7 @@ impl<T> VecDeque<T> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let Range { start, end } = range.for_length(self.len());\n+        let Range { start, end } = range.assert_len(self.len());\n         let tail = self.wrap_add(self.tail, start);\n         let head = self.wrap_add(self.tail, end);\n         (tail, head)"}, {"sha": "512a4a1cc1b443dcebe954b9e9a699526f602d50", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -116,7 +116,7 @@\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n-#![feature(range_bounds_for_length)]\n+#![feature(range_bounds_assert_len)]\n #![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]"}, {"sha": "7b0ec1c43c0a41ceafcd6f48162b19bab7181753", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -1506,14 +1506,14 @@ impl String {\n         // of the vector version. The data is just plain bytes.\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n-        let Range { start, end } = range.for_length(self.len());\n+        let Range { start, end } = range.assert_len(self.len());\n         assert!(self.is_char_boundary(start));\n         assert!(self.is_char_boundary(end));\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop.\n         let self_ptr = self as *mut _;\n-        // SAFETY: `for_length` and `is_char_boundary` do the appropriate bounds checks.\n+        // SAFETY: `assert_len` and `is_char_boundary` do the appropriate bounds checks.\n         let chars_iter = unsafe { self.get_unchecked(start..end) }.chars();\n \n         Drain { start, end, iter: chars_iter, string: self_ptr }"}, {"sha": "90c2708b9c9b2baac30c9203b561c470d9be2882", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -1312,7 +1312,7 @@ impl<T> Vec<T> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let Range { start, end } = range.for_length(len);\n+        let Range { start, end } = range.assert_len(len);\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked"}, {"sha": "16d86c8197803c5daef0e21682482288c72b5c36", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -705,35 +705,6 @@ pub trait RangeBounds<T: ?Sized> {\n     #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n     fn end_bound(&self) -> Bound<&T>;\n \n-    /// Returns `true` if `item` is contained in the range.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// assert!( (3..5).contains(&4));\n-    /// assert!(!(3..5).contains(&2));\n-    ///\n-    /// assert!( (0.0..1.0).contains(&0.5));\n-    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n-    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n-    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n-    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    fn contains<U>(&self, item: &U) -> bool\n-    where\n-        T: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<T>,\n-    {\n-        (match self.start_bound() {\n-            Included(ref start) => *start <= item,\n-            Excluded(ref start) => *start < item,\n-            Unbounded => true,\n-        }) && (match self.end_bound() {\n-            Included(ref end) => item <= *end,\n-            Excluded(ref end) => item < *end,\n-            Unbounded => true,\n-        })\n-    }\n-\n     /// Performs bounds-checking of this range.\n     ///\n     /// The returned [`Range`] is safe to pass to [`slice::get_unchecked`] and\n@@ -749,46 +720,46 @@ pub trait RangeBounds<T: ?Sized> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_bounds_for_length)]\n+    /// #![feature(range_bounds_assert_len)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n     /// let v = [10, 40, 30];\n-    /// assert_eq!(1..2, (1..2).for_length(v.len()));\n-    /// assert_eq!(0..2, (..2).for_length(v.len()));\n-    /// assert_eq!(1..3, (1..).for_length(v.len()));\n+    /// assert_eq!(1..2, (1..2).assert_len(v.len()));\n+    /// assert_eq!(0..2, (..2).assert_len(v.len()));\n+    /// assert_eq!(1..3, (1..).assert_len(v.len()));\n     /// ```\n     ///\n     /// Panics when [`Index::index`] would panic:\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_for_length)]\n+    /// #![feature(range_bounds_assert_len)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (2..1).for_length(3);\n+    /// (2..1).assert_len(3);\n     /// ```\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_for_length)]\n+    /// #![feature(range_bounds_assert_len)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (1..4).for_length(3);\n+    /// (1..4).assert_len(3);\n     /// ```\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_for_length)]\n+    /// #![feature(range_bounds_assert_len)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (1..=usize::MAX).for_length(3);\n+    /// (1..=usize::MAX).assert_len(3);\n     /// ```\n     ///\n     /// [`Index::index`]: crate::ops::Index::index\n     #[track_caller]\n-    #[unstable(feature = \"range_bounds_for_length\", issue = \"76393\")]\n-    fn for_length(self, len: usize) -> Range<usize>\n+    #[unstable(feature = \"range_bounds_assert_len\", issue = \"76393\")]\n+    fn assert_len(self, len: usize) -> Range<usize>\n     where\n         Self: RangeBounds<usize>,\n     {\n@@ -819,6 +790,35 @@ pub trait RangeBounds<T: ?Sized> {\n \n         Range { start, end }\n     }\n+\n+    /// Returns `true` if `item` is contained in the range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert!( (3..5).contains(&4));\n+    /// assert!(!(3..5).contains(&2));\n+    ///\n+    /// assert!( (0.0..1.0).contains(&0.5));\n+    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n+    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n+    fn contains<U>(&self, item: &U) -> bool\n+    where\n+        T: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<T>,\n+    {\n+        (match self.start_bound() {\n+            Included(ref start) => *start <= item,\n+            Excluded(ref start) => *start < item,\n+            Unbounded => true,\n+        }) && (match self.end_bound() {\n+            Included(ref end) => item <= *end,\n+            Excluded(ref end) => item < *end,\n+            Unbounded => true,\n+        })\n+    }\n }\n \n use self::Bound::{Excluded, Included, Unbounded};"}, {"sha": "43185bae3daec5db223aa3dad49244beaf5de559", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -2755,7 +2755,7 @@ impl<T> [T] {\n     where\n         T: Copy,\n     {\n-        let Range { start: src_start, end: src_end } = src.for_length(self.len());\n+        let Range { start: src_start, end: src_end } = src.assert_len(self.len());\n         let count = src_end - src_start;\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,"}, {"sha": "0e95d5ded92969c2d7356f90f5b4feafdfd2e5b0", "filename": "src/doc/unstable-book/src/library-features/range-bounds-assert-len.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f055b0bb0847ecf08fe452a270faae8324b55b05/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/f055b0bb0847ecf08fe452a270faae8324b55b05/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md?ref=f055b0bb0847ecf08fe452a270faae8324b55b05", "patch": "@@ -0,0 +1,10 @@\n+# `range_bounds_assert_len`\n+\n+The tracking issue for this feature is: [#76393]\n+\n+------------------------\n+\n+This adds [`RangeBounds::assert_len`].\n+\n+[#76393]: https://github.com/rust-lang/rust/issues/76393\n+[`RangeBounds::assert_len`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.assert_len"}, {"sha": "47a1bd8dff1b8218773cfda909e08fe945d9a12b", "filename": "src/doc/unstable-book/src/library-features/range-bounds-for-length.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb63168e007058dad4af758faf1dca449c049777/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb63168e007058dad4af758faf1dca449c049777/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-for-length.md?ref=eb63168e007058dad4af758faf1dca449c049777", "patch": "@@ -1,10 +0,0 @@\n-# `range_bounds_for_length`\n-\n-The tracking issue for this feature is: [#76393]\n-\n-------------------------\n-\n-This adds [`RangeBounds::for_length`].\n-\n-[#76393]: https://github.com/rust-lang/rust/issues/76393\n-[`RangeBounds::for_length`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.for_length"}]}