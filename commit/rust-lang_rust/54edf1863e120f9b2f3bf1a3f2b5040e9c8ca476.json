{"sha": "54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "node_id": "C_kwDOAAsO6NoAKDU0ZWRmMTg2M2UxMjBmOWIyZjNiZjFhM2YyYjUwNDBlOWM4Y2E0NzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T07:14:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-14T20:22:10Z"}, "message": "Also do it for generics", "tree": {"sha": "4b9f8c87cbca6a53035a9f4297fc07babce36a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9f8c87cbca6a53035a9f4297fc07babce36a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "html_url": "https://github.com/rust-lang/rust/commit/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b33cc1e32d1814d961d97a6e76defc079316d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b33cc1e32d1814d961d97a6e76defc079316d2", "html_url": "https://github.com/rust-lang/rust/commit/16b33cc1e32d1814d961d97a6e76defc079316d2"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "bdb7c90aca3b010ead94c16cd1261547a6dd34ef", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "patch": "@@ -1756,25 +1756,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let hir::ExprKind::Call(path, _) = &call_expr.kind {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = &path.kind {\n                 for error in errors {\n-                    if let ty::PredicateKind::Trait(predicate) =\n-                        error.obligation.predicate.kind().skip_binder()\n+                    let self_ty = match error.obligation.predicate.kind().skip_binder() {\n+                        ty::PredicateKind::Trait(predicate) => predicate.self_ty(),\n+                        ty::PredicateKind::Projection(predicate) => {\n+                            predicate.projection_ty.self_ty()\n+                        }\n+                        _ => continue,\n+                    };\n+                    // If any of the type arguments in this path segment caused the\n+                    // `FulfillmentError`, point at its span (#61860).\n+                    for arg in path\n+                        .segments\n+                        .iter()\n+                        .filter_map(|seg| seg.args.as_ref())\n+                        .flat_map(|a| a.args.iter())\n                     {\n-                        // If any of the type arguments in this path segment caused the\n-                        // `FulfillmentError`, point at its span (#61860).\n-                        for arg in path\n-                            .segments\n-                            .iter()\n-                            .filter_map(|seg| seg.args.as_ref())\n-                            .flat_map(|a| a.args.iter())\n+                        if let hir::GenericArg::Type(hir_ty) = &arg\n+                            && let Some(ty) =\n+                                self.typeck_results.borrow().node_type_opt(hir_ty.hir_id)\n+                            && self.resolve_vars_if_possible(ty) == self_ty\n                         {\n-                            if let hir::GenericArg::Type(hir_ty) = &arg\n-                                && let Some(ty) =\n-                                    self.typeck_results.borrow().node_type_opt(hir_ty.hir_id)\n-                                && self.resolve_vars_if_possible(ty) == predicate.self_ty()\n-                            {\n-                                error.obligation.cause.span = hir_ty.span;\n-                                break;\n-                            }\n+                            error.obligation.cause.span = hir_ty.span;\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "6cff403b318c193cd0e55e213debb9b6c772a1db", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+  --> $DIR/associated-types-eq-hr.rs:87:11\n    |\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+   |           ^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n@@ -21,10 +21,10 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:91:11\n    |\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |           ^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n   --> $DIR/associated-types-eq-hr.rs:14:14"}, {"sha": "cbf09386654472d50aa65a437d43b7f696e4620a", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "patch": "@@ -1,12 +1,12 @@\n error[E0271]: type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n-  --> $DIR/enforce-supertrait-projection.rs:9:5\n+  --> $DIR/enforce-supertrait-projection.rs:9:17\n    |\n LL | fn transmute<A, B>(x: A) -> B {\n    |              -  - expected type parameter\n    |              |\n    |              found type parameter\n LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `B`, found type parameter `A`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `B`, found type parameter `A`\n    |\n    = note: expected type parameter `B`\n               found type parameter `A`"}, {"sha": "0c3d7060dd7c30294ec93937ffa37993c7bf5485", "filename": "src/test/ui/traits/pointee-tail-is-generic-errors.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr?ref=54edf1863e120f9b2f3bf1a3f2b5040e9c8ca476", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<T as Pointee>::Metadata == ()`\n-  --> $DIR/pointee-tail-is-generic-errors.rs:13:5\n+  --> $DIR/pointee-tail-is-generic-errors.rs:13:15\n    |\n LL |     is_thin::<T>();\n-   |     ^^^^^^^^^^^^ expected `()`, found associated type\n+   |               ^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<T as Pointee>::Metadata`\n@@ -15,13 +15,13 @@ LL | fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n    |                                 ^^^^^^^^^^^^^ required by this bound in `is_thin`\n \n error[E0271]: type mismatch resolving `<Opaque as Pointee>::Metadata == ()`\n-  --> $DIR/pointee-tail-is-generic-errors.rs:16:5\n+  --> $DIR/pointee-tail-is-generic-errors.rs:16:15\n    |\n LL | type Opaque = impl std::fmt::Debug + ?Sized;\n    |               ----------------------------- the found opaque type\n ...\n LL |     is_thin::<Opaque>();\n-   |     ^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |               ^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<Opaque as Pointee>::Metadata`"}]}