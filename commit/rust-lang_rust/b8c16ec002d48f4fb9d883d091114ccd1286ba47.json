{"sha": "b8c16ec002d48f4fb9d883d091114ccd1286ba47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YzE2ZWMwMDJkNDhmNGZiOWQ4ODNkMDkxMTE0Y2NkMTI4NmJhNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-13T13:40:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-13T13:40:48Z"}, "message": "Merge #1838\n\n1838: rename add_resolution -> add_scope_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5fa82899fc15f5739ef80997c04fd9cc8153e786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa82899fc15f5739ef80997c04fd9cc8153e786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c16ec002d48f4fb9d883d091114ccd1286ba47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJde5xgCRBK7hj4Ov3rIwAAdHIIABLqd1kFW6UpgSiKO4plfanT\ng2LTQntPB4ZwZbxiVH+5x69HW3ycxyazqHLQVcRKRPdozI7wscyfEmOWmM0O/Qno\nYQuJvC/v1osEYsQf+5bZ29WPEub11RgXpc24NUS+ZuEtDwGngau/pCEx7Ye7PTKD\nKDwetNpBMU2N/CfynEyzeMiw5lIIjQ3JxDaH1FbqB+fkAQ5/FrE6Zj/miUV8ioEI\nAHS8FPnoj8sqtoVG50rMOMwQvsuazXmseR4M6JmkqrLcItqVP5yubofGnSuhwHnq\nepYA4Y5GALe5LvWfCAS+vG833CYD/IwjkKK86SgQMaLNO9bHg2o3S9qPkBBp6lM=\n=ceH4\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fa82899fc15f5739ef80997c04fd9cc8153e786\nparent b31f9872ec67d371d669967f9c95f2d71a9d6bf5\nparent 7be7f67198c617ad482717d9bf2c7dca9c2cd169\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568382048 +0000\ncommitter GitHub <noreply@github.com> 1568382048 +0000\n\nMerge #1838\n\n1838: rename add_resolution -> add_scope_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c16ec002d48f4fb9d883d091114ccd1286ba47", "html_url": "https://github.com/rust-lang/rust/commit/b8c16ec002d48f4fb9d883d091114ccd1286ba47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c16ec002d48f4fb9d883d091114ccd1286ba47/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b31f9872ec67d371d669967f9c95f2d71a9d6bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31f9872ec67d371d669967f9c95f2d71a9d6bf5", "html_url": "https://github.com/rust-lang/rust/commit/b31f9872ec67d371d669967f9c95f2d71a9d6bf5"}, {"sha": "7be7f67198c617ad482717d9bf2c7dca9c2cd169", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be7f67198c617ad482717d9bf2c7dca9c2cd169", "html_url": "https://github.com/rust-lang/rust/commit/7be7f67198c617ad482717d9bf2c7dca9c2cd169"}], "stats": {"total": 82, "additions": 30, "deletions": 52}, "files": [{"sha": "7922e3f7e601afe858dc866f2b526940eda3977b", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=b8c16ec002d48f4fb9d883d091114ccd1286ba47", "patch": "@@ -200,7 +200,7 @@ impl ModuleScope {\n #[derive(Debug, Clone, PartialEq, Eq, Default)]\n pub struct Resolution {\n     /// None for unresolved\n-    pub def: PerNs<ModuleDef>,\n+    pub def: PerNs,\n     /// ident by which this is imported into local scope.\n     pub import: Option<ImportId>,\n }\n@@ -213,7 +213,7 @@ impl Resolution {\n \n #[derive(Debug, Clone)]\n struct ResolvePathResult {\n-    resolved_def: PerNs<ModuleDef>,\n+    resolved_def: PerNs,\n     segment_index: Option<usize>,\n     reached_fixedpoint: ReachedFixedPoint,\n }\n@@ -224,7 +224,7 @@ impl ResolvePathResult {\n     }\n \n     fn with(\n-        resolved_def: PerNs<ModuleDef>,\n+        resolved_def: PerNs,\n         reached_fixedpoint: ReachedFixedPoint,\n         segment_index: Option<usize>,\n     ) -> ResolvePathResult {\n@@ -316,7 +316,7 @@ impl CrateDefMap {\n         db: &impl DefDatabase,\n         original_module: CrateModuleId,\n         path: &Path,\n-    ) -> (PerNs<ModuleDef>, Option<usize>) {\n+    ) -> (PerNs, Option<usize>) {\n         let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n         (res.resolved_def, res.segment_index)\n     }\n@@ -331,7 +331,7 @@ impl CrateDefMap {\n         path: &Path,\n     ) -> ResolvePathResult {\n         let mut segments = path.segments.iter().enumerate();\n-        let mut curr_per_ns: PerNs<ModuleDef> = match path.kind {\n+        let mut curr_per_ns: PerNs = match path.kind {\n             PathKind::Crate => {\n                 PerNs::types(Module { krate: self.krate, module_id: self.root }.into())\n             }\n@@ -456,7 +456,7 @@ impl CrateDefMap {\n         ResolvePathResult::with(curr_per_ns, ReachedFixedPoint::Yes, None)\n     }\n \n-    fn resolve_name_in_crate_root_or_extern_prelude(&self, name: &Name) -> PerNs<ModuleDef> {\n+    fn resolve_name_in_crate_root_or_extern_prelude(&self, name: &Name) -> PerNs {\n         let from_crate_root =\n             self[self.root].scope.get(name).map_or_else(PerNs::none, |res| res.def);\n         let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n@@ -469,7 +469,7 @@ impl CrateDefMap {\n         db: &impl DefDatabase,\n         module: CrateModuleId,\n         name: &Name,\n-    ) -> PerNs<ModuleDef> {\n+    ) -> PerNs {\n         // Resolve in:\n         //  - legacy scope of macro\n         //  - current module / scope\n@@ -485,11 +485,11 @@ impl CrateDefMap {\n         from_legacy_macro.or(from_scope).or(from_extern_prelude).or(from_prelude)\n     }\n \n-    fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs<ModuleDef> {\n+    fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs {\n         self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it))\n     }\n \n-    fn resolve_in_prelude(&self, db: &impl DefDatabase, name: &Name) -> PerNs<ModuleDef> {\n+    fn resolve_in_prelude(&self, db: &impl DefDatabase, name: &Name) -> PerNs {\n         if let Some(prelude) = self.prelude {\n             let keep;\n             let def_map = if prelude.krate == self.krate {"}, {"sha": "1446c49a02065839d6dfab7d4dd4e03e069346a6", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=b8c16ec002d48f4fb9d883d091114ccd1286ba47", "patch": "@@ -243,7 +243,7 @@ where\n         &self,\n         module_id: CrateModuleId,\n         import: &raw::ImportData,\n-    ) -> (PerNs<ModuleDef>, ReachedFixedPoint) {\n+    ) -> (PerNs, ReachedFixedPoint) {\n         log::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let res = self.def_map.resolve_name_in_extern_prelude(\n@@ -268,7 +268,7 @@ where\n     fn record_resolved_import(\n         &mut self,\n         module_id: CrateModuleId,\n-        def: PerNs<ModuleDef>,\n+        def: PerNs,\n         import_id: raw::ImportId,\n         import: &raw::ImportData,\n     ) {\n@@ -662,7 +662,7 @@ where\n             };\n         }\n         let name = def.name.clone();\n-        let def: PerNs<ModuleDef> = match def.kind {\n+        let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => PerNs::values(def!(Function, ast_id)),\n             raw::DefKind::Struct(ast_id) => {\n                 let s = def!(Struct, ast_id);"}, {"sha": "964da2794e900810e35633d51952dc76a27ad792", "filename": "crates/ra_hir/src/nameres/per_ns.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fnameres%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fper_ns.rs?ref=b8c16ec002d48f4fb9d883d091114ccd1286ba47", "patch": "@@ -1,4 +1,4 @@\n-use crate::MacroDef;\n+use crate::{MacroDef, ModuleDef};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum Namespace {\n@@ -9,38 +9,38 @@ pub enum Namespace {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct PerNs<T> {\n-    pub types: Option<T>,\n-    pub values: Option<T>,\n+pub struct PerNs {\n+    pub types: Option<ModuleDef>,\n+    pub values: Option<ModuleDef>,\n     /// Since macros has different type, many methods simply ignore it.\n     /// We can only use special method like `get_macros` to access it.\n     pub macros: Option<MacroDef>,\n }\n \n-impl<T> Default for PerNs<T> {\n+impl Default for PerNs {\n     fn default() -> Self {\n         PerNs { types: None, values: None, macros: None }\n     }\n }\n \n-impl<T> PerNs<T> {\n-    pub fn none() -> PerNs<T> {\n+impl PerNs {\n+    pub fn none() -> PerNs {\n         PerNs { types: None, values: None, macros: None }\n     }\n \n-    pub fn values(t: T) -> PerNs<T> {\n+    pub fn values(t: ModuleDef) -> PerNs {\n         PerNs { types: None, values: Some(t), macros: None }\n     }\n \n-    pub fn types(t: T) -> PerNs<T> {\n+    pub fn types(t: ModuleDef) -> PerNs {\n         PerNs { types: Some(t), values: None, macros: None }\n     }\n \n-    pub fn both(types: T, values: T) -> PerNs<T> {\n+    pub fn both(types: ModuleDef, values: ModuleDef) -> PerNs {\n         PerNs { types: Some(types), values: Some(values), macros: None }\n     }\n \n-    pub fn macros(macro_: MacroDef) -> PerNs<T> {\n+    pub fn macros(macro_: MacroDef) -> PerNs {\n         PerNs { types: None, values: None, macros: Some(macro_) }\n     }\n \n@@ -52,23 +52,23 @@ impl<T> PerNs<T> {\n         self.types.is_some() && self.values.is_some() && self.macros.is_some()\n     }\n \n-    pub fn take_types(self) -> Option<T> {\n+    pub fn take_types(self) -> Option<ModuleDef> {\n         self.types\n     }\n \n-    pub fn take_values(self) -> Option<T> {\n+    pub fn take_values(self) -> Option<ModuleDef> {\n         self.values\n     }\n \n     pub fn get_macros(&self) -> Option<MacroDef> {\n         self.macros\n     }\n \n-    pub fn only_macros(&self) -> PerNs<T> {\n+    pub fn only_macros(&self) -> PerNs {\n         PerNs { types: None, values: None, macros: self.macros }\n     }\n \n-    pub fn or(self, other: PerNs<T>) -> PerNs<T> {\n+    pub fn or(self, other: PerNs) -> PerNs {\n         PerNs {\n             types: self.types.or(other.types),\n             values: self.values.or(other.values),"}, {"sha": "3207b6626d8ea169ef5e98bd6441b48315d60555", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=b8c16ec002d48f4fb9d883d091114ccd1286ba47", "patch": "@@ -112,11 +112,7 @@ impl Resolver {\n     }\n \n     /// pub only for source-binder\n-    pub(crate) fn resolve_module_path(\n-        &self,\n-        db: &impl HirDatabase,\n-        path: &Path,\n-    ) -> PerNs<ModuleDef> {\n+    pub(crate) fn resolve_module_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs {\n         let (item_map, module) = match self.module() {\n             Some(it) => it,\n             None => return PerNs::none(),\n@@ -385,8 +381,8 @@ pub enum ScopeDef {\n     Unknown,\n }\n \n-impl From<PerNs<ModuleDef>> for ScopeDef {\n-    fn from(def: PerNs<ModuleDef>) -> Self {\n+impl From<PerNs> for ScopeDef {\n+    fn from(def: PerNs) -> Self {\n         def.take_types()\n             .or_else(|| def.take_values())\n             .map(ScopeDef::ModuleDef)"}, {"sha": "ad414412b14f1fd8d1ea956a108a37659bc43787", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c16ec002d48f4fb9d883d091114ccd1286ba47/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b8c16ec002d48f4fb9d883d091114ccd1286ba47", "patch": "@@ -43,24 +43,6 @@ impl Completions {\n     ) {\n         use hir::ModuleDef::*;\n \n-        // if let Some(macro_) = resolution.get_macros() {\n-        //     self.add_macro(ctx, Some(local_name.clone()), macro_);\n-        // }\n-\n-        // let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n-        // let def = match def {\n-        //     // Only insert once if it is just a macro name\n-        //     None if resolution.get_macros().is_some() => return,\n-        //     None => {\n-        //         self.add(CompletionItem::new(\n-        //             CompletionKind::Reference,\n-        //             ctx.source_range(),\n-        //             local_name,\n-        //         ));\n-        //         return;\n-        //     }\n-        //     Some(it) => it,\n-        // };\n         let mut completion_kind = CompletionKind::Reference;\n         let (kind, docs) = match resolution {\n             ScopeDef::ModuleDef(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),"}]}