{"sha": "94323c89963b7d78039625b8e643d79bc2f1f261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzIzYzg5OTYzYjdkNzgwMzk2MjViOGU2NDNkNzliYzJmMWYyNjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-14T16:14:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-14T16:14:25Z"}, "message": "Merge #3136\n\n3136: Not bash r=matklad a=matklad\n\nMore declarative installation\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "65f028204494f3b4517e5c38f82b73a825e977f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f028204494f3b4517e5c38f82b73a825e977f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94323c89963b7d78039625b8e643d79bc2f1f261", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRsdhCRBK7hj4Ov3rIwAAdHIIAB7UZ1cxpJw+29lxZt7HY4f7\n0cNJWp+WMict3pAS231WBM8IF3r6X4VLab49+rnTxoYiTWs1P5LdgmG4P62hD7wp\neemU+63NotSiJXHwxoA5v0cM1aw58nx3H08BBVCkAOiEpxyGfpL4+DPOwzTPcr8f\ntVDWgm4o3eDndq8SVwxv3a6epikucdmkye2iPZbMSFFyAD3fyhTUPIPLwoGWC306\nC0B56hk1shTLh2EvDoPByPuQxV6fFQm42fnY0pzVd54ysRhpQgtNi9l9j6VGGbQD\nwt7auh26L7EyjqoNHPAwIH2lVf1+iru59ETdHmXp7rhV/pRA1IJ2yTMB3CWNq8A=\n=aNpG\n-----END PGP SIGNATURE-----\n", "payload": "tree 65f028204494f3b4517e5c38f82b73a825e977f5\nparent d46b555e31d04feeb6310c52248bba7ff267c453\nparent f2e8dfc8203bfd7cc69f58149577e207f6636fd3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581696865 +0000\ncommitter GitHub <noreply@github.com> 1581696865 +0000\n\nMerge #3136\n\n3136: Not bash r=matklad a=matklad\n\nMore declarative installation\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94323c89963b7d78039625b8e643d79bc2f1f261", "html_url": "https://github.com/rust-lang/rust/commit/94323c89963b7d78039625b8e643d79bc2f1f261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94323c89963b7d78039625b8e643d79bc2f1f261/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46b555e31d04feeb6310c52248bba7ff267c453", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46b555e31d04feeb6310c52248bba7ff267c453", "html_url": "https://github.com/rust-lang/rust/commit/d46b555e31d04feeb6310c52248bba7ff267c453"}, {"sha": "f2e8dfc8203bfd7cc69f58149577e207f6636fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e8dfc8203bfd7cc69f58149577e207f6636fd3", "html_url": "https://github.com/rust-lang/rust/commit/f2e8dfc8203bfd7cc69f58149577e207f6636fd3"}], "stats": {"total": 364, "additions": 202, "deletions": 162}, "files": [{"sha": "a7a1829dd5cf387392d4597a7dba8c52b81572d2", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -1,6 +1,6 @@\n {\n     \"name\": \"rust-analyzer\",\n-    \"version\": \"0.1.0\",\n+    \"version\": \"0.2.0-dev\",\n     \"lockfileVersion\": 1,\n     \"requires\": true,\n     \"dependencies\": {"}, {"sha": "2b8e5aec5e3b76d4ed23bb4459fc6f233f9cad2b", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -5,7 +5,8 @@\n     \"preview\": true,\n     \"private\": true,\n     \"icon\": \"icon.png\",\n-    \"version\": \"0.1.0\",\n+    \"//\": \"The real version is in release.yaml, this one just needs to be bigger\",\n+    \"version\": \"0.2.0-dev\",\n     \"publisher\": \"matklad\",\n     \"repository\": {\n         \"url\": \"https://github.com/rust-analyzer/rust-analyzer.git\","}, {"sha": "37497fb7458b688d7f90ea974142c92392ee1d63", "filename": "xtask/src/cmd.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d46b555e31d04feeb6310c52248bba7ff267c453/xtask%2Fsrc%2Fcmd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46b555e31d04feeb6310c52248bba7ff267c453/xtask%2Fsrc%2Fcmd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcmd.rs?ref=d46b555e31d04feeb6310c52248bba7ff267c453", "patch": "@@ -1,56 +0,0 @@\n-use std::process::{Command, Output, Stdio};\n-\n-use anyhow::{Context, Result};\n-\n-use crate::project_root;\n-\n-pub struct Cmd<'a> {\n-    pub unix: &'a str,\n-    pub windows: &'a str,\n-    pub work_dir: &'a str,\n-}\n-\n-impl Cmd<'_> {\n-    pub fn run(self) -> Result<()> {\n-        if cfg!(windows) {\n-            run(self.windows, self.work_dir)\n-        } else {\n-            run(self.unix, self.work_dir)\n-        }\n-    }\n-    pub fn run_with_output(self) -> Result<String> {\n-        if cfg!(windows) {\n-            run_with_output(self.windows, self.work_dir)\n-        } else {\n-            run_with_output(self.unix, self.work_dir)\n-        }\n-    }\n-}\n-\n-pub fn run(cmdline: &str, dir: &str) -> Result<()> {\n-    do_run(cmdline, dir, &mut |c| {\n-        c.stdout(Stdio::inherit());\n-    })\n-    .map(|_| ())\n-}\n-\n-pub fn run_with_output(cmdline: &str, dir: &str) -> Result<String> {\n-    let output = do_run(cmdline, dir, &mut |_| {})?;\n-    let stdout = String::from_utf8(output.stdout)?;\n-    let stdout = stdout.trim().to_string();\n-    Ok(stdout)\n-}\n-\n-fn do_run(cmdline: &str, dir: &str, f: &mut dyn FnMut(&mut Command)) -> Result<Output> {\n-    eprintln!(\"\\nwill run: {}\", cmdline);\n-    let proj_dir = project_root().join(dir);\n-    let mut args = cmdline.split_whitespace();\n-    let exec = args.next().unwrap();\n-    let mut cmd = Command::new(exec);\n-    f(cmd.args(args).current_dir(proj_dir).stderr(Stdio::inherit()));\n-    let output = cmd.output().with_context(|| format!(\"running `{}`\", cmdline))?;\n-    if !output.status.success() {\n-        anyhow::bail!(\"`{}` exited with {}\", cmdline, output.status);\n-    }\n-    Ok(output)\n-}"}, {"sha": "540a66130bd4110eac62a16c790607d3507ab23f", "filename": "xtask/src/install.rs", "status": "modified", "additions": 45, "deletions": 71, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -2,9 +2,9 @@\n \n use std::{env, path::PathBuf, str};\n \n-use anyhow::{Context, Result};\n+use anyhow::{bail, format_err, Context, Result};\n \n-use crate::cmd::{run, run_with_output, Cmd};\n+use crate::not_bash::{ls, pushd, rm, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 41;\n@@ -55,7 +55,7 @@ fn fix_path_for_mac() -> Result<()> {\n         const ROOT_DIR: &str = \"\";\n         let home_dir = match env::var(\"HOME\") {\n             Ok(home) => home,\n-            Err(e) => anyhow::bail!(\"Failed getting HOME from environment with error: {}.\", e),\n+            Err(e) => bail!(\"Failed getting HOME from environment with error: {}.\", e),\n         };\n \n         [ROOT_DIR, &home_dir]\n@@ -69,7 +69,7 @@ fn fix_path_for_mac() -> Result<()> {\n     if !vscode_path.is_empty() {\n         let vars = match env::var_os(\"PATH\") {\n             Some(path) => path,\n-            None => anyhow::bail!(\"Could not get PATH variable from env.\"),\n+            None => bail!(\"Could not get PATH variable from env.\"),\n         };\n \n         let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n@@ -82,84 +82,61 @@ fn fix_path_for_mac() -> Result<()> {\n }\n \n fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n-    let npm_version = Cmd {\n-        unix: r\"npm --version\",\n-        windows: r\"cmd.exe /c npm --version\",\n-        work_dir: \"./editors/code\",\n-    }\n-    .run();\n-\n-    if npm_version.is_err() {\n-        eprintln!(\"\\nERROR: `npm --version` failed, `npm` is required to build the VS Code plugin\")\n-    }\n+    let _dir = pushd(\"./editors/code\");\n \n-    Cmd { unix: r\"npm install\", windows: r\"cmd.exe /c npm install\", work_dir: \"./editors/code\" }\n-        .run()?;\n-    Cmd {\n-        unix: r\"npm run package --scripts-prepend-node-path\",\n-        windows: r\"cmd.exe /c npm run package\",\n-        work_dir: \"./editors/code\",\n-    }\n-    .run()?;\n+    let find_code = |f: fn(&str) -> bool| -> Result<&'static str> {\n+        [\"code\", \"code-insiders\", \"codium\", \"code-oss\"]\n+            .iter()\n+            .copied()\n+            .find(|bin| f(bin))\n+            .ok_or_else(|| {\n+                format_err!(\"Can't execute `code --version`. Perhaps it is not in $PATH?\")\n+            })\n+    };\n \n-    let code_binary = [\"code\", \"code-insiders\", \"codium\", \"code-oss\"].iter().find(|bin| {\n-        Cmd {\n-            unix: &format!(\"{} --version\", bin),\n-            windows: &format!(\"cmd.exe /c {}.cmd --version\", bin),\n-            work_dir: \"./editors/code\",\n-        }\n-        .run()\n-        .is_ok()\n-    });\n+    let installed_extensions;\n+    if cfg!(unix) {\n+        run!(\"npm --version\").context(\"`npm` is required to build the VS Code plugin\")?;\n+        run!(\"npm install\")?;\n \n-    let code_binary = match code_binary {\n-        Some(it) => it,\n-        None => anyhow::bail!(\"Can't execute `code --version`. Perhaps it is not in $PATH?\"),\n-    };\n+        let vsix_pkg = {\n+            rm(\"*.vsix\")?;\n+            run!(\"npm run package --scripts-prepend-node-path\")?;\n+            ls(\"*.vsix\")?.pop().unwrap()\n+        };\n \n-    Cmd {\n-        unix: &format!(r\"{} --install-extension ./rust-analyzer-0.1.0.vsix --force\", code_binary),\n-        windows: &format!(\n-            r\"cmd.exe /c {}.cmd --install-extension ./rust-analyzer-0.1.0.vsix --force\",\n-            code_binary\n-        ),\n-        work_dir: \"./editors/code\",\n-    }\n-    .run()?;\n+        let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n+        run!(\"{} --install-extension {} --force\", code, vsix_pkg.display())?;\n+        installed_extensions = run!(\"{} --list-extensions\", code; echo = false)?;\n+    } else {\n+        run!(\"cmd.exe /c npm --version\")\n+            .context(\"`npm` is required to build the VS Code plugin\")?;\n+        run!(\"cmd.exe /c npm install\")?;\n+\n+        let vsix_pkg = {\n+            rm(\"*.vsix\")?;\n+            run!(\"cmd.exe /c npm run package\")?;\n+            ls(\"*.vsix\")?.pop().unwrap()\n+        };\n \n-    let installed_extensions = Cmd {\n-        unix: &format!(r\"{} --list-extensions\", code_binary),\n-        windows: &format!(r\"cmd.exe /c {}.cmd --list-extensions\", code_binary),\n-        work_dir: \".\",\n+        let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n+        run!(r\"cmd.exe /c {}.cmd --install-extension {} --force\", code, vsix_pkg.display())?;\n+        installed_extensions = run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?;\n     }\n-    .run_with_output()?;\n \n     if !installed_extensions.contains(\"rust-analyzer\") {\n-        anyhow::bail!(\n+        bail!(\n             \"Could not install the Visual Studio Code extension. \\\n              Please make sure you have at least NodeJS 10.x together with the latest version of VS Code installed and try again.\"\n         );\n     }\n \n-    if installed_extensions.contains(\"ra-lsp\") {\n-        Cmd {\n-            unix: &format!(r\"{} --uninstall-extension matklad.ra-lsp\", code_binary),\n-            windows: &format!(\n-                r\"cmd.exe /c {}.cmd --uninstall-extension matklad.ra-lsp\",\n-                code_binary\n-            ),\n-            work_dir: \"./editors/code\",\n-        }\n-        .run()?;\n-    }\n-\n     Ok(())\n }\n \n fn install_server(opts: ServerOpt) -> Result<()> {\n     let mut old_rust = false;\n-    if let Ok(stdout) = run_with_output(\"cargo --version\", \".\") {\n-        println!(\"{}\", stdout);\n+    if let Ok(stdout) = run!(\"cargo --version\") {\n         if !check_version(&stdout, REQUIRED_RUST_VERSION) {\n             old_rust = true;\n         }\n@@ -172,20 +149,17 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n         )\n     }\n \n-    let res = if opts.jemalloc {\n-        run(\"cargo install --path crates/ra_lsp_server --locked --force --features jemalloc\", \".\")\n-    } else {\n-        run(\"cargo install --path crates/ra_lsp_server --locked --force\", \".\")\n-    };\n+    let jemalloc = if opts.jemalloc { \"--features jemalloc\" } else { \"\" };\n+    let res = run!(\"cargo install --path crates/ra_lsp_server --locked --force {}\", jemalloc);\n \n     if res.is_err() && old_rust {\n         eprintln!(\n             \"\\nWARNING: at least rust 1.{}.0 is required to compile rust-analyzer\\n\",\n             REQUIRED_RUST_VERSION,\n-        )\n+        );\n     }\n \n-    res\n+    res.map(drop)\n }\n \n fn check_version(version_output: &str, min_minor_version: u32) -> bool {"}, {"sha": "d2ef2e95b74599ab9593c65b1078f4f59cdbda29", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-mod cmd;\n+pub mod not_bash;\n pub mod install;\n pub mod pre_commit;\n \n@@ -16,8 +16,8 @@ use std::{\n };\n \n use crate::{\n-    cmd::{run, run_with_output},\n     codegen::Mode,\n+    not_bash::{pushd, run},\n };\n \n pub use anyhow::Result;\n@@ -38,9 +38,9 @@ pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     ensure_rustfmt()?;\n \n     if mode == Mode::Verify {\n-        run(&format!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN), \".\")?;\n+        run!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN)?;\n     } else {\n-        run(&format!(\"rustup run {} -- cargo fmt\", TOOLCHAIN), \".\")?;\n+        run!(\"rustup run {} -- cargo fmt\", TOOLCHAIN)?;\n     }\n     Ok(())\n }\n@@ -70,8 +70,9 @@ fn ensure_rustfmt() -> Result<()> {\n         Ok(status) if status.success() => return Ok(()),\n         _ => (),\n     };\n-    run(&format!(\"rustup toolchain install {}\", TOOLCHAIN), \".\")?;\n-    run(&format!(\"rustup component add rustfmt --toolchain {}\", TOOLCHAIN), \".\")\n+    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n+    run!(\"rustup component add rustfmt --toolchain {}\", TOOLCHAIN)?;\n+    Ok(())\n }\n \n pub fn run_clippy() -> Result<()> {\n@@ -92,34 +93,31 @@ pub fn run_clippy() -> Result<()> {\n         \"clippy::nonminimal_bool\",\n         \"clippy::redundant_pattern_matching\",\n     ];\n-    run(\n-        &format!(\n-            \"rustup run {} -- cargo clippy --all-features --all-targets -- -A {}\",\n-            TOOLCHAIN,\n-            allowed_lints.join(\" -A \")\n-        ),\n-        \".\",\n+    run!(\n+        \"rustup run {} -- cargo clippy --all-features --all-targets -- -A {}\",\n+        TOOLCHAIN,\n+        allowed_lints.join(\" -A \")\n     )?;\n     Ok(())\n }\n \n fn install_clippy() -> Result<()> {\n-    run(&format!(\"rustup toolchain install {}\", TOOLCHAIN), \".\")?;\n-    run(&format!(\"rustup component add clippy --toolchain {}\", TOOLCHAIN), \".\")\n+    run!(\"rustup toolchain install {}\", TOOLCHAIN)?;\n+    run!(\"rustup component add clippy --toolchain {}\", TOOLCHAIN)?;\n+    Ok(())\n }\n \n pub fn run_fuzzer() -> Result<()> {\n-    match Command::new(\"cargo\")\n-        .args(&[\"fuzz\", \"--help\"])\n-        .stderr(Stdio::null())\n-        .stdout(Stdio::null())\n-        .status()\n-    {\n-        Ok(status) if status.success() => (),\n-        _ => run(\"cargo install cargo-fuzz\", \".\")?,\n+    let _d = pushd(\"./crates/ra_syntax\");\n+    match run!(\"cargo fuzz --help\") {\n+        Ok(_) => (),\n+        _ => {\n+            run!(\"cargo install cargo-fuzz\")?;\n+        }\n     };\n \n-    run(\"rustup run nightly -- cargo fuzz run parser\", \"./crates/ra_syntax\")\n+    run!(\"rustup run nightly -- cargo fuzz run parser\")?;\n+    Ok(())\n }\n \n /// Cleans the `./target` dir after the build such that only\n@@ -161,15 +159,15 @@ fn rm_rf(path: &Path) -> Result<()> {\n }\n \n pub fn run_release() -> Result<()> {\n-    run(\"git switch release\", \".\")?;\n-    run(\"git fetch upstream\", \".\")?;\n-    run(\"git reset --hard upstream/master\", \".\")?;\n-    run(\"git push\", \".\")?;\n+    run!(\"git switch release\")?;\n+    run!(\"git fetch upstream\")?;\n+    run!(\"git reset --hard upstream/master\")?;\n+    run!(\"git push\")?;\n \n     let changelog_dir = project_root().join(\"../rust-analyzer.github.io/thisweek/_posts\");\n \n-    let today = run_with_output(\"date --iso\", \".\")?;\n-    let commit = run_with_output(\"git rev-parse HEAD\", \".\")?;\n+    let today = run!(\"date --iso\")?;\n+    let commit = run!(\"git rev-parse HEAD\")?;\n     let changelog_n = fs::read_dir(changelog_dir.as_path())?.count();\n \n     let contents = format!("}, {"sha": "56d6c6c2d83be36547f024cb4d9ae9ff8eb12d2e", "filename": "xtask/src/not_bash.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -0,0 +1,123 @@\n+//! A bad shell -- small cross platform module for writing glue code\n+use std::{\n+    cell::RefCell,\n+    env,\n+    ffi::OsStr,\n+    fs,\n+    path::PathBuf,\n+    process::{Command, Stdio},\n+};\n+\n+use anyhow::{bail, Context, Result};\n+\n+macro_rules! _run {\n+    ($($expr:expr),*) => {\n+        run!($($expr),*; echo = true)\n+    };\n+    ($($expr:expr),* ; echo = $echo:expr) => {\n+        $crate::not_bash::run_process(format!($($expr),*), $echo)\n+    };\n+}\n+pub(crate) use _run as run;\n+\n+pub struct Pushd {\n+    _p: (),\n+}\n+\n+pub fn pushd(path: impl Into<PathBuf>) -> Pushd {\n+    Env::with(|env| env.pushd(path.into()));\n+    Pushd { _p: () }\n+}\n+\n+impl Drop for Pushd {\n+    fn drop(&mut self) {\n+        Env::with(|env| env.popd())\n+    }\n+}\n+\n+pub fn rm(glob: &str) -> Result<()> {\n+    let cwd = Env::with(|env| env.cwd());\n+    ls(glob)?.into_iter().try_for_each(|it| fs::remove_file(cwd.join(it)))?;\n+    Ok(())\n+}\n+\n+pub fn ls(glob: &str) -> Result<Vec<PathBuf>> {\n+    let cwd = Env::with(|env| env.cwd());\n+    let mut res = Vec::new();\n+    for entry in fs::read_dir(&cwd)? {\n+        let entry = entry?;\n+        if matches(&entry.file_name(), glob) {\n+            let path = entry.path();\n+            let path = path.strip_prefix(&cwd).unwrap();\n+            res.push(path.to_path_buf())\n+        }\n+    }\n+    return Ok(res);\n+\n+    fn matches(file_name: &OsStr, glob: &str) -> bool {\n+        assert!(glob.starts_with('*'));\n+        file_name.to_string_lossy().ends_with(&glob[1..])\n+    }\n+}\n+\n+#[doc(hidden)]\n+pub fn run_process(cmd: String, echo: bool) -> Result<String> {\n+    run_process_inner(&cmd, echo).with_context(|| format!(\"process `{}` failed\", cmd))\n+}\n+\n+fn run_process_inner(cmd: &str, echo: bool) -> Result<String> {\n+    let cwd = Env::with(|env| env.cwd());\n+    let mut args = shelx(cmd);\n+    let binary = args.remove(0);\n+\n+    if echo {\n+        println!(\"> {}\", cmd)\n+    }\n+\n+    let output = Command::new(binary)\n+        .args(args)\n+        .current_dir(cwd)\n+        .stdin(Stdio::null())\n+        .stderr(Stdio::inherit())\n+        .output()?;\n+    let stdout = String::from_utf8(output.stdout)?;\n+\n+    if echo {\n+        print!(\"{}\", stdout)\n+    }\n+\n+    if !output.status.success() {\n+        bail!(\"{}\", output.status)\n+    }\n+\n+    Ok(stdout)\n+}\n+\n+// FIXME: some real shell lexing here\n+fn shelx(cmd: &str) -> Vec<String> {\n+    cmd.split_whitespace().map(|it| it.to_string()).collect()\n+}\n+\n+#[derive(Default)]\n+struct Env {\n+    pushd_stack: Vec<PathBuf>,\n+}\n+\n+impl Env {\n+    fn with<F: FnOnce(&mut Env) -> T, T>(f: F) -> T {\n+        thread_local! {\n+            static ENV: RefCell<Env> = Default::default();\n+        }\n+        ENV.with(|it| f(&mut *it.borrow_mut()))\n+    }\n+\n+    fn pushd(&mut self, dir: PathBuf) {\n+        self.pushd_stack.push(dir)\n+    }\n+    fn popd(&mut self) {\n+        self.pushd_stack.pop().unwrap();\n+    }\n+    fn cwd(&self) -> PathBuf {\n+        self.pushd_stack.last().cloned().unwrap_or_else(|| env::current_dir().unwrap())\n+    }\n+}"}, {"sha": "056f34acfb82ee4562900f9e98a565f3df11d53c", "filename": "xtask/src/pre_commit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Fpre_commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94323c89963b7d78039625b8e643d79bc2f1f261/xtask%2Fsrc%2Fpre_commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_commit.rs?ref=94323c89963b7d78039625b8e643d79bc2f1f261", "patch": "@@ -4,18 +4,18 @@ use std::{fs, path::PathBuf};\n \n use anyhow::{bail, Result};\n \n-use crate::{cmd::run_with_output, project_root, run, run_rustfmt, Mode};\n+use crate::{not_bash::run, project_root, run_rustfmt, Mode};\n \n // FIXME: if there are changed `.ts` files, also reformat TypeScript (by\n // shelling out to `npm fmt`).\n pub fn run_hook() -> Result<()> {\n     run_rustfmt(Mode::Overwrite)?;\n \n-    let diff = run_with_output(\"git diff --diff-filter=MAR --name-only --cached\", \".\")?;\n+    let diff = run!(\"git diff --diff-filter=MAR --name-only --cached\")?;\n \n     let root = project_root();\n     for line in diff.lines() {\n-        run(&format!(\"git update-index --add {}\", root.join(line).to_string_lossy()), \".\")?;\n+        run!(\"git update-index --add {}\", root.join(line).display())?;\n     }\n \n     Ok(())"}]}