{"sha": "44c411ec6f5aea339fe66d5f22548323cbad2edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YzQxMWVjNmY1YWVhMzM5ZmU2NmQ1ZjIyNTQ4MzIzY2JhZDJlZGI=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:41Z"}, "message": "Rollup merge of #59451 - TimDiekmann:patch-1, r=sfackler\n\nAdd `Default` to `std::alloc::System`\n\n`System` is a unit struct, thus, it can be constructed without any additional information. Therefore `Default` is a noop. However, in generic code, a `T: Default` may happen as in\n\n```rust\n#[derive(Default)]\nstruct Foo<A> {\n    allocator: A\n}\n```\n\nDoes this need a feature gate?\nShould I also add `PartialEq/Eq/PartialOrd/Ord/Hash`?", "tree": {"sha": "79eec0b76f2f6aecfa619a897f3355fcfb27aba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79eec0b76f2f6aecfa619a897f3355fcfb27aba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c411ec6f5aea339fe66d5f22548323cbad2edb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCA9CRBK7hj4Ov3rIwAAdHIIAK/smi9mFRL3FUt8TBP4mRq3\nilSOSb2BR9Co6PAsne9ckZ9SCGExFX/572iTrryVM5NB3yxTAEEBo4uQ9E58EPcv\n/LxXUWysF0UbNXiRb3uXqXYT5/3V/dF73GlNhdK7VuWnJ037rJdkGPXpVrhaaaE1\nX4D9zV7ziQdSmPkxBt8rZC1l620YFgjry6YltdaK1SiXnw43wyjIptCIQwBs6Wx4\n+qnhG4PFKvo/qBRb1bDVJWaRc6kfUdsQ5RE1/7vuf1TTbGwrCdrWs/HJwzpTmK20\nis/0+uU65FFyIERP3ADV2SM3FWDZvGXzb6PaFBTxF25rQAB0zl3bi4QG4AOX3IY=\n=jxvc\n-----END PGP SIGNATURE-----\n", "payload": "tree 79eec0b76f2f6aecfa619a897f3355fcfb27aba1\nparent 6e65ae779f84ae7e103c202d41338180988b4a62\nparent 8733b2ab0c6bfe60df594e41ee9b1ce1f8caeaa0\nauthor Josh Stone <cuviper@gmail.com> 1553735741 -0700\ncommitter GitHub <noreply@github.com> 1553735741 -0700\n\nRollup merge of #59451 - TimDiekmann:patch-1, r=sfackler\n\nAdd `Default` to `std::alloc::System`\n\n`System` is a unit struct, thus, it can be constructed without any additional information. Therefore `Default` is a noop. However, in generic code, a `T: Default` may happen as in\n\n```rust\n#[derive(Default)]\nstruct Foo<A> {\n    allocator: A\n}\n```\n\nDoes this need a feature gate?\nShould I also add `PartialEq/Eq/PartialOrd/Ord/Hash`?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c411ec6f5aea339fe66d5f22548323cbad2edb", "html_url": "https://github.com/rust-lang/rust/commit/44c411ec6f5aea339fe66d5f22548323cbad2edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c411ec6f5aea339fe66d5f22548323cbad2edb/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e65ae779f84ae7e103c202d41338180988b4a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e65ae779f84ae7e103c202d41338180988b4a62", "html_url": "https://github.com/rust-lang/rust/commit/6e65ae779f84ae7e103c202d41338180988b4a62"}, {"sha": "8733b2ab0c6bfe60df594e41ee9b1ce1f8caeaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8733b2ab0c6bfe60df594e41ee9b1ce1f8caeaa0", "html_url": "https://github.com/rust-lang/rust/commit/8733b2ab0c6bfe60df594e41ee9b1ce1f8caeaa0"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "4241f47b661d721b742a0b9bc8124592d7efeb8e", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c411ec6f5aea339fe66d5f22548323cbad2edb/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c411ec6f5aea339fe66d5f22548323cbad2edb/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=44c411ec6f5aea339fe66d5f22548323cbad2edb", "patch": "@@ -130,7 +130,7 @@ pub use alloc_crate::alloc::*;\n /// program opts in to using jemalloc as the global allocator, `System` will\n /// still allocate memory using `malloc` and `HeapAlloc`.\n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Default, Copy, Clone)]\n pub struct System;\n \n // The Alloc impl just forwards to the GlobalAlloc impl, which is in `std::sys::*::alloc`."}]}