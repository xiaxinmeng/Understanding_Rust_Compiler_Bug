{"sha": "89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "node_id": "C_kwDOAAsO6NoAKDg5YmRiZDAyOTRkZGI0ZWNmYTRiNzVjY2Q4NDQ2ZDRkNWM0ZDYwZTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T05:31:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T05:31:43Z"}, "message": "Rollup merge of #97105 - JulianKnodt:const_dep_gen_const_expr, r=lcnr\n\nAdd tests for lint on type dependent on consts\n\nr? `@lcnr`", "tree": {"sha": "7be240ee0e4ed44a795c363dd9cd504c8ff29079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be240ee0e4ed44a795c363dd9cd504c8ff29079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijb8/CRBK7hj4Ov3rIwAAM88IAIJLlbeqYA2NwRFvcyWUZvSW\nHore6wZyQp/dHbziLvechbBw6LJWuzPC+x7mhPbPWwq3l66L7VKshgWf8WpZ0eCP\n3wuzo53JPaj0A53x7WYuBcY4wM+1mL35KcB3hfZIiyK3RlP4QPsu1cstPVyyI5Gm\n2Wb8YBt0TcSikMe7zpZ/A6pZ0ObuItM7sPJRBySeS5R7iyhA0hagfUSfHVgY2Jza\ntnSufAW1AFxgWE40J7GrZi0D6E1ROY+GJlRp/KumB5CbfCsFcKH8aFIV7/YokE+H\nllFxNT82TiuNFSQp+mIazWU3fOaaV/UPWji53z7PbdaEoWHauxGA+wDdsEzGfSw=\n=lKnD\n-----END PGP SIGNATURE-----\n", "payload": "tree 7be240ee0e4ed44a795c363dd9cd504c8ff29079\nparent fbb17777fee8048c3bce9019ef1c1e7e42bb303b\nparent ee8efc5c4a634a26be59e2a90a8a686b1242ce03\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653456703 +0200\ncommitter GitHub <noreply@github.com> 1653456703 +0200\n\nRollup merge of #97105 - JulianKnodt:const_dep_gen_const_expr, r=lcnr\n\nAdd tests for lint on type dependent on consts\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "html_url": "https://github.com/rust-lang/rust/commit/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb17777fee8048c3bce9019ef1c1e7e42bb303b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb17777fee8048c3bce9019ef1c1e7e42bb303b", "html_url": "https://github.com/rust-lang/rust/commit/fbb17777fee8048c3bce9019ef1c1e7e42bb303b"}, {"sha": "ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "html_url": "https://github.com/rust-lang/rust/commit/ee8efc5c4a634a26be59e2a90a8a686b1242ce03"}], "stats": {"total": 378, "additions": 244, "deletions": 134}, "files": [{"sha": "539e94993ae675fbc3de6ea920bf5d8cf964efd6", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -20,6 +20,7 @@\n #![feature(label_break_value)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(if_let_guard)]\n #![feature(never_type)]\n #![recursion_limit = \"512\"] // For rustdoc\n "}, {"sha": "0dea2c3d8bfe8e0a9692c2c0bbf6f5bf339dd294", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 132, "deletions": 134, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -39,150 +39,148 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     let tcx = infcx.tcx;\n \n     if tcx.features().generic_const_exprs {\n-        match AbstractConst::new(tcx, uv)? {\n-            // We are looking at a generic abstract constant.\n-            Some(ct) => {\n-                if satisfied_from_param_env(tcx, ct, param_env)? {\n-                    return Ok(());\n-                }\n-\n-                // We were unable to unify the abstract constant with\n-                // a constant found in the caller bounds, there are\n-                // now three possible cases here.\n-                #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n-                enum FailureKind {\n-                    /// The abstract const still references an inference\n-                    /// variable, in this case we return `TooGeneric`.\n-                    MentionsInfer,\n-                    /// The abstract const references a generic parameter,\n-                    /// this means that we emit an error here.\n-                    MentionsParam,\n-                    /// The substs are concrete enough that we can simply\n-                    /// try and evaluate the given constant.\n-                    Concrete,\n-                }\n-                let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n-                    Node::Leaf(leaf) => {\n-                        if leaf.has_infer_types_or_consts() {\n-                            failure_kind = FailureKind::MentionsInfer;\n-                        } else if leaf.has_param_types_or_consts() {\n-                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n-                        }\n-\n-                        ControlFlow::CONTINUE\n+        if let Some(ct) = AbstractConst::new(tcx, uv)? {\n+            if satisfied_from_param_env(tcx, ct, param_env)? {\n+                return Ok(());\n+            }\n+\n+            // We were unable to unify the abstract constant with\n+            // a constant found in the caller bounds, there are\n+            // now three possible cases here.\n+            #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+            enum FailureKind {\n+                /// The abstract const still references an inference\n+                /// variable, in this case we return `TooGeneric`.\n+                MentionsInfer,\n+                /// The abstract const references a generic parameter,\n+                /// this means that we emit an error here.\n+                MentionsParam,\n+                /// The substs are concrete enough that we can simply\n+                /// try and evaluate the given constant.\n+                Concrete,\n+            }\n+            let mut failure_kind = FailureKind::Concrete;\n+            walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n+                Node::Leaf(leaf) => {\n+                    if leaf.has_infer_types_or_consts() {\n+                        failure_kind = FailureKind::MentionsInfer;\n+                    } else if leaf.has_param_types_or_consts() {\n+                        failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n-                    Node::Cast(_, _, ty) => {\n-                        if ty.has_infer_types_or_consts() {\n-                            failure_kind = FailureKind::MentionsInfer;\n-                        } else if ty.has_param_types_or_consts() {\n-                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n-                        }\n \n-                        ControlFlow::CONTINUE\n-                    }\n-                    Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n+                    ControlFlow::CONTINUE\n+                }\n+                Node::Cast(_, _, ty) => {\n+                    if ty.has_infer_types_or_consts() {\n+                        failure_kind = FailureKind::MentionsInfer;\n+                    } else if ty.has_param_types_or_consts() {\n+                        failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n-                });\n \n-                match failure_kind {\n-                    FailureKind::MentionsInfer => {\n-                        return Err(NotConstEvaluatable::MentionsInfer);\n-                    }\n-                    FailureKind::MentionsParam => {\n-                        return Err(NotConstEvaluatable::MentionsParam);\n-                    }\n-                    FailureKind::Concrete => {\n-                        // Dealt with below by the same code which handles this\n-                        // without the feature gate.\n-                    }\n+                    ControlFlow::CONTINUE\n                 }\n-            }\n-            None => {\n-                // If we are dealing with a concrete constant, we can\n-                // reuse the old code path and try to evaluate\n-                // the constant.\n-            }\n-        }\n-    }\n+                Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n+                    ControlFlow::CONTINUE\n+                }\n+            });\n \n-    let future_compat_lint = || {\n-        if let Some(local_def_id) = uv.def.did.as_local() {\n-            infcx.tcx.struct_span_lint_hir(\n-                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n-                infcx.tcx.hir().local_def_id_to_hir_id(local_def_id),\n-                span,\n-                |err| {\n-                    err.build(\"cannot use constants which depend on generic parameters in types\")\n-                        .emit();\n-                },\n-            );\n-        }\n-    };\n-\n-    // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n-    // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n-    //\n-    // We previously did not check this, so we only emit a future compat warning if\n-    // const evaluation succeeds and the given constant is still polymorphic for now\n-    // and hopefully soon change this to an error.\n-    //\n-    // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n-\n-    if concrete.is_ok() && uv.substs.has_param_types_or_consts() {\n-        match infcx.tcx.def_kind(uv.def.did) {\n-            DefKind::AnonConst | DefKind::InlineConst => {\n-                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n-\n-                if mir_body.is_polymorphic {\n-                    future_compat_lint();\n+            match failure_kind {\n+                FailureKind::MentionsInfer => {\n+                    return Err(NotConstEvaluatable::MentionsInfer);\n+                }\n+                FailureKind::MentionsParam => {\n+                    return Err(NotConstEvaluatable::MentionsParam);\n                 }\n+                // returned below\n+                FailureKind::Concrete => {}\n             }\n-            _ => future_compat_lint(),\n         }\n-    }\n-\n-    // If we're evaluating a foreign constant, under a nightly compiler without generic\n-    // const exprs, AND it would've passed if that expression had been evaluated with\n-    // generic const exprs, then suggest using generic const exprs.\n-    if concrete.is_err()\n-        && tcx.sess.is_nightly_build()\n-        && !uv.def.did.is_local()\n-        && !tcx.features().generic_const_exprs\n-        && let Ok(Some(ct)) = AbstractConst::new(tcx, uv)\n-        && satisfied_from_param_env(tcx, ct, param_env) == Ok(true)\n-    {\n-        tcx.sess\n-            .struct_span_fatal(\n-                // Slightly better span than just using `span` alone\n-                if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n-                \"failed to evaluate generic const expression\",\n-            )\n-            .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n-            .span_suggestion_verbose(\n-                rustc_span::DUMMY_SP,\n-                \"consider enabling this feature\",\n-                \"#![feature(generic_const_exprs)]\\n\".to_string(),\n-                rustc_errors::Applicability::MaybeIncorrect,\n-            )\n-            .emit()\n-    }\n-\n-    debug!(?concrete, \"is_const_evaluatable\");\n-    match concrete {\n-        Err(ErrorHandled::TooGeneric) => Err(match uv.has_infer_types_or_consts() {\n-            true => NotConstEvaluatable::MentionsInfer,\n-            false => NotConstEvaluatable::MentionsParam,\n-        }),\n-        Err(ErrorHandled::Linted) => {\n-            let reported =\n-                infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-            Err(NotConstEvaluatable::Error(reported))\n+        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        match concrete {\n+            Err(ErrorHandled::TooGeneric) => Err(if !uv.has_infer_types_or_consts() {\n+                infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, &format!(\"unexpected `TooGeneric` for {:?}\", uv));\n+                NotConstEvaluatable::MentionsParam\n+            } else {\n+                NotConstEvaluatable::MentionsInfer\n+            }),\n+            Err(ErrorHandled::Linted) => {\n+                let reported = infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, \"constant in type had error reported as lint\");\n+                Err(NotConstEvaluatable::Error(reported))\n+            }\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Ok(_) => Ok(()),\n+        }\n+    } else {\n+        // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n+        // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n+        //\n+        // We previously did not check this, so we only emit a future compat warning if\n+        // const evaluation succeeds and the given constant is still polymorphic for now\n+        // and hopefully soon change this to an error.\n+        //\n+        // See #74595 for more details about this.\n+        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+\n+        match concrete {\n+          // If we're evaluating a foreign constant, under a nightly compiler without generic\n+          // const exprs, AND it would've passed if that expression had been evaluated with\n+          // generic const exprs, then suggest using generic const exprs.\n+          Err(_) if tcx.sess.is_nightly_build()\n+            && let Ok(Some(ct)) = AbstractConst::new(tcx, uv)\n+            && satisfied_from_param_env(tcx, ct, param_env) == Ok(true) => {\n+              tcx.sess\n+                  .struct_span_fatal(\n+                      // Slightly better span than just using `span` alone\n+                      if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n+                      \"failed to evaluate generic const expression\",\n+                  )\n+                  .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n+                  .span_suggestion_verbose(\n+                      rustc_span::DUMMY_SP,\n+                      \"consider enabling this feature\",\n+                      \"#![feature(generic_const_exprs)]\\n\".to_string(),\n+                      rustc_errors::Applicability::MaybeIncorrect,\n+                  )\n+                  .emit()\n+            }\n+\n+            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n+                NotConstEvaluatable::MentionsInfer\n+                } else {\n+                NotConstEvaluatable::MentionsParam\n+            }),\n+            Err(ErrorHandled::Linted) => {\n+                let reported =\n+                    infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+                Err(NotConstEvaluatable::Error(reported))\n+            }\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Ok(_) => {\n+              if uv.substs.has_param_types_or_consts() {\n+                  assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n+                  let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n+\n+                  if mir_body.is_polymorphic {\n+                      let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n+                      tcx.struct_span_lint_hir(\n+                          lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                          tcx.hir().local_def_id_to_hir_id(local_def_id),\n+                          span,\n+                          |err| {\n+                              err.build(\"cannot use constants which depend on generic parameters in types\").emit();\n+                        })\n+                  }\n+              }\n+\n+              Ok(())\n+            },\n         }\n-        Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n-        Ok(_) => Ok(()),\n     }\n }\n "}, {"sha": "4cd86fecd7e9b763de28ce0dd2670ab14a88538e", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -0,0 +1,39 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/dependence_lint.rs:13:32\n+   |\n+LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+   |                                ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/dependence_lint.rs:20:37\n+   |\n+LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/dependence_lint.rs:9:9\n+   |\n+LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/dependence_lint.rs:16:9\n+   |\n+LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+"}, {"sha": "b13bcdb2c4786f392f2bc6004561ef02b2a5df0d", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.gce.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -0,0 +1,34 @@\n+error: overly complex generic constant\n+  --> $DIR/dependence_lint.rs:16:9\n+   |\n+LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+\n+error: overly complex generic constant\n+  --> $DIR/dependence_lint.rs:20:17\n+   |\n+LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+\n+error: unconstrained generic constant\n+  --> $DIR/dependence_lint.rs:13:12\n+   |\n+LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/dependence_lint.rs:9:9\n+   |\n+LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dcdfd75def9063c2b635867e9db06526e3331ea0", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -0,0 +1,25 @@\n+// revisions: full gce\n+\n+#![cfg_attr(gce, feature(generic_const_exprs))]\n+#![allow(incomplete_features)]\n+\n+use std::mem::size_of;\n+\n+fn foo<T>() {\n+    [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+    //[gce]~^ ERROR unconstrained\n+    //[full]~^^ WARNING cannot use constants\n+    //[full]~| WARNING this was previously accepted\n+    let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+    //[full]~^ ERROR generic parameters may not be used\n+    //[gce]~^^ ERROR unconstrained generic\n+    [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+    //[gce]~^ ERROR overly complex\n+    //[full]~^^ WARNING cannot use constants\n+    //[full]~| WARNING this was previously accepted\n+    let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+    //[full]~^ ERROR generic parameters may not be used\n+    //[gce]~^^ ERROR overly complex\n+}\n+\n+fn main() {}"}, {"sha": "db8dc6ed4434e589bfe4e3fea7653ebbdea3cb4b", "filename": "src/test/ui/const-generics/generic_const_exprs/no_dependence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs?ref=89bdbd0294ddb4ecfa4b75ccd8446d4d5c4d60e9", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn two_args<const N: usize, const M: usize>() -> [u8; M + 2] {\n+    [0; M + 2]\n+}\n+\n+fn yay<const N: usize>() -> [u8; 4] {\n+     two_args::<N, 2>() // no lint\n+}\n+\n+fn main() {}"}]}