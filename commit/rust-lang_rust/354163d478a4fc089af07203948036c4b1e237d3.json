{"sha": "354163d478a4fc089af07203948036c4b1e237d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDE2M2Q0NzhhNGZjMDg5YWYwNzIwMzk0ODAzNmM0YjFlMjM3ZDM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-24T13:31:25Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-24T13:31:25Z"}, "message": "Simplify vtable interning", "tree": {"sha": "42025a6afc2e77f1240bf7732835d7853e4a62dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42025a6afc2e77f1240bf7732835d7853e4a62dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/354163d478a4fc089af07203948036c4b1e237d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/354163d478a4fc089af07203948036c4b1e237d3", "html_url": "https://github.com/rust-lang/rust/commit/354163d478a4fc089af07203948036c4b1e237d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/354163d478a4fc089af07203948036c4b1e237d3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166c49d7a1db570d273a653b2b0a0d9219b7700f", "url": "https://api.github.com/repos/rust-lang/rust/commits/166c49d7a1db570d273a653b2b0a0d9219b7700f", "html_url": "https://github.com/rust-lang/rust/commit/166c49d7a1db570d273a653b2b0a0d9219b7700f"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "c7545b7101c5c946aec3e7eec75d6323054b4507", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/354163d478a4fc089af07203948036c4b1e237d3/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354163d478a4fc089af07203948036c4b1e237d3/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=354163d478a4fc089af07203948036c4b1e237d3", "patch": "@@ -3,7 +3,6 @@\n //! After a const evaluation has computed a value, before we destroy the const evaluator's session\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n \n-use rustc::ty::layout::LayoutOf;\n use rustc::ty::{Ty, TyCtxt, ParamEnv, self};\n use rustc::mir::interpret::{\n     InterpResult, ErrorHandled,\n@@ -143,21 +142,18 @@ for\n         // Handle Reference types, as these are the only relocations supported by const eval.\n         // Raw pointers (and boxes) are handled by the `leftover_relocations` logic.\n         let ty = mplace.layout.ty;\n-        if let ty::Ref(_, _, mutability) = ty.sty {\n+        if let ty::Ref(_, referenced_ty, mutability) = ty.sty {\n             let value = self.ecx.read_immediate(mplace.into())?;\n             // Handle trait object vtables\n             if let Ok(meta) = value.to_meta() {\n-                let layout = self.ecx.layout_of(ty.builtin_deref(true).unwrap().ty)?;\n-                if layout.is_unsized() {\n-                    if let ty::Dynamic(..) = self.ecx.tcx.struct_tail(layout.ty).sty {\n+                if let ty::Dynamic(..) = self.ecx.tcx.struct_tail(referenced_ty).sty {\n                         if let Ok(vtable) = meta.unwrap().to_ptr() {\n                             // explitly choose `Immutable` here, since vtables are immutable, even\n                             // if the reference of the fat pointer is mutable\n                             self.intern_shallow(vtable, Mutability::Immutable)?;\n                         }\n                     }\n                 }\n-            }\n             let mplace = self.ecx.ref_to_mplace(value)?;\n             // Check if we have encountered this pointer+layout combination before.\n             // Only recurse for allocation-backed pointers."}, {"sha": "9352d9bfd7c02892511fbcf29faa00262978bcbe", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/354163d478a4fc089af07203948036c4b1e237d3/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354163d478a4fc089af07203948036c4b1e237d3/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=354163d478a4fc089af07203948036c4b1e237d3", "patch": "@@ -3,6 +3,7 @@\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stderr-test \"note: rustc 1.* running on .*\" -> \"note: rustc VERSION running on TARGET\"\n // normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n+// normalize-stderr-test \"src/librustc_mir/interpret/intern.rs:[0-9]*:[0-9]*\" -> \"src/librustc_mir/interpret/intern.rs:LL:CC\"\n \n #![allow(const_err)]\n "}, {"sha": "82569e260143c563a575f67f6f913b14c4d27f1b", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/354163d478a4fc089af07203948036c4b1e237d3/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/354163d478a4fc089af07203948036c4b1e237d3/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=354163d478a4fc089af07203948036c4b1e237d3", "patch": "@@ -1,12 +1,12 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references_ice.rs:26:9\n+  --> $DIR/mutable_references_ice.rs:27:9\n    |\n LL |         *MUH.x.get() = 99;\n    |         ^^^^^^^^^^^^^^^^^\n \n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n- right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites may arbitrarily decide to change, too.', src/librustc_mir/interpret/intern.rs:127:17\n+ right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites may arbitrarily decide to change, too.', src/librustc_mir/interpret/intern.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}]}