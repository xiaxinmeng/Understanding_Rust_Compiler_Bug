{"sha": "15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b", "node_id": "C_kwDOAAsO6NoAKDE1ZGZlYWJiOTZiMzcwZTlmYWIxZGRiYjhiMzlhOWRjZWZjMzc2NGI", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-15T11:05:11Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-15T11:05:11Z"}, "message": "Fix GAT completion not including generic parameters", "tree": {"sha": "f898ad86b93a37de091331596e071f19f46177e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f898ad86b93a37de091331596e071f19f46177e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b", "html_url": "https://github.com/rust-lang/rust/commit/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78", "html_url": "https://github.com/rust-lang/rust/commit/45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "b612cdc4a17410f3a90816f24ca1192a520c9c54", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 63, "deletions": 14, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=15dfeabb96b370e9fab1ddbb8b39a9dcefc3764b", "patch": "@@ -157,7 +157,7 @@ fn complete_trait_impl(\n                     add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n                 }\n                 (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n-                    add_type_alias_impl(acc, ctx, replacement_range, type_alias)\n+                    add_type_alias_impl(acc, ctx, replacement_range, type_alias, hir_impl)\n                 }\n                 (hir::AssocItem::Const(const_), All | Const) => {\n                     add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n@@ -247,24 +247,50 @@ fn add_type_alias_impl(\n     ctx: &CompletionContext<'_>,\n     replacement_range: TextRange,\n     type_alias: hir::TypeAlias,\n+    impl_def: hir::Impl,\n ) {\n-    let alias_name = type_alias.name(ctx.db);\n-    let (alias_name, escaped_name) =\n-        (alias_name.unescaped().to_smol_str(), alias_name.to_smol_str());\n+    let alias_name = type_alias.name(ctx.db).unescaped().to_smol_str();\n \n     let label = format!(\"type {} =\", alias_name);\n-    let replacement = format!(\"type {} = \", escaped_name);\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, replacement_range, label);\n     item.lookup_by(format!(\"type {}\", alias_name))\n         .set_documentation(type_alias.docs(ctx.db))\n         .set_relevance(CompletionRelevance { is_item_from_trait: true, ..Default::default() });\n-    match ctx.config.snippet_cap {\n-        Some(cap) => item\n-            .snippet_edit(cap, TextEdit::replace(replacement_range, format!(\"{}$0;\", replacement))),\n-        None => item.text_edit(TextEdit::replace(replacement_range, replacement)),\n-    };\n-    item.add_to(acc);\n+\n+    if let Some(source) = ctx.sema.source(type_alias) {\n+        let assoc_item = ast::AssocItem::TypeAlias(source.value);\n+        if let Some(transformed_item) = get_transformed_assoc_item(ctx, assoc_item, impl_def) {\n+            let transformed_ty = match transformed_item {\n+                ast::AssocItem::TypeAlias(ty) => ty,\n+                _ => unreachable!(),\n+            };\n+\n+            let start = transformed_ty.syntax().text_range().start();\n+            let Some(end) = transformed_ty\n+                .eq_token()\n+                .map(|tok| tok.text_range().start())\n+                .or(transformed_ty.semicolon_token().map(|tok| tok.text_range().start())) else { return };\n+\n+            let len = end - start;\n+            let mut decl = transformed_ty.syntax().text().slice(..len).to_string();\n+            if !decl.ends_with(' ') {\n+                decl.push(' ');\n+            }\n+            decl.push_str(\"= \");\n+\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = format!(\"{}$0;\", decl);\n+                    item.snippet_edit(cap, TextEdit::replace(replacement_range, snippet));\n+                }\n+                None => {\n+                    item.text_edit(TextEdit::replace(replacement_range, decl));\n+                }\n+            };\n+            item.add_to(acc);\n+        }\n+    }\n }\n \n fn add_const_impl(\n@@ -350,9 +376,7 @@ fn function_declaration(node: &ast::Fn, needs_whitespace: bool) -> String {\n         .map_or(end, |f| f.text_range().start());\n \n     let len = end - start;\n-    let range = TextRange::new(0.into(), len);\n-\n-    let syntax = node.text().slice(range).to_string();\n+    let syntax = node.text().slice(..len).to_string();\n \n     syntax.trim_end().to_owned()\n }\n@@ -1160,6 +1184,31 @@ impl Foo for Test {\n     $0\n }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn includes_gat_generics() {\n+        check_edit(\n+            \"type Ty\",\n+            r#\"\n+trait Tr<'b> {\n+    type Ty<'a: 'b, T: Copy, const C: usize>;\n+}\n+\n+impl<'b> Tr<'b> for () {\n+    $0\n+}\n+\"#,\n+            r#\"\n+trait Tr<'b> {\n+    type Ty<'a: 'b, T: Copy, const C: usize>;\n+}\n+\n+impl<'b> Tr<'b> for () {\n+    type Ty<'a: 'b, T: Copy, const C: usize> = $0;\n+}\n \"#,\n         );\n     }"}]}