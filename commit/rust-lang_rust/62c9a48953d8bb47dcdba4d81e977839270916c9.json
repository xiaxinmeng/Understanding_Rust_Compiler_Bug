{"sha": "62c9a48953d8bb47dcdba4d81e977839270916c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYzlhNDg5NTNkOGJiNDdkY2RiYTRkODFlOTc3ODM5MjcwOTE2Yzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:54Z"}, "message": "rollup merge of #20165: tamird/needstest-tests\n\n@alexcrichton @jakub-", "tree": {"sha": "2be241bd42cd641f3a9e88f847a94878f7b69f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be241bd42cd641f3a9e88f847a94878f7b69f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62c9a48953d8bb47dcdba4d81e977839270916c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62c9a48953d8bb47dcdba4d81e977839270916c9", "html_url": "https://github.com/rust-lang/rust/commit/62c9a48953d8bb47dcdba4d81e977839270916c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62c9a48953d8bb47dcdba4d81e977839270916c9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc8440821d4abefb7603b2a22946b788a5f1eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc8440821d4abefb7603b2a22946b788a5f1eed", "html_url": "https://github.com/rust-lang/rust/commit/dbc8440821d4abefb7603b2a22946b788a5f1eed"}, {"sha": "252423f8b75b25228090b7606c2afaa3fcc51835", "url": "https://api.github.com/repos/rust-lang/rust/commits/252423f8b75b25228090b7606c2afaa3fcc51835", "html_url": "https://github.com/rust-lang/rust/commit/252423f8b75b25228090b7606c2afaa3fcc51835"}], "stats": {"total": 559, "additions": 547, "deletions": 12}, "files": [{"sha": "923f95e69d122bb417f7361c34126658c10ffcc2", "filename": "src/test/compile-fail/double-type-import.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub use self::bar::X;\n+    use self::bar::X;\n+    //~^ ERROR a value named `X` has already been imported in this module\n+    //~| ERROR a type named `X` has already been imported in this module\n+\n+    mod bar {\n+        pub struct X;\n+    }\n+}\n+\n+fn main() {\n+    let _ = foo::X;\n+}"}, {"sha": "d9aa9d9dfccc73d7575c5c2c66ee031e998bdc3c", "filename": "src/test/compile-fail/duplicate-trait-bounds.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fduplicate-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fduplicate-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-trait-bounds.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+fn foo<T: Foo + Foo>() {} //~ ERROR `Foo` already appears in the list of bounds\n+\n+fn main() {}"}, {"sha": "ea0d880f4a1cc6a04f9da5415257a3a780e97379", "filename": "src/test/compile-fail/issue-13853-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait FromStructReader<'a> { }\n+trait ResponseHook {\n+     fn get<'a, T: FromStructReader<'a>>(&'a self);\n+}\n+fn foo(res : Box<ResponseHook>) { res.get } //~ ERROR attempted to take value of method\n+fn main() {}"}, {"sha": "f10c47b594ea2c9edaa98b1f2191578d7256e583", "filename": "src/test/compile-fail/issue-13853-3.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+enum NodeContents<'a> {\n+    Children(Vec<Node<'a>>),\n+}\n+\n+impl<'a> Drop for NodeContents<'a> {\n+    //~^ ERROR cannot implement a destructor on a structure with type parameters\n+    fn drop( &mut self ) {\n+    }\n+}\n+\n+struct Node<'a> {\n+    contents: NodeContents<'a>,\n+}\n+\n+impl<'a> Node<'a> {\n+    fn noName(contents: NodeContents<'a>) -> Node<'a> {\n+        Node{  contents: contents,}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7d653f5ab9e29ad5e8cc25a83c1476a779ecfd6f", "filename": "src/test/compile-fail/issue-13853-4.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct AutoBuilder<'a> {\n+    context: &'a int\n+}\n+\n+impl<'a> Drop for AutoBuilder<'a> {\n+    //~^ ERROR cannot implement a destructor on a structure with type parameters\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b3a4f341f8448f30aa6b76221d14fb31dbd23b39", "filename": "src/test/compile-fail/issue-13853-5.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Deserializer<'a> { }\n+\n+trait Deserializable {\n+    fn deserialize_token<'a, D: Deserializer<'a>>(D, &'a str) -> Self;\n+}\n+\n+impl<'a, T: Deserializable> Deserializable for &'a str {\n+    //~^ ERROR unable to infer enough type information\n+    fn deserialize_token<D: Deserializer<'a>>(_x: D, _y: &'a str) -> &'a str {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "868836a4bbd0a936dedfa09cd625843ab3d3abab", "filename": "src/test/compile-fail/issue-13853.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Node {\n+    fn zomg();\n+}\n+\n+trait Graph<N: Node> {\n+    fn nodes<'a, I: Iterator<&'a N>>(&'a self) -> I;\n+}\n+\n+impl<N: Node> Graph<N> for Vec<N> {\n+    fn nodes<'a, I: Iterator<&'a N>>(&self) -> I {\n+        self.iter() //~ ERROR mismatched types\n+    }\n+}\n+\n+struct Stuff;\n+\n+impl Node for Stuff {\n+    fn zomg() {\n+        println!(\"zomg\");\n+    }\n+}\n+\n+fn iterate<N: Node, G: Graph<N>>(graph: &G) {\n+    for node in graph.iter() { //~ ERROR does not implement any method in scope named\n+        node.zomg();\n+    }\n+}\n+\n+pub fn main() {\n+    let graph = Vec::new();\n+\n+    graph.push(Stuff);\n+\n+    iterate(graph); //~ ERROR mismatched types\n+}"}, {"sha": "c4846a64f29be2b6a2c3ae2e075157f4ed8c5f70", "filename": "src/test/compile-fail/issue-14227.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14227.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    pub static symbol: ();\n+}\n+static CRASH: () = symbol; //~ cannot refer to other statics by value\n+\n+fn main() {}"}, {"sha": "13d27e7152b037d99a492de24cd5d01eddacaea9", "filename": "src/test/compile-fail/issue-15034.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-15034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-15034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15034.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Lexer<'a> {\n+    input: &'a str,\n+}\n+\n+impl<'a> Lexer<'a> {\n+    pub fn new(input: &'a str) -> Lexer<'a> {\n+        Lexer { input: input }\n+    }\n+}\n+\n+struct Parser<'a> {\n+    lexer: &'a mut Lexer<'a>,\n+}\n+\n+impl<'a> Parser<'a> {\n+    pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n+        Parser { lexer: lexer }\n+        //~^ ERROR cannot infer an appropriate lifetime for lifetime parameter\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0e022834bacf2fae3bd8103b25199791ee4aeec2", "filename": "src/test/compile-fail/issue-16538.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Y {\n+    type X = uint;\n+    extern {\n+        static x: *const uint;\n+    }\n+    fn foo(value: *const X) -> *const X {\n+        value\n+    }\n+}\n+\n+static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+//~^ ERROR cannot refer to other statics by value\n+//~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+\n+fn main() {}"}, {"sha": "50b0a1a20c24c2e238acc7c7036a4fb0fc399c23", "filename": "src/test/compile-fail/issue-17728.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,132 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{Show, Formatter, Error};\n+use std::collections::HashMap;\n+\n+trait HasInventory {\n+    fn getInventory<'s>(&'s self) -> &'s mut Inventory;\n+    fn addToInventory(&self, item: &Item);\n+    fn removeFromInventory(&self, itemName: &str) -> bool;\n+}\n+\n+trait TraversesWorld {\n+    fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&Room, &str> {\n+        let direction = str_to_direction(directionStr);\n+        let maybe_room = room.direction_to_room.find(&direction);\n+        //~^ ERROR cannot infer an appropriate lifetime for autoref due to conflicting requirements\n+        match maybe_room {\n+            Some(entry) => Ok(entry),\n+            _ => Err(\"Direction does not exist in room.\")\n+        }\n+    }\n+}\n+\n+\n+#[deriving(Show, Eq, PartialEq, Hash)]\n+enum RoomDirection {\n+    West,\n+    East,\n+    North,\n+    South,\n+    Up,\n+    Down,\n+    In,\n+    Out,\n+\n+    None\n+}\n+\n+struct Room {\n+    description: String,\n+    items: Vec<Item>,\n+    direction_to_room: HashMap<RoomDirection, Room>,\n+}\n+\n+impl Room {\n+    fn new(description: &'static str) -> Room {\n+        Room {\n+            description: description.to_string(),\n+            items: Vec::new(),\n+            direction_to_room: HashMap::new()\n+        }\n+    }\n+\n+    fn add_direction(&mut self, direction: RoomDirection, room: Room) {\n+        self.direction_to_room.insert(direction, room);\n+    }\n+}\n+\n+struct Item {\n+    name: String,\n+}\n+\n+struct Inventory {\n+    items: Vec<Item>,\n+}\n+\n+impl Inventory {\n+    fn new() -> Inventory {\n+        Inventory {\n+            items: Vec::new()\n+        }\n+    }\n+}\n+\n+struct Player {\n+    name: String,\n+    inventory: Inventory,\n+}\n+\n+impl Player {\n+    fn new(name: &'static str) -> Player {\n+        Player {\n+            name: name.to_string(),\n+            inventory: Inventory::new()\n+        }\n+    }\n+}\n+\n+impl TraversesWorld for Player {\n+}\n+\n+impl Show for Player {\n+    fn fmt(&self, formatter: &mut Formatter) -> Result<(), Error> {\n+        formatter.write_str(\"Player{ name:\");\n+        formatter.write_str(self.name.as_slice());\n+        formatter.write_str(\" }\");\n+        Ok(())\n+    }\n+}\n+\n+fn str_to_direction(to_parse: &str) -> RoomDirection {\n+    match to_parse {\n+        \"w\" | \"west\" => RoomDirection::West,\n+        \"e\" | \"east\" => RoomDirection::East,\n+        \"n\" | \"north\" => RoomDirection::North,\n+        \"s\" | \"south\" => RoomDirection::South,\n+        \"in\" => RoomDirection::In,\n+        \"out\" => RoomDirection::Out,\n+        \"up\" => RoomDirection::Up,\n+        \"down\" => RoomDirection::Down,\n+        _ => None //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    let mut player = Player::new(\"Test player\");\n+    let mut room = Room::new(\"A test room\");\n+    println!(\"Made a player: {}\", player);\n+    println!(\"Direction parse: {}\", str_to_direction(\"east\"));\n+    match player.attemptTraverse(&room, \"west\") {\n+        Ok(_) => println!(\"Was able to move west\"),\n+        Err(msg) => println!(\"Not able to move west: {}\", msg)\n+    };\n+}"}, {"sha": "73f86fee903e5b7bfe910ef8d4aeeb7daff99108", "filename": "src/test/compile-fail/issue-17740.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    data: &'a[u8],\n+}\n+\n+impl <'a> Foo<'a>{\n+    fn bar(self: &mut Foo) {\n+    //~^ mismatched types: expected `Foo<'a>`, found `Foo<'_>` (lifetime mismatch)\n+    //~| mismatched types: expected `Foo<'a>`, found `Foo<'_>` (lifetime mismatch)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bbd41b28f03616a83da48c484031df58d3ff64de", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-use std::io::ReaderUtil;\n-use std::io::Reader;\n-\n-fn bar(r:@ReaderUtil) -> String { r.read_line() }\n+trait Foo {}\n+impl Foo for u8 {}\n \n fn main() {\n-    let r : @Reader = io::stdin();\n-    let _m = bar(r as @ReaderUtil);\n+    let r: Box<Foo> = box 5;\n+    let _m: Box<Foo> = r as Box<Foo>;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `Foo`\n+    //~| ERROR `Foo` is not implemented for the type `Foo`\n }"}, {"sha": "ab5ba29665286a25f2d72bb8904ce5cfb55688d8", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -14,8 +14,8 @@ use std::cell::RefCell;\n // Regresion test for issue 7364\n static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR statics are not allowed to have custom pointers\n-//~^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n-//~^^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n-//~^^^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n \n fn main() { }"}, {"sha": "b30583c666888bc7358074541915c49548e5c8cb", "filename": "src/test/run-pass/inconsistent-lifetime-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Finconsistent-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Finconsistent-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finconsistent-lifetime-mismatch.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: &[&str]) {}\n+\n+fn bad(a: &str, b: &str) {\n+    foo(&[a, b]);\n+}\n+\n+fn good(a: &str, b: &str) {\n+    foo(&[a.as_slice(), b.as_slice()]);\n+}\n+\n+fn main() {}"}, {"sha": "6fdaac992047f09b0103a54f4f7191a03b1a964f", "filename": "src/test/run-pass/issue-13655.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13655.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+use std::ops::Fn;\n+\n+struct Foo<T>(T);\n+\n+impl<T: Copy> Fn<(), T> for Foo<T> {\n+    extern \"rust-call\" fn call(&self, _: ()) -> T {\n+      match *self {\n+        Foo(t) => t\n+      }\n+    }\n+}\n+\n+fn main() {\n+  let t: u8 = 1;\n+  println!(\"{}\", Foo(t)());\n+}"}, {"sha": "5ccbe9a7980e8a04bcef5082cb63c5eb0eb1a3f8", "filename": "src/test/run-pass/issue-13665.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13665.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<'r>() {\n+  let maybe_value_ref: Option<&'r u8> = None;\n+\n+  let _ = maybe_value_ref.map(|& ref v| v);\n+  let _ = maybe_value_ref.map(|& ref v| -> &'r u8 {v});\n+  let _ = maybe_value_ref.map(|& ref v: &'r u8| -> &'r u8 {v});\n+  let _ = maybe_value_ref.map(|& ref v: &'r u8| {v});\n+}\n+\n+fn main() {\n+  foo();\n+}"}, {"sha": "e20090adcf6134ac18c1cd065cde2a8ebfbf5a53", "filename": "src/test/run-pass/issue-13808.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    listener: ||: 'a\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn new(listener: ||: 'a) -> Foo<'a> {\n+        Foo { listener: listener }\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo::new(|| {});\n+}"}, {"sha": "4151ad6530ef40d86bbb51c257cdcea6ef5991ec", "filename": "src/test/run-pass/trait-static-method-generic-inference.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Ftrait-static-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c9a48953d8bb47dcdba4d81e977839270916c9/src%2Ftest%2Frun-pass%2Ftrait-static-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-generic-inference.rs?ref=62c9a48953d8bb47dcdba4d81e977839270916c9", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod base {\n+    pub trait HasNew<T> {\n+        fn new() -> T;\n+    }\n+\n+    pub struct Foo {\n+        dummy: (),\n+    }\n+\n+    impl HasNew<Foo> for Foo {\n+        fn new() -> Foo {\n+            Foo { dummy: () }\n+        }\n+    }\n+\n+    pub struct Bar {\n+        dummy: (),\n+    }\n+\n+    impl HasNew<Bar> for Bar {\n+        fn new() -> Bar {\n+            Bar { dummy: () }\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let _f: base::Foo = base::HasNew::new();\n+    let _b: base::Bar = base::HasNew::new();\n+}"}]}