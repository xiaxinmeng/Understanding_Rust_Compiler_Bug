{"sha": "8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZGYxZTJjYjhkNWM1NGFkYTZiMGVkMjIzYzc2ZGQzZTNkMTBjMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-29T02:41:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-29T02:41:47Z"}, "message": "auto merge of #13834 : nick29581/rust/str_fix, r=luqmana", "tree": {"sha": "ca3dd9bb71d5ca0e4ff847fa038f8b49767dad83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca3dd9bb71d5ca0e4ff847fa038f8b49767dad83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "html_url": "https://github.com/rust-lang/rust/commit/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72a6ec897e1b8d7e125be9bb4b60d89c79aa4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72a6ec897e1b8d7e125be9bb4b60d89c79aa4c0", "html_url": "https://github.com/rust-lang/rust/commit/a72a6ec897e1b8d7e125be9bb4b60d89c79aa4c0"}, {"sha": "f3c33893b68876fb5d9d667714beb0d28b0e3f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c33893b68876fb5d9d667714beb0d28b0e3f61", "html_url": "https://github.com/rust-lang/rust/commit/f3c33893b68876fb5d9d667714beb0d28b0e3f61"}], "stats": {"total": 203, "additions": 72, "deletions": 131}, "files": [{"sha": "d0501c01aae50bf0498d8fc8ecd46f3ff63cdfb2", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -344,8 +344,7 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n         return ty::mk_vec(st.tcx, mt, sz);\n       }\n       'v' => {\n-        let sz = parse_size(st);\n-        return ty::mk_str(st.tcx, sz);\n+        return ty::mk_str(st.tcx);\n       }\n       'T' => {\n         assert_eq!(next(st), '[');"}, {"sha": "3a196c5ffab5f30a345bd2461eee0742a571525f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -260,13 +260,8 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n                 None => mywrite!(w, \"|\"),\n             }\n         }\n-        ty::ty_str(sz) => {\n+        ty::ty_str => {\n             mywrite!(w, \"v\");\n-            mywrite!(w, \"/\");\n-            match sz {\n-                Some(n) => mywrite!(w, \"{}|\", n),\n-                None => mywrite!(w, \"|\"),\n-            }\n         }\n         ty::ty_closure(ref f) => {\n             mywrite!(w, \"f\");"}, {"sha": "842c10a0ca08bcfe430c92312bfcbc6a9afbed67", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -405,7 +405,7 @@ fn missing_ctor(cx: &MatchCheckCtxt,\n       ty::ty_struct(..) => check_matrix_for_wild(cx, m),\n       ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty: ty, ..}) => match ty::get(ty).sty {\n           ty::ty_vec(_, None) => ctor_for_slice(m),\n-          ty::ty_str(None) => Some(single),\n+          ty::ty_str => Some(single),\n           _ => check_matrix_for_wild(cx, m),\n       },\n       ty::ty_enum(eid, _) => {"}, {"sha": "21fd963c21fc56a87a35ffa2aa0cb0bb3981b2bb", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -69,13 +69,13 @@ impl<'a> EffectCheckVisitor<'a> {\n                 ppaux::ty_to_str(self.tcx, base_type));\n         match ty::get(base_type).sty {\n             ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) => match ty::get(ty).sty {\n-                ty::ty_str(None) => {\n+                ty::ty_str => {\n                     self.tcx.sess.span_err(e.span,\n                         \"modification of string types is not allowed\");\n                 }\n                 _ => {}\n             },\n-            ty::ty_str(..) => {\n+            ty::ty_str => {\n                 self.tcx.sess.span_err(e.span,\n                     \"modification of string types is not allowed\");\n             }"}, {"sha": "ea2b57b34d9b92f0c9781e48b95a6b55286eacf4", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -204,8 +204,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_interior(InteriorField(PositionalField(0))))\n         }\n \n-        ty::ty_vec(_, Some(_)) |\n-        ty::ty_str(Some(_)) => {\n+        ty::ty_vec(_, Some(_)) => {\n             Some(deref_interior(InteriorElement(element_kind(t))))\n         }\n \n@@ -1304,11 +1303,10 @@ fn element_kind(t: ty::t) -> ElementKind {\n         ty::ty_rptr(_, ty::mt{ty:ty, ..}) |\n         ty::ty_uniq(ty) => match ty::get(ty).sty {\n             ty::ty_vec(_, None) => VecElement,\n-            ty::ty_str(None) => StrElement,\n+            ty::ty_str => StrElement,\n             _ => OtherElement\n         },\n         ty::ty_vec(..) => VecElement,\n-        ty::ty_str(..) => StrElement,\n         _ => OtherElement\n     }\n }"}, {"sha": "9d8f668a4e1f627fc5aa6796f9a8dc4d5ec0cb46", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -1316,7 +1316,7 @@ fn compare_values<'a>(\n \n     match ty::get(rhs_t).sty {\n         ty::ty_uniq(t) => match ty::get(t).sty {\n-            ty::ty_str(None) => {\n+            ty::ty_str => {\n                 let scratch_lhs = alloca(cx, val_ty(lhs), \"__lhs\");\n                 Store(cx, lhs, scratch_lhs);\n                 let scratch_rhs = alloca(cx, val_ty(rhs), \"__rhs\");\n@@ -1333,10 +1333,9 @@ fn compare_values<'a>(\n             _ => cx.sess().bug(\"only scalars and strings supported in compare_values\"),\n         },\n         ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n-            ty::ty_str(None) => compare_str(cx, lhs, rhs, rhs_t),\n+            ty::ty_str => compare_str(cx, lhs, rhs, rhs_t),\n             _ => cx.sess().bug(\"only scalars and strings supported in compare_values\"),\n         },\n-        ty::ty_str(Some(_)) => compare_str(cx, lhs, rhs, rhs_t),\n         _ => cx.sess().bug(\"only scalars and strings supported in compare_values\"),\n     }\n }"}, {"sha": "03fc85126a4768318b46ec1b28b083ba298a8de0", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -270,7 +270,7 @@ impl Case {\n         self.tys.iter().position(|&ty| {\n             match ty::get(ty).sty {\n                 ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n-                    ty::ty_vec(_, None) | ty::ty_str(None)=> false,\n+                    ty::ty_vec(_, None) | ty::ty_str => false,\n                     _ => true,\n                 },\n                 ty::ty_uniq(..) | ty::ty_box(..) |"}, {"sha": "0999da60ad3e4ee787f3ed94a5e992f73f04b068", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -664,11 +664,6 @@ pub fn iter_structural_ty<'r,\n               }\n           })\n       }\n-      ty::ty_str(Some(n)) => {\n-        let unit_ty = ty::sequence_element_type(cx.tcx(), t);\n-        let (base, len) = tvec::get_fixed_base_and_byte_len(cx, av, unit_ty, n);\n-        cx = tvec::iter_vec_raw(cx, base, unit_ty, len, f);\n-      }\n       ty::ty_vec(_, Some(n)) => {\n         let unit_ty = ty::sequence_element_type(cx.tcx(), t);\n         let (base, len) = tvec::get_fixed_base_and_byte_len(cx, av, unit_ty, n);"}, {"sha": "c90ac8a29ef381c2f884e720363cc8e6ddc52886", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -660,7 +660,7 @@ pub fn trans_call_inner<'a>(\n             // `~` pointer return values never alias because ownership\n             // is transferred\n             ty::ty_uniq(ty) => match ty::get(ty).sty {\n-                ty::ty_str(None) => {}\n+                ty::ty_str => {}\n                 _ => attrs.push((0, NoAliasAttribute)),\n             },\n             _ => {}"}, {"sha": "eae9da84a1fe6727885965175662132655890edb", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -141,7 +141,7 @@ fn const_deref(cx: &CrateContext, v: ValueRef, t: ty::t, explicit: bool)\n             let dv = match ty::get(t).sty {\n                 ty::ty_ptr(mt) | ty::ty_rptr(_, mt) => {\n                     match ty::get(mt.ty).sty {\n-                        ty::ty_vec(_, None) | ty::ty_str(None) => cx.sess().bug(\"unexpected slice\"),\n+                        ty::ty_vec(_, None) | ty::ty_str => cx.sess().bug(\"unexpected slice\"),\n                         _ => const_deref_ptr(cx, v),\n                     }\n                 }\n@@ -434,7 +434,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               let (arr, len) = match ty::get(bt).sty {\n                   ty::ty_vec(_, Some(u)) => (bv, C_uint(cx, u)),\n                   ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n-                      ty::ty_vec(_, None) | ty::ty_str(None) => {\n+                      ty::ty_vec(_, None) | ty::ty_str => {\n                           let e1 = const_get_elt(cx, bv, [0]);\n                           (const_deref_ptr(cx, e1), const_get_elt(cx, bv, [1]))\n                       },\n@@ -448,16 +448,12 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               let len = llvm::LLVMConstIntGetZExtValue(len) as u64;\n               let len = match ty::get(bt).sty {\n                   ty::ty_uniq(ty) | ty::ty_rptr(_, ty::mt{ty, ..}) => match ty::get(ty).sty {\n-                      ty::ty_str(None) => {\n+                      ty::ty_str => {\n                           assert!(len > 0);\n                           len - 1\n                       }\n                       _ => len\n                   },\n-                  ty::ty_str(Some(_)) => {\n-                      assert!(len > 0);\n-                      len - 1\n-                  },\n                   _ => len\n               };\n               if iv >= len {"}, {"sha": "a47e5a049405b7963251ca68b445a054681470da", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -2183,10 +2183,6 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_float(_) => {\n             basic_type_metadata(cx, t)\n         }\n-        ty::ty_str(Some(len)) => {\n-            let i8_t = ty::mk_i8();\n-            fixed_vec_metadata(cx, i8_t, len, usage_site_span)\n-        }\n         ty::ty_enum(def_id, _) => {\n             prepare_enum_metadata(cx, t, def_id, usage_site_span).finalize(cx)\n         }\n@@ -2200,7 +2196,7 @@ fn type_metadata(cx: &CrateContext,\n                     let vec_metadata = vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n-                ty::ty_str(None) => {\n+                ty::ty_str => {\n                     let i8_t = ty::mk_i8();\n                     let vec_metadata = vec_metadata(cx, i8_t, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n@@ -2214,7 +2210,7 @@ fn type_metadata(cx: &CrateContext,\n         ty::ty_ptr(ref mt) | ty::ty_rptr(_, ref mt) => {\n             match ty::get(mt.ty).sty {\n                 ty::ty_vec(ref mt, None) => vec_slice_metadata(cx, t, mt.ty, usage_site_span),\n-                ty::ty_str(None) => {\n+                ty::ty_str => {\n                     let i8_t = ty::mk_i8();\n                     vec_slice_metadata(cx, t, i8_t, usage_site_span)\n                 }"}, {"sha": "3fa5a9e085aaf6760903e613abe3432e001da265", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -1507,7 +1507,7 @@ pub fn cast_type_kind(t: ty::t) -> cast_kind {\n         ty::ty_float(..)   => cast_float,\n         ty::ty_ptr(..)     => cast_pointer,\n         ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty{\n-            ty::ty_vec(_, None) | ty::ty_str(None) => cast_other,\n+            ty::ty_vec(_, None) | ty::ty_str => cast_other,\n             _ => cast_pointer,\n         },\n         ty::ty_bare_fn(..) => cast_pointer,\n@@ -1717,7 +1717,7 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n     let r = match ty::get(datum.ty).sty {\n         ty::ty_uniq(content_ty) => {\n             match ty::get(content_ty).sty {\n-                ty::ty_vec(_, None) | ty::ty_str(None)\n+                ty::ty_vec(_, None) | ty::ty_str\n                     => bcx.tcx().sess.span_bug(expr.span, \"unexpected ~[T]\"),\n                 _ => deref_owned_pointer(bcx, expr, datum, content_ty),\n             }\n@@ -1735,7 +1735,7 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n         ty::ty_ptr(ty::mt { ty: content_ty, .. }) |\n         ty::ty_rptr(_, ty::mt { ty: content_ty, .. }) => {\n             match ty::get(content_ty).sty {\n-                ty::ty_vec(_, None) | ty::ty_str(None)\n+                ty::ty_vec(_, None) | ty::ty_str\n                     => bcx.tcx().sess.span_bug(expr.span, \"unexpected &[T]\"),\n                 _ => {\n                     assert!(!ty::type_needs_drop(bcx.tcx(), datum.ty));"}, {"sha": "37a387a558fdf4ad70611cf150cba570e3705f5a", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -84,7 +84,7 @@ fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t {\n \n         ty::ty_uniq(typ) if !ty::type_needs_drop(tcx, typ) => {\n             match ty::get(typ).sty {\n-                ty::ty_vec(_, None) | ty::ty_str(None) => t,\n+                ty::ty_vec(_, None) | ty::ty_str => t,\n                 _ => {\n                     let llty = sizing_type_of(ccx, typ);\n                     // Unique boxes do not allocate for zero-size types. The standard\n@@ -288,7 +288,7 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                         trans_exchange_free(bcx, llbox)\n                     })\n                 }\n-                ty::ty_str(None) => {\n+                ty::ty_str => {\n                     with_cond(bcx, not_null, |bcx| {\n                         let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n                         let bcx = tvec::make_drop_glue_unboxed(bcx, llbox, unit_ty);"}, {"sha": "edf770d9cf6f808adc42efbb1b318cd19292c5c4", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -150,17 +150,13 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_float(ast::TyF64) => self.leaf(\"f64\"),\n           ty::ty_float(ast::TyF128) => self.leaf(\"f128\"),\n \n-          // Should rename to str_*/vec_*.\n-          ty::ty_str(Some(n)) => {\n-              let extra = (vec!(self.c_uint(n))).append(self.c_size_and_align(t).as_slice());\n-              self.visit(\"estr_fixed\".to_owned(), extra.as_slice())\n-          }\n+          // Should rename to vec_*.\n           ty::ty_vec(ref mt, Some(sz)) => {\n               let extra = (vec!(self.c_uint(sz))).append(self.c_size_and_align(t).as_slice());\n               let extra = extra.append(self.c_mt(mt).as_slice());\n               self.visit(\"evec_fixed\".to_owned(), extra.as_slice())\n           }\n-          ty::ty_vec(..) | ty::ty_str(..) => fail!(\"unexpected unsized type\"),\n+          ty::ty_vec(..) | ty::ty_str => fail!(\"unexpected unsized type\"),\n           // Should remove mt from box and uniq.\n           ty::ty_box(typ) => {\n               let extra = self.c_mt(&ty::mt {\n@@ -176,7 +172,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                       let extra = extra.append(self.c_mt(mt).as_slice());\n                       self.visit(\"evec_uniq\".to_owned(), extra.as_slice())\n                   }\n-                  ty::ty_str(None) => self.visit(\"estr_uniq\".to_owned(), &[]),\n+                  ty::ty_str => self.visit(\"estr_uniq\".to_owned(), &[]),\n                   _ => {\n                       let extra = self.c_mt(&ty::mt {\n                           ty: typ,\n@@ -197,7 +193,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                       let extra = extra.append(self.c_mt(mt).as_slice());\n                       self.visit(~\"evec_\" + name, extra.as_slice())\n                   }\n-                  ty::ty_str(None) => self.visit(\"estr_slice\".to_owned(), &[]),\n+                  ty::ty_str => self.visit(\"estr_slice\".to_owned(), &[]),\n                   _ => {\n                       let extra = self.c_mt(mt);\n                       self.visit(\"rptr\", extra.as_slice())"}, {"sha": "e210437a370cbcc906e47176a2bbb156d3bfd751", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -244,7 +244,7 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n                     let llptrval = C_cstr(ccx, (*s).clone(), false);\n                     let llptrval = PointerCast(bcx, llptrval, Type::i8p(ccx));\n                     let llsizeval = C_uint(ccx, s.get().len());\n-                    let typ = ty::mk_uniq(bcx.tcx(), ty::mk_str(bcx.tcx(), None));\n+                    let typ = ty::mk_uniq(bcx.tcx(), ty::mk_str(bcx.tcx()));\n                     let lldestval = rvalue_scratch_datum(bcx,\n                                                          typ,\n                                                          \"\");\n@@ -478,13 +478,12 @@ pub fn get_base_and_len(bcx: &Block,\n     let ccx = bcx.ccx();\n \n     match ty::get(vec_ty).sty {\n-        ty::ty_str(Some(n)) |\n         ty::ty_vec(_, Some(n)) => {\n             let base = GEPi(bcx, llval, [0u, 0u]);\n             (base, C_uint(ccx, n))\n         }\n         ty::ty_rptr(_, mt) => match ty::get(mt.ty).sty {\n-            ty::ty_vec(_, None) | ty::ty_str(None) => {\n+            ty::ty_vec(_, None) | ty::ty_str => {\n                 assert!(!type_is_immediate(bcx.ccx(), vec_ty));\n                 let base = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_base]));\n                 let count = Load(bcx, GEPi(bcx, llval, [0u, abi::slice_elt_len]));\n@@ -493,7 +492,7 @@ pub fn get_base_and_len(bcx: &Block,\n             _ => ccx.sess().bug(\"unexpected type (ty_rptr) in get_base_and_len\"),\n         },\n         ty::ty_uniq(t) => match ty::get(t).sty {\n-            ty::ty_vec(_, None) | ty::ty_str(None) => {\n+            ty::ty_vec(_, None) | ty::ty_str => {\n                 assert!(type_is_immediate(bcx.ccx(), vec_ty));\n                 let vt = vec_types(bcx, ty::sequence_element_type(bcx.tcx(), vec_ty));\n                 let body = Load(bcx, llval);"}, {"sha": "7e3890cec856233b3d3f2ad18d8fe76fde91fb0e", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -121,7 +121,7 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_ptr(..) => Type::i8p(cx),\n         ty::ty_rptr(_, mt) => {\n             match ty::get(mt.ty).sty {\n-                ty::ty_vec(_, None) | ty::ty_str(None) => {\n+                ty::ty_vec(_, None) | ty::ty_str => {\n                     Type::struct_(cx, [Type::i8p(cx), Type::i8p(cx)], false)\n                 }\n                 _ => Type::i8p(cx),\n@@ -132,7 +132,6 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_closure(..) => Type::struct_(cx, [Type::i8p(cx), Type::i8p(cx)], false),\n         ty::ty_trait(..) => Type::opaque_trait(cx),\n \n-        ty::ty_str(Some(size)) => Type::array(&Type::i8(cx), size as u64),\n         ty::ty_vec(mt, Some(size)) => {\n             Type::array(&sizing_type_of(cx, mt.ty), size as u64)\n         }\n@@ -154,7 +153,7 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         }\n \n         ty::ty_self(_) | ty::ty_infer(..) | ty::ty_param(..) |\n-        ty::ty_err(..) | ty::ty_vec(_, None) | ty::ty_str(None) => {\n+        ty::ty_err(..) | ty::ty_vec(_, None) | ty::ty_str => {\n             cx.sess().bug(format!(\"fictitious type {:?} in sizing_type_of()\",\n                                   ty::get(t).sty))\n         }\n@@ -215,7 +214,7 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n       ty::ty_uniq(typ) => {\n           match ty::get(typ).sty {\n               ty::ty_vec(mt, None) => Type::vec(cx, &type_of(cx, mt.ty)).ptr_to(),\n-              ty::ty_str(None) => Type::vec(cx, &Type::i8(cx)).ptr_to(),\n+              ty::ty_str => Type::vec(cx, &Type::i8(cx)).ptr_to(),\n               _ => type_of(cx, typ).ptr_to(),\n           }\n       }\n@@ -227,18 +226,14 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n                   let u_ty = Type::uint_from_ty(cx, ast::TyU);\n                   Type::struct_(cx, [p_ty, u_ty], false)\n               }\n-              ty::ty_str(None) => {\n+              ty::ty_str => {\n                   // This means we get a nicer name in the output\n                   cx.tn.find_type(\"str_slice\").unwrap()\n               }\n               _ => type_of(cx, mt.ty).ptr_to(),\n           }\n       }\n \n-      ty::ty_str(Some(n)) => {\n-          Type::array(&Type::i8(cx), (n + 1u) as u64)\n-      }\n-\n       ty::ty_vec(ref mt, Some(n)) => {\n           Type::array(&type_of(cx, mt.ty), n as u64)\n       }\n@@ -274,7 +269,7 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n       }\n \n       ty::ty_vec(_, None) => cx.sess().bug(\"type_of with unsized ty_vec\"),\n-      ty::ty_str(None) => cx.sess().bug(\"type_of with unsized ty_str\"),\n+      ty::ty_str => cx.sess().bug(\"type_of with unsized (bare) ty_str\"),\n       ty::ty_self(..) => cx.sess().unimpl(\"type_of with ty_self\"),\n       ty::ty_infer(..) => cx.sess().bug(\"type_of with ty_infer\"),\n       ty::ty_param(..) => cx.sess().bug(\"type_of with ty_param\"),"}, {"sha": "459310bd94b479ddaf71e29858b88130f677a039", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -726,9 +726,8 @@ pub enum sty {\n     ty_enum(DefId, substs),\n     ty_box(t),\n     ty_uniq(t),\n-    // ty_str and ty_vec have an optional length.\n-    ty_str(Option<uint>),\n-    ty_vec(mt, Option<uint>),\n+    ty_str,\n+    ty_vec(mt, Option<uint>),  // Second field is length.\n     ty_ptr(mt),\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n@@ -1175,7 +1174,7 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n     }\n     match &st {\n       &ty_nil | &ty_bool | &ty_char | &ty_int(_) | &ty_float(_) | &ty_uint(_) |\n-      &ty_str(_) => {}\n+      &ty_str => {}\n       // You might think that we could just return ty_err for\n       // any type containing ty_err as a component, and get\n       // rid of the has_ty_err flag -- likewise for ty_bot (with\n@@ -1341,14 +1340,14 @@ pub fn mk_mach_float(tm: ast::FloatTy) -> t {\n #[inline]\n pub fn mk_char() -> t { mk_prim_t(&primitives::TY_CHAR) }\n \n-pub fn mk_str(cx: &ctxt, sz: Option<uint>) -> t {\n-    mk_t(cx, ty_str(sz))\n+pub fn mk_str(cx: &ctxt) -> t {\n+    mk_t(cx, ty_str)\n }\n \n pub fn mk_str_slice(cx: &ctxt, r: Region, m: ast::Mutability) -> t {\n     mk_rptr(cx, r,\n             mt {\n-                ty: mk_t(cx, ty_str(None)),\n+                ty: mk_t(cx, ty_str),\n                 mutbl: m\n             })\n }\n@@ -1471,7 +1470,7 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n     }\n     match get(ty).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n-        ty_str(_) | ty_self(_) |\n+        ty_str | ty_self(_) |\n         ty_infer(_) | ty_param(_) | ty_err => {}\n         ty_box(ty) | ty_uniq(ty) => maybe_walk_ty(ty, f),\n         ty_ptr(ref tm) | ty_rptr(_, ref tm) | ty_vec(ref tm, _) => {\n@@ -1612,7 +1611,7 @@ pub fn type_is_self(ty: t) -> bool {\n fn type_is_slice(ty:t) -> bool {\n     match get(ty).sty {\n         ty_rptr(_, mt) => match get(mt.ty).sty {\n-            ty_vec(_, None) | ty_str(None) => true,\n+            ty_vec(_, None) | ty_str => true,\n             _ => false,\n         },\n         _ => false\n@@ -1622,8 +1621,7 @@ fn type_is_slice(ty:t) -> bool {\n pub fn type_is_structural(ty: t) -> bool {\n     match get(ty).sty {\n       ty_struct(..) | ty_tup(_) | ty_enum(..) | ty_closure(_) | ty_trait(..) |\n-      ty_vec(_, Some(_)) |\n-      ty_str(Some(_)) => true,\n+      ty_vec(_, Some(_)) => true,\n       _ => type_is_slice(ty)\n     }\n }\n@@ -1637,12 +1635,11 @@ pub fn type_is_simd(cx: &ctxt, ty: t) -> bool {\n \n pub fn sequence_element_type(cx: &ctxt, ty: t) -> t {\n     match get(ty).sty {\n-        ty_str(Some(_)) => mk_mach_uint(ast::TyU8),\n         ty_vec(mt, Some(_)) => mt.ty,\n         ty_ptr(mt{ty: t, ..}) | ty_rptr(_, mt{ty: t, ..}) |\n         ty_box(t) | ty_uniq(t) => match get(t).sty {\n             ty_vec(mt, None) => mt.ty,\n-            ty_str(None) => mk_mach_uint(ast::TyU8),\n+            ty_str => mk_mach_uint(ast::TyU8),\n             _ => cx.sess.bug(\"sequence_element_type called on non-sequence value\"),\n         },\n         _ => cx.sess.bug(\"sequence_element_type called on non-sequence value\"),\n@@ -1681,7 +1678,7 @@ pub fn type_is_region_ptr(ty: t) -> bool {\n         ty_rptr(_, mt) => match get(mt.ty).sty {\n             // FIXME(nrc, DST) slices weren't regarded as rptrs, so we preserve this\n             // odd behaviour for now. (But ~[] were unique. I have no idea why).\n-            ty_vec(_, None) | ty_str(None) => false,\n+            ty_vec(_, None) | ty_str => false,\n             _ => true\n         },\n         _ => false\n@@ -2079,7 +2076,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n         let result = match get(ty).sty {\n             // Scalar and unique types are sendable, and durable\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-            ty_bare_fn(_) | ty::ty_char => {\n+            ty_bare_fn(_) | ty::ty_char | ty_str => {\n                 TC::None\n             }\n \n@@ -2093,7 +2090,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n \n             ty_uniq(typ) => {\n                 match get(typ).sty {\n-                    ty_str(None) => TC::OwnsOwned,\n+                    ty_str => TC::OwnsOwned,\n                     _ => tc_ty(cx, typ, cache).owned_pointer(),\n                 }\n             }\n@@ -2108,7 +2105,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n \n             ty_rptr(r, ref mt) => {\n                 match get(mt.ty).sty {\n-                    ty_str(None) => borrowed_contents(r, ast::MutImmutable),\n+                    ty_str => borrowed_contents(r, ast::MutImmutable),\n                     _ => tc_ty(cx, mt.ty, cache).reference(borrowed_contents(r, mt.mutbl)),\n                 }\n             }\n@@ -2117,10 +2114,6 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 tc_mt(cx, mt, cache)\n             }\n \n-            ty_str(_) => {\n-                TC::None\n-            }\n-\n             ty_struct(did, ref substs) => {\n                 let flds = struct_fields(cx, did, substs);\n                 let mut res =\n@@ -2348,7 +2341,7 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n             ty_int(_) |\n             ty_uint(_) |\n             ty_float(_) |\n-            ty_str(_) |\n+            ty_str |\n             ty_bare_fn(_) |\n             ty_closure(_) |\n             ty_infer(_) |\n@@ -2612,15 +2605,15 @@ pub fn deref(t: t, explicit: bool) -> Option<mt> {\n     match get(t).sty {\n         ty_box(typ) | ty_uniq(typ) => match get(typ).sty {\n             // Don't deref ~[] etc., might need to generalise this to all DST.\n-            ty_vec(_, None) | ty_str(None) => None,\n+            ty_vec(_, None) | ty_str => None,\n             _ => Some(mt {\n                 ty: typ,\n                 mutbl: ast::MutImmutable,\n             }),\n         },\n         ty_rptr(_, mt) => match get(mt.ty).sty {\n             // Don't deref &[], might need to generalise this to all DST.\n-            ty_vec(_, None) | ty_str(None) => None,\n+            ty_vec(_, None) | ty_str => None,\n             _ => Some(mt),\n         },\n         ty_ptr(mt) if explicit => Some(mt),\n@@ -2635,10 +2628,9 @@ pub fn index(t: t) -> Option<mt> {\n         ty_ptr(mt{ty: t, ..}) | ty_rptr(_, mt{ty: t, ..}) |\n         ty_box(t) | ty_uniq(t) => match get(t).sty {\n             ty_vec(mt, None) => Some(mt),\n-            ty_str(None) => Some(mt {ty: mk_u8(), mutbl: ast::MutImmutable}),\n+            ty_str => Some(mt {ty: mk_u8(), mutbl: ast::MutImmutable}),\n             _ => None,\n         },\n-        ty_str(Some(_)) => Some(mt {ty: mk_u8(), mutbl: ast::MutImmutable}),\n         _ => None\n     }\n }\n@@ -2948,15 +2940,14 @@ pub fn adjust_ty(cx: &ctxt,\n             ty_uniq(t) | ty_ptr(mt{ty: t, ..}) |\n             ty_rptr(_, mt{ty: t, ..}) => match get(t).sty {\n                 ty::ty_vec(mt, None) => ty::mk_slice(cx, r, ty::mt {ty: mt.ty, mutbl: m}),\n-                ty::ty_str(None) => ty::mk_str_slice(cx, r, m),\n+                ty::ty_str => ty::mk_str_slice(cx, r, m),\n                 _ => {\n                     cx.sess.span_bug(\n                         span,\n                         format!(\"borrow-vec associated with bad sty: {:?}\", get(ty).sty));\n                 }\n             },\n             ty_vec(mt, Some(_)) => ty::mk_slice(cx, r, ty::mt {ty: mt.ty, mutbl: m}),\n-            ty_str(Some(_)) => ty::mk_str_slice(cx, r, m),\n \n             ref s => {\n                 cx.sess.span_bug(\n@@ -3262,7 +3253,7 @@ pub fn param_tys_in_type(ty: t) -> Vec<param_ty> {\n pub fn ty_sort_str(cx: &ctxt, t: t) -> ~str {\n     match get(t).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) |\n-        ty_uint(_) | ty_float(_) | ty_str(_) => {\n+        ty_uint(_) | ty_float(_) | ty_str => {\n             ::util::ppaux::ty_to_str(cx, t)\n         }\n \n@@ -4528,13 +4519,8 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n                 byte!(6);\n                 hash!(f);\n             }\n-            ty_str(Some(_)) => {\n+            ty_str => {\n                 byte!(7);\n-                1u8.hash(&mut state);\n-            }\n-            ty_str(None) => {\n-                byte!(7);\n-                0u8.hash(&mut state);\n             }\n             ty_enum(d, _) => {\n                 byte!(8);"}, {"sha": "a4cc9f0cc2f2acfc8d9a6af8938a95766e690f71", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -175,10 +175,7 @@ pub fn super_fold_sty<T:TypeFolder>(this: &mut T,\n             ty::ty_struct(did,\n                           this.fold_substs(substs))\n         }\n-        ty::ty_str(sz) => {\n-            ty::ty_str(sz)\n-        }\n-        ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_char |\n+        ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_char | ty::ty_str |\n         ty::ty_int(_) | ty::ty_uint(_) | ty::ty_float(_) |\n         ty::ty_err | ty::ty_infer(_) |\n         ty::ty_param(..) | ty::ty_self(_) => {"}, {"sha": "77f339ec10e24f58d72ad8779cc7b36aff5b6ec9", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -355,7 +355,7 @@ pub fn ast_ty_to_prim_ty(tcx: &ty::ctxt, ast_ty: &ast::Ty) -> Option<ty::t> {\n                             tcx.sess.span_err(ast_ty.span,\n                                               \"bare `str` is not a type\");\n                             // return /something/ so they can at least get more errors\n-                            Some(ty::mk_uniq(tcx, ty::mk_str(tcx, None)))\n+                            Some(ty::mk_uniq(tcx, ty::mk_str(tcx)))\n                         }\n                     }\n                 }\n@@ -414,7 +414,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                         match ptr_ty {\n                             Uniq => {\n-                                return ty::mk_uniq(tcx, ty::mk_str(tcx, None));\n+                                return ty::mk_uniq(tcx, ty::mk_str(tcx));\n                             }\n                             RPtr(r) => {\n                                 return ty::mk_str_slice(tcx, r, ast::MutImmutable);"}, {"sha": "52e0deddf3c792c6e62cee13c62aa7579654fcd9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -769,7 +769,7 @@ impl<'a> LookupContext<'a> {\n                     self.infcx().next_region_var(infer::Autoref(self.span));\n                 let (extra_derefs, auto) = match ty::get(self_mt.ty).sty {\n                     ty::ty_vec(_, None) => (0, ty::AutoBorrowVec(region, self_mt.mutbl)),\n-                    ty::ty_str(None) => (0, ty::AutoBorrowVec(region, self_mt.mutbl)),\n+                    ty::ty_str => (0, ty::AutoBorrowVec(region, self_mt.mutbl)),\n                     _ => (1, ty::AutoPtr(region, self_mt.mutbl)),\n                 };\n                 (ty::mk_rptr(tcx, region, self_mt),\n@@ -878,11 +878,10 @@ impl<'a> LookupContext<'a> {\n             },\n             ty_uniq(t) => match ty::get(t).sty {\n                 ty_vec(mt, None) => self.auto_slice_vec(mt, autoderefs),\n-                ty_str(None) => self.auto_slice_str(autoderefs),\n+                ty_str => self.auto_slice_str(autoderefs),\n                 _ => None\n             },\n             ty_vec(mt, Some(_)) => self.auto_slice_vec(mt, autoderefs),\n-            ty_str(Some(_)) => self.auto_slice_str(autoderefs),\n \n             ty_trait(~ty::TyTrait { def_id: trt_did, substs: trt_substs, bounds: b, .. }) => {\n                 // Coerce ~/&Trait instances to &Trait.\n@@ -921,7 +920,7 @@ impl<'a> LookupContext<'a> {\n             ty_self(_) | ty_param(..) | ty_nil | ty_bot | ty_bool |\n             ty_char | ty_int(..) | ty_uint(..) |\n             ty_float(..) | ty_enum(..) | ty_ptr(..) | ty_struct(..) | ty_tup(..) |\n-            ty_str(..) | ty_vec(..) | ty_trait(..) | ty_closure(..) => {\n+            ty_str | ty_vec(..) | ty_trait(..) | ty_closure(..) => {\n                 self.search_for_some_kind_of_autorefd_method(\n                     AutoPtr, autoderefs, [MutImmutable, MutMutable],\n                     |m,r| ty::mk_rptr(tcx, r, ty::mt {ty:self_ty, mutbl:m}))\n@@ -1318,7 +1317,7 @@ impl<'a> LookupContext<'a> {\n                 match ty::get(rcvr_ty).sty {\n                     ty::ty_rptr(_, mt) => {\n                         match ty::get(mt.ty).sty {\n-                            ty::ty_vec(_, None) | ty::ty_str(None) => false,\n+                            ty::ty_vec(_, None) | ty::ty_str => false,\n                             _ => mutability_matches(mt.mutbl, m) &&\n                                  rcvr_matches_ty(self.fcx, mt.ty, candidate),\n                         }\n@@ -1340,7 +1339,7 @@ impl<'a> LookupContext<'a> {\n                 match ty::get(rcvr_ty).sty {\n                     ty::ty_uniq(typ) => {\n                         match ty::get(typ).sty {\n-                            ty::ty_vec(_, None) | ty::ty_str(None) => false,\n+                            ty::ty_vec(_, None) | ty::ty_str => false,\n                             _ => rcvr_matches_ty(self.fcx, typ, candidate),\n                         }\n                     }"}, {"sha": "a0847baaea2855749b32b6e1c298cee2ab682a90", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -2567,7 +2567,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       ast::ExprVstore(ev, vst) => {\n         let typ = match ev.node {\n           ast::ExprLit(lit) if ast_util::lit_is_str(lit) => {\n-            ast_expr_vstore_to_ty(fcx, ev, vst, || ty::mt{ ty: ty::mk_str(tcx, None),\n+            ast_expr_vstore_to_ty(fcx, ev, vst, || ty::mt{ ty: ty::mk_str(tcx),\n                                                            mutbl: ast::MutImmutable })\n           }\n           ast::ExprVec(ref args) => {"}, {"sha": "5cd48c5c83d68c157ce8f9002ffb14e929d84b94", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -940,7 +940,7 @@ fn constrain_index(rcx: &mut Rcx,\n     let r_index_expr = ty::ReScope(index_expr.id);\n     match ty::get(indexed_ty).sty {\n         ty::ty_rptr(r_ptr, mt) => match ty::get(mt.ty).sty {\n-            ty::ty_vec(_, None) | ty::ty_str(None)=> {\n+            ty::ty_vec(_, None) | ty::ty_str => {\n                 rcx.fcx.mk_subr(true, infer::IndexSlice(index_expr.span),\n                                 r_index_expr, r_ptr);\n             }"}, {"sha": "aa00b24474f9cb5f487503fdb6e4fe56f44e58de", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -108,7 +108,7 @@ impl<'f> Coerce<'f> {\n                         });\n                     }\n                     ty::ty_vec(_, _) => {},\n-                    ty::ty_str(None) => {\n+                    ty::ty_str => {\n                         return self.unpack_actual_value(a, |sty_a| {\n                             self.coerce_borrowed_string(a, sty_a, b)\n                         });\n@@ -263,7 +263,7 @@ impl<'f> Coerce<'f> {\n \n         match *sty_a {\n             ty::ty_uniq(t) => match ty::get(t).sty {\n-                ty::ty_str(None) => {}\n+                ty::ty_str => {}\n                 _ => return self.subtype(a, b),\n             },\n             _ => {"}, {"sha": "b5e15a32b1ca3b78d32deda39ecbfb313a53b102", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -383,9 +383,9 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n                                    result: ty::t) -> cres<ty::t> {\n         match (&ty::get(a_inner).sty, &ty::get(b_inner).sty) {\n             (&ty::ty_vec(_, None), &ty::ty_vec(_, None)) |\n-            (&ty::ty_str(None), &ty::ty_str(None)) => Ok(result),\n+            (&ty::ty_str, &ty::ty_str) => Ok(result),\n             (&ty::ty_vec(_, None), _) | (_, &ty::ty_vec(_, None)) |\n-            (&ty::ty_str(None), _) | (_, &ty::ty_str(None))\n+            (&ty::ty_str, _) | (_, &ty::ty_str)\n                 => Err(ty::terr_sorts(expected_found(this, a, b))),\n             _ => Ok(result),\n         }\n@@ -520,12 +520,8 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n         })\n       }\n \n-      (&ty::ty_str(sz_a), &ty::ty_str(sz_b)) => {\n-            if sz_a == sz_b {\n-                Ok(ty::mk_str(tcx,sz_a))\n-            } else {\n-                Err(ty::terr_sorts(expected_found(this, a, b)))\n-            }\n+      (&ty::ty_str, &ty::ty_str) => {\n+            Ok(ty::mk_str(tcx))\n       }\n \n       (&ty::ty_tup(ref as_), &ty::ty_tup(ref bs)) => {"}, {"sha": "a4fae2d9aa4f20f376a59535f15dc9a57f385b96", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -706,7 +706,7 @@ impl<'a> ConstraintContext<'a> {\n         match ty::get(ty).sty {\n             ty::ty_nil | ty::ty_bot | ty::ty_bool |\n             ty::ty_char | ty::ty_int(_) | ty::ty_uint(_) |\n-            ty::ty_float(_) | ty::ty_str(_) => {\n+            ty::ty_float(_) | ty::ty_str => {\n                 /* leaf type -- noop */\n             }\n "}, {"sha": "06adce194f1677430d43f02fda7d59e98502bdf8", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8fdf1e2cb8d5c54ada6b0ed223c76dd3e3d10c1a", "patch": "@@ -395,12 +395,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n         let bound_str = bounds.repr(cx);\n         format!(\"{}{}{}{}\", trait_store_to_str(cx, store), ty, bound_sep, bound_str)\n       }\n-      ty_str(sz) => {\n-        match sz {\n-            Some(n) => format!(\"str/{}\", n),\n-            None => \"str\".to_owned(),\n-        }\n-      }\n+      ty_str => \"str\".to_owned(),\n       ty_vec(ref mt, sz) => {\n           match sz {\n               Some(n) => format!(\"[{}, .. {}]\", mt_to_str(cx, mt), n),"}]}