{"sha": "c0574c054c1979a4d77822d4fe36ba7571760b00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTc0YzA1NGMxOTc5YTRkNzc4MjJkNGZlMzZiYTc1NzE3NjBiMDA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-16T08:13:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:06:07Z"}, "message": "Add miri errors to the const eval error enum", "tree": {"sha": "13020c7a05a314f95c8ba8ad93e2f6d417e80d9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13020c7a05a314f95c8ba8ad93e2f6d417e80d9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0574c054c1979a4d77822d4fe36ba7571760b00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg4N8ACgkQpp+NIls6\n19kVTw//fRY0TnrDrvP/qDxdEQp5WvYD5pko6BKCgxiq4HiKoregYvGMT543Xe0F\nRD+eukGxhPLyDzSY5eoKmrZJsyOX9RS9Aw6dW0Cb7tr6YKexYVkd2/E7DxXlg13T\ny2et/Yc4IVV+z/W5T3xcaKi4jyZ7bzPwRMHC87BYhJ7vD9+b4TaKI81zJiS6o9OQ\nNfB46yBzl5PftIqHxJSuxuOq5ZFYyHFU1DHFyjCejSGO6J7A4OhfyoH3RrlBpS7S\nlCUB24IYBacQvgnWS0w4sprVxTcoMkSA5UcpOqJZWHgVI6uOrZVQD+fvyX4KsDGd\nPFAk+i97Vm4xDankvXIpXhgMEFygc+2i6n3sFfUewaNzbLxiPpGqRBimwgyUnc7o\nM1Jh2hwRZJa03Y+Em3gmMlzGJMZ6/Ld10lIVJg2Tg/MAcp9pdCi8u0RoQlP98SNT\nnAuyXTaifw2YQ1ytitvmXS4KbuBT+ZQj3xXoyTpZ8hXRtXx7s7G/sVM45F58MANf\n6p4NmXKPfP9ZAtLivEWgXie+LLiVZGG9SL0AXMdBGmuFpcxMFRhMgFYrzafiTob5\nIskdpD5u7Q5tdZPQc48bvkTZUelkhDBzXd7H+htq7CV9nN5h/APhpQticOe0SnGu\n/D8fMzDjXkaN9XFl2q3HB8yV00Nyo2wmvqp5S39AmhOW86EaIVE=\n=jPBg\n-----END PGP SIGNATURE-----", "payload": "tree 13020c7a05a314f95c8ba8ad93e2f6d417e80d9e\nparent 38b5ddd39b22dbdf9f004090146c561327ed51e7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516090430 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520492767 +0100\n\nAdd miri errors to the const eval error enum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0574c054c1979a4d77822d4fe36ba7571760b00", "html_url": "https://github.com/rust-lang/rust/commit/c0574c054c1979a4d77822d4fe36ba7571760b00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0574c054c1979a4d77822d4fe36ba7571760b00/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b5ddd39b22dbdf9f004090146c561327ed51e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b5ddd39b22dbdf9f004090146c561327ed51e7", "html_url": "https://github.com/rust-lang/rust/commit/38b5ddd39b22dbdf9f004090146c561327ed51e7"}], "stats": {"total": 306, "additions": 294, "deletions": 12}, "files": [{"sha": "4d802491c96edf8eeba9f5ba2873cba698b75ccb", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=c0574c054c1979a4d77822d4fe36ba7571760b00", "patch": "@@ -470,6 +470,7 @@ for ::middle::const_val::ErrKind<'gcx> {\n             ErroneousReferencedConstant(ref const_val) => {\n                 const_val.hash_stable(hcx, hasher);\n             }\n+            Miri(ref err) => err.hash_stable(hcx, hasher),\n         }\n     }\n }\n@@ -483,6 +484,175 @@ impl_stable_hash_for!(struct ty::GenericPredicates<'tcx> {\n     predicates\n });\n \n+impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+for ::mir::interpret::EvalError<'gcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        use mir::interpret::EvalErrorKind::*;\n+\n+        mem::discriminant(&self.kind).hash_stable(hcx, hasher);\n+\n+        match self.kind {\n+            DanglingPointerDeref |\n+            DoubleFree |\n+            InvalidMemoryAccess |\n+            InvalidFunctionPointer |\n+            InvalidBool |\n+            InvalidDiscriminant |\n+            InvalidNullPointerUsage |\n+            ReadPointerAsBytes |\n+            ReadBytesAsPointer |\n+            InvalidPointerMath |\n+            ReadUndefBytes |\n+            DeadLocal |\n+            ExecutionTimeLimitReached |\n+            StackFrameLimitReached |\n+            OutOfTls |\n+            TlsOutOfBounds |\n+            CalledClosureAsFunction |\n+            VtableForArgumentlessMethod |\n+            ModifiedConstantMemory |\n+            AssumptionNotHeld |\n+            InlineAsm |\n+            ReallocateNonBasePtr |\n+            DeallocateNonBasePtr |\n+            HeapAllocZeroBytes |\n+            Unreachable |\n+            Panic |\n+            ReadFromReturnPointer |\n+            UnimplementedTraitSelection |\n+            TypeckError |\n+            DerefFunctionPointer |\n+            ExecuteMemory |\n+            OverflowingMath => {}\n+            MachineError(ref err) => err.hash_stable(hcx, hasher),\n+            FunctionPointerTyMismatch(a, b) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher)\n+            },\n+            NoMirFor(ref s) => s.hash_stable(hcx, hasher),\n+            UnterminatedCString(ptr) => ptr.hash_stable(hcx, hasher),\n+            PointerOutOfBounds {\n+                ptr,\n+                access,\n+                allocation_size,\n+            } => {\n+                ptr.hash_stable(hcx, hasher);\n+                access.hash_stable(hcx, hasher);\n+                allocation_size.hash_stable(hcx, hasher)\n+            },\n+            InvalidBoolOp(bop) => bop.hash_stable(hcx, hasher),\n+            Unimplemented(ref s) => s.hash_stable(hcx, hasher),\n+            ArrayIndexOutOfBounds(sp, a, b) => {\n+                sp.hash_stable(hcx, hasher);\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher)\n+            },\n+            Math(sp, ref err) => {\n+                sp.hash_stable(hcx, hasher);\n+                err.hash_stable(hcx, hasher)\n+            },\n+            Intrinsic(ref s) => s.hash_stable(hcx, hasher),\n+            InvalidChar(c) => c.hash_stable(hcx, hasher),\n+            OutOfMemory {\n+                allocation_size,\n+                memory_size,\n+                memory_usage,\n+            } => {\n+                allocation_size.hash_stable(hcx, hasher);\n+                memory_size.hash_stable(hcx, hasher);\n+                memory_usage.hash_stable(hcx, hasher)\n+            },\n+            AbiViolation(ref s) => s.hash_stable(hcx, hasher),\n+            AlignmentCheckFailed {\n+                required,\n+                has,\n+            } => {\n+                required.hash_stable(hcx, hasher);\n+                has.hash_stable(hcx, hasher)\n+            },\n+            MemoryLockViolation {\n+                ptr,\n+                len,\n+                frame,\n+                access,\n+                ref lock,\n+            } =>  {\n+                ptr.hash_stable(hcx, hasher);\n+                len.hash_stable(hcx, hasher);\n+                frame.hash_stable(hcx, hasher);\n+                access.hash_stable(hcx, hasher);\n+                lock.hash_stable(hcx, hasher)\n+            },\n+            MemoryAcquireConflict {\n+                ptr,\n+                len,\n+                kind,\n+                ref lock,\n+            } =>  {\n+                ptr.hash_stable(hcx, hasher);\n+                len.hash_stable(hcx, hasher);\n+                kind.hash_stable(hcx, hasher);\n+                lock.hash_stable(hcx, hasher)\n+            },\n+            InvalidMemoryLockRelease {\n+                ptr,\n+                len,\n+                frame,\n+                ref lock,\n+            } =>  {\n+                ptr.hash_stable(hcx, hasher);\n+                len.hash_stable(hcx, hasher);\n+                frame.hash_stable(hcx, hasher);\n+                lock.hash_stable(hcx, hasher)\n+            },\n+            DeallocatedLockedMemory {\n+                ptr,\n+                ref lock,\n+            } => {\n+                ptr.hash_stable(hcx, hasher);\n+                lock.hash_stable(hcx, hasher)\n+            },\n+            ValidationFailure(ref s) => s.hash_stable(hcx, hasher),\n+            TypeNotPrimitive(ty) => ty.hash_stable(hcx, hasher),\n+            ReallocatedWrongMemoryKind(ref a, ref b) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher)\n+            },\n+            DeallocatedWrongMemoryKind(ref a, ref b) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher)\n+            },\n+            IncorrectAllocationInformation(a, b, c, d) => {\n+                a.hash_stable(hcx, hasher);\n+                b.hash_stable(hcx, hasher);\n+                c.hash_stable(hcx, hasher);\n+                d.hash_stable(hcx, hasher)\n+            },\n+            Layout(lay) => lay.hash_stable(hcx, hasher),\n+            HeapAllocNonPowerOfTwoAlignment(n) => n.hash_stable(hcx, hasher),\n+            PathNotFound(ref v) => v.hash_stable(hcx, hasher),\n+        }\n+    }\n+}\n+\n+impl_stable_hash_for!(enum mir::interpret::Lock {\n+    NoLock,\n+    WriteLock(dl),\n+    ReadLock(v)\n+});\n+\n+impl_stable_hash_for!(struct mir::interpret::DynamicLifetime {\n+    frame,\n+    region\n+});\n+\n+impl_stable_hash_for!(enum mir::interpret::AccessKind {\n+    Read,\n+    Write\n+});\n+\n impl_stable_hash_for!(enum ty::Variance {\n     Covariant,\n     Invariant,"}, {"sha": "589890947cd5aabe02f7145e191151417e3184da", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=c0574c054c1979a4d77822d4fe36ba7571760b00", "patch": "@@ -111,6 +111,13 @@ pub enum ErrKind<'tcx> {\n \n     TypeckError,\n     CheckMatchError,\n+    Miri(::mir::interpret::EvalError<'tcx>),\n+}\n+\n+impl<'tcx> From<::mir::interpret::EvalError<'tcx>> for ErrKind<'tcx> {\n+    fn from(err: ::mir::interpret::EvalError<'tcx>) -> ErrKind<'tcx> {\n+        ErrKind::Miri(err)\n+    }\n }\n \n impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n@@ -173,6 +180,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n \n             TypeckError => simple!(\"type-checking failed\"),\n             CheckMatchError => simple!(\"match-checking failed\"),\n+            Miri(ref err) => simple!(\"miri failed: {}\", err),\n         }\n     }\n "}, {"sha": "6386de5952f99905806162195109bf62b7445846", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c0574c054c1979a4d77822d4fe36ba7571760b00", "patch": "@@ -12,7 +12,7 @@ use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n use backtrace::Backtrace;\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx>,\n     pub backtrace: Option<Backtrace>,\n@@ -31,11 +31,11 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum EvalErrorKind<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant\n-    MachineError(Box<dyn Error>),\n+    MachineError(String),\n     FunctionPointerTyMismatch(FnSig<'tcx>, FnSig<'tcx>),\n     NoMirFor(String),\n     UnterminatedCString(MemoryPointer),\n@@ -132,7 +132,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n     fn description(&self) -> &str {\n         use self::EvalErrorKind::*;\n         match self.kind {\n-            MachineError(ref inner) => inner.description(),\n+            MachineError(ref inner) => inner,\n             FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n             InvalidMemoryAccess =>\n@@ -247,14 +247,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"encountered constants with type errors, stopping evaluation\",\n         }\n     }\n-\n-    fn cause(&self) -> Option<&dyn Error> {\n-        use self::EvalErrorKind::*;\n-        match self.kind {\n-            MachineError(ref inner) => Some(&**inner),\n-            _ => None,\n-        }\n-    }\n }\n \n impl<'tcx> fmt::Display for EvalError<'tcx> {"}, {"sha": "54db2d4f06be5485d4bba95ced1bdf53d516e83d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0574c054c1979a4d77822d4fe36ba7571760b00/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c0574c054c1979a4d77822d4fe36ba7571760b00", "patch": "@@ -18,6 +18,7 @@ use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use mir::interpret;\n \n use std::rc::Rc;\n \n@@ -585,6 +586,116 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n+    type Lifted = interpret::EvalError<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        use mir::interpret::EvalErrorKind::*;\n+        let kind = match self.kind {\n+            MachineError(ref err) => MachineError(err.clone()),\n+            FunctionPointerTyMismatch(a, b) => FunctionPointerTyMismatch(\n+                tcx.lift(&a)?,\n+                tcx.lift(&b)?,\n+            ),\n+            NoMirFor(ref s) => NoMirFor(s.clone()),\n+            UnterminatedCString(ptr) => UnterminatedCString(ptr),\n+            DanglingPointerDeref => DanglingPointerDeref,\n+            DoubleFree => DoubleFree,\n+            InvalidMemoryAccess => InvalidMemoryAccess,\n+            InvalidFunctionPointer => InvalidFunctionPointer,\n+            InvalidBool => InvalidBool,\n+            InvalidDiscriminant => InvalidDiscriminant,\n+            PointerOutOfBounds {\n+                ptr,\n+                access,\n+                allocation_size,\n+            } => PointerOutOfBounds { ptr, access, allocation_size },\n+            InvalidNullPointerUsage => InvalidNullPointerUsage,\n+            ReadPointerAsBytes => ReadPointerAsBytes,\n+            ReadBytesAsPointer => ReadBytesAsPointer,\n+            InvalidPointerMath => InvalidPointerMath,\n+            ReadUndefBytes => ReadUndefBytes,\n+            DeadLocal => DeadLocal,\n+            InvalidBoolOp(bop) => InvalidBoolOp(bop),\n+            Unimplemented(ref s) => Unimplemented(s.clone()),\n+            DerefFunctionPointer => DerefFunctionPointer,\n+            ExecuteMemory => ExecuteMemory,\n+            ArrayIndexOutOfBounds(sp, a, b) => ArrayIndexOutOfBounds(sp, a, b),\n+            Math(sp, ref err) => Math(sp, err.clone()),\n+            Intrinsic(ref s) => Intrinsic(s.clone()),\n+            OverflowingMath => OverflowingMath,\n+            InvalidChar(c) => InvalidChar(c),\n+            OutOfMemory {\n+                allocation_size,\n+                memory_size,\n+                memory_usage,\n+            } => OutOfMemory { allocation_size, memory_size, memory_usage },\n+            ExecutionTimeLimitReached => ExecutionTimeLimitReached,\n+            StackFrameLimitReached => StackFrameLimitReached,\n+            OutOfTls => OutOfTls,\n+            TlsOutOfBounds => TlsOutOfBounds,\n+            AbiViolation(ref s) => AbiViolation(s.clone()),\n+            AlignmentCheckFailed {\n+                required,\n+                has,\n+            } => AlignmentCheckFailed { required, has },\n+            MemoryLockViolation {\n+                ptr,\n+                len,\n+                frame,\n+                access,\n+                ref lock,\n+            } => MemoryLockViolation { ptr, len, frame, access, lock: lock.clone() },\n+            MemoryAcquireConflict {\n+                ptr,\n+                len,\n+                kind,\n+                ref lock,\n+            } => MemoryAcquireConflict { ptr, len, kind, lock: lock.clone() },\n+            InvalidMemoryLockRelease {\n+                ptr,\n+                len,\n+                frame,\n+                ref lock,\n+            } => InvalidMemoryLockRelease { ptr, len, frame, lock: lock.clone() },\n+            DeallocatedLockedMemory {\n+                ptr,\n+                ref lock,\n+            } => DeallocatedLockedMemory { ptr, lock: lock.clone() },\n+            ValidationFailure(ref s) => ValidationFailure(s.clone()),\n+            CalledClosureAsFunction => CalledClosureAsFunction,\n+            VtableForArgumentlessMethod => VtableForArgumentlessMethod,\n+            ModifiedConstantMemory => ModifiedConstantMemory,\n+            AssumptionNotHeld => AssumptionNotHeld,\n+            InlineAsm => InlineAsm,\n+            TypeNotPrimitive(ty) => TypeNotPrimitive(tcx.lift(&ty)?),\n+            ReallocatedWrongMemoryKind(ref a, ref b) => {\n+                ReallocatedWrongMemoryKind(a.clone(), b.clone())\n+            },\n+            DeallocatedWrongMemoryKind(ref a, ref b) => {\n+                DeallocatedWrongMemoryKind(a.clone(), b.clone())\n+            },\n+            ReallocateNonBasePtr => ReallocateNonBasePtr,\n+            DeallocateNonBasePtr => DeallocateNonBasePtr,\n+            IncorrectAllocationInformation(a, b, c, d) => {\n+                IncorrectAllocationInformation(a, b, c, d)\n+            },\n+            Layout(lay) => Layout(tcx.lift(&lay)?),\n+            HeapAllocZeroBytes => HeapAllocZeroBytes,\n+            HeapAllocNonPowerOfTwoAlignment(n) => HeapAllocNonPowerOfTwoAlignment(n),\n+            Unreachable => Unreachable,\n+            Panic => Panic,\n+            ReadFromReturnPointer => ReadFromReturnPointer,\n+            PathNotFound(ref v) => PathNotFound(v.clone()),\n+            UnimplementedTraitSelection => UnimplementedTraitSelection,\n+            TypeckError => TypeckError,\n+        };\n+        Some(interpret::EvalError {\n+            kind,\n+            backtrace: self.backtrace.clone(),\n+        })\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n     type Lifted = const_val::ErrKind<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -614,6 +725,7 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n \n             TypeckError => TypeckError,\n             CheckMatchError => CheckMatchError,\n+            Miri(ref e) => return tcx.lift(e).map(Miri),\n         })\n     }\n }"}]}