{"sha": "43dd3d514b6b11c5195de2fd8e665828801d0972", "node_id": "C_kwDOAAsO6NoAKDQzZGQzZDUxNGI2YjExYzUxOTVkZTJmZDhlNjY1ODI4ODAxZDA5NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T11:29:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T11:29:15Z"}, "message": "Auto merge of #103284 - compiler-errors:const-sad, r=oli-obk\n\nRevert \"Unify tcx.constness and param env constness checks\"\n\nToo much of a perf regression https://github.com/rust-lang/rust/pull/102975#issuecomment-1282702513, and an attempt in #103263 didn't fix it except for just a tiny bit.\n\nThis change isn't really needed (see https://github.com/rust-lang/rust/pull/102830#issuecomment-1272514096), so this should be an easy revert.", "tree": {"sha": "c3380aaadaf3573975d63ed468bd0854cd1814fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3380aaadaf3573975d63ed468bd0854cd1814fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43dd3d514b6b11c5195de2fd8e665828801d0972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43dd3d514b6b11c5195de2fd8e665828801d0972", "html_url": "https://github.com/rust-lang/rust/commit/43dd3d514b6b11c5195de2fd8e665828801d0972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43dd3d514b6b11c5195de2fd8e665828801d0972/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629a414d7ba4caa3ca28b0a46c478e2ecb4c0059", "url": "https://api.github.com/repos/rust-lang/rust/commits/629a414d7ba4caa3ca28b0a46c478e2ecb4c0059", "html_url": "https://github.com/rust-lang/rust/commit/629a414d7ba4caa3ca28b0a46c478e2ecb4c0059"}, {"sha": "751ac6ce5168b8bbefd83040fb262204072fc4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/751ac6ce5168b8bbefd83040fb262204072fc4df", "html_url": "https://github.com/rust-lang/rust/commit/751ac6ce5168b8bbefd83040fb262204072fc4df"}], "stats": {"total": 224, "additions": 123, "deletions": 101}, "files": [{"sha": "f1674d04f8d15f16be1f3011eaead81daad003e7", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 16, "deletions": 56, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -25,10 +25,12 @@ pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n /// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n /// `Constness::NotConst`.\n fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    match tcx.hir().get(hir_id) {\n-        hir::Node::Ctor(_) => hir::Constness::Const,\n+    let def_id = def_id.expect_local();\n+    let node = tcx.hir().get_by_def_id(def_id);\n \n+    match node {\n+        hir::Node::Ctor(_) => hir::Constness::Const,\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.constness,\n         hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) => {\n             // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n             // foreign items cannot be evaluated at compile-time.\n@@ -39,62 +41,20 @@ fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n             };\n             if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n+        _ => {\n+            if let Some(fn_kind) = node.fn_kind() {\n+                if fn_kind.constness() == hir::Constness::Const {\n+                    return hir::Constness::Const;\n+                }\n \n-        hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n-            if tcx.is_const_default_method(def_id) =>\n-        {\n-            hir::Constness::Const\n-        }\n-\n-        hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n-        | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n-        | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Const(..), .. })\n-        | hir::Node::AnonConst(_)\n-        | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n-        | hir::Node::ImplItem(hir::ImplItem {\n-            kind:\n-                hir::ImplItemKind::Fn(\n-                    hir::FnSig {\n-                        header: hir::FnHeader { constness: hir::Constness::Const, .. },\n-                        ..\n-                    },\n-                    ..,\n-                ),\n-            ..\n-        }) => hir::Constness::Const,\n-\n-        hir::Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n-            ..\n-        }) => {\n-            let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n-            match tcx.hir().get(parent_hir_id) {\n-                hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                    ..\n-                }) => *constness,\n-                _ => span_bug!(\n-                    tcx.def_span(parent_hir_id.owner),\n-                    \"impl item's parent node is not an impl\",\n-                ),\n+                // If the function itself is not annotated with `const`, it may still be a `const fn`\n+                // if it resides in a const trait impl.\n+                let is_const = is_parent_const_impl_raw(tcx, def_id);\n+                if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n+            } else {\n+                hir::Constness::NotConst\n             }\n         }\n-\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-            ..\n-        })\n-        | hir::Node::TraitItem(hir::TraitItem {\n-            kind:\n-                hir::TraitItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-            ..\n-        })\n-        | hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-            ..\n-        }) => *constness,\n-\n-        _ => hir::Constness::NotConst,\n     }\n }\n "}, {"sha": "73f2a3e0b636e2e2cb2f985bcdce7d479b8ceca4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -1094,43 +1094,6 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n-fn should_encode_constness(def_kind: DefKind) -> bool {\n-    match def_kind {\n-        DefKind::Struct\n-        | DefKind::Union\n-        | DefKind::Enum\n-        | DefKind::Trait\n-        | DefKind::AssocTy\n-        | DefKind::Fn\n-        | DefKind::Const\n-        | DefKind::Static(..)\n-        | DefKind::Ctor(..)\n-        | DefKind::AssocFn\n-        | DefKind::AssocConst\n-        | DefKind::AnonConst\n-        | DefKind::InlineConst\n-        | DefKind::OpaqueTy\n-        | DefKind::ImplTraitPlaceholder\n-        | DefKind::Impl\n-        | DefKind::Closure\n-        | DefKind::Generator\n-        | DefKind::TyAlias => true,\n-        DefKind::Variant\n-        | DefKind::TraitAlias\n-        | DefKind::ForeignTy\n-        | DefKind::Field\n-        | DefKind::TyParam\n-        | DefKind::Mod\n-        | DefKind::ForeignMod\n-        | DefKind::ConstParam\n-        | DefKind::Macro(..)\n-        | DefKind::Use\n-        | DefKind::LifetimeParam\n-        | DefKind::GlobalAsm\n-        | DefKind::ExternCrate => false,\n-    }\n-}\n-\n fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     if tcx.def_kind(def_id) != DefKind::AssocFn {\n         return false;\n@@ -1239,9 +1202,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n-            if should_encode_constness(def_kind) {\n-                self.tables.constness.set(def_id.index, tcx.constness(def_id));\n-            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -1269,6 +1229,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1296,6 +1257,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1359,6 +1321,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1394,6 +1357,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n+                self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n@@ -1418,6 +1382,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n+                let constness = if self.tcx.is_const_fn_raw(def_id) {\n+                    hir::Constness::Const\n+                } else {\n+                    hir::Constness::NotConst\n+                };\n+                self.tables.constness.set(def_id.index, constness);\n             }\n             ty::AssocKind::Const | ty::AssocKind::Type => {}\n         }\n@@ -1555,6 +1526,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                self.tables.constness.set(def_id.index, sig.header.constness);\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 if macro_def.macro_rules {\n@@ -1575,6 +1547,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+                self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1603,8 +1576,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 });\n             }\n-            hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n+            hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n+                self.tables.constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {"}, {"sha": "3eebb4ace477fe867610edbc92070a628701fca4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -137,10 +137,82 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n+    // FIXME(consts): This is not exactly in line with the constness query.\n+    let constness = match hir_id {\n+        Some(hir_id) => match tcx.hir().get(hir_id) {\n+            hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+                if tcx.is_const_default_method(def_id) =>\n+            {\n+                hir::Constness::Const\n+            }\n+\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n+            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Const(..), ..\n+            })\n+            | hir::Node::AnonConst(_)\n+            | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n+            | hir::Node::ImplItem(hir::ImplItem {\n+                kind:\n+                    hir::ImplItemKind::Fn(\n+                        hir::FnSig {\n+                            header: hir::FnHeader { constness: hir::Constness::Const, .. },\n+                            ..\n+                        },\n+                        ..,\n+                    ),\n+                ..\n+            }) => hir::Constness::Const,\n+\n+            hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n+                ..\n+            }) => {\n+                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n+                match tcx.hir().get(parent_hir_id) {\n+                    hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                        ..\n+                    }) => *constness,\n+                    _ => span_bug!(\n+                        tcx.def_span(parent_hir_id.owner),\n+                        \"impl item's parent node is not an impl\",\n+                    ),\n+                }\n+            }\n+\n+            hir::Node::Item(hir::Item {\n+                kind:\n+                    hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind:\n+                    hir::TraitItemKind::Fn(\n+                        hir::FnSig { header: hir::FnHeader { constness, .. }, .. },\n+                        ..,\n+                    ),\n+                ..\n+            })\n+            | hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                ..\n+            }) => *constness,\n+\n+            _ => hir::Constness::NotConst,\n+        },\n+        // FIXME(consts): It's suspicious that a param-env for a foreign item\n+        // will always have NotConst param-env, though we don't typically use\n+        // that param-env for anything meaningful right now, so it's likely\n+        // not an issue.\n+        None => hir::Constness::NotConst,\n+    };\n+\n     let unnormalized_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n         traits::Reveal::UserFacing,\n-        tcx.constness(def_id),\n+        constness,\n     );\n \n     let body_id ="}, {"sha": "07d3f51edce5ea80eb8baf6e4d3559e7c5bd4385", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102985.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -4,7 +4,8 @@ struct Bug {\n     inner: [(); match || 1 {\n         n => n(),\n         //~^ ERROR the trait bound\n-        //~| ERROR cannot call non-const fn `Bug::inner::{constant#0}::{closure#0}` in constants\n+        //~| ERROR the trait bound\n+        //~| ERROR cannot call non-const closure in constants\n     }],\n }\n "}, {"sha": "b98ccbe5d03ec3839b91a68ce959dc50091c8b81", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102985.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43dd3d514b6b11c5195de2fd8e665828801d0972/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr?ref=43dd3d514b6b11c5195de2fd8e665828801d0972", "patch": "@@ -12,15 +12,30 @@ LL |         n => n(),\n    |              ^^^\n    = note: wrap the `[closure@$DIR/issue-102985.rs:4:23: 4:25]` in a closure with no arguments: `|| { /* code */ }`\n \n-error[E0015]: cannot call non-const fn `Bug::inner::{constant#0}::{closure#0}` in constants\n+error[E0277]: the trait bound `[closure@$DIR/issue-102985.rs:4:23: 4:25]: ~const Fn<()>` is not satisfied\n+  --> $DIR/issue-102985.rs:5:14\n+   |\n+LL |         n => n(),\n+   |              ^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-102985.rs:4:23: 4:25]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-102985.rs:4:23: 4:25]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-102985.rs:4:23: 4:25]`, but that implementation is not `const`\n+  --> $DIR/issue-102985.rs:5:14\n+   |\n+LL |         n => n(),\n+   |              ^^^\n+   = note: wrap the `[closure@$DIR/issue-102985.rs:4:23: 4:25]` in a closure with no arguments: `|| { /* code */ }`\n+\n+error[E0015]: cannot call non-const closure in constants\n   --> $DIR/issue-102985.rs:5:14\n    |\n LL |         n => n(),\n    |              ^^^\n    |\n+   = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0277.\n For more information about an error, try `rustc --explain E0015`."}]}