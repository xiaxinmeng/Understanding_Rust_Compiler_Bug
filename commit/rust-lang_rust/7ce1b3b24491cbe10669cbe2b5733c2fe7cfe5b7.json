{"sha": "7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTFiM2IyNDQ5MWNiZTEwNjY5Y2JlMmI1NzMzYzJmZTdjZmU1Yjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T10:50:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T10:50:16Z"}, "message": "Auto merge of #81545 - JohnTitor:rollup-zlt3tn6, r=JohnTitor\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #79023 (Add `core::stream::Stream`)\n - #80562 (Consider Scalar to be a bool only if its unsigned)\n - #80886 (Stabilize raw ref macros)\n - #80959 (Stabilize `unsigned_abs`)\n - #81291 (Support FRU pattern with `[feature(capture_disjoint_fields)]`)\n - #81409 (Slight simplification of chars().count())\n - #81468 (cfg(version): treat nightlies as complete)\n - #81473 (Warn write-only fields)\n - #81495 (rustdoc: Remove unnecessary optional)\n - #81499 (Updated Vec::splice documentation)\n - #81501 (update rustfmt to v1.4.34)\n - #81505 (`fn cold_path` doesn't need to be pub)\n - #81512 (Add missing variants in match binding)\n - #81515 (Fix typo in pat.rs)\n - #81519 (Don't print error output from rustup when detecting default build triple)\n - #81520 (Don't clone LLVM submodule when download-ci-llvm is set)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b4bc76e37d133d24df1e8a93a0a2a0fa4aa74e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4bc76e37d133d24df1e8a93a0a2a0fa4aa74e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "html_url": "https://github.com/rust-lang/rust/commit/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaea9e850648dfeaeec353fd66c155c80de5ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaea9e850648dfeaeec353fd66c155c80de5ded", "html_url": "https://github.com/rust-lang/rust/commit/ebaea9e850648dfeaeec353fd66c155c80de5ded"}, {"sha": "31e7634749a737be8118ec8fe92c2dfcd2d10046", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e7634749a737be8118ec8fe92c2dfcd2d10046", "html_url": "https://github.com/rust-lang/rust/commit/31e7634749a737be8118ec8fe92c2dfcd2d10046"}], "stats": {"total": 693, "additions": 598, "deletions": 95}, "files": [{"sha": "f15f9519cb34f8452e3be08420fae1d8cdb065b1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -4442,7 +4442,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.32\"\n+version = \"1.4.34\"\n dependencies = [\n  \"annotate-snippets 0.6.1\",\n  \"anyhow\","}, {"sha": "54552b499be56d666896c873e64c241a880b999c", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -32,7 +32,7 @@ use std::slice;\n \n #[inline(never)]\n #[cold]\n-pub fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n+fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n     f()\n }\n "}, {"sha": "696d5fdd6cd452952a7ade4d92bd32aa8facc69b", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -586,12 +586,14 @@ pub fn eval_condition(\n                     return false;\n                 }\n             };\n-            let channel = env!(\"CFG_RELEASE_CHANNEL\");\n-            let nightly = channel == \"nightly\" || channel == \"dev\";\n             let rustc_version = parse_version(env!(\"CFG_RELEASE\"), true).unwrap();\n \n-            // See https://github.com/rust-lang/rust/issues/64796#issuecomment-625474439 for details\n-            if nightly { rustc_version > min_version } else { rustc_version >= min_version }\n+            // See https://github.com/rust-lang/rust/issues/64796#issuecomment-640851454 for details\n+            if sess.assume_incomplete_release {\n+                rustc_version > min_version\n+            } else {\n+                rustc_version >= min_version\n+            }\n         }\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {"}, {"sha": "f9c3406d3b3355e74c28d81e3ef9006b93b083c4", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -540,6 +540,7 @@ fn test_debugging_options_tracking_hash() {\n     // This list is in alphabetical order.\n     tracked!(allow_features, Some(vec![String::from(\"lang_items\")]));\n     tracked!(always_encode_mir, true);\n+    tracked!(assume_incomplete_release, true);\n     tracked!(asm_comments, true);\n     tracked!(binary_dep_depinfo, true);\n     tracked!(chalk, true);"}, {"sha": "55fe5f971e718938c227a17d9943cb6c12f82463", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -588,12 +588,3 @@ pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, i\n     debug_assert!(source.len() == 0); // We should have consumed the source buffer.\n     uint\n }\n-\n-/// Computes the unsigned absolute value without wrapping or panicking.\n-#[inline]\n-pub fn uabs(value: i64) -> u64 {\n-    // The only tricky part here is if value == i64::MIN. In that case,\n-    // wrapping_abs() returns i64::MIN == -2^63. Casting this value to a u64\n-    // gives 2^63, the correct value.\n-    value.wrapping_abs() as u64\n-}"}, {"sha": "8774b48fb3e403665dae7b75ce9d3b96d2ff6d55", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1,4 +1,4 @@\n-use super::{uabs, AllocId, InterpResult};\n+use super::{AllocId, InterpResult};\n \n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n@@ -57,7 +57,7 @@ pub trait PointerArithmetic: HasDataLayout {\n     #[inline]\n     fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n         // We need to make sure that i fits in a machine isize.\n-        let n = uabs(i);\n+        let n = i.unsigned_abs();\n         if i >= 0 {\n             let (val, over) = self.overflowing_offset(val, n);\n             (val, over || i > self.machine_isize_max())"}, {"sha": "f4309c9cd9572d11e62f1eabc758cb78d1bd59b6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -7,7 +7,7 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{uabs, ConstValue, GlobalId, InterpResult, Scalar},\n+    interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n     BinOp,\n };\n use rustc_middle::ty;\n@@ -542,7 +542,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // memory between these pointers must be accessible. Note that we do not require the\n         // pointers to be properly aligned (unlike a read/write operation).\n         let min_ptr = if offset_bytes >= 0 { ptr } else { offset_ptr };\n-        let size: u64 = uabs(offset_bytes);\n+        let size = offset_bytes.unsigned_abs();\n         // This call handles checking for integer/NULL pointers.\n         self.memory.check_ptr_access_align(\n             min_ptr,"}, {"sha": "2503360b1e4d0d574220627be391b39e37150026", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -303,7 +303,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         self.base\n     }\n \n-    fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n+    crate fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n         self.project(PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "32c01f2c73326891353785e2ebd0df1e28e2169b", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n-                    let base = unpack!(block = this.as_place(block, base));\n+                    let place_builder = unpack!(block = this.as_place_builder(block, base));\n \n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n@@ -306,9 +306,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .zip(field_types.into_iter())\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n-                            None => this.consume_by_copy_or_move(\n-                                this.hir.tcx().mk_place_field(base, n, ty),\n-                            ),\n+                            None => {\n+                                let place_builder = place_builder.clone();\n+                                this.consume_by_copy_or_move(\n+                                    place_builder\n+                                        .field(n, ty)\n+                                        .into_place(this.hir.tcx(), this.hir.typeck_results()),\n+                                )\n+                            },\n                         })\n                         .collect()\n                 } else {"}, {"sha": "d888514cf56d623dd893244f95a89960af5a6935", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -240,7 +240,7 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    /// Parse and throw away a parentesized comma separated\n+    /// Parse and throw away a parenthesized comma separated\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {\n         while !self.check(&token::CloseDelim(token::Paren)) {"}, {"sha": "0d096a0556ba1f187b375f4719101f8021445d95", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -37,6 +37,15 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     )\n }\n \n+fn base_expr<'a>(mut expr: &'a hir::Expr<'a>) -> &'a hir::Expr<'a> {\n+    loop {\n+        match expr.kind {\n+            hir::ExprKind::Field(base, ..) => expr = base,\n+            _ => return expr,\n+        }\n+    }\n+}\n+\n struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<hir::HirId>,\n     tcx: TyCtxt<'tcx>,\n@@ -263,6 +272,12 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             hir::ExprKind::MethodCall(..) => {\n                 self.lookup_and_handle_method(expr.hir_id);\n             }\n+            hir::ExprKind::Assign(ref left, ref right, ..) => {\n+                // Ignore write to field\n+                self.visit_expr(base_expr(left));\n+                self.visit_expr(right);\n+                return;\n+            }\n             hir::ExprKind::Field(ref lhs, ..) => {\n                 self.handle_field_access(&lhs, expr.hir_id);\n             }"}, {"sha": "9d55bafd2868eaf43aeff6285274bc891c36e3f1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -977,7 +977,7 @@ impl<'a> Resolver<'a> {\n         });\n         if let Some(def_span) = def_span {\n             if span.overlaps(def_span) {\n-                // Don't suggest typo suggestion for itself like in the followoing:\n+                // Don't suggest typo suggestion for itself like in the following:\n                 // error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n                 //   --> $DIR/issue-64792-bad-unicode-ctor.rs:3:14\n                 //    |"}, {"sha": "779e04216369829c274e9a051e2f3d88de92b091", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -854,6 +854,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n+    assume_incomplete_release: bool = (false, parse_bool, [TRACKED],\n+        \"make cfg(version) treat the current version as incomplete (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "81b38347414e89fde937ca011074bf2ef1bee39a", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -138,6 +138,8 @@ pub struct ParseSess {\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n     /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n     pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n+    /// Whether cfg(version) should treat the current release as incomplete\n+    pub assume_incomplete_release: bool,\n }\n \n impl ParseSess {\n@@ -164,6 +166,7 @@ impl ParseSess {\n             reached_eof: Lock::new(false),\n             env_depinfo: Default::default(),\n             type_ascription_path_suggestions: Default::default(),\n+            assume_incomplete_release: false,\n         }\n     }\n "}, {"sha": "69aa72d899fb384d43c59318cdc938ab91f1504f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1344,7 +1344,8 @@ pub fn build_session(\n         None\n     };\n \n-    let parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n+    let mut parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n+    parse_sess.assume_incomplete_release = sopts.debugging_opts.assume_incomplete_release;\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),\n         None => filesearch::get_or_default_sysroot(),"}, {"sha": "bbf7ecc39cfd99ee06789814f5e575f12558c63b", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -530,7 +530,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                     if val < 0 {\n                         neg = true;\n                     }\n-                    Some(val.wrapping_abs() as u128)\n+                    Some(val.unsigned_abs())\n                 })\n             }\n             _ => {"}, {"sha": "ce8e56b194980ee1f238558d70d314903fb89d7c", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -103,7 +103,12 @@ impl ArgAttributes {\n     }\n \n     pub fn ext(&mut self, ext: ArgExtension) -> &mut Self {\n-        assert!(self.arg_ext == ArgExtension::None || self.arg_ext == ext);\n+        assert!(\n+            self.arg_ext == ArgExtension::None || self.arg_ext == ext,\n+            \"cannot set {:?} when {:?} is already set\",\n+            ext,\n+            self.arg_ext\n+        );\n         self.arg_ext = ext;\n         self\n     }"}, {"sha": "b14b1ef00db9148d7b3134556d7c74b8e3e2aa3f", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -682,7 +682,7 @@ pub struct Scalar {\n \n impl Scalar {\n     pub fn is_bool(&self) -> bool {\n-        if let Int(I8, _) = self.value { self.valid_range == (0..=1) } else { false }\n+        matches!(self.value, Int(I8, false)) && self.valid_range == (0..=1)\n     }\n \n     /// Returns the valid range as a `x..y` range."}, {"sha": "a3c0be69813864148071e99b3b520e98d05fa42c", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -149,6 +149,7 @@ use core::ops::{\n };\n use core::pin::Pin;\n use core::ptr::{self, Unique};\n+use core::stream::Stream;\n use core::task::{Context, Poll};\n \n use crate::alloc::{handle_alloc_error, AllocError, Allocator, Global, Layout, WriteCloneIntoRaw};\n@@ -1621,3 +1622,16 @@ where\n         F::poll(Pin::new(&mut *self), cx)\n     }\n }\n+\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+impl<S: ?Sized + Stream + Unpin> Stream for Box<S> {\n+    type Item = S::Item;\n+\n+    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+        Pin::new(&mut **self).poll_next(cx)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (**self).size_hint()\n+    }\n+}"}, {"sha": "1d632512c78b46785a13e34ead7a81d76a732baa", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -545,8 +545,8 @@ impl<'a, K, V, Type> NodeRef<marker::ValMut<'a>, K, V, Type> {\n         // to avoid aliasing with outstanding references to other elements,\n         // in particular, those returned to the caller in earlier iterations.\n         let leaf = Self::as_leaf_ptr(&mut self);\n-        let keys = unsafe { &raw const (*leaf).keys };\n-        let vals = unsafe { &raw mut (*leaf).vals };\n+        let keys = unsafe { ptr::addr_of!((*leaf).keys) };\n+        let vals = unsafe { ptr::addr_of_mut!((*leaf).vals) };\n         // We must coerce to unsized array pointers because of Rust issue #74679.\n         let keys: *const [_] = keys;\n         let vals: *mut [_] = vals;"}, {"sha": "0f9c5af4744190a8ac149683b47732e4673043b5", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -82,6 +82,7 @@\n #![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n+#![feature(async_stream)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n@@ -115,7 +116,6 @@\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(range_bounds_assert_len)]\n-#![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]"}, {"sha": "f67f5fc533b49f686541cdff2001dd6d5838acb8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -398,7 +398,7 @@ impl<T> Rc<T> {\n \n         unsafe {\n             let inner = init_ptr.as_ptr();\n-            ptr::write(&raw mut (*inner).value, data);\n+            ptr::write(ptr::addr_of_mut!((*inner).value), data);\n \n             let prev_value = (*inner).strong.get();\n             debug_assert_eq!(prev_value, 0, \"No prior strong references should exist\");\n@@ -804,7 +804,7 @@ impl<T: ?Sized> Rc<T> {\n         // SAFETY: This cannot go through Deref::deref or Rc::inner because\n         // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n-        unsafe { &raw const (*ptr).value }\n+        unsafe { ptr::addr_of_mut!((*ptr).value) }\n     }\n \n     /// Constructs an `Rc<T>` from a raw pointer.\n@@ -1917,7 +1917,7 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n-            unsafe { &raw const (*ptr).value }\n+            unsafe { ptr::addr_of_mut!((*ptr).value) }\n         }\n     }\n "}, {"sha": "d0081097fe10a663e5d4ce2fa04b5a41a36b36da", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -384,7 +384,7 @@ impl<T> Arc<T> {\n         // reference into a strong reference.\n         unsafe {\n             let inner = init_ptr.as_ptr();\n-            ptr::write(&raw mut (*inner).data, data);\n+            ptr::write(ptr::addr_of_mut!((*inner).data), data);\n \n             // The above write to the data field must be visible to any threads which\n             // observe a non-zero strong count. Therefore we need at least \"Release\" ordering\n@@ -800,7 +800,7 @@ impl<T: ?Sized> Arc<T> {\n         // SAFETY: This cannot go through Deref::deref or RcBoxPtr::inner because\n         // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n-        unsafe { &raw const (*ptr).data }\n+        unsafe { ptr::addr_of_mut!((*ptr).data) }\n     }\n \n     /// Constructs an `Arc<T>` from a raw pointer.\n@@ -1677,7 +1677,7 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n-            unsafe { &raw mut (*ptr).data }\n+            unsafe { ptr::addr_of_mut!((*ptr).data) }\n         }\n     }\n "}, {"sha": "9aea19f04c644cf277d5fef7c6e921b9a68cb656", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -2211,7 +2211,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// This is optimal if:\n     ///\n     /// * The tail (elements in the vector after `range`) is empty,\n-    /// * or `replace_with` yields fewer elements than `range`\u2019s length\n+    /// * or `replace_with` yields fewer or equal elements than `range`\u2019s length\n     /// * or the lower bound of its `size_hint()` is exact.\n     ///\n     /// Otherwise, a temporary vector is allocated and the tail is moved twice."}, {"sha": "a69b840e4bf147a0c04f80eb0ae6a61f0d0b665c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -126,7 +126,6 @@\n #![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(prelude_import)]\n-#![feature(raw_ref_macros)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n@@ -254,6 +253,8 @@ pub mod panicking;\n pub mod pin;\n pub mod raw;\n pub mod result;\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+pub mod stream;\n pub mod sync;\n \n pub mod fmt;"}, {"sha": "20ac165c6c7988faf3d9868de31dc094fe1fcb9c", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -332,7 +332,7 @@ fn bound_intermediate_digits(decimal: &Decimal<'_>, e: i64) -> u64 {\n         // It tries to find a positive number k such that `f << k / 10^e` is an in-range\n         // significand. This will result in about `2^53 * f * 10^e` < `10^17 * f * 10^e`.\n         // One input that triggers this is 0.33...33 (375 x 3).\n-        f_len + (e.abs() as u64) + 17\n+        f_len + e.unsigned_abs() + 17\n     }\n }\n "}, {"sha": "8fdd7c9e5d7fbc105c5a560fe31d2e2c631492d8", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1158,12 +1158,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(unsigned_abs)]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".unsigned_abs(), 100\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").unsigned_abs(), 100\", stringify!($UnsignedT), \");\")]\n         /// assert_eq!((-128i8).unsigned_abs(), 128u8);\n         /// ```\n-        #[unstable(feature = \"unsigned_abs\", issue = \"74913\")]\n+        #[stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n         #[inline]\n         pub const fn unsigned_abs(self) -> $UnsignedT {\n              self.wrapping_abs() as $UnsignedT"}, {"sha": "c0108c0f82e81e2a195592698d6f355e617d50e7", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1501,7 +1501,6 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// # Example\n ///\n /// ```\n-/// #![feature(raw_ref_macros)]\n /// use std::ptr;\n ///\n /// #[repr(packed)]\n@@ -1512,14 +1511,14 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n ///\n /// let packed = Packed { f1: 1, f2: 2 };\n /// // `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n-/// let raw_f2 = ptr::raw_const!(packed.f2);\n+/// let raw_f2 = ptr::addr_of!(packed.f2);\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n-#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n-pub macro raw_const($e:expr) {\n-    &raw const $e\n+pub macro addr_of($place:expr) {\n+    &raw const $place\n }\n \n /// Create a `mut` raw pointer to a place, without creating an intermediate reference.\n@@ -1534,7 +1533,6 @@ pub macro raw_const($e:expr) {\n /// # Example\n ///\n /// ```\n-/// #![feature(raw_ref_macros)]\n /// use std::ptr;\n ///\n /// #[repr(packed)]\n@@ -1545,13 +1543,13 @@ pub macro raw_const($e:expr) {\n ///\n /// let mut packed = Packed { f1: 1, f2: 2 };\n /// // `&mut packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n-/// let raw_f2 = ptr::raw_mut!(packed.f2);\n+/// let raw_f2 = ptr::addr_of_mut!(packed.f2);\n /// unsafe { raw_f2.write_unaligned(42); }\n /// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n-#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n-pub macro raw_mut($e:expr) {\n-    &raw mut $e\n+pub macro addr_of_mut($place:expr) {\n+    &raw mut $place\n }"}, {"sha": "315df83115d8cc370a7e3f4786915e38d29c8c65", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -543,8 +543,8 @@ impl<T> [T] {\n     #[inline]\n     pub fn swap(&mut self, a: usize, b: usize) {\n         // Can't take two mutable loans from one vector, so instead use raw pointers.\n-        let pa = ptr::raw_mut!(self[a]);\n-        let pb = ptr::raw_mut!(self[b]);\n+        let pa = ptr::addr_of_mut!(self[a]);\n+        let pb = ptr::addr_of_mut!(self[b]);\n         // SAFETY: `pa` and `pb` have been created from safe mutable references and refer\n         // to elements in the slice and therefore are guaranteed to be valid and aligned.\n         // Note that accessing the elements behind `a` and `b` is checked and will"}, {"sha": "83f484dc570c468d6b0a27b4c79dc79613871d74", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -47,12 +47,7 @@ impl<'a> Iterator for Chars<'a> {\n     #[inline]\n     fn count(self) -> usize {\n         // length in `char` is equal to the number of non-continuation bytes\n-        let bytes_len = self.iter.len();\n-        let mut cont_bytes = 0;\n-        for &byte in self.iter {\n-            cont_bytes += utf8_is_cont_byte(byte) as usize;\n-        }\n-        bytes_len - cont_bytes\n+        self.iter.filter(|&&byte| !utf8_is_cont_byte(byte)).count()\n     }\n \n     #[inline]"}, {"sha": "0df18af65ebf04cc740f77931871df0bd5dfc637", "filename": "library/core/src/stream/mod.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,127 @@\n+//! Composable asynchronous iteration.\n+//!\n+//! If futures are asynchronous values, then streams are asynchronous\n+//! iterators. If you've found yourself with an asynchronous collection of some kind,\n+//! and needed to perform an operation on the elements of said collection,\n+//! you'll quickly run into 'streams'. Streams are heavily used in idiomatic\n+//! asynchronous Rust code, so it's worth becoming familiar with them.\n+//!\n+//! Before explaining more, let's talk about how this module is structured:\n+//!\n+//! # Organization\n+//!\n+//! This module is largely organized by type:\n+//!\n+//! * [Traits] are the core portion: these traits define what kind of streams\n+//!   exist and what you can do with them. The methods of these traits are worth\n+//!   putting some extra study time into.\n+//! * Functions provide some helpful ways to create some basic streams.\n+//! * Structs are often the return types of the various methods on this\n+//!   module's traits. You'll usually want to look at the method that creates\n+//!   the `struct`, rather than the `struct` itself. For more detail about why,\n+//!   see '[Implementing Stream](#implementing-stream)'.\n+//!\n+//! [Traits]: #traits\n+//!\n+//! That's it! Let's dig into streams.\n+//!\n+//! # Stream\n+//!\n+//! The heart and soul of this module is the [`Stream`] trait. The core of\n+//! [`Stream`] looks like this:\n+//!\n+//! ```\n+//! # use core::task::{Context, Poll};\n+//! # use core::pin::Pin;\n+//! trait Stream {\n+//!     type Item;\n+//!     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n+//! }\n+//! ```\n+//!\n+//! Unlike `Iterator`, `Stream` makes a distinction between the [`poll_next`]\n+//! method which is used when implementing a `Stream`, and a (to-be-implemented)\n+//! `next` method which is used when consuming a stream. Consumers of `Stream`\n+//! only need to consider `next`, which when called, returns a future which\n+//! yields `Option<Stream::Item>`.\n+//!\n+//! The future returned by `next` will yield `Some(Item)` as long as there are\n+//! elements, and once they've all been exhausted, will yield `None` to indicate\n+//! that iteration is finished. If we're waiting on something asynchronous to\n+//! resolve, the future will wait until the stream is ready to yield again.\n+//!\n+//! Individual streams may choose to resume iteration, and so calling `next`\n+//! again may or may not eventually yield `Some(Item)` again at some point.\n+//!\n+//! [`Stream`]'s full definition includes a number of other methods as well,\n+//! but they are default methods, built on top of [`poll_next`], and so you get\n+//! them for free.\n+//!\n+//! [`Poll`]: super::task::Poll\n+//! [`poll_next`]: Stream::poll_next\n+//!\n+//! # Implementing Stream\n+//!\n+//! Creating a stream of your own involves two steps: creating a `struct` to\n+//! hold the stream's state, and then implementing [`Stream`] for that\n+//! `struct`.\n+//!\n+//! Let's make a stream named `Counter` which counts from `1` to `5`:\n+//!\n+//! ```no_run\n+//! #![feature(async_stream)]\n+//! # use core::stream::Stream;\n+//! # use core::task::{Context, Poll};\n+//! # use core::pin::Pin;\n+//!\n+//! // First, the struct:\n+//!\n+//! /// A stream which counts from one to five\n+//! struct Counter {\n+//!     count: usize,\n+//! }\n+//!\n+//! // we want our count to start at one, so let's add a new() method to help.\n+//! // This isn't strictly necessary, but is convenient. Note that we start\n+//! // `count` at zero, we'll see why in `poll_next()`'s implementation below.\n+//! impl Counter {\n+//!     fn new() -> Counter {\n+//!         Counter { count: 0 }\n+//!     }\n+//! }\n+//!\n+//! // Then, we implement `Stream` for our `Counter`:\n+//!\n+//! impl Stream for Counter {\n+//!     // we will be counting with usize\n+//!     type Item = usize;\n+//!\n+//!     // poll_next() is the only required method\n+//!     fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+//!         // Increment our count. This is why we started at zero.\n+//!         self.count += 1;\n+//!\n+//!         // Check to see if we've finished counting or not.\n+//!         if self.count < 6 {\n+//!             Poll::Ready(Some(self.count))\n+//!         } else {\n+//!             Poll::Ready(None)\n+//!         }\n+//!     }\n+//! }\n+//! ```\n+//!\n+//! # Laziness\n+//!\n+//! Streams are *lazy*. This means that just creating a stream doesn't _do_ a\n+//! whole lot. Nothing really happens until you call `next`. This is sometimes a\n+//! source of confusion when creating a stream solely for its side effects. The\n+//! compiler will warn us about this kind of behavior:\n+//!\n+//! ```text\n+//! warning: unused result that must be used: streams do nothing unless polled\n+//! ```\n+\n+mod stream;\n+\n+pub use stream::Stream;"}, {"sha": "e37902dae1f2d24de0e5f0752ab2f7b7a5d723f0", "filename": "library/core/src/stream/stream/mod.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,110 @@\n+use crate::ops::DerefMut;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// An interface for dealing with asynchronous iterators.\n+///\n+/// This is the main stream trait. For more about the concept of streams\n+/// generally, please see the [module-level documentation]. In particular, you\n+/// may want to know how to [implement `Stream`][impl].\n+///\n+/// [module-level documentation]: index.html\n+/// [impl]: index.html#implementing-stream\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+#[must_use = \"streams do nothing unless polled\"]\n+pub trait Stream {\n+    /// The type of items yielded by the stream.\n+    type Item;\n+\n+    /// Attempt to pull out the next value of this stream, registering the\n+    /// current task for wakeup if the value is not yet available, and returning\n+    /// `None` if the stream is exhausted.\n+    ///\n+    /// # Return value\n+    ///\n+    /// There are several possible return values, each indicating a distinct\n+    /// stream state:\n+    ///\n+    /// - `Poll::Pending` means that this stream's next value is not ready\n+    /// yet. Implementations will ensure that the current task will be notified\n+    /// when the next value may be ready.\n+    ///\n+    /// - `Poll::Ready(Some(val))` means that the stream has successfully\n+    /// produced a value, `val`, and may produce further values on subsequent\n+    /// `poll_next` calls.\n+    ///\n+    /// - `Poll::Ready(None)` means that the stream has terminated, and\n+    /// `poll_next` should not be invoked again.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Once a stream has finished (returned `Ready(None)` from `poll_next`), calling its\n+    /// `poll_next` method again may panic, block forever, or cause other kinds of\n+    /// problems; the `Stream` trait places no requirements on the effects of\n+    /// such a call. However, as the `poll_next` method is not marked `unsafe`,\n+    /// Rust's usual rules apply: calls must never cause undefined behavior\n+    /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n+    /// regardless of the stream's state.\n+    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n+\n+    /// Returns the bounds on the remaining length of the stream.\n+    ///\n+    /// Specifically, `size_hint()` returns a tuple where the first element\n+    /// is the lower bound, and the second element is the upper bound.\n+    ///\n+    /// The second half of the tuple that is returned is an [`Option`]`<`[`usize`]`>`.\n+    /// A [`None`] here means that either there is no known upper bound, or the\n+    /// upper bound is larger than [`usize`].\n+    ///\n+    /// # Implementation notes\n+    ///\n+    /// It is not enforced that a stream implementation yields the declared\n+    /// number of elements. A buggy stream may yield less than the lower bound\n+    /// or more than the upper bound of elements.\n+    ///\n+    /// `size_hint()` is primarily intended to be used for optimizations such as\n+    /// reserving space for the elements of the stream, but must not be\n+    /// trusted to e.g., omit bounds checks in unsafe code. An incorrect\n+    /// implementation of `size_hint()` should not lead to memory safety\n+    /// violations.\n+    ///\n+    /// That said, the implementation should provide a correct estimation,\n+    /// because otherwise it would be a violation of the trait's protocol.\n+    ///\n+    /// The default implementation returns `(0, `[`None`]`)` which is correct for any\n+    /// stream.\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (0, None)\n+    }\n+}\n+\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+impl<S: ?Sized + Stream + Unpin> Stream for &mut S {\n+    type Item = S::Item;\n+\n+    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+        S::poll_next(Pin::new(&mut **self), cx)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (**self).size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+impl<P> Stream for Pin<P>\n+where\n+    P: DerefMut + Unpin,\n+    P::Target: Stream,\n+{\n+    type Item = <P::Target as Stream>::Item;\n+\n+    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+        self.get_mut().as_mut().poll_next(cx)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (**self).size_hint()\n+    }\n+}"}, {"sha": "c1b79ff716c725af30fe8e271670e08ff44e4b09", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -224,6 +224,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n+#![feature(async_stream)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n@@ -298,7 +299,6 @@\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n-#![feature(raw_ref_macros)]\n #![feature(ready_macro)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n@@ -450,6 +450,8 @@ pub use core::ptr;\n pub use core::raw;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+pub use core::stream;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::u128;"}, {"sha": "c4118bf5d9e7fc8cbf2adfcb87b202a927e793e8", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -12,6 +12,7 @@ use crate::panicking;\n use crate::pin::Pin;\n use crate::ptr::{NonNull, Unique};\n use crate::rc::Rc;\n+use crate::stream::Stream;\n use crate::sync::atomic;\n use crate::sync::{Arc, Mutex, RwLock};\n use crate::task::{Context, Poll};\n@@ -340,6 +341,19 @@ impl<F: Future> Future for AssertUnwindSafe<F> {\n     }\n }\n \n+#[unstable(feature = \"async_stream\", issue = \"79024\")]\n+impl<S: Stream> Stream for AssertUnwindSafe<S> {\n+    type Item = S::Item;\n+\n+    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<S::Item>> {\n+        unsafe { self.map_unchecked_mut(|x| &mut x.0) }.poll_next(cx)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.0.size_hint()\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of an unwinding panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}, {"sha": "6708b27b5050d9e7ef936e3ac127494fc9d80bd4", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -194,7 +194,8 @@ def default_build_triple(verbose):\n     # being detected as GNU instead of MSVC.\n     default_encoding = sys.getdefaultencoding()\n     try:\n-        version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"])\n+        version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n+                stderr=subprocess.DEVNULL)\n         version = version.decode(default_encoding)\n         host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n         triple = host.split(\"host: \")[1]\n@@ -1085,10 +1086,10 @@ def bootstrap(help_triggered):\n     else:\n         build.set_normal_environment()\n \n+    build.build = args.build or build.build_triple()\n     build.update_submodules()\n \n     # Fetch/build the bootstrap\n-    build.build = args.build or build.build_triple()\n     build.download_stage0()\n     sys.stdout.flush()\n     build.ensure_vendored()"}, {"sha": "8a49fe0228c647dbb6d2e1b1ba72d002749fc9a7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1436,8 +1436,7 @@ impl Type {\n             Array(..) => PrimitiveType::Array,\n             RawPointer(..) => PrimitiveType::RawPointer,\n             QPath { ref self_type, .. } => return self_type.inner_def_id(cache),\n-            // FIXME: remove this wildcard\n-            _ => return None,\n+            Generic(_) | Infer | ImplTrait(_) => return None,\n         };\n         cache.and_then(|c| Primitive(t).def_id_full(c))\n     }"}, {"sha": "63a25e5dbfbbb2dd8e02df8e1ad8f84bce2a08c9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -35,6 +35,12 @@ crate enum OutputFormat {\n     Html,\n }\n \n+impl Default for OutputFormat {\n+    fn default() -> OutputFormat {\n+        OutputFormat::Html\n+    }\n+}\n+\n impl OutputFormat {\n     crate fn is_json(&self) -> bool {\n         matches!(self, OutputFormat::Json)\n@@ -118,7 +124,7 @@ crate struct Options {\n     crate enable_per_target_ignores: bool,\n \n     /// The path to a rustc-like binary to build tests with. If not set, we\n-    /// default to loading from $sysroot/bin/rustc.\n+    /// default to loading from `$sysroot/bin/rustc`.\n     crate test_builder: Option<PathBuf>,\n \n     // Options that affect the documentation process\n@@ -142,8 +148,10 @@ crate struct Options {\n     crate crate_version: Option<String>,\n     /// Collected options specific to outputting final pages.\n     crate render_options: RenderOptions,\n-    /// Output format rendering (used only for \"show-coverage\" option for the moment)\n-    crate output_format: Option<OutputFormat>,\n+    /// The format that we output when rendering.\n+    ///\n+    /// Currently used only for the `--show-coverage` option.\n+    crate output_format: OutputFormat,\n     /// If this option is set to `true`, rustdoc will only run checks and not generate\n     /// documentation.\n     crate run_check: bool,\n@@ -271,7 +279,7 @@ crate struct RenderInfo {\n     crate deref_trait_did: Option<DefId>,\n     crate deref_mut_trait_did: Option<DefId>,\n     crate owned_box_did: Option<DefId>,\n-    crate output_format: Option<OutputFormat>,\n+    crate output_format: OutputFormat,\n }\n \n impl Options {\n@@ -537,28 +545,28 @@ impl Options {\n \n         let output_format = match matches.opt_str(\"output-format\") {\n             Some(s) => match OutputFormat::try_from(s.as_str()) {\n-                Ok(o) => {\n-                    if o.is_json()\n+                Ok(out_fmt) => {\n+                    if out_fmt.is_json()\n                         && !(show_coverage || nightly_options::match_is_nightly_build(matches))\n                     {\n                         diag.struct_err(\"json output format isn't supported for doc generation\")\n                             .emit();\n                         return Err(1);\n-                    } else if !o.is_json() && show_coverage {\n+                    } else if !out_fmt.is_json() && show_coverage {\n                         diag.struct_err(\n                             \"html output format isn't supported for the --show-coverage option\",\n                         )\n                         .emit();\n                         return Err(1);\n                     }\n-                    Some(o)\n+                    out_fmt\n                 }\n                 Err(e) => {\n                     diag.struct_err(&e).emit();\n                     return Err(1);\n                 }\n             },\n-            None => None,\n+            None => OutputFormat::default(),\n         };\n         let crate_name = matches.opt_str(\"crate-name\");\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);"}, {"sha": "aa18684aea1978cc4c52a937e4e764c95ab71b66", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -463,7 +463,7 @@ crate fn run_global_ctxt(\n     mut default_passes: passes::DefaultPassOption,\n     mut manual_passes: Vec<String>,\n     render_options: RenderOptions,\n-    output_format: Option<OutputFormat>,\n+    output_format: OutputFormat,\n ) -> (clean::Crate, RenderInfo, RenderOptions) {\n     // Certain queries assume that some checks were run elsewhere\n     // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),"}, {"sha": "e98cb237635fe9c441486a1e25d7ca7648b8eccd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -578,7 +578,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 let (error_format, edition, debugging_options) = diag_opts;\n                 let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n-                    None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n+                    config::OutputFormat::Html => sess.time(\"render_html\", || {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n@@ -588,7 +588,7 @@ fn main_options(options: config::Options) -> MainResult {\n                             tcx,\n                         )\n                     }),\n-                    Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n+                    config::OutputFormat::Json => sess.time(\"render_json\", || {\n                         run_renderer::<json::JsonRenderer<'_>>(\n                             krate,\n                             render_opts,"}, {"sha": "cdbff62d0645ccf9946c08b64f6a8402f94c2a29", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n \n     fn print_results(&self) {\n         let output_format = self.ctx.renderinfo.borrow().output_format;\n-        if output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n+        if output_format.is_json() {\n             println!(\"{}\", self.to_json());\n             return;\n         }"}, {"sha": "f93ccd794117dffc46ad5bcdcdc3bc12d2975f04", "filename": "src/test/codegen/abi-repr-ext.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-repr-ext.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type=\"lib\"]\n+\n+#[repr(i8)]\n+pub enum Type {\n+    Type1 = 0,\n+    Type2 = 1\n+}\n+\n+// CHECK: define signext i8 @test()\n+#[no_mangle]\n+pub extern \"C\" fn test() -> Type {\n+    Type::Type1\n+}"}, {"sha": "dfa3a561ec7ee1b9968635620b200094a89407a6", "filename": "src/test/ui/borrowck/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-subfield.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // pretty-expanded FIXME #23616\n+#![allow(dead_code)]\n \n pub fn main() {\n     struct A {"}, {"sha": "24d2dc645519dff4b62e8dc28eb3fc89017e4f88", "filename": "src/test/ui/cfg/assume-incomplete-release/assume-incomplete.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fassume-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fassume-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fassume-incomplete.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,38 @@\n+// run-pass\n+// aux-build:ver-cfg-rel.rs\n+// revisions: assume no_assume\n+// [assume]compile-flags: -Z assume-incomplete-release\n+\n+#![feature(cfg_version)]\n+\n+extern crate ver_cfg_rel;\n+\n+use ver_cfg_rel::ver_cfg_rel;\n+\n+#[ver_cfg_rel(\"-2\")]\n+fn foo_2() { }\n+\n+#[ver_cfg_rel(\"-1\")]\n+fn foo_1() { }\n+\n+#[cfg(assume)]\n+#[ver_cfg_rel(\"0\")]\n+fn foo() { compile_error!(\"wrong+0\") }\n+\n+#[cfg(no_assume)]\n+#[ver_cfg_rel(\"0\")]\n+fn foo() { }\n+\n+#[ver_cfg_rel(\"1\")]\n+fn bar() { compile_error!(\"wrong+1\") }\n+\n+#[ver_cfg_rel(\"2\")]\n+fn bar() { compile_error!(\"wrong+2\") }\n+\n+fn main() {\n+    foo_2();\n+    foo_1();\n+\n+    #[cfg(no_assume)]\n+    foo();\n+}"}, {"sha": "6787527027e33e230625148df6ae4478401fcba0", "filename": "src/test/ui/cfg/assume-incomplete-release/auxiliary/ver-cfg-rel.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fauxiliary%2Fver-cfg-rel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fauxiliary%2Fver-cfg-rel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fassume-incomplete-release%2Fauxiliary%2Fver-cfg-rel.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,56 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, TokenTree as Tt};\n+use std::str::FromStr;\n+\n+// String containing the current version number of the tip, i.e. \"1.41.2\"\n+static VERSION_NUMBER: &str = include_str!(\"../../../../../version\");\n+\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+struct Version {\n+    major: i16,\n+    minor: i16,\n+    patch: i16,\n+}\n+\n+fn parse_version(s: &str) -> Option<Version> {\n+    let mut digits = s.splitn(3, '.');\n+    let major = digits.next()?.parse().ok()?;\n+    let minor = digits.next()?.parse().ok()?;\n+    let patch = digits.next().unwrap_or(\"0\").trim().parse().ok()?;\n+    Some(Version { major, minor, patch })\n+}\n+\n+#[proc_macro_attribute]\n+/// Emits a #[cfg(version)] relative to the current one, so passing\n+/// -1 as argument on compiler 1.50 will emit #[cfg(version(\"1.49.0\"))],\n+/// while 1 will emit #[cfg(version(\"1.51.0\"))]\n+pub fn ver_cfg_rel(attr: TokenStream, input: TokenStream) -> TokenStream {\n+    let mut v_rel = None;\n+    for a in attr.into_iter() {\n+        match a {\n+            Tt::Literal(l) => {\n+                let mut s = l.to_string();\n+                let s = s.trim_matches('\"');\n+                let v: i16 = s.parse().unwrap();\n+                v_rel = Some(v);\n+                break;\n+            },\n+            _ => panic!(\"{:?}\", a),\n+        }\n+    }\n+    let v_rel = v_rel.unwrap();\n+\n+    let mut v = parse_version(VERSION_NUMBER).unwrap();\n+    v.minor += v_rel;\n+\n+    let attr_str = format!(\"#[cfg(version(\\\"{}.{}.{}\\\"))]\", v.major, v.minor, v.patch);\n+    let mut res = Vec::<Tt>::new();\n+    res.extend(TokenStream::from_str(&attr_str).unwrap().into_iter());\n+    res.extend(input.into_iter());\n+    res.into_iter().collect()\n+}"}, {"sha": "e89cf4550c15475f1772b2dc8d0d20250d0552e7", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,46 @@\n+// run-pass\n+\n+// Test that functional record update/struct update syntax works inside\n+// a closure when the feature `capture_disjoint_fields` is enabled.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+#[derive(Clone)]\n+struct S {\n+    a: String,\n+    b: String,\n+}\n+\n+struct T {\n+    a: String,\n+    s: S,\n+}\n+\n+fn main() {\n+    let a = String::new();\n+    let b = String::new();\n+    let c = String::new();\n+    let s = S {a, b};\n+    let t = T {\n+        a: c,\n+        s: s.clone()\n+    };\n+\n+    let c = || {\n+        let s2 = S {\n+            a: format!(\"New s2\"),\n+            ..s\n+        };\n+        let s3 = S {\n+            a: format!(\"New s3\"),\n+            ..t.s\n+        };\n+        println!(\"{} {}\", s2.a, s2.b);\n+        println!(\"{} {} {}\", s3.a, s3.b, t.a);\n+    };\n+\n+    c();\n+}"}, {"sha": "7ed73abba8608ec1d01b91d4e8c53e39eaf094dd", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/fru_syntax.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f4279e6b825e2d26ef15a75bef7d471b250f2558", "filename": "src/test/ui/consts/min_const_fn/allow_raw_ptr_dereference_const_fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1,11 +1,10 @@\n // check-pass\n #![feature(const_raw_ptr_deref)]\n-#![feature(raw_ref_macros)]\n \n use std::ptr;\n \n const fn test_fn(x: *const i32) {\n-    let x2 = unsafe { ptr::raw_const!(*x) };\n+    let x2 = unsafe { ptr::addr_of!(*x) };\n }\n \n fn main() {}"}, {"sha": "f16f6fd6de4bae8a247387fc5bc59bfc08d16ca7", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -9,8 +9,7 @@\n     core_intrinsics,\n     const_raw_ptr_comparison,\n     const_ptr_offset,\n-    const_raw_ptr_deref,\n-    raw_ref_macros\n+    const_raw_ptr_deref\n )]\n \n const FOO: &usize = &42;\n@@ -64,7 +63,7 @@ const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n \n const _: *const u8 =\n //~^ NOTE\n-    unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n+    unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE\n "}, {"sha": "96b63c0acb0a108e19592ceec05cfd3670f8ce30", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -6,35 +6,35 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  inbounds test failed: pointer must be in-bounds at offset $TWO_WORDS, but is outside bounds of alloc2 which has size $WORD\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `_` at $DIR/ptr_comparisons.rs:62:34\n+   |                  inside `_` at $DIR/ptr_comparisons.rs:61:34\n    | \n-  ::: $DIR/ptr_comparisons.rs:62:1\n+  ::: $DIR/ptr_comparisons.rs:61:1\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    | -------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:67:35\n+  --> $DIR/ptr_comparisons.rs:66:33\n    |\n LL | / const _: *const u8 =\n LL | |\n-LL | |     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   | |___________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n-   |                                     |\n-   |                                     memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n+LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n+   | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n+   |                                   |\n+   |                                   memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:71:27\n+  --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:76:27\n+  --> $DIR/ptr_comparisons.rs:75:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}, {"sha": "78cfcfda8f97176cf47c9df0d727ee63b368dcbc", "filename": "src/test/ui/lint/dead-code/write-only-field.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.rs?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,20 @@\n+#![deny(dead_code)]\n+\n+struct S {\n+    f: i32, //~ ERROR: field is never read\n+    sub: Sub, //~ ERROR: field is never read\n+}\n+\n+struct Sub {\n+    f: i32, //~ ERROR: field is never read\n+}\n+\n+fn field_write(s: &mut S) {\n+    s.f = 1;\n+    s.sub.f = 2;\n+}\n+\n+fn main() {\n+    let mut s = S { f: 0, sub: Sub { f: 0 } };\n+    field_write(&mut s);\n+}"}, {"sha": "70d2149665b203720e5512a046526cbb9b90de11", "filename": "src/test/ui/lint/dead-code/write-only-field.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fwrite-only-field.stderr?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -0,0 +1,26 @@\n+error: field is never read: `f`\n+  --> $DIR/write-only-field.rs:4:5\n+   |\n+LL |     f: i32,\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/write-only-field.rs:1:9\n+   |\n+LL | #![deny(dead_code)]\n+   |         ^^^^^^^^^\n+\n+error: field is never read: `sub`\n+  --> $DIR/write-only-field.rs:5:5\n+   |\n+LL |     sub: Sub,\n+   |     ^^^^^^^^\n+\n+error: field is never read: `f`\n+  --> $DIR/write-only-field.rs:9:5\n+   |\n+LL |     f: i32,\n+   |     ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ea268b9f559fbafcfc24f4982173b01dfad9e443", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "patch": "@@ -1 +1 @@\n-Subproject commit 216a64300563351cad20bb3847110c14561687e0\n+Subproject commit ea268b9f559fbafcfc24f4982173b01dfad9e443"}]}