{"sha": "7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjJjYjIzZjVhYjIyODg0NWVjMzM5NWM2NjliOThiZDBlMTRiMmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-13T02:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-13T02:28:32Z"}, "message": "Merge pull request #2146 from topecongiro/where-on-unit-struct\n\nFormat where clause on unit struct", "tree": {"sha": "27750211fa33b7ac7237dfeb91df3c336b2c27cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27750211fa33b7ac7237dfeb91df3c336b2c27cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaCQNQCRBK7hj4Ov3rIwAAdHIIAA8YXhdBSgjvO/J4P8EekZUP\nf9H3V7RqOKzkVpdYybGlFsjtg9sl6OUOfFIEaFPzs+Hx9x4YhaBru30XBOgaA2SW\n/vL5LVvcNtSEcqWqZtsufrEb6a71uYo83CvuaSlQIgDRE42M5Zq50++APeTDBR9Y\nIPV4YZ4Vhb4XAjo3KDYZi7iQXQQaykNJdCXV7b9VAjgc/S90FSVQ+yESuxKcJ0Rm\nauZvvH/Nls5AsM8xYWHpDCdEVeLzBpQYcYoQ7E3dffe9QGP+q2He3kBILafSXq1H\nerHnBoJCsY2hS1Ttdjy/+OYYFlNaHmACQchnrxRxRWJ1aFTdAj/5ZJbFgpLLCBE=\n=Lq0h\n-----END PGP SIGNATURE-----\n", "payload": "tree 27750211fa33b7ac7237dfeb91df3c336b2c27cb\nparent e6253c4d3178b27b8055e7ce3936f38c645c9bdb\nparent 6b8cd40d07ce0cb52891b419ee2b6574caf1e70f\nauthor Nick Cameron <nrc@ncameron.org> 1510540112 +1300\ncommitter GitHub <noreply@github.com> 1510540112 +1300\n\nMerge pull request #2146 from topecongiro/where-on-unit-struct\n\nFormat where clause on unit struct"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "html_url": "https://github.com/rust-lang/rust/commit/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6253c4d3178b27b8055e7ce3936f38c645c9bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6253c4d3178b27b8055e7ce3936f38c645c9bdb", "html_url": "https://github.com/rust-lang/rust/commit/e6253c4d3178b27b8055e7ce3936f38c645c9bdb"}, {"sha": "6b8cd40d07ce0cb52891b419ee2b6574caf1e70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8cd40d07ce0cb52891b419ee2b6574caf1e70f", "html_url": "https://github.com/rust-lang/rust/commit/6b8cd40d07ce0cb52891b419ee2b6574caf1e70f"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "de0dc763e1be42739b0db669698eca4b6e9603be", "filename": "src/items.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "patch": "@@ -441,7 +441,11 @@ impl<'a> FmtVisitor<'a> {\n             &self.get_context(),\n             generics,\n             self.config.item_brace_style(),\n-            enum_def.variants.is_empty(),\n+            if enum_def.variants.is_empty() {\n+                BracePos::ForceSameLine\n+            } else {\n+                BracePos::Auto\n+            },\n             self.block_indent,\n             mk_sp(span.lo(), body_start),\n             last_line_width(&enum_header),\n@@ -1091,8 +1095,20 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n fn format_unit_struct(context: &RewriteContext, p: &StructParts, offset: Indent) -> Option<String> {\n     let header_str = format_header(p.prefix, p.ident, p.vis);\n     let generics_str = if let Some(generics) = p.generics {\n-        let shape = Shape::indented(offset, context.config).offset_left(header_str.len())?;\n-        rewrite_generics(context, generics, shape, generics.span)?\n+        let hi = if generics.where_clause.predicates.is_empty() {\n+            generics.span.hi()\n+        } else {\n+            generics.where_clause.span.hi()\n+        };\n+        format_generics(\n+            context,\n+            generics,\n+            context.config.item_brace_style(),\n+            BracePos::None,\n+            offset,\n+            mk_sp(generics.span.lo(), hi),\n+            last_line_width(&header_str),\n+        )?\n     } else {\n         String::new()\n     };\n@@ -1120,7 +1136,11 @@ pub fn format_struct_struct(\n             context,\n             g,\n             context.config.item_brace_style(),\n-            fields.is_empty(),\n+            if fields.is_empty() {\n+                BracePos::ForceSameLine\n+            } else {\n+                BracePos::Auto\n+            },\n             offset,\n             mk_sp(header_hi, body_lo),\n             last_line_width(&result),\n@@ -2778,11 +2798,18 @@ fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> S\n     format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n }\n \n+#[derive(PartialEq, Eq)]\n+enum BracePos {\n+    None,\n+    Auto,\n+    ForceSameLine,\n+}\n+\n fn format_generics(\n     context: &RewriteContext,\n     generics: &ast::Generics,\n     brace_style: BraceStyle,\n-    force_same_line_brace: bool,\n+    brace_pos: BracePos,\n     offset: Indent,\n     span: Span,\n     used_width: usize,\n@@ -2792,7 +2819,10 @@ fn format_generics(\n \n     let same_line_brace = if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = context.budget(last_line_used_width(&result, offset.width()));\n-        let option = WhereClauseOption::snuggled(&result);\n+        let mut option = WhereClauseOption::snuggled(&result);\n+        if brace_pos == BracePos::None {\n+            option.suppress_comma = true;\n+        }\n         // If the generics are not parameterized then generics.span.hi() == 0,\n         // so we use span.lo(), which is the position after `struct Foo`.\n         let span_end_before_where = if generics.is_parameterized() {\n@@ -2813,19 +2843,22 @@ fn format_generics(\n             false,\n         )?;\n         result.push_str(&where_clause_str);\n-        force_same_line_brace || brace_style == BraceStyle::PreferSameLine\n+        brace_pos == BracePos::ForceSameLine || brace_style == BraceStyle::PreferSameLine\n             || (generics.where_clause.predicates.is_empty()\n                 && trimmed_last_line_width(&result) == 1)\n     } else {\n-        force_same_line_brace || trimmed_last_line_width(&result) == 1\n+        brace_pos == BracePos::ForceSameLine || trimmed_last_line_width(&result) == 1\n             || brace_style != BraceStyle::AlwaysNextLine\n     };\n+    if brace_pos == BracePos::None {\n+        return Some(result);\n+    }\n     let total_used_width = last_line_used_width(&result, used_width);\n     let remaining_budget = context.budget(total_used_width);\n     // If the same line brace if forced, it indicates that we are rewriting an item with empty body,\n     // and hence we take the closer into account as well for one line budget.\n     // We assume that the closer has the same length as the opener.\n-    let overhead = if force_same_line_brace {\n+    let overhead = if brace_pos == BracePos::ForceSameLine {\n         // 3 = ` {}`\n         3\n     } else {"}, {"sha": "564cc3f01c008fe4fd81dc0f059c850a097ff53d", "filename": "tests/source/structs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "patch": "@@ -272,3 +272,4 @@ pub struct ReadinessCheckRegistry(Mutex<HashMap<Arc<String>, Box<Fn() -> Readine\n \n // #2144 unit struct with generics\n struct MyBox<T:?Sized>;\n+struct MyBoxx<T, S> where T: ?Sized, S: Clone;"}, {"sha": "8015fc8eb2eca968cc160f35f974c5666f9ee66c", "filename": "tests/target/structs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff2cb23f5ab228845ec3395c669b98bd0e14b2b/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=7ff2cb23f5ab228845ec3395c669b98bd0e14b2b", "patch": "@@ -316,3 +316,7 @@ pub struct ReadinessCheckRegistry(\n \n // #2144 unit struct with generics\n struct MyBox<T: ?Sized>;\n+struct MyBoxx<T, S>\n+where\n+    T: ?Sized,\n+    S: Clone;"}]}