{"sha": "9635c763ba5edc8c8ea2868b895548b52f640e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzVjNzYzYmE1ZWRjOGM4ZWEyODY4Yjg5NTU0OGI1MmY2NDBlNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-04T09:36:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-04T09:36:29Z"}, "message": "auto merge of #10783 : sfackler/rust/drop, r=alexcrichton\n\nIt's a more fitting name for the most common use case of this function.", "tree": {"sha": "95752f46f0ef6d8a85c6f9207a863eb5f4d362a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95752f46f0ef6d8a85c6f9207a863eb5f4d362a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9635c763ba5edc8c8ea2868b895548b52f640e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9635c763ba5edc8c8ea2868b895548b52f640e5a", "html_url": "https://github.com/rust-lang/rust/commit/9635c763ba5edc8c8ea2868b895548b52f640e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9635c763ba5edc8c8ea2868b895548b52f640e5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c9522c27647cd5f547a0622ce24026e230de33", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c9522c27647cd5f547a0622ce24026e230de33", "html_url": "https://github.com/rust-lang/rust/commit/63c9522c27647cd5f547a0622ce24026e230de33"}, {"sha": "a243360401790476deea3d502f644783ed8d7563", "url": "https://api.github.com/repos/rust-lang/rust/commits/a243360401790476deea3d502f644783ed8d7563", "html_url": "https://github.com/rust-lang/rust/commit/a243360401790476deea3d502f644783ed8d7563"}], "stats": {"total": 48, "additions": 19, "deletions": 29}, "files": [{"sha": "8c84d44aa795f412f2700635c4f9a359c72fdc7c", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -77,8 +77,8 @@ impl RtioTimer for TimerWatcher {\n         let _missile = match util::replace(&mut self.action, None) {\n             None => missile, // no need to do a homing dance\n             Some(action) => {\n-                util::ignore(missile);      // un-home ourself\n-                util::ignore(action);       // destroy the previous action\n+                drop(missile);      // un-home ourself\n+                drop(action);       // destroy the previous action\n                 self.fire_homing_missile()  // re-home ourself\n             }\n         };"}, {"sha": "8d80f5ff61034db0f72955f0e0cac81d981d2ff0", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -26,7 +26,6 @@ use std::libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY,\n use std::io::{FileMode, FileAccess, Open, Append, Truncate, Read, Write,\n                   ReadWrite, FileStat};\n use std::io::signal::Signum;\n-use std::util;\n use ai = std::io::net::addrinfo;\n \n #[cfg(test)] use std::unstable::run_in_bare_thread;\n@@ -104,7 +103,7 @@ impl HomingMissile {\n \n impl Drop for HomingMissile {\n     fn drop(&mut self) {\n-        let f = ForbidUnwind::new(\"leaving home\");\n+        let _f = ForbidUnwind::new(\"leaving home\");\n \n         // It would truly be a sad day if we had moved off the home I/O\n         // scheduler while we were doing I/O.\n@@ -120,8 +119,6 @@ impl Drop for HomingMissile {\n                 });\n             })\n         }\n-\n-        util::ignore(f);\n     }\n }\n "}, {"sha": "e239f630f01e87b14971a3d19665bede1dd593c9", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -1179,7 +1179,7 @@ mod test {\n         file.write(bytes!(\"foo\"));\n         file.fsync();\n         file.datasync();\n-        util::ignore(file);\n+        drop(file);\n     })\n \n     test!(fn truncate_works() {\n@@ -1210,7 +1210,7 @@ mod test {\n         assert_eq!(stat(&path).size, 9);\n         assert_eq!(File::open(&path).read_to_end(),\n                    (bytes!(\"fo\", 0, 0, 0, 0, \"wut\")).to_owned());\n-        util::ignore(file);\n+        drop(file);\n     })\n \n     test!(fn open_flavors() {"}, {"sha": "83439d4c9030566b7c730bdc1884439cc74a2a5a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -86,3 +86,7 @@ pub use vec::{Vector, VectorVector, CopyableVector, ImmutableVector};\n // Reexported runtime types\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};\n pub use task::spawn;\n+\n+/// Disposes of a value.\n+#[inline]\n+pub fn drop<T>(_x: T) { }"}, {"sha": "8c46a8eff39345a33ed33357f14a2c986a615a91", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -1173,7 +1173,6 @@ mod test {\n         use rt::sleeper_list::SleeperList;\n         use rt::stack::StackPool;\n         use rt::sched::{Shutdown, TaskFromFriend};\n-        use util;\n \n         do run_in_bare_thread {\n             stress_factor().times(|| {\n@@ -1205,7 +1204,7 @@ mod test {\n                 handle.send(TaskFromFriend(task));\n \n                 handle.send(Shutdown);\n-                util::ignore(handle);\n+                drop(handle);\n \n                 thread.join();\n             })"}, {"sha": "9df43dfc5d2556f92dfb0af28c649a5b6e4cab28", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -467,7 +467,6 @@ mod tests {\n     use prelude::*;\n     use super::{Exclusive, UnsafeArc, atomically};\n     use task;\n-    use util;\n     use mem::size_of;\n \n     //#[unsafe_no_drop_flag] FIXME: #9758\n@@ -571,7 +570,7 @@ mod tests {\n         let x2 = x.clone();\n         let left_x = x.try_unwrap();\n         assert!(left_x.is_self());\n-        util::ignore(left_x);\n+        drop(left_x);\n         assert!(x2.try_unwrap().expect_t(\"try_unwrap none\") == ~~\"hello\");\n     }\n \n@@ -590,7 +589,7 @@ mod tests {\n         task::deschedule(); // Try to make the unwrapper get blocked first.\n         let left_x = x.try_unwrap();\n         assert!(left_x.is_self());\n-        util::ignore(left_x);\n+        drop(left_x);\n         p.recv();\n     }\n \n@@ -620,7 +619,7 @@ mod tests {\n             assert!(x2.unwrap() == ~~\"hello\");\n         }\n         // Have to get rid of our reference before blocking.\n-        util::ignore(x);\n+        drop(x);\n         res.recv();\n     }\n "}, {"sha": "85dac814add572fba325c2deb5e27612980abbec", "filename": "src/libstd/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -19,10 +19,6 @@ use unstable::intrinsics;\n #[inline]\n pub fn id<T>(x: T) -> T { x }\n \n-/// Ignores a value.\n-#[inline]\n-pub fn ignore<T>(_x: T) { }\n-\n /**\n  * Swap the values at two mutable locations of the same type, without\n  * deinitialising or copying either one."}, {"sha": "9bb58453539753e93fa67eb0979f8fc20a3ab808", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -63,7 +63,7 @@ mod bar {\n fn main() {\n     cal(foo::Point{x:3, y:9});\n     let a = 3;\n-    ignore(a);\n+    id(a);\n     test::C.b();\n     let _a = from_elem(0, 0);\n }"}, {"sha": "e2220355980e76421474b832380df148b6ab842c", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -14,7 +14,6 @@\n #[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n-use std::util;\n \n fn foo(blk: proc()) {\n     blk();\n@@ -25,6 +24,6 @@ fn main() {\n     let x = arc::Arc::new(true);\n     do foo {\n         assert!(*x.get());\n-        util::ignore(x);\n+        drop(x);\n     }\n }"}, {"sha": "71293555d499dbc6c895d6fe3863d91133f6b545", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -14,7 +14,6 @@\n #[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n-use std::util;\n \n fn foo(blk: once ||) {\n     blk();\n@@ -25,6 +24,6 @@ fn main() {\n     let x = arc::Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n-        util::ignore(x);\n+        drop(x);\n     })\n }"}, {"sha": "7206b9bdb88eb36d1ac1fb4d87906b53f680b140", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -13,7 +13,6 @@\n \n extern mod extra;\n use extra::arc;\n-use std::util;\n \n fn foo(blk: ||) {\n     blk();\n@@ -24,6 +23,6 @@ fn main() {\n     let x = arc::Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n-        util::ignore(x); //~ ERROR cannot move out of captured outer variable\n+        drop(x); //~ ERROR cannot move out of captured outer variable\n     })\n }"}, {"sha": "4b09506b65fb6546ed79e26f475d62a92c412319", "filename": "src/test/run-pass/once-move-out-on-heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -15,7 +15,6 @@\n #[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n-use std::util;\n \n fn foo(blk: proc()) {\n     blk();\n@@ -25,6 +24,6 @@ fn main() {\n     let x = arc::Arc::new(true);\n     do foo {\n         assert!(*x.get());\n-        util::ignore(x);\n+        drop(x);\n     }\n }"}, {"sha": "c7b2cc6124b1b8bae41fbf1d50990af54f90cea0", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9635c763ba5edc8c8ea2868b895548b52f640e5a/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=9635c763ba5edc8c8ea2868b895548b52f640e5a", "patch": "@@ -15,7 +15,6 @@\n #[feature(once_fns)];\n extern mod extra;\n use extra::arc;\n-use std::util;\n \n fn foo(blk: once ||) {\n     blk();\n@@ -25,6 +24,6 @@ fn main() {\n     let x = arc::Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n-        util::ignore(x);\n+        drop(x);\n     })\n }"}]}