{"sha": "32aeb22f5488acc51b01d93684d35d097e6e23f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYWViMjJmNTQ4OGFjYzUxYjAxZDkzNjg0ZDM1ZDA5N2U2ZTIzZjU=", "commit": {"author": {"name": "Michael Wu", "email": "mwu.code@gmail.com", "date": "2017-04-25T22:08:13Z"}, "committer": {"name": "Michael Wu", "email": "mwu.code@gmail.com", "date": "2017-04-26T02:59:31Z"}, "message": "Avoid the hexagon backend on old versions of LLVM", "tree": {"sha": "6ed59902b2cf77db44b62c64a08a29ba2bb8a70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed59902b2cf77db44b62c64a08a29ba2bb8a70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32aeb22f5488acc51b01d93684d35d097e6e23f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32aeb22f5488acc51b01d93684d35d097e6e23f5", "html_url": "https://github.com/rust-lang/rust/commit/32aeb22f5488acc51b01d93684d35d097e6e23f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32aeb22f5488acc51b01d93684d35d097e6e23f5/comments", "author": {"login": "michaelwu", "id": 719931, "node_id": "MDQ6VXNlcjcxOTkzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/719931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwu", "html_url": "https://github.com/michaelwu", "followers_url": "https://api.github.com/users/michaelwu/followers", "following_url": "https://api.github.com/users/michaelwu/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwu/subscriptions", "organizations_url": "https://api.github.com/users/michaelwu/orgs", "repos_url": "https://api.github.com/users/michaelwu/repos", "events_url": "https://api.github.com/users/michaelwu/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwu", "id": 719931, "node_id": "MDQ6VXNlcjcxOTkzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/719931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwu", "html_url": "https://github.com/michaelwu", "followers_url": "https://api.github.com/users/michaelwu/followers", "following_url": "https://api.github.com/users/michaelwu/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwu/subscriptions", "organizations_url": "https://api.github.com/users/michaelwu/orgs", "repos_url": "https://api.github.com/users/michaelwu/repos", "events_url": "https://api.github.com/users/michaelwu/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9", "html_url": "https://github.com/rust-lang/rust/commit/c558a2ae37052dc1f12aa4e40578eb4ae9aca3b9"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "3fd75146193e75e7712098c6022b5ded840be514", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/32aeb22f5488acc51b01d93684d35d097e6e23f5/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32aeb22f5488acc51b01d93684d35d097e6e23f5/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=32aeb22f5488acc51b01d93684d35d097e6e23f5", "patch": "@@ -17,30 +17,24 @@ use std::path::{PathBuf, Path};\n \n use build_helper::output;\n \n-fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) {\n-    let mut version_cmd = Command::new(llvm_config);\n-    version_cmd.arg(\"--version\");\n-    let version_output = output(&mut version_cmd);\n-    let mut parts = version_output.split('.').take(2)\n-        .filter_map(|s| s.parse::<u32>().ok());\n-    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n-            // Force the link mode we want, preferring static by default, but\n-            // possibly overridden by `configure --enable-llvm-link-shared`.\n-            if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n-                return (\"dylib\", Some(\"--link-shared\"));\n-            } else {\n-                return (\"static\", Some(\"--link-static\"));\n-            }\n-        } else if major == 3 && minor == 8 {\n-            // Find out LLVM's default linking mode.\n-            let mut mode_cmd = Command::new(llvm_config);\n-            mode_cmd.arg(\"--shared-mode\");\n-            if output(&mut mode_cmd).trim() == \"shared\" {\n-                return (\"dylib\", None);\n-            } else {\n-                return (\"static\", None);\n-            }\n+fn detect_llvm_link(major: u32, minor: u32, llvm_config: &Path)\n+    -> (&'static str, Option<&'static str>) {\n+    if major > 3 || (major == 3 && minor >= 9) {\n+        // Force the link mode we want, preferring static by default, but\n+        // possibly overridden by `configure --enable-llvm-link-shared`.\n+        if env::var_os(\"LLVM_LINK_SHARED\").is_some() {\n+            return (\"dylib\", Some(\"--link-shared\"));\n+        } else {\n+            return (\"static\", Some(\"--link-static\"));\n+        }\n+    } else if major == 3 && minor == 8 {\n+        // Find out LLVM's default linking mode.\n+        let mut mode_cmd = Command::new(llvm_config);\n+        mode_cmd.arg(\"--shared-mode\");\n+        if output(&mut mode_cmd).trim() == \"shared\" {\n+            return (\"dylib\", None);\n+        } else {\n+            return (\"static\", None);\n         }\n     }\n     (\"static\", None)\n@@ -92,9 +86,25 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components =\n-        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\", \"msp430\",\n-         \"sparc\", \"nvptx\", \"hexagon\"];\n+    let mut optional_components =\n+        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\",\n+             \"systemz\", \"jsbackend\", \"msp430\", \"sparc\", \"nvptx\"];\n+\n+    let mut version_cmd = Command::new(&llvm_config);\n+    version_cmd.arg(\"--version\");\n+    let version_output = output(&mut version_cmd);\n+    let mut parts = version_output.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    let (major, minor) =\n+        if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+            (major, minor)\n+        } else {\n+            (3, 7)\n+        };\n+\n+    if major > 3 {\n+        optional_components.push(\"hexagon\");\n+    }\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n@@ -158,7 +168,7 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n-    let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);\n+    let (llvm_kind, llvm_link_arg) = detect_llvm_link(major, minor, &llvm_config);\n \n     // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host"}]}